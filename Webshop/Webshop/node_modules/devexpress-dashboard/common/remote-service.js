/**
* DevExpress Dashboard (remote-service.js)
* Version:  22.2.4
* Build date: Jan 24, 2023
* Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AjaxRemoteService = void 0;
const $ = require("jquery");
const _utils_1 = require("../data/_utils");
function findGloballyDefinedMethod(...path) {
    return path.reduce((acc, item) => {
        if (acc)
            return acc[item];
        return undefined;
    }, window);
}
class AjaxRemoteService {
    constructor(options = {}) {
        this.beforeSend = () => { };
        this.complete = () => { };
        this.headers = {};
        this._applyOptions(options);
    }
    _applyOptions(options = {}) {
        if (_utils_1.type.isDefined(options.beforeSend)) {
            this.beforeSend = options.beforeSend;
        }
        else {
            this.beforeSend = () => { };
        }
        if (_utils_1.type.isDefined(options.headers)) {
            this.headers = options.headers;
        }
        else {
            this.headers = {};
        }
        if (_utils_1.type.isDefined(options.complete)) {
            this.complete = options.complete;
        }
        else {
            this.complete = () => { };
        }
    }
    getFromServer(url, data, queryOptions) {
        var obsoleteGetFromServer = findGloballyDefinedMethod('DevExpress', 'Dashboard', 'getFromServer');
        if (obsoleteGetFromServer) {
            console.warn('This method is obsolete. Please use **remoteService** option to customize HTTP requests.');
            return obsoleteGetFromServer(url, data, queryOptions);
        }
        return $.ajax(Object.assign({ url: url, dataType: 'json', data: data, beforeSend: this.beforeSend, headers: this.headers, complete: this.complete }, queryOptions));
    }
    postToServer(url, data) {
        var obsoletePostToServer = findGloballyDefinedMethod('DevExpress', 'Dashboard', 'postToServer');
        if (obsoletePostToServer) {
            console.warn('This method is obsolete. Please use **remoteService** option to customize HTTP requests.');
            return obsoletePostToServer(url, data);
        }
        return $.ajax({
            method: 'post',
            url: url,
            dataType: 'json',
            contentType: 'application/json',
            jsonp: false,
            data: data === null || data === undefined ? '' : JSON.stringify(data),
            beforeSend: this.beforeSend,
            headers: this.headers,
            complete: this.complete
        });
    }
    performPostback(url, args) {
        var obsoletePerformPostback = findGloballyDefinedMethod('DevExpress', 'Dashboard', 'performPostback');
        if (obsoletePerformPostback) {
            console.warn('This method is obsolete. Please use **remoteService** option to customize HTTP requests.');
            return obsoletePerformPostback(url, args);
        }
        var $div = $.fn.constructor('<div>').appendTo('body');
        var $form = $.fn.constructor('<form>', {
            action: url,
            method: 'POST',
            target: '_blank'
        }).appendTo($div);
        var $input = $.fn.constructor('<input>', {
            id: 'dx-db-export-input-id',
            name: 'dx-db-export',
            type: 'hidden',
            value: encodeURIComponent(args)
        }).appendTo($form);
        Object.keys(this.headers).forEach(headerName => {
            var $input = $.fn.constructor('<input>', {
                name: headerName,
                type: 'hidden',
                value: encodeURIComponent(this.headers[headerName])
            }).appendTo($form);
        });
        $form.submit();
        $div.remove();
    }
}
exports.AjaxRemoteService = AjaxRemoteService;
