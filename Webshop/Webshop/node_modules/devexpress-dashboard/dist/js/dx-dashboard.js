/**
* DevExpress Dashboard (dx-dashboard.js)
* Version:  22.2.4
* Build date: Jan 24, 2023
* Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 66082:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


const _obsolete_helper_1 = __webpack_require__(64060);
__webpack_require__(65590);
const Data = __webpack_require__(27197);
const DataInternal = __webpack_require__(94);
const ViewerInternal = __webpack_require__(16340);
const Common = __webpack_require__(50999);
const CommonInternal = __webpack_require__(70771);
const Metadata = __webpack_require__(97749);
const Model = __webpack_require__(14198);
const ModelInternal = __webpack_require__(47350);
const Designer = __webpack_require__(46421);
const DesignerInternal = __webpack_require__(29297);
var DevExpress = window.DevExpress || {};
DevExpress.Dashboard = Common;
DevExpress.Dashboard.Data = Data;
DevExpress.Dashboard.Model = Model;
DevExpress.Dashboard.Designer = Designer;
Object.defineProperty(DevExpress.Dashboard.Designer, 'TextBoxItemEditorExtension', {
    get: () => {
        return (__webpack_require__(99689).TextBoxItemEditorExtension);
    },
    enumerable: false,
    configurable: true
});
DevExpress.Dashboard.Metadata = Metadata;
DevExpress.Dashboard.Internal = CommonInternal;
DevExpress.Dashboard.Internal.Data = DataInternal;
DevExpress.Dashboard.Internal.Model = ModelInternal;
DevExpress.Dashboard.Internal.Designer = DesignerInternal;
DevExpress.Dashboard.Internal.Viewer = ViewerInternal;
function defineClassReplace(memberName) {
    _obsolete_helper_1.defineClassMoved(memberName, DevExpress.Dashboard, DevExpress.Dashboard.Designer, 'DevExpress.Dashboard', 'DevExpress.Dashboard.Designer', 'See https://www.devexpress.com/bcid=BC4459 for details.');
}
defineClassReplace('DashboardItemMenuExtension');
defineClassReplace('DashboardColorSchemeEditorExtension');
defineClassReplace('DashboardCurrencyEditorExtension');
defineClassReplace('DataSourceBrowserExtension');
defineClassReplace('MultiQueryDataSourceWizardExtension');
defineClassReplace('DataSourceWizardExtension');
defineClassReplace('AvailableDataSourcesExtension');
defineClassReplace('BindingPanelExtension');
defineClassReplace('ConversionPanelExtension');
defineClassReplace('CreateDashboardExtension');
defineClassReplace('InteractivityPanelExtension');
defineClassReplace('OpenDashboardExtension');
defineClassReplace('OptionsPanelExtension');
defineClassReplace('SaveDashboardExtension');
defineClassReplace('DashboardTitleEditorExtension');
defineClassReplace('UndoRedoExtension');
defineClassReplace('DashboardParameterEditorExtension');
defineClassReplace('ToolboxExtension');
defineClassReplace('DashboardMenuItem');
defineClassReplace('DashboardToolboxItem');
defineClassReplace('DashboardToolbarItem');
defineClassReplace('DashboardToolboxGroup');
defineClassReplace('DashboardToolbarGroup');
module.exports = DevExpress['Dashboard'];


/***/ }),

/***/ 9970:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getDataFields = exports.isNonCollectionDataField = exports.DataSourceBrowser = exports.getFirstDataMember = exports.findDataMember = exports.isStartedWith = exports.splitFullFieldName = exports.trimLeadingPathElement = exports.patchCalcFieldPath = void 0;
const analytics_data_1 = __webpack_require__(14376);
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const ef_data_source_1 = __webpack_require__(69468);
const federation_data_source_1 = __webpack_require__(71010);
const mongodb_data_source_1 = __webpack_require__(62410);
const object_data_source_1 = __webpack_require__(43407);
const sql_data_source_1 = __webpack_require__(66265);
const _data_field_1 = __webpack_require__(68951);
const _date_utils_1 = __webpack_require__(76900);
const _knockout_utils_1 = __webpack_require__(4437);
function patchCalcFieldPath(dataSource, calculatedField, fieldName) {
    if (fieldName.indexOf('Parameters.Parameters.') === 0) {
        return 'Parameters.' + fieldName.split('.')[2];
    }
    if (dataSource instanceof sql_data_source_1.SqlDataSource) {
        var query = dataSource.queries().filter(query => query.name() === calculatedField.dataMember())[0];
        if (!!query && query instanceof analytics_data_1.TableQuery) {
            var table = query.tables().filter(table => fieldName.indexOf((table.alias() || table.name()) + '.') === 0)[0];
            if (!!table) {
                return trimLeadingPathElement(fieldName, table.alias() || table.name());
            }
        }
    }
    return fieldName;
}
exports.patchCalcFieldPath = patchCalcFieldPath;
function trimLeadingPathElement(path = '', element) {
    var str = path;
    if (path.indexOf(element) === 0) {
        str = path.substring(element.length);
    }
    return str[0] === '.' ? str.substring(1) : str;
}
exports.trimLeadingPathElement = trimLeadingPathElement;
function splitFullFieldName(fullFieldName) {
    let parts = fullFieldName.split('.');
    return {
        path: parts.slice(0, parts.length - 1).join('.'),
        name: parts[parts.length - 1] || ''
    };
}
exports.splitFullFieldName = splitFullFieldName;
function isStartedWith(path, value) {
    return path.indexOf(value) === 0 && (path.length === value.length || path[value.length] === '.');
}
exports.isStartedWith = isStartedWith;
function findDataMember(dataSource, path) {
    var dataMember = '';
    var fieldPath = path;
    if (dataSource instanceof sql_data_source_1.SqlDataSource) {
        let query = dataSource.queries().filter(q => isStartedWith(path, q.name()))[0];
        if (!!query) {
            dataMember = query.name();
            fieldPath = trimLeadingPathElement(path, dataMember);
        }
    }
    else if (dataSource instanceof ef_data_source_1.EFDataSource) {
        let table = dataSource._tables().filter(t => isStartedWith(path, t.dataMember()))[0];
        if (!!table) {
            dataMember = table.dataMember();
            fieldPath = trimLeadingPathElement(path, dataMember);
        }
    }
    else if (dataSource instanceof federation_data_source_1.FederationDataSource) {
        let query = dataSource.queries().filter(q => isStartedWith(path, q.alias()))[0];
        if (!!query) {
            dataMember = query.alias();
            fieldPath = trimLeadingPathElement(path, dataMember);
        }
    }
    else if (dataSource instanceof mongodb_data_source_1.MongoDBDataSource) {
        let query = dataSource.queries().filter(q => isStartedWith(path, q._actualName()))[0];
        if (!!query) {
            dataMember = query._actualName();
            fieldPath = trimLeadingPathElement(path, dataMember);
        }
    }
    return {
        dataMember: dataMember,
        fieldPath: fieldPath
    };
}
exports.findDataMember = findDataMember;
function getFirstDataMember(dataSource) {
    if (dataSource instanceof sql_data_source_1.SqlDataSource && dataSource.queries().length > 0) {
        return dataSource.queries()[0].name();
    }
    else if (dataSource instanceof ef_data_source_1.EFDataSource && dataSource._tables().length > 0) {
        return dataSource._tables()[0].dataMember();
    }
    else if (dataSource instanceof federation_data_source_1.FederationDataSource && dataSource.queries().length > 0) {
        return dataSource.queries()[0].alias();
    }
    else if (dataSource instanceof mongodb_data_source_1.MongoDBDataSource && dataSource.queries().length > 0) {
        return dataSource.queries()[0]._actualName();
    }
    else if (dataSource instanceof object_data_source_1.ObjectDataSource)
        return undefined;
    throw new Error();
}
exports.getFirstDataMember = getFirstDataMember;
class DataSourceBrowser {
    constructor(_dataSources, isDesignMode, parameters, _serviceClient, isLoading = ko.observable(false)) {
        this._dataSources = _dataSources;
        this.isDesignMode = isDesignMode;
        this.parameters = parameters;
        this._serviceClient = _serviceClient;
        this.isLoading = isLoading;
        this._disposables = [];
        this._dynamicParametersValueCache = {};
        this._dimensionValuesCache = {};
        this._fieldsCache = {};
        this.removeDataSource = (dataSource) => {
            this._dataSources.remove(dataSource);
            this.clearFieldsCache(dataSource.componentName());
        };
        if (isDesignMode()) {
            this._subscribeDataSources();
        }
        this._disposables.push(this.isDesignMode.subscribe(isDesignMode => {
            if (isDesignMode) {
                this._subscribeDataSources();
            }
            else {
                this._unsubscribeDataSources();
            }
        }));
    }
    _cacheNestedFields(path, field) {
        if (field.childNodes().length > 0 && !!field.childNodes()[0].dataMember()) {
            var nestedPath = !!path ? path + '.' + field.dataMember() : field.dataMember();
            this._fieldsCache[nestedPath] = _jquery_helpers_1.createJQueryDeferred().resolve(field.childNodes()).promise();
            field.childNodes().forEach(member => this._cacheNestedFields(nestedPath, member));
        }
    }
    _findInFieldsCache(dataSourceName, dataMemberName, fieldName, constraint, separateGroupFields) {
        var deferred = _jquery_helpers_1.createJQueryDeferred();
        var result = { path: '', field: undefined };
        var keys = Object.keys(this._fieldsCache);
        var fieldPath = dataMemberName ? [dataSourceName, dataMemberName].join('.') : dataSourceName;
        var i = 0;
        var findPromises = [];
        while (!result.field && i < keys.length) {
            var path = keys[i];
            if (path === fieldPath || path.indexOf(fieldPath + '.') === 0) {
                var a = (notClosuredPath, notClosuredFieldPath) => {
                    return (fields) => {
                        let filteredFields = fields.filter(isNonCollectionDataField);
                        for (let i = 0; i < filteredFields.length; i++) {
                            let field = filteredFields[i];
                            var foundField = field.dataMember() === fieldName && constraint(field) ? field : undefined;
                            var groupDataItems = field['groupDataItems'];
                            if ((!foundField || separateGroupFields) && !!groupDataItems && groupDataItems.length > 0) {
                                let foundGroupField = groupDataItems.filter((groupField) => groupField.dataMember() === fieldName)[0];
                                if (foundGroupField) {
                                    foundField = separateGroupFields ? foundGroupField : field;
                                }
                            }
                            if (!!foundField) {
                                result.path = notClosuredPath.substr(notClosuredFieldPath.length).split('.').filter(item => !!item).join('.');
                                result.field = foundField;
                                deferred.resolve(result);
                                break;
                            }
                        }
                    };
                };
                findPromises.push(this._fieldsCache[path].done(a(path, fieldPath)));
            }
            i++;
        }
        _jquery_helpers_1.jqueryWhenArray(findPromises).done(function () {
            if (!result.field) {
                deferred.resolve(result);
            }
        });
        return deferred.promise();
    }
    getDimensionFilterItems(dashboardItem, dimensionDataMember, previousState, branch) {
        var deferred = _jquery_helpers_1.createJQueryDeferred();
        var result = deferred.promise();
        if (!!dashboardItem && !!dimensionDataMember) {
            this._serviceClient.peek().getDimensionFilterItems(dashboardItem, dimensionDataMember, previousState, branch).done((list) => {
                deferred.resolve(list);
            }).fail(() => {
                deferred.resolve([]);
            });
        }
        else {
            deferred.resolve([]);
        }
        return result;
    }
    getDimensionFilterString(dashboardItem, dimensionDataMember, previousState) {
        var deferred = _jquery_helpers_1.createJQueryDeferred();
        var result = deferred.promise();
        if (!!dashboardItem && !!dimensionDataMember) {
            this._serviceClient.peek().getDimensionFilterString(dashboardItem, dimensionDataMember, previousState).done((filterString) => {
                deferred.resolve(filterString);
            }).fail(() => {
                deferred.resolve('');
            });
        }
        else {
            deferred.resolve('');
        }
        return result;
    }
    getDataFieldsArray(dataSourceName, dataMember, fieldPath, filterDelegate = () => true) {
        var id = !!dataMember ? [dataSourceName, dataMember].join('.') : dataSourceName;
        id = !!fieldPath ? [id, fieldPath].join('.') : id;
        var dataSource = this.findDataSource(dataSourceName);
        if (!dataSource) {
            return _jquery_helpers_1.createJQueryDeferred().resolve([]).promise();
        }
        dataSource.calculatedFields().forEach(calcField => {
            var expression = calcField.expression();
            var fieldType = calcField.fieldType();
            var name = calcField.name();
        });
        var result = _jquery_helpers_1.createJQueryDeferred();
        var parentRequests = Object.keys(this._fieldsCache)
            .filter(cachedKey => id.indexOf(cachedKey) === 0)
            .map(cachedKey => this._fieldsCache[cachedKey]);
        if (parentRequests.length === 0) {
            parentRequests = [_jquery_helpers_1.createJQueryDeferred().resolve().promise()];
        }
        _jquery_helpers_1.jqueryWhenArray(parentRequests).done(() => {
            var cachedValue = this._fieldsCache[id];
            if (cachedValue) {
                cachedValue.done((dataFields) => {
                    result.resolve(dataFields.filter(filterDelegate));
                });
            }
            else {
                if (!!dataSourceName && !!dataSource && !!this._serviceClient) {
                    let valueToCache = _jquery_helpers_1.createJQueryDeferred();
                    this._fieldsCache[id] = valueToCache.promise();
                    setTimeout(() => {
                        this._serviceClient.peek().getFieldList(dataSource, dataMember, fieldPath).done((list) => {
                            var members = [];
                            (list || []).forEach(field => {
                                var dataField = new _data_field_1.DataField(field);
                                members.push(dataField);
                                this._cacheNestedFields(id, dataField);
                            });
                            if (!fieldPath) {
                                members = members
                                    .sort((f1, f2) => f1.displayName().localeCompare(f2.displayName()));
                            }
                            valueToCache
                                .resolve(members)
                                .done((dataFields) => result.resolve(dataFields.filter(filterDelegate)));
                        }).fail(() => {
                            valueToCache
                                .resolve([])
                                .done(dataFields => {
                                result.resolve(dataFields);
                            });
                        });
                    }, 1);
                }
                else {
                    result.resolve([]);
                }
            }
        });
        return result.promise();
    }
    isFolder(path) {
        return !!this._fieldsCache[path];
    }
    findPathToFieldInTree(dataSourceName, dataMemberName, fieldName, constraint) {
        var deferred = _jquery_helpers_1.createJQueryDeferred();
        this.getDataFieldsArray(dataSourceName, dataMemberName, '', isNonCollectionDataField).done(() => {
            this._findInFieldsCache(dataSourceName, dataMemberName, fieldName, constraint, false).done(info => deferred.resolve(info.path));
        });
        return deferred.promise();
    }
    findDataField(dataSourceName, dataMemberName, fullFieldName, separateGroupFields = false) {
        var deferred = _jquery_helpers_1.createJQueryDeferred();
        let dataSource = this._dataSources().filter(ds => ds.componentName() === dataSourceName)[0];
        let info = {
            path: '',
            name: fullFieldName
        };
        if (dataSource instanceof object_data_source_1.ObjectDataSource || dataSource instanceof ef_data_source_1.EFDataSource) {
            info = splitFullFieldName(fullFieldName);
        }
        this.getDataFieldsArray(dataSourceName, dataMemberName, info.path, isNonCollectionDataField).done(() => {
            this._findInFieldsCache(dataSourceName, dataMemberName, fullFieldName, (field) => true, separateGroupFields).done(info => deferred.resolve(info.field));
        });
        return deferred.promise();
    }
    fuzzyFindFields(startPath, searchFor) {
        var deferred = _jquery_helpers_1.createJQueryDeferred(), result = [], findPromises = [];
        var strContains = (str, substr) => str.toLowerCase().indexOf(substr.toLowerCase()) !== -1;
        Object.keys(this._fieldsCache).forEach(path => {
            if (path === startPath || path.indexOf(startPath + '.') === 0) {
                findPromises.push(this._fieldsCache[path].done(fields => {
                    fields
                        .filter(field => isNonCollectionDataField)
                        .filter(field => strContains(field.dataMember(), searchFor) || strContains(field.displayName(), searchFor))
                        .forEach(field => result.push({ path: path, field: field }));
                }));
            }
        });
        _jquery_helpers_1.jqueryWhenArray(findPromises).done(() => deferred.resolve(result));
        return deferred.promise();
    }
    findDataSource(dsName) {
        return this._dataSources().filter(ds => ds.componentName() === dsName)[0];
    }
    dataMembersSupported(dsc) {
        var dataSource = dsc && this.findDataSource(dsc.dataSource()) || null;
        return dataSource && dataSource.supportDataMembers;
    }
    getDataFields(dsc) {
        var result = ko.observableArray();
        if (dsc) {
            this.getDataFieldsArray(dsc.dataSource(), dsc.dataMember(), '', isNonCollectionDataField).done((members) => {
                result(members.map(member => member.displayName()));
            });
        }
        return result;
    }
    clearFieldsCache(path) {
        Object.keys(this._fieldsCache).forEach(key => {
            if (key === path || key.indexOf(path + '.') === 0) {
                delete this._fieldsCache[key];
            }
        });
    }
    clearDynamicParametersValueCache() {
        this._dynamicParametersValueCache = {};
    }
    initDataSource(dataSource) {
        if (dataSource instanceof sql_data_source_1.SqlDataSource) {
            this._fieldsCache[dataSource.componentName()] = _jquery_helpers_1.createJQueryDeferred().resolve(dataSource.queries().map((query) => {
                let queryField = new _data_field_1.DataField({ 'DataMember': query.name(), 'Name': query.name(), 'DisplayName': query.name() });
                queryField.hasCalculatedFields = true;
                queryField.isDataSourceNode(true);
                return queryField;
            })).promise();
        }
        else if (dataSource instanceof ef_data_source_1.EFDataSource) {
            this.isLoading(true);
            this.getDataFieldsArray(dataSource.componentName(), '', '', isNonCollectionDataField).done(members => {
                dataSource._tables(members);
                this.isLoading(false);
            });
        }
    }
    getParameterValues(parameterType, dynamicListLookUpSettings) {
        var dsc = dynamicListLookUpSettings;
        var valueMember = dynamicListLookUpSettings.valueMemberName();
        var displayMember = dynamicListLookUpSettings.displayMemberName() || valueMember;
        var sortOrder = dynamicListLookUpSettings.sortOrder();
        var sortByMember = dynamicListLookUpSettings.sortByMember();
        var selectedValues = '';
        if (this.parameters) {
            selectedValues = this.parameters.peek()
                .map(p => {
                return {
                    name: p.name(),
                    value: _date_utils_1.toStringArray(p._actualValue.peek())
                };
            })
                .sort((p1, p2) => p1.name.localeCompare(p2.name))
                .reduce((acc, param) => {
                let value = `${param.name}:${param.value instanceof Array ? param.value.slice().sort().join('|') : param.value}`;
                return !!acc ? `${acc},${value}` : value;
            }, '');
        }
        var key = [parameterType, dsc.dataSource(), dsc.dataMember(), valueMember, displayMember, sortOrder, sortByMember, selectedValues].join('.');
        var parameterValues = this._dynamicParametersValueCache[key];
        if (!parameterValues) {
            parameterValues = ko.observableArray();
            if (!!valueMember && !!displayMember) {
                this._dynamicParametersValueCache[key] = parameterValues;
                this._serviceClient.peek().getParameterValues(dsc.dataSource(), this.findDataSource(dsc.dataSource()), dsc.dataMember(), valueMember, displayMember, sortOrder, sortByMember, parameterType)
                    .done((result) => {
                    parameterValues(result ? result.map(value => ({
                        Value: _date_utils_1.tryConvertToDateTime(value.Value),
                        DisplayText: value.DisplayText
                    })) : undefined);
                    this.dynamicLookUpValuesLoaded && this.dynamicLookUpValuesLoaded(dynamicListLookUpSettings);
                });
            }
        }
        return parameterValues;
    }
    getDimensionUniqueValues(dataSourceName, dataMember, dimension) {
        var def = _jquery_helpers_1.createJQueryDeferred();
        var key = 'DataSource=' + dataSourceName
            + 'DataMember=' + dataMember
            + 'Dimension=' + JSON.stringify(new analytics_utils_1.ModelSerializer({ useRefs: false }).serialize(dimension));
        var dimensionValues = this._dimensionValuesCache[key];
        if (!dimensionValues) {
            dimensionValues = ko.observableArray();
            var dataSource = this.findDataSource(dataSourceName);
            if (!!dataSource && !!dimension) {
                this._dimensionValuesCache[key] = dimensionValues;
                this._serviceClient.peek().getDimensionUniqueValues(dataSource, dataMember, dimension)
                    .done((result) => {
                    if (Array.isArray(result))
                        result = result.map(val => _date_utils_1.tryConvertToDateTime(val));
                    dimensionValues(result);
                    def.resolve(dimensionValues());
                });
            }
        }
        else {
            def.resolve(dimensionValues());
        }
        return def.promise();
    }
    splitFullPath(fullPath = '') {
        var dataSource = '';
        var dataSourceObj = this._dataSources().filter(ds => isStartedWith(fullPath, ds.componentName()))[0];
        if (!!dataSourceObj) {
            dataSource = dataSourceObj.componentName();
        }
        var { dataMember, fieldPath } = findDataMember(dataSourceObj, trimLeadingPathElement(fullPath, dataSource));
        return {
            dataSource: dataSource,
            dataMember: dataMember,
            fieldPath: fieldPath
        };
    }
    _subscribeDataSources() {
        this._dataSources().forEach(dataSource => {
            this.initDataSource(dataSource);
        });
        this._dataSourcesSubscription = _knockout_utils_1.subscribeArrayChange(this._dataSources, {
            added: ds => this.initDataSource(ds),
            deleted: ds => this.clearFieldsCache(ds.componentName())
        });
        this._disposables.push(this._dataSourcesSubscription);
    }
    _unsubscribeDataSources() {
        if (this._dataSourcesSubscription) {
            this._disposables.splice(this._disposables.indexOf(this._dataSourcesSubscription), 1);
            this._dataSourcesSubscription.dispose();
            this._dataSourcesSubscription = undefined;
            this._dataSources().forEach(dataSource => {
                this.clearFieldsCache(dataSource.componentName());
            });
        }
    }
    dispose() {
        this.dynamicLookUpValuesLoaded = null;
        this._disposables.forEach((d) => {
            d.dispose();
        });
    }
}
exports.DataSourceBrowser = DataSourceBrowser;
function isNonCollectionDataField(dataField) {
    if (!dataField)
        return;
    let nodeType = ko.unwrap(dataField.nodeType);
    let childNodes = ko.unwrap(dataField.childNodes);
    let isList = dataField.isList && ko.unwrap(dataField.isList);
    return !(nodeType === 'DataMember' && isList);
}
exports.isNonCollectionDataField = isNonCollectionDataField;
function getDataFields(fieldsNames, dataSource, dataMember, dataFieldProvider) {
    var deferred = _jquery_helpers_1.createJQueryDeferred();
    const promises = fieldsNames.map(field => dataFieldProvider.findDataField(dataSource, dataMember, field, true));
    _jquery_helpers_1.jqueryWhen(...promises).done((...fields) => {
        deferred.resolve(fields.filter(field => !!field));
    });
    return deferred.promise();
}
exports.getDataFields = getDataFields;


/***/ }),

/***/ 49105:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.requestParamsValidator = exports.combineOptions = exports.toCancelableSequenceAction = exports.CancellationToken = exports.getDimensionsExpressions = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const _helpers_1 = __webpack_require__(8661);
const _data_source_browser_1 = __webpack_require__(9970);
function getDimensionsExpressions(dashboardItem, dataFieldProvider) {
    let deferred = _jquery_helpers_1.createJQueryDeferred();
    let fieldsNames = dashboardItem._dimensions.map(d => d.dataMember());
    _data_source_browser_1.getDataFields(fieldsNames, dashboardItem.dataSource(), dashboardItem.dataMember(), dataFieldProvider)
        .done((fields) => {
        let dimensionsExpressions = {};
        dashboardItem._dimensions.map(dim => {
            let field = fields.filter(f => f.dataMember() === dim.dataMember())[0];
            dimensionsExpressions[dim.uniqueName()] = _helpers_1.getDimensionExpression(dim.dataMember(), dim.dateTimeGroupInterval(), dim.textGroupInterval(), field.fieldType());
        });
        deferred.resolve(dimensionsExpressions);
    });
    return deferred.promise();
}
exports.getDimensionsExpressions = getDimensionsExpressions;
class CancellationToken {
    constructor(source) {
        this._source = source;
    }
    static get None() {
        return new CancellationToken(_jquery_helpers_1.createJQueryDeferred());
    }
    get canceled() {
        return this._source.state() === 'rejected';
    }
}
exports.CancellationToken = CancellationToken;
function toCancelableSequenceAction(action) {
    let cancelableSequenceAction = action;
    if (cancelableSequenceAction.cancelableAction)
        return cancelableSequenceAction;
    else
        return Object.assign(Object.assign({}, action), { cancelableAction: (options, cancellationToken) => cancelableSequenceAction.action(options) });
}
exports.toCancelableSequenceAction = toCancelableSequenceAction;
function combineOptions(previousOptions, options) {
    let result = Object.assign({}, previousOptions);
    options.forEach(op => {
        if (op.surfaceLeft !== previousOptions.surfaceLeft)
            result.surfaceLeft = op.surfaceLeft;
        if (op.surfaceTop !== previousOptions.surfaceTop)
            result.surfaceTop = op.surfaceTop;
    });
    return result;
}
exports.combineOptions = combineOptions;
exports.requestParamsValidator = {
    isValid(requestParams) {
        return typeof requestParams.dashboardId !== 'symbol'
            && typeof requestParams.dashboardId !== 'object'
            || requestParams.dashboardId === null;
    }
};


/***/ }),

/***/ 56826:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DesignerDataServiceClient = exports.ViewerDataServiceClient = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const data_dashboard_item_1 = __webpack_require__(70355);
const parameter_1 = __webpack_require__(12052);
const _helpers_1 = __webpack_require__(49105);
class ViewerDataServiceClient {
    constructor(_dashboardContainer, _errorHandler, _dataServiceUrls, _remoteService) {
        this._dashboardContainer = _dashboardContainer;
        this._errorHandler = _errorHandler;
        this._dataServiceUrls = _dataServiceUrls;
        this._remoteService = _remoteService;
        this.getColoringScheme = (itemName = '') => {
            throw new Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode'));
        };
        this.getDashboardPalette = () => {
            throw new Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode'));
        };
        this.getItemData = (item, isModeAllowsToReduceData) => {
            return this._performRequest(this._dataServiceUrls.DashboardItemGetAction, {
                itemId: item.componentName(),
                query: this._getItemDataQuery(item, isModeAllowsToReduceData)
            });
        };
        this.getBatchItemData = (items, isModeAllowsToReduceData) => {
            return this._performRequest(this._dataServiceUrls.DashboardItemBatchGetAction, {
                items: items.reduce((acc, item) => {
                    acc[item.componentName()] = this._getItemDataQuery(item, isModeAllowsToReduceData);
                    return acc;
                }, {})
            });
        };
        this.getMapShapeFile = (itemName) => {
            return this._performRequest(this._dataServiceUrls.GetMapShapeFileAction, {
                itemId: itemName
            });
        };
        this.getUnderlyingData = (itemName, columnValues, rowValues, columnNames, dataQueryParams) => {
            return this._performRequest(this._dataServiceUrls.GetUnderlyingDataAction, {
                itemId: itemName,
                query: dataQueryParams,
                columnValues: columnValues,
                rowValues: rowValues,
                columnNames: columnNames
            });
        };
        this.markDataSourcesForReload = () => {
            const requestArgs = {
                dashboardId: this._dashboardContainer.id
            };
            this._ensureClientServerContract(requestArgs);
            return this._remoteService.postToServer(this._dataServiceUrls.MarkDataSourcesForReloadAction, requestArgs);
        };
    }
    getParameterValues(dataSourceId, dataSource, dataMember, valueMember, displayMember, sortOrder, sortByMember, parameterType) {
        return this._performRequest(this._dataServiceUrls.ParameterValuesAction, {
            dataSourceId: dataSourceId,
            dataMember: dataMember,
            valueMember: valueMember,
            displayMember: displayMember,
            sortOrder: sortOrder,
            sortByMember: sortByMember,
            parameterType: parameterType
        })
            .fail((request) => this._errorHandler.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToLoadParameterValues') + (dataSource && dataSource.name() || dataSourceId), request));
    }
    performExport(exportInfo, exportModels) {
        var commonArgs = this._createCommonArgs();
        this._ensureClientServerContract(commonArgs);
        var args = JSON.stringify(Object.assign(Object.assign({ model: exportModels }, exportInfo), commonArgs));
        this._remoteService.performPostback(this._dataServiceUrls.PerformExportAction, args);
        return;
    }
    getDimensionUniqueValues(dataSource, dataMember, dimension) {
        throw new Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode'));
    }
    getDimensionFilterItems(dashboardItem, dimensionDataMember, previousState, branch) {
        throw new Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode'));
    }
    getDimensionFilterString(dashboardItem, dimensionDataMember, previousState) {
        throw new Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode'));
    }
    getFieldList(dataSource, dataMember, fieldPath) {
        throw new Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode'));
    }
    convertItem(item, destinationItemTypeName) {
        throw new Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode'));
    }
    _getItemDataQuery(item, isModeAllowsToReduceData) {
        let dataQueryParams = _jquery_helpers_1.deepExtend({}, item._getDataQueryParams());
        let isDataItem = item instanceof data_dashboard_item_1.DataDashboardItem;
        if (isDataItem && isModeAllowsToReduceData && item._limitDataState.enabled) {
            dataQueryParams.LimitVisibleData = true;
        }
        return dataQueryParams;
    }
    _queryParamsToQueryString(dataQueryParams) {
        var urlQuery = {};
        if (dataQueryParams) {
            Object.keys(dataQueryParams).forEach(name => {
                var value = ko.unwrap(dataQueryParams[name]);
                if (!!value) {
                    if (typeof value === 'object') {
                        if (Object.keys(value).length > 0) {
                            urlQuery[name] = JSON.stringify(value);
                        }
                    }
                    else {
                        urlQuery[name] = value;
                    }
                }
            });
        }
        return Object.keys(urlQuery).length === 0 ? '' : _jquery_helpers_1.jqueryQueryParam(urlQuery);
    }
    _createCommonArgs() {
        return {
            dashboardId: this._dashboardContainer.id,
            parameters: parameter_1._getParametersQuery(this._dashboardContainer.dashboard.parameters())
        };
    }
    _performRequest(url, requestArgs) {
        var commonArgs = this._createCommonArgs();
        Object.keys(requestArgs).forEach(argsKey => {
            if (commonArgs[argsKey]) {
                throw Error(`The '${argsKey}' request argument key is reserved for common event args`);
            }
            else {
                commonArgs[argsKey] = requestArgs[argsKey];
            }
        });
        this._ensureClientServerContract(commonArgs);
        return this._performRequestCore(url, commonArgs);
    }
    _performRequestCore(url, params) {
        var queryString = this._queryParamsToQueryString(params);
        if (queryString) {
            var urlSeparator = url.indexOf('?') == -1 ? '?' : '&';
            queryString = urlSeparator + queryString;
        }
        var fullUrl = url + queryString;
        if (fullUrl.length < ViewerDataServiceClient.maxQueryStringLength) {
            return this._remoteService.getFromServer(fullUrl);
        }
        else {
            return this._remoteService.postToServer(url, params);
        }
    }
    _ensureClientServerContract(requestParams) {
        if (_helpers_1.requestParamsValidator.isValid(requestParams)) {
            requestParams.dashboardId = String(requestParams.dashboardId);
        }
        else {
            console.error(`Incorrect type of 'dashboardId' option: ${typeof requestParams.dashboardId}`);
        }
    }
}
exports.ViewerDataServiceClient = ViewerDataServiceClient;
ViewerDataServiceClient.maxQueryStringLength = 2000;
class DesignerDataServiceClient extends ViewerDataServiceClient {
    constructor(_dashboardContainer, _errorHandler, _dataServiceUrls, _remoteService) {
        super(_dashboardContainer, _errorHandler, _dataServiceUrls, _remoteService);
        this.getColoringScheme = (itemName = '') => {
            return this._performRequest(this._dataServiceUrls.GetColoringSchemeAction, {
                itemId: itemName,
                query: itemName ? this._dashboardContainer.dashboard._findDataItem(itemName)._getDataQueryParams() : {}
            })
                .fail(request => { this._errorHandler.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToGetColorScheme'), request); });
        };
        this.getDashboardPalette = () => {
            const requestArgs = {
                dashboardId: this._dashboardContainer.id
            };
            this._ensureClientServerContract(requestArgs);
            return this._remoteService.postToServer(this._dataServiceUrls.GetDashboardPaletteAction, requestArgs);
        };
    }
    convertItem(item, destinationItemTypeName) {
        return this._performRequest(this._dataServiceUrls.ConvertItemAction, {
            itemId: item.componentName(),
            destinationItemTypeName: destinationItemTypeName
        })
            .fail((request) => { this._errorHandler.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToConvertItemToType') + destinationItemTypeName, request); });
    }
    getDimensionUniqueValues(dataSource, dataMember, dimension) {
        return this._performRequest(this._dataServiceUrls.DimensionUniqueValuesAction, {
            dataSourceId: dataSource.componentName(),
            dimension: new analytics_utils_1.ModelSerializer({ useRefs: false }).serialize(dimension),
            dataMember: dataMember,
        })
            .fail((request) => { this._errorHandler.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues') + dataSource.name(), request); });
    }
    getDimensionFilterItems(item, dimensionDataMember, previousState, branch) {
        return this._performRequest(this._dataServiceUrls.DimensionFilterItemsAction, {
            itemId: item.componentName(),
            query: item._getDataQueryParams(),
            dimensionDataMember: dimensionDataMember,
            previousState: previousState,
            branch: branch
        });
    }
    getDimensionFilterString(item, dimensionDataMember, previousState) {
        return this._performRequest(this._dataServiceUrls.DimensionFilterStringAction, {
            itemId: item.componentName(),
            query: item._getDataQueryParams(),
            dimensionDataMember: dimensionDataMember,
            previousState: previousState,
            branch: null
        });
    }
    getFieldList(dataSource, dataMember, fieldPath) {
        return this._performRequest(this._dataServiceUrls.FieldListAction, {
            dataSourceId: dataSource.componentName(),
            dataMember: dataMember,
            fieldPath: fieldPath
        })
            .fail(request => { this._errorHandler.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource') + dataSource.name(), request); });
    }
    _createCommonArgs() {
        return {
            dashboardId: this._dashboardContainer.id,
            dashboard: this._dashboardContainer.dashboard.getJSON(),
            parameters: parameter_1._getParametersQuery(this._dashboardContainer.dashboard.parameters())
        };
    }
    _performRequestCore(url, data) {
        return this._remoteService.postToServer(url, data);
    }
}
exports.DesignerDataServiceClient = DesignerDataServiceClient;


/***/ }),

/***/ 80835:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 82560:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.extensionNameMap = exports.designerExtensions = exports.defaultExtensions = void 0;
exports.defaultExtensions = {};
exports.designerExtensions = {};
exports.extensionNameMap = {};


/***/ }),

/***/ 85744:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.customViewerItem = exports.CustomItemViewer = void 0;
const _common_1 = __webpack_require__(29009);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _base_item_1 = __webpack_require__(11439);
class CustomItemViewer extends _base_item_1.baseItem {
    constructor(model, container, options) {
        super(_jquery_helpers_1.$unwrap(container), options);
        this.iterateData = (action) => {
            this.model.iterateData(action);
        };
        this.canMasterFilter = (row) => {
            if (!this.model._isMasterFilter())
                return false;
            if (!!row) {
                var preparedRow = this._prepareRow(this._getUniqueValues(row));
                if (!_utils_1.allowSelectValue(preparedRow))
                    return false;
            }
            return true;
        };
        this.canDrillDown = (row) => {
            if (!this.model._isDrillDownEnabled() || !this._canPerformDrillDown())
                return false;
            if (!this.model._isMasterFilter())
                return true;
            if (this._canSetMultipleMasterFilter() && this.allowMultiselection)
                return false;
            if (!!row) {
                var values = this._getUniqueValues(row), level = values.length;
                if (level >= this.model.interactivityTargets().length)
                    return false;
                return this.isSelected(row);
            }
            return true;
        };
        this.setMasterFilter = (row) => {
            if (this.model._isMasterFilter()) {
                var selection = [];
                if (!!row) {
                    var preparedRow = this._prepareRow(this._getUniqueValues(row));
                    if (!_utils_1.allowSelectValue(preparedRow))
                        return false;
                    selection.push(preparedRow);
                    if (this._canSetMultipleMasterFilter() && this.allowMultiselection) {
                        var currentSelection = this.model._actualSelectionValues() || [];
                        if (_utils_1.arrayContains(currentSelection, preparedRow))
                            selection = currentSelection.filter(row => !_utils_1.arrayEquals(row, preparedRow));
                        else
                            selection = currentSelection.concat(selection);
                    }
                }
                var name = this.model.componentName();
                if (selection.length > 0) {
                    let action = this._canSetMultipleMasterFilter() ? _common_1.viewerActions.setMultipleValuesMasterFilter : _common_1.viewerActions.setMasterFilter;
                    this.selected.fire(name, action, selection);
                }
                else {
                    this.clearMasterFilter.fire(name);
                }
                return true;
            }
            return false;
        };
        this.drillDown = (row) => {
            if (this.model._isDrillDownEnabled() && this._canPerformDrillDown()) {
                var values = this._getUniqueValues(row);
                var level = values.length;
                if (level < this.model.interactivityTargets().length) {
                    this.selected.fire(this.model.componentName(), _common_1.viewerActions.drillDown, this._prepareRow(values));
                    return true;
                }
            }
            return false;
        };
        this.model = model;
    }
    contentWidth() {
        return _jquery_helpers_1.getWidth(this.contentRoot);
    }
    contentHeight() {
        return _jquery_helpers_1.getHeight(this.contentRoot);
    }
    setSize(width, height) {
        super.setSize(width, height);
    }
    _renderContent(element, changeExisting, afterRenderCallback) {
        this.renderContent(_jquery_helpers_1.wrapPublicElement(element), changeExisting, afterRenderCallback);
        return false;
    }
    renderContent(element, changeExisting, afterRenderCallback) {
    }
    dispose() {
        super.dispose();
    }
    clearSelection() {
        super.clearSelection();
    }
    setSelection(values) {
        super.setSelection(values);
    }
    allowExportSingleItem() {
        return false;
    }
    getExportInfo() {
        return null;
    }
    getMasterFilterMode() {
        return this.model._masterFilterMode();
    }
    getBindingValue(propertyName, index) {
        return this.model.getBindingValue(propertyName, index);
    }
    getPropertyValue(propertyName) {
        return this.model.customProperties.getValue(propertyName);
    }
    subscribe(propertyName, callback) {
        return this.model.customProperties[propertyName].subscribe(callback);
    }
    isSelected(row) {
        var actualSelectionValues = this.model._actualSelectionValues();
        return actualSelectionValues && _utils_1.arrayContains(actualSelectionValues, this._prepareRow(this._getUniqueValues(row)));
    }
    getInfo() {
        var info = super.getInfo(), exportInfo = this.getExportInfo();
        return exportInfo ? _jquery_helpers_1.deepExtend(info, {
            customItemExportInfo: exportInfo
        }) : info;
    }
    initializeData(newOptions) {
    }
    _initializeData(newOptions) {
        super._initializeData(newOptions);
        this.initializeData(newOptions);
        if (this.options) {
            this.options.allowExport = this.options.allowExport && this.allowExportSingleItem();
        }
    }
    _prepareRow(row) {
        if (this.model._isDrillDownEnabled() && (this._canPerformDrillDown() || this._canPerformDrillUp()))
            return [row[row.length - 1]];
        return row;
    }
    _getUniqueValues(row) {
        var res = [];
        this.model.customBindings.filter(binding => binding.enableInteractivity).forEach(binding => {
            var current = row.getUniqueValue(binding.propertyName);
            if (current) {
                res = res.concat(current);
            }
        });
        return res;
    }
    _isSupportDataAwareExport() {
        return false;
    }
}
exports.CustomItemViewer = CustomItemViewer;
class customViewerItem extends CustomItemViewer {
}
exports.customViewerItem = customViewerItem;


/***/ }),

/***/ 22698:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardControl = void 0;
const analytics_internal_1 = __webpack_require__(19745);
const analytics_widgets_internal_1 = __webpack_require__(86092);
const events_strategy_1 = __webpack_require__(48183);
const options_1 = __webpack_require__(48183);
const popup_1 = __webpack_require__(26519);
const $ = __webpack_require__(65311);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const dashboard_1 = __webpack_require__(15306);
const _knockout_utils_1 = __webpack_require__(4437);
const _obsolete_helper_1 = __webpack_require__(64060);
const custom_item_1 = __webpack_require__(91587);
const serializable_model_1 = __webpack_require__(29591);
const legacy_settings_1 = __webpack_require__(42649);
const _dx_devextreme_themes_integration_1 = __webpack_require__(83257);
const control_options_1 = __webpack_require__(82560);
const _dashboard_update_hub_1 = __webpack_require__(43412);
const _docking_layout_adapter_1 = __webpack_require__(59482);
const _interfaces_1 = __webpack_require__(60136);
const _options_manager_1 = __webpack_require__(47337);
const _update_controller_1 = __webpack_require__(78748);
const notificator_1 = __webpack_require__(16812);
const remote_service_1 = __webpack_require__(84112);
const resource_manager_1 = __webpack_require__(95109);
const _item_viewer_adapter_factory_1 = __webpack_require__(82809);
const _viewer_api_1 = __webpack_require__(40813);
const _data_source_browser_1 = __webpack_require__(9970);
const _helpers_1 = __webpack_require__(49105);
const _service_client_1 = __webpack_require__(56826);
class DashboardControl {
    constructor(element, options = {}) {
        this._repaintRequest = _jquery_helpers_1.createJQueryCallbacks();
        this._extensions = ko.observableArray();
        this._serviceClient = ko.observable();
        this._displayAllData = ko.observable();
        this._isLoading = ko.observable(false);
        this._perDashboardDisposables = [];
        this._layoutInfo = ko.observable(null);
        this._layoutInfoProviderCollection = [];
        this._actualLayoutController = ko.pureComputed(() => this._layoutInfo() && this._layoutInfo().layoutController());
        this._emptyControlTemplates = ko.observableArray();
        this._surfaceLeft = ko.observable(0);
        this._surfaceTop = ko.observable(0);
        this.surfaceLeft = ko.observable(0);
        this.surfaceTop = ko.observable(0);
        this.isDesignMode = ko.observable(true);
        this.dashboardContainer = ko.observable();
        this.dashboard = ko.computed(() => this.dashboardContainer() && this.dashboardContainer().dashboard || null);
        this.customTemplates = ko.observableArray();
        this.getWidgetContainer = () => {
            if (!this._widgetContainer) {
                let wc = this._element.querySelector('.dx-dashboard-widget-container');
                if (wc) {
                    this._widgetContainer = wc;
                }
            }
            return this._widgetContainer;
        };
        this._updateController = new _update_controller_1.UpdateController({
            'updateItemToolbars': {
                action: () => {
                    if (this.dashboard()) {
                        this._viewerApi.updateItemCaptionToolbar();
                    }
                },
                masterActions: ['refreshData', 'reinitializeDashboard', 'loadDashboard']
            },
            'updateDashboardToolbar': {
                action: () => this._reinitializeDashboard(),
                masterActions: ['reinitializeDashboard', 'loadDashboard']
            },
            'refreshData': {
                action: () => this._reinitializeDashboard(),
                masterActions: ['reinitializeDashboard', 'loadDashboard']
            },
            'reinitializeDashboard': {
                action: () => this._reinitializeDashboard(),
                masterActions: ['loadDashboard']
            },
            'loadDashboard': {
                action: () => {
                    if (this.option('dashboardId')) {
                        this._loadDashboardCore(this.option('dashboardId'));
                    }
                    else {
                        this._unloadDashboardCore();
                    }
                }
            },
            'noop': {
                action: () => { },
                masterActions: ['updateItemToolbars', 'updateDashboardToolbar', 'refreshData', 'reinitializeDashboard', 'loadDashboard'],
            }
        }, (stateProvider, action) => {
            switch (stateProvider()) {
                case 'controlInitializing':
                    return 'noop';
                case 'controlInitialized':
                case 'dashboardLoading':
                case 'dashboardLoaded':
                case 'dashboardInitializing':
                    return action === 'loadDashboard' ? action : 'noop';
                case 'dashboardInitialized':
                    return action;
            }
        });
        this._workingModeChangeDeferred = _jquery_helpers_1.createJQueryDeferred();
        this._updateController.switchControlState('controlInitializing');
        this._element = element;
        this._controlOptions = this._getDefaultOptions();
        this._defaultControlOptions = this._getDefaultOptions();
        this._eventsStrategy = events_strategy_1.EventsStrategy.create(this, options.eventsStrategy);
        this._options = new options_1.Options(this._controlOptions, this._defaultControlOptions, this._getOptionsByReference(), this._getDeprecatedOptions());
        this._options.onChanging((name, previousValue, value) => this._optionChanging(name, value, previousValue));
        this._options.onChanged((name, value, previousValue) => this._notifyOptionChanged(name, value));
        this._options.onStartChange(() => this.beginUpdate());
        this._options.onEndChange(() => this.endUpdate());
        if (options.extensions) {
            for (let extensionName in options.extensions) {
                if (control_options_1.extensionNameMap.hasOwnProperty(extensionName)) {
                    const newName = control_options_1.extensionNameMap[extensionName];
                    if (newName !== extensionName) {
                        options.extensions[newName] = options.extensions[extensionName];
                        delete options.extensions[extensionName];
                    }
                }
            }
        }
        this.resizeByTimer = ko.observable(this._defaultControlOptions.resizeByTimer);
        this.option(options);
        this._endpointCollection = this._unrollEndpointCollection(this.option());
        this.remoteService = new remote_service_1.AjaxRemoteService(this.option('ajaxRemoteService'));
        legacy_settings_1.LegacySettings._useCardLegacyLayout = this.option('useCardLegacyLayout');
        this.surfaceLeft.subscribe(value => {
            this._surfaceLeft(value);
            this.repaint();
        });
        this.surfaceTop.subscribe(value => {
            this._surfaceTop(value);
            this.repaint();
        });
        this._dashboardContext = {
            beforeApplyViewerItemOptions: _jquery_helpers_1.createJQueryCallbacks(),
            viewerItemCreated: _jquery_helpers_1.createJQueryCallbacks(),
            viewerItemDispose: _jquery_helpers_1.createJQueryCallbacks(),
            addContextToolbarItems: _jquery_helpers_1.createJQueryCallbacks(),
            viewerItemCreator: {},
            refresh: (itemName) => this.refresh(itemName),
            useNeutralFilterMode: () => this.option('useNeutralFilterMode'),
            isDesignMode: this.isDesignMode,
            viewerItemsManager: null
        };
        this._dashboardContext.beforeApplyViewerItemOptions.add((item, itemOptions, isCreation) => {
            itemOptions.useNeutralFilterMode = this.option('useNeutralFilterMode');
            itemOptions.encodeHtml = this.encodeHtml;
        });
        this._externalTemplates = ko.computed(() => {
            var result = [];
            this.customTemplates().forEach(template => {
                result.push(template);
            });
            this._extensions().forEach(extension => {
                if (extension['template']) {
                    if (typeof extension['template'] === 'string') {
                        result.push({
                            name: extension['template'],
                            data: extension
                        });
                    }
                    else {
                        result.push(extension['template']);
                    }
                }
            });
            return result;
        });
        this.notificationController = new notificator_1.NotificationController();
        this.isDesignMode.subscribe(isDesignMode => {
            this._validateWorkingMode();
        }, null, 'beforeChange');
        this.isDesignMode.subscribe(isDesignMode => {
            this._validateWorkingMode();
            this._initializeServiceClient(this.dashboardContainer());
        });
        this._allowSwitchToDesigner = this.option('workingMode') !== 'ViewerOnly';
        let extensionsToRegister = {};
        for (let name in control_options_1.defaultExtensions) {
            extensionsToRegister[name] = control_options_1.defaultExtensions[name];
        }
        if (this.allowSwitchToDesigner) {
            for (let name in control_options_1.designerExtensions) {
                extensionsToRegister[name] = control_options_1.designerExtensions[name];
            }
        }
        analytics_internal_1._setShowMessageFunc((msg, type, displayTime, debugInfo) => { });
        this._dockingLayoutAdapter = new _docking_layout_adapter_1.DockingLayoutAdapter(this);
        this._dockingLayoutAdapter.start();
        this._raiseEvent('initializing', { component: this });
        this._viewerApi = new _viewer_api_1.ViewerApi(this);
        this._viewerApi.start();
        this._registerDefaultExtensions(extensionsToRegister, this.option('extensions'));
        this._registerKeyProcessing();
        this._isLoading.subscribe(isLoading => this.notificationController.suspended(isLoading));
        this._isLoading(true);
        this._updateController.switchControlState('controlInitialized');
        setTimeout(() => {
            if (!this.dashboard()) {
                this._loadInitialDashboard()
                    .done(() => {
                    var initialDashboardState = this.option('initialDashboardState');
                    if (initialDashboardState) {
                        this.dashboard().stateString = initialDashboardState;
                    }
                })
                    .always(() => { this._isLoading(false); });
            }
            else {
                this._isLoading(false);
            }
        }, 1);
        _defineDashboardControlObsoleteMethods(this);
        if (this.option('renderImmediately')) {
            this.render();
        }
    }
    static _recursiveAsyncEval(sequence, cancellationToken, previousOptions, currentIndex = 0) {
        if (!previousOptions) {
            previousOptions = {
                surfaceLeft: 0
            };
        }
        var def = _jquery_helpers_1.createJQueryDeferred();
        let sequenceActions = sequence[currentIndex];
        if (sequenceActions) {
            let actions = sequenceActions.map(sa => sa.cancelableAction);
            $.when(...actions.map(a => a(previousOptions, cancellationToken)))
                .done((...options) => {
                if (cancellationToken.canceled)
                    def.reject();
                else {
                    DashboardControl._recursiveAsyncEval(sequence, cancellationToken, _helpers_1.combineOptions(previousOptions, options), currentIndex + 1)
                        .done((opts) => {
                        if (cancellationToken.canceled)
                            def.reject();
                        else
                            def.resolve(opts);
                    })
                        .fail(() => def.reject());
                }
            })
                .fail(() => def.reject());
        }
        else {
            if (cancellationToken.canceled)
                def.reject();
            else {
                if (cancellationToken.canceled)
                    def.reject();
                else
                    def.resolve(previousOptions);
            }
        }
        return def.promise();
    }
    get _updateHub() {
        return this._updateHubPrivate;
    }
    get encodeHtml() {
        return this.option('encodeHtml');
    }
    get showConfirmationOnBrowserClosing() { return this.option('showConfirmationOnBrowserClosing'); }
    get allowSwitchToDesigner() {
        return this._allowSwitchToDesigner;
    }
    get maximizedDashboardItemName() {
        var fullscreenItemProvider = this._getFullscreenItemProvider();
        return fullscreenItemProvider && fullscreenItemProvider.maximizedItemName || '';
    }
    get extensions() {
        return this._extensions();
    }
    get _classList() {
        if (this._surfaceTop() !== 0) {
            return 'dx-dashboard-surface-toolbar-visible';
        }
    }
    element() {
        return this._element;
    }
    on(eventName, eventHandler) {
        this._eventsStrategy.on(eventName, eventHandler);
    }
    off(eventName, eventHandler) {
        this._eventsStrategy.off(eventName, eventHandler);
    }
    _raiseEvent(eventName, eventArgs) {
        this._eventsStrategy.fireEvent(eventName, [eventArgs]);
        var optionName = _options_manager_1.getOptionNameByEvent(eventName);
        if (optionName) {
            let func = this.option(optionName);
            if (func) {
                func.call(this, eventArgs);
            }
        }
    }
    option(...args) {
        return this._options.option(...args);
    }
    _silent(...args) {
        return this._options.silent(...args);
    }
    resetOption(name) {
        this.beginUpdate();
        this._options.reset(name);
        this.endUpdate();
    }
    beginUpdate() {
        this._updateController.beginUpdate();
    }
    endUpdate() {
        this._updateController.endUpdate();
    }
    _getOptionValue(name, context) {
        const value = this.option(name);
        return value;
    }
    _getDefaultOptions() {
        return {
            limitVisibleDataMode: 'Designer',
            resizeByTimer: true,
            ajaxRemoteService: {
                beforeSend: () => { },
                complete: () => { },
                headers: {}
            },
            encodeHtml: true,
            useNeutralFilterMode: true,
            allowMaximizeItems: true,
            useCardLegacyLayout: false,
            showConfirmationOnBrowserClosing: true,
            workingMode: 'Designer',
            loadDefaultDashboard: true,
            dataRequestOptions: {},
            extensions: {}
        };
    }
    _getOptionsByReference() {
        return {};
    }
    _getDeprecatedOptions() {
        return {};
    }
    _notifyOptionChanged(option, value) {
        document.createElement;
        const name = option;
        const args = {
            name: name.split(/[.[]/)[0],
            fullName: name,
            value: value,
            component: this
        };
        this._optionChanged(args);
        this._raiseEvent('optionChanged', args);
    }
    _reinitializeDashboard() {
        if (this.dashboard()) {
            var dashboardState = this.getDashboardState();
            this.initializeDashboard(this.option('dashboardId'), this.dashboard().getJSON(), dashboardState && JSON.parse(this.getDashboardState()) || '');
        }
    }
    _getCebabCaseExtensionName(extensionName) {
        const index = Object.keys(control_options_1.extensionNameMap).map(k => control_options_1.extensionNameMap[k]).indexOf(extensionName);
        return index === -1 ? extensionName : Object.keys(control_options_1.extensionNameMap)[index];
    }
    _getCamelCaseExtensionName(extensionName) {
        return control_options_1.extensionNameMap[extensionName] || extensionName;
    }
    _optionChanging(name, value, previousValue) {
        switch (name) {
            case 'workingMode':
                if (this._updateController.getControlState() !== 'controlInitializing' && (previousValue === 'ViewerOnly' || value === 'ViewerOnly')) {
                    throw new Error(`Cannot switch to ${value} from ${previousValue} mode.`);
                }
                break;
        }
    }
    _optionChanged(args) {
        switch (args.name) {
            case 'dashboardId':
                if (this._updateController.getControlState() !== 'dashboardInitializing')
                    this._updateController.addAction('loadDashboard');
                break;
            case 'workingMode':
                if (this._updateController.getControlState() === 'controlInitializing') {
                    this.isDesignMode(args.value === 'Designer');
                }
                else {
                    if (args.value === 'Designer') {
                        this._switchToDesigner();
                    }
                    else {
                        this._switchToViewer();
                    }
                }
                break;
            case 'initialDashboardState':
                break;
            case 'useNeutralFilterMode':
                this._updateController.addAction('reinitializeDashboard');
                break;
            case 'useCardLegacyLayout':
                break;
            case 'resizeByTimer':
                this.resizeByTimer(args.value);
                break;
            case 'endpoint':
                break;
            case 'dataRequestOptions':
                this._updateController.addAction('reinitializeDashboard');
                break;
            case 'encodeHtml':
                this._updateController.addAction('reinitializeDashboard');
                break;
            case 'ajaxRemoteService':
                if (this.remoteService && this.remoteService instanceof remote_service_1.AjaxRemoteService) {
                    this.remoteService._applyOptions(this.option('ajaxRemoteService'));
                }
                break;
            case 'limitVisibleDataMode':
                this._updateController.addAction('reinitializeDashboard');
                break;
            case 'onInitializing':
            case 'onOptionChanged':
                break;
            case 'allowMaximizeItems':
                if (this._actualLayoutController()) {
                    this._actualLayoutController().allowMaximizeItems = args.value;
                }
                this._updateController.addAction('updateItemToolbars');
                break;
            case 'extensions':
                if (this._updateController.getControlState() !== 'controlInitializing') {
                    this._processExtensionsOption(args);
                }
                break;
            case 'onDashboardInitializing':
            case 'onDashboardInitialized':
            case 'onDashboardStateChanged':
            case 'onItemBeginUpdate':
            case 'onItemEndUpdate':
            case 'onDashboardBeginUpdate':
            case 'onDashboardEndUpdate':
            case 'showConfirmationOnBrowserClosing':
            case 'loadDefaultDashboard':
                break;
        }
        this._updateController.commitUpdate();
    }
    _processExtensionsOption(args) {
        if (args.name === args.fullName && args.value === false) {
            this._unregisterExtensionCore(...this._extensions().map(extension => extension.name));
            return;
        }
        if (args.name === args.fullName && typeof args.value === 'object') {
            this._processExtensionsOptions(args.value);
            return;
        }
        else {
            const parts = args.fullName
                .split(/(?:\[|\]|\.)/)
                .filter(item => !!item.length);
            const extensionName = parts[1];
            let extensionOptionParts = parts.slice(2);
            this._processExtensionsOptions({
                [extensionName]: this._createExtensionOption(extensionOptionParts, args.value)
            });
        }
    }
    _createExtensionOption(parts, value) {
        if (parts.length === 0)
            return value;
        return parts.slice(0, parts.length - 1).reverse().reduce((acc, cur) => {
            return { [cur]: acc };
        }, {
            [parts[parts.length - 1]]: value
        });
    }
    _processExtensionsOptions(extensionsOptions) {
        Object.keys(extensionsOptions).forEach(key => {
            let extensionName = key;
            let extensionOptions = extensionsOptions[extensionName];
            if (extensionOptions === false) {
                this._unregisterExtensionCore(extensionName);
            }
            else if (typeof extensionOptions === 'object') {
                var extension = this.findExtension(extensionName);
                if (!extension) {
                    const extensionsFactory = Object.assign(Object.assign({}, control_options_1.defaultExtensions), control_options_1.designerExtensions);
                    const extensionCreator = extensionsFactory[this._getCebabCaseExtensionName(extensionName)];
                    _utils_1.type.isFunction(extensionCreator) && this.registerExtension(extensionCreator(this, extensionOptions));
                }
                else {
                    var optionsManager = extension && extension._optionsManager;
                    if (optionsManager) {
                        Object.keys(extensionOptions).forEach((optionName) => {
                            const extensionArgs = { name: optionName, fullName: optionName, value: extensionOptions[optionName] };
                            var extensionAction = optionsManager.optionChanged(extensionArgs);
                            if (extensionAction)
                                this._updateController.addAction(extensionAction);
                        });
                    }
                }
            }
        });
    }
    _updateLayout() {
        var binders = this._layoutInfoProviderCollection;
        var binder = binders.filter(b => b.condition())[0];
        if (binder && (!this._layoutInfo() || binder.name !== this._layoutInfo().template.name)) {
            this._layoutInfo({
                template: {
                    name: binder.name,
                    data: binder.getViewModel(),
                },
                layoutController: binder.getLayoutController(),
            });
        }
    }
    get _colorSchemeCss() {
        return _dx_devextreme_themes_integration_1.getBaseColorScheme() === 'light' ? 'dx-color-scheme-light' : 'dx-color-scheme-dark';
    }
    repaint() {
        this._repaintRequest.fire();
    }
    render() {
        resource_manager_1.ResourceManager._embedBundledResourcesCore(this._element);
        this._raiseEvent('beforeRender', { component: this });
        var openComment = document.createComment(" ko template: { name: 'dx-dashboard-control' } "), closingComment = document.createComment(' /ko ');
        this._element.appendChild(openComment);
        this._element.appendChild(closingComment);
        this._applyBindings(this._element);
    }
    maximizeDashboardItem(itemName) {
        if (this.dashboard()) {
            var dashboardItem = this.dashboard().findItem(itemName);
            if (dashboardItem) {
                var fullscreenItemProvider = this._getFullscreenItemProvider();
                if (fullscreenItemProvider) {
                    fullscreenItemProvider.maximizeItem(dashboardItem);
                }
            }
            else {
                throw Error("The item with the '" + itemName + "' name does not exist");
            }
        }
    }
    restoreDashboardItem() {
        var fullscreenItemProvider = this._getFullscreenItemProvider();
        fullscreenItemProvider && fullscreenItemProvider.restoreDownItem();
    }
    initializeDashboard(id, dashboardJson, initialState) {
        this._updateController.switchControlState('dashboardInitializing');
        if (this.option('dashboardId') !== id) {
            this.option('dashboardId', id);
        }
        this._unloadDashboardServices();
        var dashboard = new dashboard_1.Dashboard(dashboardJson);
        if (initialState) {
            dashboard._state(initialState);
        }
        let e = {
            component: this,
            dashboard: dashboard,
            dashboardId: id,
            ready: _jquery_helpers_1.createJQueryDeferred().resolve().promise()
        };
        this._raiseEvent('dashboardInitializing', e);
        e.ready.done(() => {
            dashboard.items().forEach(item => item._useNeutralFilterMode(this.option('useNeutralFilterMode')));
            this._perDashboardDisposables.push(_knockout_utils_1.subscribeArrayChange(dashboard.items, {
                added: (newItem) => newItem._useNeutralFilterMode(this.option('useNeutralFilterMode'))
            }));
            var dashboardContainer = { id: id, dashboard: dashboard };
            this._initializeServiceClient(dashboardContainer);
            this._dataSourceBrowser = new _data_source_browser_1.DataSourceBrowser(dashboard.dataSources, this.isDesignMode, dashboard.parameters, this._serviceClient, this._isLoading);
            this._dashboardContext.viewerItemsManager = new _item_viewer_adapter_factory_1.ViewerItemAdaptersManager();
            this._perDashboardDisposables.push(this._dashboardContext.viewerItemsManager);
            this._updateHubPrivate = new _dashboard_update_hub_1.DashboardUpdateHub(dashboard, this.option('dataRequestOptions'), {
                getItemData: (item) => this._serviceClient().getItemData(item, isModeAllowsToReduceData()),
                getBatchItemData: (items) => this._serviceClient().getBatchItemData(items, isModeAllowsToReduceData()),
                getMapShapeFile: (item) => this._serviceClient().getMapShapeFile(item.componentName())
            }, () => this._actualLayoutController() && this._actualLayoutController().visibleItemsProvider || null);
            this._updateHubPrivate.dashboardBeginUpdate = () => this._raiseEvent('dashboardBeginUpdate', {
                component: this,
                dashboardId: this.dashboardContainer().id
            });
            this._updateHubPrivate.dashboardEndUpdate = () => this._raiseEvent('dashboardEndUpdate', {
                component: this,
                dashboardId: this.dashboardContainer().id
            });
            this._updateHubPrivate.itemBeginUpdate = (itemName) => this._raiseEvent('itemBeginUpdate', {
                component: this,
                dashboardId: this.dashboardContainer().id,
                itemName: itemName
            });
            this._updateHubPrivate.itemEndUpdate = (itemName) => this._raiseEvent('itemEndUpdate', {
                component: this,
                dashboardId: this.dashboardContainer().id,
                itemName: itemName
            });
            this.dashboardContainer(dashboardContainer);
            this.notificationController.reset();
            this._updateController.switchControlState('dashboardInitialized');
            this._raiseEvent('dashboardInitialized', {
                component: this,
                dashboardId: id,
                dashboard: dashboard
            });
            this._raiseEvent('dashboardStateChanged', {
                component: this,
                dashboard: dashboard,
                dashboardId: id,
                stateString: dashboard.stateString
            });
            let isModeAllowsToReduceData = () => {
                var limitMode = this.option('limitVisibleDataMode');
                return limitMode === 'DesignerAndViewer' || (this.isDesignMode() && limitMode === 'Designer');
            };
            this._updateHubPrivate.initialize();
            this._perDashboardDisposables.push(this.dashboard()._state.subscribe((_) => {
                this._raiseEvent('dashboardStateChanged', {
                    component: this,
                    dashboard: this.dashboard(),
                    dashboardId: this.dashboardContainer().id,
                    stateString: dashboard.stateString
                });
            }));
        }).fail(() => {
            this.notificationController.reset();
        });
    }
    requestDashboardList() {
        var urls = this._endpointCollection.dashboardUrls;
        if (urls) {
            return this.remoteService.getFromServer(urls.GetDashboardsAction, null, { cache: false })
                .fail(() => {
                this.notificationController.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToLoadDashboards'));
            });
        }
        return _jquery_helpers_1.createJQueryDeferred().reject().promise();
    }
    loadDashboard(dashboardId) {
        var def = _jquery_helpers_1.createJQueryDeferred();
        if (this._dashboardLoadingDeferred) {
            this._dashboardLoadingDeferred.reject();
        }
        this._dashboardLoadingDeferred = def;
        if (this.option('dashboardId') === dashboardId) {
            this._loadDashboardCore(dashboardId);
        }
        else {
            this.option('dashboardId', dashboardId);
        }
        return def.promise();
    }
    _loadDashboardCore(dashboardId) {
        let isValidRequest = _helpers_1.requestParamsValidator.isValid({ dashboardId });
        var urls = this._endpointCollection && this._endpointCollection.dashboardUrls || null;
        if (urls && isValidRequest) {
            const prevDashboardState = this._updateController.getControlState();
            this._updateController.switchControlState('dashboardLoading');
            this.notificationController.showState(_default_1.getLocalizationById('DashboardWebStringId.Notification.DashboardLoading'));
            return this.remoteService.getFromServer(urls.DashboardAction + '/' + encodeURIComponent(dashboardId), null, { cache: false })
                .done((result) => {
                this._updateController.switchControlState('dashboardLoaded');
                if (this.option('dashboardId') === dashboardId) {
                    this.initializeDashboard(dashboardId, result.Dashboard, result.initialState);
                    this._dashboardLoadingDeferred && this._dashboardLoadingDeferred.resolve();
                }
            }).fail((val) => {
                this._updateController.switchControlState(prevDashboardState);
                this._dashboardLoadingDeferred && this._dashboardLoadingDeferred.reject();
                this.notificationController.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToLoadDashboard') + dashboardId, val);
            });
        }
        this._dashboardLoadingDeferred && this._dashboardLoadingDeferred.reject();
        this.notificationController.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToLoadDashboard') + String(dashboardId));
        return _jquery_helpers_1.createJQueryDeferred().reject().promise();
    }
    unloadDashboard() {
        this.option('dashboardId', null);
    }
    _unloadDashboardCore() {
        this._unloadDashboardServices();
        this.dashboardContainer(null);
    }
    switchToViewer() {
        this.option('workingMode', 'Viewer');
    }
    _switchToViewer() {
        var actions = this.extensions
            .filter(extension => !!extension.designerToViewerAction)
            .map(extension => _helpers_1.toCancelableSequenceAction(extension.designerToViewerAction))
            .sort((a, b) => a.orderNo - b.orderNo);
        let groups = _utils_1.groupByProperty(actions, 'orderNo');
        this._workingModeChangeDeferred.reject();
        this._workingModeChangeDeferred = _jquery_helpers_1.createJQueryDeferred();
        return DashboardControl._recursiveAsyncEval(groups, new _helpers_1.CancellationToken(this._workingModeChangeDeferred), { surfaceLeft: this._surfaceLeft(), surfaceTop: this._surfaceTop() })
            .then(options => {
            this.surfaceLeft(options.surfaceLeft);
            this.surfaceTop(options.surfaceTop);
            this.isDesignMode(false);
            this._workingModeChangeDeferred.resolve();
        }, () => this.switchToDesigner());
    }
    switchToDesigner() {
        this.option('workingMode', 'Designer');
    }
    _switchToDesigner() {
        this._validateWorkingMode();
        var actions = this.extensions
            .filter(extension => !!extension.viewerToDesignerAction)
            .map(extension => _helpers_1.toCancelableSequenceAction(extension.viewerToDesignerAction))
            .sort((a, b) => a.orderNo - b.orderNo);
        let groups = _utils_1.groupByProperty(actions, 'orderNo');
        this._workingModeChangeDeferred.reject();
        this._workingModeChangeDeferred = _jquery_helpers_1.createJQueryDeferred();
        return DashboardControl._recursiveAsyncEval(groups, new _helpers_1.CancellationToken(this._workingModeChangeDeferred), { surfaceLeft: this._surfaceLeft(), surfaceTop: this._surfaceTop() })
            .then((options) => {
            this.surfaceLeft(options.surfaceLeft);
            this.surfaceTop(options.surfaceTop);
            this.isDesignMode(true);
            this._workingModeChangeDeferred.resolve();
        }, () => this.switchToViewer());
    }
    reloadData() {
        if (this.dashboard()) {
            this._serviceClient().markDataSourcesForReload().done((result) => {
                this.refresh();
            });
        }
    }
    refresh(args) {
        if (this.dashboard()) {
            var itemNames = [];
            if (!args) {
                itemNames = this.dashboard()._dataDashboardItems().map(item => item.componentName());
            }
            else if (typeof args === 'string') {
                itemNames = [args];
            }
            else if (Array.isArray(itemNames)) {
                itemNames = args;
            }
            else {
                throw Error('Invalid arguments');
            }
            this._updateHubPrivate.refreshItems(itemNames);
        }
    }
    getDashboardState() {
        var dashboard = this.dashboard();
        if (dashboard)
            return dashboard.stateString;
        return null;
    }
    setDashboardState(dashboardState) {
        var dashboard = this.dashboard();
        if (dashboard) {
            if (typeof dashboardState === 'string') {
                dashboard.stateString = dashboardState;
            }
            else {
                dashboard._state(dashboardState);
            }
        }
    }
    getDashboardId() {
        var dashboardContainer = this.dashboardContainer();
        if (dashboardContainer)
            return dashboardContainer.id;
        return null;
    }
    registerIcon(icon) {
        resource_manager_1.ResourceManager.registerIcon(icon);
    }
    registerExtension(...extensions) {
        extensions.forEach(extension => {
            if (this._canAddExtension(extension))
                this._registerExtensionCore(extension);
        });
    }
    _registerExtensionCore(extension) {
        const camelCaseExtensionName = this._getCamelCaseExtensionName(extension.name);
        const optionsManager = extension._optionsManager;
        if (optionsManager) {
            if (typeof this._controlOptions.extensions !== 'object') {
                this._controlOptions.extensions = {};
            }
            this._controlOptions.extensions[camelCaseExtensionName] = optionsManager.getInitialOptions();
            this._defaultControlOptions.extensions[camelCaseExtensionName] = optionsManager.getDefaultOptions();
        }
        else {
            this._controlOptions.extensions = this._controlOptions.extensions || {};
            this._controlOptions.extensions[camelCaseExtensionName] = {};
        }
        this._addExtension(extension);
        this._startExtension(extension);
    }
    findExtension(extensionName) {
        const cebabName = this._getCebabCaseExtensionName(extensionName);
        return this._extensions().filter(ext => ext.name === cebabName)[0];
    }
    unregisterExtension(...extensionNames) {
        extensionNames.forEach(name => {
            const camelName = this._getCamelCaseExtensionName(name);
            this.option(`extensions.${camelName}`, false);
            this._defaultControlOptions.extensions[camelName] = false;
        });
    }
    _unregisterExtensionCore(...extensionNames) {
        extensionNames.forEach(extensionName => {
            var extension = this.findExtension(extensionName);
            if (!!extension) {
                var customItemExtension = extension;
                if (customItemExtension.createViewerItem) {
                    this._dashboardContext.viewerItemCreator[extension.name] = undefined;
                }
                if (customItemExtension.metaData) {
                    delete serializable_model_1.itemTypesMap[extension.name];
                }
                extension.stop && extension.stop();
                this._extensions.remove(extension);
            }
        });
    }
    subscribeExtensionsChanged(handlers) {
        return _knockout_utils_1.subscribeArrayChange(this._extensions, handlers);
    }
    dispose() {
        this._unloadDashboardCore();
        this._viewerApi.stop();
        this._dockingLayoutAdapter.dispose();
        $.fn.constructor(document).off('.dx-dshd');
        ko.cleanNode(this._element);
        this._element.innerHTML = '';
        resource_manager_1.ResourceManager._removeEmbeddedResourcesCore(this._element);
    }
    _renderDashboardItem(element, dashboardItemName, isStandalone = true) {
        var openComment = document.createComment(" ko template: { name: 'dx-dashboard-standalone-item' } "), closingComment = document.createComment(' /ko ');
        element.appendChild(openComment);
        element.appendChild(closingComment);
        var dashboardItem = ko.computed(() => this.dashboard() && this.dashboard().items().filter(i => i.componentName.peek() === dashboardItemName)[0]);
        this._applyBindings(element, {
            dashboardItem: dashboardItem,
            context: this._dashboardContext,
            sizeController: new _interfaces_1.SingleItemSizeController(element, this._repaintRequest),
            isStandalone: isStandalone
        });
    }
    _getFullscreenItemProvider() {
        return this._actualLayoutController() && this._actualLayoutController().fullscreenItemProvider;
    }
    _registerKeyProcessing() {
        _staticInitialize();
        var _ignoreKeyProcessing = () => {
            if (!this.isDesignMode() || !this._actualLayoutController()) {
                return true;
            }
            var activeElement = $.fn.constructor(document.activeElement);
            if (activeElement.is('textarea') || activeElement.is(':input') && (['password', 'text', 'number'].indexOf(activeElement.attr('type')) != -1)) {
                return true;
            }
            return false;
        };
        $.fn.constructor(document).on('keyup.dx-dshd', (e) => {
            if (_ignoreKeyProcessing()) {
                return;
            }
            if (this._dockingLayoutAdapter.processKeyEvent && this._dockingLayoutAdapter.processKeyEvent('keyup', e)) {
                return false;
            }
            var i;
            for (i = 0; i < this._extensions().length; i++) {
                var extension = this._extensions()[i];
                if (extension.processKeyEvent && extension.processKeyEvent('keyup', e)) {
                    return false;
                }
            }
        });
        $.fn.constructor(document).on('keydown.dx-dshd', (e) => {
            if (_ignoreKeyProcessing()) {
                return;
            }
            var i;
            for (i = 0; i < this._extensions().length; i++) {
                var extension = this._extensions()[i];
                if (extension.processKeyEvent && extension.processKeyEvent('keydown', e)) {
                    return false;
                }
            }
        });
    }
    _registerDefaultExtensions(extensions, extensionOptions = {}) {
        if (extensionOptions !== false) {
            for (let extensionName in extensions) {
                const camelName = this._getCamelCaseExtensionName(extensionName);
                let options = extensionOptions[camelName];
                if (options !== false) {
                    if (!!options && typeof options !== 'object') {
                        throw Error('Extension options ');
                    }
                    let extension = extensions[extensionName](this, options);
                    this._canAddExtension(extension) && this._addExtension(extension);
                    var optionsManager = extension._optionsManager;
                    this._controlOptions.extensions[camelName] = _jquery_helpers_1.deepExtend({}, optionsManager && optionsManager.getInitialOptions(), options);
                    this._defaultControlOptions.extensions[camelName] = optionsManager && optionsManager.getDefaultOptions();
                }
            }
            if (typeof extensionOptions === 'object') {
                for (let extensionName in extensionOptions) {
                    const camelName = this._getCamelCaseExtensionName(extensionName);
                    let options = extensionOptions[camelName];
                    if (typeof options === 'function') {
                        let extensionCreator = options;
                        let extension = extensionCreator(this);
                        this._canAddExtension(extension) && this._addExtension(extension);
                        var optionsManager = extension._optionsManager;
                        this._controlOptions.extensions[camelName] = optionsManager && optionsManager.getInitialOptions();
                        this._defaultControlOptions.extensions[camelName] = optionsManager && optionsManager.getDefaultOptions();
                    }
                }
            }
        }
        this.extensions.forEach(extension => this._startExtension(extension));
    }
    _unrollEndpointCollection(options) {
        if (options['endpointCollection']) {
            return options['endpointCollection'];
        }
        else if (options.endpoint) {
            return {
                dashboardUrls: {
                    DashboardAction: options.endpoint + '/dashboards',
                    GetDashboardsAction: options.endpoint + '/dashboards'
                },
                dataSourceUrls: {
                    GetDataSourcesAction: options.endpoint + '/dataSources'
                },
                dataSourceWizardUrls: {
                    DataSourceWizardAction: options.endpoint + '/data/DataSourceWizardAction',
                    GetConnectionStringsAction: options.endpoint + '/data/GetConnectionStringsAction'
                },
                dataServiceUrls: {
                    ConvertItemAction: options.endpoint + '/data/ConvertItemAction',
                    DashboardItemGetAction: options.endpoint + '/data/DashboardItemGetAction',
                    DimensionFilterItemsAction: options.endpoint + '/data/DimensionFilterItemsAction',
                    DimensionFilterStringAction: options.endpoint + '/data/DimensionFilterStringAction',
                    DimensionUniqueValuesAction: options.endpoint + '/data/DimensionUniqueValuesAction',
                    FieldListAction: options.endpoint + '/data/FieldListAction',
                    GetColoringSchemeAction: options.endpoint + '/data/GetColoringSchemeAction',
                    GetDashboardPaletteAction: options.endpoint + '/data/GetDashboardPaletteAction',
                    GetMapShapeFileAction: options.endpoint + '/data/GetMapShapeFileAction',
                    GetUnderlyingDataAction: options.endpoint + '/data/GetUnderlyingDataAction',
                    MarkDataSourcesForReloadAction: options.endpoint + '/data/MarkDataSourcesForReloadAction',
                    ParameterValuesAction: options.endpoint + '/data/ParameterValuesAction',
                    PerformExportAction: options.endpoint + '/data/PerformExportAction',
                    DashboardItemBatchGetAction: options.endpoint + '/data/DashboardItemBatchGetAction'
                }
            };
        }
        else {
            return {};
        }
    }
    _loadInitialDashboard() {
        if (!!this.option('dashboardId')) {
            return this._loadDashboardCore(this.option('dashboardId'));
        }
        else if (!!this.option('initialDashboardId')) {
            return this.loadDashboard(this.option('initialDashboardId'));
        }
        else if (!!this.option('loadDefaultDashboard')) {
            var res = _jquery_helpers_1.createJQueryDeferred();
            this.requestDashboardList()
                .done(items => {
                if (items[0]) {
                    this.loadDashboard(items[0].id)
                        .done(() => res.resolve())
                        .fail(() => res.reject());
                }
                else {
                    res.reject();
                }
            })
                .fail(() => {
                res.reject();
            });
            return res.promise();
        }
        else {
            return _jquery_helpers_1.createJQueryDeferred().resolve().promise();
        }
    }
    _initializeServiceClient(dashboardContainer) {
        var serviceClient = this.isDesignMode() ?
            !this._validateWorkingMode() && new _service_client_1.DesignerDataServiceClient(dashboardContainer, this.notificationController, this._endpointCollection.dataServiceUrls, this.remoteService) || null :
            new _service_client_1.ViewerDataServiceClient(dashboardContainer, this.notificationController, this._endpointCollection.dataServiceUrls, this.remoteService);
        this._serviceClient(serviceClient);
    }
    _validateWorkingMode() {
        if (!this.allowSwitchToDesigner) {
            throw Error('Cannot switch to Designer from the ViewerOnly mode.');
        }
        return false;
    }
    _canAddExtension(extension) {
        if (!!this.findExtension(extension.name)) {
            console.error("The extension with the '" + extension.name + "' name is already registered.");
            return false;
        }
        return true;
    }
    _addExtension(extension) {
        this._extensions.push(extension);
        var customItemExtension = extension;
        if (customItemExtension.createViewerItem) {
            this._dashboardContext.viewerItemCreator[extension.name] = customItemExtension.createViewerItem;
        }
        if (customItemExtension.metaData) {
            serializable_model_1.itemTypesMap[extension.name] = _jquery_helpers_1.deepExtend({
                type: custom_item_1.CustomItem,
                customItemType: extension.name,
            }, customItemExtension.metaData);
        }
    }
    _startExtension(extension) {
        extension.start && extension.start();
    }
    _unloadDashboardServices() {
        var dashboard = this.dashboard();
        if (dashboard) {
            dashboard.dispose();
            if (this._updateHubPrivate) {
                this._updateHubPrivate.dispose();
                this._updateHubPrivate = null;
            }
            if (this._dataSourceBrowser) {
                this._dataSourceBrowser.dispose();
                this._dataSourceBrowser = null;
            }
        }
        this._perDashboardDisposables.forEach(d => d.dispose());
        this._perDashboardDisposables.splice(0, this._perDashboardDisposables.length);
    }
    _applyBindings(element, additionalProperties) {
        var viewModel = Object.assign({ getWidgetContainer: this.getWidgetContainer, surfaceLeft: this._surfaceLeft, surfaceTop: this._surfaceTop, colorSchemeCss: this._colorSchemeCss, classList: () => this._classList, isDashboardLoaded: ko.computed(() => !!this.dashboard()), layoutTemplate: _knockout_utils_1.safeComputed({ info: this._layoutInfo }, ({ info }) => info.template), externalTemplates: this._externalTemplates, emptyControlTemplates: this._emptyControlTemplates, notificationController: this.notificationController, isLoading: this._isLoading, getLocalizationById: _default_1.getLocalizationById, extend: _jquery_helpers_1.extend, $unwrap: _jquery_helpers_1.$unwrap, $: $, ko: ko }, additionalProperties);
        analytics_internal_1.appendStaticContextToRootViewModel(viewModel);
        ko.applyBindings(viewModel, element);
    }
}
exports.DashboardControl = DashboardControl;
ko.bindingHandlers['element-height-change-provider'] = {
    init: (el, valueAccessor, allbindings, viewmodel, bindingcontext) => {
        var data = ko.unwrap(valueAccessor());
        var recalculate = () => {
            setTimeout(() => {
                data.height(_jquery_helpers_1.getHeight(el));
            }, 0);
        };
        data.model.subscribe(function () {
            recalculate();
        });
        recalculate();
    }
};
ko.bindingHandlers['xlinkHref'] = {
    update: function (element, valueAccessor, allBindingsAccessor, viewModel) {
        element.setAttributeNS('http://www.w3.org/1999/xlink', 'href', '#' + valueAccessor());
    }
};
ko.bindingHandlers['dxAttach2Model'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var attachmentName = ko.unwrap(valueAccessor());
        if (['getLookupDefaultValuesSelectBoxOptions', 'getLookupDefaultValueSelectBoxOptions', 'dataSourceBrowser'].indexOf(attachmentName) === -1) {
            throw 'non supported';
        }
        var findAttachment = (name) => {
            var context = bindingContext.$parents.filter((item) => { return item[name] !== undefined; })[0];
            if (context) {
                return context[name];
            }
            return null;
        }, attachment = findAttachment(attachmentName);
        if (attachment) {
            viewModel[attachmentName] = attachment;
        }
    }
};
function _staticInitialize() {
    popup_1.default.defaultOptions({
        options: {
            onInitialized: (e) => {
                var popup = e.component;
                popup.registerKeyHandler('escape', function (e) {
                    e.originalEvent.stopPropagation();
                    popup.hide();
                });
            }
        }
    });
}
function _defineDashboardControlObsoleteMethods(control) {
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'toolbox',
        oldMemberDisplayName: 'DashboardControl.toolbox',
        newMemberDisplayName: 'ToolboxExtension.toolboxGroups',
        action: () => {
            var toolboxExtension = control.findExtension('toolbox');
            if (toolboxExtension) {
                return toolboxExtension.toolboxGroups;
            }
            else {
                console.error('The ToolboxExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'toolbarItems',
        oldMemberDisplayName: 'DashboardControl.toolbarItems',
        newMemberDisplayName: 'ToolboxExtension.toolbarGroups',
        action: () => {
            var toolboxExtension = control.findExtension('toolbox');
            if (toolboxExtension) {
                return toolboxExtension.toolbarGroups;
            }
            else {
                console.error('The ToolboxExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'menuItems',
        oldMemberDisplayName: 'DashboardControl.menuItems',
        newMemberDisplayName: 'ToolboxExtension.menuItems',
        action: () => {
            var toolboxExtension = control.findExtension('toolbox');
            if (toolboxExtension) {
                return toolboxExtension.menuItems;
            }
            else {
                console.error('The ToolboxExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'menuVisible',
        oldMemberDisplayName: 'DashboardControl.menuVisible',
        newMemberDisplayName: 'ToolboxExtension.menuVisible',
        action: () => {
            var toolboxExtension = control.findExtension('toolbox');
            if (toolboxExtension) {
                return toolboxExtension.menuVisible;
            }
            else {
                console.error('The toolboxExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'selectMenuItem',
        oldMemberDisplayName: 'DashboardControl.selectMenuItem',
        newMemberDisplayName: 'ToolboxExtension.selectMenuItem',
        action: () => {
            var toolboxExtension = control.findExtension('toolbox');
            if (toolboxExtension) {
                return toolboxExtension.selectMenuItem;
            }
            else {
                console.error('The toolboxExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'undoEngine',
        oldMemberDisplayName: 'DashboardControl.undoEngine',
        newMemberDisplayName: 'UndoRedoExtension.undoEngine',
        action: () => {
            var undoEngineExtension = control.findExtension('undo-redo');
            if (undoEngineExtension) {
                return undoEngineExtension.undoEngine;
            }
            else {
                console.error('The UndoRedoExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'colorSchemeCss',
        warmMessage: 'The DashboardControl.colorSchemeCss is obsolete. Use the DevExpress.ui.themes.current method instead.',
        action: () => control._colorSchemeCss
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: control,
        memberName: 'saveDashboard',
        oldMemberDisplayName: 'DashboardControl.saveDashboard',
        newMemberDisplayName: 'SaveDashboardExtension.saveDashboard',
        action: () => {
            var saveDashboardExtension = control.findExtension('save-dashboard');
            if (saveDashboardExtension) {
                return saveDashboardExtension.saveDashboard();
            }
            else {
                console.error('The SaveDashboardExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: control,
        memberName: 'ensureDashboardSaved',
        oldMemberDisplayName: 'DashboardControl.ensureDashboardSaved',
        newMemberDisplayName: 'SaveDashboardExtension.ensureDashboardSaved',
        action: (action) => {
            var saveDashboardExtension = control.findExtension('save-dashboard');
            if (saveDashboardExtension) {
                return saveDashboardExtension.ensureDashboardSaved(action);
            }
            else {
                console.error('The SaveDashboardExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: control,
        memberName: 'clearDesigner',
        oldMemberDisplayName: 'DashboardControl.clearDesigner',
        newMemberDisplayName: 'DashboardControl.unloadDashboard',
        action: () => control.unloadDashboard()
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: control,
        memberName: 'close',
        oldMemberDisplayName: 'DashboardControl.close',
        newMemberDisplayName: 'DashboardControl.unloadDashboard',
        action: () => control.unloadDashboard()
    });
}
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-control\' }', function () {
    return {
        'template': function () {
            return { name: 'dx-dashboard-control' };
        }
    };
});
analytics_widgets_internal_1.addToBindingsCache('dxControlsDescendantBindings: true', function () {
    return {
        'dxControlsDescendantBindings': function () {
            return true;
        }
    };
});


/***/ }),

/***/ 18287:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardEvent = void 0;
class DashboardEvent {
    constructor() {
        this.handlers = [];
    }
    add(handler) {
        this.handlers.push(handler);
        return {
            dispose: () => this.remove(handler)
        };
    }
    remove(handler) {
        this.handlers = this.handlers.filter(h => h !== handler);
    }
    fire(args) {
        this.handlers.forEach(h => h(args));
    }
}
exports.DashboardEvent = DashboardEvent;


/***/ }),

/***/ 43412:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardUpdateHub = void 0;
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const model_1 = __webpack_require__(14198);
const disposable_object_1 = __webpack_require__(99253);
const data_dashboard_item_1 = __webpack_require__(70355);
const filter_element_item_base_1 = __webpack_require__(7103);
const range_filter_item_1 = __webpack_require__(63716);
const _pane_content_holder_1 = __webpack_require__(2803);
const _base_metadata_1 = __webpack_require__(17916);
const notificator_1 = __webpack_require__(16812);
const _dashboard_event_1 = __webpack_require__(18287);
const _item_change_subscriber_1 = __webpack_require__(24405);
class DashboardUpdateHub extends disposable_object_1.DisposableObject {
    constructor(_dashboard, _dataRequestOptions, _callBacks, _requestVisibleItemsProvider) {
        super();
        this._dashboard = _dashboard;
        this._dataRequestOptions = _dataRequestOptions;
        this._callBacks = _callBacks;
        this._requestVisibleItemsProvider = _requestVisibleItemsProvider;
        this._timer = 0;
        this._requestQueue = [];
        this.initializeItem = (item) => {
            if (item instanceof data_dashboard_item_1.DataDashboardItem && !item._useNeutralFilterMode()) {
                item._beforeMasterFilterSetByUserInteraction = () => {
                    if (!this._isUpdating() && !this._suspendItem) {
                        this._suspendItem = item;
                    }
                };
                item._afterMasterFilterSetByUserInteraction = () => {
                    if (!this._isUpdating() && this._suspendItem === item) {
                        this._suspendItem = null;
                    }
                };
                item._drillDownChangedByUserInteraction = () => {
                    if (this._suspendItem === item) {
                        this._suspendItem = null;
                    }
                };
            }
            item._getContentCategories().forEach(category => this._itemChanged(item, category));
        };
        this.dataSourcePropertyChanged = new _dashboard_event_1.DashboardEvent();
        this.dashboardItemPropertyChanged = new _dashboard_event_1.DashboardEvent();
        var itemSubscription = {
            itemAdded: this.initializeItem,
            itemDeleted: (item) => {
                if (item instanceof data_dashboard_item_1.DataDashboardItem) {
                    item._beforeMasterFilterSetByUserInteraction = null;
                }
            },
            itemChanged: (item, category) => {
                if (item instanceof data_dashboard_item_1.DataDashboardItem && category !== _base_metadata_1.PropertyCategory.ViewModel) {
                    item._limitDataState.reset();
                    if (item instanceof model_1.GridItem)
                        item._processClientFilterStateChanged(null);
                }
                this._itemChanged(item, category);
                this.dashboardItemPropertyChanged.fire({ item, category });
            }
        };
        this.toDispose(new _item_change_subscriber_1.ItemsChangeSubscriber(this._dashboard.items, itemSubscription));
        this.toDispose(new _item_change_subscriber_1.ItemsChangeSubscriber(this._dashboard.groups, itemSubscription));
        this.toDispose(new _item_change_subscriber_1.ItemsChangeSubscriber(this._dashboard._tabPages, itemSubscription));
        this.toDispose(new _item_change_subscriber_1.DataSourcesSubscriber(this._dashboard.dataSources, (args) => {
            var affectedItems = this._dashboard._dataDashboardItems().filter(item => item.dataSource() === args.dataSource.componentName());
            if (args.queryName) {
                affectedItems = affectedItems.filter(item => item.dataMember() == args.queryName);
            }
            if (args.fieldName) {
                affectedItems = affectedItems.filter(item => !!item.dataItems().filter(dataItem => dataItem.dataMember() == args.fieldName)[0]);
            }
            affectedItems.forEach(item => this._itemChanged(item, _base_metadata_1.PropertyCategory.Data));
            this.dataSourcePropertyChanged.fire(args);
        }));
        this.toDispose(this._dashboard.currencyCultureName.subscribe(_ => {
            this.reloadAllItems(_base_metadata_1.PropertyCategory.Data);
        }));
        this.toDispose(this._dashboard._queryParameters.subscribe(_ => {
            this.reloadAllItems(_base_metadata_1.PropertyCategory.ClientState);
        }));
        this.toDispose(new _item_change_subscriber_1.ColorSchemeSubscriber(_dashboard.colorScheme, () => {
            this.reloadGlobalColoredItems(_base_metadata_1.PropertyCategory.Data);
        }));
        if (this._dataRequestOptions.itemDataRequestMode === 'BatchRequests') {
            var itemsToRequest = {};
            var performBatchRequest = _utils_1.debounce(() => {
                let itemsToRequestCopy = Object.assign({}, itemsToRequest);
                itemsToRequest = {};
                this._callBacks.getBatchItemData(Object.keys(itemsToRequestCopy).map(itemName => itemsToRequestCopy[itemName].itemModel))
                    .done(result => {
                    Object.keys(result).forEach(itemName => itemsToRequestCopy[itemName].deferred.resolve(result[itemName]));
                })
                    .fail(result => {
                    Object.keys(itemsToRequestCopy).forEach(itemName => itemsToRequestCopy[itemName].deferred.reject(result));
                });
            }, 1);
            this._getItemData = (item) => {
                var def = _jquery_helpers_1.createJQueryDeferred();
                itemsToRequest[item.componentName()] = {
                    itemModel: item,
                    deferred: def
                };
                performBatchRequest();
                return def.promise();
            };
        }
        else {
            this._getItemData = (item) => this._callBacks.getItemData(item);
        }
    }
    _isUpdating() {
        return !!this._requestQueue.length;
    }
    _dequeueRequest(queueItem) {
        var itemIndex = this._requestQueue.indexOf(queueItem);
        if (itemIndex !== -1) {
            this._requestQueue.splice(itemIndex, 1);
            if (_pane_content_holder_1.getCategoryContentName(queueItem.category) === 'data') {
                this.itemEndUpdate && this.itemEndUpdate(queueItem.item.componentName());
            }
            if (this._requestQueue.filter(item => this.visibleItemsFilter(item)).length === 0) {
                this.dashboardEndUpdate && this.dashboardEndUpdate();
                this._suspendItem = null;
            }
        }
    }
    _enqueueRequest(item, category) {
        var compatibleCategories = item._paneContentHolder.getCompatibleCategories(category);
        if (!this._requestQueue.some(queueItem => queueItem.item === item && compatibleCategories.indexOf(queueItem.category) !== -1)) {
            this._requestQueue.push({ item: item, category: category });
            if (this._requestQueue.filter(item => this.visibleItemsFilter(item)).length === 1) {
                this.dashboardBeginUpdate && this.dashboardBeginUpdate();
            }
            if (_pane_content_holder_1.getCategoryContentName(category) === 'data') {
                this.itemBeginUpdate && this.itemBeginUpdate(item.componentName());
            }
        }
    }
    _getDataRequestPriority(dashboardItem) {
        if (dashboardItem instanceof filter_element_item_base_1.FilterElementItemBase || dashboardItem instanceof range_filter_item_1.RangeFilterItem) {
            return 2;
        }
        else if (dashboardItem instanceof data_dashboard_item_1.DataDashboardItem && dashboardItem._masterFilterMode() === 'Single') {
            return 1;
        }
        return 0;
    }
    _getRequestLockingMasterFilterItems(dashboardItem) {
        if (dashboardItem instanceof data_dashboard_item_1.DataDashboardItem) {
            return dashboardItem._masterFilterItems()
                .filter(masterItem => {
                if (masterItem instanceof range_filter_item_1.RangeFilterItem || masterItem._isSingleMasterFilter()) {
                    return true;
                }
                else {
                    return !masterItem._useNeutralFilterMode() && masterItem instanceof filter_element_item_base_1.FilterElementItemBase;
                }
            });
        }
        return [];
    }
    visibleItemsFilter(queueItem) {
        if (this._dataRequestOptions.itemDataLoadingMode === 'OnDemand' && this._visibleItemsProvider && this._visibleItemsProvider.visibleItems().indexOf(queueItem.item) === -1) {
            if (queueItem.item instanceof data_dashboard_item_1.DataDashboardItem) {
                return this._visibleItemsProvider.visibleItems().some(visibleItem => {
                    return this._getRequestLockingMasterFilterItems(visibleItem).indexOf(queueItem.item) !== -1;
                });
            }
            else {
                return false;
            }
        }
        return true;
    }
    _resolveItems() {
        this._requestQueue
            .filter(queueItem => !queueItem.item._paneContentHolder.isWaitingForContent(queueItem.category))
            .sort((a, b) => {
            if (this._visibleItemsProvider) {
                var aNumber = this._visibleItemsProvider.visibleItems().indexOf(a.item) !== -1 ? 1 : 0;
                var bNumber = this._visibleItemsProvider.visibleItems().indexOf(b.item) !== -1 ? 1 : 0;
                return bNumber - aNumber;
            }
            else {
                return 0;
            }
        })
            .filter(queueItem => this.visibleItemsFilter(queueItem))
            .filter(queueItem => {
            if (queueItem.item instanceof data_dashboard_item_1.DataDashboardItem && queueItem.item.dataItems().length > 0) {
                return this._getRequestLockingMasterFilterItems(queueItem.item)
                    .filter(masterItem => {
                    var circularDependencyIndex = this._getRequestLockingMasterFilterItems(masterItem)
                        .indexOf(queueItem.item);
                    if (circularDependencyIndex > -1) {
                        let itemPriority = this._getDataRequestPriority(queueItem.item);
                        let masterItemPriority = this._getDataRequestPriority(masterItem);
                        if (itemPriority === masterItemPriority) {
                            return this._dashboard.items().indexOf(queueItem.item) > this._dashboard.items().indexOf(masterItem);
                        }
                        else {
                            return itemPriority < masterItemPriority;
                        }
                    }
                    return true;
                })
                    .every(dependence => {
                    return this._requestQueue.filter(queueItem => queueItem.item === dependence).length === 0;
                });
            }
            return true;
        })
            .forEach(queueItem => {
            if (this._dashboard.findItem(queueItem.item.componentName())) {
                var category = queueItem.category;
                queueItem.item._paneContentHolder.beginRequest(category);
                if (queueItem.item._paneContentHolder.needRequestContentFromServer(category)) {
                    this._performServerRequest(queueItem.item, queueItem.category).done(result => {
                        queueItem.item._paneContentHolder.endRequest({ response: result, category: category });
                        if (queueItem.item._paneContentHolder.isValid(category)) {
                            this._dequeueRequest(queueItem);
                        }
                        this._resolveItems();
                        return result;
                    }).fail(result => {
                        var errorTitle = _default_1.getLocalizationById('DashboardWebStringId.Errors.AttemptToLoadData');
                        var errorDetail = notificator_1.NotificationController._getDetailedErrorMessage(result);
                        queueItem.item._errorState({ title: errorTitle, detail: errorDetail });
                        queueItem.item._paneContentHolder.endRequest({ response: {}, category: category });
                        this._dequeueRequest(queueItem);
                        this._resolveItems();
                    });
                }
                else {
                    queueItem.item._paneContentHolder.endRequest({ response: {}, category: category });
                    this._dequeueRequest(queueItem);
                }
            }
            else {
                this._dequeueRequest(queueItem);
            }
        });
    }
    _processItemChanged(dashboardItem, changeCategory) {
        if (dashboardItem instanceof model_1.MapItem && changeCategory === _base_metadata_1.PropertyCategory.Map && dashboardItem._paneContentHolder.valid()) {
            dashboardItem._isGeometryChangedCallback();
        }
        dashboardItem._paneContentHolder.itemChanged(changeCategory);
        dashboardItem._errorState(null);
        if (dashboardItem instanceof data_dashboard_item_1.DataDashboardItem) {
            if (changeCategory === _base_metadata_1.PropertyCategory.Data || changeCategory === _base_metadata_1.PropertyCategory.Interactivity) {
                dashboardItem._dataManager(null);
                dashboardItem._clearInteractivityState();
            }
        }
    }
    _itemChanged(dashboardItem, changeCategory) {
        if (changeCategory === _base_metadata_1.PropertyCategory.ClientState && this._suspendItem === dashboardItem) {
            return;
        }
        this._processItemChanged(dashboardItem, changeCategory);
        this._enqueueRequest(dashboardItem, changeCategory);
        if (dashboardItem instanceof data_dashboard_item_1.DataDashboardItem) {
            if ((dashboardItem._isGloballyColored && changeCategory === _base_metadata_1.PropertyCategory.Data) || changeCategory === _base_metadata_1.PropertyCategory.Coloring) {
                this._dashboard._dataDashboardItems()
                    .filter(item => item._isGloballyColored)
                    .forEach(item => {
                    this._processItemChanged(dashboardItem, _base_metadata_1.PropertyCategory.Data);
                    this._enqueueRequest(item, _base_metadata_1.PropertyCategory.Data);
                });
            }
        }
        this._resolveItemsDeffered();
    }
    _resolveItemsDeffered() {
        clearTimeout(this._timer);
        this._timer = window.setTimeout(() => {
            this._resolveItems();
        }, 10);
    }
    _performServerRequest(item, category) {
        var contentName = _pane_content_holder_1.getCategoryContentName(category);
        switch (contentName) {
            case 'data':
                return this._getItemData(item);
            case 'map':
                return this._callBacks.getMapShapeFile(item);
            default:
                throw new Error();
        }
    }
    refreshItems(itemsNames) {
        this._dashboard._dataDashboardItems()
            .filter(item => itemsNames.indexOf(item.componentName()) !== -1)
            .forEach(item => { this._itemChanged(item, _base_metadata_1.PropertyCategory.ClientState); });
    }
    reloadAllItems(caterory) {
        this._dashboard._dataDashboardItems().forEach(item => { this._itemChanged(item, caterory); });
    }
    reloadGlobalColoredItems(caterory) {
        this._dashboard._dataDashboardItems().filter(item => item.coloringOptions && item.coloringOptions.useGlobalColors()).forEach(item => { this._itemChanged(item, caterory); });
    }
    initialize() {
        if (this._requestVisibleItemsProvider) {
            this._visibleItemsProvider = this._requestVisibleItemsProvider();
        }
        if (this._visibleItemsProvider) {
            this.toDispose(this._visibleItemsProvider.visibleItems.subscribe(_ => this._resolveItemsDeffered()));
        }
        this._dashboard.items().forEach(this.initializeItem);
        this._dashboard.groups().forEach(this.initializeItem);
        this._dashboard._tabPages().forEach(this.initializeItem);
    }
    dispose() {
        clearTimeout(this._timer);
        this._timer = null;
        this._requestQueue.splice(0, this._requestQueue.length);
        super.dispose();
    }
}
exports.DashboardUpdateHub = DashboardUpdateHub;


/***/ }),

/***/ 24405:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataSourcesSubscriber = exports.ColorSchemeSubscriber = exports.ItemsChangeSubscriber = exports.ComponentArraySubscriber = exports.ItemChangeSubscriber = void 0;
const calculated_field_1 = __webpack_require__(53955);
const disposable_object_1 = __webpack_require__(99253);
const _knockout_utils_1 = __webpack_require__(4437);
const _base_metadata_1 = __webpack_require__(17916);
const _model_subscriber_1 = __webpack_require__(45736);
class ItemChangeSubscriber extends disposable_object_1.DisposableObject {
    constructor(dashboardItem, itemChanged) {
        super();
        this.dashboardItem = dashboardItem;
        let subscriber = new _model_subscriber_1.ModelSubscriber(this.dashboardItem);
        subscriber.registerHandler(category => itemChanged(category));
        this.toDispose(subscriber);
        this.toDispose(this.dashboardItem._subcribeDataQueryParams(newValue => itemChanged(_base_metadata_1.PropertyCategory.ClientState)));
    }
}
exports.ItemChangeSubscriber = ItemChangeSubscriber;
class ComponentArraySubscriber extends disposable_object_1.DisposableObject {
    constructor(_items, _propertyUniqueName = 'componentName') {
        super();
        this._items = _items;
        this._propertyUniqueName = _propertyUniqueName;
        this._subscribers = [];
        this.toDispose(_knockout_utils_1.subscribeArrayChange(this._items, {
            added: (item) => {
                this._subscribe(item);
                this.itemAdded(item);
            },
            deleted: (item) => {
                this._unsubscribe(item);
                this.itemDeleted(item);
            }
        }));
        this._items().forEach(item => this._subscribe(item));
    }
    itemAdded(item) { }
    itemDeleted(item) { }
    _subscribe(item) {
        this._subscribers[item[this._propertyUniqueName]()] = this.createSubscriber(item);
    }
    _unsubscribe(item) {
        var propertyValue = item[this._propertyUniqueName]();
        !!this._subscribers[propertyValue] && this._subscribers[propertyValue].dispose();
        delete this._subscribers[propertyValue];
    }
    dispose() {
        this._items().forEach(item => this._unsubscribe(item));
        super.dispose();
    }
}
exports.ComponentArraySubscriber = ComponentArraySubscriber;
class ItemsChangeSubscriber extends ComponentArraySubscriber {
    constructor(items, _options) {
        super(items);
        this._options = _options;
    }
    itemAdded(item) {
        this._options.itemAdded && this._options.itemAdded(item);
    }
    itemDeleted(item) {
        this._options.itemDeleted && this._options.itemDeleted(item);
    }
    createSubscriber(item) {
        return new ItemChangeSubscriber(item, category => this._options.itemChanged(item, category));
    }
}
exports.ItemsChangeSubscriber = ItemsChangeSubscriber;
class ColorSchemeSubscriber extends ComponentArraySubscriber {
    constructor(entries, _changed) {
        super(entries);
        this._changed = _changed;
    }
    createSubscriber(item) {
        var subscriber = new _model_subscriber_1.ModelSubscriber(item);
        subscriber.registerHandler((category, model) => {
            this._changed();
        });
        return subscriber;
    }
    itemAdded(item) {
        this._changed();
    }
    itemDeleted(item) {
        this._changed();
    }
}
exports.ColorSchemeSubscriber = ColorSchemeSubscriber;
class DataSourcesSubscriber extends ComponentArraySubscriber {
    constructor(dataSources, _onDataSourceChanged) {
        super(dataSources);
        this._onDataSourceChanged = _onDataSourceChanged;
    }
    createSubscriber(dataSource) {
        var subscriber = new _model_subscriber_1.ModelSubscriber(dataSource);
        subscriber.registerHandler((category, model, propertyName, status) => {
            if (model instanceof calculated_field_1.CalculatedField) {
                var calcField = model;
                this._onDataSourceChanged({
                    dataSource: dataSource,
                    model: model,
                    propertyName: propertyName,
                    status: status,
                    queryName: calcField.dataMember(),
                    fieldName: calcField.name()
                });
            }
            else {
                this._onDataSourceChanged({
                    dataSource: dataSource,
                    model: model,
                    propertyName: propertyName,
                    status: status
                });
            }
        });
        return subscriber;
    }
    itemAdded(dataSource) {
        this._onDataSourceChanged({
            dataSource: dataSource,
            status: 'added'
        });
    }
    itemDeleted(dataSource) {
        this._onDataSourceChanged({
            dataSource: dataSource,
            status: 'deleted'
        });
    }
}
exports.DataSourcesSubscriber = DataSourcesSubscriber;


/***/ }),

/***/ 45736:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ModelSubscriber = void 0;
const ko = __webpack_require__(71032);
const _base_metadata_1 = __webpack_require__(17916);
class ModelSubscriber {
    constructor(_model) {
        this._model = _model;
        this.handlers = [];
        this._subscribe(_model);
    }
    static changePropertyQuietly(property, func) {
        try {
            property[ModelSubscriber.dxSubscriptionSuspend] = true;
            func();
        }
        finally {
            delete property[ModelSubscriber.dxSubscriptionSuspend];
        }
    }
    _unsubscribe(model) {
        var serializationsInfo = model.getInfo();
        serializationsInfo
            .filter(serializationInfo => !!serializationInfo.modelName)
            .forEach(serializationInfo => {
            var property = model[serializationInfo.propertyName];
            var propertyValue = ko.unwrap(property);
            if (property[ModelSubscriber.dxSubscription]) {
                var subscription = property[ModelSubscriber.dxSubscription];
                subscription.dispose();
                delete property[ModelSubscriber.dxSubscription];
            }
            if (this._isPropertySerializeModel(propertyValue)) {
                this._unsubscribe(propertyValue);
            }
        });
    }
    _subscribe(model) {
        if (!model.getInfo) {
            return;
        }
        var serializationsInfo = model.getInfo();
        serializationsInfo
            .filter(serializationInfo => !!serializationInfo.modelName)
            .forEach(serializationInfo => {
            var property = model[serializationInfo.propertyName];
            var category = !!serializationInfo['category'] ? serializationInfo['category'] : _base_metadata_1.PropertyCategory.Data;
            var propertyValue = ko.unwrap(property);
            if (Array.isArray(property)) {
                throw new Error('Non-observable arrays are not supported.');
            }
            if (category === _base_metadata_1.PropertyCategory.NoUpdate)
                return;
            if (Array.isArray(propertyValue) && !property[ModelSubscriber.dxSubscription]) {
                propertyValue.forEach(item => this._subscribe(item));
                property[ModelSubscriber.dxSubscription] = property.subscribe((arrayChanges) => {
                    arrayChanges.forEach(arrayChange => {
                        var changedStatus = 'unknown';
                        if (arrayChange.status === 'added') {
                            this._subscribe(arrayChange.value);
                            changedStatus = 'added';
                        }
                        if (arrayChange.status === 'deleted') {
                            this._unsubscribe(arrayChange.value);
                            changedStatus = 'deleted';
                        }
                        if (property[ModelSubscriber.dxSubscriptionSuspend] !== true)
                            this._propertyChanged(category, arrayChange.value, serializationInfo.propertyName, changedStatus);
                    });
                }, null, 'arrayChange');
            }
            else if (ko.isObservable(property) && !property[ModelSubscriber.dxSubscription]) {
                var getSubscribeHandler = prevModel => model => {
                    if (this._isPropertySerializeModel(prevModel)) {
                        this._unsubscribe(prevModel);
                    }
                    if (this._isPropertySerializeModel(model)) {
                        this._subscribe(model);
                    }
                };
                var subscriberHandler = getSubscribeHandler(propertyValue);
                property[ModelSubscriber.dxSubscription] = property.subscribe(val => {
                    if (property[ModelSubscriber.dxSubscriptionSuspend] !== true) {
                        this._propertyChanged(category, model, serializationInfo.propertyName, 'changed');
                    }
                    if (category !== _base_metadata_1.PropertyCategory.NoUpdateByObservableValue) {
                        subscriberHandler(val);
                        subscriberHandler = getSubscribeHandler(val);
                    }
                });
                if (category !== _base_metadata_1.PropertyCategory.NoUpdateByObservableValue && this._isPropertySerializeModel(propertyValue)) {
                    this._subscribe(propertyValue);
                }
            }
            else if (!ko.isObservable(property) && this._isPropertySerializeModel(propertyValue)) {
                this._subscribe(propertyValue);
            }
        });
    }
    _propertyChanged(category, model, propertyName, status) {
        this.handlers.forEach(handler => handler(category, model, propertyName, status));
    }
    registerHandler(handler) {
        this.handlers.push(handler);
    }
    _isPropertySerializeModel(propertyValue) {
        return propertyValue && propertyValue['getInfo'];
    }
    dispose() {
        this._unsubscribe(this._model);
    }
}
exports.ModelSubscriber = ModelSubscriber;
ModelSubscriber.dxSubscription = '__dx_notifier_subscription';
ModelSubscriber.dxSubscriptionSuspend = '__dx_notifier_subscription_suspend';


/***/ }),

/***/ 15542:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UnderlyingDataProvider = void 0;
const string_1 = __webpack_require__(36306);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _date_utils_1 = __webpack_require__(76900);
class UnderlyingDataProvider {
    constructor(_serviceClient) {
        this._serviceClient = _serviceClient;
    }
    _getValidDataQueryParamsValues(values, dataDashboardItem) {
        var itemQueryParams = _jquery_helpers_1.deepExtend({}, dataDashboardItem._getDataQueryParams());
        if (itemQueryParams.DrillDown) {
            var drillDownLen = itemQueryParams.DrillDown.length;
            var columnValuesLen = values.length;
            var visibleDimensionsCount = dataDashboardItem._getInteractivityAxisDimensionCount();
            var notInteractivityDimensionsCount = visibleDimensionsCount - dataDashboardItem._interactivityDimensions.length;
            var interactivityColumnsValues = columnValuesLen - notInteractivityDimensionsCount;
            if (drillDownLen > 0) {
                var stateToModelDiff = interactivityColumnsValues - drillDownLen - 1;
                if (stateToModelDiff < 0) {
                    itemQueryParams.DrillDown.splice(stateToModelDiff);
                }
            }
        }
        return itemQueryParams;
    }
    _getUnderlyingDataArgsAxisPoints(data, args) {
        var axisNames = data.getAxisNames(), axisPoints = args.axisPoints;
        if (!axisPoints) {
            axisPoints = [];
            axisNames.forEach(axisName => {
                var axis = data.getAxis(axisName), axisPoint = undefined;
                if (args.uniqueValuesByAxisName) {
                    var axisValues = args.uniqueValuesByAxisName[axisName];
                    if (axisValues)
                        axisPoint = axis.getPointByUniqueValues(axisValues.map(_utils_1.unwrapSpecialNullValue));
                }
                if (args.valuesByAxisName) {
                    var axisValues = args.valuesByAxisName[axisName];
                    if (axisValues)
                        axisPoint = axis.getPointByValues(axisValues.map(_utils_1.unwrapSpecialNullValue));
                }
                if (!axisPoint)
                    axisPoint = axis.getRootPoint();
                axisPoints.push(axisPoint);
            });
        }
        axisNames.forEach(axisName => {
            var points = axisPoints.map(axisPoint => {
                return axisPoint.getAxisName() === axisName;
            });
            if (points.length == 0) {
                axisPoints.push(data.getAxis(axisName).getRootPoint());
            }
        });
        return axisPoints;
    }
    requestUnderlyingData(dataDashboardItem, args) {
        let itemDataManager = dataDashboardItem._dataManager();
        if (!_utils_1.type.isDefined(itemDataManager))
            throw Error(string_1.format(_default_1.getLocalizationById('DashboardWebStringId.Notification.UnderlyingRequestDataNotLoaded'), dataDashboardItem.name()));
        var metaData = itemDataManager.getMetaData(), axisPoints = this._getUnderlyingDataArgsAxisPoints(dataDashboardItem._getItemData(), args), columnNames = args.dataMembers, pivotAreaValues = {};
        axisPoints.forEach((axisPoint) => {
            var name = axisPoint.getAxisName();
            pivotAreaValues[metaData.getPivotAreaByAxisName(name)] = _date_utils_1.toStringArray(axisPoint.getUniquePath());
        });
        var isInteractivityByColumns = dataDashboardItem._itemInteractivityByColumnAxis();
        var columnValues = pivotAreaValues['Columns'];
        var rowValues = pivotAreaValues['Rows'];
        var itemQueryParams = this._getValidDataQueryParamsValues(isInteractivityByColumns ? columnValues : rowValues, dataDashboardItem);
        let promise = this._serviceClient.getUnderlyingData(dataDashboardItem.componentName(), columnValues, rowValues, columnNames, itemQueryParams);
        return promise.then((data) => {
            data.Data = data.Data.map(row => row = row.map(value => _date_utils_1.tryConvertToDateTime(value)));
            return data;
        });
    }
}
exports.UnderlyingDataProvider = UnderlyingDataProvider;


/***/ }),

/***/ 59482:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DockingLayoutAdapter = void 0;
const ko = __webpack_require__(71032);
const disposable_object_1 = __webpack_require__(99253);
const _knockout_utils_1 = __webpack_require__(4437);
const _interfaces_1 = __webpack_require__(60136);
const _docking_layout_controller_1 = __webpack_require__(82106);
class DockingLayoutAdapter extends disposable_object_1.DisposableObject {
    constructor(_dashboardControl) {
        super();
        this._dashboardControl = _dashboardControl;
        this._dockingLayoutController = ko.observable();
        this._templateName = 'dx-dashboard-resizable-layout';
        this.toDispose(this._dashboardControl.isDesignMode.subscribe(isDesignMode => {
            if (this._dockingLayoutController() && this._dockingLayoutController().rootItem) {
                this._dockingLayoutController().rootItem.isDesignMode(isDesignMode);
                this._dockingLayoutController().select(null);
            }
        }));
        this.toDispose(this._dashboardControl.dashboardContainer.subscribe(dashboardContainer => {
            if (dashboardContainer && dashboardContainer.dashboard) {
                this._dockingLayoutController(new _docking_layout_controller_1.DockingLayoutController(dashboardContainer.dashboard, this._dashboardControl._dataSourceBrowser, this._dashboardControl._dashboardContext, (name) => this._dashboardControl.findExtension(name), this._dashboardControl.option('allowMaximizeItems'), this._dashboardControl.resizeByTimer, this._dashboardControl._repaintRequest, this._dashboardControl.encodeHtml, this._dashboardControl._viewerApi));
                this._dockingLayoutController().rootItem.isDesignMode(this._dashboardControl.isDesignMode());
            }
            else {
                if (this._dockingLayoutController()) {
                    this._dockingLayoutController().dispose();
                }
                this._dockingLayoutController(null);
            }
        }));
    }
    start() {
        this._dashboardControl._layoutInfoProviderCollection.push({
            name: this._templateName,
            condition: () => true,
            getViewModel: () => this._getKoViewModel(),
            getLayoutController: () => this._dockingLayoutController,
        });
        this._dashboardControl._updateLayout();
    }
    stop() {
        this._dashboardControl._layoutInfoProviderCollection = this._dashboardControl._layoutInfoProviderCollection
            .filter(layoutInfo => layoutInfo.name !== this._templateName);
        this._dashboardControl._updateLayout();
        if (this._dockingLayoutController()) {
            this._dockingLayoutController().dispose();
        }
    }
    processKeyEvent(eventName, e) {
        if (e.keyCode === _interfaces_1.KeyCodes.Delete && this._dockingLayoutController() && this._dockingLayoutController()._selectedLayoutItem() && !this._dockingLayoutController().itemInteractionInProgress()) {
            this._dockingLayoutController()._selectedLayoutItem().delete();
            return true;
        }
    }
    dispose() {
        super.dispose();
        this.stop();
    }
    _getKoViewModel() {
        let viewModel = ko.observable(new DockingLayoutViewModel(this._dockingLayoutController()));
        this.toDispose(this._dockingLayoutController.subscribe(_ => viewModel() && viewModel().dispose(), null, 'beforeChange'));
        this.toDispose(this._dockingLayoutController.subscribe(controller => {
            viewModel(new DockingLayoutViewModel(controller));
            viewModel() && this.toDispose(viewModel());
        }));
        return viewModel;
    }
}
exports.DockingLayoutAdapter = DockingLayoutAdapter;
class DockingLayoutViewModel extends disposable_object_1.DisposableObject {
    constructor(_layoutController) {
        super();
        this._layoutController = _layoutController;
        this.componentArgs = this._initComponentArgs();
        this.cssClasses = this._initSubscriptions();
    }
    _initComponentArgs() {
        if (!this._layoutController)
            return {};
        return {
            dashboard: this._layoutController.dashboardModel,
            dataSourceBrowser: this._layoutController.dataSourceBrowser,
            encodeHtml: this._layoutController.encodeHtml,
            titleContext: this._layoutController.titleContext,
            resizeByTimer: this._layoutController.resizeByTimer,
            layout: this._layoutController.rootItem,
            headerHeight: this._layoutController.headerHeight,
            layoutMainElementEvents: this._layoutController.layoutMainElementEvents,
            repaintRequest: this._layoutController.repaintRequest,
            fullscreenItemModel: this._layoutController.fullscreenItemModel,
            scrollViewEvents: this._layoutController.scrollViewEvents
        };
    }
    _initSubscriptions() {
        if (!this._layoutController)
            return;
        const subscription = _knockout_utils_1.safeComputed({ itemInteractionInProgress: this._layoutController.itemInteractionInProgress }, args => {
            const classes = ['dx-dashboard-viewer', 'dx-dashboard-container'];
            if (args.itemInteractionInProgress)
                classes.push('dx-dashboard-in-work');
            return classes.join(' ');
        });
        this.toDispose(subscription);
        return subscription;
    }
}


/***/ }),

/***/ 20029:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _knockout_utils_1 = __webpack_require__(4437);
const _dashboard_title_view_constants_1 = __webpack_require__(68899);
const _dashboard_title_model_1 = __webpack_require__(98448);
const _layout_item_1 = __webpack_require__(85017);
const _docking_layout_settings_1 = __webpack_require__(78869);
const ShadowSize = _layout_item_1.SplitterSize / 2;
const _getPaddingBesideScrollBar = (mode) => _knockout_utils_1.safeComputed({ mode }, args => {
    const scrollbarSize = 8;
    let calculatedPadding = _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings - scrollbarSize;
    calculatedPadding = calculatedPadding < 0 ? 0 : calculatedPadding;
    return args.mode === 'Fixed' ? calculatedPadding : _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings;
});
const _getScrollDirection = (verticalMode, horizontalMode) => {
    if (horizontalMode === 'Fixed' && verticalMode === 'Fixed') {
        return 'both';
    }
    else if (horizontalMode === 'Fixed') {
        return 'horizontal';
    }
    else if (verticalMode === 'Fixed') {
        return 'vertical';
    }
};
const processResize = ({ element, layout, layoutOptions, fullscreenItemModel, titleModel, titleWidth, titleHeight, repaintRequest, resizeByTimer, rootLayoutElement }) => {
    const disposables = [];
    const toDispose = (disposable) => {
        disposables.push(disposable);
        return disposable;
    };
    const layoutContainerSize = {
        width: _jquery_helpers_1.getWidth(element),
        height: _jquery_helpers_1.getHeight(element),
    };
    const getLayoutWidth = () => {
        const initialWidth = layoutOptions.width.mode() === 'Fixed' ? layoutOptions.width.value() : layoutContainerSize.width;
        return initialWidth - _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings * 2;
    };
    const getLayoutHeight = () => {
        const initialHeight = layoutOptions.height.mode() === 'Fixed' ? layoutOptions.height.value() : layoutContainerSize.height;
        return initialHeight - _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings * 2 - (titleModel.showTitle() === true ? titleHeight() : 0);
    };
    const updateTitleWidth = () => {
        const titleContainerWidth = layoutContainerSize.width - _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings * 2;
        titleWidth((fullscreenItemModel.visible() ? titleContainerWidth : Math.min(getLayoutWidth(), titleContainerWidth)) - ShadowSize * 2);
    };
    const updateFullscreenItemSize = () => {
        if (fullscreenItemModel.visible()) {
            fullscreenItemModel.viewModel().repaintRequest.fire();
        }
    };
    const updateSize = () => {
        updateFullscreenItemSize();
        updateTitleWidth();
        const rootElt = rootLayoutElement();
        if (rootElt) {
            rootElt.style.width = `${getLayoutWidth()}px`;
            rootElt.style.height = `${getLayoutHeight()}px`;
        }
        layout.updateSize(getLayoutWidth(), getLayoutHeight());
    };
    const updateSizeDebounced = _utils_1.debounce(updateSize, 100);
    const resizeObserver = new ResizeObserver(entries => {
        layoutContainerSize.width = entries[0].contentRect.width;
        layoutContainerSize.height = entries[0].contentRect.height;
        if (resizeByTimer()) {
            updateSizeDebounced();
        }
    });
    resizeObserver.observe(element);
    toDispose(_knockout_utils_1.safeSubscribe({
        widthMode: layoutOptions.width.mode,
        fixedWidth: layoutOptions.width.value,
        mode: layoutOptions.height.mode,
        fixedHeight: layoutOptions.height.value,
        titleHeight,
        showTitle: titleModel.showTitle,
        rootLayoutElement
    }, () => updateSize()));
    toDispose(fullscreenItemModel.visible.subscribe(updateTitleWidth));
    toDispose(resizeByTimer.subscribe((newValue) => newValue && updateSize()));
    const forceRepaintCallback = () => updateSize();
    repaintRequest.add(forceRepaintCallback);
    toDispose({
        dispose: () => {
            repaintRequest.remove(forceRepaintCallback);
        }
    });
    return disposables;
};
ko.components.register('dashboard-docking-layout', {
    viewModel: {
        createViewModel: function ({ componentArgs }, componentInfo) {
            let disposables = [];
            const toDispose = (disposable) => {
                disposables.push(disposable);
                return disposable;
            };
            const rootLayoutElement = ko.observable();
            const titleWidth = ko.observable(_jquery_helpers_1.getWidth(componentInfo.element));
            const titleHeight = ko.observable(_dashboard_title_view_constants_1.titleHeight);
            const titleModel = new _dashboard_title_model_1.DashboardTitleModel(componentArgs.titleContext, componentArgs.dashboard);
            const isTitleVisible = titleModel.showTitle;
            const layout = componentArgs.layout;
            const layoutOptions = componentArgs.dashboard.layoutOptions;
            const fullscreenItemModel = componentArgs.fullscreenItemModel;
            const layoutTop = toDispose(_knockout_utils_1.safeComputed({ isTitleVisible, titleHeight, }, args => args.isTitleVisible ? args.titleHeight + _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings : 0));
            const paddings = {
                paddingTop: toDispose(_knockout_utils_1.safeComputed({ isTitleVisible }, args => args.isTitleVisible ? 0 : _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings)),
                paddingRight: toDispose(_getPaddingBesideScrollBar(layoutOptions.height.mode)),
                paddingBottom: toDispose(_getPaddingBesideScrollBar(layoutOptions.width.mode)),
                paddingLeft: _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings
            };
            const scrollViewOptions = toDispose(_knockout_utils_1.safeComputed({
                verticalMode: layoutOptions.height.mode,
                horizontalMode: layoutOptions.width.mode
            }, (args) => (Object.assign({ direction: _getScrollDirection(args.verticalMode, args.horizontalMode), showScrollbar: _getScrollDirection(args.verticalMode, args.horizontalMode) ? 'always' : 'never' }, componentArgs.scrollViewEvents))));
            const viewModel = {
                title: {
                    showTitle: titleModel.showTitle,
                    containerStyles: {
                        display: 'flex',
                        justifyContent: 'start',
                        position: 'absolute',
                        top: _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings,
                        left: _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings + ShadowSize,
                        height: titleHeight
                    },
                    styles: {
                        width: titleWidth,
                    },
                    componentArgs: {
                        height: titleHeight,
                        width: titleWidth,
                        encodeHtml: componentArgs.encodeHtml,
                        options: titleModel.toolbarOptions,
                    }
                },
                scrollView: {
                    options: scrollViewOptions,
                    styles: { top: layoutTop },
                    contentWrapperStyles: Object.assign(Object.assign({}, paddings), { display: 'block', boxSizing: 'content-box' }),
                },
                fullscreenItem: {
                    styles: {
                        paddingTop: paddings.paddingTop,
                        paddingRight: _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings,
                        paddingBottom: _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings,
                        paddingLeft: _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings,
                        top: layoutTop
                    }
                },
                layout: layout,
                layoutMainElementEvents: Object.assign(Object.assign({}, componentArgs.layoutMainElementEvents), { targetElement: rootLayoutElement }),
                fullscreenItemModel: fullscreenItemModel,
            };
            processResize({
                element: componentInfo.element,
                layout,
                layoutOptions,
                fullscreenItemModel,
                titleModel,
                titleWidth,
                titleHeight,
                repaintRequest: componentArgs.repaintRequest,
                resizeByTimer: componentArgs.resizeByTimer,
                rootLayoutElement: rootLayoutElement
            })
                .forEach(d => toDispose(d));
            const disposeCallback = () => {
                disposables.forEach(disposable => disposable.dispose());
                disposables = [];
                titleModel.dispose();
                window.removeEventListener('unload', disposeCallback);
            };
            ko.utils.domNodeDisposal.addDisposeCallback(componentInfo.element, disposeCallback);
            window.addEventListener('unload', disposeCallback);
            return viewModel;
        }
    },
    template: { element: 'dx-dashboard-docking-layout' }
});


/***/ }),

/***/ 82106:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DockingLayoutController = void 0;
const events_1 = __webpack_require__(68396);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const disposable_object_1 = __webpack_require__(99253);
const _dashboard_item_helper_1 = __webpack_require__(57094);
const combo_box_item_1 = __webpack_require__(13102);
const date_filter_item_1 = __webpack_require__(78588);
const group_item_1 = __webpack_require__(86961);
const dashboard_tab_page_1 = __webpack_require__(12319);
const tab_container_item_1 = __webpack_require__(99290);
const _dashboard_title_view_constants_1 = __webpack_require__(68899);
const caption_toolbar_options_1 = __webpack_require__(57731);
const _title_component_1 = __webpack_require__(61697);
const _viewer_interfaces_1 = __webpack_require__(87560);
const _layout_item_1 = __webpack_require__(85017);
const _drag_controller_1 = __webpack_require__(96152);
const _docking_layout_fullscreen_item_1 = __webpack_require__(53489);
class DockingLayoutController extends disposable_object_1.DisposableObject {
    constructor(dashboardModel, dataSourceBrowser, context, _findExtension, allowMaximizeItems, resizeByTimer, repaintRequest, encodeHtml = true, viewerApi) {
        super();
        this.dashboardModel = dashboardModel;
        this.dataSourceBrowser = dataSourceBrowser;
        this.context = context;
        this._findExtension = _findExtension;
        this.allowMaximizeItems = allowMaximizeItems;
        this.resizeByTimer = resizeByTimer;
        this.repaintRequest = repaintRequest;
        this.encodeHtml = encodeHtml;
        this.selectedLayoutItem = ko.pureComputed(() => this._selectedLayoutItem().sizeController);
        this.dragController = new _drag_controller_1.LayoutDragController();
        this._scrollSubscriptions = [];
        this.scrollViewEvents = {
            onInitialized: (e) => {
                this.dragController.initScrollAnimator({
                    getBoundingClientRect: () => _jquery_helpers_1.$unwrap(e.component.element()).getBoundingClientRect(),
                    getScrollOffset: () => e.component.scrollOffset(),
                    setScrollOffset: (offset) => e.component.scrollTo(offset)
                });
            },
            onScroll: () => {
                this._scrollSubscriptions.forEach(action => action());
            },
            onDisposing: (e) => {
                this.dragController.cleanScrollAnimator();
            }
        };
        this.layoutMainElementEvents = {
            onInitialize: (args) => {
                this.dragController.initLayoutMainElement(args.element);
            },
            onDisposing: (args) => {
                this.dragController.cleanLayoutMainElement(args.element);
            }
        };
        this.itemInteractionInProgress = ko.observable(false);
        this._selectedLayoutItem = ko.observable();
        this.selectedDashboardItem = ko.computed(() => {
            return this._selectedLayoutItem() && this._selectedLayoutItem().viewModel.item() || null;
        });
        this.emptyItemTemplates = ko.observableArray();
        this.emptyItemTemplatesService = (layoutItem) => {
            return {
                data: this.emptyItemTemplates,
                name: 'dx-dashboard-empty-item-templates'
            };
        };
        this.addDashboardItem = (data) => {
            var { item } = _layout_item_1.LayoutItem.findLargestItem(this.rootItem);
            if (!item) {
                item = this.rootItem;
            }
            var itemJson = _dashboard_item_helper_1.getItemJson(data.type);
            var location = item._parent() && item._parent().viewModel && item._parent().viewModel.orientation() === 'Horizontal' ? 'bottom' : 'right';
            item.create(itemJson, location);
        };
        this.width = ko.observable(0);
        this.height = ko.observable(0);
        this.headerHeight = ko.observable(_dashboard_title_view_constants_1.titleHeight);
        this.visibleItemsProvider = undefined;
        this.rootItem = new _layout_item_1.LayoutItem(dashboardModel.layout()._createViewModel(), null);
        var fullScreenItemLocalContext = new _viewer_interfaces_1.DashboardItemContext({
            ignoreDesignMode: true,
            beforeApplyViewerItemOptions: (item, options) => {
                options.ParentContainer = undefined;
            },
            addContextToolbarItems: (options) => {
                options.actionItems.push({
                    hint: _default_1.getLocalizationById('DashboardStringId.ActionRestoreDashboardItem'),
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.restoreItem,
                    icon: 'dx-dashboard-restore-item',
                    type: 'button',
                    click: () => {
                        this.fullscreenItemModel.restoreDownItem();
                    }
                });
            },
            itemCreatingType: 'secondary'
        });
        var exportExtension = this._findExtension('dashboard-export');
        if (exportExtension) {
            exportExtension._initializeSecondaryExportItem(fullScreenItemLocalContext);
        }
        this.fullscreenItemModel = new _docking_layout_fullscreen_item_1.FullscreenItemModel(context, fullScreenItemLocalContext);
        var getVisibleItems = (layoutItemViewModel) => {
            var res = [];
            if (layoutItemViewModel.item())
                res.push(layoutItemViewModel.item());
            if (layoutItemViewModel.item() instanceof tab_container_item_1.TabContainerItem) {
                res.push(...layoutItemViewModel.childItems().map(ci => ci._createViewModel().item()));
            }
            layoutItemViewModel.visibleItems().forEach(childItem => {
                res.push(...getVisibleItems(childItem._createViewModel()));
            });
            return res;
        };
        this.visibleItemsProvider = {
            visibleItems: ko.pureComputed(() => {
                return getVisibleItems(this.rootItem.viewModel);
            })
        };
        this.rootItem.onEvent = (layoutItem, event) => {
            if (event === 'click') {
                this.select(layoutItem);
            }
            else if (event === 'unselect') {
                this.select(null);
            }
            else if (event === 'resize-started') {
                setTimeout(() => this.itemInteractionInProgress(true), 1);
            }
            else if (event === 'resize-completed') {
                setTimeout(() => this.itemInteractionInProgress(false), 1);
            }
            else if (event === 'get-context') {
                return context;
            }
            else if (event === 'get-local-context') {
                var itemModel = layoutItem.viewModel.item;
                var localContext = new _viewer_interfaces_1.DashboardItemContext({
                    disabled: ko.computed(() => itemModel() && this.fullscreenItemModel.maximizedItemName === itemModel().componentName()),
                    addContextToolbarItems: (options, item) => {
                        if (this.allowMaximizeItems
                            && !(item instanceof combo_box_item_1.ComboBoxItem)
                            && !(item instanceof date_filter_item_1.DateFilterItem)
                            && !(item instanceof group_item_1.GroupItem)
                            && !(item instanceof tab_container_item_1.TabContainerItem)
                            && !(item instanceof dashboard_tab_page_1.DashboardTabPage)) {
                            options.actionItems.push({
                                hint: _default_1.getLocalizationById('DashboardStringId.ActionMaximizeDashboardItem'),
                                icon: 'dx-dashboard-maximize-item',
                                name: caption_toolbar_options_1.dashboardToolbarItemNames.maximizeItem,
                                type: 'button',
                                click: () => {
                                    this.select(null);
                                    this.fullscreenItemModel.maximizeItem(item);
                                }
                            });
                        }
                    },
                    visualMode: ko.computed(() => {
                        if (itemModel()) {
                            if (itemModel() instanceof tab_container_item_1.TabContainerItem) {
                                return 'caption';
                            }
                            let parent = dashboardModel.findItem(itemModel().parentContainer());
                            if (parent instanceof dashboard_tab_page_1.DashboardTabPage
                                && dashboardModel._getDisplayDashboardItem(parent) !== parent) {
                                return 'content';
                            }
                        }
                        return 'full';
                    }),
                    itemCreatingType: 'primary'
                });
                var exportExtension = this._findExtension('dashboard-export');
                if (exportExtension) {
                    exportExtension._initializePrimaryExportItem(localContext);
                }
                return localContext;
            }
            else if (event === 'get-context-menu-service') {
                return this.contextMenu;
            }
            else if (event === 'get-empty-item-templates-service') {
                return this.emptyItemTemplatesService;
            }
            else if (event === 'get-layout-item-placeholder-service') {
                return this.layoutItemPlaceholderService;
            }
        };
        events_1.on(document, 'pointerdown.dxlayout', (e) => {
            if (!this._selectedLayoutItem()) {
                return;
            }
            var target = _jquery_helpers_1.$unwrap(e.target), validParents = ['.dx-layout-root',
                '.dx-accordion-item',
                '.dx-treeview-node',
                '.dx-dashboard-context-menu-panel',
                'dx-field-chooser',
                '.dx-dashboard-toolbar',
                '.dx-overlay-content',
                '.dx-overlay-shader',
                '.ace_editor',
                '.dx-scrollable-scrollbar'
            ];
            var found = false;
            if (_utils_1.type.isDefined(target.classList) && target.classList.contains('dx-calendar-cell')) {
                found = true;
            }
            else if (!target.parentNode) {
                found = true;
            }
            else {
                found = found || validParents.some((validParent) => !!_jquery_helpers_1.closest(target, validParent));
            }
            if (found)
                return;
            if (target.tagName && target.tagName.toLowerCase() === 'body')
                return;
            if (document.activeElement && document.activeElement.blur) {
                document.activeElement.blur();
            }
            this.select(null);
        });
        this.titleContext = new _title_component_1.DashboardTitleContext(this.encodeHtml, this._findExtension, true, viewerApi);
        this.toDispose(this.titleContext);
        this.toDispose(ko.computed(() => {
            if (this.width() > 0) {
                this.rootItem.width(this.width());
            }
            if (this.height() > 0) {
                this.rootItem.height(this.height() - this.headerHeight());
            }
        }));
    }
    get fullscreenItemProvider() {
        return this.fullscreenItemModel;
    }
    select(item) {
        var oldSelectedItem = this._selectedLayoutItem.peek();
        if (oldSelectedItem) {
            oldSelectedItem.isSelected(false);
        }
        this._selectedLayoutItem(item);
        if (!!item) {
            item.isSelected(true);
        }
    }
    subscribeOnScroll(handler) {
        this._scrollSubscriptions.push(handler);
    }
    unsubscribeOnScroll(handler) {
        this._scrollSubscriptions.splice(this._scrollSubscriptions.indexOf(handler), 1);
    }
    dispose() {
        this.dragController.dispose();
        this._scrollSubscriptions = [];
        events_1.off(document, '.dxlayout');
        super.dispose();
    }
}
exports.DockingLayoutController = DockingLayoutController;


/***/ }),

/***/ 53489:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FullscreenItemModel = void 0;
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const _interfaces_1 = __webpack_require__(60136);
const _layout_item_1 = __webpack_require__(85017);
class FullscreenItemModel {
    constructor(dashboardContext, localContext, repaintRequest = _jquery_helpers_1.createJQueryCallbacks()) {
        this.dashboardContext = dashboardContext;
        this.localContext = localContext;
        this.repaintRequest = repaintRequest;
        this._dashboardItem = ko.observable(null);
        this._visible = ko.observable(false);
        this.dashboardItem = ko.computed(() => this._dashboardItem());
        this.visible = ko.computed(() => this._visible());
        this.viewModel = ko.computed(() => {
            return {
                dashboardItem: this.dashboardItem(),
                dashboardContext: this.dashboardContext,
                localContext: this.localContext,
                repaintRequest: this.repaintRequest,
                getSizeController: (element) => new _interfaces_1.SingleItemSizeController(element.closest('.dx-dashboard-fullscreen-item-base'), this.repaintRequest, _layout_item_1.SplitterSize)
            };
        });
    }
    get maximizedItemName() {
        if (this._visible() && this.dashboardItem()) {
            return this.dashboardItem().componentName();
        }
        else {
            return '';
        }
    }
    maximizeItem(dashboardItem) {
        this._dashboardItem(dashboardItem);
        this._visible(true);
    }
    restoreDownItem() {
        this._visible(false);
    }
}
exports.FullscreenItemModel = FullscreenItemModel;


/***/ }),

/***/ 78869:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DockingLayoutSettings = void 0;
class DockingLayoutSettings {
}
exports.DockingLayoutSettings = DockingLayoutSettings;
DockingLayoutSettings.layoutPaddings = 16;


/***/ }),

/***/ 85017:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LayoutItem = exports.MinWeight = exports.SplitterSize = exports.setHoverLocation = exports._syncLayoutHelper = void 0;
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const _dashboard_viewer_constants_1 = __webpack_require__(6943);
function _syncLayoutHelper(sourceArray, destArray, addHandler) {
    if (sourceArray) {
        destArray(sourceArray.peek().map(item => addHandler(item)));
        return sourceArray.subscribe((changes) => {
            changes.sort((a, b) => a.status === 'deleted' ? -1 : 1).forEach((arrayChange) => {
                var change = arrayChange;
                if (change.status === 'added') {
                    destArray.splice(change.index, 0, addHandler(change.value));
                }
                else if (change.status === 'deleted') {
                    var itemToDelete = destArray.peek()[change.index];
                    destArray.remove(itemToDelete);
                    itemToDelete.dispose();
                }
            });
        }, null, 'arrayChange');
    }
    return undefined;
}
exports._syncLayoutHelper = _syncLayoutHelper;
function setHoverLocation(hoverLayoutItem, location = null, dropBehavior = 'InsertBesideGroup') {
    if (hoverLayoutItem) {
        if (hoverLayoutItem.viewModel.hasItem()) {
            if (dropBehavior === 'InsertIntoGroup') {
                setHoverLocationCore(hoverLayoutItem, location);
            }
            else {
                hoverLayoutItem.dragOverLocation(location);
            }
        }
        else {
            setHoverLocationCore(hoverLayoutItem, location);
        }
    }
}
exports.setHoverLocation = setHoverLocation;
function setHoverLocationCore(hoverLayoutItem, location = null) {
    var items = hoverLayoutItem.items().filter(item => item.visible());
    if (!location || hoverLayoutItem.viewModel.orientation() === 'Horizontal' && (location === 'top' || location === 'bottom') ||
        hoverLayoutItem.viewModel.orientation() === 'Vertical' && (location === 'left' || location === 'right')) {
        items.forEach(child => setHoverLocation(child, location));
    }
    else {
        var index = (location === 'top' || location === 'left') ? 0 : items.length - 1;
        setHoverLocation(items[index], location);
    }
}
exports.SplitterSize = 6;
exports.MinWeight = 0.00001;
class LayoutItem {
    constructor(viewModel, parent) {
        this.viewModel = viewModel;
        this._isUpdating = ko.observable(false);
        this._constraints = null;
        this._width = ko.observable(800);
        this._height = ko.observable(600);
        this._subscriptions = [];
        this.setConstraints = (constraints) => {
            var correctSize = function (value, addition) {
                return (Number.MAX_VALUE - value >= addition) ? value + addition : Number.MAX_VALUE;
            };
            this._constraints.min.width(correctSize(constraints.min.width, exports.SplitterSize));
            this._constraints.min.height(correctSize(constraints.min.height, exports.SplitterSize));
            this._constraints.max.width(correctSize(constraints.max.width, exports.SplitterSize));
            this._constraints.max.height(correctSize(constraints.max.height, exports.SplitterSize));
        };
        this.items = ko.observableArray([]);
        this.resizeHandles = ko.observable('none');
        this.isSelected = ko.observable(false);
        this.dragOverLocation = ko.observable();
        this.itemStyle = ko.computed(() => {
            var result = '';
            if (!!this.dragOverLocation()) {
                result += ' dx-drag-over-' + this.dragOverLocation();
            }
            if (this.isSelected()) {
                result += ' dx-layout-selected';
            }
            return result;
        });
        this.coverClickHandler = (e) => {
            this.onEvent && this.onEvent(this, 'click');
        };
        this.coverMouseOverHandler = (e) => {
            this.onEvent && this.onEvent(this, 'mouseover');
        };
        this.resizeStarted = () => {
            this.onEvent && this.onEvent(this, 'resize-started');
        };
        this.resizeCompleted = () => {
            this.onEvent && this.onEvent(this, 'resize-completed');
        };
        this.getContext = () => {
            return this.onEvent && this.onEvent(this, 'get-context');
        };
        this.getLocalContext = () => {
            return this.onEvent && this.onEvent(this, 'get-local-context');
        };
        this.getContextMenu = () => {
            const service = this.onEvent && this.onEvent(this, 'get-context-menu-service');
            return service && service(this);
        };
        this.getEmptyItemTemplates = () => {
            const service = this.onEvent && this.onEvent(this, 'get-empty-item-templates-service');
            return service && service(this);
        };
        this.getLayoutItemPlaceholder = () => {
            const service = this.onEvent && this.onEvent(this, 'get-layout-item-placeholder-service');
            return service && service(this);
        };
        this.verticalPaddings = ko.observable(0);
        this.horizontalPaddings = ko.observable(0);
        this.repaintCallbacks = _jquery_helpers_1.createJQueryCallbacks();
        var self = this;
        this._parent = ko.observable(parent);
        if (!!this._parent()) {
            this.isDesignMode = this._parent().isDesignMode;
            this.isLayoutReady = this._parent().isLayoutReady;
        }
        else {
            this.isDesignMode = ko.observable(false);
            this.isLayoutReady = ko.observable(true);
        }
        this._constraints = {
            min: {
                width: ko.observable(viewModel.hasItem() ? _dashboard_viewer_constants_1.DashboardViewerConstants.minPaneWidth : 0),
                height: ko.observable(viewModel.hasItem() ? _dashboard_viewer_constants_1.DashboardViewerConstants.minPaneHeight : 0)
            },
            max: {
                width: ko.observable(Number.MAX_VALUE),
                height: ko.observable(Number.MAX_VALUE)
            }
        };
        var visible = ko.observable(true);
        this.visible = ko.computed({
            read: () => {
                var atLeastOneChildVisible = this.items().reduce((res, item) => { return res || item.visible(); }, this.items().length === 0 || !!this.viewModel.hasItem());
                return atLeastOneChildVisible && visible();
            },
            write: (val) => {
                visible(val);
            }
        });
        this.sizeController = {
            getWidth: () => this.containerWidth(),
            getHeight: () => this.containerHeight(),
            requestRepaint: this.repaintCallbacks,
            visible: this.visible,
            setConstraints: this.setConstraints
        };
        this.minWidth = ko.computed(() => {
            var result = this._constraints.min.width();
            if (this.items().length > 0) {
                if (this.viewModel.orientation() === 'Horizontal') {
                    var minFromChildren = this.items().reduce((total, item) => total + item.minWidth(), 0);
                    result = minFromChildren > result ? minFromChildren : result;
                }
                else {
                    this.items().forEach(item => {
                        if (item.minWidth() > result) {
                            result = item.minWidth();
                        }
                    });
                }
            }
            return result + this.horizontalPaddings();
        });
        this.minHeight = ko.computed(() => {
            var result = this._constraints.min.height();
            if (this.items().length > 0) {
                if (this.viewModel.orientation() === 'Vertical') {
                    var minFromChildren = this.items().reduce((total, item) => total + item.minHeight(), 0);
                    result = Math.max(minFromChildren, result);
                }
                else {
                    this.items().forEach(item => {
                        if (item.minHeight() > result) {
                            result = item.minHeight();
                        }
                    });
                }
            }
            return result + this.verticalPaddings();
        });
        this.maxWidth = ko.computed(() => {
            return Math.min(Number.MAX_VALUE, this._constraints.max.width());
        });
        this.maxHeight = ko.computed(() => {
            var result = this._constraints.max.height();
            if (this.items().length > 0 && !this.viewModel.ignoreChildMaxHeight) {
                if (this.viewModel.orientation() === 'Vertical') {
                    if (this.items().some(item => item.maxHeight() === Number.MAX_VALUE)) {
                        result = Number.MAX_VALUE;
                    }
                    else {
                        result = this.items().reduce((total, item) => total + item.maxHeight(), 0);
                    }
                }
                else {
                    result = this.items().reduce((total, item) => Math.max(total, item.maxHeight()), 0);
                }
            }
            return Math.min(Number.MAX_VALUE, result + this.verticalPaddings());
        });
        this.width = ko.computed({
            read: () => {
                return this._width() > this.minWidth() ? this._width() : this.minWidth();
            },
            write: (val) => {
                if (this._parent()) {
                    var newWeight = this.viewModel.weight() * (val / this._width() || 1);
                    this._changeWeight(newWeight);
                }
                else {
                    this._width(val);
                }
            }
        });
        this.height = ko.computed({
            read: () => {
                return this._height() > this.minHeight() ? this._height() : this.minHeight();
            },
            write: (val) => {
                if (this._parent()) {
                    var newWeight = this.viewModel.weight() * (val / this._height() || 1);
                    this._changeWeight(newWeight);
                }
                else {
                    this._height(val);
                }
            }
        });
        this.contentWidth = ko.computed(() => this.width() - this.horizontalPaddings());
        this.contentHeight = ko.computed(() => this.height() - this.verticalPaddings());
        this.containerWidth = ko.computed(() => this.width() - exports.SplitterSize);
        this.containerHeight = ko.computed(() => this.height() - exports.SplitterSize);
        this.areChildrenSelected = ko.pureComputed(() => {
            let result = !!this.viewModel.hasItem() && !!this.visible() && this.isSelected();
            this.items().forEach((layoutItem) => {
                result = result || layoutItem.areChildrenSelected();
            });
            return result;
        });
        this._subscriptions.push(_syncLayoutHelper(viewModel.visibleItems, this.items, model => new LayoutItem(model._createViewModel(), self)));
        this._subscriptions.push(ko.computed(() => {
            if (!this._isUpdating()) {
                this._updateChildrenSize(this.items().filter(item => item.visible()));
                this._updateChildrenResizeHandles(this.items());
            }
        }));
        var fireRepaintCallback = () => {
            if (this.isLayoutReady()) {
                this.repaintCallbacks.fire();
            }
        };
        this._subscriptions.push(this.height.subscribe(() => fireRepaintCallback()));
        this._subscriptions.push(this.width.subscribe(() => fireRepaintCallback()));
        this._subscriptions.push(this.isLayoutReady.subscribe(() => fireRepaintCallback()));
        fireRepaintCallback();
        var placeholderViewModel = this.viewModel.getPlaceholder && this.viewModel.getPlaceholder();
        if (placeholderViewModel) {
            this.placeholderItem = new LayoutItem(placeholderViewModel, this);
        }
        this._subscriptions.push(this.visible, this.minWidth, this.minHeight, this.maxWidth, this.maxHeight, this.width, this.height, this.areChildrenSelected);
    }
    static findLargestItem(layoutItem) {
        if (layoutItem.viewModel.hasItem()) {
            return { maxSquare: layoutItem.width() * layoutItem.height(), item: layoutItem };
        }
        var result = { maxSquare: 0, item: null };
        layoutItem.items().forEach(item => {
            var itemMaxSquare = this.findLargestItem(item);
            if (result.maxSquare < itemMaxSquare.maxSquare) {
                result = itemMaxSquare;
            }
        });
        return result;
    }
    _changeWeight(newWeight) {
        this._parent() && this._parent()._isUpdating(true);
        try {
            this._changeWeightCore(newWeight);
        }
        finally {
            this._parent() && this._parent()._isUpdating(false);
        }
    }
    _changeWeightCore(newWeight) {
        var selfIndex = this._parent().items().indexOf(this);
        var neighbourItem = this._parent().items()[selfIndex + 1];
        var newNeighbourWeight = neighbourItem.viewModel.weight() - (newWeight - this.viewModel.weight());
        neighbourItem.viewModel.weight(this._correntWeight(newNeighbourWeight));
        this.viewModel.weight(this._correntWeight(newWeight));
    }
    _correntWeight(weight) {
        return weight < exports.MinWeight ? exports.MinWeight : weight;
    }
    _safeSetWidth(itemWidth) {
        var computedWidth = itemWidth;
        if (computedWidth < this.minWidth()) {
            computedWidth = this.minWidth();
        }
        if (computedWidth > this.maxWidth()) {
            computedWidth = this.maxWidth();
        }
        this._width(computedWidth);
    }
    _safeSetHeight(itemHeight) {
        var computedHeight = itemHeight;
        if (computedHeight < this.minHeight()) {
            computedHeight = this.minHeight();
        }
        if (computedHeight > this.maxHeight()) {
            computedHeight = this.maxHeight();
        }
        this._height(computedHeight);
    }
    _updateChildrenSize(items) {
        if (items.length > 0) {
            var totalWeight = items.reduce((total, item) => total + item.viewModel.weight(), 0);
            var undistributedDelta = 0;
            if (this.viewModel.orientation() === 'Horizontal') {
                items.forEach(item => {
                    item._height(this.contentHeight());
                    var itemDimension = this.contentWidth() * item.viewModel.weight() / totalWeight;
                    item._safeSetWidth(itemDimension);
                    undistributedDelta += item._width.peek() - itemDimension;
                });
                items.reduceRight((_, item) => {
                    if (undistributedDelta !== 0) {
                        var itemDimenstion = item._width.peek();
                        item._safeSetWidth(itemDimenstion - undistributedDelta);
                        undistributedDelta += item._width.peek() - itemDimenstion;
                    }
                }, {});
                if (undistributedDelta < 0) {
                    items[items.length - 1]._width(items[items.length - 1]._width.peek() - undistributedDelta);
                }
            }
            else {
                items.forEach(item => {
                    item._width(this.contentWidth());
                    var itemDimension = this.contentHeight() * item.viewModel.weight() / totalWeight;
                    item._safeSetHeight(itemDimension);
                    undistributedDelta += item._height.peek() - itemDimension;
                });
                items.reduceRight((_, item) => {
                    if (undistributedDelta !== 0) {
                        var itemDimenstion = item._height.peek();
                        item._safeSetHeight(itemDimenstion - undistributedDelta);
                        undistributedDelta += item._height.peek() - itemDimenstion;
                    }
                }, {});
                if (undistributedDelta < 0) {
                    items[items.length - 1]._height(items[items.length - 1]._height.peek() - undistributedDelta);
                }
            }
        }
    }
    _updateChildrenResizeHandles(items) {
        var itemsCount = items.length;
        if (itemsCount > 0) {
            var handle = this.viewModel.orientation() === 'Horizontal' ? 'e' : 's';
            items.forEach((item, index) => {
                item.resizeHandles(index < itemsCount - 1 ? handle : 'none');
            });
        }
    }
    dispose() {
        this._parent(null);
        if (this.placeholderItem) {
            this.placeholderItem.dispose();
            this.placeholderItem = null;
        }
        this.repaintCallbacks.empty();
        this.items().forEach(i => i.dispose());
        this._subscriptions.forEach(subscription => subscription && subscription.dispose());
        this._subscriptions = [];
    }
    isValidWidth(val) {
        if (this._parent()) {
            if (val < this.minWidth() || val > this.maxWidth()) {
                return false;
            }
            var selfIndex = this._parent().items().indexOf(this);
            if (selfIndex < this._parent().items().length - 1) {
                var neighbourItem = this._parent().items()[selfIndex + 1];
                var neighbourNewWidth = neighbourItem.width() - val + this.width();
                if (neighbourNewWidth < neighbourItem.minWidth() || neighbourNewWidth > neighbourItem.maxWidth()) {
                    return false;
                }
            }
        }
        return this.minWidth() !== this.maxWidth();
    }
    isValidHeight(val) {
        if (this._parent()) {
            if (val < this.minHeight() || val > this.maxHeight()) {
                return false;
            }
            var selfIndex = this._parent().items().indexOf(this);
            if (selfIndex < this._parent().items().length - 1) {
                var neighbourItem = this._parent().items()[selfIndex + 1];
                var neighbourNewHeight = neighbourItem.height() - val + this.height();
                if (neighbourNewHeight < neighbourItem.minHeight() || neighbourNewHeight > neighbourItem.maxHeight()) {
                    return false;
                }
            }
        }
        return this.minHeight() !== this.maxHeight();
    }
    getSelectionParentsList(location) {
        var current = this;
        var parent = current._parent();
        var result = [{ node: current, dropBehavior: 'InsertBesideGroup' }];
        var orientation = !!parent && parent.viewModel.orientation();
        do {
            if (!!parent && !parent.viewModel.hasItem()) {
                var items = parent.items().filter(item => item.visible());
                var itemIndex = items.indexOf(current);
                var firstItemIndex = 0;
                var lastItemIndex = items.length - 1;
                if (parent.viewModel.orientation() === 'Horizontal' && (location === 'left' || location === 'right')) {
                    if (items.length > 1 &&
                        (location === 'left' && itemIndex > firstItemIndex || location === 'right' && itemIndex < lastItemIndex
                            || location === 'left' && itemIndex === lastItemIndex || location === 'right' && itemIndex === firstItemIndex)) {
                        return result;
                    }
                    if (location === 'left' && itemIndex === firstItemIndex || location === 'right' && itemIndex === lastItemIndex) {
                        orientation = this._inverseOrientation(parent.viewModel.orientation());
                    }
                }
                if (parent.viewModel.orientation() === 'Vertical' && (location === 'top' || location === 'bottom')) {
                    if (items.length > 1 &&
                        (location === 'top' && itemIndex > firstItemIndex || location === 'bottom' && itemIndex < lastItemIndex
                            || location === 'top' && itemIndex === lastItemIndex || location === 'bottom' && itemIndex === firstItemIndex)) {
                        return result;
                    }
                    if (location === 'top' && itemIndex === firstItemIndex || location === 'bottom' && itemIndex === lastItemIndex) {
                        orientation = this._inverseOrientation(parent.viewModel.orientation());
                    }
                }
            }
            current = parent;
            parent = current && current._parent();
            if (current && parent && !current.viewModel.hasItem() && orientation === current.viewModel.orientation() && !this._checkGroupWillBeUnwrapped(current)) {
                result.push({ node: current, dropBehavior: 'InsertBesideGroup' });
            }
            if (!!current && current.viewModel.hasItem()
                && current.viewModel.orientation() !== this._getRequiredOrientationByLocation(location)) {
                result.push({ node: current, dropBehavior: 'InsertIntoGroup' });
            }
        } while (!!current && !!parent && !current.viewModel.hasItem());
        return result;
    }
    _getRequiredOrientationByLocation(location) {
        return (location === 'left' || location === 'right') ? 'Horizontal' : 'Vertical';
    }
    _inverseOrientation(orientation) {
        return orientation === 'Horizontal' ? 'Vertical' : 'Horizontal';
    }
    _checkGroupWillBeUnwrapped(group) {
        var _a;
        return group.items().filter(i => i.visible()).length === 1
            && group.items().filter(i => !i.visible()).length === 1
            && ((_a = group._parent()) === null || _a === void 0 ? void 0 : _a._parent())
            && !group.viewModel.hasItem();
    }
    findLayoutItem(criteria) {
        var result = undefined;
        if (criteria(this)) {
            result = this;
        }
        if (!result) {
            this.items.peek().forEach(item => {
                result = item.findLayoutItem(criteria) || result;
            });
        }
        return result;
    }
    findLayoutItemByItemModel(itemModel) {
        return this.findLayoutItem((item) => {
            return item.viewModel.model === itemModel.model;
        });
    }
    onEvent(item, event) {
        return this._parent() && this._parent().onEvent && this._parent().onEvent(item, event);
    }
    updateSize(width, height) {
        try {
            this.isLayoutReady(false);
            this.width(width);
            this.height(height);
        }
        finally {
            this.isLayoutReady(true);
        }
    }
    create(modelItemJson, location, insertBehavior) {
        var rootItem = this.getRoot();
        var createdItemViewModel = this.viewModel.create(modelItemJson, location, insertBehavior);
        var createdLayoutItem = rootItem.findLayoutItemByItemModel(createdItemViewModel);
        createdLayoutItem && createdLayoutItem.coverClickHandler(null);
        return createdLayoutItem;
    }
    moveTo(layoutNode, location, insertBehavior) {
        var rootItem = this.getRoot();
        this.viewModel.moveTo(layoutNode.viewModel, location, insertBehavior);
        var createdLayoutItem = rootItem.findLayoutItemByItemModel(this.viewModel);
        createdLayoutItem && createdLayoutItem.coverClickHandler(null);
        return createdLayoutItem;
    }
    delete() {
        this.viewModel.delete();
        this._parent(null);
    }
    getRoot() {
        var root = this;
        while (root._parent()) {
            root = root._parent();
        }
        return root;
    }
    canAttach(something) {
        return !!this._parent() && this.viewModel.canAttach(something);
    }
    getPlaceholder() {
        return this.placeholderItem;
    }
}
exports.LayoutItem = LayoutItem;
ko.components.register('dx-layout-item', {
    viewModel: {
        createViewModel: (params) => ({
            layoutItem: ko.computed(() => ko.unwrap(params.layoutItem))
        })
    },
    template: { element: 'dx-layout-item' }
});


/***/ }),

/***/ 2979:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const devices_1 = __webpack_require__(52562);
const events_1 = __webpack_require__(68396);
const eventUtils = __webpack_require__(64485);
const $ = __webpack_require__(65311);
const ko = __webpack_require__(71032);
const mouseMoveHandlerKey = 'dxpointermove.dx-ko-layout-resize';
const mouseDownHandlerKey = 'dxpointerdown';
const mouseUpHandlerKey = 'dxpointerup.dx-ko-layout-resize';
function skipDevice(ev) {
    return devices_1.default.real().ios && eventUtils.isMouseEvent(ev);
}
function createHResizeHandler(layoutItem, $element, $ghostbar) {
    return function (ev) {
        $element.parents('.dx-layout').addClass('dx-layout-drag-in-progress');
        layoutItem.resizeStarted && layoutItem.resizeStarted();
        ev.preventDefault();
        var currentWidth = 0;
        var ghostOffsetX = ev.offsetX ? ev.offsetX : 0;
        var originalX = ev.pageX;
        var $ghostbar = $.fn.constructor('<div>', {
            class: 'dx-ghostbar-e',
            css: {
                position: 'fixed',
                height: $element.outerHeight(),
                top: $element.offset().top,
                left: originalX - ghostOffsetX
            }
        }).appendTo('body');
        events_1.on(document, mouseMoveHandlerKey, function (e) {
            if (!skipDevice(e)) {
                var newWidth = layoutItem.width() + e.pageX - originalX;
                if (!layoutItem.isValidWidth || layoutItem.isValidWidth(newWidth)) {
                    currentWidth = newWidth;
                    $ghostbar.css('left', e.pageX - ghostOffsetX);
                }
            }
            e.preventDefault();
            return false;
        });
        events_1.on(document, mouseUpHandlerKey, function (e) {
            setTimeout(() => layoutItem.width(currentWidth), 1);
            $ghostbar.remove();
            $element.parents('.dx-layout').removeClass('dx-layout-drag-in-progress');
            events_1.off(document, mouseMoveHandlerKey);
            events_1.off(document, mouseUpHandlerKey);
            layoutItem.resizeCompleted && layoutItem.resizeCompleted();
            e.preventDefault();
        });
    };
}
function createVResizeHandler(layoutItem, $element, $ghostbar) {
    return function (ev) {
        $element.parents('.dx-layout').addClass('dx-layout-drag-in-progress');
        layoutItem.resizeStarted && layoutItem.resizeStarted();
        ev.preventDefault();
        var currentHeight = 0;
        var ghostOffsetY = ev.offsetY ? ev.offsetY : 0;
        var originalY = ev.pageY;
        var $ghostbar = $.fn.constructor('<div>', {
            class: 'dx-ghostbar-s',
            css: {
                position: 'fixed',
                width: $element.outerWidth(),
                left: $element.offset().left,
                top: originalY - ghostOffsetY
            }
        }).appendTo('body');
        events_1.on(document, mouseMoveHandlerKey, function (e) {
            if (!skipDevice(e)) {
                var newHeight = layoutItem.height() + e.pageY - originalY;
                if (!layoutItem.isValidHeight || layoutItem.isValidHeight(newHeight)) {
                    currentHeight = newHeight;
                    $ghostbar.css('top', e.pageY - ghostOffsetY);
                }
            }
            return false;
        });
        events_1.on(document, mouseUpHandlerKey, function (e) {
            setTimeout(() => layoutItem.height(currentHeight), 1);
            $ghostbar.remove();
            $element.parents('.dx-layout').removeClass('dx-layout-drag-in-progress');
            events_1.off(document, mouseMoveHandlerKey);
            events_1.off(document, mouseUpHandlerKey);
            layoutItem.resizeCompleted && layoutItem.resizeCompleted();
        });
    };
}
ko.bindingHandlers['dx-ko-resizable'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var layoutItem = valueAccessor();
        var $element = $.fn.constructor(element);
        var subscriptions = [];
        var unsubscribe = () => {
            subscriptions.forEach(subscr => {
                subscr.subscribable.dispose();
                events_1.off(subscr.dragbar.get(0), mouseDownHandlerKey);
                subscr.dragbar.remove();
            });
            subscriptions.splice(0, subscriptions.length);
        };
        var createResizeDragBars = (resizeHandles) => {
            unsubscribe();
            if (resizeHandles === 'e') {
                var $dragBar = $.fn.constructor('<div>', {
                    class: 'dx-dragbar-e',
                    ondragover: 'event.stopPropagation();',
                    ondrop: 'event.stopPropagation();',
                    css: {
                        height: layoutItem.height()
                    }
                }).appendTo($element);
                var subscr = layoutItem.height.subscribe(val => {
                    $dragBar.css('height', val);
                });
                events_1.on($dragBar.get(0), mouseDownHandlerKey, createHResizeHandler(layoutItem, $element, $dragBar));
                subscriptions.push({
                    subscribable: subscr,
                    dragbar: $dragBar
                });
            }
            else if (resizeHandles === 's') {
                var $dragBar = $.fn.constructor('<div>', {
                    class: 'dx-dragbar-s',
                    ondragover: 'event.stopPropagation();',
                    ondrop: 'event.stopPropagation();',
                    css: {
                        width: layoutItem.width()
                    }
                }).appendTo($element);
                var subscr = layoutItem.width.subscribe(val => {
                    $dragBar.css('width', val);
                });
                events_1.on($dragBar.get(0), mouseDownHandlerKey, createVResizeHandler(layoutItem, $element, $dragBar));
                subscriptions.push({
                    subscribable: subscr,
                    dragbar: $dragBar
                });
            }
        };
        if (ko.isSubscribable(layoutItem.resizeHandles)) {
            (layoutItem.resizeHandles).subscribe(createResizeDragBars);
        }
        createResizeDragBars(layoutItem.resizeHandles());
        ko.utils.domNodeDisposal.addDisposeCallback(element, unsubscribe);
    }
};


/***/ }),

/***/ 96152:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LayoutDragController = void 0;
const events_1 = __webpack_require__(68396);
const ko = __webpack_require__(71032);
const _layout_item_1 = __webpack_require__(85017);
const _layout_drag_over_state_1 = __webpack_require__(84327);
const _layout_item_drag_item_1 = __webpack_require__(40280);
const _scroll_animator_1 = __webpack_require__(31878);
class LayoutDragController {
    constructor() {
        this._dragOverState = new _layout_drag_over_state_1.DragOverStateController();
        this._layoutMainElement = null;
        this._externalElements = [];
        this._firstOverEvent = false;
    }
    initScrollAnimator(scrollViewProvider) {
        this._scrollAnimator = new _scroll_animator_1.ScrollAnimator(scrollViewProvider);
    }
    cleanScrollAnimator() {
        this._scrollAnimator && this._scrollAnimator.dispose();
        this._scrollAnimator = null;
    }
    initLayoutMainElement(element) {
        if (this._layoutMainElement) {
            throw new Error('Layout main element already initialized');
        }
        this._layoutMainElement = element;
        events_1.on(element, 'dragstart.dx-layout-drag', '.dx-layout-item-plate', args => {
            let originalEvent = args.originalEvent;
            let item = ko.dataFor(originalEvent.target);
            if (item instanceof _layout_item_1.LayoutItem) {
                this._onDragStart(args, new _layout_item_drag_item_1.LayoutItemDragItemInfo(item));
                return true;
            }
        });
        events_1.on(element, 'dragover.dx-layout-drag', args => {
            let originalEvent = args.originalEvent;
            let item = ko.dataFor(originalEvent.target);
            this._onDragOver(args, item);
        });
        events_1.on(element, 'drag.dx-layout-drag', args => this._onDrag(args));
        events_1.on(element, 'dragleave.dx-layout-drag', args => this._onDragLeave());
        events_1.on(element, 'drop.dx-layout-drag', args => this._onDrop(args));
        events_1.on(element, 'dragend.dx-layout-drag', args => this._onDragEnd());
    }
    cleanLayoutMainElement(element) {
        if (this._layoutMainElement === element) {
            events_1.off(element, '.dx-layout-drag');
            this._layoutMainElement = null;
        }
    }
    initExternalElement(element, dragItemInfo) {
        this._externalElements.push(element);
        events_1.on(element, 'dragstart.dx-layout-drag', args => {
            this._onDragStart(args, dragItemInfo);
        });
        events_1.on(element, 'drag.dx-layout-drag', args => this._onDrag(args));
        events_1.on(element, 'dragend.dx-layout-drag', args => this._onDragEnd());
    }
    cleanExternalElement(element) {
        this._externalElements && this._externalElements.splice(this._externalElements.indexOf(element), 1);
        events_1.off(element, '.dx-layout-drag');
    }
    dispose() {
        this.cleanScrollAnimator();
        this.cleanLayoutMainElement(this._layoutMainElement);
        this._externalElements && this._externalElements.slice().forEach(element => this.cleanExternalElement(element));
        this._externalElements = null;
    }
    _onDragStart(eventArgs, dragData) {
        let originalEvent = eventArgs.originalEvent;
        originalEvent.dataTransfer.effectAllowed = 'move';
        this._dragData = dragData;
        this._firstOverEvent = true;
        this._dragOverState.reset();
        this._scrollAnimator && this._scrollAnimator.start();
    }
    _onDragOver(eventArgs, targetLayoutItem) {
        let originalEvent = eventArgs.originalEvent;
        let cursorClientX = originalEvent.clientX;
        let cursorClientY = originalEvent.clientY;
        let targetElement = eventArgs.target;
        if (this._firstOverEvent) {
            this._dragData.dragStart();
            this._firstOverEvent = false;
        }
        if (targetLayoutItem instanceof _layout_item_1.LayoutItem && this._dragData && this._dragData.canDrop(targetLayoutItem)) {
            let dragOverController = targetLayoutItem.viewModel.dragOverInnerElementController;
            if (dragOverController) {
                let index = findElementIndex(targetElement, dragOverController.selector, cursorClientX, cursorClientY);
                if (index !== -1) {
                    dragOverController.onDragOver(index);
                }
            }
            let itemBounds = targetElement.getBoundingClientRect();
            let currentHoverLocation = getLocation(cursorClientX - itemBounds.left, cursorClientY - itemBounds.top, itemBounds.width, itemBounds.height);
            this._dragOverState.update(targetLayoutItem, currentHoverLocation);
            eventArgs.preventDefault();
            return true;
        }
        else {
            this._dragOverState.reset();
        }
    }
    _onDragLeave() {
        this._dragOverState.reset();
    }
    _onDrop(eventArgs) {
        let dragOverState = this._dragOverState.getState();
        if (dragOverState) {
            this._dragData.drop(dragOverState);
            eventArgs.stopPropagation();
        }
        this._onDragEnd();
    }
    _onDrag(eventArgs) {
        if (this._scrollAnimator) {
            let originalEvent = eventArgs.originalEvent;
            this._scrollAnimator.updateCursorPosition(originalEvent.clientX, originalEvent.clientY);
        }
    }
    _onDragEnd() {
        this._scrollAnimator && this._scrollAnimator.stop();
        this._dragOverState.reset();
        this._dragData && this._dragData.dragEnd();
        this._dragData = null;
    }
}
exports.LayoutDragController = LayoutDragController;
const getLocation = (x, y, width, height) => {
    if (y >= height / width * x) {
        return (y >= -height / width * x + height) ? 'bottom' : 'left';
    }
    else {
        return (y >= -height / width * x + height) ? 'right' : 'top';
    }
};
const findElementIndex = (originalElement, selector, mouseClientX, mouseClientY) => {
    let elements = originalElement
        .parentElement
        .querySelectorAll(selector);
    for (let index = 0; index < elements.length; index++) {
        let element = elements[index];
        let rect = element.getBoundingClientRect();
        if (rect.left < mouseClientX && rect.right > mouseClientX
            && rect.top < mouseClientY && rect.bottom > mouseClientY) {
            return index;
        }
    }
    return -1;
};


/***/ }),

/***/ 24378:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardDragItemInfo = void 0;
class DashboardDragItemInfo {
}
exports.DashboardDragItemInfo = DashboardDragItemInfo;


/***/ }),

/***/ 84327:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DragOverStateController = void 0;
const _layout_item_1 = __webpack_require__(85017);
class DragOverStateController {
    constructor() {
    }
    update(targetItem, currentHoverLocation) {
        if (!this._inTimer && (this._dragOverItem !== targetItem || currentHoverLocation !== this._hoverLocation)) {
            this.reset();
            this._hoverLocation = currentHoverLocation;
            this._dragOverItem = targetItem;
            _layout_item_1.setHoverLocation(this._dragOverItem, this._hoverLocation);
            this._currentTargetItem = this._dragOverItem;
            this._currentTargetItemBehavior = 'InsertBesideGroup';
            var selectionList = this._dragOverItem.getSelectionParentsList(this._hoverLocation);
            if (selectionList.length > 1) {
                var currentIndex = 1;
                this._timer && clearInterval(this._timer);
                this._timer = window.setInterval(() => {
                    this._inTimer = true;
                    try {
                        _layout_item_1.setHoverLocation(this._currentTargetItem, null, this._currentTargetItemBehavior);
                        this._currentTargetItem = selectionList[currentIndex].node;
                        this._currentTargetItemBehavior = selectionList[currentIndex].dropBehavior;
                        _layout_item_1.setHoverLocation(this._currentTargetItem, this._hoverLocation, this._currentTargetItemBehavior);
                        currentIndex++;
                        if (currentIndex >= selectionList.length) {
                            currentIndex = 0;
                        }
                    }
                    finally {
                        this._inTimer = false;
                    }
                }, 1000);
            }
        }
    }
    getState() {
        if (this._currentTargetItem) {
            return {
                targetItem: this._currentTargetItem,
                targetItemBehavior: this._currentTargetItemBehavior,
                hoverLocation: this._hoverLocation
            };
        }
        return null;
    }
    reset() {
        this._timer && clearInterval(this._timer);
        _layout_item_1.setHoverLocation(this._dragOverItem);
        _layout_item_1.setHoverLocation(this._currentTargetItem);
        this._currentTargetItem = null;
        this._currentTargetItemBehavior = 'InsertBesideGroup';
        this._dragOverItem = null;
        this._timer = null;
        this._inTimer = null;
    }
}
exports.DragOverStateController = DragOverStateController;


/***/ }),

/***/ 40280:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LayoutItemDragItemInfo = void 0;
const _drag_item_info_1 = __webpack_require__(24378);
class LayoutItemDragItemInfo extends _drag_item_info_1.DashboardDragItemInfo {
    constructor(_currentLayoutItem) {
        super();
        this._currentLayoutItem = _currentLayoutItem;
    }
    canDrop(layoutItem) {
        return this._currentLayoutItem !== layoutItem && layoutItem.canAttach(this._currentLayoutItem.viewModel);
    }
    drop(dragOverState) {
        this._currentLayoutItem.moveTo(dragOverState.targetItem, dragOverState.hoverLocation, dragOverState.targetItemBehavior);
    }
    dragStart() {
        this._currentLayoutItem.visible(false);
    }
    dragEnd() {
        this._currentLayoutItem.visible(true);
    }
}
exports.LayoutItemDragItemInfo = LayoutItemDragItemInfo;


/***/ }),

/***/ 31878:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ScrollAnimator = void 0;
class ScrollAnimator {
    constructor(_scrollViewProvider) {
        this._scrollViewProvider = _scrollViewProvider;
    }
    _requestAnimationFrame() {
        this._nextAnimationFrame = window.requestAnimationFrame(() => this._animationStep());
    }
    _animationStep() {
        if (this._cursorPosition && this._scrollViewBoundary && this._scrollViewProvider) {
            processScrollStep(this._cursorPosition.x, this._cursorPosition.y, this._scrollViewProvider, this._scrollViewBoundary);
        }
        this._requestAnimationFrame();
    }
    start() {
        this._scrollViewBoundary = this._scrollViewProvider.getBoundingClientRect();
        this._requestAnimationFrame();
    }
    updateCursorPosition(cursorX, cursorY) {
        if (cursorX > 0 && cursorY > 0) {
            this._cursorPosition = { x: cursorX, y: cursorY };
        }
        else {
            this.resetCursorPosition();
        }
    }
    resetCursorPosition() {
        this._cursorPosition = null;
    }
    stop() {
        window.cancelAnimationFrame(this._nextAnimationFrame);
        this._scrollViewBoundary = null;
        this.resetCursorPosition();
    }
    dispose() {
        this.stop();
        this._scrollViewProvider = undefined;
    }
}
exports.ScrollAnimator = ScrollAnimator;
ScrollAnimator.scrollSpeed = 30;
ScrollAnimator.scrollSensitivity = 60;
const processScrollStep = (cursorX, cursorY, scrollViewInstance, scrollViewBoundaries) => {
    let distanceToTop = cursorY - scrollViewBoundaries.top;
    let distanceToBottom = scrollViewBoundaries.bottom - cursorY;
    let distanceToLeft = cursorX - scrollViewBoundaries.left;
    let distanceToRight = scrollViewBoundaries.right - cursorX;
    if (distanceToTop >= 0 && distanceToBottom >= 0 && distanceToLeft >= 0 && distanceToRight >= 0) {
        let scrollSpeed = Object.assign(Object.assign(Object.assign(Object.assign({}, calculateScrollSpeed(distanceToTop, 'top', -1)), calculateScrollSpeed(distanceToBottom, 'top', 1)), calculateScrollSpeed(distanceToLeft, 'left', -1)), calculateScrollSpeed(distanceToRight, 'left', 1));
        if (scrollSpeed.left || scrollSpeed.top) {
            let currentOffset = scrollViewInstance.getScrollOffset();
            scrollViewInstance.setScrollOffset({
                top: currentOffset.top + (scrollSpeed.top || 0),
                left: currentOffset.left + (scrollSpeed.left || 0)
            });
        }
    }
};
const calculateScrollSpeed = (distanceToBorder, mainAxisDirection, scrollAxisDirection) => {
    if (distanceToBorder <= ScrollAnimator.scrollSensitivity) {
        const sensitivity = ScrollAnimator.scrollSensitivity;
        const maxSpeed = ScrollAnimator.scrollSpeed;
        return {
            [mainAxisDirection]: scrollAxisDirection * Math.ceil(Math.pow((sensitivity - distanceToBorder) / sensitivity, 2) * maxSpeed),
        };
    }
    return null;
};


/***/ }),

/***/ 67963:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GroupViewModel = void 0;
const ko = __webpack_require__(71032);
const disposable_object_1 = __webpack_require__(99253);
const _dashboard_item_bindings_1 = __webpack_require__(22188);
const _layout_item_1 = __webpack_require__(85017);
class GroupViewModel extends disposable_object_1.DisposableObject {
    constructor(params) {
        super();
        this.defaultPadding = _layout_item_1.SplitterSize * 2;
        this.padding = ko.observable(this.defaultPadding);
        this.headerHeight = ko.observable(_dashboard_item_bindings_1.DashboardItemHeaderHeight);
        this.layoutItem = ko.computed(() => ko.unwrap(params.layoutItem));
        ko.computed(() => {
            this.layoutItem().verticalPaddings(this.padding() * 2 + this.headerHeight());
            this.layoutItem().horizontalPaddings(this.padding() * 2);
        });
        ko.computed(() => {
            this.layoutItem().setConstraints({
                min: {
                    width: this.layoutItem().items().length === 0 ? 100 : 0,
                    height: this.layoutItem().items().length === 0 ? 100 : 0
                },
                max: {
                    width: Number.MAX_VALUE,
                    height: Number.MAX_VALUE
                }
            });
        });
    }
}
exports.GroupViewModel = GroupViewModel;
ko.components.register('dx-dashboard-layout-group', {
    viewModel: GroupViewModel,
    template: { element: 'dx-dashboard-layout-group' }
});


/***/ }),

/***/ 52120:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardTabsViewModel = void 0;
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const disposable_object_1 = __webpack_require__(99253);
const _knockout_utils_1 = __webpack_require__(4437);
const _tab_header_calculator_1 = __webpack_require__(89808);
const _base_item_1 = __webpack_require__(11439);
const _popup_menu_creator_1 = __webpack_require__(46474);
const _interfaces_1 = __webpack_require__(60136);
const _dashboard_item_bindings_1 = __webpack_require__(22188);
const _element_size_utils_1 = __webpack_require__(94410);
class DashboardTabsViewModel extends disposable_object_1.DisposableObject {
    constructor(layoutItem, headerHeight, element) {
        super();
        this.layoutItem = layoutItem;
        this.headerHeight = headerHeight;
        this.element = element;
        this.showMenu = ko.observable(false);
        this.tabPageBindings = ko.observableArray([]).extend({ deferred: true });
        this.selectedItemKeys = ko.observableArray([]);
        this.showAddButton = ko.computed(() => {
            return this.layoutItem.isDesignMode() && this.showCaption;
        });
        this._defaultButtonWidth = 34;
        this._tabsInfoCache = {};
        this._toolbarCache = {};
        if (this.viewModel.item()) {
            this.toDispose(_knockout_utils_1.subscribeAndPerform(this.viewModel.item().showCaption, (newValue) => {
                headerHeight(newValue ? _dashboard_item_bindings_1.DashboardItemHeaderHeight : 0);
            }));
        }
        this._initialize();
    }
    get viewModel() {
        return this.layoutItem.viewModel;
    }
    get showCaption() {
        return this.viewModel.item() ? this.viewModel.item().showCaption() : true;
    }
    get _containerSizeController() {
        return this.layoutItem.sizeController;
    }
    toggleMenu(bindings, args) {
        let menu = this._createMenuToolbarItem(this.headersViewModel.leftVisibleIndex, this.headersViewModel.rightVisibleIndex);
        let boundaryContainer = _base_item_1.getControlContainer(this.element);
        let container = this.element.firstElementChild;
        _popup_menu_creator_1.PopupMenuCreator.toggleMenu(args.currentTarget, menu, container, boundaryContainer);
    }
    createTabPage() {
        this.viewModel.createTabPage();
    }
    onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            var tabPageBinding = this.tabPageBindings().filter(tabPageBinding => tabPageBinding.id === e.addedItems[0].id)[0];
            if (tabPageBinding && tabPageBinding.pageDashboardItem !== this.viewModel.activeTabPage()) {
                this.viewModel.activeTabPage(tabPageBinding.pageDashboardItem);
            }
        }
    }
    _syncTabPageBindings(childItems) {
        let subscriptions = [];
        const createTabPageBindings = (pageViewModels) => {
            let tabPageBindings = pageViewModels
                .filter(pageViewModel => pageViewModel.hasItem())
                .map(pageViewModel => this._createPageBinding(pageViewModel.item, pageViewModel.model));
            this.tabPageBindings(tabPageBindings);
        };
        this.toDispose(_knockout_utils_1.safeSubscribe({ childItems }, (args) => {
            let pageViewModels = args.childItems.map(pageLayoutItem => pageLayoutItem._createViewModel());
            subscriptions.forEach(d => d.dispose());
            subscriptions = pageViewModels.map(pageViewModel => pageViewModel.item.subscribe(() => createTabPageBindings(pageViewModels)));
            createTabPageBindings(pageViewModels);
            return {
                dispose: () => subscriptions.forEach(d => d.dispose())
            };
        }));
    }
    _initialize() {
        this.element.setAttribute('data-layout-item-name', this.viewModel.dashboardItem());
        _element_size_utils_1.setElementSize(this.element, this._containerSizeController);
        this._syncTabPageBindings(this.viewModel.childItems);
        this.tabPageBindings.subscribe(() => this._updateTabHeaders());
        this._containerSizeController.requestRepaint.add(() => this._onContainerRepaint());
        this.toDispose(this.layoutItem.isDesignMode.subscribe(newValue => {
            this._updateTabHeaders();
        }));
        this.toDispose(_knockout_utils_1.safeSubscribe({
            activeTabPage: this.viewModel.activeTabPage,
            tabPageBindings: this.tabPageBindings
        }, (args) => {
            this.selectedItemKeys(this._getSelectedKeys(args.activeTabPage));
            args.tabPageBindings.forEach((page) => {
                if (this._toolbarCache[page.dashboardItem.componentName()] && args.activeTabPage) {
                    this._toolbarCache[page.dashboardItem.componentName()].disabled = page.id !== args.activeTabPage.componentName();
                }
            });
        }));
    }
    _createMenuToolbarItem(leftVisibleIndex, rightVisibleIndex) {
        let hiddenTabs = [];
        this.viewModel.childItems().forEach((layoutPageItem, i) => {
            let layoutViewModel = layoutPageItem._createViewModel();
            if (layoutViewModel.hasItem()) {
                hiddenTabs.push({
                    name: layoutViewModel.item().name() ? layoutViewModel.item().name() : '',
                    page: layoutPageItem.item
                });
            }
        });
        hiddenTabs.splice(leftVisibleIndex, rightVisibleIndex - leftVisibleIndex + 1);
        return {
            type: 'list',
            items: hiddenTabs.map(tab => tab.name),
            itemClick: (itemData, itemElement, menuItemIndex) => {
                this.viewModel.activeTabPage(hiddenTabs[menuItemIndex].page);
                this._updateTabHeaders();
            }
        };
    }
    _getSelectedKeys(activePage) {
        return activePage ? [activePage.componentName()] : [];
    }
    _createPageBinding(toolbarHolder, pageLayoutItem) {
        return {
            dashboardItem: toolbarHolder(),
            id: pageLayoutItem.dashboardItem(),
            pageDashboardItem: pageLayoutItem.item,
            sizeController: new _interfaces_1.SingleTabItemSizeController(this.layoutItem.sizeController.requestRepaint, ko.observable(0), ko.observable(0)),
            context: this.layoutItem.getContext(),
            localContext: this._prepareLocalContext(this.layoutItem.getLocalContext()),
            ignoreBorder: ko.observable(false)
        };
    }
    _prepareLocalContext(localContext) {
        localContext.viewerItemCreated.add((item, viewerItem) => {
            viewerItem.deferredToolbarRenderingPromise = (itemName, width, height) => {
                var def = _jquery_helpers_1.createJQueryDeferred();
                this._onToolbarUpdated(itemName, width, height, def);
                return def.promise();
            };
        });
        localContext.beforeApplyViewerItemOptions.add((item, options, isCreation) => {
            if (this.viewModel.item()) {
                options.CaptionViewModel.ShowCaption = this.showCaption;
            }
        });
        localContext.boundaryContainer = this.element;
        localContext.createCaptionToolbar = (viewerItem, container, controlContainer, popupContainer, viewOptions) => {
            let toolbar = _base_item_1.createDefaultToolbar(viewerItem, container, controlContainer, popupContainer, viewOptions);
            if (container) {
                this._toolbarCache[viewerItem.options.Name] = toolbar;
                let binding = this.tabPageBindings().filter(binding => binding.dashboardItem.componentName() === viewerItem.options.Name)[0];
                toolbar.disabled = !this.viewModel.activeTabPage() || binding.id !== this.viewModel.activeTabPage().componentName();
            }
            return toolbar;
        };
        localContext.viewerItemDispose.add((item, viewerItem) => {
            delete this._tabsInfoCache[item.componentName()];
            delete this._toolbarCache[item.componentName()];
        });
        return localContext;
    }
    _onContainerRepaint() {
        _element_size_utils_1.setElementSize(this.element, this._containerSizeController);
        this._updateTabHeaders();
    }
    _onToolbarUpdated(itemName, width, height, def) {
        let page = this.tabPageBindings().filter(page => page.dashboardItem.componentName() === itemName)[0];
        this.headerHeight(Math.max(this.headerHeight(), height));
        if (page)
            this._tabsInfoCache[page.id] = {
                width: width,
                deferredRender: def
            };
        this._updateTabHeaders();
    }
    _updateTabHeaders() {
        let tabHeadersWidth = this.tabPageBindings().map((page) => this._tabsInfoCache[page.id] ? this._tabsInfoCache[page.id].width : 100);
        let tabHeadersDeferredRender = this.tabPageBindings().map((page) => this._tabsInfoCache[page.id] ? this._tabsInfoCache[page.id].deferredRender : _jquery_helpers_1.createJQueryDeferred());
        if (tabHeadersWidth.length > 0) {
            let buttonsWidth = this.showAddButton() ? this._defaultButtonWidth : 0;
            let activeTabIndex = Math.max(0, this.viewModel.activeTabIndex());
            this.headersViewModel = _tab_header_calculator_1.calcTabHeadersWidth(tabHeadersWidth, this._containerSizeController.getWidth() - buttonsWidth, activeTabIndex, this.showCaption);
            this.showMenu(this.showCaption && this.headersViewModel.widths.some(width => width === 0));
            if (this.showMenu()) {
                buttonsWidth += this._defaultButtonWidth;
                this.headersViewModel = _tab_header_calculator_1.calcTabHeadersWidth(tabHeadersWidth, this._containerSizeController.getWidth() - buttonsWidth, activeTabIndex, this.showCaption);
            }
            this.tabPageBindings().forEach((page, index) => page.ignoreBorder(index === this.headersViewModel.rightVisibleIndex && buttonsWidth === 0));
            this.headersViewModel.widths.forEach((width, i) => {
                this.tabPageBindings()[i].sizeController.width(width);
                this.tabPageBindings()[i].sizeController.height(this.headerHeight());
                if (i >= this.headersViewModel.leftVisibleIndex && i <= this.headersViewModel.rightVisibleIndex) {
                    tabHeadersDeferredRender[i].resolve();
                }
            });
        }
    }
}
exports.DashboardTabsViewModel = DashboardTabsViewModel;


/***/ }),

/***/ 42949:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TabContainerViewModel = void 0;
const ko = __webpack_require__(71032);
const _utils_1 = __webpack_require__(7590);
const _dashboard_item_bindings_1 = __webpack_require__(22188);
const _element_size_utils_1 = __webpack_require__(94410);
const _group_item_bindings_1 = __webpack_require__(67963);
const _dashboard_tabs_view_model_1 = __webpack_require__(52120);
ko.bindingHandlers['dx-dashboard-layout-tab-binding'] = {
    init: function (element, valueAccessor, _, __, bindingContext) {
        var _disposables = [];
        var params = ko.unwrap(valueAccessor());
        element.classList.add('dx-dashboard-item-container');
        if (params.ignoreBorder())
            element.classList.add('dx-dashboard-ignore-border');
        let sizeController = params.sizeController;
        _element_size_utils_1.setElementSize(element, sizeController);
        _disposables.push(params.sizeController.width.subscribe(newValue => { _element_size_utils_1.setElementSize(element, sizeController); }));
        _disposables.push(params.sizeController.height.subscribe(newValue => { _element_size_utils_1.setElementSize(element, sizeController); }));
        _disposables.push(params.ignoreBorder.subscribe(newValue => {
            if (newValue) {
                element.classList.add('dx-dashboard-ignore-border');
            }
            else {
                element.classList.remove('dx-dashboard-ignore-border');
            }
        }));
        var uiStateController = new _dashboard_item_bindings_1.DashboardUIItemStateController(element, params.dashboardItem, params.sizeController, bindingContext, () => {
            var itemViewerAdapter = params.dashboardContext.viewerItemsManager.create(params.dashboardItem, element, params.dashboardContext, params.localContext, viewerItem => {
                _element_size_utils_1.setElementSize(element, sizeController);
                _disposables.push(_element_size_utils_1.createItemSizeUpdater(viewerItem, params.sizeController));
            });
            itemViewerAdapter.initialize();
            return itemViewerAdapter;
        }, ['dx-layout-item-empty-inside-tab']);
        uiStateController.render();
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            _disposables.forEach(d => d.dispose());
            uiStateController.dispose();
        });
        return { controlsDescendantBindings: true };
    }
};
class TabContainerViewModel extends _group_item_bindings_1.GroupViewModel {
    constructor(params) {
        super(params);
        this.activeItems = ko.observableArray();
        this._activeItemsUpdateDebounced = _utils_1.debounce(() => {
            this._updateActiveItems();
        }, 1);
        this._updateActiveItems();
        let isItemShownInsteadTabPage = ko.computed(() => {
            let activeLayoutItem = this.layoutItem().items().length > 0 ? this.layoutItem().items()[0] : undefined;
            if (!activeLayoutItem)
                return false;
            return !!activeLayoutItem._parent().viewModel.activeTabPage()
                && activeLayoutItem._parent().viewModel.activeTabPage() !== activeLayoutItem.viewModel.item();
        });
        ko.computed(() => {
            let newPadding = this.defaultPadding;
            if (isItemShownInsteadTabPage()) {
                newPadding = this.layoutItem().isDesignMode() ? 2 : 0;
            }
            this.padding(newPadding);
        });
        this.toDispose(this.layoutItem().items.subscribe(newValue => {
            this.activeItems.removeAll();
            this._activeItemsUpdateDebounced();
        }));
    }
    _updateActiveItems() {
        this.layoutItem().items().forEach(item => {
            this.activeItems.push(item);
        });
    }
}
exports.TabContainerViewModel = TabContainerViewModel;
ko.components.register('dx-dashboard-layout-tab-container', {
    viewModel: TabContainerViewModel,
    template: { element: 'dx-dashboard-layout-tab-container' }
});
ko.components.register('dashboard-layout-tabs', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            return new _dashboard_tabs_view_model_1.DashboardTabsViewModel(params.layoutItem, params.headerHeight, componentInfo.element);
        }
    },
    template: { element: 'dx-dashboard-layout-tabs' }
});


/***/ }),

/***/ 37047:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExportInfoManager = exports.ExportDialogBinder = exports.ExportDialogBinderOptions = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const model_1 = __webpack_require__(14198);
const disposable_object_1 = __webpack_require__(99253);
const _date_utils_1 = __webpack_require__(76900);
const dashboard_item_1 = __webpack_require__(5815);
const data_dashboard_item_1 = __webpack_require__(70355);
const group_item_1 = __webpack_require__(86961);
const dashboard_tab_page_1 = __webpack_require__(12319);
const tab_container_item_1 = __webpack_require__(99290);
const _dashboard_title_view_constants_1 = __webpack_require__(68899);
const _export_dialog_1 = __webpack_require__(57983);
const _export_options_1 = __webpack_require__(167);
class ExportDialogBinderOptions {
}
exports.ExportDialogBinderOptions = ExportDialogBinderOptions;
class ExportDialogBinder {
    constructor(_options) {
        this._options = _options;
        this.availableExportFormats = ['PDF', 'Image', 'Excel'];
        this.showDashboardDialog = (format) => {
            this._validateDashboardExport(format);
            this.exportDialog.setExportFunction((documentInfo) => this.exportDashboardTo(format, documentInfo));
            var title = this._options.dashboard().title.visible() ? this._options.dashboard().title.text() : 'Dashboard';
            this.exportDialog.showDialog('', null, format, {
                defaultFileName: title,
                defaultTitle: title
            });
        };
        this.showItemDialog = (itemComponentName, format) => {
            var item = this._options.dashboard().findItem(itemComponentName);
            if (!item) {
                throw new Error("The item with the '" + itemComponentName + "' name does not exist");
            }
            this._validateExportFormat(format);
            var exportCaption = item._caption;
            this.exportDialog.setExportFunction((documentInfo) => this.exportDashboardItemTo(itemComponentName, format, documentInfo));
            this.exportDialog.showDialog(itemComponentName, this._getExportItemType(item), format, {
                defaultTitle: exportCaption,
                defaultFileName: exportCaption,
            });
        };
        this.hide = () => {
            if (!!this._exportDialog) {
                this._exportDialog.hideDialog();
            }
        };
        this.exportOptions = new _export_options_1.ExportOptions();
        this.exportOptions.setPdfOptions(this._options.pdfExportOptions);
        this.exportOptions.setImageOptions(this._options.imageExportOptions);
        this.exportOptions.setExcelOptions(this._options.excelExportOptions);
    }
    reset() {
        this._exportDialog = undefined;
    }
    _getClientSize(container, mode) {
        if (container) {
            return { width: _jquery_helpers_1.getOuterWidth(container), height: _jquery_helpers_1.getOuterHeight(container) };
        }
        else {
            if (mode === 'EntireDashboard') {
                return { width: 1920, height: 1080 };
            }
            else {
                return { width: window.outerWidth, height: window.outerHeight };
            }
        }
    }
    _getActualComponentName(item) {
        return item instanceof tab_container_item_1.TabContainerItem ? item._activeTabPage().componentName() : item.componentName();
    }
    _getExportHolderItem(item) {
        if (item instanceof tab_container_item_1.TabContainerItem) {
            return this._options.dashboard()._getDisplayDashboardItem(item._activeTabPage());
        }
        return item;
    }
    _getInfo(items, titleHeight, mode, format) {
        var container = this._options.getContainer().querySelector('.dx-dashboard-viewer'), containerPosition = container ? _jquery_helpers_1.jqueryOffset(container) : { left: 0, top: 0 }, clientSize = this._getClientSize(container, mode);
        let elementsList = items
            .map(item => {
            let holderItem = this._getExportHolderItem(item);
            let isTabContainer = item instanceof tab_container_item_1.TabContainerItem;
            var itemExportInfo = this._options.exportInfoProvider.getItemExportInfo(holderItem.componentName(), mode, isTabContainer);
            if (itemExportInfo) {
                itemExportInfo.position = {
                    left: itemExportInfo.position.left - containerPosition.left,
                    top: itemExportInfo.position.top - containerPosition.top
                };
                if (isTabContainer) {
                    itemExportInfo.name = this._getActualComponentName(item);
                    itemExportInfo.caption = holderItem.name();
                }
                return itemExportInfo;
            }
            else if (format === 'Excel') {
                return { name: this._getActualComponentName(item) };
            }
            else {
                return null;
            }
        })
            .filter(itemExportInfo => !!itemExportInfo);
        return {
            clientSize: clientSize,
            titleHeight: titleHeight,
            itemsState: elementsList
        };
    }
    _getFilterFormattableValues(dashboard, exportGroupName, item, exportInfo) {
        let excelOptions = exportInfo.DocumentOptions.excelExportOptions;
        let isGroupExport = !!exportGroupName;
        if (exportInfo.Mode === 'EntireDashboard') {
            if (!isGroupExport) {
                if (exportInfo.Format === 'Excel' && excelOptions && excelOptions.DashboardStatePosition === 'Below') {
                    return item._getDisplayFilterValuesExternal();
                }
                else {
                    if (item instanceof data_dashboard_item_1.DataDashboardItem && dashboard._masterFilterItems().indexOf(item) !== -1) {
                        return item._getDisplayFilterValues();
                    }
                    else {
                        return [];
                    }
                }
            }
            else {
                if (exportGroupName === item.componentName()) {
                    return this._getGroupExternalDisplayFilterValues(dashboard._dataDashboardItems(), exportGroupName);
                }
                else {
                    return item._getDisplayFilterValues();
                }
            }
        }
        else {
            return item._getDisplayFilterValuesExternal();
        }
    }
    exportDashboardTo(format, clientOptions, customFileName) {
        this._validateDashboardExport(format);
        var fileName = customFileName ? customFileName : (clientOptions == undefined || clientOptions.fileName == undefined) ? 'Export' : clientOptions.fileName, dashboard = this._options.dashboard(), items = dashboard
            .layout()
            .getNodesRecursive()
            .filter(node => !!node.item)
            .filter(node => !(node.item instanceof dashboard_tab_page_1.DashboardTabPage))
            .map(node => node.item);
        let exportOptions = this.exportOptions.convertToExportOptions(clientOptions);
        if (!exportOptions.pdfExportOptions.Title)
            exportOptions.pdfExportOptions.Title = this._options.dashboard().title.text();
        if (!exportOptions.imageExportOptions.Title)
            exportOptions.imageExportOptions.Title = this._options.dashboard().title.text();
        if (format === 'Excel' && exportOptions.excelExportOptions.Format === 'Csv')
            throw new Error('Cannot export an entire dashboard in the CSV format.');
        this._exportTo(items, {
            mode: 'EntireDashboard',
            format: format,
            clientState: this._getInfo(items, this._options.dashboard().title.visible() ? _dashboard_title_view_constants_1.titleHeight : 0, 'EntireDashboard', format),
            fileName: fileName
        }, exportOptions);
    }
    exportDashboardItemTo(itemComponentName, format, clientOptions, customFileName) {
        var fileName = customFileName ? customFileName : (clientOptions == undefined || clientOptions.fileName == undefined) ? 'Export' : clientOptions.fileName, dashboard = this._options.dashboard(), exportItem = dashboard.findItem(itemComponentName), isGroup = exportItem instanceof group_item_1.GroupItem || exportItem instanceof dashboard_tab_page_1.DashboardTabPage;
        let clientStateItems, dataQueryItems;
        if (isGroup) {
            var dashboardItems = dashboard.items().concat(dashboard.groups());
            var needExportItem = (item) => { return item.parentContainer() === exportItem.componentName(); };
            clientStateItems = dashboardItems.filter(item => needExportItem(item) || !!item.parentContainer() && needExportItem(dashboard.findItem(item.parentContainer())));
            dataQueryItems = [exportItem].concat(clientStateItems);
        }
        else {
            clientStateItems = dataQueryItems = [exportItem];
        }
        this._validateExportFormat(format);
        let exportOptions = this.exportOptions.convertToExportOptions(clientOptions);
        if (!exportOptions.pdfExportOptions.Title)
            exportOptions.pdfExportOptions.Title = exportItem.name();
        if (!exportOptions.imageExportOptions.Title)
            exportOptions.imageExportOptions.Title = exportItem.name();
        this._exportTo(dataQueryItems, {
            mode: isGroup ? 'EntireDashboard' : 'SingleItem',
            format: format,
            clientState: this._getInfo(clientStateItems, 0, 'SingleItem', format),
            fileName: fileName,
            name: itemComponentName,
            itemType: this._getExportItemType(exportItem)
        }, exportOptions);
    }
    get exportDialog() {
        if (!this._exportDialog) {
            this._exportDialog = new _export_dialog_1.exportDialog({
                container: this._options.getContainer(),
                defaultDocumentInfo: this.exportOptions,
                onShown: this._options.onExportDialogShown,
                onShowing: this._options.onExportDialogShowing,
                onHidden: this._options.onExportDialogHidden
            });
        }
        return this._exportDialog;
    }
    _getExportItemType(item) {
        return item ? dashboard_item_1.DashboardItem._getCommonItemType(item.itemType()) : undefined;
    }
    _getGroupExternalDisplayFilterValues(dataDashboardItems, groupName) {
        var itemsInGroup = dataDashboardItems.filter(item => item.parentContainer() === groupName);
        var externalMasters = itemsInGroup
            .reduce((acc, item) => acc.concat(item._masterFilterItems()), [])
            .filter((master, index, array) => array.indexOf(master) !== index)
            .filter(master => itemsInGroup.indexOf(master) === -1);
        return externalMasters.reduce((acc, master) => acc.concat(master._getDisplayFilterValues()), []);
    }
    _exportTo(items, modeInfo, documentOptions) {
        let fileName = modeInfo.fileName && modeInfo.fileName.trim() ? modeInfo.fileName.replace(/[\\/:*?"<>|]/g, '_') : 'Export';
        let exportInfo = {
            Mode: modeInfo.mode,
            GroupName: modeInfo.name,
            FileName: fileName,
            ClientState: modeInfo.clientState,
            Format: modeInfo.format,
            DocumentOptions: documentOptions,
            ItemType: modeInfo.itemType
        };
        let dashboard = this._options.dashboard();
        var model = items.map(item => {
            let holderItem = this._getExportHolderItem(item);
            return {
                name: this._getActualComponentName(item),
                query: this._getExportDataQueryParams(holderItem, modeInfo),
                drillDownFormattableValues: holderItem instanceof data_dashboard_item_1.DataDashboardItem ? _date_utils_1.toStringArray(holderItem._getDisplayDrillDownValues()) : undefined,
                filterFormattableValues: _date_utils_1.toStringArray(this._getFilterFormattableValues(dashboard, exportInfo.GroupName, holderItem, exportInfo)),
                selectedValues: _date_utils_1.toStringArray(holderItem._getExportingSelection())
            };
        });
        this._options.serviceClient().performExport(exportInfo, model);
    }
    _getExportDataQueryParams(dashboardItem, modeInfo) {
        let queryParams = dashboardItem._getDataQueryParams();
        if (dashboardItem instanceof model_1.GridItem && dashboardItem.columnFilterOptions.updateTotals()) {
            let itemsState = modeInfo.clientState.itemsState.find(s => s.name === dashboardItem.componentName());
            if (itemsState) {
                queryParams['ClientFilter'] = itemsState['combinedFilter'];
            }
        }
        return queryParams;
    }
    _validateExportFormat(format) {
        if (this.availableExportFormats.indexOf(format) === -1) {
            throw new Error("A format is specified incorrectly. Use one of the following: 'PDF', 'Image' or 'Excel'.");
        }
    }
    _validateDashboardExport(format) {
        this._validateExportFormat(format);
        if (!this._options.dashboard()) {
            throw new Error('Cannot perform exporting because the dashboard is not loaded.');
        }
    }
}
exports.ExportDialogBinder = ExportDialogBinder;
class ExportInfoManager extends disposable_object_1.DisposableObject {
    constructor() {
        super(...arguments);
        this._primaryExportInfoProviders = {};
        this._secondaryExportInfoProviders = {};
        this._captionExportInfoProviders = {};
    }
    getItemExportInfo(itemName, mode, isCaption) {
        if (mode === 'SingleItem' && this._secondaryExportInfoProviders[itemName]) {
            return this._secondaryExportInfoProviders[itemName]();
        }
        else if (isCaption && this._captionExportInfoProviders[itemName]) {
            return this._captionExportInfoProviders[itemName]();
        }
        else if (this._primaryExportInfoProviders[itemName]) {
            return this._primaryExportInfoProviders[itemName]();
        }
        else {
            return null;
        }
    }
    registerPrimaryExportItem(itemName, getExportInfoFunc) {
        this._primaryExportInfoProviders[itemName] = getExportInfoFunc;
    }
    unregisterPrimaryExportItem(itemName) {
        if (this._primaryExportInfoProviders[itemName]) {
            delete this._primaryExportInfoProviders[itemName];
        }
    }
    registerSecondaryExportItem(itemName, getExportInfoFunc) {
        this._secondaryExportInfoProviders[itemName] = getExportInfoFunc;
    }
    unregisterSecondaryExportItem(itemName) {
        if (this._secondaryExportInfoProviders[itemName]) {
            delete this._secondaryExportInfoProviders[itemName];
        }
    }
    registerCaptionExportItem(itemName, getExportInfoFunc) {
        this._captionExportInfoProviders[itemName] = getExportInfoFunc;
    }
    unregisterCaptionExportItem(itemName) {
        if (this._captionExportInfoProviders[itemName]) {
            delete this._captionExportInfoProviders[itemName];
        }
    }
    dispose() {
        super.dispose();
        this._primaryExportInfoProviders = {};
        this._secondaryExportInfoProviders = {};
        this._captionExportInfoProviders = {};
    }
}
exports.ExportInfoManager = ExportInfoManager;


/***/ }),

/***/ 45281:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParameterDialogViewModel = void 0;
const ko = __webpack_require__(71032);
const _parameters_1 = __webpack_require__(30916);
const disposable_object_1 = __webpack_require__(99253);
const parameter_1 = __webpack_require__(12052);
const _parameters_dialog_1 = __webpack_require__(83496);
class ParameterDialogViewModel extends disposable_object_1.DisposableObject {
    constructor(_parameters, getParameterValues) {
        super();
        this._parameters = _parameters;
        this._getDashboardParameterType = (type) => {
            var result = _parameters_dialog_1.parameterTypes.string;
            if (type) {
                if (type.indexOf('DateTime') > -1) {
                    result = _parameters_dialog_1.parameterTypes.dateTime;
                }
                else if ((type.indexOf('Decimal') + (type.indexOf('Double'))) > -2) {
                    result = _parameters_dialog_1.parameterTypes.float;
                }
                else if (type.indexOf('Boolean') > -1) {
                    result = _parameters_dialog_1.parameterTypes.bool;
                }
                else if (type.indexOf('.Int') > -1) {
                    result = _parameters_dialog_1.parameterTypes.int;
                }
            }
            return result;
        };
        this.setParameters = (newParameters) => {
            newParameters.forEach(newParameter => {
                var parameterModel = this._parameters.peek().filter(p => p.name.peek() === newParameter.getName())[0];
                if (parameterModel) {
                    parameterModel._value(newParameter.getValue());
                }
            });
        };
        this.parameterCollection = ko.computed(() => {
            var parameters = this._parameters();
            var parameterCollection = new _parameters_1.ParametersCollection(parameters.map(param => {
                var values = this._getParameterValues(param, getParameterValues);
                return {
                    Name: param.name(),
                    DefaultValue: this._getParameterDefaultValue(param, values),
                    Description: param.description(),
                    Values: values,
                    ContainsDisplayMember: param.containsDisplayMember(),
                    Visible: param.parameterVisible(),
                    AllowMultiselect: param.allowMultiselect(),
                    AllowNull: param.allowNull(),
                    Type: this._getDashboardParameterType(param.type())
                };
            }));
            parameters.forEach(param => {
                var actualValue = param._actualValue();
                if (actualValue === parameter_1.Parameter.SelectAllValue) {
                    actualValue = this._getParameterValues(param, getParameterValues).map(valueViewModel => valueViewModel.Value);
                }
                parameterCollection.setParameterValue(param.name(), actualValue);
            });
            parameterCollection.collectionChanged.add(() => {
                this.setParameters(parameterCollection.getParameterList());
            });
            return parameterCollection;
        });
        this.toDispose(this.parameterCollection);
    }
    _getParameterValues(parameter, getParameterValues) {
        var parameterValues = null;
        if (!!parameter.staticListLookUpSettings()) {
            parameterValues = parameter.staticListLookUpSettings().values().map(item => {
                return {
                    Value: item.value(),
                };
            });
        }
        else if (!!parameter.dynamicListLookUpSettings()) {
            parameterValues = getParameterValues(parameter.type(), parameter.dynamicListLookUpSettings())();
        }
        return parameterValues;
    }
    _getParameterDefaultValue(param, paramValues) {
        if (param.lookUpSourceType() !== 'None' && param.allowMultiselect()) {
            if (param.selectAllValues()) {
                return paramValues && paramValues.map(value => value.Value) || [];
            }
            else {
                return param._valuesOfDefaultValues() || [];
            }
        }
        else {
            return param.defaultValue();
        }
    }
}
exports.ParameterDialogViewModel = ParameterDialogViewModel;


/***/ }),

/***/ 29390:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardPanelExtension = void 0;
const devices_1 = __webpack_require__(52562);
const string_1 = __webpack_require__(36306);
const themes_1 = __webpack_require__(84201);
const $ = __webpack_require__(65311);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const caption_toolbar_options_1 = __webpack_require__(57731);
const _helpers_1 = __webpack_require__(49105);
class DashboardPanelExtension {
    constructor(dashboardControl, options = {}) {
        this.dashboardControl = dashboardControl;
        this.options = options;
        this.name = 'dashboard-panel';
        this._iconBack = 'dx-dashboard-back';
        this._flexParent = 'dx-dashboard-flex-parent';
        this._dashboardsButton = 'dx-dashboard-back-button';
        this._dashboardTruncated = 'dx-dashboard-truncated';
        this._ellipsisText = 'dx-dashboard-ellipsis';
        this._itemTemplate = ko.observable();
        this._isMobile = ko.observable(false);
        this._disposables = [];
        this.panelWidth = 250;
        this.visible = ko.observable(false);
        this.allowSwitchToDesigner = ko.observable();
        this.selectedItemKeys = ko.observableArray();
        this.availableDashboards = ko.observableArray();
        this._actualPanelWidth = ko.observable();
        this.showPanelAsync = (options) => {
            return this._showPanelAsync(options, _helpers_1.CancellationToken.None);
        };
        this._showPanelAsync = (options, cancellationToken) => {
            var def = _jquery_helpers_1.createJQueryDeferred();
            if (cancellationToken.canceled)
                def.reject();
            else {
                this.visible(true);
                this.updateDashboardsList();
                setTimeout(() => {
                    if (!cancellationToken.canceled) {
                        options.surfaceLeft = this.panelWidth;
                        def.resolve(options);
                    }
                    else {
                        def.reject();
                    }
                }, 500);
            }
            return def.promise();
        };
        this.hidePanelAsync = (options) => {
            return this._hidePanelAsync(options, _helpers_1.CancellationToken.None);
        };
        this._hidePanelAsync = (options, cancellationToken) => {
            var def = _jquery_helpers_1.createJQueryDeferred();
            if (cancellationToken.canceled)
                def.reject();
            else {
                this.visible(false);
                setTimeout(() => {
                    if (!cancellationToken.canceled) {
                        options.surfaceLeft = 0;
                        def.resolve(options);
                    }
                    else {
                        def.reject();
                    }
                }, 500);
            }
            return def.promise();
        };
        this.switchToViewer = () => {
            this.dashboardControl.switchToViewer();
        };
        this.switchToDesigner = () => {
            this.dashboardControl.switchToDesigner();
        };
        let cancelableDesignerToViewerAction = {
            orderNo: 60,
            action: this.showPanelAsync,
            cancelableAction: this._showPanelAsync
        };
        this.designerToViewerAction = cancelableDesignerToViewerAction;
        let cancelableViewerToDesignerAction = {
            orderNo: 20,
            action: this.hidePanelAsync,
            cancelableAction: this._hidePanelAsync
        };
        this.viewerToDesignerAction = cancelableViewerToDesignerAction;
    }
    get _templateName() {
        if (this._isMobile()) {
            return this.options.dashboardThumbnail ? 'dashboard-preview' : 'dashboard-card-view';
        }
        return 'dashboard-list-item';
    }
    start() {
        var mobileExtension = this.dashboardControl.findExtension('mobile-layout');
        this._isMobile(mobileExtension && mobileExtension.mobileLayoutEnabled());
        mobileExtension && mobileExtension.mobileLayoutEnabled.subscribe(() => {
            this.stop();
            this.start();
        });
        if (this._isMobile())
            this.allowSwitchToDesigner(false);
        else if (this.allowSwitchToDesigner() === undefined) {
            this.allowSwitchToDesigner(this.dashboardControl.allowSwitchToDesigner);
        }
        this.visible(this._isMobile() ? false : !this.dashboardControl.isDesignMode());
        this._itemTemplate(this._templateName);
        if (this._isMobile()) {
            this._actualPanelWidth($.fn.constructor(window).width());
            devices_1.default.on('orientationChanged', (e) => {
                this._actualPanelWidth($.fn.constructor(window).width());
            });
        }
        else {
            this._actualPanelWidth(this.panelWidth);
        }
        this._customTemplate = this._getCustomTemplate();
        this.dashboardControl.customTemplates.push(this._customTemplate);
        this._disposables.push(this.dashboardControl.dashboardContainer.subscribe(dashboardContainer => {
            if (dashboardContainer) {
                this._validateSelection(dashboardContainer, this.availableDashboards());
            }
        }));
        if (this._isMobile()) {
            var api = this.dashboardControl.findExtension('viewer-api');
            api.on('dashboardTitleToolbarUpdated', (args) => {
                args.options.navigationItems.push({
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.dashboardList,
                    type: 'button',
                    template: () => {
                        return $.fn.constructor('<div/>')
                            .addClass([this._flexParent, this._ellipsisText].join(' '))
                            .append($.fn.constructor('<svg><use xlink:href="#' + this._iconBack + '" /></svg>'))
                            .append($.fn.constructor('<div/>').text(_default_1.getLocalizationById('DashboardWebStringId.Dashboards')).addClass([this._dashboardsButton, this._dashboardTruncated].join(' ')));
                    },
                    click: () => {
                        this.showPanelAsync({ surfaceLeft: this._actualPanelWidth() });
                    }
                });
            });
        }
        if (!this.dashboardControl.isDesignMode()) {
            this.dashboardControl.surfaceLeft(this._isMobile() ? 0 : this.panelWidth);
        }
        this.updateDashboardsList();
    }
    stop() {
        this.dashboardControl.surfaceLeft(0);
        this._disposables.forEach(d => d.dispose());
        this._disposables = [];
        this.dashboardControl.customTemplates.remove(this._customTemplate);
    }
    updateDashboardsList() {
        var dashboardContainer = this.dashboardControl.dashboardContainer();
        let options = this.options;
        this.dashboardControl.requestDashboardList().done((availableDashboards) => {
            this.availableDashboards(availableDashboards.map(dashboard => new PanelExtensionDashboardInfo(dashboard.id, dashboard.name, options.dashboardThumbnail ? string_1.format(options.dashboardThumbnail, dashboard.id) : undefined)));
            this._validateSelection(this.dashboardControl.dashboardContainer(), this.availableDashboards());
        });
    }
    _validateSelection(dashboardContainer, avaliableDashboards) {
        if (dashboardContainer) {
            var dashboardInfo = avaliableDashboards.filter(info => info.id === dashboardContainer.id)[0];
            if (dashboardInfo) {
                this.selectedItemKeys([dashboardInfo.id]);
            }
        }
    }
    _hidePanel() {
        if (this._isMobile()) {
            this.hidePanelAsync({ surfaceLeft: 0 });
        }
    }
    _getCustomTemplate() {
        var enableAnimation = ko.observable(!this.visible());
        let listOptions = {
            noDataText: '',
            encodeNoDataText: true,
            keyExpr: 'id',
            selectionMode: 'single',
            itemTemplate: this._itemTemplate,
            activeStateEnabled: themes_1.default.isMaterial(themes_1.default.current()),
            selectedItemKeys: this.selectedItemKeys,
            onItemClick: () => { this._hidePanel(); },
            searchEnabled: ko.computed(() => this._isMobile()),
            searchExpr: ['id', 'name'],
            hoverStateEnabled: ko.computed(() => !this._isMobile()),
            focusStateEnabled: false,
            searchEditorOptions: {
                placeholder: _default_1.getLocalizationById('DashboardWebStringId.Search')
            },
            onOptionChanged: (e) => {
                if (e.name === 'selectedItemKeys' && this.selectedItemKeys().length > 0) {
                    let selectedItem = this.availableDashboards().filter(item => item.id === this.selectedItemKeys()[0])[0];
                    e.component.scrollToItem(this.availableDashboards().indexOf(selectedItem));
                }
            },
            onSelectionChanged: (e) => {
                if (e.addedItems.length) {
                    var newDashboardId = e.addedItems[0].id;
                    if (!this.dashboardControl.dashboardContainer() || this.dashboardControl.dashboardContainer().id !== newDashboardId) {
                        this.dashboardControl.loadDashboard(newDashboardId);
                    }
                }
            },
        };
        if (this._isMobile()) {
            listOptions.dataSource = (this.availableDashboards);
        }
        else {
            listOptions.items = this.availableDashboards;
        }
        var resizeTimer;
        var prevContainerHeight;
        var getContainerHeight = (component) => _jquery_helpers_1.$unwrap(component.option('container')).clientHeight;
        return {
            name: 'dx-dashboard-working-mode-extension',
            data: {
                panelWidth: this._actualPanelWidth,
                allowSwitchToDesigner: this.allowSwitchToDesigner,
                visible: this.visible,
                isMobile: this._isMobile,
                hidePanel: () => { this._hidePanel(); },
                switchToDesigner: this.switchToDesigner,
                switchToViewer: this.switchToViewer,
                listOptions: listOptions,
                enableAnimation: enableAnimation,
                onPopupInitialized: (e) => {
                    prevContainerHeight = getContainerHeight(e.component);
                    resizeTimer = setInterval(() => {
                        if (e.component.option('visible')) {
                            var currentContainerHeight = getContainerHeight(e.component);
                            if (currentContainerHeight !== prevContainerHeight) {
                                prevContainerHeight = currentContainerHeight;
                                e.component.repaint();
                            }
                        }
                    }, 300);
                },
                onPopupDisposing: (e) => {
                    clearTimeout(resizeTimer);
                }
            }
        };
    }
}
exports.DashboardPanelExtension = DashboardPanelExtension;
class PanelExtensionDashboardInfo {
    constructor(id, name, imageUrl) {
        this.id = id;
        this.name = name;
        this.imageUrl = imageUrl;
        this.hidden = ko.observable(false);
    }
    hide() {
        this.hidden(true);
    }
}


/***/ }),

/***/ 4218:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dataInspectorItemDataMeasureComparer = exports.dataInspectorItemDataDimensionComparer = exports.generateAggregatedSource = void 0;
const _item_data_tuple_1 = __webpack_require__(60367);
const _default_1 = __webpack_require__(65855);
const _utils_1 = __webpack_require__(7590);
const _date_filter_element_1 = __webpack_require__(68528);
const _inspected_data_colum_generator_1 = __webpack_require__(83085);
function _createDimensionColumnInfo(dimension, axisName) {
    return {
        getValue: (row) => {
            let point = row.getAxisPoint(axisName);
            if (point) {
                var dimensionValue = point.getDimensionValue(dimension.id);
                if (dimensionValue) {
                    return {
                        displayValue: dimensionValue.getDisplayText(),
                        value: dimensionValue.getUniqueValue()
                    };
                }
            }
            return null;
        },
        getGridColumn: () => {
            return {
                dataField: dimension.id,
                caption: dimension.name || dimension.dataMember || dimension.id,
                calculateCellValue: (row) => row[dimension.id] && row[dimension.id].value
            };
        }
    };
}
function _createMeasureColumnInfo(itemData, measure, isSparklineMeasure) {
    const sparklineColumnId = '_Sparkline';
    var getSparklineCellText = (defaultAxisPoint) => {
        let argumentValueSeparator = _default_1.getLocalizationById('DashboardStringId.SparklineArgumentValueSeparator');
        let valuesSeparator = _default_1.getLocalizationById('DashboardStringId.SparklineValuesSeparator');
        return itemData
            .getAxis('Sparkline')
            .getPoints()
            .map(sparklinePoint => {
            let measureValue = itemData.getSlice(sparklinePoint).getSlice(defaultAxisPoint).getMeasureValue(measure.id);
            if (measureValue) {
                return sparklinePoint.getDisplayText() + argumentValueSeparator + measureValue.getDisplayText();
            }
            return '';
        })
            .join(valuesSeparator);
    };
    return {
        getValue: (row) => {
            if (isSparklineMeasure && itemData.getAxisNames().indexOf('Sparkline') !== -1) {
                let cellText = getSparklineCellText(row.getAxisPoint());
                return { displayValue: cellText, value: cellText };
            }
            return {
                displayValue: itemData.getSlice(row).getMeasureValue(measure.id).getDisplayText(),
                value: itemData.getSlice(row).getMeasureValue(measure.id).getValue()
            };
        },
        getGridColumn: () => {
            let dataField = !isSparklineMeasure ? measure.id : measure.id + sparklineColumnId;
            let caption = measure.name || measure.dataMember || measure.id;
            switch (measure.id) {
                case _date_filter_element_1.dateFilterElement.MinMeasureId:
                    caption += ' ' + _default_1.getLocalizationById('DashboardStringId.StartDate');
                    break;
                case _date_filter_element_1.dateFilterElement.MaxMeasureId:
                    caption += ' ' + _default_1.getLocalizationById('DashboardStringId.EndDate');
                    break;
            }
            return {
                dataField: dataField,
                caption: caption,
                calculateCellValue: (row) => row[dataField] && row[dataField].value
            };
        }
    };
}
function _createColumns(itemData, axes, args) {
    return axes
        .reduce((acc, axis) => {
        let distinctDimensions = _utils_1.distinct(itemData.getDimensions(axis), (dim1, dim2) => dataInspectorItemDataDimensionComparer(dim1, dim2, itemData));
        return acc.concat(distinctDimensions.map(dimension => _createDimensionColumnInfo(dimension, axis)));
    }, [])
        .concat(_utils_1.distinct(_inspected_data_colum_generator_1.getMeasureColumns(itemData), (m1, m2) => dataInspectorItemDataMeasureComparer(m1, m2, itemData, args.addSparklineTotal, args.sparklineMeasures))
        .reduce((acc, measure) => {
        let isSparklineMeasure = args.sparklineMeasures != null && args.sparklineMeasures.indexOf(measure.id) !== -1;
        acc.push(_createMeasureColumnInfo(itemData, measure, isSparklineMeasure));
        if (isSparklineMeasure && args.addSparklineTotal) {
            acc.push(_createMeasureColumnInfo(itemData, measure, false));
        }
        return acc;
    }, []));
}
function _createRows(itemData, axes) {
    if (axes.length) {
        return itemData
            .getAxis(axes[0])
            .getAvaliableLeafPoints()
            .reduce((acc, primaryAxisPoint) => {
            if (axes.length > 1) {
                acc = acc.concat(itemData
                    .getAxis(axes[1])
                    .getAvaliableLeafPoints()
                    .map(secondaryAxisPoint => new _item_data_tuple_1.itemDataTuple([primaryAxisPoint, secondaryAxisPoint])));
            }
            else {
                acc.push(new _item_data_tuple_1.itemDataTuple([primaryAxisPoint]));
            }
            return acc;
        }, []);
    }
    else {
        var defaultAxis = itemData.getAxisNames()[0];
        let axisPoints = defaultAxis ? [itemData.getAxis(defaultAxis).getRootPoint()] : [];
        return [new _item_data_tuple_1.itemDataTuple(axisPoints)];
    }
}
function generateAggregatedSource(itemData, args) {
    if (itemData && !itemData.isEmpty()) {
        let axes = _inspected_data_colum_generator_1.getSortedAxes(itemData, true);
        let columnsInfo = _createColumns(itemData, axes, args);
        let rows = _createRows(itemData, axes);
        const columnTypes = _inspected_data_colum_generator_1.getSortedAxes(itemData)
            .reduce((acc, axis) => acc.concat(itemData.getDimensions(axis).map(d => {
            return { id: d.id, dataType: d.dataType };
        })), []);
        return {
            columns: columnsInfo.map(columnInfo => columnInfo.getGridColumn()),
            customizeColumns: () => { },
            data: rows.map(row => {
                return columnsInfo.reduce((acc, columnInfo) => {
                    const currentTypeInfo = columnTypes.find(obj => {
                        return obj.id === columnInfo.getGridColumn().dataField;
                    });
                    acc[columnInfo.getGridColumn().dataField] = columnInfo.getValue(row);
                    if (currentTypeInfo && currentTypeInfo['dataType'] === 'Object')
                        acc[columnInfo.getGridColumn().dataField].displayValueAsImage = true;
                    return acc;
                }, {});
            })
        };
    }
    return {
        columns: [],
        customizeColumns: () => { },
        data: []
    };
}
exports.generateAggregatedSource = generateAggregatedSource;
function dataInspectorItemDataDimensionComparer(x, y, data) {
    return x.name === y.name
        && x.dataMember === y.dataMember
        && x.dateTimeGroupInterval === y.dateTimeGroupInterval
        && x.textGroupInterval === y.textGroupInterval
        && _utils_1.deepStrictEquals(data.getDimensionFormat(x.id), data.getDimensionFormat(y.id));
}
exports.dataInspectorItemDataDimensionComparer = dataInspectorItemDataDimensionComparer;
function dataInspectorItemDataMeasureComparer(x, y, data, addSparklineTotal, sparklineMeasures) {
    return x.name === y.name
        && x.dataMember == y.dataMember
        && (addSparklineTotal ||
            !sparklineMeasures || ((sparklineMeasures.indexOf(x.id) !== -1) === (sparklineMeasures.indexOf(y.id) !== -1)))
        && ((_utils_1.type.isDefined(data.getMeasureExpression(x.id)) || _utils_1.type.isDefined(data.getMeasureExpression(y.id))) ?
            (data.getMeasureExpression(x.id) === data.getMeasureExpression(y.id)) : (x.summaryType === y.summaryType))
        && _utils_1.deepStrictEquals(data.getMeasureCalculation(x.id), data.getMeasureCalculation(y.id))
        && _utils_1.deepStrictEquals(data.getMeasureWindowDefinition(x.id), data.getMeasureWindowDefinition(y.id))
        && _utils_1.deepStrictEquals(data.getMeasureFormat(x.id), data.getMeasureFormat(y.id));
}
exports.dataInspectorItemDataMeasureComparer = dataInspectorItemDataMeasureComparer;


/***/ }),

/***/ 45665:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataInspectorViewModel = exports.DataInspectorViewModelOptions = void 0;
const string_1 = __webpack_require__(36306);
const themes_1 = __webpack_require__(84201);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const model_1 = __webpack_require__(14198);
const _dashboard_layout_mode_helper_1 = __webpack_require__(26018);
const _aggregated_data_source_1 = __webpack_require__(4218);
const _underlying_data_source_1 = __webpack_require__(9211);
class DataInspectorViewModelOptions {
}
exports.DataInspectorViewModelOptions = DataInspectorViewModelOptions;
class DataInspectorViewModel {
    constructor(options) {
        this.options = options;
        this._dashboardItem = ko.observable();
        this.avaliableInspectedDataType = [{
                value: 'Aggregated',
                text: _default_1.getLocalizationById('DashboardStringId.AggregatedDataType')
            }, {
                value: 'Raw',
                text: _default_1.getLocalizationById('DashboardStringId.RawDataType')
            }];
        this.allowSwitchInspectedDataType = ko.observable(false);
        this.inspectedDataType = ko.observable();
        this.title = ko.computed(() => {
            return (this._dashboardItem() && this._dashboardItem().name() || '') + (!this.allowSwitchInspectedDataType() ?
                ' ' + string_1.format(_default_1.getLocalizationById('DashboardStringId.InspectedTypeFormatString'), this.inspectedDataType()) :
                '');
        });
        this.visible = ko.observable(false);
        this.container = ko.observable(null);
        this.gridDataSource = ko.observable(null);
        this.gridOptions = ko.computed(() => {
            let gridDataSource = this.gridDataSource();
            if (!gridDataSource) {
                return null;
            }
            let dataSource = gridDataSource.data || null;
            let columns = gridDataSource.columns || null;
            let options = {
                customizeColumns: gridDataSource.customizeColumns,
                onContentReady: this.options.onGridContentReady,
                onInitialized: this.options.onGridInitialized,
                showBorders: true,
                scrolling: {
                    mode: 'virtual'
                },
                loadPanel: {
                    text: _default_1.getLocalizationById('DashboardWebStringId.Loading')
                },
                filterRow: {
                    visible: true,
                    applyFilterText: _default_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.ApplyFilter'),
                    betweenEndText: _default_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.BetweenEnd'),
                    betweenStartText: _default_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.BetweenStart'),
                    resetOperationText: _default_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.ResetOperation'),
                    operationDescriptions: {
                        between: _default_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.Between'),
                        contains: _default_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.Contains'),
                        endsWith: _default_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.EndsWith'),
                        equal: _default_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.Equals'),
                        greaterThan: _default_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.Greater'),
                        greaterThanOrEqual: _default_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.GreaterOrEqual'),
                        lessThan: _default_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.Less'),
                        lessThanOrEqual: _default_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.LessOrEqual'),
                        notContains: _default_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.DoesNotContain'),
                        notEqual: _default_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.DoesNotEqual'),
                        startsWith: _default_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.StartsWith'),
                    }
                },
                onCellPrepared: (e) => {
                    if (e.rowType === 'data') {
                        var cellData = e.data[e.column.dataField];
                        if (cellData) {
                            if (cellData.displayValueAsImage) {
                                e.cellElement.innerText = '';
                                _utils_1.renderImage(e.cellElement, { value: cellData.value });
                            }
                            else if (cellData.displayValue) {
                                _jquery_helpers_1.$unwrap(e.cellElement).innerText = cellData.displayValue;
                            }
                        }
                    }
                },
                columnHidingEnabled: this.isMobile,
                rowAlternationEnabled: true,
                noDataText: _default_1.getLocalizationById('DashboardStringId.MessageGridHasNoData'),
                dataSource: dataSource,
                columns: columns,
            };
            if (themes_1.default.isMaterial(themes_1.default.current()))
                options.showColumnLines = true;
            return options;
        });
        this.closeButtonStylingMode = themes_1.default.isMaterial(themes_1.default.current()) ? 'contained' : undefined;
        this.closeButtonType = themes_1.default.isMaterial(themes_1.default.current()) ? 'normal' : undefined;
        this.visible.subscribe(visible => {
            if (!visible) {
                this._clearDataSource();
            }
        });
        this._dashboardItem.subscribe(_ => { this._clearDataSource(); });
        this.inspectedDataType.subscribe(() => {
            if (this.visible()) {
                this._bindGrid();
            }
        });
    }
    setUnderlyingDataProvider(underlyingDataProvider) {
        this.underlyingDataProvider = underlyingDataProvider;
    }
    _bindGrid() {
        var dashboardItem = this._dashboardItem();
        var inspectedDataType = this.inspectedDataType();
        var dataSource = inspectedDataType === 'Raw' ? this._getRawDataSource(dashboardItem) : this._getAggregatedDataSource(dashboardItem);
        if (dataSource !== this.gridDataSource()) {
            this.gridDataSource(dataSource);
        }
    }
    _clearDataSource() {
        this._rawDataSource = null;
        this._aggregatedDataSource = null;
    }
    _getInitialMode(allowInspectAggregatedData, allowInspectRawData, initialMode, prevMode) {
        if (initialMode) {
            return initialMode;
        }
        else if (prevMode && allowInspectAggregatedData && allowInspectRawData) {
            return prevMode;
        }
        else if (allowInspectAggregatedData) {
            return 'Aggregated';
        }
        else if (allowInspectRawData) {
            return 'Raw';
        }
        else
            return 'Aggregated';
    }
    _getRawDataSource(dashbordItem) {
        if (!this._rawDataSource) {
            this._rawDataSource = _underlying_data_source_1.generateUnderlyingDataSource(this.underlyingDataProvider, dashbordItem);
        }
        return this._rawDataSource;
    }
    _getAggregatedDataSource(dashbordItem) {
        if (!this._aggregatedDataSource) {
            this._aggregatedDataSource = _aggregated_data_source_1.generateAggregatedSource(dashbordItem._getItemData(), this._getAggregatedDataSourceArgs(dashbordItem));
        }
        return this._aggregatedDataSource;
    }
    _getAggregatedDataSourceArgs(dashboardItem) {
        if (dashboardItem instanceof model_1.CardItem) {
            if (dashboardItem.sparklineArgument()) {
                return {
                    addSparklineTotal: true,
                    sparklineMeasures: dashboardItem
                        .cards()
                        .map(card => card.actualValue().uniqueName())
                };
            }
        }
        else if (dashboardItem instanceof model_1.GridItem) {
            return {
                addSparklineTotal: false,
                sparklineMeasures: dashboardItem
                    .columns()
                    .filter(column => column instanceof model_1.GridSparklineColumn)
                    .map(column => column.measure().uniqueName())
            };
        }
        return {
            addSparklineTotal: false, sparklineMeasures: []
        };
    }
    _getPopupOptions() {
        const popupOptions = {
            container: this.container,
            title: this.title,
            onShowing: this.options.onDialogShowing,
            onShown: this.options.onDialogShown,
            onHidden: this.options.onDialogHidden,
            visible: this.visible,
            fullScreen: this.isMobile,
            height: '80%',
            position: {
                my: 'center',
                at: 'center',
                of: this.isMobile ? window : this.container
            },
            toolbarItems: [{
                    toolbar: 'bottom',
                    location: 'after',
                    widget: 'dxButton',
                    options: {
                        text: _default_1.getLocalizationById('DashboardStringId.DataInspectorButtonClose'),
                        onClick: () => this.visible(false),
                        stylingMode: this.closeButtonStylingMode,
                        type: this.closeButtonType,
                    }
                }],
            wrapperAttr: {
                class: 'dx-dashboard-data-inspector-dialog'
            },
            showCloseButton: true
        };
        if (!this.isMobile) {
            popupOptions.position['boundary'] = this.container;
        }
        return popupOptions;
    }
    get isMobile() {
        return _dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isMobile;
    }
    show(dashboardItem, allowInspectAggregatedData, allowInspectRawData, initialMode) {
        this.allowSwitchInspectedDataType(allowInspectAggregatedData && allowInspectRawData);
        this.inspectedDataType(this._getInitialMode(allowInspectAggregatedData, allowInspectRawData, initialMode, this.inspectedDataType()));
        this._dashboardItem(dashboardItem);
        this.container(this.options.getContainer());
        this.visible(true);
        this._bindGrid();
    }
}
exports.DataInspectorViewModel = DataInspectorViewModel;


/***/ }),

/***/ 83085:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getSortedColumns = exports.getMeasureColumns = exports.getSortedAxes = void 0;
function getSortedAxes(itemData, skipSparklineAxis = false) {
    return itemData.getAxisNames()
        .filter(axisName => {
        let axis = itemData.getAxis(axisName);
        return axis.getRootPoint().getChildren().length > 0 && axis.getDimensions().length > 0 && (!skipSparklineAxis || axisName !== 'Sparkline');
    })
        .sort((axisName1, axisName2) => {
        return axisName1 == 'Argument' || axisName1 == 'Row' || axisName1 == 'Default' ? -1 : 1;
    });
}
exports.getSortedAxes = getSortedAxes;
function getMeasureColumns(itemData) {
    return itemData.getMeasures().filter(measure => !!measure.dataMember);
}
exports.getMeasureColumns = getMeasureColumns;
function getSortedColumns(itemData) {
    return getSortedAxes(itemData)
        .reduce((acc, axis) => acc.concat(itemData.getDimensions(axis).map(d => d.dataMember)), [])
        .concat(getMeasureColumns(itemData).map(d => d.dataMember));
}
exports.getSortedColumns = getSortedColumns;


/***/ }),

/***/ 9211:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateUnderlyingDataSource = void 0;
const custom_store_1 = __webpack_require__(5773);
const _jquery_helpers_1 = __webpack_require__(59384);
const notificator_1 = __webpack_require__(16812);
const _inspected_data_colum_generator_1 = __webpack_require__(83085);
function generateUnderlyingDataSource(underlyingDataProvider, dashbordItem) {
    const DataFieldPrefix = 'DataField';
    const itemData = dashbordItem._getItemData();
    if (underlyingDataProvider && itemData && !itemData.isEmpty()) {
        let columnsState = {};
        return {
            columns: null,
            customizeColumns: (columns) => {
                columns.forEach(column => {
                    let columnState = columnsState[column.dataField];
                    if (columnState) {
                        column.name = columnState.dataMember;
                        column.caption = columnState.displayName;
                    }
                });
            },
            data: new custom_store_1.default({
                loadMode: 'raw',
                load: () => {
                    return _jquery_helpers_1.$promiseAdapter(underlyingDataProvider.requestUnderlyingData(dashbordItem, {
                        dataMembers: _inspected_data_colum_generator_1.getSortedColumns(itemData)
                    }).then(({ DataMembers, DataMembersDisplayNames, Data, ErrorMessage }) => {
                        if (ErrorMessage) {
                            new Error(ErrorMessage);
                        }
                        DataMembers.forEach((member, index) => {
                            columnsState[DataFieldPrefix + index.toString()] = {
                                dataMember: member,
                                displayName: DataMembersDisplayNames[index] || member,
                            };
                        });
                        const columnTypes = _inspected_data_colum_generator_1.getSortedAxes(itemData)
                            .reduce((acc, axis) => acc.concat(itemData.getDimensions(axis).map(d => {
                            return { dataMember: d.dataMember, dataType: d.dataType };
                        })), []);
                        return Data.map(row => {
                            return DataMembers.reduce((acc, _value, index) => {
                                const currentTypeInfo = columnTypes.find(obj => {
                                    return obj.dataMember === _value;
                                });
                                if (currentTypeInfo && currentTypeInfo['dataType'] === 'Object') {
                                    acc[DataFieldPrefix + index.toString()] = { displayValueAsImage: true, value: row[index] };
                                }
                                else {
                                    acc[DataFieldPrefix + index.toString()] = row[index];
                                }
                                return acc;
                            }, {});
                        });
                    }, result => {
                        throw new Error(notificator_1.NotificationController._getDetailedErrorMessage(result));
                    }));
                }
            })
        };
    }
    else {
        return {
            columns: [],
            customizeColumns: () => { },
            data: [],
        };
    }
}
exports.generateUnderlyingDataSource = generateUnderlyingDataSource;


/***/ }),

/***/ 32878:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataInspectorExtension = void 0;
const _default_1 = __webpack_require__(65855);
const model_1 = __webpack_require__(14198);
const disposable_object_1 = __webpack_require__(99253);
const caption_toolbar_options_1 = __webpack_require__(57731);
const _dashboard_layout_mode_helper_1 = __webpack_require__(26018);
const control_options_1 = __webpack_require__(82560);
const _underlying_data_provider_1 = __webpack_require__(15542);
const _options_manager_1 = __webpack_require__(47337);
const _utils_1 = __webpack_require__(56929);
const _data_inspector_view_model_1 = __webpack_require__(45665);
var name = 'data-inspector';
var nameAlias = 'dataInspector';
class DataInspectorExtension extends disposable_object_1.DisposableObject {
    constructor(dashboardControl, options = {}) {
        super();
        this._optionsManager = new _options_manager_1.OptionsManager();
        this._defaultOptions = {
            allowInspectAggregatedData: false,
            allowInspectRawData: false
        };
        this.name = name;
        this._addContextToolbarItem = (toolbarOptions, dashboardItem) => {
            if ((this._optionsManager.get('allowInspectAggregatedData') || this._optionsManager.get('allowInspectRawData')) && dashboardItem instanceof model_1.DataDashboardItem) {
                toolbarOptions.actionItems.push({
                    hint: _default_1.getLocalizationById('DashboardStringId.ActionShowDataInspector'),
                    icon: 'dx-dashboard-data-inspector',
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.dataInspector,
                    type: 'button',
                    click: () => {
                        this._viewModel.show(dashboardItem, this._optionsManager.get('allowInspectAggregatedData'), this._optionsManager.get('allowInspectRawData'));
                    }
                });
            }
        };
        this._optionsManager.initialize({
            alias: nameAlias,
            dashboardControl: dashboardControl,
            defaultOptions: this._defaultOptions,
            eventsHolder: this,
            initOptions: options,
            optionChanged: (args) => this._optionChanged(args)
        });
        this._dashboardControl = dashboardControl;
        this._viewModel = new _data_inspector_view_model_1.DataInspectorViewModel({
            getContainer: () => _dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isMobile ? window.document.body : dashboardControl.getWidgetContainer(),
            onGridContentReady: (e) => { this._optionsManager.raiseEvent('gridContentReady', e); },
            onGridInitialized: (e) => { this._optionsManager.raiseEvent('gridInitialized', e); },
            onDialogShowing: (e) => { this._optionsManager.raiseEvent('dialogShowing', e); },
            onDialogShown: (e) => { this._optionsManager.raiseEvent('dialogShown', e); },
            onDialogHidden: (e) => { this._optionsManager.raiseEvent('dialogHidden', e); },
        });
        this._customTemplate = {
            name: 'dx-dashboard-data-inspector-extension',
            data: this._viewModel
        };
    }
    _optionChanged(args) {
        switch (args.name) {
            case 'allowInspectAggregatedData':
            case 'allowInspectRawData':
                this.hideDataInspector();
                return 'updateItemToolbars';
            default:
                return null;
        }
    }
    start() {
        this._dashboardControl.customTemplates.push(this._customTemplate);
        if (this._dashboardControl._serviceClient()) {
            this._viewModel.setUnderlyingDataProvider(new _underlying_data_provider_1.UnderlyingDataProvider(this._dashboardControl._serviceClient()));
        }
        this.toDispose(this._dashboardControl._serviceClient.subscribe(serviceClient => {
            this._viewModel.setUnderlyingDataProvider(new _underlying_data_provider_1.UnderlyingDataProvider(serviceClient));
        }));
        this._dashboardControl._dashboardContext.addContextToolbarItems.add(this._addContextToolbarItem);
    }
    stop() {
        this._dashboardControl.customTemplates.remove(this._customTemplate);
        this._dashboardControl._dashboardContext.addContextToolbarItems.remove(this._addContextToolbarItem);
    }
    showDataInspector(dashboardItemName, inspectedType) {
        var dashboard = this._dashboardControl.dashboard();
        if (dashboard) {
            var dashboardItem = _utils_1.findItemForApi(dashboard, dashboardItemName, model_1.DataDashboardItem);
            this._viewModel.show(dashboardItem, this._optionsManager.get('allowInspectAggregatedData'), this._optionsManager.get('allowInspectRawData'), inspectedType);
        }
    }
    currentInspectedType() {
        return this._viewModel.visible() && this._viewModel.inspectedDataType() || null;
    }
    hideDataInspector() {
        this._viewModel.visible(false);
    }
}
exports.DataInspectorExtension = DataInspectorExtension;
control_options_1.defaultExtensions[name] = (dashboardControl, options) => new DataInspectorExtension(dashboardControl, options);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 89442:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardExportExtension = void 0;
const _obsolete_helper_1 = __webpack_require__(64060);
const _dashboard_layout_mode_helper_1 = __webpack_require__(26018);
const control_options_1 = __webpack_require__(82560);
const _options_manager_1 = __webpack_require__(47337);
const _export_dialog_binder_1 = __webpack_require__(37047);
var name = 'dashboard-export';
var nameAlias = 'dashboardExport';
class DashboardExportExtension {
    constructor(dashboardControl, options = {}) {
        this.dashboardControl = dashboardControl;
        this._exportInfoContoller = new _export_dialog_binder_1.ExportInfoManager();
        this.name = name;
        this._optionsManager = new _options_manager_1.OptionsManager();
        let defaultOptions = {
            allowExportDashboard: true,
            allowExportDashboardItems: true,
        };
        this._optionsManager.initialize({
            alias: nameAlias,
            dashboardControl: dashboardControl,
            defaultOptions: defaultOptions,
            eventsHolder: this,
            initOptions: options,
            optionChanged: (args) => this._optionChanged(args)
        });
        this._dialogBinder = new _export_dialog_binder_1.ExportDialogBinder({
            dashboard: dashboardControl.dashboard,
            serviceClient: dashboardControl._serviceClient,
            getContainer: () => _dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isMobile ? window.document.body : dashboardControl.getWidgetContainer(),
            exportInfoProvider: this._exportInfoContoller,
            excelExportOptions: options.excelExportOptions,
            imageExportOptions: options.imageExportOptions,
            pdfExportOptions: options.pdfExportOptions,
            onExportDialogHidden: (e) => this._optionsManager.raiseEvent('exportDialogHidden', e),
            onExportDialogShowing: (e) => this._optionsManager.raiseEvent('exportDialogShowing', e),
            onExportDialogShown: (e) => this._optionsManager.raiseEvent('exportDialogShown', e)
        });
        defineObsoleteMethods(this);
    }
    get allowExportDashboard() { return this._optionsManager.get('allowExportDashboard'); }
    set allowExportDashboard(value) { this._optionsManager.set('allowExportDashboard', value); }
    get allowExportDashboardItems() { return this._optionsManager.get('allowExportDashboardItems'); }
    set allowExportDashboardItems(value) { this._optionsManager.set('allowExportDashboardItems', value); }
    _initializeExportButton(localContext) {
        localContext.beforeApplyViewerItemOptions.add((item, options, isCreation) => {
            options.allowExport = this.allowExportDashboardItems;
            options.showExportDialog = (format) => this.showExportDashboardItemDialog(item.componentName(), format);
        });
    }
    _initializePrimaryExportItem(localContext) {
        this._initializeExportButton(localContext);
        localContext.viewerItemCreated.add((item, viewerItem) => {
            if (viewerItem.visualMode === 'caption') {
                this._exportInfoContoller.registerCaptionExportItem(item.componentName(), () => viewerItem.getInfo());
            }
            else {
                this._exportInfoContoller.registerPrimaryExportItem(item.componentName(), () => viewerItem.getInfo());
            }
        });
        localContext.viewerItemDispose.add((item, viewerItem) => {
            if (viewerItem.visualMode === 'caption') {
                this._exportInfoContoller.unregisterCaptionExportItem(item.componentName());
            }
            else {
                this._exportInfoContoller.unregisterPrimaryExportItem(item.componentName());
            }
        });
    }
    _initializeSecondaryExportItem(localContext) {
        this._initializeExportButton(localContext);
        localContext.viewerItemCreated.add((item, viewerItem) => {
            this._exportInfoContoller.registerSecondaryExportItem(item.componentName(), () => viewerItem.getInfo());
        });
        localContext.viewerItemDispose.add((item, viewerItem) => {
            this._exportInfoContoller.unregisterSecondaryExportItem(item.componentName());
        });
    }
    _optionChanged(args) {
        switch (args.name) {
            case 'allowExportDashboard':
                return 'updateDashboardToolbar';
            case 'allowExportDashboardItems':
                return 'reinitializeDashboard';
            case 'pdfExportOptions':
            case 'imageExportOptions':
            case 'excelExportOptions':
            default:
                return null;
        }
    }
    start() {
        this._dialogBinderSubscription = this.dashboardControl.dashboard.subscribe(() => this._dialogBinder.reset());
    }
    stop() {
        this._dialogBinderSubscription.dispose();
        this._exportInfoContoller.dispose();
    }
    showExportDashboardDialog(format) {
        this._dialogBinder.showDashboardDialog(format);
    }
    showExportDashboardItemDialog(itemComponentName, format) {
        this._dialogBinder.showItemDialog(itemComponentName, format);
    }
    hideExportDialog() {
        this._dialogBinder.hide();
    }
    getPdfExportOptions() {
        return this._dialogBinder.exportOptions.pdfExportOptions;
    }
    getImageExportOptions() {
        return this._dialogBinder.exportOptions.imageExportOptions;
    }
    getExcelExportOptions() {
        return this._dialogBinder.exportOptions.excelExportOptions;
    }
    setPdfExportOptions(options) {
        this._dialogBinder.exportOptions.setPdfOptions(options);
    }
    setImageExportOptions(options) {
        this._dialogBinder.exportOptions.setImageOptions(options);
    }
    setExcelExportOptions(options) {
        this._dialogBinder.exportOptions.setExcelOptions(options);
    }
    exportToPdf(options, fileName) {
        this._dialogBinder.exportDashboardTo('PDF', options, fileName);
    }
    exportToImage(options, fileName) {
        this._dialogBinder.exportDashboardTo('Image', options, fileName);
    }
    exportToExcel(options, fileName) {
        this._dialogBinder.exportDashboardTo('Excel', options, fileName);
    }
    exportDashboardItemToPdf(itemName, options, fileName) {
        this._dialogBinder.exportDashboardItemTo(itemName, 'PDF', options, fileName);
    }
    exportDashboardItemToImage(itemName, options, fileName) {
        this._dialogBinder.exportDashboardItemTo(itemName, 'Image', options, fileName);
    }
    exportDashboardItemToExcel(itemName, options, fileName) {
        this._dialogBinder.exportDashboardItemTo(itemName, 'Excel', options, fileName);
    }
    _getExportOptions() {
        return this._dialogBinder.exportOptions;
    }
    _setExportOptions(exportOptions) {
        this._dialogBinder.exportOptions.setOptions(exportOptions);
    }
}
exports.DashboardExportExtension = DashboardExportExtension;
control_options_1.defaultExtensions[name] = (dashboardControl, options) => new DashboardExportExtension(dashboardControl, options);
control_options_1.extensionNameMap[name] = nameAlias;
function defineObsoleteMethods(extension) {
    _obsolete_helper_1.defineObsoleteMethod({
        target: extension,
        memberName: 'showDashboardDialog',
        oldMemberDisplayName: 'DashboardExportExtension.showDashboardDialog',
        newMemberDisplayName: 'DashboardExportExtension.showExportDashboardDialog',
        ignoreWarmMessage: true,
        action: (format) => extension.showExportDashboardDialog(format)
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: extension,
        memberName: 'hide',
        oldMemberDisplayName: 'DashboardExportExtension.hide',
        newMemberDisplayName: 'DashboardExportExtension.hideExportDialog',
        ignoreWarmMessage: true,
        action: () => extension.hideExportDialog()
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: extension,
        memberName: 'showItemDialog',
        oldMemberDisplayName: 'DashboardExportExtension.showItemDialog',
        newMemberDisplayName: 'DashboardExportExtension.showExportDashboardItemDialog',
        ignoreWarmMessage: true,
        action: (itemName, format) => extension.showExportDashboardItemDialog(itemName, format)
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: extension,
        memberName: 'showDashboardExportDialog',
        oldMemberDisplayName: 'DashboardExportExtension.showDashboardExportDialog',
        newMemberDisplayName: 'DashboardExportExtension.showExportDashboardDialog',
        ignoreWarmMessage: true,
        action: (format) => extension.showExportDashboardDialog(format)
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: extension,
        memberName: 'showItemExportDialog',
        oldMemberDisplayName: 'DashboardExportExtension.showItemExportDialog',
        newMemberDisplayName: 'DashboardExportExtension.showExportDashboardItemDialog',
        ignoreWarmMessage: true,
        action: (itemName, format) => extension.showExportDashboardItemDialog(itemName, format)
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: extension,
        memberName: 'documentOptions',
        oldMemberDisplayName: 'DashboardExportExtension.documentOptions',
        ignoreWarmMessage: true,
        action: function () {
            return extension._getExportOptions();
        }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: extension,
        memberName: 'getExportOptions',
        oldMemberDisplayName: 'DashboardExportExtension.getExportOptions',
        warmMessage: 'The DashboardExportExtension.getExportOptions method is obsolete.  Use the DashboardExportExtension.getPdfExportOptions, DashboardExportExtension.getImageExportOptions, or DashboardExportExtension.getExcelExportOptions method instead.',
        ignoreWarmMessage: true,
        action: () => { return extension._getExportOptions().convertToASPxClientDashboardExportOptions(); }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: extension,
        memberName: 'setExportOptions',
        oldMemberDisplayName: 'DashboardExportExtension.setExportOptions',
        warmMessage: 'The DashboardExportExtension.setExportOptions method is obsolete.  Use the DashboardExportExtension.setPdfExportOptions, DashboardExportExtension.setImageExportOptions, or DashboardExportExtension.setExcelExportOptions method instead.',
        ignoreWarmMessage: true,
        action: (options) => {
            let exportOptions = extension._getExportOptions().convertToExportOptions(options);
            extension._setExportOptions(exportOptions);
        }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: extension,
        memberName: 'exportDashboardTo',
        oldMemberDisplayName: 'DashboardExportExtension.exportDashboardTo',
        warmMessage: 'The DashboardExportExtension.exportDashboardTo method is obsolete.  Use the DashboardExportExtension.exportToPdf, DashboardExportExtension.exportToImage, or DashboardExportExtension.exportToExcel method instead.',
        ignoreWarmMessage: true,
        action: (format, options, fileName) => {
            if (format === 'PDF') {
                extension.exportToPdf(options, fileName);
            }
            else if (format === 'Image') {
                extension.exportToImage(options, fileName);
            }
            else if (format === 'Excel') {
                extension.exportToExcel(options, fileName);
            }
        }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: extension,
        memberName: 'exportDashboardItemTo',
        oldMemberDisplayName: 'DashboardExportExtension.exportDashboardItemTo',
        warmMessage: 'The DashboardExportExtension.exportDashboardItemTo method is obsolete.  Use the DashboardExportExtension.exportDashboardItemToPdf, DashboardExportExtension.exportDashboardItemToImage, or DashboardExportExtension.exportDashboardItemToExcel method instead.',
        ignoreWarmMessage: true,
        action: (itemName, format, options, fileName) => {
            if (format === 'PDF') {
                extension.exportDashboardItemToPdf(itemName, options, fileName);
            }
            else if (format === 'Image') {
                extension.exportDashboardItemToImage(itemName, options, fileName);
            }
            else if (format === 'Excel') {
                extension.exportDashboardItemToExcel(itemName, options, fileName);
            }
        }
    });
}


/***/ }),

/***/ 44926:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardParameterDialogExtension = void 0;
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const disposable_object_1 = __webpack_require__(99253);
const _obsolete_helper_1 = __webpack_require__(64060);
const _parameters_dialog_1 = __webpack_require__(83496);
const _dashboard_layout_mode_helper_1 = __webpack_require__(26018);
const control_options_1 = __webpack_require__(82560);
const _options_manager_1 = __webpack_require__(47337);
const _parameter_dialog_binder_1 = __webpack_require__(45281);
var name = 'dashboard-parameter-dialog';
var nameAlias = 'dashboardParameterDialog';
class DashboardParameterDialogExtension extends disposable_object_1.DisposableObject {
    constructor(dashboardControl, options) {
        super();
        this._customDialogContent = [];
        this._optionsManager = new _options_manager_1.OptionsManager();
        this.name = name;
        this.showDialogButton = ko.observable(true);
        this._updateViewModel = (dashboard) => {
            this._clear();
            if (!!dashboard) {
                this._viewModel = new _parameter_dialog_binder_1.ParameterDialogViewModel(dashboard.parameters, (parameterType, settings) => this._dashboardControl._dataSourceBrowser.getParameterValues(parameterType, settings));
                this._viewModel.parameterCollection.subscribe((value) => {
                    this._clearContent();
                    this._customDialogContent.concat(this._parameterDialog)
                        .filter(dialog => dialog && dialog.setActualState)
                        .forEach(dialog => dialog.setActualState());
                });
            }
        };
        this._optionsManager.initialize({
            alias: nameAlias,
            dashboardControl: dashboardControl,
            defaultOptions: {},
            eventsHolder: this,
            initOptions: options,
            optionChanged: (args) => null
        });
        this._dashboardControl = dashboardControl;
        this._onShowing = this._optionsManager.getInitialOptions().onShowing || (() => { });
        this._onShown = this._optionsManager.getInitialOptions().onShown || (() => { });
        this._onHidden = this._optionsManager.getInitialOptions().onHidden || (() => { });
    }
    get onShowing() {
        return this._onShowing;
    }
    set onShowing(value) {
        if (this._onShowing) {
            this.off('showing', this._onShowing);
        }
        this._onShowing = value;
        this.on('showing', value);
    }
    get onShown() {
        return this._onShown;
    }
    set onShown(value) {
        if (this._onShown) {
            this.off('shown', this._onShown);
        }
        this._onShown = value;
        this.on('shown', value);
    }
    get onHidden() {
        return this._onHidden;
    }
    set onHidden(value) {
        if (this._onHidden) {
            this.off('hidden', this._onHidden);
        }
        this._onHidden = value;
        this.on('hidden', value);
    }
    start() {
        if (this._dashboardControl.dashboard()) {
            this._updateViewModel(this._dashboardControl.dashboard());
            this._subscribeDynamicLookUpValuesLoaded();
        }
        this.toDispose(this._dashboardControl.dashboard.subscribe(newDashboard => this._updateViewModel(newDashboard)));
        this.toDispose(this._dashboardControl.dashboard.subscribe(() => this._subscribeDynamicLookUpValuesLoaded()));
        _obsolete_helper_1.defineObsoleteMethod({
            target: this,
            memberName: 'showDialog',
            oldMemberDisplayName: 'DashboardParameterDialogExtension.showDialog',
            newMemberDisplayName: 'DashboardParameterDialogExtension.show',
            action: () => this.show()
        });
        _obsolete_helper_1.defineObsoleteMethod({
            target: this,
            memberName: 'hideDialog',
            oldMemberDisplayName: 'DashboardParameterDialogExtension.hideDialog',
            newMemberDisplayName: 'DashboardParameterDialogExtension.hide',
            action: () => this.hide()
        });
    }
    stop() {
        this._clear();
        this.dispose();
    }
    show() {
        if (this._parameterDialog) {
            this._parameterDialog.dispose();
        }
        this._parameterDialog = this._createParameterDialog();
        this._parameterDialog.show();
    }
    hide() {
        if (!!this._parameterDialog) {
            this._parameterDialog.hide();
        }
    }
    subscribeToContentChanges(callback) {
        return this._viewModel.parameterCollection.subscribe(callback);
    }
    getParameters() {
        return this._getParameters();
    }
    _getParameters() {
        if (!this._viewModel)
            throw 'Dashboard is not loaded';
        return this._viewModel.parameterCollection();
    }
    renderContent(element) {
        var customParameterDialog = this._createParameterDialog();
        this._customDialogContent.push(customParameterDialog);
        return customParameterDialog.generateContent(_jquery_helpers_1.$unwrap(element), () => {
            this._customDialogContent.splice(this._customDialogContent.indexOf(customParameterDialog), 1);
        });
    }
    _createParameterDialog() {
        return new _parameters_dialog_1.parametersDialog({
            parametersDialogContainer: _dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isMobile ? window.document.body : this._dashboardControl.getWidgetContainer(),
            getParametersCollection: () => this._getParameters(),
            submitParameters: (newParameters) => {
                this._viewModel.parameterCollection.peek().setParameters(newParameters);
            },
            onShowing: (args) => this._optionsManager.raiseEvent('showing', args),
            onShown: (args) => this._optionsManager.raiseEvent('shown', args),
            onHidden: (args) => this._optionsManager.raiseEvent('hidden', args)
        });
    }
    _clearContent() {
        this._customDialogContent.forEach(dialog => dialog.dispose());
        this._customDialogContent = [];
    }
    _clear() {
        this._clearContent();
        if (this._parameterDialog) {
            this._parameterDialog.dispose();
            this._parameterDialog = undefined;
        }
        if (this._viewModel) {
            this._viewModel.dispose();
            this._viewModel = undefined;
        }
    }
    _subscribeDynamicLookUpValuesLoaded() {
        var dataSourceBrowser = this._dashboardControl._dataSourceBrowser;
        if (dataSourceBrowser) {
            dataSourceBrowser.dynamicLookUpValuesLoaded = (dynamicListLookUpSettings) => {
                this._dashboardControl
                    .dashboard()
                    .parameters()
                    .filter(param => {
                    return param.dynamicListLookUpSettings() && param.dynamicListLookUpSettings().equals(dynamicListLookUpSettings);
                })
                    .map(param => param.name())
                    .forEach(paramName => {
                    this._optionsManager.raiseEvent('dynamicLookUpValuesLoaded', { parameterName: paramName });
                });
            };
        }
    }
}
exports.DashboardParameterDialogExtension = DashboardParameterDialogExtension;
control_options_1.defaultExtensions[name] = (dashboardControl, options) => new DashboardParameterDialogExtension(dashboardControl, options);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 92619:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UrlStateExtension = void 0;
const disposable_object_1 = __webpack_require__(99253);
const control_options_1 = __webpack_require__(82560);
const _service_client_1 = __webpack_require__(56826);
var name = 'url-state';
var nameAlias = 'urlState';
class UrlStateExtension extends disposable_object_1.DisposableObject {
    constructor(dashboardControl, options = {}) {
        super();
        this._dashboardContaierSubscriptions = [];
        this._defaultOptions = {
            includeDashboardIdToUrl: false,
            includeDashboardStateToUrl: false
        };
        this.name = name;
        this._options = Object.assign(Object.assign({}, this._defaultOptions), options);
        this._dashboardControl = dashboardControl;
    }
    start() {
        this.toDispose(this._dashboardControl.dashboardContainer.subscribe(dashboardContainer => {
            this._dashboardContaierSubscriptions.forEach(disposable => disposable.dispose());
            this._dashboardContaierSubscriptions = [];
            this._processDashboardChanged(dashboardContainer);
        }));
        this.toDispose(this._dashboardControl.isDesignMode.subscribe(isDesignMode => {
            this._updateDashboardState();
        }));
        this._processDashboardChanged(this._dashboardControl.dashboardContainer());
    }
    stop() {
        this.dispose();
    }
    _processDashboardChanged(dashboardInfo) {
        if (dashboardInfo) {
            if (this._options.includeDashboardIdToUrl) {
                this._updateUrl('dashboardId', dashboardInfo.id);
            }
            this._updateDashboardState();
            if (!!dashboardInfo.dashboard) {
                this._dashboardContaierSubscriptions.push(dashboardInfo.dashboard._state.subscribe(_ => this._updateDashboardState()));
            }
        }
    }
    _updateDashboardState() {
        var dashboard = this._dashboardControl.dashboardContainer() && this._dashboardControl.dashboardContainer().dashboard || null;
        var state = dashboard && !this._dashboardControl.isDesignMode() ? dashboard.stateString : null;
        if (this._options.includeDashboardStateToUrl) {
            this._updateUrl('dashboardState', state);
        }
    }
    _updateUrl(key, value) {
        var newUrl = this._replaceValue(key, value);
        if (newUrl) {
            if (newUrl.length > _service_client_1.ViewerDataServiceClient.maxQueryStringLength) {
                newUrl = this._replaceValue(key, null);
            }
            this._setUrl(newUrl);
        }
    }
    _replaceValue(key, value) {
        var uri = this._getUrl();
        var re = new RegExp('([?&])' + key + '=.*?(&|$)', 'i');
        var separator = uri.indexOf('?') !== -1 ? '&' : '?';
        var newParameterValue = value ? key + '=' + encodeURIComponent(value) : '';
        if (uri.match(re)) {
            var separator = !!newParameterValue ? '$1' : '';
            return uri.replace(re, separator + newParameterValue + '$2');
        }
        else if (!!newParameterValue) {
            return uri + separator + newParameterValue;
        }
        else {
            return uri;
        }
    }
    _getUrl() {
        return location.href;
    }
    _setUrl(url) {
        if (!url)
            url = location.pathname;
        history.replaceState({}, '', url);
    }
}
exports.UrlStateExtension = UrlStateExtension;
control_options_1.defaultExtensions[name] = (dashboardControl, options) => new UrlStateExtension(dashboardControl, options);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 89186:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ViewerApiExtension = void 0;
const disposable_object_1 = __webpack_require__(99253);
const control_options_1 = __webpack_require__(82560);
const _options_manager_1 = __webpack_require__(47337);
const _viewer_api_1 = __webpack_require__(40813);
var name = 'viewer-api';
var nameAlias = 'viewerApi';
class ViewerApiExtension extends disposable_object_1.DisposableObject {
    constructor(dashboardControl, options = {}) {
        super();
        this.name = name;
        this._optionsManager = new _options_manager_1.OptionsManager();
        this.requestUnderlyingData = (itemName, args, onCompleted) => {
            this._viewerApi.requestUnderlyingData(itemName, args, onCompleted);
        };
        this._viewerApi = dashboardControl._viewerApi;
        this._optionsManager.initialize({
            alias: nameAlias,
            dashboardControl: dashboardControl,
            defaultOptions: {},
            eventsHolder: this,
            initOptions: options,
            optionChanged: (args) => null
        });
    }
    start() {
        _viewer_api_1.viewerApiEventsNames.forEach(eventName => {
            let handler = this['_on' + eventName] = (args) => this._optionsManager.raiseEvent(eventName, args);
            this._viewerApi.on(eventName, handler);
        });
    }
    stop() {
        _viewer_api_1.viewerApiEventsNames.forEach(eventName => {
            let handler = this['_on' + eventName];
            this._viewerApi.off(eventName, handler);
        });
    }
    getCurrentRange(itemName) {
        return this._viewerApi.getCurrentRange(itemName);
    }
    getEntireRange(itemName) {
        return this._viewerApi.getEntireRange(itemName);
    }
    setRange(itemName, range) {
        this._viewerApi.setRange(itemName, range);
    }
    setPredefinedRange(itemName, dateTimePeriodName) {
        return this._viewerApi.setPredefinedRange(itemName, dateTimePeriodName);
    }
    getAvailablePredefinedRanges(itemName) {
        return this._viewerApi.getAvailablePredefinedRanges(itemName);
    }
    getCurrentPredefinedRange(itemName) {
        return this._viewerApi.getCurrentPredefinedRange(itemName);
    }
    getCurrentSelection(itemName) {
        return this._viewerApi.getCurrentSelection(itemName);
    }
    canSetMasterFilter(itemName) {
        return this._viewerApi.canSetMasterFilter(itemName);
    }
    canClearMasterFilter(itemName) {
        return this._viewerApi.canClearMasterFilter(itemName);
    }
    canPerformDrillDown(itemName) {
        return this._viewerApi.canPerformDrillDown(itemName);
    }
    canPerformDrillUp(itemName) {
        return this._viewerApi.canPerformDrillUp(itemName);
    }
    getItemData(itemName) {
        return this._viewerApi.getItemData(itemName);
    }
    getCurrentFilterValues(itemName) {
        return this._viewerApi.getCurrentFilterValues(itemName);
    }
    getAvailableFilterValues(itemName) {
        return this._viewerApi.getAvailableFilterValues(itemName);
    }
    getCurrentDrillDownValues(itemName) {
        return this._viewerApi.getCurrentDrillDownValues(itemName);
    }
    getAvailableDrillDownValues(itemName) {
        return this._viewerApi.getAvailableDrillDownValues(itemName);
    }
    setMasterFilter(itemName, values) {
        this._viewerApi.setMasterFilter(itemName, values);
    }
    clearMasterFilter(itemName) {
        this._viewerApi.clearMasterFilter(itemName);
    }
    performDrillDown(itemName, value) {
        this._viewerApi.performDrillDown(itemName, value);
    }
    performDrillUp(itemName) {
        this._viewerApi.performDrillUp(itemName);
    }
    getAvailableActions(itemName) {
        return this._viewerApi.getAvailableActions(itemName);
    }
    updateItemCaptionToolbar(itemName) {
        this._viewerApi.updateItemCaptionToolbar(itemName);
    }
    updateDashboardTitleToolbar() {
        this._viewerApi.updateDashboardTitleToolbar();
    }
    setSelectedTabPage(tabPageName) {
        this._viewerApi.setSelectedTabPage(tabPageName);
    }
    setSelectedTabPageIndex(tabContainerName, index) {
        this._viewerApi.setSelectedTabPageIndex(tabContainerName, index);
    }
    getSelectedTabPageIndex(tabContainerName) {
        return this._viewerApi.getSelectedTabPageIndex(tabContainerName);
    }
    getSelectedTabPage(tabContainerName) {
        return this._viewerApi.getSelectedTabPage(tabContainerName);
    }
}
exports.ViewerApiExtension = ViewerApiExtension;
control_options_1.defaultExtensions[name] = (dashboardControl, options) => new ViewerApiExtension(dashboardControl, options);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 70871:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(70771);
__exportStar(__webpack_require__(80835), exports);
__exportStar(__webpack_require__(82560), exports);
__exportStar(__webpack_require__(85744), exports);
__exportStar(__webpack_require__(22698), exports);
__exportStar(__webpack_require__(29390), exports);
__exportStar(__webpack_require__(32878), exports);
__exportStar(__webpack_require__(89442), exports);
__exportStar(__webpack_require__(44926), exports);
__exportStar(__webpack_require__(92619), exports);
__exportStar(__webpack_require__(89186), exports);
__exportStar(__webpack_require__(79817), exports);
__exportStar(__webpack_require__(16812), exports);
__exportStar(__webpack_require__(19468), exports);
__exportStar(__webpack_require__(84112), exports);
__exportStar(__webpack_require__(95109), exports);


/***/ }),

/***/ 70771:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(94);
__webpack_require__(80835);
__webpack_require__(2979);
__webpack_require__(67963);
__webpack_require__(42949);
__webpack_require__(20029);
__webpack_require__(88986);
__webpack_require__(82013);
__webpack_require__(16340);
__exportStar(__webpack_require__(45613), exports);
__exportStar(__webpack_require__(43412), exports);
__exportStar(__webpack_require__(24405), exports);
__exportStar(__webpack_require__(45736), exports);
__exportStar(__webpack_require__(85017), exports);
__exportStar(__webpack_require__(2979), exports);
__exportStar(__webpack_require__(96152), exports);
__exportStar(__webpack_require__(24378), exports);
__exportStar(__webpack_require__(84327), exports);
__exportStar(__webpack_require__(40280), exports);
__exportStar(__webpack_require__(31878), exports);
__exportStar(__webpack_require__(52120), exports);
__exportStar(__webpack_require__(59482), exports);
__exportStar(__webpack_require__(20029), exports);
__exportStar(__webpack_require__(82106), exports);
__exportStar(__webpack_require__(53489), exports);
__exportStar(__webpack_require__(78869), exports);
__exportStar(__webpack_require__(45665), exports);
__exportStar(__webpack_require__(37047), exports);
__exportStar(__webpack_require__(45281), exports);
__exportStar(__webpack_require__(60136), exports);
__exportStar(__webpack_require__(56929), exports);
__exportStar(__webpack_require__(82013), exports);
__exportStar(__webpack_require__(23586), exports);
__exportStar(__webpack_require__(33686), exports);
__exportStar(__webpack_require__(89358), exports);
__exportStar(__webpack_require__(48139), exports);
__exportStar(__webpack_require__(56499), exports);
__exportStar(__webpack_require__(16340), exports);
__exportStar(__webpack_require__(9970), exports);
__exportStar(__webpack_require__(56826), exports);


/***/ }),

/***/ 50999:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(43150);
__webpack_require__(30867);
__webpack_require__(84348);
__webpack_require__(52562);
__webpack_require__(71761);
__webpack_require__(77856);
__webpack_require__(85789);
__webpack_require__(72858);
__webpack_require__(31703);
__webpack_require__(21803);
__webpack_require__(36306);
__webpack_require__(6925);
__webpack_require__(79322);
__webpack_require__(5773);
__webpack_require__(47545);
__webpack_require__(38218);
__webpack_require__(64485);
__webpack_require__(79876);
__webpack_require__(34024);
__webpack_require__(82914);
__webpack_require__(41561);
__webpack_require__(74958);
__webpack_require__(89873);
__webpack_require__(68203);
__webpack_require__(21523);
__webpack_require__(72665);
__webpack_require__(68408);
__webpack_require__(66417);
__webpack_require__(31745);
__webpack_require__(13052);
__webpack_require__(71996);
__webpack_require__(99578);
__webpack_require__(26519);
__webpack_require__(45664);
__webpack_require__(76420);
__webpack_require__(8520);
__webpack_require__(7559);
__webpack_require__(84201);
__webpack_require__(70655);
__webpack_require__(23853);
__webpack_require__(79352);
__webpack_require__(93966);
__webpack_require__(9496);
__webpack_require__(89380);
__webpack_require__(21420);
__webpack_require__(56319);
__webpack_require__(2437);
__webpack_require__(1044);
__webpack_require__(1044);
__webpack_require__(62723);
__webpack_require__(44655);
__webpack_require__(15781);
__webpack_require__(37827);
__webpack_require__(90056);
__webpack_require__(46253);
__webpack_require__(86588);
__webpack_require__(66681);
__webpack_require__(65311);
__webpack_require__(27197);
__webpack_require__(14198);
__webpack_require__(70871);
__webpack_require__(19468);
__exportStar(__webpack_require__(13674), exports);
__exportStar(__webpack_require__(70871), exports);


/***/ }),

/***/ 60136:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SingleTabItemSizeController = exports.SingleItemSizeController = exports.KeyCodes = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
exports.KeyCodes = {
    Esc: 27,
    Delete: 46,
    Z: 90,
    Y: 89,
    S: 83
};
class SingleItemSizeController {
    constructor(_element, requestRepaint, itemMargins = 0) {
        this._element = _element;
        this.requestRepaint = requestRepaint;
        this.itemMargins = itemMargins;
        this.renderImmediately = true;
    }
    getWidth() {
        return _jquery_helpers_1.getWidth(this._element) - this.itemMargins;
    }
    getHeight() {
        return _jquery_helpers_1.getHeight(this._element) - this.itemMargins;
    }
    setConstraints(constraints) {
    }
}
exports.SingleItemSizeController = SingleItemSizeController;
class SingleTabItemSizeController {
    constructor(requestRepaint, width, height) {
        this.requestRepaint = requestRepaint;
        this.width = width;
        this.height = height;
        this.renderImmediately = true;
    }
    getWidth() {
        return this.width();
    }
    getHeight() {
        return this.height();
    }
    setConstraints(constraints) {
    }
}
exports.SingleTabItemSizeController = SingleTabItemSizeController;


/***/ }),

/***/ 88986:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const ko = __webpack_require__(71032);
ko.bindingHandlers['dx-dashboard-element-accessor'] = {
    init: function (element, valueAccessor) {
        let componentArgs = ko.unwrap(valueAccessor());
        componentArgs.onInitialize && componentArgs.onInitialize({ element: element });
        componentArgs.targetElement && componentArgs.targetElement(element);
        let inDisposingHandler = false;
        ko.utils.domNodeDisposal.addDisposeCallback(element, () => {
            if (componentArgs.onDisposing && !inDisposingHandler) {
                try {
                    inDisposingHandler = true;
                    componentArgs.onDisposing({ element: element });
                }
                finally {
                    inDisposingHandler = false;
                }
            }
        });
    }
};


/***/ }),

/***/ 47337:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EventManager = exports.mergeOptions = exports.OptionsManager = exports.isEventName = exports.getOptionNameByEvent = exports.getEventName = void 0;
const data_1 = __webpack_require__(72858);
const getEventName = (actionName) => {
    return actionName.charAt(2).toLowerCase() + actionName.substr(3);
};
exports.getEventName = getEventName;
const getOptionNameByEvent = (eventName) => {
    return 'on' + eventName.charAt(0).toUpperCase() + eventName.substr(1);
};
exports.getOptionNameByEvent = getOptionNameByEvent;
const isEventName = (actionName) => {
    return actionName && actionName.length && actionName.indexOf('on') === 0 && actionName.charAt(2).toUpperCase() === actionName.charAt(2);
};
exports.isEventName = isEventName;
class OptionsManager {
    constructor() {
        this._internalEvents = new EventManager();
        this._cachedSetters = {};
    }
    initialize(_config) {
        this._config = _config;
        this._dashboardControl = _config.dashboardControl;
        if (_config.eventsHolder) {
            _config.eventsHolder.on = this._internalEvents.on;
            _config.eventsHolder.off = this._internalEvents.off;
        }
    }
    getDefaultOptions() {
        return this._config.defaultOptions;
    }
    getInitialOptions() {
        let res = {};
        this._merge(res, this._config.defaultOptions);
        this._merge(res, this._config.initOptions);
        return res;
    }
    dispose() {
        this._internalEvents.dispose();
    }
    optionChanged(args) {
        return this._config.optionChanged(args);
    }
    raiseEvent(eventName, eventArgs) {
        var optionName = `extensions.${this._config.alias}.${exports.getOptionNameByEvent(eventName)}`;
        var delegateFromOptions = this._dashboardControl.option(optionName);
        if (typeof delegateFromOptions === 'function') {
            delegateFromOptions.call(this._dashboardControl, eventArgs);
        }
        this._internalEvents.raise(eventName, eventArgs);
    }
    get(optionName) {
        return this._dashboardControl.option(`extensions.${this._config.alias}.${optionName}`);
    }
    set(optionName, value) {
        return this._set(optionName, value, false);
    }
    silent(optionName, value) {
        return this._set(optionName, value, true);
    }
    _set(optionName, value, silent) {
        let name = `extensions.${this._config.alias}.${optionName}`;
        return silent ? this._dashboardControl._silent(name, value) : this._dashboardControl.option(name, value);
    }
    _merge(target, source) {
        exports.mergeOptions(target, source, this._cachedSetters);
    }
}
exports.OptionsManager = OptionsManager;
let mergeOptions = (target, source, externalCache = {}) => {
    for (var name in source) {
        let setter = externalCache[name];
        if (setter === undefined)
            setter = externalCache[name] = data_1.compileSetter(name);
        setter(target, source[name], {
            functionsAsIs: true,
            merge: true,
            unwrapObservables: false
        });
    }
};
exports.mergeOptions = mergeOptions;
class EventManager {
    constructor() {
        this._handlers = [];
        this.on = (eventName, eventHandler) => {
            if (!this._handlers.filter(handler => handler.eventName === eventName && handler.event === eventHandler)[0]) {
                this._handlers.push({
                    eventName: eventName,
                    event: eventHandler
                });
            }
        };
        this.off = (eventName, eventHandler) => {
            const eventInfo = this._handlers.filter(handler => handler.eventName === eventName && handler.event === eventHandler)[0];
            const index = this._handlers.indexOf(eventInfo);
            if (index !== -1) {
                this._handlers.splice(index, 1);
            }
        };
    }
    dispose() {
        this._handlers = [];
    }
    raise(eventName, eventArgs) {
        this._handlers
            .filter(handler => handler.eventName === eventName)
            .forEach(handler => handler.event(eventArgs));
    }
}
exports.EventManager = EventManager;


/***/ }),

/***/ 78748:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UpdateController = void 0;
const _utils_1 = __webpack_require__(7590);
class UpdateController {
    constructor(_actionMap, _mapActionByState) {
        this._actionMap = _actionMap;
        this._mapActionByState = _mapActionByState;
        this._locker = 0;
        this._actions = [];
    }
    beginUpdate() {
        this._locker++;
    }
    endUpdate() {
        if (this._locker > 0)
            this._locker--;
        this.commitUpdate();
    }
    commitUpdate() {
        if (this._locker === 0 && this._actions.length) {
            this.beginUpdate();
            let actions = this._actions;
            this._actions = [];
            while (actions.length) {
                actions = _utils_1.distinct(actions
                    .map(action => this._mapActionByState(this.getControlState.bind(this), action))
                    .map(action => {
                    var masterAction = (this._actionMap[action].masterActions || []).filter(masterAction => actions.indexOf(masterAction) !== -1).pop();
                    return masterAction || action;
                }));
                const actualAction = actions.shift();
                actualAction && this._actionMap[actualAction].action();
            }
            this.endUpdate();
        }
    }
    addAction(actionName) {
        const actualAction = this._mapActionByState(this.getControlState.bind(this), actionName);
        this._actions.push(actualAction);
    }
    switchControlState(controlState) {
        this._state = controlState;
    }
    getControlState() {
        return this._state;
    }
}
exports.UpdateController = UpdateController;


/***/ }),

/***/ 56929:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.findItemForApi = void 0;
function findItemForApi(dashboard, itemName, expectedItemClass) {
    let dashboardItem = dashboard.findItem(itemName);
    if (!dashboardItem) {
        throw new Error("The item with the '" + itemName + "' name does not exist");
    }
    if (!(dashboardItem instanceof expectedItemClass))
        throw new Error("The '" + itemName + "' item has incorrect type.");
    return dashboardItem;
}
exports.findItemForApi = findItemForApi;


/***/ }),

/***/ 82013:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const ko = __webpack_require__(71032);
const _interfaces_1 = __webpack_require__(60136);
ko.components.register('dashboard-standalone-item', {
    viewModel: {
        createViewModel: (params, componentInfo) => {
            let element = componentInfo.element;
            return {
                dashboardItem: ko.unwrap(params.dashboardItem),
                dashboardContext: ko.unwrap(params.dashboardContext),
                localContext: ko.unwrap(params.localContext),
                sizeController: new _interfaces_1.SingleItemSizeController(element.parentElement, ko.unwrap(params.repaintRequest)),
                isStandalone: false
            };
        }
    },
    template: { element: 'dx-dashboard-standalone-item' }
});


/***/ }),

/***/ 33686:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createFullscreenItemViewModel = exports.PopupResizeController = exports.MobileItemViewerFactory = void 0;
const ko = __webpack_require__(71032);
const _list_element_1 = __webpack_require__(22219);
const _viewer_item_factory_1 = __webpack_require__(38982);
const _viewer_item_types_1 = __webpack_require__(98104);
class MobileItemViewerFactory extends _viewer_item_factory_1.ViewerItemFactory {
    createItem(container, options) {
        if (options.Type === _viewer_item_types_1.types.comboBox)
            return new _list_element_1.listFilterElement(container, options);
        return super.createItem(container, options);
    }
}
exports.MobileItemViewerFactory = MobileItemViewerFactory;
class PopupResizeController {
    constructor(_repaintRequest) {
        this._repaintRequest = _repaintRequest;
        this._resizeHandler = null;
        this.onInitialized = (e) => {
            if (!this._resizeHandler) {
                this._resizeHandler = () => e.component.repaint();
                this._repaintRequest.add(this._resizeHandler);
            }
        };
        this.onDisposing = (e) => {
            this._resizeHandler && this._repaintRequest.remove(this._resizeHandler);
        };
    }
}
exports.PopupResizeController = PopupResizeController;
var createFullscreenItemViewModel = (fullscreenItemModel, masterFilters, repaintRequest) => {
    var resizeController = new PopupResizeController(repaintRequest);
    return {
        itemViewModel: ko.computed(() => {
            var viewModel = fullscreenItemModel.viewModel();
            viewModel.repaintRequest = repaintRequest;
            return viewModel;
        }),
        visible: ko.computed(() => fullscreenItemModel.visible()),
        width: '100vw',
        height: '100%',
        onInitialized: resizeController.onInitialized,
        onDisposing: resizeController.onDisposing
    };
};
exports.createFullscreenItemViewModel = createFullscreenItemViewModel;


/***/ }),

/***/ 89358:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.customizeMobileViewerItems = exports.setCardAutoArrangementMode = exports.MobileLayoutItemViewModel = void 0;
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const card_item_1 = __webpack_require__(95044);
const _data_grid_item_1 = __webpack_require__(47128);
const _date_filter_element_1 = __webpack_require__(68528);
const _cards_item_1 = __webpack_require__(10474);
const _caption_toolbar_css_classes_1 = __webpack_require__(83629);
const _hidden_caption_toolbar_1 = __webpack_require__(88451);
const _static_toolbar_1 = __webpack_require__(46973);
const _viewer_interfaces_1 = __webpack_require__(87560);
class MobileLayoutItemViewModel {
    constructor(dashboardContext, repaintRequest, dashboardItem, _fullscreenItemModel) {
        this.dashboardContext = dashboardContext;
        this.repaintRequest = repaintRequest;
        this.dashboardItem = dashboardItem;
        this._fullscreenItemModel = _fullscreenItemModel;
        this._cachedItemWidth = 0;
        this._swipeToActionCoef = 100;
        this.itemOffsetInPixels = ko.observable(0);
        this.actionReadyCoef = ko.computed(() => {
            var offsetInPixels = this.itemOffsetInPixels();
            if (offsetInPixels > 0) {
                var coef = Math.abs(offsetInPixels / this._swipeToActionCoef);
                if (coef > 1)
                    coef = 1;
                return coef;
            }
            else {
                return 0;
            }
        });
        this.isReadyForAction = ko.computed(() => {
            return this.actionReadyCoef() >= 1;
        });
        this.maximizeIconOpacity = ko.computed(() => {
            return this.actionReadyCoef();
        });
        this.click = (data, args) => {
            this._performShowFullscreenItem();
            this.unselectItem(data, args);
        };
        this.selectItem = (data, args) => {
            if (this.canMaximizeItem) {
                args.target.classList.add('dx-dashboard-mobile-layout-item-selected');
            }
        };
        this.unselectItem = (data, args) => {
            args.target.classList.remove('dx-dashboard-mobile-layout-item-selected');
        };
        this.swipestart = (data, args) => {
            this._cachedItemWidth = _jquery_helpers_1.getWidth(this._getStandaloneItemElement(args.target));
        };
        this.swipeupdate = (data, args) => {
            if (args.offset > 0) {
                this.itemOffsetInPixels(args.offset * this._cachedItemWidth);
            }
            else {
                this._reset();
            }
        };
        this.swipeend = (data, args) => {
            if (this.isReadyForAction()) {
                this._performShowFullscreenItem();
            }
            this._reset();
        };
        this.localContext = new _viewer_interfaces_1.DashboardItemContext({
            addContextToolbarItems: (options) => {
                options.stateItems = [];
                options.actionItems = [];
                options.navigationItems = [];
            },
            createCaptionToolbar: (viewerItem, container, controlContainer, popupContainer, viewOptions) => {
                return viewOptions.hasCaption ? new _static_toolbar_1.StaticCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, _caption_toolbar_css_classes_1.cssClasses.caption, viewOptions.captionToolbarSeparatorRequired, true) :
                    new _hidden_caption_toolbar_1.HiddenCaptionToolbar();
            },
            viewerItemCreated: (dashboardItem, viewerItem) => customizeMobileViewerItems(viewerItem),
            beforeApplyViewerItemOptions: (item, options, isCreation) => {
                options.ParentContainer = undefined;
                setCardAutoArrangementMode(item, options);
            },
            itemCreatingType: 'secondary'
        });
    }
    get canMaximizeItem() {
        return this.dashboardItem._uiState() === 'live';
    }
    _reset() {
        this.itemOffsetInPixels(0);
    }
    _performShowFullscreenItem() {
        if (this.canMaximizeItem) {
            this._fullscreenItemModel.maximizeItem(this.dashboardItem);
        }
    }
    _getStandaloneItemElement(element) {
        return element.parentElement.querySelector('dashboard-standalone-item');
    }
}
exports.MobileLayoutItemViewModel = MobileLayoutItemViewModel;
function setCardAutoArrangementMode(item, options) {
    if (item instanceof card_item_1.CardItem) {
        options.ViewModel.ContentDescription.ArrangementMode = 'Auto';
    }
}
exports.setCardAutoArrangementMode = setCardAutoArrangementMode;
function customizeMobileViewerItems(viewerItem) {
    if (viewerItem instanceof _data_grid_item_1.dataGridItem) {
        viewerItem._customizeViewOptions = (options) => {
            options.columnHidingEnabled = true;
            options.allowColumnResizing = false;
        };
        viewerItem._getColumnWidthProperty = () => {
            return 'width';
        };
        viewerItem._getColumnWidthMode = () => {
            return 'AutoFitToContents';
        };
        viewerItem._getDefaultBestCharacterCount = (index) => {
            return 10;
        };
    }
    if (viewerItem instanceof _cards_item_1.cardsItem) {
        viewerItem._getIgnorePadding = () => {
            return false;
        };
    }
    if (viewerItem instanceof _date_filter_element_1.dateFilterElement) {
        viewerItem._mobileLayout = () => {
            return true;
        };
    }
}
exports.customizeMobileViewerItems = customizeMobileViewerItems;


/***/ }),

/***/ 48139:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ItemMasterFiltersViewModel = exports.ItemMasterFilterInfo = exports.MasterFiltersEditorModel = void 0;
const ko = __webpack_require__(71032);
const _formatter_1 = __webpack_require__(93687);
const caption_toolbar_options_1 = __webpack_require__(57731);
const _caption_toolbar_css_classes_1 = __webpack_require__(83629);
const _mobile_layout_caption_toolbar_1 = __webpack_require__(37340);
const _dashboard_title_model_1 = __webpack_require__(98448);
const _viewer_interfaces_1 = __webpack_require__(87560);
const _mobile_layout_fullscreen_item_1 = __webpack_require__(33686);
const _mobile_layout_item_1 = __webpack_require__(89358);
class MasterFiltersEditorModel {
    constructor() {
        this._target = ko.observable(null);
        this._visible = ko.observable(false);
        this.visible = ko.computed(() => this._visible());
        this.masterItems = ko.computed(() => {
            if (this._target()) {
                return this._target()._masterFilterItems();
            }
            else {
                return [];
            }
        });
    }
    addFilterButton(toolbarItems, filterableItem) {
        if (filterableItem._masterFilterItems().length) {
            toolbarItems.push({
                name: caption_toolbar_options_1.dashboardToolbarItemNames.dashboardFilters,
                type: 'button',
                icon: 'dx-dashboard-filters',
                click: () => {
                    this.show(filterableItem);
                }
            });
        }
    }
    show(target) {
        this._target(target);
        this._visible(true);
    }
    hide() {
        this._visible(false);
    }
}
exports.MasterFiltersEditorModel = MasterFiltersEditorModel;
class ItemMasterFilterInfo {
    constructor(dashboardItem, click) {
        this.dashboardItem = dashboardItem;
        this.click = click;
        this.name = ko.computed(() => dashboardItem.name());
        this.filterValues = ko.computed(() => {
            return dashboardItem
                ._getDisplayFilterValues(_dashboard_title_model_1.maxFilterValuesCount)
                .filter(value => value.Values[0] && !!value.Values[0].Format)
                .map(value => {
                return {
                    name: value.Name,
                    valuesString: value
                        .Values
                        .map(filterValue => _formatter_1.formatFilterValue(filterValue))
                        .concat(value.Truncated ? ['…'] : [])
                        .join(', ')
                };
            });
        });
    }
}
exports.ItemMasterFilterInfo = ItemMasterFilterInfo;
class ItemMasterFilterPopupViewModel {
    constructor(heightOffset, visible, repaintRequest) {
        this.width = '100vw';
        this.height = `calc(100vh - ${heightOffset}px)`;
        this.visible = visible;
        var popupResizeController = new _mobile_layout_fullscreen_item_1.PopupResizeController(repaintRequest);
        this.onInitializing = popupResizeController.onInitialized;
        this.onDisposing = popupResizeController.onDisposing;
    }
}
class ItemMasterFiltersViewModel {
    constructor(model, dashboardContext, repaintRequest) {
        this.model = model;
        this.masterFilterItem = ko.observable(null);
        this.showMasterFilterItem = (dashboardItem, dashboardContext, repaintRequest) => {
            this.maximizeFiltersPopup(true);
            this.masterFilterItem({
                dashboardItem: dashboardItem,
                dashboardContext: dashboardContext,
                repaintRequest: repaintRequest,
                localContext: new _viewer_interfaces_1.DashboardItemContext({
                    itemFactory: new _mobile_layout_fullscreen_item_1.MobileItemViewerFactory(),
                    addContextToolbarItems: (options) => {
                        options.actionItems = options.actionItems.filter(item => item.name !== caption_toolbar_options_1.dashboardToolbarItemNames.exportMenu);
                    },
                    viewerItemCreated: (dashboardItem, viewerItem) => _mobile_layout_item_1.customizeMobileViewerItems(viewerItem),
                    createCaptionToolbar: (viewerItem, container, controlContainer, popupContainer, viewOptions) => {
                        return new _mobile_layout_caption_toolbar_1.MobileLayoutCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, _caption_toolbar_css_classes_1.cssClasses.caption, viewOptions.captionToolbarSeparatorRequired);
                    },
                    beforeApplyViewerItemOptions: (item, options, isCreation) => {
                        options.ParentContainer = undefined;
                        _mobile_layout_item_1.setCardAutoArrangementMode(item, options);
                    },
                    itemCreatingType: 'primary'
                })
            });
        };
        this.closeMasterFilterItemPopup = () => {
            this.maximizeFiltersPopup(false);
            this.masterFilterItem(null);
        };
        this.closeMasterFiltersPopup = () => {
            this.closeMasterFilterItemPopup();
            this.model.hide();
        };
        this.maximizeFiltersPopup = ko.observable(false);
        this.masterItems = ko.computed(() => model.masterItems().map(mi => new ItemMasterFilterInfo(mi, () => this.showMasterFilterItem(mi, dashboardContext, repaintRequest))));
        var masterFiltersVisible = ko.computed(() => this.model.visible());
        var masterFilterItemVisible = ko.computed(() => !!this.masterFilterItem());
        this.masterFiltersPopup = new ItemMasterFilterPopupViewModel(50, masterFiltersVisible, repaintRequest);
        this.masterFilterMaximizedItemPopup = new ItemMasterFilterPopupViewModel(100, masterFilterItemVisible, repaintRequest);
        this.maximizeFiltersPopup = ko.observable(masterFiltersVisible());
    }
}
exports.ItemMasterFiltersViewModel = ItemMasterFiltersViewModel;


/***/ }),

/***/ 23586:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createLayoutViewModel = exports.dashboardTitleKey = exports.groupWithoutCaptionItemKey = exports.ungroupedItemKey = exports.groupLayoutItems = exports.DashboardMobileLayoutItem = exports.DashboardMobileLayoutController = void 0;
const ko = __webpack_require__(71032);
const index_internal_1 = __webpack_require__(94);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const data_dashboard_item_1 = __webpack_require__(70355);
const date_filter_item_1 = __webpack_require__(78588);
const filter_element_item_base_1 = __webpack_require__(7103);
const dashboard_tab_page_1 = __webpack_require__(12319);
const tab_container_item_1 = __webpack_require__(99290);
const dashboard_layout_group_1 = __webpack_require__(97805);
const _dashboard_title_view_constants_1 = __webpack_require__(68899);
const caption_toolbar_options_1 = __webpack_require__(57731);
const _caption_toolbar_css_classes_1 = __webpack_require__(83629);
const _mobile_layout_caption_toolbar_1 = __webpack_require__(37340);
const _docking_layout_fullscreen_item_1 = __webpack_require__(53489);
const _dashboard_title_model_1 = __webpack_require__(98448);
const _title_component_1 = __webpack_require__(61697);
const _viewer_interfaces_1 = __webpack_require__(87560);
const _mobile_layout_fullscreen_item_1 = __webpack_require__(33686);
const _mobile_layout_item_1 = __webpack_require__(89358);
const _mobile_layout_master_filters_editor_1 = __webpack_require__(48139);
class DashboardMobileLayoutController {
    constructor(dashboard, dashboardContext, findExtension, _encodeHtml = false, viewerApi) {
        this.dashboard = dashboard;
        this.dashboardContext = dashboardContext;
        this._encodeHtml = _encodeHtml;
        this.selectedDashboardItem = ko.computed(() => null);
        this.emptyItemTemplates = ko.observableArray();
        this.selectedLayoutItem = ko.computed(() => null);
        this.visibleItemsProvider = null;
        var fullScreenItemLocalContext = new _viewer_interfaces_1.DashboardItemContext({
            addContextToolbarItems: (options) => {
                var dashboardItem = this.fullscreenItemModel.dashboardItem();
                if (dashboardItem instanceof data_dashboard_item_1.DataDashboardItem)
                    this.masterFiltersEditorModel.addFilterButton(options.stateItems, dashboardItem);
                options.navigationItems.push({
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.backButton,
                    type: 'button',
                    template: () => {
                        let div = document.createElement('div');
                        div.classList.add(_caption_toolbar_css_classes_1.cssClasses.flexParent, _caption_toolbar_css_classes_1.cssClasses.ellipsisText);
                        let icon = _utils_1.createSvgIconElement(_caption_toolbar_css_classes_1.cssClasses.iconBack);
                        let textDiv = document.createElement('div');
                        textDiv.classList.add(_caption_toolbar_css_classes_1.cssClasses.buttonBack, _caption_toolbar_css_classes_1.cssClasses.truncated);
                        textDiv.innerText = index_internal_1.getLocalizationById('DashboardWebStringId.MobileLayout.Back');
                        div.append(icon, textDiv);
                        return div;
                    },
                    click: () => {
                        this.fullscreenItemModel.restoreDownItem();
                    }
                });
            },
            createCaptionToolbar: (viewerItem, container, controlContainer, popupContainer, viewOptions) => {
                return new _mobile_layout_caption_toolbar_1.MobileLayoutCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, _caption_toolbar_css_classes_1.cssClasses.caption, viewOptions.captionToolbarSeparatorRequired);
            },
            viewerItemCreated: (dashboardItem, viewerItem) => _mobile_layout_item_1.customizeMobileViewerItems(viewerItem),
            beforeApplyViewerItemOptions: (item, options, isCreation) => {
                options.ParentContainer = undefined;
                _mobile_layout_item_1.setCardAutoArrangementMode(item, options);
            },
            itemCreatingType: 'secondary'
        });
        var exportExtension = findExtension('dashboard-export');
        if (exportExtension) {
            exportExtension._initializeSecondaryExportItem(fullScreenItemLocalContext);
        }
        this.fullscreenItemModel = new _docking_layout_fullscreen_item_1.FullscreenItemModel(dashboardContext, fullScreenItemLocalContext);
        this.masterFiltersEditorModel = new _mobile_layout_master_filters_editor_1.MasterFiltersEditorModel();
        this.dashboardTitleContext = new _title_component_1.DashboardTitleContext(this._encodeHtml, findExtension, false, viewerApi);
        let flatItems = this._getDashboardItemsInLayoutOrder(dashboard.layout());
        this.items = groupLayoutItems(flatItems).map(item => new DashboardMobileLayoutItem(item.itemComponentNames.map(itemName => dashboard.findItem(itemName))
            .filter(item => !(item instanceof filter_element_item_base_1.FilterElementItemBase) && !(item instanceof date_filter_item_1.DateFilterItem)), item.groupName))
            .filter(mobileLayoutItem => mobileLayoutItem.dashboardItems.length > 0);
    }
    get allowMaximizeItems() { return true; }
    set allowMaximizeItems(value) { }
    get fullscreenItemProvider() {
        return this.fullscreenItemModel;
    }
    _getDashboardItemsInLayoutOrder(layoutItem) {
        var result = [];
        if (layoutItem.dashboardItem() && !(layoutItem instanceof dashboard_layout_group_1.DashboardLayoutGroup)) {
            let parentContainer = layoutItem.item && layoutItem.item.parentContainer() ? this.dashboard.findItem(layoutItem.item.parentContainer()) : undefined;
            let groupName = this._getGroupName(parentContainer);
            result.push({
                groupName: this._getGroupName(parentContainer),
                groupComponentName: this._getGroupComponentName(parentContainer),
                itemComponentName: layoutItem.dashboardItem()
            });
        }
        if (layoutItem instanceof dashboard_layout_group_1.DashboardLayoutGroup) {
            result = result.concat(layoutItem.childNodes().reduce((acc, value) => acc.concat(this._getDashboardItemsInLayoutOrder(value)), []));
        }
        return result;
    }
    _getGroupName(parentContainer) {
        if (parentContainer) {
            let showCaption = parentContainer instanceof dashboard_tab_page_1.DashboardTabPage ? this._getParentTabContainer(parentContainer).showCaption() : parentContainer.showCaption();
            return showCaption ? parentContainer.name() : parentContainer.name() + exports.groupWithoutCaptionItemKey;
        }
        else {
            return exports.ungroupedItemKey;
        }
    }
    _getGroupComponentName(parentContainer) {
        if (parentContainer) {
            let showCaption = parentContainer instanceof dashboard_tab_page_1.DashboardTabPage ? this._getParentTabContainer(parentContainer).showCaption() : parentContainer.showCaption();
            return showCaption ? parentContainer.componentName() : parentContainer.componentName() + exports.groupWithoutCaptionItemKey;
        }
        else {
            return exports.ungroupedItemKey;
        }
    }
    _getParentTabContainer(tabPage) {
        return this.dashboard.items()
            .filter(item => item instanceof tab_container_item_1.TabContainerItem)
            .filter(tabContainer => tabContainer.tabPages().indexOf(tabPage) !== -1)[0];
    }
}
exports.DashboardMobileLayoutController = DashboardMobileLayoutController;
class DashboardMobileLayoutItem {
    constructor(dashboardItems, groupName) {
        this.dashboardItems = dashboardItems;
        this.groupName = groupName;
    }
}
exports.DashboardMobileLayoutItem = DashboardMobileLayoutItem;
function groupLayoutItems(flatItems) {
    let groupedItems = [];
    let previousGroupedItem;
    flatItems.forEach(item => {
        if (previousGroupedItem && previousGroupedItem.groupComponentName === item.groupComponentName) {
            previousGroupedItem.itemComponentNames.push(item.itemComponentName);
        }
        else {
            previousGroupedItem = {
                groupName: item.groupName,
                groupComponentName: item.groupComponentName,
                itemComponentNames: [item.itemComponentName]
            };
            groupedItems.push(previousGroupedItem);
        }
    });
    return groupedItems;
}
exports.groupLayoutItems = groupLayoutItems;
ko.components.register('dashboard-mobile-layout-widget', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            var disposables = [];
            var layoutModel = params.componentArgs;
            let dashboard = ko.unwrap(layoutModel.dashboard);
            var toolbarHeight = ko.observable(_dashboard_title_view_constants_1.titleHeight);
            var contentToolbarHeight = ko.observable(contentToolbarHeight);
            let viewModel = {};
            let element = componentInfo.element;
            let currentWidth = _jquery_helpers_1.getWidth(element);
            let currentHeight = _jquery_helpers_1.getHeight(element);
            let titleWidth = ko.observable(currentWidth);
            let repaintRequest = _jquery_helpers_1.createJQueryCallbacks();
            var layoutWidget = null;
            let getListSize = () => ({ width: _jquery_helpers_1.getWidth(element), height: _jquery_helpers_1.getHeight(element) - toolbarHeight() });
            var resizeControl = () => {
                if (_jquery_helpers_1.getWidth(element) != currentWidth || _jquery_helpers_1.getHeight(element) != currentHeight) {
                    if (layoutWidget) {
                        layoutWidget.option(getListSize());
                    }
                    repaintRequest.fire();
                    currentWidth = _jquery_helpers_1.getWidth(element);
                    currentHeight = _jquery_helpers_1.getHeight(element);
                    titleWidth(currentWidth);
                }
            };
            let resizeCallback = () => resizeControl();
            window.addEventListener('resize', resizeCallback);
            var interval = setInterval(() => resizeControl(), 300);
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                clearInterval(interval);
                window.removeEventListener('resize', resizeCallback);
            });
            var customizeToolbarOptions = (options) => {
                options.contentItems = options.contentItems.filter(item => [caption_toolbar_options_1.dashboardToolbarItemNames.titleFilterIcon, caption_toolbar_options_1.dashboardToolbarItemNames.titleFilterText].indexOf(item.name) === -1);
                layoutModel.masterFiltersEditorModel.addFilterButton(options.actionItems, layoutModel.dashboard);
            };
            let titleModel = new _dashboard_title_model_1.DashboardTitleModel(layoutModel.dashboardTitleContext, layoutModel.dashboard, customizeToolbarOptions);
            var actionToolbarViewModel = createToolbarViewModel(ko.computed(() => {
                return {
                    toolbarOptions: customizeActionToolbar(titleModel.toolbarOptions().toolbarOptions),
                    allowHideEmptyToolbar: true
                };
            }), titleWidth, toolbarHeight, layoutModel.dashboardTitleContext, _caption_toolbar_css_classes_1.cssClasses.actionToolbar);
            var contentToolbarViewModel = createToolbarViewModel(ko.computed(() => {
                return {
                    toolbarOptions: customizeContentToolbar(titleModel.toolbarOptions().toolbarOptions),
                    allowHideEmptyToolbar: true
                };
            }), titleWidth, contentToolbarHeight, layoutModel.dashboardTitleContext, _caption_toolbar_css_classes_1.cssClasses.contentToolbar);
            return {
                itemMasterFiltersViewModel: new _mobile_layout_master_filters_editor_1.ItemMasterFiltersViewModel(layoutModel.masterFiltersEditorModel, layoutModel.dashboardContext, repaintRequest),
                fullscreenItemViewModel: _mobile_layout_fullscreen_item_1.createFullscreenItemViewModel(layoutModel.fullscreenItemModel, layoutModel.masterFiltersEditorModel, repaintRequest),
                titleViewModel: actionToolbarViewModel,
                layoutViewModel: exports.createLayoutViewModel(element, getListSize(), layoutModel.dashboardContext, repaintRequest, layoutModel.items, layoutModel.fullscreenItemModel, (widget) => layoutWidget = widget, contentToolbarViewModel, layoutModel.dashboard.title.visible())
            };
        }
    },
    template: { element: 'dx-dashboard-mobile-layout-widget' }
});
exports.ungroupedItemKey = '_dx_dashboard_ungrouped_mobile_layout_item_key';
exports.groupWithoutCaptionItemKey = '_dx_dashboard_group_without_caption_mobile_layout_item_key';
exports.dashboardTitleKey = '_dx_dashboard_mobile_layout_title_key';
let mobileLayoutCssClasses = {
    ungroupedItem: 'dx-dashboard-ungrouped-item',
    dashboardDisplayNone: 'dx-dashboard-display-none',
    groupWithoutCaption: 'dx-dashboard-group-without-caption'
};
var createToolbarViewModel = (options, width, height, context, className) => {
    return {
        options: options,
        width: width,
        height: height,
        encodeHtml: context.encodeHtml,
        className: className
    };
};
var customizeActionToolbar = (options) => {
    return {
        staticItems: options.navigationItems,
        actionItems: options.actionItems,
        stateItems: options.stateItems,
        navigationItems: []
    };
};
var customizeContentToolbar = (options) => {
    return {
        staticItems: options.staticItems,
        actionItems: [],
        stateItems: [],
        navigationItems: []
    };
};
var createLayoutViewModel = (element, listSize, dashboardContext, repaintRequest, items, fullscreenItemModel, getWidgetCallback, titleViewModel, titleVisible) => {
    var title = {
        data: titleViewModel,
        name: 'dx-dashboard-mobile-title'
    };
    let layoutItems = items.map(layoutItem => {
        let items = layoutItem.dashboardItems.map(dashboardItem => {
            return {
                data: new _mobile_layout_item_1.MobileLayoutItemViewModel(dashboardContext, repaintRequest, dashboardItem, fullscreenItemModel),
                name: 'dx-dashboard-mobile-layout-item'
            };
        });
        return {
            key: layoutItem.groupName,
            items: items
        };
    });
    return Object.assign(Object.assign({ indicateLoading: false }, listSize), { activeStateEnabled: false, focusStateEnabled: false, hoverStateEnabled: false, grouped: true, dataSource: (titleVisible ? [{
                key: exports.dashboardTitleKey,
                items: [title]
            }] : []).concat(layoutItems), onContentReady: (e) => {
            getWidgetCallback(e.component);
        }, groupTemplate: (data, index, element) => {
            if (data.key === exports.ungroupedItemKey || data.key === exports.dashboardTitleKey) {
                let className = data.key === exports.dashboardTitleKey || (data.key === exports.ungroupedItemKey && (titleVisible && index === 1 || !titleVisible && index === 0)) ? mobileLayoutCssClasses.dashboardDisplayNone : mobileLayoutCssClasses.ungroupedItem;
                _jquery_helpers_1.$unwrap(element).classList.add(className);
                return document.createElement('div');
            }
            else if (data.key.search(exports.groupWithoutCaptionItemKey) !== -1) {
                _jquery_helpers_1.$unwrap(element).classList.add(mobileLayoutCssClasses.groupWithoutCaption);
                return document.createElement('div');
            }
            else {
                let div = document.createElement('div');
                div.innerText = data.key;
                return div;
            }
        } });
};
exports.createLayoutViewModel = createLayoutViewModel;


/***/ }),

/***/ 79817:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MobileLayoutExtension = void 0;
const devices_1 = __webpack_require__(52562);
const dialog_1 = __webpack_require__(31745);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _knockout_utils_1 = __webpack_require__(4437);
const control_options_1 = __webpack_require__(82560);
const _options_manager_1 = __webpack_require__(47337);
const _mobile_layout_1 = __webpack_require__(23586);
var name = 'mobile-layout';
var nameAlias = 'mobileLayout';
class MobileLayoutExtension {
    constructor(dashboardControl, options) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._disposables = [];
        this._optionsManager = new _options_manager_1.OptionsManager();
        this._mobileLayoutEnabledOption = ko.observable();
        this._defaultOptions = {
            mobileLayoutEnabled: 'Auto'
        };
        this._mobileLayoutTemplateName = 'dx-dashboard-mobile-layout';
        this._dashboardList = [];
        this._optionsManager.initialize({
            alias: nameAlias,
            dashboardControl: dashboardControl,
            defaultOptions: this._defaultOptions,
            initOptions: options,
            optionChanged: (args) => this._optionChanged(args)
        });
        this._mobileLayoutEnabledOption(this._optionsManager.get('mobileLayoutEnabled'));
        this._canMobileLayoutBeEnabled = _knockout_utils_1.safeComputed({ isDesignMode: this.dashboardControl.isDesignMode }, (args) => !args.isDesignMode);
        this._isMobileLayoutModeExpected = _knockout_utils_1.safeComputed({ mobileLayoutEnabled: this._mobileLayoutEnabledOption }, (args) => {
            if (args.mobileLayoutEnabled === 'Always') {
                return true;
            }
            else if (args.mobileLayoutEnabled === 'Never') {
                return false;
            }
            else {
                return devices_1.default.current().phone;
            }
        });
        this.mobileLayoutEnabled = _knockout_utils_1.safeComputed({
            canMobileLayoutBeEnabled: this._canMobileLayoutBeEnabled,
            isMobileLayoutModeExpected: this._isMobileLayoutModeExpected
        }, (args) => {
            if (args.canMobileLayoutBeEnabled) {
                return args.isMobileLayoutModeExpected;
            }
            else {
                return false;
            }
        });
    }
    _optionChanged(args) {
        switch (args.name) {
            case 'mobileLayoutEnabled':
                this._mobileLayoutEnabledOption(args.value);
                return 'reinitializeDashboard';
            default:
                return null;
        }
    }
    start() {
        setTimeout(() => {
            if (this._isMobileLayoutModeExpected() && !this._canMobileLayoutBeEnabled()) {
                dialog_1.confirm(_default_1.getLocalizationById('DashboardWebStringId.MobileLayout.SwitchToViewer'), '').then((res) => {
                    if (res) {
                        this.dashboardControl.switchToViewer();
                    }
                });
            }
        });
        var layoutController = _knockout_utils_1.safeComputed({
            dashboard: this.dashboardControl.dashboard,
            mobileLayoutEnabled: this.mobileLayoutEnabled
        }, (args) => {
            if (args.dashboard && args.mobileLayoutEnabled) {
                return new _mobile_layout_1.DashboardMobileLayoutController(args.dashboard, this.dashboardControl._dashboardContext, (name) => this.dashboardControl.findExtension(name), this.dashboardControl.encodeHtml, this.dashboardControl._viewerApi);
            }
            return null;
        });
        this._disposables.push(layoutController);
        this.dashboardControl._layoutInfoProviderCollection.splice(0, 0, {
            condition: () => this.mobileLayoutEnabled(),
            name: this._mobileLayoutTemplateName,
            getViewModel: () => _knockout_utils_1.safeComputed({ layoutController }, args => ({ componentArgs: args.layoutController })),
            getLayoutController: () => layoutController
        });
        this.dashboardControl._updateLayout();
        this.mobileLayoutEnabled.subscribe(_ => {
            this.dashboardControl._updateLayout();
        });
    }
    stop() {
        this._disposables.forEach(d => d.dispose());
    }
}
exports.MobileLayoutExtension = MobileLayoutExtension;
control_options_1.defaultExtensions[name] = (dashboardControl, options) => new MobileLayoutExtension(dashboardControl, options);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 56499:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NotificationControllerViewModel = void 0;
const ko = __webpack_require__(71032);
class NotificationControllerViewModel {
    constructor() {
        this._visible = false;
        this.visible = ko.observable(false);
        this.type = ko.observable('');
        this.notifications = ko.observableArray([]);
        this.suspended = ko.observable(false);
        this.displayTime = ko.computed(() => {
            if (this.type() !== 'success') {
                return 60 * 1000;
            }
            return 10 * 1000;
        });
        this.onInitialized = (args) => {
            this._widget = args.component;
        };
    }
    reset() {
        this.visible(false);
        this._visible = false;
    }
    updateNotification(type, title, detail) {
        var notification = { title: title, detail: detail || null };
        if (this.visible() && this.type() === type) {
            this.notifications.push(notification);
            if (this._widget)
                this._widget.repaint();
        }
        else {
            var isFirstLoading = !this.visible();
            this.visible(false);
            this.notifications.removeAll();
            this.notifications.push(notification);
            this.type(type);
            this._visible = true;
            if (isFirstLoading) {
                setTimeout(() => { this.visible(this._visible); }, 300);
            }
            else {
                this.visible(this._visible);
            }
        }
    }
}
exports.NotificationControllerViewModel = NotificationControllerViewModel;


/***/ }),

/***/ 16812:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NotificationController = void 0;
const _utils_1 = __webpack_require__(7590);
const _notificator_view_model_1 = __webpack_require__(56499);
class NotificationController {
    constructor() {
        this._viewModel = new _notificator_view_model_1.NotificationControllerViewModel();
    }
    static _getErrorTextFromResponse(request) {
        return (request && request.responseJSON && request.responseJSON.Message) || '';
    }
    static _getDetailedErrorMessage(errorInfo) {
        var errorDetail = '';
        if (typeof errorInfo == 'string') {
            errorDetail = errorInfo;
        }
        else if (errorInfo && errorInfo['responseJSON']) {
            errorDetail = NotificationController._getErrorTextFromResponse(errorInfo);
        }
        return _utils_1.decodeHtml(errorDetail);
    }
    suspended(isSuspended) {
        this._viewModel.suspended(isSuspended);
    }
    showState(message) {
        this._viewModel.updateNotification('info', message);
    }
    showSuccess(message) {
        this._viewModel.updateNotification('success', message);
    }
    showError(title, errorInfo) {
        let errorDetail = NotificationController._getDetailedErrorMessage(errorInfo);
        this._viewModel.updateNotification('error', title, errorDetail);
        console.warn(title + (errorDetail ? ' - ' + errorDetail : ''));
    }
    reset() {
        this._viewModel.reset();
    }
}
exports.NotificationController = NotificationController;


/***/ }),

/***/ 19468:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 84112:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AjaxRemoteService = void 0;
const $ = __webpack_require__(65311);
const _utils_1 = __webpack_require__(7590);
function findGloballyDefinedMethod(...path) {
    return path.reduce((acc, item) => {
        if (acc)
            return acc[item];
        return undefined;
    }, window);
}
class AjaxRemoteService {
    constructor(options = {}) {
        this.beforeSend = () => { };
        this.complete = () => { };
        this.headers = {};
        this._applyOptions(options);
    }
    _applyOptions(options = {}) {
        if (_utils_1.type.isDefined(options.beforeSend)) {
            this.beforeSend = options.beforeSend;
        }
        else {
            this.beforeSend = () => { };
        }
        if (_utils_1.type.isDefined(options.headers)) {
            this.headers = options.headers;
        }
        else {
            this.headers = {};
        }
        if (_utils_1.type.isDefined(options.complete)) {
            this.complete = options.complete;
        }
        else {
            this.complete = () => { };
        }
    }
    getFromServer(url, data, queryOptions) {
        var obsoleteGetFromServer = findGloballyDefinedMethod('DevExpress', 'Dashboard', 'getFromServer');
        if (obsoleteGetFromServer) {
            console.warn('This method is obsolete. Please use **remoteService** option to customize HTTP requests.');
            return obsoleteGetFromServer(url, data, queryOptions);
        }
        return $.ajax(Object.assign({ url: url, dataType: 'json', data: data, beforeSend: this.beforeSend, headers: this.headers, complete: this.complete }, queryOptions));
    }
    postToServer(url, data) {
        var obsoletePostToServer = findGloballyDefinedMethod('DevExpress', 'Dashboard', 'postToServer');
        if (obsoletePostToServer) {
            console.warn('This method is obsolete. Please use **remoteService** option to customize HTTP requests.');
            return obsoletePostToServer(url, data);
        }
        return $.ajax({
            method: 'post',
            url: url,
            dataType: 'json',
            contentType: 'application/json',
            jsonp: false,
            data: data === null || data === undefined ? '' : JSON.stringify(data),
            beforeSend: this.beforeSend,
            headers: this.headers,
            complete: this.complete
        });
    }
    performPostback(url, args) {
        var obsoletePerformPostback = findGloballyDefinedMethod('DevExpress', 'Dashboard', 'performPostback');
        if (obsoletePerformPostback) {
            console.warn('This method is obsolete. Please use **remoteService** option to customize HTTP requests.');
            return obsoletePerformPostback(url, args);
        }
        var $div = $.fn.constructor('<div>').appendTo('body');
        var $form = $.fn.constructor('<form>', {
            action: url,
            method: 'POST',
            target: '_blank'
        }).appendTo($div);
        var $input = $.fn.constructor('<input>', {
            id: 'dx-db-export-input-id',
            name: 'dx-db-export',
            type: 'hidden',
            value: encodeURIComponent(args)
        }).appendTo($form);
        Object.keys(this.headers).forEach(headerName => {
            var $input = $.fn.constructor('<input>', {
                name: headerName,
                type: 'hidden',
                value: encodeURIComponent(this.headers[headerName])
            }).appendTo($form);
        });
        $form.submit();
        $div.remove();
    }
}
exports.AjaxRemoteService = AjaxRemoteService;


/***/ }),

/***/ 95109:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ResourceManager = void 0;
const _localization_initializer_1 = __webpack_require__(92906);
const _obsolete_helper_1 = __webpack_require__(64060);
__webpack_require__(82423);
const _resources_1 = __webpack_require__(88654);
var resId = 'dx-dashboard-control-resources';
class ResourceManager {
    static embedBundledResources() {
        this._embedBundledResourcesCore('callFromApi');
    }
    static removeEmbeddedResources() {
        this._removeEmbeddedResourcesCore('callFromApi');
    }
    static _embedBundledResourcesCore(keyElement) {
        if (!document.body)
            throw 'HTML <body> element is not created yet.';
        if (!document.getElementById(resId)) {
            let res = '';
            for (let key in _resources_1.resources) {
                res += _resources_1.resources[key];
            }
            var div = document.createElement('div');
            div.style.display = 'none';
            div.innerHTML = res;
            div.id = resId;
            document.body.insertBefore(div, document.body.childNodes[0]);
        }
        if (ResourceManager._resourceManagerKeys.indexOf(keyElement) === -1) {
            ResourceManager._resourceManagerKeys.push(keyElement);
        }
    }
    static _removeEmbeddedResourcesCore(keyElement) {
        let resourceElement = document.getElementById(resId);
        if (resourceElement) {
            var index = ResourceManager._resourceManagerKeys.indexOf(keyElement);
            if (index !== -1) {
                if (keyElement === 'callFromApi' || ResourceManager._resourceManagerKeys.length === 1) {
                    resourceElement.parentNode.removeChild(resourceElement);
                    ResourceManager._resourceManagerKeys = [];
                }
                else if (typeof keyElement !== 'string') {
                    ResourceManager._resourceManagerKeys.splice(index, 1);
                }
            }
        }
    }
    static setLocalizationMessages(localizationMessages) {
        _localization_initializer_1.setLocalization(localizationMessages);
    }
    static registerIcon(icon) {
        var div = document.createElement('div');
        div.style.position = 'absolute';
        div.style.visibility = 'hidden';
        div.style.left = '-10px';
        div.style.top = '-10px';
        div.style.width = '1px';
        div.style.height = '1px';
        div.innerHTML = icon;
        document.body.insertBefore(div, document.body.childNodes[0]);
    }
}
exports.ResourceManager = ResourceManager;
ResourceManager._resourceManagerKeys = [];
_obsolete_helper_1.defineObsoleteMethod({
    target: ResourceManager,
    memberName: 'removeEmbededResources',
    oldMemberDisplayName: 'ResourceManager.removeEmbededResources',
    newMemberDisplayName: 'ResourceManager.removeEmbeddedResources',
    action: () => ResourceManager.removeEmbeddedResources()
});


/***/ }),

/***/ 22188:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardUIItemStateController = exports.DashboardItemHeaderHeight = void 0;
const ko = __webpack_require__(71032);
const disposable_object_1 = __webpack_require__(99253);
const _dashboard_item_helper_1 = __webpack_require__(57094);
const _knockout_utils_1 = __webpack_require__(4437);
const _element_size_utils_1 = __webpack_require__(94410);
exports.DashboardItemHeaderHeight = 34;
function createViewerItemAdapter(element, dashboardItem, dashboardContext, localContext, sizeController) {
    var _disposables = [];
    let beforeRender = (viewerItem) => {
        let updateConstraintsHandler = (viewerItem) => {
            if (viewerItem && sizeController.setConstraints) {
                sizeController.setConstraints(viewerItem.getConstraints(true));
            }
        };
        updateConstraintsHandler(viewerItem);
        _disposables.push(dashboardItem.showCaption.subscribe(() => {
            setTimeout(() => updateConstraintsHandler(viewerItem), 100);
        }));
        viewerItem.constraintsUpdated.add(() => {
            updateConstraintsHandler(viewerItem);
        });
        _element_size_utils_1.setElementSize(element, sizeController);
        _disposables.push(_element_size_utils_1.createItemSizeUpdater(viewerItem, sizeController));
        if (sizeController.visible) {
            _disposables.push(sizeController.visible.subscribe(isVisible => {
                if (!isVisible) {
                    let castedItem = viewerItem;
                    if (castedItem.chartViewer) {
                        castedItem.chartViewer.hideTooltip();
                    }
                }
            }));
        }
    };
    var itemViewerAdapter = dashboardContext.viewerItemsManager.create(dashboardItem, element, dashboardContext, localContext, beforeRender);
    itemViewerAdapter.itemUpdated = (viewerItem) => { updateLayoutItemBackbound(element, viewerItem._isTransparentBackground()); };
    itemViewerAdapter.initialize();
    _disposables.push(itemViewerAdapter);
    return { dispose: () => { _disposables.forEach(disposable => disposable.dispose()); } };
}
function renderItemViewer(element, dashboardItem, dashboardContext, localContext, sizeController) {
    var perViewerItemDisposable;
    var subscription = null;
    if (localContext && localContext.visualMode) {
        subscription = _knockout_utils_1.subscribeAndPerform(localContext.visualMode, _ => {
            perViewerItemDisposable && perViewerItemDisposable.dispose();
            perViewerItemDisposable = createViewerItemAdapter(element, dashboardItem, dashboardContext, localContext, sizeController);
        });
    }
    else {
        subscription = createViewerItemAdapter(element, dashboardItem, dashboardContext, localContext, sizeController);
    }
    return {
        dispose: () => {
            perViewerItemDisposable && perViewerItemDisposable.dispose();
            subscription && subscription.dispose();
        }
    };
}
function getUiStateTemplate(dashboardItem, sizeController, additionalClasses = []) {
    var sizeObservable = ko.observable();
    var getFullClassList = (className) => [className].concat(additionalClasses).join(' ');
    var setSizeClass = (sizeController) => {
        var height = sizeController.getHeight();
        if (height > 120) {
            sizeObservable(getFullClassList('dx-dashboard-layout-state-large'));
        }
        else if (height > 80) {
            sizeObservable(getFullClassList('dx-dashboard-layout-state-medium'));
        }
        else {
            sizeObservable(getFullClassList('dx-dashboard-layout-state-small'));
        }
    };
    setSizeClass(sizeController);
    var resizeHandler = () => setSizeClass(sizeController);
    sizeController.requestRepaint.add(resizeHandler);
    var disposable = {
        dispose: () => {
            sizeController.requestRepaint.remove(resizeHandler);
        }
    };
    if (dashboardItem._uiState() === 'loading') {
        return { template: { name: 'dx-dashboard-item-state-loading' }, disposable: disposable };
    }
    else if (dashboardItem._uiState() === 'error') {
        return {
            template: {
                name: 'dx-dashboard-item-state-error',
                data: {
                    icon: _dashboard_item_helper_1.getItemIconName(dashboardItem),
                    title: _dashboard_item_helper_1.getItemTitle(dashboardItem),
                    errorState: dashboardItem._errorState,
                    sizeClass: sizeObservable
                }
            },
            disposable: disposable
        };
    }
    else if (dashboardItem._uiState() === 'empty') {
        return {
            template: {
                name: 'dx-dashboard-item-state-empty',
                data: {
                    icon: _dashboard_item_helper_1.getItemIconName(dashboardItem),
                    title: _dashboard_item_helper_1.getItemTitle(dashboardItem),
                    sizeClass: sizeObservable
                }
            },
            disposable: disposable
        };
    }
}
function updateLayoutItemBackbound(element, isTransparent) {
    if (isTransparent) {
        element.classList.add('dx-layout-item-container-transparent');
    }
    else {
        element.classList.remove('dx-layout-item-container-transparent');
    }
}
ko.bindingHandlers['dx-dashboard-item-binding'] = {
    init: function (element, valueAccessor, _, __, bindingContext) {
        var params = ko.unwrap(valueAccessor());
        var dashboardItem = params.dashboardItem;
        let sizeController = params.sizeController;
        _element_size_utils_1.setElementSize(element, sizeController);
        element.classList.add('dx-dashboard-item-container');
        var uiStateController = new DashboardUIItemStateController(element, params.dashboardItem, params.sizeController, bindingContext, () => {
            return renderItemViewer(element, dashboardItem, params.dashboardContext, params.localContext, params.sizeController);
        });
        uiStateController.render();
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            uiStateController.dispose();
        });
        return { controlsDescendantBindings: true };
    }
};
ko.bindingHandlers['dx-dashboard-layout-group-binding'] = {
    init: function (element, valueAccessor) {
        var _disposables = [];
        var params = ko.unwrap(valueAccessor());
        element.classList.add('dx-dashboard-item-container');
        let sizeController = params.sizeController;
        _element_size_utils_1.setElementSize(element, sizeController);
        var itemViewerAdapter = params.dashboardContext.viewerItemsManager.create(params.dashboardItem, element, params.dashboardContext, params.localContext, viewerItem => {
            _disposables.push(ko.computed(() => {
                params.headerHeight(params.dashboardItem.showCaption() ? exports.DashboardItemHeaderHeight : 0);
            }));
            _element_size_utils_1.setElementSize(element, sizeController);
            _disposables.push(_element_size_utils_1.createItemSizeUpdater(viewerItem, params.sizeController));
        });
        itemViewerAdapter.initialize();
        _disposables.push(itemViewerAdapter);
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            _disposables.forEach(d => d.dispose());
        });
        return { controlsDescendantBindings: true };
    }
};
class DashboardUIItemStateController extends disposable_object_1.DisposableObject {
    constructor(_element, _dashboardItem, _sizeController, _bindingContext, _renderDashboardItem, _additionalClasses = []) {
        super();
        this._element = _element;
        this._dashboardItem = _dashboardItem;
        this._sizeController = _sizeController;
        this._bindingContext = _bindingContext;
        this._renderDashboardItem = _renderDashboardItem;
        this._additionalClasses = _additionalClasses;
        this._perUiStateSubscriptions = [];
        this._renderDashboardItemState = () => {
            this._perUiStateSubscriptions.forEach(d => d.dispose());
            this._perUiStateSubscriptions = [];
            if (this._dashboardItem._uiState() === 'live') {
                this._perUiStateSubscriptions.push(this._renderDashboardItem());
            }
            else {
                var { template, disposable } = getUiStateTemplate(this._dashboardItem, this._sizeController, this._additionalClasses);
                this._perUiStateSubscriptions.push(disposable);
                this._perUiStateSubscriptions.push(_element_size_utils_1.createElementSizeUpdater(this._element, this._sizeController));
                ko.applyBindingsToNode(this._element, { template: template }, this._bindingContext);
            }
        };
    }
    render() {
        this._renderDashboardItemState();
        this.toDispose(this._dashboardItem._uiState.subscribe(() => this._renderDashboardItemState()));
    }
    dispose() {
        this._perUiStateSubscriptions.forEach(d => d.dispose());
        this._perUiStateSubscriptions = [];
        super.dispose();
    }
}
exports.DashboardUIItemStateController = DashboardUIItemStateController;


/***/ }),

/***/ 94410:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setElementSize = exports.createElementSizeUpdater = exports.createItemSizeUpdater = void 0;
function createItemSizeUpdater(item, sizeController) {
    let handler = () => {
        let width = sizeController.getWidth();
        let height = sizeController.getHeight();
        if (Math.abs(width - item.width()) > 1 || Math.abs(height - item.height()) > 1) {
            item.setSize(width, height);
        }
    };
    sizeController.requestRepaint.add(handler);
    return {
        dispose: () => sizeController.requestRepaint.remove(handler)
    };
}
exports.createItemSizeUpdater = createItemSizeUpdater;
function createElementSizeUpdater(element, sizeController) {
    let handler = () => {
        setElementSize(element, sizeController);
    };
    sizeController.requestRepaint.add(handler);
    return {
        dispose: () => sizeController.requestRepaint.remove(handler)
    };
}
exports.createElementSizeUpdater = createElementSizeUpdater;
function setElementSize(element, sizeController) {
    let width = sizeController.getWidth();
    let height = sizeController.getHeight();
    element.style.width = width + 'px';
    element.style.height = height + 'px';
    if (width === 0 || height === 0) {
        element.classList.add('dx-dashboard-hidden-element');
    }
    else {
        element.classList.remove('dx-dashboard-hidden-element');
    }
}
exports.setElementSize = setElementSize;


/***/ }),

/***/ 40813:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ViewerApi = exports.viewerApiEventsNames = void 0;
const ko = __webpack_require__(71032);
const _drill_through_data_wrapper_1 = __webpack_require__(97068);
const _default_1 = __webpack_require__(65855);
const _common_1 = __webpack_require__(29009);
const model_1 = __webpack_require__(14198);
const disposable_object_1 = __webpack_require__(99253);
const _array_utils_1 = __webpack_require__(60618);
const _helper_classes_1 = __webpack_require__(8384);
const _knockout_utils_1 = __webpack_require__(4437);
const data_dashboard_item_1 = __webpack_require__(70355);
const date_filter_item_1 = __webpack_require__(78588);
const range_filter_item_1 = __webpack_require__(63716);
const _events_helper_1 = __webpack_require__(52783);
const _underlying_data_provider_1 = __webpack_require__(15542);
const _options_manager_1 = __webpack_require__(47337);
const _utils_1 = __webpack_require__(56929);
const notificator_1 = __webpack_require__(16812);
exports.viewerApiEventsNames = [
    'itemClick',
    'itemSelectionChanged',
    'itemWidgetCreated',
    'itemWidgetUpdating',
    'itemWidgetUpdated',
    'itemWidgetOptionsPrepared',
    'itemElementCustomColor',
    'itemVisualInteractivity',
    'itemMasterFilterStateChanged',
    'itemDrillDownStateChanged',
    'itemActionAvailabilityChanged',
    'itemCaptionToolbarUpdated',
    'dashboardTitleToolbarUpdated',
    'selectedTabPageChanged'
];
class ViewerApi extends disposable_object_1.DisposableObject {
    constructor(dashboardControl) {
        super();
        this.dashboardControl = dashboardControl;
        this._viewerItems = {};
        this._dashboardDisposables = [];
        this._internalEvents = new _options_manager_1.EventManager();
        this.title = ko.observable(null);
        this._viewerItemCreated = (item, viewerItem) => {
            if (!!viewerItem) {
                if (item instanceof data_dashboard_item_1.DataDashboardItem) {
                    viewerItem.itemClick.add(this._raiseItemClick);
                    viewerItem.itemSelectionChanged.add(this._raiseItemSelectionChanged);
                    viewerItem.clearMasterFilter.add(this._raiseClearMasterFilter);
                }
                if (!!viewerItem['itemElementCustomColor']) {
                    viewerItem['itemElementCustomColor'].add(this._raiseItemElementCustomColor);
                }
                viewerItem.itemWidgetCreated.add(this._raiseItemWidgetCreated);
                viewerItem.itemWidgetUpdating.add(this._raiseItemWidgetUpdating);
                viewerItem.itemWidgetUpdated.add(this._raiseItemWidgetUpdated);
                viewerItem.itemWidgetOptionsPrepared.add(this._raiseItemWidgetOptionsPrepared);
                viewerItem.itemCaptionToolbarUpdated.add(this._raiseItemCaptionToolbarUpdated);
            }
            if (!this._viewerItems[item.componentName()]) {
                this._viewerItems[item.componentName()] = [];
            }
            if (this._viewerItems[item.componentName()].indexOf(viewerItem) === -1) {
                this._viewerItems[item.componentName()].push(viewerItem);
            }
        };
        this._viewerItemDispose = (item, viewerItem) => {
            if (!!viewerItem) {
                if (item instanceof data_dashboard_item_1.DataDashboardItem) {
                    viewerItem.itemClick.remove(this._raiseItemClick);
                    viewerItem.itemSelectionChanged.remove(this._raiseItemSelectionChanged);
                    viewerItem.clearMasterFilter.remove(this._raiseClearMasterFilter);
                }
                if (!!viewerItem['itemElementCustomColor']) {
                    viewerItem['itemElementCustomColor'].remove(this._raiseItemElementCustomColor);
                }
                viewerItem.itemWidgetCreated.remove(this._raiseItemWidgetCreated);
                viewerItem.itemWidgetUpdating.remove(this._raiseItemWidgetUpdating);
                viewerItem.itemWidgetUpdated.remove(this._raiseItemWidgetUpdated);
                viewerItem.itemCaptionToolbarUpdated.remove(this._raiseItemCaptionToolbarUpdated);
            }
            if (this._viewerItems[item.componentName()]) {
                var index = this._viewerItems[item.componentName()].indexOf(viewerItem);
                if (index > -1) {
                    this._viewerItems[item.componentName()].splice(index, 1);
                }
            }
        };
        this._beforeApplyViewerItemOptions = (item, options, isCreation, customInteractivityOptions) => {
            if (item instanceof data_dashboard_item_1.DataDashboardItem) {
                var isInteractivitySupported = item._isVisualInteractivitySupported();
                var isMasterFilter = item._isMasterFilter();
                var canPerformDrillDown = item._actions().indexOf(_common_1.viewerActions.drillDown) !== -1;
                if (isInteractivitySupported && !isMasterFilter && !canPerformDrillDown) {
                    this._internalEvents.raise('itemVisualInteractivity', _events_helper_1.createItemInteractivityEventArgs(item, customInteractivityOptions));
                }
            }
        };
        this._raiseItemActionAvailabilityChanged = (item) => {
            this._internalEvents.raise('itemActionAvailabilityChanged', {
                itemName: item.componentName(),
                dashboardItem: item,
            });
        };
        this._raiseItemClick = (itemName, dataPoint) => {
            this._internalEvents.raise('itemClick', _events_helper_1.createItemClickEventArgs(this._getDataItem(itemName), dataPoint, this.requestUnderlyingData));
        };
        this._raiseItemSelectionChanged = (itemName, tuples) => {
            this._internalEvents.raise('itemSelectionChanged', _events_helper_1.createItemSelectionChangedEventArgs(this._getDataItem(itemName), tuples));
        };
        this._raiseItemWidgetCreated = (name, viewControl) => {
            let item = this._getItem(name);
            this._internalEvents.raise('itemWidgetCreated', _events_helper_1.createWidgetEventArgs(item, viewControl));
        };
        this._raiseItemWidgetUpdating = (name, viewControl) => {
            let item = this._getItem(name);
            this._internalEvents.raise('itemWidgetUpdating', _events_helper_1.createWidgetEventArgs(item, viewControl));
        };
        this._raiseItemWidgetUpdated = (name, viewControl) => {
            let item = this._getItem(name);
            this._internalEvents.raise('itemWidgetUpdated', _events_helper_1.createWidgetEventArgs(item, viewControl));
        };
        this._raiseItemWidgetOptionsPrepared = (name, options) => {
            let item = this._getItem(name);
            this._internalEvents.raise('itemWidgetOptionsPrepared', _events_helper_1.createWidgetOptionsEventArgs(item, options));
        };
        this._raiseItemCaptionToolbarUpdated = (name, options) => {
            let item = this._getItem(name);
            this._internalEvents.raise('itemCaptionToolbarUpdated', { itemName: name, dashboardItem: item, options: options });
        };
        this._raiseTitleToolbarUpdated = (options) => {
            this._internalEvents.raise('dashboardTitleToolbarUpdated', { dashboard: this.dashboardControl.dashboard(), options: options });
        };
        this._raiseItemElementCustomColor = (itemName, eventArgs) => {
            this._internalEvents.raise('itemElementCustomColor', _events_helper_1.createItemElementCustomColorEventArgs(this._getDataItem(itemName), eventArgs));
        };
        this._raiseItemVisualInteractivity = (itemName, interactivityOptions) => {
            this._internalEvents.raise('itemVisualInteractivity', _events_helper_1.createItemInteractivityEventArgs(this._getDataItem(itemName), interactivityOptions));
        };
        this._raiseClearMasterFilter = (itemName) => {
            var item = this._getItem(itemName);
            this._internalEvents.raise('itemMasterFilterStateChanged', {
                itemName: item.componentName(),
                dashboardItem: item,
                values: null
            });
        };
        this.requestUnderlyingData = (itemName, args, onCompleted) => {
            var dataDashboardItem = this._getDataItem(itemName);
            var raiseOnCompleted = (underlyingData) => {
                var drillThroughData = new _drill_through_data_wrapper_1.DrillThroughDataWrapper(underlyingData);
                drillThroughData.initialize();
                onCompleted(drillThroughData);
            };
            var provider = new _underlying_data_provider_1.UnderlyingDataProvider(this.dashboardControl._serviceClient());
            provider.requestUnderlyingData(dataDashboardItem, args)
                .done(raiseOnCompleted)
                .fail(request => {
                var errorMessage = notificator_1.NotificationController._getErrorTextFromResponse(request);
                if (!errorMessage) {
                    errorMessage = _default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToGetUnderlyingData');
                }
                raiseOnCompleted({ ErrorMessage: errorMessage });
            });
        };
        this.on = this._internalEvents.on;
        this.off = this._internalEvents.off;
        this.toDispose(_knockout_utils_1.subscribeWithPrev(this.title, (oldValue, newValue) => {
            if (oldValue) {
                oldValue.onUpdated.remove(this._raiseTitleToolbarUpdated);
            }
            if (newValue) {
                newValue.onUpdated.add(this._raiseTitleToolbarUpdated);
            }
        }));
        this.toDispose(ko.computed(() => {
            var newDashboard = dashboardControl.dashboard();
            this._dashboardDisposables.forEach(d => d.dispose());
            this._dashboardDisposables = [];
            if (newDashboard) {
                newDashboard
                    .items()
                    .filter(item => item instanceof model_1.TabContainerItem)
                    .forEach((tabContainer) => {
                    tabContainer._activePageChanged = (prevPageName, pageName) => {
                        this._raiseSelectedTabPageChanged(tabContainer.componentName(), prevPageName, pageName);
                    };
                });
                newDashboard._dataDashboardItems().forEach(item => {
                    var itemName = item.componentName.peek();
                    this._raiseItemActionAvailabilityChanged(item);
                    var disposables = [_knockout_utils_1.subscribeWithPrev(item._actions, (prevActions, actions) => {
                            if (!_array_utils_1.arrayEquals(prevActions, actions)) {
                                this._raiseItemActionAvailabilityChanged(item);
                            }
                        })];
                    disposables.push(_knockout_utils_1.subscribeArrayChange(item._drillDownValues, {
                        added: (v) => {
                            this._internalEvents.raise('itemDrillDownStateChanged', {
                                itemName: itemName,
                                dashboardItem: item,
                                action: 'Down',
                                values: item._drillDownValues()
                            });
                        },
                        deleted: (v) => {
                            this._internalEvents.raise('itemDrillDownStateChanged', {
                                itemName: itemName,
                                dashboardItem: item,
                                action: 'Up',
                                values: item._drillDownValues()
                            });
                        }
                    }));
                    disposables.push(item._actualSelectionValues.subscribe(newValue => {
                        this._internalEvents.raise('itemMasterFilterStateChanged', {
                            itemName: itemName,
                            dashboardItem: item,
                            values: newValue
                        });
                    }));
                    Array.prototype.push.apply(this._dashboardDisposables, disposables);
                });
            }
        }));
    }
    _checkIsRangeFilterItem(itemName) {
        var item = this._getDataItem(itemName);
        if (!(item instanceof range_filter_item_1.RangeFilterItem) && !(item instanceof date_filter_item_1.DateFilterItem)) {
            throw new Error('Action is called for an unsupported dashboard item. This action can be performed only for Range Filter and Date Filter.');
        }
    }
    _raiseSelectedTabPageChanged(tabContainerName, prevPageName, pageName) {
        this._internalEvents.raise('selectedTabPageChanged', {
            tabContainerName: tabContainerName,
            selectedPage: pageName,
            previousPage: prevPageName
        });
    }
    start() {
        this.dashboardControl._dashboardContext.viewerItemCreated.add(this._viewerItemCreated);
        this.dashboardControl._dashboardContext.viewerItemDispose.add(this._viewerItemDispose);
        this.dashboardControl._dashboardContext.beforeApplyViewerItemOptions.add(this._beforeApplyViewerItemOptions);
    }
    stop() {
        this.dashboardControl._dashboardContext.viewerItemCreated.remove(this._viewerItemCreated);
        this.dashboardControl._dashboardContext.viewerItemDispose.remove(this._viewerItemDispose);
        this.dashboardControl._dashboardContext.beforeApplyViewerItemOptions.remove(this._beforeApplyViewerItemOptions);
    }
    _getItemCore(itemId, findItem) {
        let dashboard = this.dashboardControl.dashboard();
        if (dashboard) {
            var item = findItem(dashboard);
            if (item) {
                return item;
            }
            else {
                throw Error("The item with the '" + itemId + "' name does not exist");
            }
        }
        else {
            throw new Error('Cannot perform operation because the dashboard is not loaded');
        }
    }
    _getItem(itemId) {
        return this._getItemCore(itemId, dashboard => dashboard._allItems().filter(item => item.componentName() == itemId)[0]);
    }
    _getDataItem(itemName) {
        return this._getItemCore(itemName, dashboard => dashboard._findDataItem(itemName));
    }
    getCurrentRange(itemName) {
        this._checkIsRangeFilterItem(itemName);
        let item = this._getDataItem(itemName);
        let selection = item._actualSelectionValues() && item._actualSelectionValues()[0] || item._getEntireRange();
        return selection && selection.length > 0 ? {
            minimum: selection[0],
            maximum: selection[1]
        } : null;
    }
    getEntireRange(itemName) {
        this._checkIsRangeFilterItem(itemName);
        let entireRange = this._getDataItem(itemName)._getEntireRange();
        return entireRange.length > 0 ? {
            minimum: entireRange[0],
            maximum: entireRange[1]
        } : null;
    }
    setRange(itemName, range) {
        this._checkIsRangeFilterItem(itemName);
        this.setMasterFilter(itemName, [[range.minimum, range.maximum]]);
    }
    setPredefinedRange(itemName, dateTimePeriodName) {
        this._checkIsRangeFilterItem(itemName);
        let rangeFilter = this._getDataItem(itemName);
        let periods = rangeFilter.dateTimePeriods().filter(period => period.name() === dateTimePeriodName);
        if (periods.length === 0) {
            throw new Error("The predefined range with the '" + dateTimePeriodName + "' name does not exist");
        }
        rangeFilter._processItemSetPredefinedPeriod(dateTimePeriodName);
    }
    getAvailablePredefinedRanges(itemName) {
        this._checkIsRangeFilterItem(itemName);
        return this._getDataItem(itemName).dateTimePeriods().map(period => period.name());
    }
    getCurrentPredefinedRange(itemName) {
        this._checkIsRangeFilterItem(itemName);
        let period = this._getDataItem(itemName).currentSelectedDateTimePeriodName();
        return period ? period : '';
    }
    getCurrentSelection(itemName) {
        _helper_classes_1.Guard.isNotFalsy(itemName, 'itemName');
        var itemData = this._getDataItem(itemName)._getItemData(), tuples = [], viewerItem = this._getViewerItem(itemName);
        var selectedTuples = viewerItem && viewerItem.getSelectedTuples() || null;
        if (selectedTuples) {
            tuples = selectedTuples.map(selectedTuple => itemData.createTuple(selectedTuple));
        }
        return tuples;
    }
    canSetMasterFilter(itemName) {
        return this._getDataItem(itemName)._actions().indexOf(_common_1.viewerActions.setMasterFilter) !== -1;
    }
    canClearMasterFilter(itemName) {
        return this._getDataItem(itemName)._actions().indexOf(_common_1.viewerActions.clearMasterFilter) !== -1;
    }
    canPerformDrillDown(itemName) {
        return this._getDataItem(itemName)._actions().indexOf(_common_1.viewerActions.drillDown) !== -1;
    }
    canPerformDrillUp(itemName) {
        return this._getDataItem(itemName)._actions().indexOf(_common_1.viewerActions.drillUp) !== -1;
    }
    getItemData(itemName) {
        return this._getDataItem(itemName)._getItemData();
    }
    getCurrentFilterValues(itemName) {
        return this._getDataItem(itemName)._getCurrentFilterValues();
    }
    getAvailableFilterValues(itemName) {
        return this._getDataItem(itemName)._getAvailableFilterValues(itemName);
    }
    getCurrentDrillDownValues(itemName) {
        return this._getDataItem(itemName)._getCurrentDrillDownValues();
    }
    getAvailableDrillDownValues(itemName) {
        return this._getDataItem(itemName)._getAvailableDrillDownValues(itemName);
    }
    setMasterFilter(itemName, values) {
        this._getDataItem(itemName)._performSetMasterFilter(values);
    }
    clearMasterFilter(itemName) {
        this._getDataItem(itemName)._performClearMasterFilter();
    }
    performDrillDown(itemName, value) {
        this._getDataItem(itemName)._performDrillDown(value);
    }
    performDrillUp(itemName) {
        this._getDataItem(itemName)._performDrillUp();
    }
    getAvailableActions(itemName) {
        return this._getDataItem(itemName)._getAvailableActions();
    }
    updateItemCaptionToolbar(itemName) {
        var dashboardItemNames = itemName ?
            this.dashboardControl.dashboard().findItem(itemName) && [itemName] || []
            :
                this.dashboardControl
                    .dashboard()
                    ._allItems()
                    .map((item) => item.componentName());
        if (itemName && dashboardItemNames.length === 0) {
            throw new Error("The item with the '" + itemName + "' name does not exist");
        }
        dashboardItemNames.forEach((itemName) => {
            this._viewerItems[itemName] && this._viewerItems[itemName].forEach(viewerItem => viewerItem.updateCaptionToolbar());
        });
    }
    updateDashboardTitleToolbar() {
        if (this.title()) {
            this.title().update();
        }
    }
    setSelectedTabPage(tabPageName) {
        let dashboard = this.dashboardControl.dashboard();
        if (dashboard) {
            let tabPage = _utils_1.findItemForApi(this.dashboardControl.dashboard(), tabPageName, model_1.DashboardTabPage);
            let tabContainer = this._findParentTabContainer(tabPageName);
            if (tabContainer && tabPage)
                tabContainer._activeTabPage(tabPage);
        }
    }
    setSelectedTabPageIndex(tabContainerName, index) {
        let dashboard = this.dashboardControl.dashboard();
        if (dashboard) {
            let tabContainer = _utils_1.findItemForApi(this.dashboardControl.dashboard(), tabContainerName, model_1.TabContainerItem);
            if (index < 0 || index > tabContainer.tabPages().length - 1) {
                throw Error(`The '${tabContainerName}' tab container does not contain a tab page with the following index: ${index}`);
            }
            let tabContainerLayoutItem = this.dashboardControl.dashboard().layout().findLayoutItem(tabContainer);
            if (tabContainerLayoutItem) {
                this.setSelectedTabPage(tabContainerLayoutItem.childNodes()[index].dashboardItem());
            }
        }
    }
    getSelectedTabPageIndex(tabContainerName) {
        let dashboard = this.dashboardControl.dashboard();
        if (dashboard) {
            let tabContainer = _utils_1.findItemForApi(this.dashboardControl.dashboard(), tabContainerName, model_1.TabContainerItem);
            let tabContainerLayoutItem = this.dashboardControl.dashboard().layout().findLayoutItem(tabContainer);
            let activeTabPageLayoutItem = this.dashboardControl.dashboard().layout().findLayoutItem(tabContainer._activeTabPage());
            if (tabContainerLayoutItem && tabContainerLayoutItem) {
                return tabContainerLayoutItem.childNodes().indexOf(activeTabPageLayoutItem);
            }
        }
        return -1;
    }
    getSelectedTabPage(tabContainerName) {
        let dashboard = this.dashboardControl.dashboard();
        if (dashboard) {
            let tabContainer = _utils_1.findItemForApi(this.dashboardControl.dashboard(), tabContainerName, model_1.TabContainerItem);
            return tabContainer._activeTabPage() ? tabContainer._activeTabPage().componentName() : '';
        }
        return '';
    }
    _findParentTabContainer(tabPageName) {
        let tabContainers = this.dashboardControl.dashboard().items().filter(item => item instanceof model_1.TabContainerItem);
        let parentContainer;
        tabContainers.forEach((container) => {
            let pages = container.tabPages().filter(page => page.componentName() === tabPageName);
            if (pages.length > 0) {
                parentContainer = container;
            }
        });
        if (!parentContainer) {
            throw new Error("The tab container item with the page'" + tabPageName + "' name does not exist");
        }
        return parentContainer;
    }
    _getViewerItem(itemName) {
        var viewerItems = this._viewerItems[itemName] ? this._viewerItems[itemName].filter(viewer => viewer.hasWidget) : [];
        return viewerItems.length > 0 ? viewerItems[0] : undefined;
    }
}
exports.ViewerApi = ViewerApi;


/***/ }),

/***/ 87560:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardItemContext = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
class DashboardItemContext {
    constructor(options = {}) {
        this.addContextToolbarItems = _jquery_helpers_1.createJQueryCallbacks();
        this.viewerItemCreated = _jquery_helpers_1.createJQueryCallbacks();
        this.viewerItemDispose = _jquery_helpers_1.createJQueryCallbacks();
        this.beforeApplyViewerItemOptions = _jquery_helpers_1.createJQueryCallbacks();
        this.captionToolbarCreated = _jquery_helpers_1.createJQueryCallbacks();
        options.addContextToolbarItems && this.addContextToolbarItems.add(options.addContextToolbarItems);
        options.viewerItemCreated && this.viewerItemCreated.add(options.viewerItemCreated);
        options.viewerItemDispose && this.viewerItemDispose.add(options.viewerItemDispose);
        options.beforeApplyViewerItemOptions && this.beforeApplyViewerItemOptions.add(options.beforeApplyViewerItemOptions);
        this.createCaptionToolbar = options.createCaptionToolbar;
        this.itemFactory = options.itemFactory;
        this.ignoreDesignMode = options.ignoreDesignMode;
        this.disabled = options.disabled;
        this.visualMode = options.visualMode;
        this.boundaryContainer = options.boundaryContainer;
        this.itemCreatingType = options.itemCreatingType;
    }
}
exports.DashboardItemContext = DashboardItemContext;


/***/ }),

/***/ 48729:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataItemViewerAdapter = void 0;
const _common_1 = __webpack_require__(29009);
const _jquery_helpers_1 = __webpack_require__(59384);
const _interactivity_controller_1 = __webpack_require__(5828);
const _item_viewer_adapter_base_1 = __webpack_require__(58499);
class DataItemViewerAdapter extends _item_viewer_adapter_base_1.ItemViewerAdapterBase {
    constructor() {
        super(...arguments);
        this._createDefaultCustomInteractivityOptions = () => {
            return {
                selectionMode: _interactivity_controller_1.dashboardSelectionMode.none,
                hoverEnabled: false,
                targetAxes: [],
                defaultSelectedValues: []
            };
        };
        this._ensureCustomInteractivityOptions = (interactivityOptions, interactivityEnable, itemData) => {
            var newOptions = {
                selectionMode: interactivityOptions.selectionMode,
                hoverEnabled: interactivityOptions.hoverEnabled,
                targetAxes: interactivityOptions.targetAxes,
                defaultSelectedValues: interactivityOptions.defaultSelectedValues
            };
            if (interactivityEnable && interactivityOptions.defaultSelectedValues.length == 0 && interactivityOptions.selectionMode == _interactivity_controller_1.dashboardSelectionMode.single) {
                var tuple = [];
                interactivityOptions.targetAxes.forEach(axisName => {
                    tuple.push({
                        AxisName: axisName,
                        Value: itemData.getAxis(axisName).getPoints()[0].getUniquePath()
                    });
                });
                newOptions.defaultSelectedValues = [tuple];
            }
            return newOptions;
        };
    }
    attachToModel(viewerItem, dataDashboardItem) {
        super.attachToModel(viewerItem, dataDashboardItem);
        this.modelSubscriptions.push(dataDashboardItem._actions.subscribe(actions => {
            this.updateActionsModel(viewerItem, actions);
        }));
        this.modelSubscriptions.push(dataDashboardItem._actualSelectionValues.subscribe(newSelection => {
            viewerItem.setSelection(newSelection);
        }));
        viewerItem.selected.add(dataDashboardItem._processItemSelectionChange);
        viewerItem.drillUp.add(dataDashboardItem._processItemDrillUp);
        viewerItem.clearMasterFilter.add(dataDashboardItem._processItemClearMasterFilter);
        viewerItem.contentElementSelection.add(dataDashboardItem._processContentElementSelection);
        viewerItem.allowLimitDataCallback = () => {
            dataDashboardItem._limitDataState.toggle();
            this.context.refresh(dataDashboardItem.componentName());
        };
    }
    detachFromModel(viewerItem, dataDashboardItem) {
        viewerItem.selected.remove(dataDashboardItem._processItemSelectionChange);
        viewerItem.drillUp.remove(dataDashboardItem._processItemDrillUp);
        viewerItem.clearMasterFilter.remove(dataDashboardItem._processItemClearMasterFilter);
        viewerItem.contentElementSelection.remove(dataDashboardItem._processContentElementSelection);
        viewerItem.allowLimitDataCallback = null;
        super.detachFromModel(viewerItem, dataDashboardItem);
    }
    ensureViewerItemCore(onlyCreation, content) {
        var customInteractivityOptions = this._createDefaultCustomInteractivityOptions();
        super.ensureViewerItemCore(onlyCreation, content, customInteractivityOptions);
        this.item.updateItem(this._ensureCustomInteractivityOptions(customInteractivityOptions, this.dashboardItem._actions().length > 0, this.dashboardItem._getItemData()));
        this.updateActionsModel(this.item, this.dashboardItem._actions());
    }
    updateItemContent(content) {
        if (!this.dashboardItem._actualSelectionValues() && this.item.visualMode !== 'caption') {
            this.item.clearSelection();
        }
        super.updateItemContent(content);
        this.item.updateInteractivityOptions();
    }
    createDashboardViewerItem(element, content, dashboardItem) {
        var actions = dashboardItem._actions();
        content.ActionModel = content.ActionModel || {};
        content.ActionModel.Actions = actions;
        content.ActionModel.DrillUpButtonState = this.getDrillUpState(actions);
        content.ActionModel.ClearMasterFilterButtonState = this.dashboardItem._getClearMasterFilterState();
        var viewerItem = super.createDashboardViewerItem(element, content, dashboardItem);
        viewerItem.updateInteractivityOptions();
        return viewerItem;
    }
    getDrillUpState(actions) {
        if (actions.indexOf(_common_1.viewerActions.drillUp) !== -1) {
            return 'Enabled';
        }
        else {
            if (actions.indexOf(_common_1.viewerActions.drillDown) !== -1) {
                return 'Disabled';
            }
            else {
                return 'Hidden';
            }
        }
    }
    updateActionsModel(item, actions) {
        var actionModel = _jquery_helpers_1.deepExtend({}, item.options.ActionModel);
        actionModel.Actions = actions;
        actionModel.DrillUpButtonState = this.getDrillUpState(actions);
        actionModel.ClearMasterFilterButtonState = this.dashboardItem._getClearMasterFilterState();
        var newOptions = _jquery_helpers_1.deepExtend({}, item.options);
        newOptions.ActionModel = actionModel;
        newOptions.ContentType = 'ActionModel';
        item.updateContent(newOptions);
    }
}
exports.DataItemViewerAdapter = DataItemViewerAdapter;


/***/ }),

/***/ 53632:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GridItemViewerAdapter = void 0;
const ko = __webpack_require__(71032);
const _data_item_viewer_adapter_1 = __webpack_require__(48729);
class GridItemViewerAdapter extends _data_item_viewer_adapter_1.DataItemViewerAdapter {
    attachToModel(viewerItem, dataDashboardItem) {
        super.attachToModel(viewerItem, dataDashboardItem);
        viewerItem.clientStateUpdate.add(dataDashboardItem._processItemClientStateUpdate);
        viewerItem.clientFilterChanged.add(dataDashboardItem._processClientFilterChanged);
        viewerItem.clientFilterStateChanged.add(dataDashboardItem._processClientFilterStateChanged);
        viewerItem.gridWidthOptionsChanged = (state) => {
            if (this.context.isDesignMode()) {
                dataDashboardItem._setColumnWidthOptions(state);
            }
        };
        this.toDispose(ko.computed(() => {
            var gridItemViewer = viewerItem;
            gridItemViewer.resetClientStateOnUpdate = this.context.isDesignMode();
            gridItemViewer.manualyResetClientState = !this.context.isDesignMode();
        }));
    }
    detachFromModel(viewerItem, dataDashboardItem) {
        super.detachFromModel(viewerItem, dataDashboardItem);
        viewerItem.gridWidthOptionsChanged = null;
        viewerItem.clientStateUpdate.remove(dataDashboardItem._processItemClientStateUpdate);
    }
}
exports.GridItemViewerAdapter = GridItemViewerAdapter;


/***/ }),

/***/ 58499:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ItemViewerAdapterBase = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const disposable_object_1 = __webpack_require__(99253);
const _date_utils_1 = __webpack_require__(76900);
const custom_item_1 = __webpack_require__(91587);
const _base_item_1 = __webpack_require__(11439);
const _viewer_item_factory_1 = __webpack_require__(38982);
const custom_viewer_item_1 = __webpack_require__(85744);
class ItemViewerAdapterBase extends disposable_object_1.DisposableObject {
    constructor(dashboardItem, element, context, localContext, beforeRender = (item) => { }, onDisposed = () => { }) {
        super();
        this.dashboardItem = dashboardItem;
        this.element = element;
        this.context = context;
        this.localContext = localContext;
        this.beforeRender = beforeRender;
        this.onDisposed = onDisposed;
        this.modelSubscriptions = [];
        this.itemUpdated = (item) => { };
        this.updateServerContentHandler = (newContent) => {
            if (newContent) {
                this.ensureViewerItem(!this.item, newContent);
                this.item.hideLoadingPanel();
            }
            else if (!!this.item) {
                this.item.showLoadingPanel();
            }
            this.itemUpdated(this.item);
        };
    }
    get name() {
        return this.dashboardItem.componentName();
    }
    get _isDesignMode() {
        var ignoreDesignMode = this.localContext && this.localContext.ignoreDesignMode || false;
        if (ignoreDesignMode) {
            return false;
        }
        else {
            return this.context.isDesignMode();
        }
    }
    ensureViewerItem(onlyCreation, content) {
        this.ensureViewerItemCore(onlyCreation, content);
    }
    initialize() {
        let content = this.dashboardItem._getFullServerContent();
        if (content) {
            this.ensureViewerItem(true, content);
            this.itemUpdated(this.item);
        }
        this.modelSubscriptions.push(this.dashboardItem._subcribeServerContent(this.updateServerContentHandler));
    }
    dispose() {
        super.dispose();
        this.modelSubscriptions.forEach(subscription => subscription.dispose());
        if (this.item) {
            if (!!this.context.viewerItemDispose) {
                this.context.viewerItemDispose.fire(this.dashboardItem, this.item);
            }
            if (this.localContext) {
                this.localContext.viewerItemDispose.fire(this.dashboardItem, this.item);
            }
            this.detachFromModel(this.item, this.dashboardItem);
            this.item.dispose();
        }
        this.item = null;
        this.onDisposed();
    }
    resume() {
        this.modelSubscriptions.push(this.dashboardItem._subcribeServerContent(this.updateServerContentHandler));
        this.attachToModel(this.item, this.dashboardItem);
        this.ensureViewerItemCore(false, this.dashboardItem._getFullServerContent());
    }
    suspend() {
        if (!!this.item) {
            this.detachFromModel(this.item, this.dashboardItem);
        }
    }
    ensureViewerItemCore(onlyCreation, content, additionalData) {
        if (!!this.context.beforeApplyViewerItemOptions) {
            this.context.beforeApplyViewerItemOptions.fire(this.dashboardItem, content, onlyCreation, additionalData);
        }
        if (!!this.localContext) {
            this.localContext.beforeApplyViewerItemOptions.fire(this.dashboardItem, content, onlyCreation);
        }
        if (onlyCreation) {
            this.dashboardItem._viewerItemCreated(true);
            this.item = this.createDashboardViewerItem(this.element, content, this.dashboardItem);
        }
        else {
            this.updateItemContent(content);
        }
    }
    updateItemContent(content) {
        this.item.updateContent(content);
    }
    createDashboardViewerItem(element, content, dashboardItem) {
        element.innerHTML = '';
        content.parentContainer = _jquery_helpers_1.closest(element, '.dx-dashboard-container');
        content.controlContainer = _base_item_1.getControlContainer(element);
        if (this.localContext && this.localContext.boundaryContainer) {
            content.boundaryContainer = this.localContext.boundaryContainer;
        }
        let visualMode = this.localContext && this.localContext.visualMode && this.localContext.visualMode() || null;
        var viewerItem;
        if (this.dashboardItem instanceof custom_item_1.CustomItem) {
            if (visualMode === 'caption') {
                viewerItem = new custom_viewer_item_1.CustomItemViewer(this.dashboardItem, _jquery_helpers_1.wrapPublicElement(element), content);
            }
            else {
                var viewerItemCreator = this.context.viewerItemCreator[this.dashboardItem.customItemType()];
                if (!!viewerItemCreator) {
                    viewerItem = viewerItemCreator(this.dashboardItem, _jquery_helpers_1.wrapPublicElement(element), content);
                }
            }
        }
        if (!viewerItem) {
            var viewerItemFactory = (this.localContext && this.localContext.itemFactory) || _viewer_item_factory_1.defaultViewerItemFactory;
            viewerItem = viewerItemFactory.createItem(element, content);
        }
        if (!viewerItem) {
            throw new Error('ViewerItem is not created.');
        }
        if (!!this.context.viewerItemCreated) {
            this.context.viewerItemCreated.fire(this.dashboardItem, viewerItem);
        }
        if (this.localContext) {
            if (this.localContext.visualMode) {
                viewerItem.visualMode = this.localContext.visualMode();
            }
            this.localContext.viewerItemCreated.fire(this.dashboardItem, viewerItem);
            viewerItem.addContextCaptionToolbarOptions = (toolbarOptions) => {
                this.context.addContextToolbarItems.fire(toolbarOptions, this.dashboardItem);
                this.localContext.addContextToolbarItems.fire(toolbarOptions, this.dashboardItem);
            };
            if (this.localContext.createCaptionToolbar) {
                viewerItem.createCaptionToolbar = this.localContext.createCaptionToolbar;
            }
        }
        this.attachToModel(viewerItem, dashboardItem);
        this.beforeRender(viewerItem);
        viewerItem.dateToString = _date_utils_1.fromUtcDateToString;
        viewerItem.render();
        return viewerItem;
    }
    attachToModel(viewerItem, dashboardItem) {
        viewerItem.allowMultiselection = dashboardItem._allowMultiselection();
        this.modelSubscriptions.push(dashboardItem._allowMultiselection.subscribe(newValue => {
            viewerItem.allowMultiselection = newValue;
            viewerItem.forceUpdateInteractivity();
        }));
        viewerItem.allowMultiselectionChanged = (allowed) => {
            dashboardItem._allowMultiselection(allowed);
        };
    }
    detachFromModel(viewerItem, dashboardItem) {
        this.modelSubscriptions.forEach(subscription => subscription.dispose());
        viewerItem.allowMultiselectionChanged = () => { };
    }
}
exports.ItemViewerAdapterBase = ItemViewerAdapterBase;


/***/ }),

/***/ 82809:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ViewerItemAdaptersManager = void 0;
const disposable_object_1 = __webpack_require__(99253);
const dashboard_item_1 = __webpack_require__(5815);
const data_dashboard_item_1 = __webpack_require__(70355);
const date_filter_item_1 = __webpack_require__(78588);
const grid_item_1 = __webpack_require__(74873);
const map_item_1 = __webpack_require__(65422);
const pivot_item_1 = __webpack_require__(68920);
const range_filter_item_1 = __webpack_require__(63716);
const _data_item_viewer_adapter_1 = __webpack_require__(48729);
const _grid_item_viewer_adapter_1 = __webpack_require__(53632);
const _item_viewer_adapter_base_1 = __webpack_require__(58499);
const _map_item_viewer_adapter_1 = __webpack_require__(90490);
const _pivot_item_viewer_adapter_1 = __webpack_require__(57944);
const _predefined_periods_item_viewer_adapter_1 = __webpack_require__(3779);
class ViewerItemAdapterRecordElement {
    constructor(adapter, visualMode) {
        if (adapter)
            this.setAdapter(adapter, visualMode);
    }
    setAdapter(adapter, visualMode) {
        if (this.storage && (this.storage instanceof _item_viewer_adapter_base_1.ItemViewerAdapterBase || visualMode === 'full'))
            throw new Error('Try to replace a primary dashboard item with the new one');
        if (!visualMode || visualMode === 'full') {
            this.storage = adapter;
        }
        else {
            if (!this.storage)
                this.storage = {};
            if (visualMode === 'caption') {
                this.storage.captionItem = adapter;
            }
            else {
                this.storage.contentItem = adapter;
            }
        }
    }
    suspend() {
        this.processMapRecordElement((adapter) => adapter.suspend());
    }
    resume() {
        this.processMapRecordElement((adapter) => adapter.resume());
    }
    dispose() {
        this.processMapRecordElement((adapter) => adapter.dispose());
        this.storage = null;
    }
    processMapRecordElement(handler) {
        if (!this.storage)
            return;
        if (this.storage instanceof _item_viewer_adapter_base_1.ItemViewerAdapterBase) {
            handler(this.storage);
        }
        else {
            this.storage.captionItem && handler(this.storage.captionItem);
            this.storage.contentItem && handler(this.storage.contentItem);
        }
    }
}
class ViewerItemAdaptersManager extends disposable_object_1.DisposableObject {
    constructor() {
        super(...arguments);
        this.viewerItemAdaptersMap = {};
        this.modelSubscriberDict = [
            { type: range_filter_item_1.RangeFilterItem, ctor: _predefined_periods_item_viewer_adapter_1.PredefinedPeriodsItemViewerAdapter },
            { type: date_filter_item_1.DateFilterItem, ctor: _predefined_periods_item_viewer_adapter_1.PredefinedPeriodsItemViewerAdapter },
            { type: grid_item_1.GridItem, ctor: _grid_item_viewer_adapter_1.GridItemViewerAdapter },
            { type: pivot_item_1.PivotItem, ctor: _pivot_item_viewer_adapter_1.PivotItemViewerAdapter },
            { type: map_item_1.MapItem, ctor: _map_item_viewer_adapter_1.MapItemViewerAdapter },
            { type: data_dashboard_item_1.DataDashboardItem, ctor: _data_item_viewer_adapter_1.DataItemViewerAdapter },
            { type: dashboard_item_1.DashboardItem, ctor: _item_viewer_adapter_base_1.ItemViewerAdapterBase }
        ];
        this.createAdapterCore = (dashboardItem, element, context, localContext, beforeRender = (item) => { }) => {
            var modelSubscriberCtor = null;
            for (var i = 0; i < this.modelSubscriberDict.length; i++) {
                if (dashboardItem instanceof this.modelSubscriberDict[i].type) {
                    modelSubscriberCtor = this.modelSubscriberDict[i].ctor;
                    break;
                }
            }
            if (!modelSubscriberCtor) {
                modelSubscriberCtor = this.modelSubscriberDict[this.modelSubscriberDict.length - 1].ctor;
            }
            return (new modelSubscriberCtor(dashboardItem, element, context, localContext, beforeRender, () => this.releaseAdapter(dashboardItem, localContext && localContext.itemCreatingType === 'secondary')));
        };
    }
    releaseAdapter(dashboardItem, isSecondaryAdapter) {
        if (!dashboardItem || !dashboardItem.componentName())
            return;
        let mapRecord = this.viewerItemAdaptersMap[dashboardItem.componentName()];
        if (mapRecord && isSecondaryAdapter) {
            if (mapRecord.secondary) {
                mapRecord.secondary = null;
                mapRecord.primary && mapRecord.primary.resume();
            }
        }
        else {
            delete this.viewerItemAdaptersMap[dashboardItem.componentName()];
        }
    }
    create(dashboardItem, element, context, localContext, beforeRender = (item) => { }) {
        let itemComponentName = dashboardItem.componentName();
        this.viewerItemAdaptersMap[itemComponentName] = this.viewerItemAdaptersMap[itemComponentName] || {};
        let visualMode = localContext && localContext.visualMode && localContext.visualMode() || 'full';
        let newAdapter = this.createAdapterCore(dashboardItem, element, context, localContext, beforeRender);
        let mapRecord = this.viewerItemAdaptersMap[itemComponentName];
        if (localContext && localContext.itemCreatingType === 'secondary') {
            if (visualMode !== 'full')
                throw new Error('Try to create a secondary dashboard item with non-full visual mode');
            mapRecord.primary && mapRecord.primary.suspend();
            mapRecord.secondary = new ViewerItemAdapterRecordElement(newAdapter, visualMode);
        }
        else {
            if (!mapRecord.primary)
                mapRecord.primary = new ViewerItemAdapterRecordElement(newAdapter, visualMode);
            else
                mapRecord.primary.setAdapter(newAdapter, visualMode);
        }
        return newAdapter;
    }
    dispose() {
        Object.keys(this.viewerItemAdaptersMap).forEach(componentName => {
            let mapRecord = this.viewerItemAdaptersMap[componentName];
            if (mapRecord) {
                mapRecord.primary && mapRecord.primary.dispose();
                mapRecord.secondary && mapRecord.secondary.dispose();
            }
            delete this.viewerItemAdaptersMap[componentName];
        });
        super.dispose();
    }
}
exports.ViewerItemAdaptersManager = ViewerItemAdaptersManager;


/***/ }),

/***/ 90490:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MapItemViewerAdapter = void 0;
const _geo_point_map_item_base_1 = __webpack_require__(5243);
const _data_item_viewer_adapter_1 = __webpack_require__(48729);
class MapItemViewerAdapter extends _data_item_viewer_adapter_1.DataItemViewerAdapter {
    updateItemContent(content) {
        this.item.isViewportLocked = this.dashboardItem.lockNavigation();
        super.updateItemContent(content);
        if (this.dashboardItem._clientState()) {
            this.item.updateClientState(this.dashboardItem._clientState());
        }
    }
    createDashboardViewerItem(element, content, dashboardItem) {
        var viewerItem = super.createDashboardViewerItem(element, content, dashboardItem);
        viewerItem.isInitialExtentChanged = dashboardItem._initialExtentChanged();
        if (dashboardItem._clientState()) {
            viewerItem.updateClientState(this.dashboardItem._clientState());
        }
        viewerItem.initialDataRequest();
        if (viewerItem instanceof _geo_point_map_item_base_1.geoPointMapItemBase) {
            viewerItem.forceUpdateClientState();
        }
        return viewerItem;
    }
    attachToModel(viewerItem, dataDashboardItem) {
        super.attachToModel(viewerItem, dataDashboardItem);
        viewerItem.clientStateUpdate.add(dataDashboardItem._processItemClientStateUpdate);
        viewerItem.dataRequest.add(dataDashboardItem._processDataRequest);
        this.modelSubscriptions.push(dataDashboardItem._initialExtentChanged.subscribe(newValue => {
            viewerItem.isInitialExtentChanged = newValue;
            if (!viewerItem.isInitialExtentChanged) {
                if (this._isDesignMode) {
                    let fullViewport = viewerItem.options.FullViewport;
                    viewerItem.onInitialExtent(fullViewport);
                    dataDashboardItem.viewport._set(fullViewport, true);
                }
                else {
                    viewerItem.onInitialExtent();
                }
            }
            viewerItem.updateCaptionToolbar();
        }));
        viewerItem.viewportChangedCallback = (viewport) => {
            if (this._isDesignMode) {
                dataDashboardItem.viewport._set(viewport, false);
            }
        };
        viewerItem.initialExtentChanged = (changed) => {
            dataDashboardItem._initialExtentChanged(changed);
        };
    }
    detachFromModel(viewerItem, dataDashboardItem) {
        super.detachFromModel(viewerItem, dataDashboardItem);
        viewerItem.viewportChangedCallback = null;
        viewerItem.initialExtentChanged = null;
        viewerItem.clientStateUpdate.remove(dataDashboardItem._processItemClientStateUpdate);
        viewerItem.dataRequest.remove(dataDashboardItem._processDataRequest);
    }
    resume() {
        super.resume();
        this.item.initialDataRequest();
    }
}
exports.MapItemViewerAdapter = MapItemViewerAdapter;


/***/ }),

/***/ 57944:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PivotItemViewerAdapter = void 0;
const _data_item_viewer_adapter_1 = __webpack_require__(48729);
class PivotItemViewerAdapter extends _data_item_viewer_adapter_1.DataItemViewerAdapter {
    constructor() {
        super(...arguments);
        this.expandValueHandler = (_, params) => {
            if (params.isRequestData) {
                this.dashboardItem._processItemExpandingChange({
                    values: params.values,
                    isColumn: params.isColumn
                });
            }
        };
        this.expandStateChangedHandler = (dxPivotState) => {
            var currentState = this.item.getExpandingState(!this.dashboardItem.autoExpandRowGroups(), !this.dashboardItem.autoExpandColumnGroups());
            this.dashboardItem._processExpandingStateChanged(currentState, dxPivotState);
        };
    }
    attachToModel(viewerItem, dataDashboardItem) {
        super.attachToModel(viewerItem, dataDashboardItem);
        viewerItem.expandValue.add(this.expandValueHandler);
        viewerItem.expandStateChanged.add(this.expandStateChangedHandler);
    }
    detachFromModel(viewerItem, dataDashboardItem) {
        viewerItem.expandValue.remove(this.expandValueHandler);
        viewerItem.expandStateChanged.remove(this.expandStateChangedHandler);
        super.detachFromModel(viewerItem, dataDashboardItem);
    }
}
exports.PivotItemViewerAdapter = PivotItemViewerAdapter;


/***/ }),

/***/ 3779:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PredefinedPeriodsItemViewerAdapter = void 0;
const _data_item_viewer_adapter_1 = __webpack_require__(48729);
class PredefinedPeriodsItemViewerAdapter extends _data_item_viewer_adapter_1.DataItemViewerAdapter {
    attachToModel(viewerItem, rangeFilterItem) {
        super.attachToModel(viewerItem, rangeFilterItem);
        this.toDispose(rangeFilterItem.currentSelectedDateTimePeriodName.subscribe(newValue => {
            viewerItem._setPredefinedRange(newValue);
        }));
        viewerItem.predefinedRangeChanged = (newRange) => {
            rangeFilterItem._processItemSetPredefinedPeriod(newRange);
        };
    }
    detachFromModel(viewerItem, rangeFilterItem) {
        super.detachFromModel(viewerItem, rangeFilterItem);
        viewerItem.predefinedRangeChanged = () => { };
    }
}
exports.PredefinedPeriodsItemViewerAdapter = PredefinedPeriodsItemViewerAdapter;


/***/ }),

/***/ 16340:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(45613), exports);
__exportStar(__webpack_require__(48729), exports);
__exportStar(__webpack_require__(53632), exports);
__exportStar(__webpack_require__(58499), exports);
__exportStar(__webpack_require__(82809), exports);
__exportStar(__webpack_require__(90490), exports);
__exportStar(__webpack_require__(57944), exports);
__exportStar(__webpack_require__(3779), exports);
__exportStar(__webpack_require__(98448), exports);
__exportStar(__webpack_require__(61697), exports);
__exportStar(__webpack_require__(22188), exports);
__exportStar(__webpack_require__(94410), exports);
__exportStar(__webpack_require__(87560), exports);


/***/ }),

/***/ 98448:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardTitleModel = exports.masterFilterValues = exports.maxFilterValuesCount = void 0;
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const disposable_object_1 = __webpack_require__(99253);
const _dashboard_title_toolbar_adapter_1 = __webpack_require__(24620);
exports.maxFilterValuesCount = 20;
function masterFilterValues(dashboard) {
    if (dashboard && dashboard.title.visible() && dashboard.title.includeMasterFilter()) {
        var newMasterFilterValues = dashboard
            ._masterFilterItems()
            .reduce((acc, item) => acc.concat(item._getDisplayFilterValues(exports.maxFilterValuesCount)), []);
        return newMasterFilterValues.length ? newMasterFilterValues : null;
    }
    return null;
}
exports.masterFilterValues = masterFilterValues;
class DashboardTitleModel extends disposable_object_1.DisposableObject {
    constructor(context, dashboard, customizeToolbarOptions) {
        super();
        this.context = context;
        this.dashboard = dashboard;
        this.customizeToolbarOptions = customizeToolbarOptions;
        this.onUpdated = _jquery_helpers_1.createJQueryCallbacks();
        this.toolbarOptions = ko.observable(null);
        this.parametersExtension = context && context.parametersExtension || ko.computed(() => null);
        this.exportExtension = context && context.exportExtension || ko.computed(() => null);
        this.viewerApi = context && context.viewerApi || null;
        this.viewerApi && this.viewerApi.title(this);
        let showParametersButton = ko.computed(() => {
            return dashboard && dashboard.parameters().some(param => param.parameterVisible()) &&
                (this.parametersExtension() && _utils_1.type.isDefined(this.parametersExtension().showDialogButton()) ? this.parametersExtension().showDialogButton() : false);
        });
        this.allowShowExportDialog = ko.computed(() => {
            return this.exportExtension() && this.exportExtension().allowExportDashboard;
        });
        this.masterFilterValues = ko.computed(() => {
            return masterFilterValues(dashboard);
        });
        this.showTitle = ko.computed(() => {
            return dashboard ? dashboard.title.visible() : false;
        });
        this.viewModel = ko.computed(() => {
            var titleModel = dashboard ? dashboard.title : undefined;
            if (titleModel && titleModel.visible()) {
                let imageViewModel;
                if (titleModel.image64()) {
                    imageViewModel = {
                        SourceBase64String: titleModel.image64(),
                        MimeType: 'image/png'
                    };
                }
                else if (titleModel.url()) {
                    imageViewModel = {
                        Url: titleModel.url()
                    };
                }
                var viewModel = {
                    Text: titleModel.text(),
                    Visible: titleModel.visible(),
                    ShowParametersButton: showParametersButton(),
                    IncludeMasterFilterValues: titleModel.includeMasterFilter(),
                    LayoutModel: {
                        Alignment: titleModel.alignment(),
                        ImageViewModel: imageViewModel
                    },
                };
                return viewModel;
            }
            return null;
        });
        this.update();
        this.toDispose(this.viewModel.subscribe(newValue => this.update()));
        this.toDispose(this.masterFilterValues.subscribe(newValue => this.update()));
        this.toDispose(this.masterFilterValues);
        this.toDispose(this.showTitle);
        this.toDispose(this.viewModel);
        this.toDispose(this.allowShowExportDialog);
        this.toDispose(showParametersButton);
    }
    update() {
        let showExportDialog = (format) => {
            this.exportExtension() && this.exportExtension().showExportDashboardDialog(format);
        };
        let showParametersDialog = () => {
            this.parametersExtension() && this.parametersExtension().show();
        };
        let options = _dashboard_title_toolbar_adapter_1.DashboardTitleToolbarAdapter.getTitleOptions(this.viewModel(), this.masterFilterValues(), showExportDialog, showParametersDialog, this.allowShowExportDialog());
        if (this.customizeToolbarOptions) {
            this.customizeToolbarOptions(options);
        }
        this._raiseUpdated(options);
        this.toolbarOptions({
            centerAligned: this.viewModel() ? this.viewModel().LayoutModel.Alignment === 'Center' : false,
            toolbarOptions: {
                staticItems: options.contentItems,
                actionItems: options.actionItems,
                navigationItems: options.navigationItems,
                stateItems: []
            },
        });
    }
    dispose() {
        this.viewerApi && this.viewerApi.title(null);
        super.dispose();
    }
    _raiseUpdated(option) {
        this.onUpdated.fire(option);
    }
}
exports.DashboardTitleModel = DashboardTitleModel;


/***/ }),

/***/ 61697:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardTitleComponent = exports.DashboardTitleContext = void 0;
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const disposable_object_1 = __webpack_require__(99253);
const _title_toolbar_1 = __webpack_require__(29643);
class DashboardTitleContext extends disposable_object_1.DisposableObject {
    constructor(encodeHtml, findExtension, allowExport = true, viewerApi) {
        super();
        this.parametersExtension = ko.pureComputed(() => findExtension('dashboard-parameter-dialog'));
        this.exportExtension = ko.pureComputed(() => allowExport ? findExtension('dashboard-export') : null);
        this.viewerApi = viewerApi;
        this.toDispose(this.exportExtension);
        this.toDispose(this.parametersExtension);
    }
}
exports.DashboardTitleContext = DashboardTitleContext;
class DashboardTitleComponent extends disposable_object_1.DisposableObject {
    constructor(params, container, controlContainer) {
        super();
        this.params = params;
        this.container = container;
        this.controlContainer = controlContainer;
    }
    initialize() {
        let toolbar = new _title_toolbar_1.DashboardTitleToolbar(this.container, this.controlContainer, this.container, this.params.encodeHtml, this.params.options().allowHideEmptyToolbar, this.params.className);
        toolbar.update(this.params.options().toolbarOptions, this.params.options().centerAligned);
        this.params.height(toolbar.calcHeight(this.params.options().toolbarOptions));
        this.toDispose(toolbar);
        this.toDispose(this.params.options.subscribe(newOptions => {
            if (newOptions) {
                toolbar.update(newOptions.toolbarOptions, newOptions.centerAligned);
                this.params.height(toolbar.calcHeight(newOptions.toolbarOptions));
            }
        }));
        this.toDispose(this.params.width.subscribe(newValue => toolbar.onResize()));
    }
}
exports.DashboardTitleComponent = DashboardTitleComponent;
ko.components.register('dashboard-title', {
    viewModel: {
        createViewModel: function ({ componentArgs }, componentInfo) {
            let element = componentInfo.element;
            let titleComponent = new DashboardTitleComponent(componentArgs, element.querySelector('.dx-dashboard-title'), _jquery_helpers_1.closest(element, '.dx-dashboard-widget-container'));
            titleComponent.initialize();
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                titleComponent.dispose();
            });
        }
    },
    template: "<div class='dx-dashboard-title'></div>"
});


/***/ }),

/***/ 11222:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.chartHelper = void 0;
exports.chartHelper = {
    SelectionMode: {
        Argument: 'Argument',
        Series: 'Series',
        Points: 'Points'
    },
    ChartLegendInsidePosition: {
        TopLeftVertical: 'TopLeftVertical',
        TopLeftHorizontal: 'TopLeftHorizontal',
        TopCenterVertical: 'TopCenterVertical',
        TopCenterHorizontal: 'TopCenterHorizontal',
        TopRightVertical: 'TopRightVertical',
        TopRightHorizontal: 'TopRightHorizontal',
        BottomLeftVertical: 'BottomLeftVertical',
        BottomLeftHorizontal: 'BottomLeftHorizontal',
        BottomCenterVertical: 'BottomCenterVertical',
        BottomCenterHorizontal: 'BottomCenterHorizontal',
        BottomRightVertical: 'BottomRightVertical',
        BottomRightHorizontal: 'BottomRightHorizontal'
    },
    ChartLegendOutsidePosition: {
        TopLeftVertical: 'TopLeftVertical',
        TopLeftHorizontal: 'TopLeftHorizontal',
        TopCenterHorizontal: 'TopCenterHorizontal',
        TopRightVertical: 'TopRightVertical',
        TopRightHorizontal: 'TopRightHorizontal',
        BottomLeftVertical: 'BottomLeftVertical',
        BottomLeftHorizontal: 'BottomLeftHorizontal',
        BottomCenterHorizontal: 'BottomCenterHorizontal',
        BottomRightVertical: 'BottomRightVertical',
        BottomRightHorizontal: 'BottomRightHorizontal'
    },
    convertSeriesType: function (viewSeriesType) {
        switch (viewSeriesType) {
            case 'Bar': return 'bar';
            case 'StackedBar': return 'stackedbar';
            case 'FullStackedBar': return 'fullstackedbar';
            case 'Point': return 'scatter';
            case 'Line': return 'line';
            case 'StackedLine': return 'stackedline';
            case 'FullStackedLine': return 'fullstackedline';
            case 'StepLine': return 'stepline';
            case 'Spline': return 'spline';
            case 'Area': return 'area';
            case 'StackedArea': return 'stackedarea';
            case 'FullStackedArea': return 'fullstackedarea';
            case 'StepArea': return 'steparea';
            case 'SplineArea': return 'splinearea';
            case 'StackedSplineArea': return 'stackedsplinearea';
            case 'FullStackedSplineArea': return 'fullstackedsplinearea';
            case 'SideBySideRangeBar': return 'rangebar';
            case 'RangeArea': return 'rangearea';
            case 'CandleStick': return 'candlestick';
            case 'Stock': return 'stock';
            case 'Donut': return 'doughnut';
            case 'Pie': return 'pie';
            case 'HighLowClose': return 'stock';
            case 'Weighted': return 'bubble';
            default:
                return 'area';
        }
    },
    convertPresentationUnit: function (argumentViewModel) {
        if (argumentViewModel && argumentViewModel.Type === 'DateTime') {
            switch (argumentViewModel.DateTimePresentationUnit) {
                case 'Second':
                    return 'second';
                case 'Minute':
                    return 'minute';
                case 'Hour':
                    return 'hour';
                case 'Day':
                    return 'day';
                case 'Month':
                    return 'month';
                case 'Week':
                    return 'week';
                case 'Quarter':
                    return 'quarter';
                default:
                    return null;
            }
        }
        return null;
    },
    convertLegendInsidePosition: function (position) {
        var legendPosition = this.ChartLegendInsidePosition;
        switch (position) {
            case legendPosition.TopLeftVertical:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'left',
                    orientation: 'vertical'
                };
            case legendPosition.TopLeftHorizontal:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'left',
                    orientation: 'horizontal'
                };
            case legendPosition.TopCenterVertical:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'center',
                    orientation: 'vertical'
                };
            case legendPosition.TopCenterHorizontal:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'center',
                    orientation: 'horizontal'
                };
            case legendPosition.TopRightVertical:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'right',
                    orientation: 'vertical'
                };
            case legendPosition.TopRightHorizontal:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'right',
                    orientation: 'horizontal'
                };
            case legendPosition.BottomLeftVertical:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'left',
                    orientation: 'vertical'
                };
            case legendPosition.BottomLeftHorizontal:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'left',
                    orientation: 'horizontal'
                };
            case legendPosition.BottomCenterVertical:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'center',
                    orientation: 'vertical'
                };
            case legendPosition.BottomCenterHorizontal:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'center',
                    orientation: 'horizontal'
                };
            case legendPosition.BottomRightVertical:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'right',
                    orientation: 'vertical'
                };
            case legendPosition.BottomRightHorizontal:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'right',
                    orientation: 'horizontal'
                };
            default:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'center',
                    orientation: 'horizontal'
                };
        }
    },
    convertLegendOutsidePosition: function (position) {
        var legendPosition = this.ChartLegendOutsidePosition;
        switch (position) {
            case legendPosition.TopLeftVertical:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'left',
                    orientation: 'vertical'
                };
            case legendPosition.TopLeftHorizontal:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'left',
                    orientation: 'horizontal'
                };
            case legendPosition.TopCenterHorizontal:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'center',
                    orientation: 'horizontal'
                };
            case legendPosition.TopRightVertical:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'right',
                    orientation: 'vertical'
                };
            case legendPosition.TopRightHorizontal:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'right',
                    orientation: 'horizontal'
                };
            case legendPosition.BottomLeftVertical:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'left',
                    orientation: 'vertical'
                };
            case legendPosition.BottomLeftHorizontal:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'left',
                    orientation: 'horizontal'
                };
            case legendPosition.BottomCenterHorizontal:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'center',
                    orientation: 'horizontal'
                };
            case legendPosition.BottomRightVertical:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'right',
                    orientation: 'vertical'
                };
            case legendPosition.BottomRightHorizontal:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'right',
                    orientation: 'horizontal'
                };
            default:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'center',
                    orientation: 'horizontal'
                };
        }
    },
    convertPointLabelRotationAngle: function (orientation) {
        switch (orientation) {
            case 'RotateRight':
                return 90;
            case 'RotateLeft':
                return 270;
            default:
                return 0;
        }
    },
    convertPointLabelPosition: function (position) {
        if (position == 'Inside')
            return 'inside';
        else
            return 'outside';
    },
    allowArgumentAxisMargins: function (panes) {
        var seriesType = undefined, seriesEqual = true, marginsArgsEnabled;
        if (panes.length == 1) {
            panes[0].SeriesTemplates.forEach(seriesTemplate => {
                seriesType = (seriesType == undefined) ? seriesTemplate.SeriesType : seriesType;
                seriesEqual = seriesEqual && (seriesType === seriesTemplate.SeriesType);
            });
            marginsArgsEnabled = !(seriesEqual &&
                (['Area', 'StackedArea', 'FullStackedArea', 'StepArea', 'SplineArea', 'StackedSplineArea', 'RangeArea', 'FullStackedSplineArea'].indexOf(seriesType) !== -1));
        }
        else
            marginsArgsEnabled = true;
        return marginsArgsEnabled;
    },
    isFinancialType: function (type) {
        switch (type) {
            case 'candlestick':
            case 'stock':
                return true;
            default:
                return false;
        }
    },
    isTransparentColorType: function (type) {
        switch (type) {
            case 'area':
            case 'steparea':
            case 'splinearea':
            case 'rangearea':
            case 'bubble':
                return true;
            default:
                return false;
        }
    },
    isSeriesColorSupported: function (type) {
        switch (type) {
            case 'line':
            case 'stackedline':
            case 'fullstackedline':
            case 'stepline':
            case 'spline':
            case 'area':
            case 'fullstackedarea':
            case 'splinearea':
            case 'stackedarea':
            case 'stackedsplinearea':
            case 'fullstackedsplinearea':
            case 'steparea':
            case 'rangearea':
                return true;
            default:
                return false;
        }
    },
    isStackedAreaType: function (type) {
        switch (type) {
            case 'stackedarea':
            case 'fullstackedarea':
            case 'stackedsplinearea':
            case 'fullstackedsplinearea':
                return true;
            default:
                return false;
        }
    }
};


/***/ }),

/***/ 29009:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getFlagsEnumTypeValues = exports.serializeFlagsEnumType = exports.parseFlagsEnumType = exports.contentType = exports.viewerActions = exports.DashboardDataIdField = void 0;
exports.DashboardDataIdField = '__DX_DASHBOARD_DATA_ID';
exports.viewerActions = {
    setMasterFilter: 'SetMasterFilter',
    setMultipleValuesMasterFilter: 'SetMultipleValuesMasterFilter',
    clearMasterFilter: 'ClearMasterFilter',
    drillDown: 'DrillDown',
    drillUp: 'DrillUp',
    setSelectedElementIndex: 'SetSelectedElementIndex',
    expandValue: 'ExpandValue',
    dataRequest: 'DataRequest',
    getDrillThroughData: 'GetDrillThroughData'
};
exports.contentType = {
    empty: 'Empty',
    viewModel: 'ViewModel',
    actionModel: 'ActionModel',
    completeDataSource: 'CompleteDataSource',
    partialDataSource: 'PartialDataSource',
    fullContent: 'FullContent'
};
var separator = ', ';
let parseFlagsEnumType = (typeModel, defaultValue, dic) => {
    var types = typeModel.split(separator);
    return Object.keys(dic).reduce((prev, curr) => {
        return prev | (types.indexOf(curr) >= 0 ? dic[curr] : 0);
    }, defaultValue);
};
exports.parseFlagsEnumType = parseFlagsEnumType;
let serializeFlagsEnumType = (val, defaultValue, dic) => {
    return Object.keys(dic).reduce((prev, curr) => {
        if (val & dic[curr]) {
            prev.push(curr);
        }
        return prev;
    }, []).join(separator) || defaultValue;
};
exports.serializeFlagsEnumType = serializeFlagsEnumType;
let getFlagsEnumTypeValues = (val, dic, type) => {
    var keys = [];
    Object.keys(dic).forEach(function (key) {
        if (dic[key] & val) {
            keys.push(type === 'value' ? dic[key] : key);
        }
    });
    return keys;
};
exports.getFlagsEnumTypeValues = getFlagsEnumTypeValues;


/***/ }),

/***/ 99150:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defaultDataControllerFactory = exports.DataControllerFactory = void 0;
const _viewer_item_types_1 = __webpack_require__(98104);
const _bubble_map_data_controller_1 = __webpack_require__(52441);
const _card_data_controller_1 = __webpack_require__(50474);
const _chart_data_controller_1 = __webpack_require__(3757);
const _choropleth_map_data_controller_1 = __webpack_require__(40018);
const _filter_element_data_controller_1 = __webpack_require__(99909);
const _gauge_data_controller_1 = __webpack_require__(36400);
const _geo_point_map_data_controller_1 = __webpack_require__(85557);
const _grid_data_controller_1 = __webpack_require__(46800);
const _image_data_controller_1 = __webpack_require__(61724);
const _pie_data_controller_1 = __webpack_require__(25851);
const _pie_map_data_controller_1 = __webpack_require__(89388);
const _pivot_data_controller_1 = __webpack_require__(31499);
const _range_filter_data_controller_1 = __webpack_require__(77788);
const _scatter_chart_data_controller_1 = __webpack_require__(1685);
const _text_item_data_controller_1 = __webpack_require__(15839);
const _treemap_data_controller_1 = __webpack_require__(77315);
class DataControllerFactory {
    createDataController(type, options) {
        switch (type) {
            case _viewer_item_types_1.types.rangeFilter:
                return new _range_filter_data_controller_1.rangeFilterDataController(options);
            case _viewer_item_types_1.types.chart:
                return new _chart_data_controller_1.chartDataController(options);
            case _viewer_item_types_1.types.scatter:
                return new _scatter_chart_data_controller_1.scatterChartDataController(options);
            case _viewer_item_types_1.types.pie:
                return new _pie_data_controller_1.pieDataController(options);
            case _viewer_item_types_1.types.pivot:
                return new _pivot_data_controller_1.pivotDataController(options);
            case _viewer_item_types_1.types.choroplethMap:
                return new _choropleth_map_data_controller_1.choroplethMapDataController(options);
            case _viewer_item_types_1.types.grid:
                return new _grid_data_controller_1.gridDataController(options);
            case _viewer_item_types_1.types.card:
                return new _card_data_controller_1.cardDataController(options);
            case _viewer_item_types_1.types.gauge:
                return new _gauge_data_controller_1.gaugeDataController(options);
            case _viewer_item_types_1.types.geoPointMap:
                return new _geo_point_map_data_controller_1.geoPointMapDataController(options);
            case _viewer_item_types_1.types.bubbleMap:
                return new _bubble_map_data_controller_1.bubbleMapDataController(options);
            case _viewer_item_types_1.types.pieMap:
                return new _pie_map_data_controller_1.pieMapDataController(options);
            case _viewer_item_types_1.types.comboBox:
            case _viewer_item_types_1.types.listBox:
                return new _filter_element_data_controller_1.listViewDataController(options);
            case _viewer_item_types_1.types.treeView:
                return new _filter_element_data_controller_1.treeViewDataController(options);
            case _viewer_item_types_1.types.boundImage:
                return new _image_data_controller_1.imageDataController(options);
            case _viewer_item_types_1.types.text:
                return new _text_item_data_controller_1.textItemDataController(options);
            case _viewer_item_types_1.types.treemap:
                return new _treemap_data_controller_1.treemapDataController(options);
            default:
                return undefined;
        }
    }
}
exports.DataControllerFactory = DataControllerFactory;
exports.defaultDataControllerFactory = new DataControllerFactory();


/***/ }),

/***/ 27893:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardFormatHelper = exports.invariantCurrencySymbol = exports.invariantCurrencyIdentifier = void 0;
const config_1 = __webpack_require__(39662);
const date_1 = __webpack_require__(31703);
const string_1 = __webpack_require__(36306);
const format_helper_1 = __webpack_require__(79876);
const date_2 = __webpack_require__(41561);
const number_1 = __webpack_require__(74958);
const _utils_1 = __webpack_require__(7590);
const legacy_settings_1 = __webpack_require__(42649);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
exports.invariantCurrencyIdentifier = 'INVARIANT';
exports.invariantCurrencySymbol = '¤';
class DashboardFormatHelper {
    static defaultQuarterFormat() { return _default_1.getLocalizationById('DashboardStringId.DateTimeQuarterFormat'); }
    static format(value, format) {
        if (_jquery_helpers_1.isPlainObject(format) && format.format) {
            if (format.dateType)
                return this._formatDateEx(value, format);
            else if (_utils_1.type.isNumeric(value) && isFinite(value))
                return this._formatNumberEx(value, format);
        }
        return format_helper_1.default.format(value, format);
    }
    static _applyNumberFormat(value, formatConfig) {
        var numberStr = (+value).toString(10);
        if ((/e/).test(numberStr)) {
            console.warn('The number ' + numberStr + ' out of (1e21, 1e-7) range can`t be formatted. The number will be displayed as is.');
            return value.toString();
        }
        var invariantCurrency = formatConfig.currency === exports.invariantCurrencyIdentifier;
        if (invariantCurrency) {
            formatConfig.currency = 'USD';
        }
        var formattedValue = number_1.default.format(value, formatConfig);
        if (formattedValue != null && formatConfig.currency != 'default') {
            var currencySymbol = '';
            var symbolAltNarrow = '';
            try {
                let symbolInfo = number_1.default.getCurrencySymbol(formatConfig.currency);
                currencySymbol = symbolInfo['symbol'];
                symbolAltNarrow = symbolInfo['symbol-alt-narrow'];
            }
            catch (_a) { }
            try {
                let symbolInfo = number_1.default._getCurrencySymbolInfo(formatConfig.currency);
                currencySymbol = symbolInfo.symbol;
                symbolAltNarrow = symbolInfo.symbol;
            }
            catch (_b) { }
            if (invariantCurrency) {
                symbolAltNarrow = exports.invariantCurrencySymbol;
                formatConfig.currency = exports.invariantCurrencyIdentifier;
            }
            if (!!symbolAltNarrow && symbolAltNarrow !== currencySymbol) {
                return formattedValue.replace(currencySymbol, symbolAltNarrow);
            }
        }
        return formattedValue;
    }
    static _getQuarterString(date, format) {
        var quarter = date_1.default.getQuarter(date.getMonth());
        switch (format) {
            case 'q':
                return this.romanDigits[quarter];
            case 'qq':
                return string_1.format(this.defaultQuarterFormat(), this.romanDigits[quarter]);
            case 'Q':
                return (quarter + 1).toString();
            case 'QQ':
                return string_1.format(this.defaultQuarterFormat(), (quarter + 1).toString());
        }
        return '';
    }
    static _formatDateEx(value, formatInfo) {
        var that = this, format = formatInfo.format.toLowerCase(), dateType = formatInfo.dateType, time, index, dateStr;
        if (!_utils_1.type.isDefined(value)) {
            return '';
        }
        if (dateType !== 'num' || format === 'dayofweek') {
            switch (format) {
                case 'monthyear':
                    return date_2.default.format(value, 'monthandyear');
                case 'quarteryear':
                    return that._getQuarterString(value, 'QQ') + ' ' + value.getFullYear();
                case 'daymonthyear':
                case 'weekyear':
                    return date_2.default.format(value, dateType + 'Date');
                case 'datehour':
                    time = new Date(value.getTime());
                    time.setMinutes(0);
                    dateStr = dateType === 'timeOnly' ? '' : date_2.default.format(value, dateType + 'Date');
                    return dateType === 'timeOnly' ? date_2.default.format(time, 'shorttime') : dateStr + ' ' + date_2.default.format(time, 'shorttime');
                case 'datehourminute':
                    dateStr = dateType === 'timeOnly' ? '' : date_2.default.format(value, dateType + 'Date');
                    return dateType === 'timeOnly' ? date_2.default.format(value, 'shorttime') : dateStr + ' ' + date_2.default.format(value, 'shorttime');
                case 'datehourminutesecond':
                    dateStr = dateType === 'timeOnly' ? '' : date_2.default.format(value, dateType + 'Date');
                    return dateType === 'timeOnly' ? date_2.default.format(value, 'longtime') : dateStr + ' ' + date_2.default.format(value, 'longtime');
                case 'year':
                    dateStr = value.toString();
                    return (dateType === 'abbr') ? dateStr.slice(2, 4) : dateStr;
                case 'dateyear':
                    return (dateType === 'abbr') ? date_2.default.format(value, 'shortyear') : date_2.default.format(value, 'year');
                case 'quarter':
                    return string_1.format(that.defaultQuarterFormat(), value.toString());
                case 'month':
                    index = value - 1;
                    return date_2.default.getMonthNames(dateType === 'abbr' ? 'abbreviated' : undefined)[index];
                case 'hour':
                    if (dateType === 'long') {
                        time = new Date();
                        time.setHours(value);
                        time.setMinutes(0);
                        return date_2.default.format(time, 'shorttime');
                    }
                    return value.toString();
                case 'dayofweek':
                    index = _utils_1.type.isString(value) ? ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].indexOf(value) : value;
                    if (dateType !== 'num') {
                        return date_2.default.getDayNames(dateType === 'abbr' ? 'abbreviated' : undefined)[index];
                    }
                    return ((index - date_2.default.firstDayOfWeekIndex() + 1 + 7) % 8).toString();
                default:
                    return value.toString();
            }
        }
        else {
            return value.toString();
        }
    }
    static _getMinimalPossibleValue(formatType, precision) {
        var maxPrecision = precision + 1;
        if (formatType === 'percent') {
            maxPrecision += 2;
        }
        return Math.pow(10, -maxPrecision);
    }
    static _formatNumberEx(value, formatInfo) {
        var that = this, formatType = formatInfo.format.toLowerCase(), formatSettings = that._getUnitFormatSettings(value, formatInfo), result = '', config;
        if (!_utils_1.type.isDefined(value)) {
            return '';
        }
        if (['currency', 'percent', 'fixedpoint'].indexOf(formatType) !== -1
            && formatSettings.precision >= 0
            && Math.abs(value) < that._getMinimalPossibleValue(formatType, formatSettings.precision)) {
            value = 0;
        }
        value = that._getNumberByPower(value, formatSettings.unitPower, 1000);
        if (['fixedpoint', 'currency', 'percent'].indexOf(formatType) !== -1) {
            config = that._generateNumericFormatConfig(Object.assign(Object.assign({}, formatSettings), { significantDigits: formatInfo.significantDigits, signsAfterPointCount: that._countSignsAfterPoint(value, formatType), formatType: formatType }), value);
        }
        switch (formatType) {
            case 'general':
                if (value === 0) {
                    return '0';
                }
                else if (Math.abs(value) < 0.0001) {
                    return this._applyNumberFormat(value, { type: 'exponential', precision: 2, minimumSignificantDigits: 1, maximumSignificantDigits: 20 });
                }
                else {
                    return this._applyNumberFormat(value, { useGrouping: false, minimumSignificantDigits: 1, maximumSignificantDigits: 20 });
                }
            case 'decimal':
                result = this._applyNumberFormat(value, that._normalizeFormatConfig(formatType, formatSettings.precision, value));
                break;
            case 'fixedpoint':
                result = this._applyNumberFormat(value, config);
                break;
            case 'currency':
                config.currency = formatInfo.currency || config_1.default().defaultCurrency;
                result = this._applyNumberFormat(value, config);
                break;
            case 'percent':
                config.style = 'percent';
                result = this._applyNumberFormat(value, config);
                break;
            case 'exponential':
                return this._applyNumberFormat(value, { type: 'exponential', precision: formatSettings.precision });
            default:
                throw "Illegal numeric format: '" + formatType + "'";
        }
        result = that._insertUnitPostfix(result, formatSettings.unitPower);
        return (formatInfo.plus && value > 0 ? '+' : '') + result;
    }
    static _getUnitFormatSettings(value, formatInfo) {
        var unitPower = formatInfo.unitPower || 0, precision = formatInfo.precision || 0, includeGroupSeparator = formatInfo.includeGroupSeparator || false, showTrailingZeros = formatInfo.showTrailingZeros === undefined ? true : formatInfo.showTrailingZeros, significantDigits = formatInfo.significantDigits || 1, absValue;
        if (unitPower.toString().toLowerCase() === 'auto') {
            showTrailingZeros = false;
            absValue = Math.abs(value);
            if (significantDigits < 1)
                significantDigits = 1;
            if (absValue >= 1000000000) {
                unitPower = 3;
                absValue /= 1000000000;
            }
            else if (absValue >= 1000000) {
                unitPower = 2;
                absValue /= 1000000;
            }
            else if (absValue >= 1000) {
                unitPower = 1;
                absValue /= 1000;
            }
            else
                unitPower = 0;
            if (absValue === 0)
                precision = 0;
            else if (absValue < 1) {
                precision = significantDigits;
                var smallValue = Math.pow(10, -significantDigits);
                while (absValue < smallValue) {
                    smallValue /= 10;
                    precision++;
                }
            }
            else {
                if (absValue >= 100)
                    precision = significantDigits - 3;
                else if (absValue >= 10)
                    precision = significantDigits - 2;
                else
                    precision = significantDigits - 1;
            }
        }
        if (precision < 0) {
            precision = 0;
        }
        return {
            unitPower: unitPower,
            precision: precision,
            showTrailingZeros: showTrailingZeros,
            includeGroupSeparator: includeGroupSeparator
        };
    }
    static _insertUnitPostfix(formattedNumber, unitPower) {
        var lastDigitReg = /(\d)([^\d]*)$/;
        return unitPower > 0
            ? formattedNumber.replace(lastDigitReg, '$1' + _default_1.getLocalizationById(this.defaultLargeNumberFormatPostfixes[unitPower]) + '$2')
            : formattedNumber;
    }
    static _generateNumericFormatConfig(settings, value) {
        var that = this, config;
        if (!settings.showTrailingZeros) {
            settings.precision = Math.min(settings.precision, settings.signsAfterPointCount);
        }
        config = that._normalizeFormatConfig(settings.formatType, settings.precision, value);
        config.useGrouping = settings.includeGroupSeparator;
        if (settings.significantDigits && value) {
            _jquery_helpers_1.extend(config, {
                minimumSignificantDigits: settings.showTrailingZeros ? settings.significantDigits : 1,
                maximumSignificantDigits: settings.significantDigits
            });
        }
        return config;
    }
    static _countSignsAfterPoint(num, formatType) {
        var strNum = String(num), pointPos = strNum.indexOf('.');
        if (formatType == 'percent') {
            pointPos += 2;
        }
        if (pointPos < 0) {
            return 0;
        }
        return strNum.substr(pointPos + 1, strNum.length).length;
    }
    static _excludeTrailingZeros(strValue, floatingSymbol) {
        var floatingIndex = strValue.indexOf(floatingSymbol), stopIndex, i;
        if (floatingIndex < 0)
            return strValue;
        stopIndex = strValue.length;
        for (i = stopIndex - 1; i >= floatingIndex && (strValue[i] === '0' || i === floatingIndex); i--) {
            stopIndex--;
        }
        return strValue.substring(0, stopIndex);
    }
    static _normalizeFormatConfig(format, precision, value) {
        var config = number_1.default._normalizeFormatConfig(format, {
            precision,
            useCurrencyAccountingStyle: legacy_settings_1.DashboardPrivateSettings.useCurrencyAccountingStyle
        }, value);
        if (format === 'decimal') {
            config = Object.assign(Object.assign({}, config), {
                minimumIntegerDigits: precision || 1,
                useGrouping: false,
                maximumFractionDigits: 0,
                round: value < 0 ? 'ceil' : 'floor'
            });
        }
        else {
            config = Object.assign(Object.assign({}, config), {
                minimumFractionDigits: precision,
                maximumFractionDigits: precision
            });
        }
        return config;
    }
    static _getNumberByPower(number, power, base) {
        var result = number;
        while (power > 0) {
            result = result / base;
            power--;
        }
        while (power < 0) {
            result = result * base;
            power++;
        }
        return result;
    }
}
exports.DashboardFormatHelper = DashboardFormatHelper;
DashboardFormatHelper.defaultLargeNumberFormatPostfixes = {
    1: 'DashboardStringId.NumericFormatUnitSymbolThousands',
    2: 'DashboardStringId.NumericFormatUnitSymbolMillions',
    3: 'DashboardStringId.NumericFormatUnitSymbolBillions',
    4: 'T'
};
DashboardFormatHelper.romanDigits = ['I', 'II', 'III', 'IV'];


/***/ }),

/***/ 93687:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._convertNumericUnit = exports._convertNumericFormat = exports._getSyntheticDateTimeGroupInterval = exports._convertToDateFormat = exports._convertToNumberFormat = exports.convertToFormat = exports.calculatePrecision = exports.calculateUnitPower = exports.getAxisFormat = exports.formatAxisValue = exports.formatScientificAxisValue = exports.formatPercentValue = exports.formatObject = exports.formatDateTime = exports.formatNumeric = exports.constructIntervalFilterText = exports.formatFilterValue = exports.formatByFormatInfo = exports.format = exports._types = exports.defaultScientificFormat = exports.defaultPercentFormat = exports.defaultNumericFormat = void 0;
const string_1 = __webpack_require__(36306);
const legacy_settings_1 = __webpack_require__(42649);
const _default_1 = __webpack_require__(65855);
const _format_helper_1 = __webpack_require__(27893);
const _localizer_1 = __webpack_require__(88084);
const _utils_1 = __webpack_require__(7590);
exports.defaultNumericFormat = {
    format: 'fixedPoint',
    unitPower: 'auto',
    precision: 0,
    significantDigits: 3
};
exports.defaultPercentFormat = {
    format: 'percent',
    unitPower: 0,
    precision: 2,
    significantDigits: 0,
    showTrailingZeros: false
};
exports.defaultScientificFormat = {
    format: 'exponential',
    precision: 2
};
exports._types = {
    Abbreviated: 'abbr',
    Full: 'full',
    Long: 'long',
    Numeric: 'num',
    Short: 'short',
    TimeOnly: 'timeOnly'
};
function format(value, formatViewModel) {
    var str = _localizer_1.localizer.getPredefinedString(value);
    if (!_utils_1.type.isDefined(str)) {
        var numericFormat = formatViewModel && formatViewModel.NumericFormat, dateTimeFormat = formatViewModel && formatViewModel.DateTimeFormat;
        if (numericFormat) {
            str = this.formatNumeric(value, numericFormat);
        }
        else {
            str = !dateTimeFormat ? this.formatObject(value) : this.formatDateTime(value, dateTimeFormat);
        }
    }
    return str;
}
exports.format = format;
function formatByFormatInfo(value, formatInfo) {
    var str = _localizer_1.localizer.getPredefinedString(value);
    if (!_utils_1.type.isDefined(str)) {
        return _format_helper_1.DashboardFormatHelper.format(value, formatInfo);
    }
    return str;
}
exports.formatByFormatInfo = formatByFormatInfo;
function formatFilterValue(filterValue) {
    if (filterValue.Value !== undefined) {
        return this.format(filterValue.Value, filterValue.Format);
    }
    let rangeLeft;
    let rangeRight;
    if (_utils_1.type.isDefined(filterValue.RangeLeft)) {
        rangeLeft = this.format(filterValue.RangeLeft, filterValue.Format);
    }
    if (_utils_1.type.isDefined(filterValue.RangeRight)) {
        rangeRight = this.format(filterValue.RangeRight, filterValue.Format);
    }
    return constructIntervalFilterText({ left: rangeLeft, right: rangeRight });
}
exports.formatFilterValue = formatFilterValue;
function constructIntervalFilterText(rangeText) {
    let rangePattern = _default_1.getLocalizationById('DashboardStringId.FromToDatePeriodCaption');
    let fromPattern = _default_1.getLocalizationById('DashboardStringId.FromDatePeriodCaption');
    let toPattern = _default_1.getLocalizationById('DashboardStringId.ToDatePeriodCaption');
    if (rangeText.left && rangeText.right) {
        if (rangeText.right != rangeText.left)
            return string_1.format(rangePattern, rangeText.left, rangeText.right);
        else
            return rangeText.left;
    }
    if (rangeText.left) {
        return string_1.format(fromPattern, rangeText.left);
    }
    if (rangeText.right) {
        return string_1.format(toPattern, rangeText.right);
    }
}
exports.constructIntervalFilterText = constructIntervalFilterText;
function formatNumeric(value, numericFormatViewModel) {
    if (!numericFormatViewModel) {
        return value.toString();
    }
    else {
        var format = this._convertToNumberFormat(numericFormatViewModel);
        return _format_helper_1.DashboardFormatHelper.format(value, format);
    }
}
exports.formatNumeric = formatNumeric;
function formatDateTime(value, dateFormatViewModel) {
    var format = this._convertToDateFormat(dateFormatViewModel);
    return _format_helper_1.DashboardFormatHelper.format(value, format);
}
exports.formatDateTime = formatDateTime;
function formatObject(value) {
    return value == null ? '' : value.toString();
}
exports.formatObject = formatObject;
function formatPercentValue(value) {
    return _format_helper_1.DashboardFormatHelper.format(value, this.defaultPercentFormat);
}
exports.formatPercentValue = formatPercentValue;
function formatScientificAxisValue(value) {
    return _format_helper_1.DashboardFormatHelper.format(value, this.defaultScientificFormat);
}
exports.formatScientificAxisValue = formatScientificAxisValue;
function formatAxisValue(value, axisMin, axisMax) {
    return _format_helper_1.DashboardFormatHelper.format(value, this.getAxisFormat(axisMin, axisMax));
}
exports.formatAxisValue = formatAxisValue;
function getAxisFormat(axisMin, axisMax) {
    return {
        format: 'fixedPoint',
        unitPower: this.calculateUnitPower(axisMin, axisMax),
        precision: this.calculatePrecision(axisMin, axisMax),
        significantDigits: 0,
        showTrailingZeros: false
    };
}
exports.getAxisFormat = getAxisFormat;
function calculateUnitPower(axisMin, axisMax) {
    var range = axisMax - axisMin;
    if (range >= 1000000000)
        return 3;
    if (range >= 1000000)
        return 2;
    if (range >= 1000)
        return 1;
    return 0;
}
exports.calculateUnitPower = calculateUnitPower;
function calculatePrecision(axisMin, axisMax) {
    var precision = 0, range = axisMax - axisMin;
    if (range > 0) {
        var smallValue = Math.pow(10, -precision);
        while (range < smallValue) {
            smallValue /= 10;
            precision++;
        }
    }
    return precision + 2;
}
exports.calculatePrecision = calculatePrecision;
function convertToFormat(formatViewModel) {
    if (formatViewModel) {
        let numericFormat = formatViewModel.NumericFormat;
        if (numericFormat)
            return this._convertToNumberFormat(numericFormat);
        let dateTimeFormat = formatViewModel.DateTimeFormat;
        if (dateTimeFormat)
            return this._convertToDateFormat(dateTimeFormat);
    }
    return null;
}
exports.convertToFormat = convertToFormat;
function _convertToNumberFormat(numericFormatViewModel) {
    var formatInfo = null, formatType = numericFormatViewModel ? numericFormatViewModel.FormatType : undefined, unit = numericFormatViewModel ? numericFormatViewModel.Unit : undefined;
    if (formatType === 'Custom') {
        if (legacy_settings_1.DashboardPrivateSettings.customNumericFormatMode !== 'Disabled') {
            return {
                type: numericFormatViewModel.CustomFormatString,
                unlimitedIntegerDigits: true
            };
        }
        else {
            formatType = 'Auto';
        }
    }
    if (formatType === 'General') {
        formatInfo = { format: 'general' };
    }
    else {
        formatInfo = {};
        formatInfo.format = this._convertNumericFormat(formatType);
        formatInfo.currency = numericFormatViewModel.Currency;
        if (formatInfo.currency === _format_helper_1.invariantCurrencyIdentifier) {
            console.log('A web server does not support a currency specified for the dashboard. Refer to https://go.devexpress.com/dashboardInvariantCurrency.aspx to learn more.');
        }
        if (numericFormatViewModel.IncludeGroupSeparator) {
            formatInfo.includeGroupSeparator = numericFormatViewModel.IncludeGroupSeparator;
        }
        if (numericFormatViewModel.ForcePlusSign) {
            formatInfo.plus = numericFormatViewModel.ForcePlusSign;
        }
        formatInfo.precision = numericFormatViewModel.Precision;
        if (unit && unit === 'Auto' && formatType !== 'Percent') {
            formatInfo.significantDigits = numericFormatViewModel.SignificantDigits;
        }
        if (unit && formatType === 'Number' || formatType === 'Currency') {
            formatInfo.unitPower = this._convertNumericUnit(unit);
        }
        formatInfo.dateType = null;
    }
    return formatInfo;
}
exports._convertToNumberFormat = _convertToNumberFormat;
function _convertToDateFormat(dateFormatViewModel) {
    if (dateFormatViewModel) {
        let weekOptions = {};
        if (_utils_1.type.isDefined(dateFormatViewModel.FirstDayOfWeek))
            weekOptions.firstDayOfWeek = dateFormatViewModel.FirstDayOfWeek;
        if (_utils_1.type.isDefined(dateFormatViewModel.CalendarWeekRule))
            weekOptions.calendarWeekRule = dateFormatViewModel.CalendarWeekRule;
        let syntheticGroupInterval = this._getSyntheticDateTimeGroupInterval(dateFormatViewModel.GroupInterval, dateFormatViewModel.ExactDateFormat);
        switch (syntheticGroupInterval) {
            case 'WeekYear':
                return Object.assign(Object.assign({}, weekOptions), { format: 'weekYear', dateType: dateFormatViewModel.DateFormat === 'Long' ? this._types.Long : this._types.Short });
            case 'MonthYear':
                return { format: 'monthYear', dateType: this._types.Full };
            case 'QuarterYear':
                return { format: 'quarterYear', dateType: this._types.Full };
            case 'DayMonthYear':
                return {
                    format: 'dayMonthYear',
                    dateType: dateFormatViewModel.DateFormat === 'Long' ? this._types.Long : this._types.Short
                };
            case 'DateHour':
                if (dateFormatViewModel.DateHourFormat === 'Long')
                    return { format: 'dateHour', dateType: this._types.Long };
                else
                    return { format: 'dateHour', dateType: dateFormatViewModel.DateHourFormat === 'Short' ? this._types.Short : this._types.TimeOnly };
            case 'DateHourMinute':
                if (dateFormatViewModel.DateHourMinuteFormat === 'Long')
                    return { format: 'dateHourMinute', dateType: this._types.Long };
                else
                    return { format: 'dateHourMinute', dateType: dateFormatViewModel.DateHourMinuteFormat === 'Short' ? this._types.Short : this._types.TimeOnly };
            case 'DateHourMinuteSecond':
                if (dateFormatViewModel.DateTimeFormat === 'Long')
                    return { format: 'dateHourMinuteSecond', dateType: this._types.Long };
                else
                    return { format: 'dateHourMinuteSecond', dateType: dateFormatViewModel.DateTimeFormat === 'Short' ? this._types.Short : this._types.TimeOnly };
            case 'Year':
                return {
                    format: 'year',
                    dateType: dateFormatViewModel.YearFormat === 'Abbreviated' ? this._types.Abbreviated : this._types.Full
                };
            case 'DateYear':
                return {
                    format: 'dateYear',
                    dateType: dateFormatViewModel.YearFormat === 'Abbreviated' ? this._types.Abbreviated : this._types.Full
                };
            case 'Quarter':
                if (dateFormatViewModel.QuarterFormat === 'Numeric')
                    return { format: 'quarter', dateType: this._types.Numeric };
                else
                    return { format: 'quarter', dateType: this._types.Full };
            case 'Month':
                if (dateFormatViewModel.MonthFormat === 'Numeric')
                    return { format: 'month', dateType: this._types.Numeric };
                else
                    return { format: 'month', dateType: dateFormatViewModel.MonthFormat === 'Abbreviated' ? this._types.Abbreviated : this._types.Full };
            case 'Hour':
                return {
                    format: 'hour',
                    dateType: dateFormatViewModel.HourFormat === 'Long' ? this._types.Long : this._types.Short
                };
            case 'DayOfWeek':
                if (dateFormatViewModel.DayOfWeekFormat === 'Numeric')
                    return { format: 'dayOfWeek', dateType: this._types.Numeric };
                else
                    return { format: 'dayOfWeek', dateType: dateFormatViewModel.DayOfWeekFormat === 'Abbreviated' ? this._types.Abbreviated : this._types.Full };
            default:
                return { format: dateTimeGroupIntervalToCamelCase[dateFormatViewModel.GroupInterval], dateType: this._types.Numeric };
        }
    }
    else {
        return null;
    }
}
exports._convertToDateFormat = _convertToDateFormat;
function _getSyntheticDateTimeGroupInterval(groupInterval, exactDateFormat) {
    if (groupInterval != 'None')
        return groupInterval;
    switch (exactDateFormat) {
        case 'Year':
            return 'DateYear';
        case 'Quarter':
            return 'QuarterYear';
        case 'Month':
            return 'MonthYear';
        case 'Day':
            return 'DayMonthYear';
        case 'Hour':
            return 'DateHour';
        case 'Minute':
            return 'DateHourMinute';
        case 'Second':
            return 'DateHourMinuteSecond';
        default:
            return null;
    }
}
exports._getSyntheticDateTimeGroupInterval = _getSyntheticDateTimeGroupInterval;
function _convertNumericFormat(formatType) {
    switch (formatType) {
        case 'Number': return 'fixedPoint';
        case 'Currency': return 'currency';
        case 'Scientific': return 'exponential';
        case 'Percent': return 'percent';
        default: return undefined;
    }
}
exports._convertNumericFormat = _convertNumericFormat;
function _convertNumericUnit(numericUnit) {
    switch (numericUnit) {
        case 'Auto': return 'auto';
        case 'Thousands': return 1;
        case 'Millions': return 2;
        case 'Billions': return 3;
        default: return 0;
    }
}
exports._convertNumericUnit = _convertNumericUnit;
let dateTimeGroupIntervalToCamelCase = {
    'Year': 'year',
    'Quarter': 'quarter',
    'Month': 'month',
    'Day': 'day',
    'Hour': 'hour',
    'Minute': 'minute',
    'Second': 'second',
    'DayOfYear': 'dayOfYear',
    'DayOfWeek': 'dayOfWeek',
    'WeekOfYear': 'weekOfYear',
    'WeekOfMonth': 'weekOfMonth',
    'WeekYear': 'weekYear',
    'MonthYear': 'monthYear',
    'QuarterYear': 'quarterYear',
    'DayMonthYear': 'dayMonthYear',
    'DateHour': 'dateHour',
    'DateHourMinute': 'dateHourMinute',
    'DateHourMinuteSecond': 'dateHourMinuteSecond',
    'None': 'none'
};


/***/ }),

/***/ 97116:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gaugeRangeCalculator = void 0;
const _utils_1 = __webpack_require__(7590);
class gaugeRangeCalculator {
    constructor(options) {
        this._values = options.values;
        this._gaugeViewType = options.gaugeModel.Type;
        this._customMin = options.gaugeModel.MinValue;
        this._customMax = options.gaugeModel.MaxValue;
        this._minDefined = this._customMin != null;
        this._maxDefined = this._customMax != null;
        this._defineMinMaxTicks();
    }
    getGaugeRange() {
        this._defineMinMax();
        this._setRangeStart();
        this._extendRange();
        var left = Math.min(this._min, this._max), right = Math.max(this._min, this._max), rangeLength = right - left, scaleReversed = this._min > this._max, majorTickCount, minorTickCount, stepCount, step, delta, fit, currentStep, currentDelta, currentFit;
        if (rangeLength === 0) {
            majorTickCount = 1;
            minorTickCount = 0;
        }
        else {
            stepCount = this._minTickCount - 1;
            step = this._chooseMultiplier(rangeLength / stepCount);
            delta = step * stepCount - rangeLength;
            fit = this._isFit(left, right, step, stepCount);
            for (var i = stepCount + 1; i < this._maxTickCount; i++) {
                currentStep = this._chooseMultiplier(rangeLength / i);
                currentDelta = currentStep * i - rangeLength;
                currentFit = this._isFit(left, right, currentStep, i);
                if (currentFit && (currentDelta < delta || !fit)) {
                    delta = currentDelta;
                    step = currentStep;
                    fit = currentFit;
                    stepCount = i;
                }
            }
            left = this._getLeft(left, step);
            right = this._getRight(right, step);
            this._min = !scaleReversed ? left : right;
            this._max = !scaleReversed ? right : left;
            majorTickCount = stepCount + 1;
            if (step % 5 === 0)
                minorTickCount = 4;
            else if (step % 3 === 0)
                minorTickCount = 2;
            else
                minorTickCount = 3;
            return {
                minorTickCount: minorTickCount,
                majorTickCount: majorTickCount,
                min: this._min,
                max: this._max
            };
        }
    }
    _getLeft(left, step) {
        var sign = left > 0 ? 1 : -1;
        if (this._equalSign && left > 0)
            return Math.floor(Math.abs(left) / step) * step * sign;
        else
            return Math.ceil(Math.abs(left) / step) * step * sign;
    }
    _getRight(right, step) {
        var sign = right > 0 ? 1 : -1;
        if (this._equalSign && right < 0)
            return Math.floor(Math.abs(right) / step) * step * sign;
        else
            return Math.ceil(Math.abs(right) / step) * step * sign;
    }
    _isFit(left, right, step, tickCount) {
        var leftAbs = Math.abs(left), rigthAbs = Math.abs(right), isFit = false;
        if (!this._signsEqual(left, right)) {
            isFit = (Math.ceil(leftAbs / step) + Math.ceil(rigthAbs / step)) <= tickCount;
        }
        else {
            var minAbs = Math.min(leftAbs, rigthAbs), maxAbs = Math.max(leftAbs, rigthAbs);
            isFit = Math.ceil(maxAbs / step) - Math.floor(minAbs / step) <= tickCount;
        }
        return isFit;
    }
    _extendRange() {
        var that = this, extendMin = function (coef) {
            if (!that._minDefined)
                that._min *= coef;
        }, extendMax = function (coef) {
            if (!that._maxDefined)
                that._max *= coef;
        };
        if (this._equalSign) {
            if (Math.abs(this._min) < Math.abs(this._max)) {
                extendMin(0.95);
                extendMax(1.05);
            }
            else {
                extendMin(1.05);
                extendMax(0.95);
            }
        }
        else {
            extendMin(1.05);
            extendMax(1.05);
        }
        if (this._min === this._max) {
            if (this._min !== 0)
                this._max *= 1.4;
            else
                this._max = 1;
        }
    }
    _setRangeStart() {
        if (this._equalSign) {
            if (this._min === this._max) {
                if (this._min > 0) {
                    if (!this._minDefined)
                        this._min = 0;
                }
                else {
                    if (!this._maxDefined)
                        this._max = 0;
                }
            }
            if (Math.abs(this._min) <= Math.abs(this._max)) {
                if (!this._minDefined)
                    this._min = 0;
            }
            else {
                if (!this._maxDefined)
                    this._max = 0;
            }
        }
    }
    _defineMinMax() {
        if (this._minDefined)
            this._min = this._customMin;
        else
            this._min = this._values.length > 0 ? Math.min.apply(Math, this._values) : 0;
        if (this._maxDefined)
            this._max = this._customMax;
        else
            this._max = this._values.length > 0 ? Math.max.apply(Math, this._values) : 1;
        this._equalSign = this._signsEqual(this._min, this._max);
    }
    _signsEqual(number1, number2) {
        return (number1 >= 0 && number2 >= 0) || (number1 < 0 && number2 < 0);
    }
    _defineMinMaxTicks() {
        switch (this._gaugeViewType) {
            case _utils_1.gaugeViewType.CircularFull:
                this._minTickCount = 6;
                this._maxTickCount = 9;
                break;
            case _utils_1.gaugeViewType.LinearHorizontal:
                this._minTickCount = 3;
                this._maxTickCount = 3;
                break;
            default:
                this._minTickCount = 4;
                this._maxTickCount = 6;
                break;
        }
    }
    _chooseMultiplier(delta) {
        var multipliers = [1, 2, 3, 5], result, exp, scale, normDelta, newResult, i;
        if (delta > 1) {
            for (var factor = 1;; factor *= 10) {
                for (i = 0; i < multipliers.length; i++) {
                    result = multipliers[i] * factor;
                    if (delta <= result)
                        return result;
                }
            }
        }
        else {
            result = 10;
            exp = Math.floor(Math.log(Math.abs(delta)) / Math.LN10);
            scale = Math.pow(10, -exp);
            normDelta = delta * scale;
            for (i = multipliers.length - 1; i >= 0; i--) {
                newResult = multipliers[i];
                if (normDelta > newResult) {
                    break;
                }
                result = newResult;
            }
            return result / scale;
        }
    }
}
exports.gaugeRangeCalculator = gaugeRangeCalculator;


/***/ }),

/***/ 73022:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GridBarCalculator = void 0;
var startPercent = 0.15;
class GridBarCalculator {
    constructor(showZeroLevel) {
        this._valueItems = new Map();
        this._alwaysShowZeroLevel = showZeroLevel;
        this._normalizedValues = new Map();
        this._range = null;
        this._min = null;
        this._max = null;
        this._zeroPosition = null;
        this._normalizationData = null;
    }
    addValue(indexRow, valueItem) {
        this._valueItems.set(indexRow, valueItem);
    }
    getNormalizedValue(index) {
        if (this._normalizedValues.get(index))
            return this._normalizedValues.get(index);
        var normalizedValue = this._normalizeValue(this._valueItems.get(index).getValue());
        this._normalizedValues.set(index, normalizedValue);
        return normalizedValue;
    }
    getZeroPosition() {
        return this._zeroPosition;
    }
    initialize(min, max) {
        this._calcMinMax(min, max);
        this._calcRange();
        this._calcZeroPosition();
        this._calcNormalizationData();
    }
    _normalizeValue(value) {
        var showZero = this._normalizationData.showZero, minimum = this._normalizationData.minimum, ratio = this._normalizationData.ratio, range = this._normalizationData.range, sign = value >= 0 ? 1 : -1;
        return showZero || ratio === 0 ? value / range : sign * (startPercent + ratio * (Math.abs(value) - minimum));
    }
    _calcMinMax(min, max) {
        this._min = min;
        this._max = max;
    }
    _calcRange() {
        var min = this._min, minAbs = Math.abs(min), max = this._max, maxAbs = Math.abs(max);
        this._range = Math.max(max - min, minAbs, maxAbs);
    }
    _calcZeroPosition() {
        var min = this._min, minAbs = Math.abs(min), max = this._max, range = this._range;
        if (min < 0)
            if (max < 0)
                this._zeroPosition = 1;
            else {
                this._zeroPosition = range !== 0 ? minAbs / range : 0;
            }
        else
            this._zeroPosition = 0;
    }
    _calcNormalizationData() {
        var range = this._range || 1, min = this._min, max = this._max, equalSign = (min < 0 && max < 0) || (min >= 0 && max >= 0), minAbs = Math.abs(min), maxAbs = Math.abs(max), minimum = Math.min(minAbs, maxAbs), maximum = Math.max(minAbs, maxAbs), delta = maximum - minimum, ratio = delta !== 0 ? (1 - startPercent) / delta : 0, showZero = !equalSign || this._alwaysShowZeroLevel || (equalSign && minimum / maximum <= startPercent);
        this._normalizationData = {
            showZero: showZero,
            minimum: minimum,
            ratio: ratio,
            range: range
        };
    }
}
exports.GridBarCalculator = GridBarCalculator;


/***/ }),

/***/ 77931:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HashsetWrapper = void 0;
const _utils_1 = __webpack_require__(7590);
class HashsetWrapper {
    constructor(array) {
        this.FNV_prime_32 = 16777619;
        this.FNV_offset_basis_32 = 2166136261;
        this.hashSet = {};
        array.forEach((item, index) => {
            var hash = this.getHash(item);
            var array = this.hashSet[hash];
            if (array == null) {
                array = [];
                this.hashSet[hash] = array;
            }
            array.push({ index: index, item: item });
        });
    }
    contains(item) {
        return this.getItem(item) != null;
    }
    getIntersection(array) {
        var result = [];
        array.forEach(item => {
            if (this.contains(item))
                result.push(item);
        });
        return result;
    }
    indexOf(item) {
        var found = this.getItem(item);
        return found != null ? found.index : -1;
    }
    getItem(item) {
        var value = this.hashSet[this.getHash(item)];
        return value != null ? value.filter(val => _utils_1.arrayEquals(val.item, item))[0] : undefined;
    }
    getHash(obj) {
        if (Array.isArray(obj)) {
            return this.toHash(obj, (item) => this.getHash(item));
        }
        else {
            return this.toHash(String(obj).split(''), (ch) => ch.charCodeAt(0));
        }
    }
    toHash(arr, convertValue) {
        return arr.reduce((prev, curr) => {
            return (prev ^ convertValue(curr)) * this.FNV_prime_32;
        }, this.FNV_offset_basis_32);
    }
}
exports.HashsetWrapper = HashsetWrapper;


/***/ }),

/***/ 59384:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.jqueryOffset = exports.jqueryQueryParam = exports.jqueryWhenArray = exports.jqueryWhen = exports.createJQueryDeferred = exports.createJQueryCallbacks = exports.closest = exports.isVisible = exports.accessJQueryData = exports.wrapInner = exports.getOuterHeight = exports.getOuterWidth = exports.getHeight = exports.getWidth = exports.isPlainObject = exports.deepExtend = exports.extend = exports.wrapPublicElement = exports.$wrap = exports.$unwrap = exports.$promiseAdapter = void 0;
const config_1 = __webpack_require__(39662);
const $ = __webpack_require__(65311);
const $promiseAdapter = (promise) => promise;
exports.$promiseAdapter = $promiseAdapter;
const $unwrap = (element) => {
    if (element.jquery || element.dxRenderer) {
        return element[0];
    }
    else {
        return element;
    }
};
exports.$unwrap = $unwrap;
const $wrap = (element) => $.fn.constructor(element);
exports.$wrap = $wrap;
const wrapPublicElement = (element) => (config_1.default().useJQuery ? exports.$wrap(element) : element);
exports.wrapPublicElement = wrapPublicElement;
const extend = (target, source1, ...sources) => $.extend(target, source1, ...sources);
exports.extend = extend;
const deepExtend = (target, ...sources) => $.extend(true, target, ...sources);
exports.deepExtend = deepExtend;
const isPlainObject = (object) => $.isPlainObject(object);
exports.isPlainObject = isPlainObject;
const getWidth = (element) => $.fn.constructor(element).width();
exports.getWidth = getWidth;
const getHeight = (element) => $.fn.constructor(element).height();
exports.getHeight = getHeight;
const getOuterWidth = (element) => $.fn.constructor(element).outerWidth();
exports.getOuterWidth = getOuterWidth;
const getOuterHeight = (element) => $.fn.constructor(element).outerHeight();
exports.getOuterHeight = getOuterHeight;
const wrapInner = (element, wrappingElement) => $.fn.constructor(element).wrapInner(wrappingElement);
exports.wrapInner = wrapInner;
const accessJQueryData = function (element, key, value) {
    if (arguments.length > 2) {
        $.fn.constructor(element).data(key, value);
    }
    else {
        return $.fn.constructor(element).data(key);
    }
};
exports.accessJQueryData = accessJQueryData;
const isVisible = (element) => $.fn.constructor(element).is(':visible');
exports.isVisible = isVisible;
const closest = (element, css) => {
    var node = element;
    var matches = node.matches || node.matchesSelector || node.webkitMatchesSelector || node.mozMatchesSelector || node.msMatchesSelector || node.oMatchesSelector;
    while (node) {
        if (matches.apply(node, [css]))
            return node;
        node = closestParentElement(node);
    }
    return null;
};
exports.closest = closest;
const closestParentElement = (node) => {
    while (node && !node.parentElement) {
        node = node.parentNode;
    }
    return node ? node.parentElement : null;
};
const createJQueryCallbacks = () => $.Callbacks();
exports.createJQueryCallbacks = createJQueryCallbacks;
const createJQueryDeferred = () => $.Deferred();
exports.createJQueryDeferred = createJQueryDeferred;
const jqueryWhen = (...promises) => $.when(...promises);
exports.jqueryWhen = jqueryWhen;
const jqueryWhenArray = (promises) => $.when.apply($.when, promises);
exports.jqueryWhenArray = jqueryWhenArray;
const jqueryQueryParam = (value) => $.param(value);
exports.jqueryQueryParam = jqueryQueryParam;
const jqueryOffset = (element) => $.fn.constructor(element).offset();
exports.jqueryOffset = jqueryOffset;


/***/ }),

/***/ 19696:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.listSource = void 0;
const _formatter_1 = __webpack_require__(93687);
class listSource {
    constructor(dataSource, dataMembers) {
        this.dataSource = this._wrapIfRequired(dataSource, dataMembers);
        this.dataMembers = dataMembers;
        if (this.dataSource && this.dataMembers) {
            this.rowCount = this.dataSource.length;
            this.columnCount = this.dataMembers.length;
        }
        else {
            this.dataSource = [];
            this.dataMembers = [];
            this.rowCount = 0;
            this.columnCount = 0;
        }
    }
    _wrapIfRequired(dataSource, dataMembers) {
        var dataRow, dataSourceWrapper = [], isWrapRequired = dataSource && dataSource.length > 0 && Array.isArray(dataSource) && Array.isArray(dataSource[0]);
        if (isWrapRequired) {
            for (var i = 0; i < dataSource.length; i++) {
                dataRow = dataSource[i];
                if (dataMembers && dataRow && dataRow.length === dataMembers.length) {
                    dataSourceWrapper[i] = {};
                    for (var j = 0; j < dataRow.length; j++) {
                        dataSourceWrapper[i][dataMembers[j]] = dataRow[j];
                    }
                }
                else {
                    isWrapRequired = false;
                    break;
                }
            }
        }
        return isWrapRequired ? dataSourceWrapper : dataSource;
    }
    getRowValue(rowIndex, dataMember) {
        return this.dataSource[rowIndex][dataMember];
    }
    getFormattedRowValue(rowIndex, dataMember, formatInfo) {
        var value = this.getRowValue(rowIndex, dataMember);
        return _formatter_1.formatNumeric(value, formatInfo);
    }
    getFormattedArgumentRowValue(rowIndex, dataMember, formatInfo) {
        var value = this.getRowValue(rowIndex, dataMember);
        return _formatter_1.format(value, formatInfo);
    }
    getColumnIndex(dataMember) {
        return this.dataMembers.indexOf(dataMember);
    }
    getRowCount() {
        return this.rowCount;
    }
}
exports.listSource = listSource;


/***/ }),

/***/ 31724:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.localizationId = void 0;
exports.localizationId = {
    FilterElementShowAllItem: 'DashboardStringId.FilterElementShowAllItem',
    DateTimeQuarterFormat: 'DashboardStringId.DateTimeQuarterFormat',
    buttonNames: {
        ClearMasterFilter: 'DashboardStringId.ActionClearMasterFilter',
        ClearSelection: 'DashboardStringId.ActionClearSelection',
        ElementSelection: 'DashboardStringId.ActionOtherValues',
        DrillUp: 'DashboardStringId.ActionDrillUp',
        ExportTo: 'DashboardStringId.ActionExportTo',
        ExportToPdf: 'DashboardStringId.ActionExportToPdf',
        ExportToImage: 'DashboardStringId.ActionExportToImage',
        ExportToExcel: 'DashboardStringId.ActionExportToExcel',
        ExportTemplate: 'DashboardStringId.ActionExportTemplate',
        AllowMultiselection: 'DashboardStringId.ActionAllowMultiselection',
        ButtonCancel: 'DashboardStringId.ButtonCancel',
        ButtonOK: 'DashboardStringId.ButtonOK',
        ButtonReset: 'DashboardStringId.ButtonReset',
        ButtonSubmit: 'DashboardStringId.ButtonSubmit',
        ButtonExport: 'DashboardStringId.ButtonExport',
        InitialExtent: 'DashboardStringId.InitialExtent',
        GridResetColumnWidths: 'DashboardStringId.GridResetColumnWidths',
        GridSortAscending: 'DashboardStringId.GridSortAscending',
        GridSortDescending: 'DashboardStringId.GridSortDescending',
        GridClearSorting: 'DashboardStringId.GridClearSorting',
        AddTimePeriod: 'DashboardStringId.ActionSelectDateTimePeriod',
        CustomPeriod: 'DashboardStringId.RangeFilterCustomDateTimePeriod',
        SelectDate: 'DashboardStringId.SelectDate'
    },
    labelName: {
        ParametersFormCaption: 'DashboardStringId.ParametersFormCaption',
        ParametersFormAllowNullColumnCaption: 'DashboardStringId.ParametersFormAllowNullColumnCaption',
        ParametersFormValueColumnCaption: 'DashboardStringId.ParametersFormValueColumnCaption',
        ParametersFormNameColumnCaption: 'DashboardStringId.ParametersFormNameColumnCaption',
        ParametersFormCalendarTodayButton: 'DashboardStringId.ParametersFormCalendarTodayButton',
        PageLayout: 'DashboardStringId.PageLayout',
        PageLayoutAuto: 'DashboardStringId.PageLayoutAuto',
        PageLayoutPortrait: 'DashboardStringId.PageLayoutPortrait',
        PageLayoutLandscape: 'DashboardStringId.PageLayoutLandscape',
        PaperKind: 'DashboardStringId.PaperKind',
        PaperKindLetter: 'DashboardStringId.PaperKindLetter',
        PaperKindLegal: 'DashboardStringId.PaperKindLegal',
        PaperKindExecutive: 'DashboardStringId.PaperKindExecutive',
        PaperKindA5: 'DashboardStringId.PaperKindA5',
        PaperKindA4: 'DashboardStringId.PaperKindA4',
        PaperKindA3: 'DashboardStringId.PaperKindA3',
        ScaleMode: 'DashboardStringId.ScaleMode',
        ScaleModeNone: 'DashboardStringId.ScaleModeNone',
        ScaleModeUseScaleFactor: 'DashboardStringId.ScaleModeUseScaleFactor',
        ScaleModeAutoFitToPagesWidth: 'DashboardStringId.ScaleModeAutoFitToPagesWidth',
        AutoFitPageCount: 'DashboardStringId.AutoFitPageCount',
        ScaleFactor: 'DashboardStringId.ScaleFactor',
        PrintHeadersOnEveryPage: 'DashboardStringId.PrintHeadersOnEveryPage',
        FitToPageWidth: 'DashboardStringId.FitToPageWidth',
        SizeMode: 'DashboardStringId.SizeMode',
        SizeModeNone: 'DashboardStringId.SizeModeNone',
        SizeModeStretch: 'DashboardStringId.SizeModeStretch',
        SizeModeZoom: 'DashboardStringId.SizeModeZoom',
        AutoArrangeContent: 'DashboardStringId.AutoArrangeContent',
        ImageFormat: 'DashboardStringId.ImageFormat',
        ExcelFormat: 'DashboardStringId.ExcelFormat',
        CsvValueSeparator: 'DashboardStringId.CsvValueSeparator',
        ExportFilters: 'DashboardStringId.ExportFilters',
        ExportParameters: 'DashboardStringId.ExportParameters',
        IncludeExportDashboardState: 'DashboardStringId.IncludeExportDashboardState',
        DashboardStatePosition: 'DashboardStringId.DashboardStatePosition',
        Resolution: 'DashboardStringId.Resolution',
        ShowTitle: 'DashboardStringId.ShowTitle',
        Title: 'DashboardStringId.Title',
        FileName: 'DashboardStringId.FileName',
        FilterStatePresentationAfter: 'DashboardStringId.FilterStatePresentationAfter',
        FilterStatePresentationAfterAndSplitPage: 'DashboardStringId.FilterStatePresentationAfterAndSplitPage',
        FilterStatePresentationSplitSheet: 'DashboardStringId.FilterStatePresentationSplitSheet',
        SelectRange: 'DashboardStringId.RangeFilterSelectRange',
        RangeFilterSelectRangeFromCaption: 'DashboardStringId.RangeFilterSelectRangeFromCaption',
        RangeFilterSelectRangeToCaption: 'DashboardStringId.RangeFilterSelectRangeToCaption'
    },
    sparkline: {
        TooltipStartValue: 'DashboardStringId.SparklineTooltipStartValue',
        TooltipEndValue: 'DashboardStringId.SparklineTooltipEndValue',
        TooltipMinValue: 'DashboardStringId.SparklineTooltipMinValue',
        TooltipMaxValue: 'DashboardStringId.SparklineTooltipMaxValue'
    },
    MessageCustomItemIsNotSupported: 'DashboardStringId.MessageCustomItemIsNotSupported',
    MessageGridHasNoData: 'DashboardStringId.MessageGridHasNoData',
    MessagePivotHasNoData: 'DashboardStringId.MessagePivotHasNoData',
    PivotGridGrandTotal: 'DashboardStringId.PivotGridGrandTotal',
    PivotGridTotal: 'DashboardStringId.PivotGridTotal',
    ChartTotalValue: 'DashboardStringId.ChartTotalValue',
    ParametersSelectorText: 'DashboardStringId.ParametersSelectorText',
    OpenCaption: 'DashboardStringId.OpenCaption',
    HighCaption: 'DashboardStringId.HighCaption',
    LowCaption: 'DashboardStringId.LowCaption',
    CloseCaption: 'DashboardStringId.CloseCaption',
    NumericFormatUnitSymbolThousands: 'DashboardStringId.NumericFormatUnitSymbolThousands',
    NumericFormatUnitSymbolMillions: 'DashboardStringId.NumericFormatUnitSymbolMillions',
    NumericFormatUnitSymbolBillions: 'DashboardStringId.NumericFormatUnitSymbolBillions',
    FilterElementCheckedComboBoxNoDataCaption: 'DashboardStringId.FilterElementCheckedComboBoxNoDataCaption',
    FilterElementRadioComboBoxNoDataCaption: 'DashboardStringId.FilterElementRadioComboBoxNoDataCaption',
    FilterElementNoDataToDisplay: 'DashboardStringId.FilterElementNoDataToDisplay',
    OlapRaggedHierarchyNoneItemCaption: 'DashboardStringId.OlapRaggedHierarchyNoneItemCaption',
    TreemapLabelArgumentTemplate: 'DashboardStringId.TreemapLabelArgumentTemplate',
    TreemapLabelValueTemplate: 'DashboardStringId.TreemapLabelValueTemplate',
    SearchNullValuePrompt: 'DashboardStringId.SearchNullValuePrompt',
    LegendItemFormatString: 'DashboardStringId.LegendItemFormatString'
};


/***/ }),

/***/ 88084:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.localizer = exports.ALL_ELEMENT = void 0;
const _default_1 = __webpack_require__(65855);
const special_values_1 = __webpack_require__(91571);
exports.ALL_ELEMENT = {
    value: { all: true },
    key: -1,
    get text() {
        return _default_1.getLocalizationById('DashboardStringId.FilterElementShowAllItem') || '(All)';
    },
    get html() {
        return this.text;
    },
    isAll: true
};
class localizer {
    static getString(key) {
        return _default_1.getLocalizationById(key);
    }
    static getPredefinedString(value) {
        switch (value) {
            case null:
            case special_values_1.specialValues.nullValueGuid:
            case special_values_1.specialValues.olapNullValueGuid:
                return _default_1.getLocalizationById('DashboardStringId.DashboardNullValue');
            case special_values_1.specialValues.othersValueGuid:
                return _default_1.getLocalizationById('DashboardStringId.TopNOthersValue');
            case special_values_1.specialValues.errorValueGuid:
                return _default_1.getLocalizationById('DashboardStringId.DashboardErrorValue');
            default:
                return undefined;
        }
    }
}
exports.localizer = localizer;


/***/ }),

/***/ 30916:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParametersCollection = exports.Parameter = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
class ParameterValue {
    constructor(value, displayText) {
        this._value = value;
        this._displayText = displayText;
    }
    getValue() {
        return this._value;
    }
    getDisplayText() {
        return this._displayText;
    }
}
class Parameter {
    constructor(parameterViewModel) {
        this.parameterChanged = _jquery_helpers_1.createJQueryCallbacks();
        this._name = parameterViewModel.Name;
        this._value = parameterViewModel.DefaultValue;
        this._defaultValue = parameterViewModel.DefaultValue;
        this._description = parameterViewModel.Description;
        this._type = parameterViewModel.Type;
        this._visible = parameterViewModel.Visible;
        this._allowNull = parameterViewModel.AllowNull;
        this._allowmultiselect = parameterViewModel.AllowMultiselect;
        this.setLookUpValues(parameterViewModel.Values, parameterViewModel.ContainsDisplayMember);
    }
    getName() {
        return this._name;
    }
    getAllowNull() {
        return this._allowNull;
    }
    getAllowMultiselect() {
        return this._allowmultiselect;
    }
    getValue() {
        return this._value;
    }
    setValue(value) {
        if (!_utils_1.checkValuesAreEqual(this._value, value, true, true)) {
            this._value = value;
            this.parameterChanged.fire();
        }
    }
    getDefaultValue() {
        return this._defaultValue;
    }
    getDescription() {
        return this._description;
    }
    getType() {
        return this._type;
    }
    getLookUpValues() {
        return this._values;
    }
    setLookUpValues(values, containsDisplayMember) {
        var that = this;
        if (values === null)
            that._values = values;
        else {
            that._values = [];
            if (values) {
                values.forEach(value => {
                    that._values.push(new ParameterValue(value.Value, containsDisplayMember ? value.DisplayText : value.Value));
                });
            }
        }
    }
    isVisible() {
        return this._visible;
    }
}
exports.Parameter = Parameter;
class ParametersCollection {
    constructor(parametersViewModel) {
        this.collectionChanged = _jquery_helpers_1.createJQueryCallbacks();
        this._parameters = [];
        var that = this;
        if (parametersViewModel) {
            parametersViewModel.forEach(parameterViewModel => {
                var parameter = new Parameter(parameterViewModel);
                parameter.parameterChanged.add(function () {
                    that.collectionChanged.fire();
                });
                that._parameters.push(parameter);
            });
        }
    }
    updateParameterValues(parametersViewModel) {
        parametersViewModel.forEach(parameterViewModel => {
            this.getParameterByName(parameterViewModel.Name).setLookUpValues(parameterViewModel.Values, parameterViewModel.ContainsDisplayMember);
        });
    }
    setParameters(newParameters) {
        newParameters.forEach(newParameter => {
            var parameter = this.getParameterByName(newParameter.Name);
            parameter.setValue(newParameter.Value);
        });
    }
    getParameterValues() {
        let parameterValues = [];
        this._parameters.forEach((parameter) => {
            parameterValues.push({
                Name: parameter.getName(),
                Value: parameter.getValue()
            });
        });
        return parameterValues;
    }
    getParameterDefaultValue(name) {
        return this.getParameterByName(name).getDefaultValue();
    }
    getParameterValue(name) {
        return this.getParameterByName(name).getValue();
    }
    setParameterValue(name, value) {
        var parameter = this.getParameterByName(name);
        parameter.setValue(value);
    }
    getParameters() {
        return this.getParameterList();
    }
    getVisibleParameters() {
        return this._parameters.filter(parameter => parameter.isVisible());
    }
    getParameterList() {
        return this._parameters;
    }
    getParameterByName(name) {
        var that = this;
        return that._parameters.filter((parameter) => parameter.getName() == name)[0];
    }
    getParameterByIndex(index) {
        return this._parameters[index];
    }
}
exports.ParametersCollection = ParametersCollection;


/***/ }),

/***/ 3522:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.selectionHelper = void 0;
const _utils_1 = __webpack_require__(7590);
class selectionHelper {
    static setSelectedArguments(widget, values, state) {
        if (!values) {
            return;
        }
        for (var valueIndex = 0; valueIndex < values.length; valueIndex++) {
            this._selectArgument(widget, values[valueIndex], state);
        }
    }
    static setSelectedSeries(widget, values, state) {
        if (!values) {
            return;
        }
        for (var valueIndex = 0; valueIndex < values.length; valueIndex++) {
            this._selectSeries(widget, values[valueIndex], state);
        }
    }
    static setSelectedPoint(widget, seriesValue, argumentValue, state) {
        var that = this;
        if (seriesValue != null && argumentValue == null) {
            that._selectSeries(widget, seriesValue, state);
        }
        if (seriesValue == null && argumentValue != null) {
            that._selectArgument(widget, argumentValue, state);
        }
        if (seriesValue != null && argumentValue != null) {
            var seriesList = widget.getAllSeries();
            for (var i = 0; i < seriesList.length; i++) {
                if (that._checkWidgetCorrespondsToValue(seriesList[i], seriesValue)) {
                    this._selectSeriesPoints(seriesList[i], argumentValue, state);
                }
            }
        }
    }
    static setSelectedWidgetViewer(widget, values, state) {
        if (!values) {
            return;
        }
        for (var valueIndex = 0; valueIndex < values.length; valueIndex++) {
            this._selectValue(widget, values[valueIndex], state);
        }
    }
    static selectWholePie(widgetViewer, state) {
        var seriesList = widgetViewer.getAllSeries();
        for (var i = 0; i < seriesList.length; i++) {
            this._selectWidget(seriesList[i], state);
        }
    }
    static _selectSeries(widget, seriesValue, state) {
        var seriesList = widget.getAllSeries();
        for (var i = 0; i < seriesList.length; i++) {
            this._selectValue(seriesList[i], seriesValue, state);
        }
    }
    static _selectArgument(widget, argumentValue, state) {
        var seriesList = widget.getAllSeries();
        for (var i = 0; i < seriesList.length; i++) {
            this._selectSeriesPoints(seriesList[i], argumentValue, state);
        }
    }
    static _selectSeriesPoints(series, argumentValue, state) {
        var points = series.getAllPoints();
        for (var j = 0; j < points.length; j++) {
            this._selectValue(points[j], argumentValue, state);
        }
    }
    static _selectValue(widget, value, state) {
        if (this._checkWidgetCorrespondsToValue(widget, value)) {
            this._selectWidget(widget, state);
        }
    }
    static _selectWidget(widget, state) {
        if (state) {
            widget.select();
        }
        else {
            widget.clearSelection();
        }
    }
    static _checkWidgetCorrespondsToValue(widget, value) {
        var tag = widget.tag;
        if (!tag || !value)
            return false;
        if (tag)
            tag = _utils_1.getTagValue(tag);
        if (tag && !Array.isArray(tag) && !Array.isArray(value)) {
            throw Error('Internal Error: incorrect values for selection');
        }
        return _utils_1.checkValuesAreEqual(tag, value);
    }
}
exports.selectionHelper = selectionHelper;


/***/ }),

/***/ 7844:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.tagValuesProvider = void 0;
exports.tagValuesProvider = {
    getTag: function (listSource, tagDataMembers, rowIndex) {
        var values = null;
        if (tagDataMembers === null)
            return values;
        values = [];
        for (var i = 0; i < tagDataMembers.length; i++) {
            values.push(listSource.getRowValue(rowIndex, tagDataMembers[i]));
        }
        return this.getTagByValues(values);
    },
    getTagByValues: function (values) {
        if (!values || values.length === 0)
            return null;
        return values;
    }
};


/***/ }),

/***/ 7590:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.unwrapSpecialNullValue = exports.RedBlackTree = exports.renderImage = exports.createSvgIconElement = exports.findLastIndex = exports.findIndex = exports.LocalStorageHelper = exports.strictEquals = exports.deepStrictEquals = exports.mapMany = exports.groupBy = exports.groupByProperty = exports.minus = exports.union = exports.intersect = exports.distinct = exports.asyncDebounce = exports.debounce = exports.pxToNumber = exports.areNotOrderedListsEqual = exports.wrapHash = exports.getParentClasses = exports.treeWalker = exports.getValueIndex = exports.getTagValue = exports.getAxisPointValue = exports.checkArrayContainsTuple = exports.checkTuplesAreEqual = exports.checkValuesAreEqual = exports.arrayEquals = exports.arrayContains = exports.moveContent = exports.decodeHtml = exports.encodeHtml = exports.isVulnerable = exports.allowSelectValue = exports.getRGBColor = exports.toColor = exports.tooltipContainerSelector = exports.gaugeViewType = exports.pivotArea = exports.KpiValueMode = exports.type = void 0;
const data_1 = __webpack_require__(72858);
const $ = __webpack_require__(65311);
const special_values_1 = __webpack_require__(91571);
exports.type = {
    isDefined: function (object) {
        return null !== object && void 0 !== object;
    },
    isFunction: function (object) {
        return 'function' === typeof object;
    },
    isString: function (object) {
        return 'string' === typeof object;
    },
    isNumeric: function (object) {
        return 'number' === typeof object && isFinite(object) || !isNaN(object - parseFloat(object));
    },
    isBoolean: function (object) {
        return 'boolean' === typeof object;
    }
};
exports.KpiValueMode = {
    Measure: 'Measure',
    Delta: 'Delta'
}, exports.pivotArea = {
    column: 'column',
    row: 'row',
    data: 'data'
}, exports.gaugeViewType = {
    CircularFull: 'CircularFull',
    CircularHalf: 'CircularHalf',
    CircularQuarterRight: 'CircularQuarterRight',
    CircularQuarterLeft: 'CircularQuarterLeft',
    CircularThreeFourth: 'CircularThreeFourth',
    LinearHorizontal: 'LinearHorizontal',
    LinearVertical: 'LinearVertical'
}, exports.tooltipContainerSelector = '.dx-dashboard-container';
function toColor(numericColorValue) {
    var number = numericColorValue >>> 0;
    var b = number & 0xFF, g = (number & 0xFF00) >>> 8, r = (number & 0xFF0000) >>> 16, a = ((number & 0xFF000000) >>> 24) / 255;
    return this.getRGBColor(r, g, b, a);
}
exports.toColor = toColor;
function getRGBColor(r, g, b, a) {
    if (typeof a === 'number' && a >= 0 && a < 1)
        return 'rgba(' + [r, g, b, a].join(',') + ')';
    return 'rgb(' + [r, g, b].join(',') + ')';
}
exports.getRGBColor = getRGBColor;
function allowSelectValue(values) {
    var result = true;
    if (values) {
        values.forEach(value => {
            result = result && (value !== special_values_1.specialValues.othersValueGuid) &&
                (value !== special_values_1.specialValues.errorValueGuid);
        });
    }
    return result;
}
exports.allowSelectValue = allowSelectValue;
function isVulnerable(value) {
    if (!value)
        return false;
    var re = new RegExp('^\s*(data|javascript)\s*:\s*');
    return !!value.match(re);
}
exports.isVulnerable = isVulnerable;
function encodeHtml(str) {
    return String(str)
        .replace(/&/g, '&amp;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#39;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}
exports.encodeHtml = encodeHtml;
function decodeHtml(value) {
    return String(value)
        .replace(/&quot;/g, '"')
        .replace(/&#39;/g, "'")
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&amp;/g, '&');
}
exports.decodeHtml = decodeHtml;
function moveContent(source, dest, clearSource) {
    $.fn.constructor(source).contents().appendTo($.fn.constructor(dest));
    if (clearSource) {
        source.innerHTML = '';
    }
}
exports.moveContent = moveContent;
function arrayContains(container, part) {
    var currentValueIndex = -1;
    if (!!container) {
        $.each(container, (index, item) => {
            if (arrayEquals(part, item)) {
                currentValueIndex = index;
                return false;
            }
        });
    }
    return currentValueIndex >= 0;
}
exports.arrayContains = arrayContains;
function arrayEquals(array1, array2) {
    if (!array1 && !array2)
        return true;
    if (!array1 || !array2)
        return false;
    if (Array.isArray(array1)) {
        if (array1.length !== array2.length)
            return false;
        for (var key in array1) {
            if (!arrayEquals(array1[key], array2[key]))
                return false;
        }
    }
    else {
        return data_1.toComparable(array1, true) === data_1.toComparable(array2, true);
    }
    return true;
}
exports.arrayEquals = arrayEquals;
function checkValuesAreEqual(value1, value2, nullValuesEquals = false, emptyArraysEquals = false) {
    if (!nullValuesEquals && (value1 == null || value2 == null)) {
        return false;
    }
    var list1 = Array.isArray(value1) ? value1 : [value1], list2 = Array.isArray(value2) ? value2 : [value2];
    if (list1.length !== list2.length || (list1.length === 0 && !emptyArraysEquals)) {
        return false;
    }
    else {
        for (var i = 0; i < list1.length; i++) {
            if (data_1.toComparable(list1[i], true) !== data_1.toComparable(list2[i], true))
                return false;
        }
        return true;
    }
}
exports.checkValuesAreEqual = checkValuesAreEqual;
function checkTuplesAreEqual(tuple1, tuple2) {
    if (!tuple1 || !tuple2) {
        return false;
    }
    var containsCount = 0;
    tuple1.forEach(tuple1AxisValue => {
        var value = tuple2.filter((tuple2AxisValue) => {
            return tuple2AxisValue.axisName === tuple1AxisValue.axisName;
        })[0].value;
        if (checkValuesAreEqual(tuple1AxisValue.value, value)) {
            containsCount = containsCount + 1;
        }
    });
    return containsCount == tuple1.length;
}
exports.checkTuplesAreEqual = checkTuplesAreEqual;
function checkArrayContainsTuple(array, tuple) {
    var that = this, contains, currentIndex;
    $.each(array, function (index, aTuple) {
        contains = that.checkTuplesAreEqual(aTuple, tuple);
        if (contains)
            currentIndex = index;
        return !contains;
    });
    return currentIndex;
}
exports.checkArrayContainsTuple = checkArrayContainsTuple;
function getAxisPointValue(tuple, axisName) {
    var axisPoints = tuple.filter((axisValue) => {
        return axisValue.axisName === axisName;
    });
    return axisPoints.length > 0 ? axisPoints[0].value : null;
}
exports.getAxisPointValue = getAxisPointValue;
function getTagValue(tag) {
    var axisPoint = tag.axisPoint;
    return axisPoint ? axisPoint.getUniquePath() : tag;
}
exports.getTagValue = getTagValue;
function getValueIndex(matrix, vector) {
    if (matrix && vector) {
        for (var i = 0; i < matrix.length; i++) {
            if (this.checkValuesAreEqual(matrix[i], vector)) {
                return i;
            }
        }
    }
    return -1;
}
exports.getValueIndex = getValueIndex;
function treeWalker(rootNode, childrenFunc) {
    return {
        walk: function (func) {
            this._walkInternal(rootNode, null, func, function () { return true; });
        },
        walkLeaf: function (func) {
            this._walkInternal(rootNode, null, func, function (node, parent, isLeaf) { return isLeaf; });
        },
        _walkInternal: function (node, parent, func, callPredicate) {
            var that = this, children = childrenFunc(node), isLeaf = !children || children.length === 0;
            if (callPredicate(node, parent, isLeaf)) {
                func(node, parent, isLeaf);
            }
            if (!isLeaf) {
                $.each(children, function (i, branch) {
                    that._walkInternal(branch, node, func, callPredicate);
                });
            }
        }
    };
}
exports.treeWalker = treeWalker;
function getParentClasses($obj) {
    var parents = [$obj.attr('class')];
    $.each($obj.parents(), function (_, parent) {
        var name = $.fn.constructor(parent).attr('class');
        if (name)
            parents.push(name);
    });
    return parents.reverse();
}
exports.getParentClasses = getParentClasses;
function wrapHash(valuesArray) {
    var hash = {};
    if (valuesArray) {
        valuesArray.forEach(value => {
            hash[value] = true;
        });
    }
    return hash;
}
exports.wrapHash = wrapHash;
function areNotOrderedListsEqual(list1, list2) {
    if (list1.length != list2.length)
        return false;
    list1 = list1.slice();
    list2 = list2.slice();
    list1.sort();
    list2.sort();
    for (var i = 0; i < list1.length; i++) {
        if (list1[i] !== list2[i])
            return false;
    }
    return true;
}
exports.areNotOrderedListsEqual = areNotOrderedListsEqual;
function pxToNumber(px) {
    var result = 0;
    if (px != null && px != '') {
        try {
            var indexOfPx = px.indexOf('px');
            if (indexOfPx > -1)
                result = parseInt(px.substr(0, indexOfPx));
        }
        catch (e) { }
    }
    return result;
}
exports.pxToNumber = pxToNumber;
function debounce(func, wait) {
    var timeout;
    return function (...args) {
        var that = this;
        clearTimeout(timeout);
        timeout = setTimeout(() => {
            clearTimeout(timeout);
            timeout = null;
            func.apply(that, args);
        }, wait);
    };
}
exports.debounce = debounce;
function asyncDebounce(func, action) {
    var actualPromise;
    return (...args) => {
        var that = this;
        var promise = func.call(that, ...args);
        actualPromise = promise;
        promise.done(function (...actionArgs) {
            if (promise === actualPromise) {
                action.apply(that, actionArgs);
            }
        });
    };
}
exports.asyncDebounce = asyncDebounce;
function containsInIndex(array, value, index, compare) {
    return index >= 0 && findIndex(array, cur => compare(value, cur)) === index;
}
function distinct(array, compare) {
    if (compare)
        return array.filter((value, index, arr) => containsInIndex(arr, value, index, compare));
    else
        return array.filter((value, index, arr) => arr.indexOf(value) === index);
}
exports.distinct = distinct;
function intersect(array1, array2, compare) {
    if (compare)
        return array1.filter((value) => findIndex(array2, cur => compare(value, cur)) !== -1);
    else
        return array1.filter((value) => array2.indexOf(value) !== -1);
}
exports.intersect = intersect;
function union(array1, array2, compare) {
    return distinct(array1.concat(array2));
}
exports.union = union;
function minus(array1, array2, compare) {
    if (compare)
        return array1.filter((value) => findIndex(array2, cur => compare(value, cur)) === -1);
    else
        return array1.filter((value) => array2.indexOf(value) === -1);
}
exports.minus = minus;
function groupByProperty(array, property) {
    return groupBy(array, item => item[property]);
}
exports.groupByProperty = groupByProperty;
function groupBy(array, getKey) {
    return array.reduce((result, item) => {
        const key = getKey(item);
        const group = result.filter(gr => gr && gr.length > 0 && getKey(gr[0]) === key)[0];
        if (!group) {
            result.push([item]);
        }
        else {
            group.push(item);
        }
        return result;
    }, []);
}
exports.groupBy = groupBy;
function mapMany(array, callbackfn) {
    return array.map(callbackfn).reduce((a, b) => a.concat(b), []);
}
exports.mapMany = mapMany;
function deepStrictEquals(x, y) {
    return strictEquals(x, y, (obj1, obj2) => {
        if (Array.isArray(obj1) || Array.isArray(obj2))
            throw new Error('Arrays comparison is not supported.');
        switch (typeof (obj1)) {
            case 'object':
                for (var p1 in obj1) {
                    if (obj1.hasOwnProperty(p1) !== obj2.hasOwnProperty(p1))
                        return false;
                    if (!deepStrictEquals(obj1[p1], obj2[p1]))
                        return false;
                }
                for (var p2 in obj2)
                    if (!obj1.hasOwnProperty(p2))
                        return false;
                break;
            case 'number':
            case 'boolean':
            case 'string':
            case 'bigint':
            case 'symbol':
                if (obj1 !== obj2)
                    return false;
                break;
            default:
                throw new Error('The object type ' + typeof (obj1) + ' is not supported in comparison.');
        }
        return true;
    });
}
exports.deepStrictEquals = deepStrictEquals;
function strictEquals(x, y, equalsCore) {
    if (x === y)
        return true;
    if (!exports.type.isDefined(x) || !exports.type.isDefined(y))
        return false;
    if (typeof (x) !== typeof (y))
        return false;
    return equalsCore(x, y);
}
exports.strictEquals = strictEquals;
class LocalStorageHelper {
    static _getLocalStorage() {
        try {
            if (window.localStorage)
                return window.localStorage;
        }
        catch (_) { }
        return undefined;
    }
    static getItem(key, defaultValue = null) {
        var localStorage = LocalStorageHelper._getLocalStorage();
        if (localStorage) {
            return localStorage.getItem(key);
        }
        return defaultValue;
    }
    static setItem(key, value) {
        var localStorage = LocalStorageHelper._getLocalStorage();
        if (localStorage) {
            return localStorage.setItem(key, value);
        }
    }
}
exports.LocalStorageHelper = LocalStorageHelper;
function findIndex(array, predicate) {
    for (let i = 0; i < array.length; i++) {
        if (predicate(array[i]))
            return i;
    }
    return -1;
}
exports.findIndex = findIndex;
function findLastIndex(array, predicate) {
    for (let i = array.length - 1; i >= 0; --i) {
        if (predicate(array[i]))
            return i;
    }
    return -1;
}
exports.findLastIndex = findLastIndex;
function createSvgIconElement(iconId) {
    const svgNS = 'http://www.w3.org/2000/svg';
    const xlinkNS = 'http://www.w3.org/1999/xlink';
    let useElement = document.createElementNS(svgNS, 'use');
    useElement.setAttributeNS(xlinkNS, 'xlink:href', '#' + iconId);
    let template = document.createElementNS(svgNS, 'svg');
    template.appendChild(useElement);
    return template;
}
exports.createSvgIconElement = createSvgIconElement;
function renderImage(container, imageData) {
    let img = document.createElement('img');
    img.src = 'data:image/png;base64,' + imageData.value;
    container.appendChild(img);
}
exports.renderImage = renderImage;
class RedBlackTree {
    constructor(compare) {
        this._root = null;
        this._compare = null;
        this._compare = compare;
    }
    getOrAdd(key, getValue) {
        if (this._root == null) {
            let value = getValue();
            this._root = new RedBlackNode(null, key, value);
            this._root.isRed = false;
            return { added: true, value: value };
        }
        let last = this._root;
        while (true) {
            let relation = this._compare(key, last.key);
            if (relation === 0)
                return { added: false, value: last.value };
            if (relation < 0) {
                if (last.left == null) {
                    let value = getValue();
                    last.left = new RedBlackNode(last, key, value);
                    this._rebalance(last.left);
                    return { added: true, value: value };
                }
                else {
                    last = last.left;
                }
            }
            else {
                if (last.right == null) {
                    let value = getValue();
                    last.right = new RedBlackNode(last, key, value);
                    this._rebalance(last.right);
                    return { added: true, value: value };
                }
                else {
                    last = last.right;
                }
            }
        }
    }
    _rebalance(node) {
        if (node.parent == null) {
            node.isRed = false;
            return;
        }
        while (node.parent != null && node.parent.isRed) {
            if (node.parent.parent.isRed) {
                node.parent.isRed = false;
                return;
            }
            if (node.parent == node.parent.parent.left) {
                let uncle = node.parent.parent.right;
                if (uncle != null && uncle.isRed) {
                    node.parent.isRed = false;
                    uncle.isRed = false;
                    node.parent.parent.isRed = true;
                    node = node.parent.parent;
                }
                else {
                    if (node == node.parent.right) {
                        node = node.parent;
                        this._rotateLeft(node);
                    }
                    node.parent.isRed = false;
                    node.parent.parent.isRed = true;
                    this._rotateRight(node.parent.parent);
                }
            }
            else {
                let uncle = node.parent.parent.left;
                if (uncle != null && uncle.isRed == true) {
                    node.parent.isRed = false;
                    uncle.isRed = false;
                    node.parent.parent.isRed = true;
                    node = node.parent.parent;
                }
                else {
                    if (node == node.parent.left) {
                        node = node.parent;
                        this._rotateRight(node);
                    }
                    node.parent.isRed = false;
                    node.parent.parent.isRed = true;
                    this._rotateLeft(node.parent.parent);
                }
            }
        }
        this._root.isRed = false;
    }
    _rotateLeft(node) {
        var right = node.right;
        node.right = right.left;
        if (right.left != null)
            right.left.parent = node;
        right.parent = node.parent;
        if (node.parent == null) {
            this._root = right;
        }
        else if (node == node.parent.left) {
            node.parent.left = right;
        }
        else {
            node.parent.right = right;
        }
        right.left = node;
        node.parent = right;
    }
    _rotateRight(node) {
        var left = node.left;
        node.left = left.right;
        if (left.right != null) {
            left.right.parent = node;
        }
        left.parent = node.parent;
        if (node.parent == null) {
            this._root = left;
        }
        else if (node == node.parent.left) {
            node.parent.left = left;
        }
        else {
            node.parent.right = left;
        }
        left.right = node;
        node.parent = left;
    }
}
exports.RedBlackTree = RedBlackTree;
class RedBlackNode {
    constructor(parent, key, value) {
        this.left = null;
        this.right = null;
        this.parent = parent;
        this.key = key;
        this.value = value;
        this.isRed = true;
    }
}
function unwrapSpecialNullValue(value) {
    return value === special_values_1.specialValues.nullValueGuid ? null : value;
}
exports.unwrapSpecialNullValue = unwrapSpecialNullValue;


/***/ }),

/***/ 56330:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.zIndex = void 0;
exports.zIndex = {
    floatingToolbar: 95,
    dashboardItemShield: 100,
    dashboardItemTooltips: 110,
};


/***/ }),

/***/ 52161:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 52441:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bubbleMapDataController = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const _geo_point_map_data_controller_base_1 = __webpack_require__(76946);
class bubbleMapDataController extends _geo_point_map_data_controller_base_1.geoPointMapDataControllerBase {
    constructor(options) {
        super(options);
    }
    getPoint(index) {
        return _jquery_helpers_1.deepExtend(super.getPoint(index), {
            weight: this._getMeasureValue(index, this.viewModel.WeightId),
            color: this._getMeasureValue(index, this.viewModel.ColorId),
            weightText: this._getMeasureDisplayText(index, this.viewModel.WeightId),
            colorText: this._getMeasureDisplayText(index, this.viewModel.ColorId)
        });
    }
    formatColor(value) {
        var measure = this.multiData.getMeasureById(this.viewModel.ColorId);
        return measure ? measure.format(value) : value;
    }
    formatWeight(value) {
        var measure = this.multiData.getMeasureById(this.viewModel.WeightId);
        return measure ? measure.format(value) : value;
    }
}
exports.bubbleMapDataController = bubbleMapDataController;


/***/ }),

/***/ 50474:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardDataController = void 0;
const _kpi_data_controller_1 = __webpack_require__(78560);
class cardDataController extends _kpi_data_controller_1.kpiDataController {
    constructor(options) {
        super(options);
    }
    _iterateKpiItems(delegate) {
        var that = this;
        if (that.viewModel) {
            that.viewModel.Cards.forEach(delegate);
        }
    }
}
exports.cardDataController = cardDataController;


/***/ }),

/***/ 29617:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.chartDataControllerBase = void 0;
const color_1 = __webpack_require__(43150);
const _item_data_axis_helper_1 = __webpack_require__(59385);
const item_data_axis_names_1 = __webpack_require__(51101);
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const _utils_1 = __webpack_require__(7590);
const _data_controller_base_1 = __webpack_require__(28097);
class chartDataControllerBase extends _data_controller_base_1.dataControllerBase {
    constructor(options) {
        super(options);
    }
    static _getLegendSeriesName(seriesName) {
    }
    static _getLegendSeriesDisplayName(seriesName) {
    }
    getArgument(argumentAxisPoint) {
        if (this.isQualitativeArgument()) {
            return this.getTitle(argumentAxisPoint, '\n');
        }
        else if (this.isDiscreteArgument()) {
            if (argumentAxisPoint.getParent() != null) {
                return argumentAxisPoint.getDisplayText() || '';
            }
            else {
                return _localizer_1.localizer.getString(_localization_ids_1.localizationId.ChartTotalValue);
            }
        }
        else {
            return argumentAxisPoint.getValue();
        }
    }
    getArgumentAxisPoints(argumentId) {
        if (this.viewModel) {
            var id = argumentId ? argumentId : this.viewModel.Argument.SummaryArgumentMember, argumentAxis = this._getArgumentAxis();
            return argumentAxis ? argumentAxis.getPointsByDimension(id) : [];
        }
        else {
            return [];
        }
    }
    getSeriesAxisPoints(seriesId) {
        var seriesAxis = this._getSeriesAxis(), id = seriesId ? seriesId : this.viewModel.SummarySeriesMember;
        return seriesAxis ? seriesAxis.getPointsByDimension(id) : [];
    }
    getSingleArgumentDimensionFormat() {
        var argumentDimension = this._getSingleArgumentDimension();
        return argumentDimension ? argumentDimension.getFormat() : undefined;
    }
    getColor(argumentAxisPoint, seriesAxisPoint, measuesIds, colorMeasureId) {
        var that = this, color;
        if (that.viewModel.IsDefaultColorizationDisabled)
            color = that.styleSettingsProvider.getDefaultBackColor();
        else
            color = that._getColorFromData(argumentAxisPoint, seriesAxisPoint, colorMeasureId);
        let cfColor = that.getConditionalFormattingPointColor(argumentAxisPoint, seriesAxisPoint, measuesIds[0]);
        if (cfColor)
            color = cfColor;
        return that._getElementCustomColor(argumentAxisPoint, seriesAxisPoint, measuesIds, color);
    }
    getConditionalFormattingColorCore(argumentAxisPoint, seriesAxisPoint, seriesMeasureId, seriesElement) {
        let color = null;
        if (this.cfModel) {
            let styleSettingsInfo = this._getStyleSettingsInfo(argumentAxisPoint, seriesAxisPoint, seriesMeasureId, seriesElement);
            if (styleSettingsInfo && styleSettingsInfo.styleIndexes.length > 0)
                color = this.styleSettingsProvider.getBackColor(styleSettingsInfo);
        }
        return color;
    }
    getConditionalFormattingSeriesColor(seriesAxisPoint, seriesMeasureId) {
        return this.getConditionalFormattingColorCore(null, seriesAxisPoint, seriesMeasureId, 'LineOrArea');
    }
    getConditionalFormattingPointColor(argumentAxisPoint, seriesAxisPoint, seriesMeasureId) {
        return this.getConditionalFormattingColorCore(argumentAxisPoint, seriesAxisPoint, seriesMeasureId, 'Point');
    }
    isDiscreteArgument() {
        return this.viewModel && (this.viewModel.Argument.Type === 'String');
    }
    isQualitativeArgument() {
        return this._getArgumentAxisDimensions().length > 1 && !this.drillDownState[item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis];
    }
    isSingleArgument() {
        return this._getArgumentAxisDimensions().length == 1 || this.drillDownState[item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis] != null;
    }
    hasSeriesPoints() {
        return this.viewModel && !!this.viewModel.SummarySeriesMember;
    }
    _getElementCustomColor(argumentAxisPoint, seriesAxisPoint, measuesIds, color) {
        var that = this, dxColor = new color_1.default(color), newColor;
        if (that.elementCustomColor && color) {
            var customElementColorEventArgs = {
                targetElement: [argumentAxisPoint, seriesAxisPoint],
                measureIds: measuesIds,
                color: dxColor.toHex()
            };
            that.elementCustomColor(customElementColorEventArgs);
            newColor = new color_1.default(customElementColorEventArgs.color);
            if (!newColor.colorIsInvalid && customElementColorEventArgs.color !== dxColor.toHex()) {
                return customElementColorEventArgs.color;
            }
        }
        return color;
    }
    _getColorFromData(argumentAxisPoint, seriesAxisPoint, colorMeasureId) {
        var that = this, colorArgumentAxisPoint = argumentAxisPoint ? argumentAxisPoint.getParentByDimensionId(that.viewModel.ArgumentColorDimension) : undefined, colorSeriesAxisPoint = seriesAxisPoint.getParentByDimensionId(that.viewModel.SeriesColorDimension);
        if (_utils_1.type.isDefined(colorMeasureId)) {
            try {
                var colorValue = that._getCrossSlice(colorArgumentAxisPoint, colorSeriesAxisPoint).getColorMeasureValue(colorMeasureId);
                return colorValue !== null ? _utils_1.toColor(colorValue) : undefined;
            }
            catch (e) {
                return undefined;
            }
        }
        return undefined;
    }
    _getStyleSettingsInfo(argumentAxisPoint, seriesAxisPoint, seriesMeasureId, chartElement) {
        if (this.cfModel) {
            let rules = [], seriesInfo = {
                argumentAxisPoint: argumentAxisPoint,
                seriesAxisPoint: seriesAxisPoint,
                chartElement: chartElement
            };
            rules = this.cfModel.RuleModels.filter(rule => rule.ApplyToSeriesId === seriesMeasureId && rule.ApplyToChartElement === chartElement);
            return this._getStyleSettingsInfoCore(seriesInfo, rules, this.viewModel.ColumnAxisName, item_data_axis_names_1.itemDataAxisNames.defaultAxis);
        }
    }
    _getStyleIndexes(rule, seriesInfo, points) {
        let isExpressionRule = rule.CalcByDataId ? false : true;
        let isDimensionRule = this.multiData.getDimensions(item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis).concat(this.multiData.getDimensions(item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis)).filter(dimension => dimension.id === rule.CalcByDataId).length > 0;
        if (seriesInfo.chartElement === 'Point') {
            if (isExpressionRule) {
                let seriesPointPath = seriesInfo.seriesAxisPoint.getAxisPath();
                let argumentPointPath = seriesInfo.argumentAxisPoint.getAxisPath();
                if (seriesPointPath.length > 0 && argumentPointPath.length > 0)
                    return this.findStylesOnPointPathsIntersection(seriesPointPath, argumentPointPath, rule.FormatConditionMeasureId);
                else if (seriesPointPath.length > 0)
                    return this.findStylesOnPointPath(seriesPointPath, null, rule.FormatConditionMeasureId);
                else
                    return this.findStylesOnPointPath(argumentPointPath, null, rule.FormatConditionMeasureId);
            }
            else if (isDimensionRule)
                return this.findStylesForDimension(seriesInfo.seriesAxisPoint, seriesInfo.argumentAxisPoint, rule.CalcByDataId, rule.FormatConditionMeasureId);
            return this.findStylesOnPointIntersection([seriesInfo.seriesAxisPoint, seriesInfo.argumentAxisPoint], rule.FormatConditionMeasureId);
        }
        else if (seriesInfo.chartElement === 'LineOrArea')
            return this.getStyleIndexesOnArgumentAxis(seriesInfo.seriesAxisPoint, rule.FormatConditionMeasureId, isExpressionRule, isDimensionRule, rule.CalcByDataId);
        return null;
    }
    findStylesForDimension(seriesPoint, argumentPoint, idDimensionCalculateBy, formatRuleMeasureId) {
        let isSeriesDimension = this.multiData.getDimensions(item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis).filter(dimension => dimension.id === idDimensionCalculateBy).length > 0, slicePoint = (isSeriesDimension ? seriesPoint : argumentPoint).getParentByDimensionId(idDimensionCalculateBy);
        return this.findStylesOnPointIntersection([slicePoint], formatRuleMeasureId);
    }
    findStylesOnPointIntersection(points, ruleMeasureId) {
        return this._getMeasureValueByAxisPoints(points.filter(point => point), ruleMeasureId);
    }
    findStylesOnPointPath(pointPath, intercestionPoint, ruleMeasureId) {
        let styles;
        for (let point of pointPath) {
            styles = this.findStylesOnPointIntersection([point, intercestionPoint], ruleMeasureId);
            if (styles)
                break;
        }
        return styles;
    }
    findStylesOnPointPathsIntersection(firstPointPath, secondPointPath, ruleMeasureId) {
        let styles;
        for (let point of firstPointPath) {
            styles = this.findStylesOnPointPath(secondPointPath, point, ruleMeasureId);
            if (styles)
                break;
        }
        return styles;
    }
    getStyleIndexesOnArgumentAxis(seriesAxisPoint, cfMeasureId, isExpressionRule, isDimensionRule, idDimensionCalculateBy) {
        let helper = _item_data_axis_helper_1.itemDataAxisHelper, styles = [], rootArgumentPoint = this.multiData.getAxis(item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis).getRootPoint();
        let targetSeriesPoint = seriesAxisPoint ? seriesAxisPoint : this.multiData.getAxis(item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis).getRootPoint();
        helper.eachPoint(rootArgumentPoint, (point) => {
            let currentStyles;
            if (isExpressionRule)
                currentStyles = this.findStylesOnPointPath(targetSeriesPoint.getAxisPath(), point, cfMeasureId);
            else if (isDimensionRule)
                currentStyles = this.findStylesForDimension(targetSeriesPoint, point, idDimensionCalculateBy, cfMeasureId);
            else
                currentStyles = this.findStylesOnPointIntersection([point, targetSeriesPoint], cfMeasureId);
            if (currentStyles && currentStyles.length > 0) {
                styles = styles.concat(currentStyles);
                return false;
            }
        });
        return styles;
    }
    _getCrossSlice(argumentAxisPoint, seriesAxisPoint) {
        var slice = this.multiData.getSlice(seriesAxisPoint);
        return argumentAxisPoint ? slice.getSlice(argumentAxisPoint) : slice;
    }
    _getArgumentAxis() {
        return this.multiData ? this.multiData.getAxis(item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis) : undefined;
    }
    _getSeriesAxis() {
        return this.multiData ? this.multiData.getAxis(item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis) : undefined;
    }
    _getArgumentAxisDimensions() {
        var argumentAxis = this._getArgumentAxis(), dimensions = argumentAxis ? argumentAxis.getDimensions() : [];
        return dimensions ? dimensions : [];
    }
    _getSingleArgumentDimension() {
        var argumentDimensions = this._getArgumentAxisDimensions();
        if (argumentDimensions.length > 0) {
            return argumentDimensions[argumentDimensions.length - 1];
        }
        else {
            return undefined;
        }
    }
}
exports.chartDataControllerBase = chartDataControllerBase;


/***/ }),

/***/ 45709:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.allowedTypesForShowPointMarkers = exports.chartDataControllerProto = void 0;
const string_1 = __webpack_require__(36306);
const enums_1 = __webpack_require__(76114);
const _date_utils_1 = __webpack_require__(76900);
const _render_helper_1 = __webpack_require__(39336);
const item_data_axis_names_1 = __webpack_require__(51101);
const special_values_1 = __webpack_require__(91571);
const _chart_helper_1 = __webpack_require__(11222);
const _common_1 = __webpack_require__(29009);
const _formatter_1 = __webpack_require__(93687);
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const _utils_1 = __webpack_require__(7590);
const _chart_data_controller_base_1 = __webpack_require__(29617);
class chartDataControllerProto extends _chart_data_controller_base_1.chartDataControllerBase {
    constructor(options) {
        super(options);
        this._legendSeriesPrefix = '__legend__series__';
        this._argumentAxisPoints = this.getArgumentAxisPoints();
    }
    getLegendSeriesName(seriesName) {
        return this._legendSeriesPrefix + seriesName;
    }
    getLegendSeriesDisplayName(seriesName) {
        return seriesName.indexOf(this._legendSeriesPrefix) !== -1 ? seriesName.replace(this._legendSeriesPrefix, '') : seriesName;
    }
    getDataSourceAndSeries(encodeHtml) {
        var that = this;
        if (!that.viewModel || that._argumentAxisPoints.length == 0) {
            return {
                dataSource: null,
                series: null,
                argumentAxis: {
                    categories: []
                }
            };
        }
        var seriesInfoList = that._getSeriesInfo(encodeHtml), legendInfoList = that.viewModel.Legend && !that.viewModel.IsDefaultColorizationDisabled ? that._getLegendInfo() : [], cfLegendItems = that.viewModel.Legend ? that._getConditionalFormattingLegendItems() : [], result = {
            dataSource: [],
            series: [],
            argumentAxis: null
        };
        let dataSourceAndCategories = this.getDataSourceAndCategories(seriesInfoList);
        if (dataSourceAndCategories) {
            result.dataSource = dataSourceAndCategories.dataSource;
            if (dataSourceAndCategories.categories)
                result.argumentAxis = { categories: dataSourceAndCategories.categories };
        }
        if (seriesInfoList.length > 0) {
            seriesInfoList.forEach((seriesInfo) => {
                if (seriesInfo.seriesItem) {
                    result.series.push(seriesInfo.seriesItem);
                }
            });
            legendInfoList.forEach((legendInfo) => {
                result.series.push({
                    name: this.getLegendSeriesName(legendInfo.name),
                    color: legendInfo.color,
                    type: legendInfo.type
                });
            });
            cfLegendItems.forEach((legendItem) => {
                result.series.push({
                    name: legendItem.name,
                    color: legendItem.color,
                });
            });
        }
        return result;
    }
    getDataSourceAndCategories(seriesInfoList) {
        return this.getDataDefinedDataSourceAndCategories(seriesInfoList);
    }
    getDataDefinedDataSourceAndCategories(seriesInfoList) {
        let dataSource = [];
        let categories;
        if (seriesInfoList.length > 0) {
            categories = [];
            this._argumentAxisPoints.forEach((argumentAxisPoint, pointIndex) => {
                var argument = this.getArgumentBindingValue(argumentAxisPoint, pointIndex), dataSourceItem = {
                    x: argument
                };
                if (this._isSelectionTagsRequired()) {
                    dataSourceItem.tag = {
                        axisPoint: argumentAxisPoint
                    };
                }
                if (this.isDiscreteArgument()) {
                    categories.push(argument);
                }
                seriesInfoList.forEach(seriesInfo => {
                    if (seriesInfo.originalSeriesType === 'HighLowClose') {
                        dataSourceItem.nullColumn = null;
                    }
                    seriesInfo.valueFields.forEach(valueField => {
                        let value = valueField.getValue(argumentAxisPoint);
                        if (value === special_values_1.specialValues.errorValueGuid)
                            value = 0;
                        dataSourceItem[valueField.name] = value;
                    });
                });
                dataSource.push(dataSourceItem);
            });
        }
        else {
            categories = undefined;
        }
        return {
            dataSource: dataSource,
            categories: categories
        };
    }
    generatePaneName(paneName, paneIndex) {
        return paneName || 'Pane ' + paneIndex;
    }
    _getSeriesInfo(encodeHtml) {
        let info;
        var that = this, seriesIndex = 0, seriesAxisPoints = this.getSeriesAxisPoints(), isGrandTotal = !this.viewModel.SummarySeriesMember, includeTags = that._isSelectionTagsRequired(), reversed = this.viewModel.AxisX && this.viewModel.AxisX.Reverse, result = [], add = (info) => {
            var canReverse = info.seriesItem.type !== 'stackedbar' && info.seriesItem.type !== 'fullstackedbar';
            if (reversed && canReverse)
                result.unshift(info);
            else
                result.push(info);
        };
        that._iterateSeriesTemplates(function (pane, seriesTemplate, paneIndex) {
            var paneName = pane ? that.generatePaneName(pane.Name, paneIndex) : undefined, specifyTitleByName = pane ? pane.SpecifySeriesTitlesWithSeriesName : false, pointLabelInfo = that._getPointLabelInfo(seriesTemplate.PointLabel);
            seriesAxisPoints.forEach(seriesAxisPoint => {
                info = {
                    name: seriesTemplate.Name,
                    dataId: seriesTemplate.DataId,
                    paneName: paneName,
                    pointVisible: that._showPointMarker(seriesTemplate),
                    seriesType: _chart_helper_1.chartHelper.convertSeriesType(seriesTemplate.SeriesType),
                    originalSeriesType: seriesTemplate.SeriesType,
                    plotOnSecondaryAxis: seriesTemplate.PlotOnSecondaryAxis,
                    ignoreEmptyPoints: seriesTemplate.IgnoreEmptyPoints,
                    axisPoint: seriesAxisPoint,
                    dataMembers: seriesTemplate.DataMembers,
                    colorMeasureId: seriesTemplate.ColorMeasureID,
                    valueFormats: [],
                    valueFields: [],
                    pointLabel: pointLabelInfo
                };
                info.dataMembers.forEach(dataMember => {
                    info.valueFormats.push(that.multiData.getMeasureFormat(dataMember));
                    info.valueFields.push({
                        name: 'y' + seriesIndex.toString(),
                        getValue: function (argumentAxisPoint) {
                            return that._getCrossSlice(argumentAxisPoint, seriesAxisPoint).getMeasureValue(dataMember).getValue();
                        }
                    });
                    seriesIndex++;
                });
                if (!isGrandTotal) {
                    info.title = that.getTitle(seriesAxisPoint);
                    if (specifyTitleByName) {
                        info.title += ' - ' + seriesTemplate.Name;
                    }
                }
                else {
                    info.title = seriesTemplate.Name;
                }
                info.seriesItem = that._createSeriesItem(info, includeTags, encodeHtml);
                add(info);
            });
        });
        return result;
    }
    customizeTooltipText(series, point, seriesFormats, encodeHtml) {
        if (!this._validatePoint(point, series.type))
            return null;
        var color = this._getCustomizeTooltipTextColor(point);
        return this._getTooltipHtml(series, point, seriesFormats, encodeHtml, color);
    }
    _getTooltipHtml(series, point, seriesFormats, encodeHtml, color) {
        var text = this._getTooltipTextInternal(series, point, seriesFormats, encodeHtml);
        if (color) {
            text = '<div>' + _render_helper_1.RenderHelper.rectangle(color, 10, 10) + '&nbsp;&nbsp;' + text + '</div>';
        }
        return text;
    }
    _getTooltipTextInternal(series, point, seriesFormats, encodeHtml) {
        var that = this, text = series.name + ': ';
        text = encodeHtml ? _utils_1.encodeHtml(text) : text;
        switch (series.type) {
            case 'rangebar':
            case 'rangearea':
                text += that._formatValuesList([point.originalMinValue, point.originalValue], seriesFormats, encodeHtml);
                break;
            case 'bubble':
                text += that._formatValuesList([point.originalValue, point.size], seriesFormats, encodeHtml);
                break;
            case 'stock':
            case 'candlestick':
                text += that._formatOpenHighLowCloseValues([point.originalOpenValue, point.originalHighValue, point.originalLowValue, point.originalCloseValue], seriesFormats, series.getOptions().openValueField !== 'nullColumn', encodeHtml, '<br>');
                break;
            default:
                text += that._formatValuesList([point.originalValue], seriesFormats, encodeHtml);
                break;
        }
        return text;
    }
    getTooltipArgumentText(obj) {
        return this.getArgumentText({ value: obj.originalArgument });
    }
    getZoomArguments() {
        var that = this, axisX = that.viewModel ? that.viewModel.AxisX : undefined;
        if (axisX && axisX.LimitVisiblePoints && that._argumentAxisPoints.length > axisX.VisiblePointsCount) {
            var endIndex = axisX.VisiblePointsCount - 1;
            return {
                start: that.getArgumentBindingValue(that._argumentAxisPoints[0], 0),
                end: that.getArgumentBindingValue(that._argumentAxisPoints[endIndex], endIndex)
            };
        }
    }
    getArgumentUniquePath(value) {
        var that = this;
        for (var i = 0; i < that._argumentAxisPoints.length; i++) {
            if (that.getArgument(that._argumentAxisPoints[i]) === value)
                return that._argumentAxisPoints[i].getUniquePath();
        }
    }
    _getArgumentAutoFormat() {
        var that = this, min = 0, max = 1;
        if (that._argumentAxisPoints.length > 0) {
            min = that._argumentAxisPoints[0].getValue();
            max = that._argumentAxisPoints[that._argumentAxisPoints.length - 1].getValue();
        }
        return _formatter_1.getAxisFormat(min, max);
    }
    _createArgumentFormat() {
        return this.isSingleArgument() ? this.getSingleArgumentDimensionFormat() : undefined;
    }
    _createAxisXFormat() {
        if (this.viewModel.AxisX.Format && (this.viewModel.AxisX.Format.NumericFormat != null || this.viewModel.AxisX.Format.DateTimeFormat != null))
            return _formatter_1.convertToFormat(this.viewModel.AxisX.Format);
        return this.getArgumentFormat();
    }
    getArgumentFormat() {
        if (this._argumentFormat == null)
            this._argumentFormat = this._createArgumentFormat();
        return this._argumentFormat;
    }
    getAxisXFormat() {
        if (this._axisXFormat == null)
            this._axisXFormat = this._createAxisXFormat();
        return this._axisXFormat;
    }
    getArgumentText(argument) {
        return this._getArgumentText(argument.value, () => this.getArgumentFormat());
    }
    getAxisXLabelText(axisValue) {
        return this._getArgumentText(axisValue.value, () => this.getAxisXFormat());
    }
    _getArgumentText(argumentValue, formatGetter) {
        if (this.isDiscreteArgument() || this.isQualitativeArgument()) {
            var axisPoint = this._argumentAxisPoints[argumentValue];
            if (this.viewModel.Argument.AxisXDateTimeFormatSupported)
                return _formatter_1.formatByFormatInfo(axisPoint.getValue(), formatGetter());
            return axisPoint ? this.getTitle(axisPoint, '\n') : argumentValue;
        }
        return _formatter_1.formatByFormatInfo(argumentValue, formatGetter());
    }
    _validatePoint(point, seriesType) {
        switch (seriesType) {
            case 'rangebar':
            case 'rangearea':
                return !(point.originalMinValue === null && point.originalValue === null);
            case 'bubble':
                return !(point.originalValue === null && point.size === null);
            case 'stock':
            case 'candlestick':
                return !(point.originalOpenValue === null && point.originalHighValue === null && point.originalLowValue === null && point.originalCloseValue === null);
            default:
                return !(point.originalValue === null);
        }
    }
    _getCustomizeTooltipTextColor(point) {
        if (point.getColor) {
            return point.getColor();
        }
    }
    _getLegendInfo() {
        var that = this, values = [], result = [], colorMeasures = that.multiData.getColorMeasures(), argumentPoints = that.getArgumentAxisPoints(that.viewModel.ArgumentColorDimension), seriesPoints = that.getSeriesAxisPoints(that.viewModel.SeriesColorDimension), includeProc = (axisPoint) => {
            var dim = axisPoint.getDimension();
            return (dim && this.viewModel.ColorPathMembers && this.viewModel.ColorPathMembers.indexOf(dim.id) !== -1);
        }, getColorValuesProc = function (axisPoint) {
            return axisPoint.getValuePath(includeProc);
        }, getColorDisplayTextsProc = function (axisPoint) {
            return axisPoint.getDisplayPath(includeProc);
        };
        colorMeasures.forEach(colorMeasure => {
            argumentPoints.forEach(argumentPoint => {
                seriesPoints.forEach(seriesPoint => {
                    var color = that._getColorFromData(argumentPoint, seriesPoint, colorMeasure.id);
                    if (color) {
                        var valueSet = getColorValuesProc(argumentPoint).concat(getColorValuesProc(seriesPoint));
                        var displayTexts = getColorDisplayTextsProc(argumentPoint).concat(getColorDisplayTextsProc(seriesPoint));
                        if (colorMeasure.name) {
                            valueSet.push(colorMeasure);
                            displayTexts.push(colorMeasure.name);
                        }
                        if (!that._valuesContainsValueSet(values, valueSet)) {
                            values.push(valueSet);
                            var colorText = displayTexts.join(' - ');
                            if (!colorText || colorText == '') {
                                colorText = that._getDisplayTextBySeriesTemplates();
                            }
                            var transparentColor = !that.viewModel.ArgumentColorDimension && _chart_helper_1.chartHelper.isTransparentColorType(that._getLastSeriesType(colorMeasure.id));
                            result.push({
                                name: colorText,
                                color: color,
                                type: transparentColor ? 'bubble' : 'line',
                                argumentField: 'legendFakeArgument',
                                valueField: 'legendFakeValue'
                            });
                        }
                    }
                });
            });
        });
        return result;
    }
    _getConditionalFormattingLegendItems() {
        let cfLegends = [];
        if (this.cfModel) {
            let isRuleHasRanges = (rule) => !!(rule.ConditionModel && rule.ConditionModel.Ranges);
            this.styleSettingsProvider.cfModel.RuleModels.filter(rule => !isRuleHasRanges(rule)).forEach(rule => {
                if (rule.ShowInLegend && rule.DisplayName) {
                    let color = this._getRuleColors(rule)[0];
                    cfLegends.push(this._getConditionalFormattingLegendItem(rule.DisplayName, color));
                }
            });
            this.styleSettingsProvider.cfModel.RuleModels.filter(rule => isRuleHasRanges(rule)).forEach(rule => {
                if (rule.ShowInLegend)
                    cfLegends = cfLegends.concat(this._getConditionalFormattingRangeLegendItems(rule));
            });
        }
        return cfLegends;
    }
    _getConditionalFormattingRangeLegendItems(rule) {
        let colors = this._getRuleColors(rule), maxPercentValue = 1, positiveInfinitySymbol = '∞', negativeInfinitySymbol = '-∞', legendItems = [], rangeConditionModel = rule.ConditionModel, dataItemFormat = this.multiData.getMeasureFormat(rule.CalcByDataId) || this.multiData.getDimensionFormat(rule.CalcByDataId);
        for (let index = rangeConditionModel.Ranges.length - 1; index >= 0; index--) {
            let rangeModel = rangeConditionModel.Ranges[index], leftValueString, rightValueString, leftValue = rangeModel.LeftValue, rightValue = rangeModel.RightValue, color = colors[index];
            if (rangeConditionModel.ValueType === 'Percent') {
                leftValueString = _formatter_1.formatPercentValue(leftValue ? leftValue / 100 : maxPercentValue);
                rightValueString = _formatter_1.formatPercentValue(rightValue / 100);
            }
            else {
                leftValueString = leftValue ? _formatter_1.format(_date_utils_1.tryConvertToDateTime(leftValue), dataItemFormat) : positiveInfinitySymbol;
                rightValueString = rightValue ? _formatter_1.format(_date_utils_1.tryConvertToDateTime(rightValue), dataItemFormat) : negativeInfinitySymbol;
            }
            let legendDescription = string_1.format(_localizer_1.localizer.getString(_localization_ids_1.localizationId.LegendItemFormatString), leftValueString, rightValueString);
            legendItems.push(this._getConditionalFormattingLegendItem(legendDescription, color));
        }
        return legendItems;
    }
    _getConditionalFormattingLegendItem(desription, color) {
        return {
            name: desription,
            color: color,
        };
    }
    _getRuleColors(rule) {
        return this.cfModel.FormatConditionStyleSettings
            .filter(style => style.RuleIndex == this.cfModel.RuleModels.indexOf(rule))
            .map(style => this.styleSettingsProvider.getBackColorFromStyleSettingsModel(style));
    }
    _valuesContainsValueSet(values, valueSet) {
        for (var i = 0; i < values.length; i++) {
            if (values[i].length !== valueSet.length)
                continue;
            var equal = true;
            for (var j = 0; j < values[i].length; j++) {
                if (values[i][j] !== valueSet[j]) {
                    equal = false;
                    break;
                }
            }
            if (equal)
                return true;
        }
        return false;
    }
    _getLastSeriesType(colorMeasureId) {
        var panes = this.viewModel.Panes;
        for (var i = panes.length - 1; i >= 0; i--) {
            for (var j = panes[i].SeriesTemplates.length - 1; j >= 0; j--) {
                if (colorMeasureId === panes[i].SeriesTemplates[j].ColorMeasureID) {
                    return _chart_helper_1.chartHelper.convertSeriesType(panes[i].SeriesTemplates[j].SeriesType);
                }
            }
        }
    }
    _getDisplayTextBySeriesTemplates() {
        var displayTexts = [];
        this._iterateSeriesTemplates((pane, seriesTemplate, paneIndex, templateIndex) => {
            var name = seriesTemplate.Name;
            if (displayTexts.indexOf(name) === -1) {
                displayTexts.push(name);
            }
        });
        return displayTexts.join(', ');
    }
    _iterateSeriesTemplates(proc) {
        this.viewModel.Panes.forEach((pane, paneIndex) => {
            pane.SeriesTemplates.forEach(seriesTemplate => {
                proc(pane, seriesTemplate, paneIndex);
            });
        });
    }
    _isSelectionTagsRequired() {
        return true;
    }
    _createSeriesItem(seriesInfo, includeTags, encodeHtml) {
        var that = this, seriesItem = {
            argumentField: 'x',
            type: seriesInfo.seriesType,
            showInLegend: seriesInfo.seriesType === 'stock' || seriesInfo.seriesType === 'candlestick'
        }, setNamesListProc = function (names) {
            if (seriesInfo.originalSeriesType === 'HighLowClose') {
                seriesItem[names[0]] = 'nullColumn';
                names.splice(0, 1);
            }
            for (var i = 0; i < Math.min(names.length, seriesInfo.valueFields.length); i++) {
                seriesItem[names[i]] = seriesInfo.valueFields[i].name;
            }
        };
        if (_utils_1.type.isDefined(seriesInfo.title)) {
            seriesItem.name = seriesInfo.title;
        }
        if (_utils_1.type.isDefined(seriesInfo.paneName)) {
            seriesItem.pane = seriesInfo.paneName;
        }
        if (includeTags) {
            seriesItem.tag = {
                axisPoint: seriesInfo.axisPoint,
                dataMembers: seriesInfo.dataMembers,
                valueFormats: seriesInfo.valueFormats,
                colorMeasureId: seriesInfo.colorMeasureId
            };
        }
        seriesItem.point = {
            visible: seriesInfo.pointVisible
        };
        seriesItem[_common_1.DashboardDataIdField] = seriesInfo.dataId;
        switch (seriesItem.type) {
            case 'rangebar':
            case 'rangearea':
                setNamesListProc(['rangeValue1Field', 'rangeValue2Field']);
                break;
            case 'bubble':
                setNamesListProc(['valueField', 'sizeField']);
                break;
            case 'stock':
            case 'candlestick':
                setNamesListProc(['openValueField', 'highValueField', 'lowValueField', 'closeValueField']);
                break;
            default:
                setNamesListProc(['valueField']);
                break;
        }
        seriesItem.axis = (seriesInfo.paneName || '') + (seriesInfo.plotOnSecondaryAxis ? 'secondary' : 'primary');
        if (seriesInfo.ignoreEmptyPoints) {
            seriesItem.ignoreEmptyPoints = seriesInfo.ignoreEmptyPoints;
        }
        if (that.showPointLabels(seriesInfo.pointLabel)) {
            var pointLabel = seriesInfo.pointLabel;
            seriesItem.label = {
                visible: true,
                rotationAngle: pointLabel.rotationAngle,
                customizeText: function () {
                    return that._customizePointLabelText(this, pointLabel, seriesInfo);
                }
            };
            if (seriesItem.type === 'bar') {
                seriesItem.label.showForZeroValues = pointLabel.showForZeroValues;
            }
            if (seriesItem.type === 'bar' || seriesItem.type === 'bubble') {
                seriesItem.label.position = pointLabel.position;
            }
            else if (seriesItem.type === 'fullstackedbar') {
                seriesItem.label.position = 'inside';
            }
        }
        var color = undefined;
        if (that.viewModel.IsDefaultColorizationDisabled)
            color = that.styleSettingsProvider.getDefaultBackColor();
        else if (_utils_1.type.isDefined(seriesInfo.colorMeasureId)) {
            color = that._getColorFromData(that._argumentAxisPoints[0], seriesInfo.axisPoint, seriesInfo.colorMeasureId);
        }
        let cfColor = that.getConditionalFormattingSeriesColor(seriesInfo.axisPoint, seriesInfo.dataMembers[0]);
        if (cfColor)
            color = cfColor;
        if (_chart_helper_1.chartHelper.isSeriesColorSupported(seriesItem.type)) {
            var argumentRootAxisPoint = this.multiData.getAxis(item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis).getRootPoint();
            color = that._getElementCustomColor(argumentRootAxisPoint, seriesInfo.axisPoint, seriesInfo.dataMembers, color);
        }
        if (color) {
            seriesItem.color = color;
        }
        if (_chart_helper_1.chartHelper.isStackedAreaType(seriesItem.type)) {
            seriesItem.opacity = 1;
        }
        return seriesItem;
    }
    _customizePointLabelText(valueContainer, pointLabel, seriesInfo) {
        var that = this, contentType = pointLabel.contentType, formatArgumentProc = function () {
            return that.getArgumentText({ value: valueContainer.argument });
        }, formatValueProc = function () {
            var formats = seriesInfo.valueFormats;
            switch (seriesInfo.seriesType) {
                case 'rangebar':
                case 'rangearea':
                    return that._formatValuesList([valueContainer.value], [formats[valueContainer.index]], false);
                case 'bubble':
                    return that._formatValuesList([valueContainer.value, valueContainer.size], formats, false);
                case 'stock':
                case 'candlestick':
                    return that._formatOpenHighLowCloseValues([valueContainer.openValue, valueContainer.highValue, valueContainer.lowValue, valueContainer.closeValue], formats, seriesInfo.originalSeriesType !== 'HighLowClose', false, '\n\r');
                default:
                    return that._formatValuesList([valueContainer.value], formats, false);
            }
        };
        let hasArgument = (contentType & enums_1.PointLabelContentType.Argument) > 0, hasSeriesName = (contentType & enums_1.PointLabelContentType.SeriesName) > 0, hasValue = (contentType & enums_1.PointLabelContentType.Value) > 0, hasPercent = (contentType & enums_1.PointLabelContentType.Percent) > 0 && this._getPercentSupported(seriesInfo);
        let firstPart = '';
        let secondPart = '';
        let argument = hasArgument ? formatArgumentProc() : '';
        let series = hasSeriesName ? valueContainer.seriesName : '';
        let value = hasValue ? formatValueProc() : '';
        let percent = hasPercent ? _formatter_1.formatPercentValue(valueContainer.percent) : '';
        if (hasArgument) {
            firstPart = hasSeriesName ? `${argument} (${series})` : `${argument}`;
        }
        else if (hasSeriesName) {
            firstPart = `${series}`;
        }
        if (hasValue) {
            secondPart = hasPercent ? `${value} (${percent})` : `${value}`;
        }
        else if (hasPercent) {
            secondPart = `${percent}`;
        }
        return [`${firstPart}`, `${secondPart}`].filter(s => s != '').join(': ');
    }
    _getPercentSupported(seriesInfo) {
        var series = ['fullstackedbar', 'fullstackedline', 'fullstackedarea', 'fullstackedsplinearea'];
        return series.indexOf(seriesInfo.seriesType) >= 0;
    }
    _formatOpenHighLowCloseValues(values, formats, hasOpenValueField, encodeHtml, delimiter) {
        var result = '', delimiter = delimiter || ' ', formatsLength = formats ? formats.length : 0, i, formatIndex, valueNames = [
            _localizer_1.localizer.getString(_localization_ids_1.localizationId.OpenCaption),
            _localizer_1.localizer.getString(_localization_ids_1.localizationId.HighCaption),
            _localizer_1.localizer.getString(_localization_ids_1.localizationId.LowCaption),
            _localizer_1.localizer.getString(_localization_ids_1.localizationId.CloseCaption)
        ];
        if (values && (formatsLength > 0) && (formatsLength <= values.length)) {
            for (formatIndex = 0, i = hasOpenValueField ? 0 : 1; formatIndex < formatsLength; formatIndex++, i++) {
                result += delimiter + valueNames[i] + ': ' + this._formatValue(values[i], formats[formatIndex], encodeHtml);
            }
        }
        return result;
    }
    _formatValuesList(valuesList, formats, encodeHtml) {
        var result = '';
        if (formats && formats.length === valuesList.length) {
            for (var i = 0; i < valuesList.length; i++) {
                result = result + (i === 0 ? '' : ' - ') + this._formatValue(valuesList[i], formats[i], encodeHtml);
            }
        }
        return result;
    }
    _formatValue(value, format, encodeHtml) {
        var text = _formatter_1.format(value ? value : 0, format);
        return encodeHtml ? _utils_1.encodeHtml(text) : text;
    }
    _isNumericDataType(type) {
        return type == 'Integer' || type == 'Float' || type == 'Double' || type == 'Decimal';
    }
    _convertContentType(typeModel) {
        return enums_1.parsePointLabelContentType(typeModel);
    }
    _showPointMarker(seriesTemplate) {
        if (seriesTemplate.SeriesType === 'Point') {
            return true;
        }
        else if (exports.allowedTypesForShowPointMarkers.indexOf(seriesTemplate.SeriesType) !== -1) {
            return seriesTemplate.ShowPointMarkers;
        }
        else {
            return false;
        }
    }
    checkSeriesTemplatePointLabels(seriesTemplateViewModel) {
        return this.showPointLabels(this._getPointLabelInfo(seriesTemplateViewModel.PointLabel));
    }
    showPointLabels(pointLabelInfo) {
        return pointLabelInfo && pointLabelInfo.contentType != enums_1.PointLabelContentType.None;
    }
    _getPointLabelInfo(pointLabelViewModel) {
        if (pointLabelViewModel) {
            return {
                showPointLabels: pointLabelViewModel.ShowPointLabels,
                rotationAngle: _chart_helper_1.chartHelper.convertPointLabelRotationAngle(pointLabelViewModel.Orientation),
                position: _chart_helper_1.chartHelper.convertPointLabelPosition(pointLabelViewModel.Position),
                showForZeroValues: pointLabelViewModel.ShowForZeroValues,
                contentType: this._convertContentType(pointLabelViewModel.ContentType),
                scatterContent: pointLabelViewModel.ScatterContent
            };
        }
    }
}
exports.chartDataControllerProto = chartDataControllerProto;
exports.allowedTypesForShowPointMarkers = ['Line', 'Spline', 'StepLine', 'StackedLine', 'FullStackedLine', 'SplineArea', 'Area', 'StepArea', 'RangeArea'];


/***/ }),

/***/ 3757:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.chartDataController = void 0;
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const _chart_data_controller_proto_1 = __webpack_require__(45709);
class chartDataController extends _chart_data_controller_proto_1.chartDataControllerProto {
    getArgumentBindingValue(argumentPoint, pointIndex) {
        if (this.isQualitativeArgument() || this.isDiscreteArgument()) {
            if (argumentPoint.getParent() != null) {
                return pointIndex.toString();
            }
            else {
                return _localizer_1.localizer.getString(_localization_ids_1.localizationId.ChartTotalValue);
            }
        }
        return argumentPoint.getValue();
    }
}
exports.chartDataController = chartDataController;


/***/ }),

/***/ 40018:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.choroplethMapDataController = void 0;
const $ = __webpack_require__(65311);
const _data_controller_base_1 = __webpack_require__(28097);
class choroplethMapDataController extends _data_controller_base_1.dataControllerBase {
    constructor(options) {
        super(options);
        this.axisCache = {};
        this.isEmpty = true;
        this._prepare();
    }
    _prepare() {
        var attributeId = this.viewModel.AttributeDimensionId, axis = this.multiData.getAxis(), axisPoints = attributeId ? axis.getPointsByDimension(attributeId) : [];
        this.isEmpty = axisPoints.length == 0;
        for (var i = 0; i < axisPoints.length; i++) {
            let key = axisPoints[i].getValue();
            this.axisCache[key] = axisPoints[i];
        }
    }
    hasRecords() {
        return !this.isEmpty;
    }
    getDeltaValue(attribute, deltaId) {
        var axisPoint = this.axisCache[attribute];
        return axisPoint ? this.multiData.getSlice(axisPoint).getDeltaValue(deltaId) : null;
    }
    getValue(attribute, measureName) {
        var measureValue = this._getMeasureValue(attribute, measureName);
        return measureValue ? measureValue.getValue() : null;
    }
    getDisplayText(attribute, measureName) {
        var measureValue = this._getMeasureValue(attribute, measureName);
        return measureValue ? measureValue.getDisplayText() : null;
    }
    getUniqueValue(attribute) {
        var axisPoint = this.axisCache[attribute];
        return axisPoint ? axisPoint.getUniqueValue() : null;
    }
    getMinMax(measureName) {
        var that = this, min, max, value;
        $.each(this.axisCache, function (key, axisPoint) {
            value = that.multiData.getSlice(axisPoint).getMeasureValue(measureName).getValue();
            if (min == null || value < min)
                min = value;
            if (max == null || value > max)
                max = value;
        });
        return {
            min: min,
            max: max
        };
    }
    getMeasureDescriptorById(valueId) {
        return this.multiData.getMeasureById(valueId);
    }
    _getMeasureValue(attribute, measureName) {
        var axisPoint = this.axisCache[attribute];
        return axisPoint ? this.multiData.getSlice(axisPoint).getMeasureValue(measureName) : null;
    }
}
exports.choroplethMapDataController = choroplethMapDataController;


/***/ }),

/***/ 28097:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dataControllerBase = exports.DEFAULT_SUBTITLE_SEPARATOR = exports.DATA_POSTFIX = void 0;
const _render_helper_1 = __webpack_require__(39336);
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const _utils_1 = __webpack_require__(7590);
const _z_index_1 = __webpack_require__(56330);
exports.DATA_POSTFIX = '_Data';
exports.DEFAULT_SUBTITLE_SEPARATOR = ' - ';
class dataControllerBase {
    constructor(options) {
        this.deltaIndicatorTypes = ['none', 'up', 'down', 'warning'];
        this.multiData = options ? options.multiData : undefined;
        this.viewModel = options ? options.viewModel : undefined;
        this.cfModel = options ? options.cfModel : undefined;
        this.drillDownState = options ? options.drillDownState : undefined;
        this.useNeutralFilterMode = options ? options.useNeutralFilterMode : undefined;
    }
    isMultiselectable() {
        return false;
    }
    update(selectedValues, encodeHtml) {
    }
    getTitle(axisPoint, separator, saveOrder) {
        var axisName = axisPoint.getAxisName(), values;
        if (this.drillDownState[axisName]) {
            var text = axisPoint.getDisplayText();
            return text == undefined ? '' : text;
        }
        else {
            values = axisPoint.getDisplayPath();
            if (!saveOrder) {
                values = values.reverse();
            }
            return values.join(separator ? separator : exports.DEFAULT_SUBTITLE_SEPARATOR);
        }
    }
    _getMeasureValueByAxisPoints(axisPoints, cfMeasureId) {
        var slice = this._getSlice(axisPoints);
        return slice.getConditionalFormattingMeasureValue(cfMeasureId);
    }
    _getSlice(axisPoints) {
        var slice = this.multiData;
        axisPoints.forEach(axisPoint => {
            slice = slice.getSlice(axisPoint);
        });
        return slice;
    }
    _getZeroPosition(zeroPositionMeasureId, columnAxisName, rowAxisName) {
        var that = this, currentZeroPosition, zeroPosition, columnRootPoint, rowRootPoint;
        columnRootPoint = that.multiData.getAxis(columnAxisName).getRootPoint();
        rowRootPoint = that.multiData.getAxis(rowAxisName).getRootPoint();
        currentZeroPosition = that._getMeasureValueByAxisPoints([columnRootPoint, rowRootPoint], zeroPositionMeasureId);
        if (currentZeroPosition !== undefined && currentZeroPosition !== null)
            zeroPosition = currentZeroPosition;
        return zeroPosition;
    }
    _getStyleIndexes(rule, cellInfo, points) {
        return null;
    }
    _getStyleSettingsInfoCore(cellInfo, rules, columnAxisName, rowAxisName) {
        var that = this, currentStyleIndexes = [], uniqueIndexes = [], styleAndRuleMappingTable = {}, ruleIndex, currentNormalizedValue, normalizedValue, zeroPosition, styleSettingsInfo, points = [];
        if (rules.length > 0) {
            rules.forEach(rule => {
                currentStyleIndexes = that._getStyleIndexes(rule, cellInfo, points);
                if (currentStyleIndexes && currentStyleIndexes.length > 0) {
                    ruleIndex = that.cfModel.RuleModels ? that.cfModel.RuleModels.indexOf(rule) : -1;
                    currentStyleIndexes.forEach(styleIndex => {
                        if (uniqueIndexes[styleIndex] === undefined) {
                            uniqueIndexes.push(styleIndex);
                            styleAndRuleMappingTable[styleIndex] = ruleIndex;
                        }
                    });
                }
                currentNormalizedValue = that._getMeasureValueByAxisPoints(points, rule.NormalizedValueMeasureId);
                if (currentNormalizedValue !== undefined && currentNormalizedValue !== null) {
                    normalizedValue = currentNormalizedValue;
                    zeroPosition = that._getZeroPosition(rule.ZeroPositionMeasureId, columnAxisName, rowAxisName);
                }
            });
            styleSettingsInfo = {
                styleIndexes: uniqueIndexes,
                styleAndRuleMappingTable: styleAndRuleMappingTable
            };
            if (normalizedValue !== undefined && zeroPosition !== undefined) {
                styleSettingsInfo.normalizedValue = normalizedValue;
                styleSettingsInfo.zeroPosition = zeroPosition;
            }
        }
        return styleSettingsInfo;
    }
    _generateSparklineOptions(data, options, format) {
        return {
            dataSource: data,
            type: options.ViewType.toLowerCase(),
            onIncidentOccurred: _render_helper_1.RenderHelper.widgetIncidentOccurred,
            showMinMax: options.HighlightMinMaxPoints,
            showFirstLast: options.HighlightStartEndPoints,
            tooltip: {
                _justify: true,
                container: _utils_1.tooltipContainerSelector,
                customizeTooltip: function () {
                    var startText = _localizer_1.localizer.getString(_localization_ids_1.localizationId.sparkline.TooltipStartValue), endText = _localizer_1.localizer.getString(_localization_ids_1.localizationId.sparkline.TooltipEndValue), minText = _localizer_1.localizer.getString(_localization_ids_1.localizationId.sparkline.TooltipMinValue), maxText = _localizer_1.localizer.getString(_localization_ids_1.localizationId.sparkline.TooltipMaxValue), html = "<table style='border-spacing:0px;'>", template = "</td><td style='width: 15px'></td><td style='text-align: right'>";
                    html += '<tr><td>' + startText + template + format(this.originalFirstValue) + '</td></tr>';
                    html += '<tr><td>' + endText + template + format(this.originalLastValue) + '</td></tr>';
                    html += '<tr><td>' + minText + template + format(this.originalMinValue) + '</td></tr>';
                    html += '<tr><td>' + maxText + template + format(this.originalMaxValue) + '</td></tr>';
                    html += '</table>';
                    return { html: html };
                },
                zIndex: _z_index_1.zIndex.dashboardItemTooltips
            }
        };
    }
    _convertIndicatorType(type) {
        return this.deltaIndicatorTypes[type];
    }
    _findAxisPoint(dataId, axisPoint) {
        if (axisPoint) {
            while (axisPoint.getDimension() && axisPoint.getDimension().id !== dataId) {
                axisPoint = axisPoint.getParent();
            }
        }
        return axisPoint && axisPoint.getParent() ? axisPoint : null;
    }
}
exports.dataControllerBase = dataControllerBase;


/***/ }),

/***/ 99909:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.treeViewDataController = exports.listViewDataController = exports.filterElementDataController = exports.KEY_EXPR = exports.VALUE_EXPR = void 0;
const legacy_settings_1 = __webpack_require__(42649);
const item_data_axis_names_1 = __webpack_require__(51101);
const special_values_1 = __webpack_require__(91571);
const _hashset_wrapper_1 = __webpack_require__(77931);
const _localizer_1 = __webpack_require__(88084);
const _utils_1 = __webpack_require__(7590);
const _data_controller_base_1 = __webpack_require__(28097);
exports.VALUE_EXPR = 'value';
exports.KEY_EXPR = 'key';
class filterElementDataController extends _data_controller_base_1.dataControllerBase {
    constructor(options) {
        super(options);
        this._reset();
    }
    getAllItemIndex() {
        return this.dataSource ? this.dataSource.indexOf(_localizer_1.ALL_ELEMENT) : -1;
    }
    getDataSourceItemKey(item) {
        return item[exports.KEY_EXPR];
    }
    getDataSourceItemByKey(key) {
        return this.dataSource.filter(item => item[exports.KEY_EXPR] === key)[0];
    }
    isAllSelected() {
        return this.dataSource && this.selection ? (this.dataSource.length === this.selection.length) : false;
    }
    update(selectedValues, encodeHtml, selectionOnly = false) {
        this._reset(selectionOnly);
        var hashset = new _hashset_wrapper_1.HashsetWrapper(selectedValues || []);
        var key = 0, applySelection = (dataItem) => {
            if (hashset.contains(dataItem[exports.VALUE_EXPR])) {
                this.selection.push(dataItem);
            }
            this.fullSelection.push(dataItem);
        }, hasAllElement = this.viewModel && this.viewModel.ShowAllValue && !this.isMultiselectable() && !this.useNeutralFilterMode, points = this.multiData ? this.multiData.getAxis(item_data_axis_names_1.itemDataAxisNames.defaultAxis).getPoints(true) : [];
        if (selectionOnly) {
            this.dataSource.forEach(dataItem => applySelection(dataItem));
        }
        else {
            if (hasAllElement && points.length > 0) {
                this.dataSource.push(_localizer_1.ALL_ELEMENT);
            }
            points.forEach(point => {
                let dataItem = {
                    [exports.KEY_EXPR]: key++,
                    [exports.VALUE_EXPR]: point.getUniquePath()
                };
                if (encodeHtml) {
                    dataItem.text = this.getTitle(point, ', ', true);
                }
                else {
                    dataItem.html = this.getTitle(point, ', ', true);
                }
                this.dataSource.push(dataItem);
                applySelection(dataItem);
            });
        }
        if (hasAllElement && ((!this.useNeutralFilterMode && this.dataSource.length - 1 === this.selection.length) || (!!this.useNeutralFilterMode && !this.selection.length))) {
            this.selection.splice(0, 0, _localizer_1.ALL_ELEMENT);
            this.fullSelection.splice(0, 0, _localizer_1.ALL_ELEMENT);
        }
    }
    getInteractionValues(elements, selectedValues) {
        var hasAll = !this.isMultiselectable() && elements && elements.indexOf(_localizer_1.ALL_ELEMENT) !== -1;
        if (!!this.useNeutralFilterMode && hasAll)
            return null;
        var values = [], items = hasAll ? this.dataSource : elements;
        items.forEach(item => {
            if (item !== _localizer_1.ALL_ELEMENT) {
                values.push(this._getDataValue(item));
            }
        });
        return values;
    }
    _getDataValue(wrappedValue) {
        var itemData = (wrappedValue && wrappedValue.itemData) || wrappedValue;
        if (itemData[exports.VALUE_EXPR] != null)
            return itemData[exports.VALUE_EXPR];
        return null;
    }
    _reset(selectionOnly = false) {
        if (!selectionOnly) {
            this.dataSource = [];
        }
        this.selection = [];
        this.fullSelection = [];
    }
}
exports.filterElementDataController = filterElementDataController;
class listViewDataController extends filterElementDataController {
    constructor(options) {
        super(options);
        this.ListBoxType = {
            Checked: 'Checked',
            Radio: 'Radio'
        };
        this.ComboBoxType = {
            Standard: 'Standard',
            Checked: 'Checked'
        };
    }
    isMultiselectable() {
        return !this.viewModel || (this.viewModel.ListBoxType == this.ListBoxType.Checked) || (this.viewModel.ComboBoxType == this.ListBoxType.Checked);
    }
}
exports.listViewDataController = listViewDataController;
class treeViewDataController extends filterElementDataController {
    constructor(options) {
        super(options);
    }
    isMultiselectable() {
        return true;
    }
    getAllItemIndex() {
        return -1;
    }
    isAllSelected() {
        return false;
    }
    update(selectedValues, encodeHtml, selectionOnly = false) {
        this._reset(selectionOnly);
        if (selectionOnly)
            return this._updateSelection(selectedValues);
        var hash = _utils_1.wrapHash(selectedValues), sourceItems = this.multiData ? this.multiData.getAxis('Default').getRootPoint().getChildren() : [], key = 1, createDestNode = (sourceNode) => {
            var dataItem = {};
            dataItem[exports.KEY_EXPR] = key++;
            dataItem[exports.VALUE_EXPR] = sourceNode.getUniqueValue();
            dataItem[encodeHtml || !legacy_settings_1.LegacySettings.useLegacyTreeView ? 'text' : 'html'] = sourceNode.getDisplayText();
            if (legacy_settings_1.LegacySettings.useLegacyTreeView) {
                dataItem['expanded'] = this.viewModel.AutoExpandNodes;
            }
            return dataItem;
        }, walkTree = (sourceNode, destNodeItems, branch, nullChildCount) => {
            var children = sourceNode.getChildren();
            var nextNull = 0;
            while (children.length == 1 && children[0].getUniqueValue() === special_values_1.specialValues.olapNullValueGuid) {
                children = children[0].getChildren();
                nextNull++;
            }
            var hasChildren = (children && children.length !== 0), subDestNode = createDestNode(sourceNode), currentBranch = branch.slice();
            subDestNode.nullChildCount = nextNull;
            for (var a = 0; a < nullChildCount; a++)
                currentBranch.push(special_values_1.specialValues.olapNullValueGuid);
            currentBranch.push(subDestNode.value);
            destNodeItems.push(subDestNode);
            if (hasChildren) {
                subDestNode.items = [];
                children.forEach(node => {
                    walkTree(node, subDestNode.items, currentBranch, nextNull);
                });
            }
            else {
                for (var a = 0; a < nextNull; a++)
                    currentBranch.push(special_values_1.specialValues.olapNullValueGuid);
                if (legacy_settings_1.LegacySettings.useLegacyTreeView) {
                    subDestNode.selected = !!hash[currentBranch];
                }
                else {
                    if (!!hash[currentBranch]) {
                        this.selection.push(subDestNode[exports.KEY_EXPR]);
                    }
                }
            }
        };
        sourceItems.forEach(sourceItem => {
            walkTree(sourceItem, this.dataSource, [], 0);
        });
    }
    getInteractionValues(elements, selectedValues) {
        if (!legacy_settings_1.LegacySettings.useLegacyTreeView)
            return elements;
        var hash = _utils_1.wrapHash(selectedValues), parent = elements.length ? elements[0].parent : undefined, rootBranch = [], resultSelection = [], prepareSelectionItems = (items, parentBranch) => {
            items.forEach(item => {
                var itemBranch = parentBranch.slice(), value = this._getDataValue(item), nullChildCount = this._getDataNullChildCount(item);
                itemBranch.push(value);
                for (var a = 0; a < nullChildCount; a++)
                    itemBranch.push(special_values_1.specialValues.olapNullValueGuid);
                if (!!item.items && item.items.length) {
                    prepareSelectionItems(item.items, itemBranch);
                }
                else {
                    var isSelected = !!hash[itemBranch];
                    if ((!legacy_settings_1.LegacySettings.useLegacyTreeView && !isSelected) ||
                        (legacy_settings_1.LegacySettings.useLegacyTreeView && ((item.selected && !isSelected) || (!item.selected && isSelected)))) {
                        resultSelection.push(itemBranch);
                    }
                }
            });
        };
        while (parent) {
            rootBranch.splice(0, 0, this._getDataValue(parent));
            parent = parent.parent;
        }
        prepareSelectionItems(elements, rootBranch);
        return resultSelection;
    }
    _updateSelection(selectedValues) {
        var hash = _utils_1.wrapHash(selectedValues);
        var updateItemsSelectedState = (items, parentBranch) => {
            items.forEach(item => {
                var itemBranch = parentBranch.slice(), value = this._getDataValue(item), nullChildCount = this._getDataNullChildCount(item);
                itemBranch.push(value);
                for (var a = 0; a < nullChildCount; a++)
                    itemBranch.push(special_values_1.specialValues.olapNullValueGuid);
                if (item.items && item.items.length) {
                    updateItemsSelectedState(item.items, itemBranch);
                }
                else {
                    if (legacy_settings_1.LegacySettings.useLegacyTreeView) {
                        item.selected = !!hash[itemBranch];
                    }
                    else {
                        if (!!hash[itemBranch]) {
                            this.selection.push(item[exports.KEY_EXPR]);
                        }
                    }
                }
            });
        };
        updateItemsSelectedState(this.dataSource, []);
    }
    _getDataNullChildCount(wrappedValue) {
        var itemData = (wrappedValue && wrappedValue.itemData) || wrappedValue;
        if (itemData['nullChildCount'] != null)
            return itemData['nullChildCount'];
        return 0;
    }
}
exports.treeViewDataController = treeViewDataController;


/***/ }),

/***/ 36400:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gaugeDataController = void 0;
const _gauge_range_calculator_1 = __webpack_require__(97116);
const _utils_1 = __webpack_require__(7590);
const _kpi_data_controller_1 = __webpack_require__(78560);
class gaugeDataController extends _kpi_data_controller_1.kpiDataController {
    constructor(options) {
        super(options);
        this._gaugeRanges = {};
    }
    _iterateKpiItems(delegate) {
        var that = this;
        if (that.viewModel) {
            that.viewModel.Gauges.forEach(gauge => {
                delegate(gauge);
            });
        }
    }
    _getGaugeRange(element) {
        var elementId = element.ID, range = this._gaugeRanges[elementId], calculator;
        if (!range) {
            calculator = new _gauge_range_calculator_1.gaugeRangeCalculator({
                values: this._getGaugeValues(element),
                gaugeModel: {
                    Type: this._gaugeViewType,
                    MinValue: element.MinValue,
                    MaxValue: element.MaxValue
                }
            });
            range = calculator.getGaugeRange();
            this._gaugeRanges[elementId] = range;
        }
        return range;
    }
    _getGaugeValues(element) {
        var multiData = this.multiData, gaugeValues = [], axisPoints = this._axisPoints || [null], getMeasureValue = function (axisPoint) {
            var getMeasure = axisPoint ? multiData.getMeasureValueByAxisPoints : multiData.getMeasureValue;
            gaugeValues.push(getMeasure.call(multiData, element.ID, [axisPoint]).getValue());
        }, getDeltaValue = function (axisPoint) {
            var getDelta = axisPoint ? multiData.getDeltaValueByAxisPoints : multiData.getDeltaValue, deltaValue = getDelta.call(multiData, element.ID, [axisPoint]), actualValue = deltaValue.getActualValue(), targetValue = deltaValue.getTargetValue();
            gaugeValues.push(actualValue.getValue());
            gaugeValues.push(targetValue.getValue());
        }, getter = element.DataItemType === _utils_1.KpiValueMode.Measure ? getMeasureValue : getDeltaValue;
        axisPoints.forEach(axisPoint => {
            getter(axisPoint);
        });
        return gaugeValues;
    }
    _initialize() {
        super._initialize();
        this._gaugeViewType = this.viewModel ? this.viewModel.ViewType : undefined;
    }
}
exports.gaugeDataController = gaugeDataController;


/***/ }),

/***/ 76946:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.geoPointMapDataControllerBase = void 0;
const _data_controller_base_1 = __webpack_require__(28097);
class geoPointMapDataControllerBase extends _data_controller_base_1.dataControllerBase {
    constructor(options) {
        super(options);
        this.axisPoints = [];
        this._prepare();
    }
    getPoint(index, valueIndex) {
        var pointsCount = this._getPointsCount(index);
        return {
            lat: this._getLatitudeValue(index),
            lon: this._getLongitudeValue(index),
            latSel: this._getLatitudeUniqueValue(index),
            lonSel: this._getLongitudeUniqueValue(index),
            pointsCount: pointsCount,
            tooltipDimensions: pointsCount < 2 ? this._getTooltipDimensions(index) : [],
            tooltipMeasures: this._getTooltipMeasures(index)
        };
    }
    getCount() {
        return this.axisPoints.length;
    }
    _prepare() {
        var dimensionId = this._getAxisPointDimensionDescriptorId(), axis = this.multiData.getAxis();
        this.axisPoints = dimensionId ? axis.getPointsByDimension(dimensionId) : [];
    }
    _getAxisPointDimensionDescriptorId() {
        return this.viewModel.LongitudeDataId;
    }
    _getMeasure(index, measureName, groupByDimensionId) {
        var axisPoint = this._getAxisPoint(index);
        if (groupByDimensionId)
            axisPoint = axisPoint.getParentByDimensionId(groupByDimensionId);
        return this.multiData.getSlice(axisPoint).getMeasureValue(measureName);
    }
    _getMeasureValue(index, measureName) {
        return this._getMeasure(index, measureName).getValue();
    }
    _getMeasureDisplayText(index, measureName, groupByDimensionId) {
        return this._getMeasure(index, measureName, groupByDimensionId).getDisplayText();
    }
    _getLatitude(index) {
        var point = this._getAxisPoint(index);
        return point.getParentByDimensionId(this.viewModel.LatitudeDataId);
    }
    _getLatitudeValue(index) {
        return this._getLatitude(index).getValue();
    }
    _getLatitudeUniqueValue(index) {
        return this._getLatitude(index).getUniqueValue();
    }
    _getLongitude(index) {
        var point = this._getAxisPoint(index);
        return point.getParentByDimensionId(this.viewModel.LongitudeDataId);
    }
    _getLongitudeValue(index) {
        return this._getLongitude(index).getValue();
    }
    _getLongitudeUniqueValue(index) {
        return this._getLongitude(index).getUniqueValue();
    }
    _getPointsCount(index) {
        var axisPoint = this._getAxisPoint(index).getParentByDimensionId(this.viewModel.LongitudeDataId);
        return this.multiData.getSlice(axisPoint).getMeasureValue(this.viewModel.PointsCountDataId).getValue();
    }
    _getTooltipDimensions(index) {
        var tooltipDimensionsViewModel = this.viewModel.TooltipDimensions, tooltipDimensions = [], values, distinctValues;
        if (tooltipDimensionsViewModel) {
            for (var i = 0; i < tooltipDimensionsViewModel.length; i++) {
                var axisPoint = this._getAxisPoint(index);
                axisPoint = axisPoint.getParentByDimensionId(this.viewModel.LongitudeDataId);
                values = axisPoint.getDisplayTextsByDimensionId(tooltipDimensionsViewModel[i].DataId).filter((v, i, a) => a.indexOf(v) === i);
                distinctValues = values.filter((el, index) => {
                    return index === values.indexOf(el);
                });
                tooltipDimensions.push({
                    caption: tooltipDimensionsViewModel[i].Caption,
                    values: distinctValues
                });
            }
        }
        return tooltipDimensions;
    }
    _getTooltipMeasures(index) {
        var tooltipMeasuresViewModel = this.viewModel.TooltipMeasures;
        var tooltipMeasures = [];
        if (tooltipMeasuresViewModel) {
            for (var i = 0; i < tooltipMeasuresViewModel.length; i++) {
                tooltipMeasures.push({
                    caption: tooltipMeasuresViewModel[i].Caption,
                    value: this._getMeasureDisplayText(index, tooltipMeasuresViewModel[i].DataId, this.viewModel.LongitudeDataId)
                });
            }
        }
        return tooltipMeasures;
    }
    _getAxisPoint(index) {
        return this.axisPoints[index];
    }
}
exports.geoPointMapDataControllerBase = geoPointMapDataControllerBase;


/***/ }),

/***/ 85557:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.geoPointMapDataController = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const _geo_point_map_data_controller_base_1 = __webpack_require__(76946);
class geoPointMapDataController extends _geo_point_map_data_controller_base_1.geoPointMapDataControllerBase {
    constructor(options) {
        super(options);
    }
    getPoint(index) {
        return _jquery_helpers_1.deepExtend(super.getPoint(index), {
            text: this._getMeasureDisplayText(index, this.viewModel.ValueId)
        });
    }
}
exports.geoPointMapDataController = geoPointMapDataController;


/***/ }),

/***/ 46800:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gridDataController = void 0;
const $ = __webpack_require__(65311);
const item_data_axis_names_1 = __webpack_require__(51101);
const _grid_bar_calculator_1 = __webpack_require__(73022);
const _utils_1 = __webpack_require__(7590);
const _data_controller_base_1 = __webpack_require__(28097);
var GridColumnType = {
    Dimension: 'Dimension',
    Measure: 'Measure',
    Delta: 'Delta',
    Sparkline: 'Sparkline',
    Hyperlink: 'Hyperlink'
};
class gridDataController extends _data_controller_base_1.dataControllerBase {
    constructor(options) {
        super(options);
        var pushColumn = (columnName, columnViewModel) => {
            this._columnRepository[columnName] = {
                columnName: columnName,
                column: columnViewModel,
                barCalculator: columnViewModel.BarViewModel ? new _grid_bar_calculator_1.GridBarCalculator(columnViewModel.BarViewModel.AlwaysShowZeroLevel) : null
            };
            if (this.viewModel.SelectionDataMembers && this.viewModel.SelectionDataMembers.indexOf(columnName) !== -1) {
                this._selectionMembers.push(columnName);
            }
        };
        this._columnRepository = {};
        this._selectionMembers = [];
        if (!!this.multiData) {
            if (!!this.viewModel.HasDimensionColumns) {
                this._axisColumnPoints = this.multiData.getAxis(this.viewModel.ColumnAxisName).getPoints();
            }
            if (!!this.viewModel.SparklineAxisName) {
                this._axisSparklinePoints = this.multiData.getAxis(this.viewModel.SparklineAxisName).getPoints();
            }
            (this.viewModel.Columns || []).forEach(columnViewModel => {
                pushColumn(columnViewModel.DataId, columnViewModel);
                if (!!this._columnRepository[columnViewModel.DataId].barCalculator)
                    this.initializeColumnBarCalculator(this._columnRepository[columnViewModel.DataId]);
            });
        }
    }
    getDataSource() {
        var that = this, list = [], listItem, hasColumns = (that.viewModel.Columns || []).length > 0, axisPointsCount = !!that._axisColumnPoints ? that._axisColumnPoints.length : +hasColumns;
        for (var rowIndex = 0; rowIndex < axisPointsCount; rowIndex++) {
            listItem = { index: rowIndex };
            Object.keys(that._columnRepository).forEach(columnName => {
                let columnInfo = that._columnRepository[columnName];
                var valueItem = that._getValueItem(columnInfo, rowIndex);
                listItem[columnName] = valueItem.getValue();
                if (columnInfo.column.ColumnType === GridColumnType.Hyperlink && !!columnInfo.column.DataAttributeId) {
                    listItem[columnName + '_' + columnInfo.column.DataAttributeId] = valueItem.getUriValue();
                }
            });
            list.push(listItem);
        }
        return list;
    }
    initializeColumnBarCalculator(barColumn) {
        let columnValues = [];
        const axisPointsCount = !!this._axisColumnPoints ? this._axisColumnPoints.length : 1;
        for (let rowIndex = 0; rowIndex < axisPointsCount; rowIndex++)
            columnValues.push(this._getValueItem(barColumn, rowIndex).getValue());
        barColumn.barCalculator.initialize(Math.min(...columnValues), Math.max(...columnValues));
    }
    getValueItem(columnName, rowIndex) {
        return this._getValueItem(this._columnRepository[columnName], rowIndex);
    }
    _getValueItem(columnInfo, rowIndex) {
        var that = this;
        var columnName = columnInfo.columnName;
        switch (columnInfo.column.ColumnType) {
            case GridColumnType.Measure:
                if (columnInfo.column.DisplayMode === 'Bar') {
                    return this._getBarCellValue(columnName, rowIndex, columnInfo.barCalculator);
                }
                else {
                    return this._getMeasureCellValue(columnName, rowIndex);
                }
            case GridColumnType.Delta:
                return that._getDeltaValue(columnName, rowIndex, columnInfo.column.DisplayMode === 'Bar' ? columnInfo.barCalculator : null, columnInfo.column.DeltaValueType, columnInfo.column.IgnoreDeltaColor);
            case GridColumnType.Sparkline:
                return that._getSparklineCellValues(columnName, rowIndex, columnInfo.column.SparklineOptions);
            case GridColumnType.Hyperlink:
                return that._getCellValue(columnName, columnInfo.column.DataAttributeId, rowIndex);
            case GridColumnType.Dimension:
                return that._getCellValue(columnName, null, rowIndex);
        }
    }
    getSelectionValues(values) {
        var that = this, point, resultPoint, result = [], selectionMembers = that._selectionMembers, fit, columns = that.viewModel.Columns, visibleDimensions = columns.map(function (column) { return column.DataId; });
        if (values.length > selectionMembers.length)
            values = values.slice(-selectionMembers.length);
        $.each(that._axisColumnPoints, function (index, axisPoint) {
            fit = false;
            $.each(selectionMembers, function (memberIndex, member) {
                point = that._findAxisPoint(member, axisPoint);
                if (point && values.length > memberIndex) {
                    if (!_utils_1.checkValuesAreEqual(point.getUniqueValue(), values[memberIndex], true)) {
                        fit = false;
                        return false;
                    }
                    resultPoint = point;
                }
                fit = true;
            });
            if (fit && resultPoint) {
                result = resultPoint._selectPath(function (point) {
                    var index = visibleDimensions.indexOf(point.getDimension().id);
                    if (index === -1 || columns[index].DisplayMode != 'Image')
                        return point.getUniqueValue();
                    else
                        return;
                });
                return;
            }
        });
        return result;
    }
    getSelectedRowKeys(valuesSet) {
        var that = this, keys = [], selectionMembers = that._selectionMembers, checkAxisPoint = function (axisPoint, values) {
            var point;
            for (var i = 0; i < values.length; i++) {
                point = that._findAxisPoint(selectionMembers[i], axisPoint);
                if (!_utils_1.checkValuesAreEqual(point.getUniqueValue(), values[i], true))
                    return false;
            }
            return true;
        };
        $.each(that._axisColumnPoints, function (index, axisPoint) {
            $.each(valuesSet, function (_, values) {
                if (values.length > selectionMembers.length)
                    values = values.slice(-selectionMembers.length);
                if (checkAxisPoint(axisPoint, values)) {
                    keys.push(index);
                    return;
                }
            });
        });
        return keys;
    }
    getDimensionValues(rowIndex) {
        let columnAxisPoint = this._getColumnAxisPoint(rowIndex);
        return columnAxisPoint ? columnAxisPoint.getUniquePath() : [];
    }
    getTotalValue(measureId) {
        return this.multiData.getMeasureValue(measureId).getDisplayText();
    }
    _getBarCellValue(columnName, rowIndex, barCalculator) {
        var that = this, item = this.multiData.getMeasureValueByAxisPoints(columnName, that._getPointArray(rowIndex));
        barCalculator.addValue(rowIndex, item);
        return {
            getValue: function () {
                return item.getValue();
            },
            getData: function () {
                return that._getBarData(barCalculator, item, rowIndex);
            },
            getStyleSettingsInfo: function () {
                return that._getStyleSettingsInfo(columnName, rowIndex);
            }
        };
    }
    _getBarData(barCalculator, item, rowIndex) {
        return {
            zeroValue: barCalculator.getZeroPosition(),
            normalizedValue: barCalculator.getNormalizedValue(rowIndex || 0),
            text: item.getDisplayText()
        };
    }
    _getMeasureCellValue(columnName, rowIndex) {
        var that = this, item = that.multiData.getMeasureValueByAxisPoints(columnName, that._getPointArray(rowIndex)), value = item.getValue();
        return {
            getValue: function () {
                return value;
            },
            getData: function () {
                return {
                    value: item.getValue(),
                    displayText: item.getDisplayText()
                };
            },
            getStyleSettingsInfo: function () {
                return that._getStyleSettingsInfo(columnName, rowIndex);
            }
        };
    }
    _getCellValue(columnName, uriColumnName, rowIndex) {
        var that = this, item = undefined, uriItem = !!uriColumnName ? that.multiData.getMeasureValueByAxisPoints(uriColumnName, that._getPointArray(rowIndex)) : null, obtainItem = function () {
            if (item === undefined) {
                item = that._findAxisPoint(columnName, that._getColumnAxisPoint(rowIndex)) || {
                    getValue: function () {
                        return undefined;
                    },
                    getUniqueValue: function () {
                        return undefined;
                    },
                    getDisplayText: function () {
                        return '';
                    }
                };
            }
            return item;
        };
        var cellValue = {
            getValue: function () {
                return obtainItem().getValue();
            },
            getUniqueValue: function () {
                return obtainItem().getUniqueValue();
            },
            getData: function () {
                return {
                    value: obtainItem().getValue(),
                    displayText: obtainItem().getDisplayText()
                };
            },
            getStyleSettingsInfo: function () {
                return that._getStyleSettingsInfo(columnName, rowIndex);
            }
        };
        cellValue.getUriValue = function () {
            return !!uriItem ? uriItem.getValue() : obtainItem().getDisplayText();
        };
        return cellValue;
    }
    _getStyleSettingsInfo(columnName, rowIndex) {
        var that = this, rules = [], cellInfo = {
            rowIndex: rowIndex
        };
        if (that.cfModel) {
            rules = $.grep(that.cfModel.RuleModels, function (rule) {
                return rule.ApplyToRow || rule.ApplyToDataId === columnName;
            });
        }
        return that._getStyleSettingsInfoCore(cellInfo, rules, that.viewModel.ColumnAxisName, item_data_axis_names_1.itemDataAxisNames.defaultAxis);
    }
    _getStyleIndexes(rule, cellInfo, points) {
        var that = this, axisPoint, currentStyleIndexes, styleIndexes = [];
        axisPoint = cellInfo.rowIndex !== undefined ? that._getAxisPoint(cellInfo.rowIndex, rule.CalcByDataId) : undefined;
        if (axisPoint)
            points.push(axisPoint);
        currentStyleIndexes = that._getMeasureValueByAxisPoints(points, rule.FormatConditionMeasureId);
        if (currentStyleIndexes) {
            styleIndexes = styleIndexes.concat(currentStyleIndexes);
        }
        return styleIndexes;
    }
    _getAxisPoint(rowIndex, columnInfo) {
        var axisPoint = rowIndex !== undefined && !!this._axisColumnPoints ? this._axisColumnPoints[rowIndex] : undefined, correctAxisPoint = axisPoint ? this._findAxisPoint(columnInfo, axisPoint) : undefined;
        return correctAxisPoint || axisPoint;
    }
    _getDeltaValue(columnName, rowIndex, barCalculator, deltaType, useDefaultColor) {
        var that = this, deltaValue = null, deltaValueItem = null, measureValue = null, deltaDesriptor = that.multiData.getDeltaById(columnName), measureItem, idBarDisplayMode = !!barCalculator, getStyleSettingsInfo = function (columnName, rowIndex) {
            return that._getStyleSettingsInfo(columnName, rowIndex);
        };
        if (deltaDesriptor) {
            deltaValue = that.multiData.getDeltaValueByAxisPoints(columnName, that._getPointArray(rowIndex));
            deltaValueItem = that._getDeltaValueItem(deltaValue, deltaType);
            if (idBarDisplayMode)
                barCalculator.addValue(rowIndex, deltaValueItem);
            return {
                getValue: function () {
                    return deltaValueItem.getValue();
                },
                getData: function () {
                    if (idBarDisplayMode) {
                        return that._getBarData(barCalculator, deltaValueItem, rowIndex);
                    }
                    else {
                        return {
                            type: that._convertIndicatorType(deltaValue.getIndicatorType().getValue()),
                            hasPositiveMeaning: deltaValue.getIsGood().getValue(),
                            text: {
                                value: deltaValueItem.getDisplayText(),
                                useDefaultColor: useDefaultColor
                            }
                        };
                    }
                },
                getStyleSettingsInfo: function () {
                    return that._getStyleSettingsInfo(columnName, rowIndex);
                }
            };
        }
        else {
            measureItem = that.multiData.getMeasureValueByAxisPoints(columnName, that._getPointArray(rowIndex));
            if (idBarDisplayMode)
                barCalculator.addValue(rowIndex, measureItem);
            return {
                getValue: function () {
                    return measureItem.getValue();
                },
                getData: function () {
                    if (idBarDisplayMode) {
                        return that._getBarData(barCalculator, measureItem, rowIndex);
                    }
                    else {
                        return {
                            type: null,
                            hasPositiveMeaning: null,
                            text: {
                                value: measureItem.getDisplayText(),
                                useDefaultColor: null
                            }
                        };
                    }
                },
                getStyleSettingsInfo: function () {
                    return that._getStyleSettingsInfo(columnName, rowIndex);
                }
            };
        }
    }
    _getDeltaValueItem(deltaValue, deltaValueType) {
        switch (deltaValueType) {
            case 'ActualValue':
                return deltaValue.getActualValue();
            case 'AbsoluteVariation':
                return deltaValue.getAbsoluteVariation();
            case 'PercentVariation':
                return deltaValue.getPercentVariation();
            case 'PercentOfTarget':
                return deltaValue.getPercentOfTarget();
            case 'TargetValue':
                return deltaValue.getTargetValue();
        }
    }
    _getSparklineCellValues(columnName, rowIndex, sparklineOptions) {
        var that = this, measureDescriptor = that.multiData.getMeasureById(columnName), axisPoint = that._getPointArray(rowIndex), getValues = function (getter) {
            var result = [];
            if (!!that._axisSparklinePoints) {
                $.each(that._axisSparklinePoints, function (_, sparklinePoint) {
                    result.push(getter(that.multiData.getMeasureValueByAxisPoints(columnName, axisPoint.concat(sparklinePoint))));
                });
            }
            else {
                result.push(getter(that.multiData.getMeasureValueByAxisPoints(columnName, axisPoint)));
            }
            return result;
        }, values = getValues(function (item) {
            var value = item.getValue();
            return value || 0;
        });
        return {
            getValue: function () {
                return values;
            },
            getData: function () {
                var valuesItems = getValues(function (item) {
                    return item;
                }), startValue = valuesItems[0].getValue(), endValue = valuesItems[valuesItems.length - 1].getValue();
                return {
                    sparkline: that._generateSparklineOptions(values, sparklineOptions, measureDescriptor.format),
                    startText: startValue ? valuesItems[0].getDisplayText() : measureDescriptor.format(0),
                    endText: endValue ? valuesItems[valuesItems.length - 1].getDisplayText() : measureDescriptor.format(0)
                };
            },
            getStyleSettingsInfo: function () {
                return that._getStyleSettingsInfo(columnName, rowIndex);
            }
        };
    }
    _getColumnAxisPoint(rowIndex) {
        return !!this._axisColumnPoints ? this._axisColumnPoints[rowIndex] : undefined;
    }
    _getPointArray(rowIndex) {
        var point = this._getColumnAxisPoint(rowIndex), array = [];
        if (point)
            array.push(point);
        return array;
    }
}
exports.gridDataController = gridDataController;


/***/ }),

/***/ 61724:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.imageDataController = void 0;
const _data_controller_base_1 = __webpack_require__(28097);
class imageDataController extends _data_controller_base_1.dataControllerBase {
    constructor(options) {
        super(options);
        this._imageAxisPoints = this._getImageAxisPoints();
    }
    _getImageAxisPoints() {
        var that = this, multiData = that.multiData, viewModel = that.viewModel;
        return multiData ? multiData.getPointsByDimensionId(viewModel.ImageDimensionId) : null;
    }
    getImageData() {
        return this._imageAxisPoints && this._imageAxisPoints.length ? this._imageAxisPoints[0].getValue() : undefined;
    }
}
exports.imageDataController = imageDataController;


/***/ }),

/***/ 78560:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.kpiDataController = void 0;
const _render_helper_1 = __webpack_require__(39336);
const item_data_axis_names_1 = __webpack_require__(51101);
const _common_1 = __webpack_require__(29009);
const _data_controller_base_1 = __webpack_require__(28097);
class kpiDataController extends _data_controller_base_1.dataControllerBase {
    constructor(options) {
        super(options);
        this._initialize();
    }
    getDataSource() {
        var that = this, axisPoints = that._axisPoints, sourceItem, dataSource = [], i;
        if (that.multiData) {
            that._iterateKpiItems(function (kpiElement) {
                if (axisPoints) {
                    for (i = 0; i < axisPoints.length; i++) {
                        sourceItem = that._createSourceItem(axisPoints[i], kpiElement);
                        dataSource.push(sourceItem);
                    }
                }
                else {
                    sourceItem = that._createSourceItem(null, kpiElement);
                    dataSource.push(sourceItem);
                }
            });
        }
        return dataSource;
    }
    _createSourceItem(axisPoint, kpiElement) {
        var that = this, deltaValue = that._getDeltaValue(axisPoint, kpiElement), measure = that.multiData.getMeasureById(kpiElement.ID), measureValue = that._getMeasureValue(axisPoint, kpiElement), sparklineValues = that._getSparklineValues(axisPoint, kpiElement), getDeltaValue = (getter) => {
            return deltaValue ? getter(deltaValue) : undefined;
        }, getCaptions = () => {
            if (axisPoint) {
                var axisName = axisPoint.getAxisName();
                if (that.drillDownState[axisName]) {
                    var text = axisPoint.getDisplayText();
                    return text == undefined ? [''] : [text];
                }
                else {
                    return axisPoint.getDisplayPath();
                }
            }
            else
                return [kpiElement.Title];
        }, properties = {
            getActualValue: function () {
                var value = getDeltaValue((d) => d.getActualValue().getValue());
                return value || measureValue.getValue();
            },
            getActualValueText: function () {
                var text = getDeltaValue((d) => d.getActualValue().getDisplayText());
                return text || measureValue.getDisplayText();
            },
            getTargetValue: function () {
                return getDeltaValue((d) => d.getTargetValue().getValue());
            },
            getTargetValueText: function () {
                return getDeltaValue((d) => d.getTargetValue().getDisplayText());
            },
            getAbsoluteVariationValue: function () {
                return getDeltaValue((d) => d.getAbsoluteVariation().getValue());
            },
            getAbsoluteVariationText: function () {
                return getDeltaValue((d) => d.getAbsoluteVariation().getDisplayText());
            },
            getPercentVariationValue: function () {
                return getDeltaValue((d) => d.getPercentVariation().getValue());
            },
            getPercentVariationText: function () {
                return getDeltaValue((d) => d.getPercentVariation().getDisplayText());
            },
            getPercentOfTargetValue: function () {
                return getDeltaValue((d) => d.getPercentOfTarget().getValue());
            },
            getPercentOfTargetText: function () {
                return getDeltaValue((d) => d.getPercentOfTarget().getDisplayText());
            },
            getDimensionValue: function (dataId) {
                return axisPoint.getParentByDimensionId(dataId).getValue();
            },
            getDimensionValueText: function (dataId) {
                return axisPoint.getParentByDimensionId(dataId).getDisplayText();
            },
            getIndicatorType: function () {
                return that._convertIndicatorType(getDeltaValue((d) => d.getIndicatorType().getValue()));
            },
            getIsGood: function () {
                return getDeltaValue((d) => d.getIsGood().getValue());
            },
            getMainValueText: function () {
                return getDeltaValue((d) => d.getDisplayValue().getDisplayText());
            },
            getSubValue1Text: function () {
                return getDeltaValue((d) => d.getDisplaySubValue1().getDisplayText());
            },
            getSubValue2Text: function () {
                return getDeltaValue((d) => d.getDisplaySubValue2().getDisplayText());
            },
            getMeasureValue: function () {
                return measureValue.getValue();
            },
            getMeasureDisplayText: function () {
                return measureValue.getDisplayText();
            },
            getSparklineOptions: function () {
                var sparklineOptions = undefined;
                if (sparklineValues) {
                    sparklineOptions = that._generateSparklineOptions(sparklineValues, kpiElement.SparklineOptions, measure.format);
                }
                return sparklineOptions;
            },
            getSelectionValues: function () {
                return axisPoint ? axisPoint.getUniquePath() : null;
            },
            getCaptions: function () {
                return getCaptions();
            },
            getTitle: function () {
                var captions = getCaptions();
                if (captions.length > 0)
                    return captions.pop();
            },
            getSubtitle: function () {
                var captions = getCaptions();
                if (captions.length > 1)
                    captions.pop();
                return captions.join(_data_controller_base_1.DEFAULT_SUBTITLE_SEPARATOR);
            },
            getGaugeRange: function () {
                return that._getGaugeRange(kpiElement);
            },
            getCardName: function () {
                return kpiElement.Title;
            },
            getStyleSettingsInfo: (ruleFilter) => {
                return this._getStyleSettingsInfo(axisPoint, kpiElement.ID, ruleFilter);
            },
            getKpiElementId: function () {
                return kpiElement.ID;
            }
        };
        var sourceItem = {};
        sourceItem[_common_1.DashboardDataIdField] = kpiElement.ID;
        sourceItem.onIncidentOccurred = _render_helper_1.RenderHelper.widgetIncidentOccurred;
        that.setSourceItemProperties(sourceItem, kpiElement, properties);
        return sourceItem;
    }
    _getDeltaValue(axisPoint, kpiElement) {
        var multiData = this.multiData, measureId = kpiElement.ID;
        if (!multiData.getDeltaById(measureId))
            return undefined;
        return axisPoint ? multiData.getDeltaValueByAxisPoints(measureId, [axisPoint]) : multiData.getDeltaValue(measureId);
    }
    _getMeasureValue(axisPoint, kpiElement) {
        var multiData = this.multiData, measureId = kpiElement.ID;
        return axisPoint ? multiData.getMeasureValueByAxisPoints(measureId, [axisPoint]) : multiData.getMeasureValue(measureId);
    }
    _getSparklineValues(axisPoint, kpiElement) {
        if (!this._sparklineAxisPoints)
            return;
        var that = this, values = [], measureValue, measureId = kpiElement.ID, multiData = that.multiData;
        that._sparklineAxisPoints.forEach(sparklinePoint => {
            measureValue = axisPoint ?
                multiData.getMeasureValueByAxisPoints(measureId, [axisPoint, sparklinePoint]) :
                multiData.getMeasureValueByAxisPoints(measureId, [sparklinePoint]);
            values.push(measureValue.getValue() || 0);
        });
        return values;
    }
    _getStyleSettingsInfo(axisPoint, kpiElementId, ruleFilter) {
        let rules = [], cellInfo = {
            axisPoint: axisPoint
        };
        rules = this.cfModel.RuleModels.filter(rule => ruleFilter(rule, kpiElementId));
        return this._getStyleSettingsInfoCore(cellInfo, rules, this.viewModel.ColumnAxisName, item_data_axis_names_1.itemDataAxisNames.defaultAxis);
    }
    _correctAxisPoint(axisPoint, ruleModel) {
        var correctAxisPoint = null;
        if (ruleModel.CalcByDataId)
            correctAxisPoint = this._findAxisPoint(ruleModel.CalcByDataId, axisPoint);
        return correctAxisPoint || axisPoint;
    }
    _getStyleIndexes(rule, cellInfo, points) {
        var axisPoint, currentStyleIndexes, styleIndexes = [];
        axisPoint = this._correctAxisPoint(cellInfo.axisPoint, rule);
        if (axisPoint)
            points.push(axisPoint);
        currentStyleIndexes = this._getMeasureValueByAxisPoints(points, rule.FormatConditionMeasureId);
        if (currentStyleIndexes) {
            styleIndexes = styleIndexes.concat(currentStyleIndexes);
        }
        return styleIndexes;
    }
    _initialize() {
        if (!this.multiData)
            return;
        var that = this, viewModel = that.viewModel, multiData = that.multiData;
        that._axisPoints = !!this.viewModel.SeriesAxisName ? multiData.getAxis(viewModel.SeriesAxisName).getPoints() : undefined;
        that._sparklineAxisPoints = !!this.viewModel.SparklineAxisName ? multiData.getAxis(viewModel.SparklineAxisName).getPoints() : undefined;
    }
    _iterateKpiItems(delegate) {
    }
    _getGaugeRange(element) {
    }
}
exports.kpiDataController = kpiDataController;


/***/ }),

/***/ 25851:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pieDataController = void 0;
const _formatter_1 = __webpack_require__(93687);
const _chart_data_controller_base_1 = __webpack_require__(29617);
var PieSettingsType = {
    SeriesOnly: 'SeriesOnly',
    ArgumentsOnly: 'ArgumentsOnly',
    ArgumentsAndSeries: 'ArgumentsAndSeries',
    ElementSelection: 'ElementSelection'
};
class pieDataController extends _chart_data_controller_base_1.chartDataControllerBase {
    constructor(options) {
        super(options);
        if (this.multiData && this.viewModel) {
            this._measures = this.multiData ? this.multiData.getMeasures() : [];
            this._argumentAxisPoints = this.getArgumentAxisPoints();
            if (this.viewModel.ProvideValuesAsArguments) {
                this.settingsType = PieSettingsType.SeriesOnly;
            }
            else if (!this.viewModel.SummarySeriesMember) {
                this.settingsType = PieSettingsType.ArgumentsOnly;
            }
            else if (this.viewModel.ContentDescription && this.viewModel.ContentDescription.ElementSelectionEnabled) {
                this.settingsType = PieSettingsType.ElementSelection;
            }
            else {
                this.settingsType = PieSettingsType.ArgumentsAndSeries;
            }
        }
    }
    getPointDisplayTexts(pointTag, value, percent) {
        var that = this, valueDataMember = pointTag.dataMembers[0], measure = this.multiData.getMeasureById(valueDataMember);
        return {
            argumentText: (this.settingsType === PieSettingsType.SeriesOnly) ? measure.name : that.getTitle(pointTag.axisPoint, '\n'),
            valueText: pointTag.valueText,
            percentText: _formatter_1.formatNumeric(percent, this.viewModel.PercentFormatViewModel)
        };
    }
    isDiscreteArgument() {
        return true;
    }
    createDataSource(seriesAxisPoint, valueDataMember) {
        var that = this, viewModel = that.viewModel, dataSource = [];
        if (that.settingsType === PieSettingsType.SeriesOnly) {
            var argumentAxisPoint = that._getArgumentAxis().getRootPoint();
            that._measures
                .filter(measure => viewModel.ValueDataMembers && viewModel.ValueDataMembers.indexOf(measure.id) !== -1)
                .forEach((measure, index) => {
                var dataMember = measure.id, valueInfo = that._getCrossSlice(argumentAxisPoint, seriesAxisPoint).getMeasureValue(dataMember);
                dataSource.push({
                    x: measure.name,
                    y: that._getCorrectZeroValue(valueInfo.getValue()),
                    tag: {
                        axisPoint: argumentAxisPoint,
                        dataMembers: [dataMember],
                        colorMeasureId: that._getColorDataMemberByIndex(index),
                        valueText: valueInfo.getDisplayText()
                    }
                });
            });
        }
        else {
            that._argumentAxisPoints.forEach(argumentAxisPoint => {
                var valueInfo = that._getCrossSlice(argumentAxisPoint, seriesAxisPoint).getMeasureValue(valueDataMember);
                dataSource.push({
                    x: that.getArgument(argumentAxisPoint),
                    y: that._getCorrectZeroValue(valueInfo.getValue()),
                    tag: {
                        axisPoint: argumentAxisPoint,
                        dataMembers: [valueDataMember],
                        colorMeasureId: that._getColorDataMemberByMeasureId(valueDataMember),
                        valueText: valueInfo.getDisplayText()
                    }
                });
            });
        }
        return dataSource;
    }
    getValueDataMembers() {
        var viewModel = this.viewModel;
        switch (this.settingsType) {
            case PieSettingsType.SeriesOnly:
                return ['SeriesOnlyInternalFakeValueDataMember'];
            case PieSettingsType.ArgumentsOnly:
            case PieSettingsType.ArgumentsAndSeries:
                return viewModel.ValueDataMembers;
            case PieSettingsType.ElementSelection:
                return [viewModel.ValueDataMembers[viewModel.ContentDescription.SelectedElementIndex]];
        }
    }
    getValueDisplayNames(seriesAxisPoint, valueDataMemberIndex) {
        var viewModel = this.viewModel;
        switch (this.settingsType) {
            case PieSettingsType.ArgumentsOnly:
                return viewModel.ValueDisplayNames[valueDataMemberIndex];
            case PieSettingsType.SeriesOnly:
            case PieSettingsType.ArgumentsAndSeries:
            case PieSettingsType.ElementSelection:
                return this.getTitle(seriesAxisPoint);
        }
    }
    _getCorrectZeroValue(value) {
        return value === 0 || value == null ? null : Math.abs(value);
    }
    _getColorDataMemberByMeasureId(valueDataMember) {
        var viewModel = this.viewModel;
        switch (this.settingsType) {
            case PieSettingsType.ArgumentsOnly:
                var index = viewModel.ValueDataMembers ? viewModel.ValueDataMembers.indexOf(valueDataMember) : -1;
                return this._getColorDataMemberByIndex(index);
            case PieSettingsType.ArgumentsAndSeries:
                return this._getColorDataMemberByIndex(0);
            case PieSettingsType.ElementSelection:
                return this._getColorDataMemberByIndex(viewModel.ContentDescription.SelectedElementIndex);
            default:
                return undefined;
        }
    }
    _getColorDataMemberByIndex(index) {
        var colorDataMembers = this.viewModel.ColorDataMembers;
        return (colorDataMembers.length == 1) ? colorDataMembers[0] : colorDataMembers[index];
    }
}
exports.pieDataController = pieDataController;


/***/ }),

/***/ 89388:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pieMapDataController = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _geo_point_map_data_controller_base_1 = __webpack_require__(76946);
class pieMapDataController extends _geo_point_map_data_controller_base_1.geoPointMapDataControllerBase {
    constructor(options) {
        super(options);
        this.elementCustomColor = options.elementCustomColor;
    }
    getPoint(index, valueIndex) {
        var point = super.getPoint(index), multiData = this.multiData, viewModel = this.viewModel, filledValues = viewModel.Values && viewModel.Values.length > 0, axisPoint = this._getAxisPoint(index), argument, argumentDisplayText, value, valueDisplayText, valueId, colorId, colorValue;
        if (viewModel.ArgumentDataId) {
            argument = axisPoint.getUniqueValue();
            argumentDisplayText = axisPoint.getDisplayText();
            if (filledValues) {
                valueId = viewModel.Values[0];
                value = this._getMeasureValue(index, valueId);
                valueDisplayText = this._getMeasureDisplayText(index, valueId);
            }
            else {
                value = point.pointsCount > 1 ? point.pointsCount : 1;
            }
            colorId = viewModel.ColorIds[0];
            colorValue = viewModel.ColorByArgument ? this._getMeasureValue(index, colorId) : multiData.getMeasureValue(colorId).getValue();
        }
        else {
            valueId = viewModel.Values[valueIndex];
            argument = multiData.getMeasureById(valueId).name;
            argumentDisplayText = argument;
            value = this._getMeasureValue(index, valueId);
            valueDisplayText = this._getMeasureDisplayText(index, valueId);
            colorValue = multiData.getMeasureValue(viewModel.ColorIds[valueIndex]).getValue();
        }
        return _jquery_helpers_1.deepExtend(point, {
            argument: argument,
            argumentDisplayText: argumentDisplayText,
            value: Math.abs(value),
            valueDisplayText: valueDisplayText,
            color: _utils_1.toColor(colorValue),
            valueId: valueId,
            axisPoint: axisPoint
        });
    }
    _getAxisPointDimensionDescriptorId() {
        return this.viewModel.ArgumentDataId || this.viewModel.LongitudeDataId;
    }
    formatValue(value) {
        var measure;
        if (this.viewModel.Values.length > 0) {
            measure = this.multiData.getMeasureById(this.viewModel.Values[0]);
        }
        return measure ? measure.format(value) : value;
    }
}
exports.pieMapDataController = pieMapDataController;


/***/ }),

/***/ 31499:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pivotDataController = void 0;
const _pivot_grid_item_helper_1 = __webpack_require__(24350);
const item_data_axis_names_1 = __webpack_require__(51101);
const _utils_1 = __webpack_require__(7590);
const _data_controller_base_1 = __webpack_require__(28097);
var GT_UNIQUE_PATH = 'GT';
class pivotDataController extends _data_controller_base_1.dataControllerBase {
    constructor(options) {
        super(options);
        this._measureIds = this._getMeasureIds();
        this._collapseStateCache = {};
        this._conditionalFormattingInfoCache = [];
    }
    getStyleSettingsInfo(cellItem, collapseStateCache, conditionalFormattingInfoCache, pointsCache) {
        if (this.cfModel && this.cfModel.RuleModels.length !== 0) {
            var cellInfo = this._getCellInfo(cellItem, pointsCache), rules = this._getFormatRules(cellItem, cellInfo);
            this._collapseStateCache = collapseStateCache;
            this._conditionalFormattingInfoCache = conditionalFormattingInfoCache;
            return this._getStyleSettingsInfoCore(cellInfo, rules, item_data_axis_names_1.itemDataAxisNames.pivotColumnAxis, item_data_axis_names_1.itemDataAxisNames.pivotRowAxis);
        }
    }
    _getMeasureIds() {
        var measureIds = [];
        for (var i = 0; i < this.viewModel.Values.length; i++)
            measureIds.push(this.viewModel.Values[i].DataId);
        return measureIds;
    }
    _getColumnAxis() {
        return _pivot_grid_item_helper_1.pivotHelper.getColumnAxis(this.multiData);
    }
    _getRowAxis() {
        return _pivot_grid_item_helper_1.pivotHelper.getRowAxis(this.multiData);
    }
    _getCellInfo(cellItem, pointsCache) {
        let columnAxisPoint;
        let rowAxisPoint;
        if (cellItem.area === _utils_1.pivotArea.column || cellItem.area === _utils_1.pivotArea.data)
            columnAxisPoint = this._getAxisPointByPath(pointsCache.columns, cellItem.columnPath, cellItem.columnType, false);
        if (cellItem.area === _utils_1.pivotArea.row || cellItem.area === _utils_1.pivotArea.data)
            rowAxisPoint = this._getAxisPointByPath(pointsCache.rows, cellItem.rowPath, cellItem.rowType, true);
        return {
            columnAxisPoint: columnAxisPoint,
            rowAxisPoint: rowAxisPoint
        };
    }
    _getStyleIndexes(rule, cellInfo, points) {
        var that = this, currentStyleIndexes, styleIndexes = [];
        if (rule.ApplyToRow) {
            currentStyleIndexes = that._findStyleSettingsOnAxis(cellInfo.rowAxisPoint, cellInfo.columnAxisPoint, rule.FormatConditionMeasureId, true);
            if (currentStyleIndexes.length > 0)
                styleIndexes = styleIndexes.concat(currentStyleIndexes);
        }
        if (rule.ApplyToColumn) {
            currentStyleIndexes = that._findStyleSettingsOnAxis(cellInfo.rowAxisPoint, cellInfo.columnAxisPoint, rule.FormatConditionMeasureId, false);
            if (currentStyleIndexes.length > 0)
                styleIndexes = styleIndexes.concat(currentStyleIndexes);
        }
        if (!rule.ApplyToRow && !rule.ApplyToColumn) {
            if (cellInfo.columnAxisPoint)
                points.push(cellInfo.columnAxisPoint);
            if (cellInfo.rowAxisPoint)
                points.push(cellInfo.rowAxisPoint);
            currentStyleIndexes = that._getMeasureValueByAxisPoints(points, rule.FormatConditionMeasureId);
            if (currentStyleIndexes)
                styleIndexes = styleIndexes.concat(currentStyleIndexes);
        }
        return styleIndexes;
    }
    _findStyleSettingsOnAxis(rowAxisPoint, columnAxisPoint, measureId, isRowAxis) {
        var that = this, styleIndexes = [], rowPoint = rowAxisPoint ? rowAxisPoint : this._getRowAxis().getRootPoint(), columnPoint = columnAxisPoint ? columnAxisPoint : this._getColumnAxis().getRootPoint(), slicePoint = isRowAxis ? rowPoint : columnPoint, intersectingRootPoint, slice, intersectingPoints = [], cfAxisPoint, conditionalFormattingInfo = {
            slicePoint: slicePoint,
            measureId: measureId,
            styleIndexes: [],
            toString: function () {
                return this.slicePoint.getUniquePath() + this.measureId;
            }
        }, iteratePoints = function (intersectingPoints, point) {
            var children = point.getChildren(), child, collapseStateKey = point.getUniquePath().concat(isRowAxis ? 'column' : 'row'), wasCollapsed = that._collapseStateCache[collapseStateKey];
            if (wasCollapsed === undefined) {
                intersectingPoints.push(point);
                if (children && children.length > 0) {
                    for (var i = 0; i < children.length; i++) {
                        child = children[i];
                        iteratePoints(intersectingPoints, child);
                    }
                }
            }
        };
        cfAxisPoint = this._conditionalFormattingInfoCache[conditionalFormattingInfo];
        if (cfAxisPoint)
            return cfAxisPoint.styleIndexes;
        slice = this.multiData.getSlice(slicePoint);
        intersectingRootPoint = isRowAxis ? this._getColumnAxis().getRootPoint() : this._getRowAxis().getRootPoint();
        iteratePoints(intersectingPoints, intersectingRootPoint);
        for (let index = 0; index < intersectingPoints.length; index++) {
            const intersectingPoint = intersectingPoints[index], finalSlice = slice.getSlice(intersectingPoint), currentStyleIndexes = finalSlice.getConditionalFormattingMeasureValue(measureId);
            if (currentStyleIndexes) {
                styleIndexes = currentStyleIndexes;
                break;
            }
        }
        conditionalFormattingInfo.styleIndexes = styleIndexes;
        this._conditionalFormattingInfoCache[conditionalFormattingInfo] = conditionalFormattingInfo;
        return styleIndexes;
    }
    _getFormatRules(cellItem, cellInfo) {
        var that = this, dataId, rules = [];
        switch (cellItem.area) {
            case _utils_1.pivotArea.column:
                dataId = that._getPointId(cellInfo.columnAxisPoint);
                rules = rules.concat(that._getFormatRulesByDataId(dataId));
                break;
            case _utils_1.pivotArea.row:
                dataId = that._getPointId(cellInfo.rowAxisPoint);
                rules = rules.concat(that._getFormatRulesByDataId(dataId));
                break;
            default: {
                dataId = that._measureIds[cellItem.cellIndex];
                rules = that.cfModel.RuleModels.filter(rule => {
                    return rule.ApplyToRow || (that._isRowValuePosition() && rule.ApplyToColumn) || rule.ApplyToDataId === dataId;
                });
                break;
            }
        }
        return rules;
    }
    _isRowValuePosition() {
        return this.viewModel.ValuesPosition === 'Rows';
    }
    _getAxisPointByPath(pointsCache, path, type, isRowAxisPoint) {
        var correctedPath = path, axisPoint;
        if (type === GT_UNIQUE_PATH)
            correctedPath = GT_UNIQUE_PATH;
        axisPoint = pointsCache[correctedPath];
        if (!axisPoint) {
            let axis = isRowAxisPoint ? this._getRowAxis() : this._getColumnAxis();
            axisPoint = axis.getPointByUniqueValues(path);
        }
        return axisPoint;
    }
    _getFormatRulesByDataId(dataId) {
        var that = this, formatRules = [];
        if (that.cfModel) {
            that.cfModel.RuleModels.forEach(rule => {
                if (rule.ApplyToDataId === dataId) {
                    formatRules.push(rule);
                }
            });
        }
        return formatRules;
    }
    _getPointId(point) {
        var dimension, columnPointId;
        if (point) {
            dimension = point.getDimension();
            columnPointId = dimension ? dimension.id : undefined;
        }
        return columnPointId;
    }
}
exports.pivotDataController = pivotDataController;


/***/ }),

/***/ 77788:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.rangeFilterDataController = void 0;
const _chart_helper_1 = __webpack_require__(11222);
const _formatter_1 = __webpack_require__(93687);
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const _chart_data_controller_proto_1 = __webpack_require__(45709);
class rangeFilterDataController extends _chart_data_controller_proto_1.chartDataControllerProto {
    constructor(options) {
        super(options);
    }
    getArgument(argumentAxisPoint) {
        if (argumentAxisPoint.getParent() != null) {
            return argumentAxisPoint.getValue();
        }
        else {
            return _localizer_1.localizer.getString(_localization_ids_1.localizationId.ChartTotalValue);
        }
    }
    _iterateSeriesTemplates(proc) {
        this.viewModel.SeriesTemplates.forEach(seriesTemplate => {
            proc(undefined, seriesTemplate);
        });
    }
    _isSelectionTagsRequired() {
        return false;
    }
    _getLastSeriesType(colorMeasureId) {
        var seriesTemplates = this.viewModel.SeriesTemplates;
        for (var i = seriesTemplates.length - 1; i >= 0; i--) {
            if (colorMeasureId === seriesTemplates[i].ColorMeasureID) {
                return _chart_helper_1.chartHelper.convertSeriesType(seriesTemplates[i].SeriesType);
            }
        }
    }
    _createArgumentFormat() {
        const argument = this.viewModel ? this.viewModel.Argument : undefined;
        let argumentAxisLabelFormat = undefined;
        if (argument && !this.isDiscreteArgument()) {
            argumentAxisLabelFormat = _formatter_1.convertToFormat(argument.AxisXLabelFormat);
            if (this._isNumericDataType(argument.Type)) {
                if (!argumentAxisLabelFormat || !argument.AxisXLabelFormat.NumericFormat) {
                    argumentAxisLabelFormat = this._getArgumentAutoFormat();
                }
                else if (argument.AxisXLabelFormat.NumericFormat.Unit == 'Auto') {
                    argumentAxisLabelFormat = Object.assign(Object.assign({}, this._getArgumentAutoFormat()), { format: argumentAxisLabelFormat.format });
                }
                argumentAxisLabelFormat.dateType = null;
            }
            if (argumentAxisLabelFormat) {
                argumentAxisLabelFormat.showTrailingZeros = false;
            }
        }
        else {
            argumentAxisLabelFormat = super._createArgumentFormat();
        }
        return argumentAxisLabelFormat;
    }
    showPointLabels(pointLabelInfo) {
        return false;
    }
    getArgumentBindingValue(argumentPoint, pointIndex) {
        return argumentPoint.getValue();
    }
}
exports.rangeFilterDataController = rangeFilterDataController;


/***/ }),

/***/ 1685:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scatterChartDataController = void 0;
const _render_helper_1 = __webpack_require__(39336);
const item_data_axis_names_1 = __webpack_require__(51101);
const _formatter_1 = __webpack_require__(93687);
const _utils_1 = __webpack_require__(7590);
const _chart_data_controller_proto_1 = __webpack_require__(45709);
class scatterChartDataController extends _chart_data_controller_proto_1.chartDataControllerProto {
    constructor(options) {
        super(options);
    }
    getArgument(argumentAxisPoint) {
        var measureId = this.viewModel.AxisXDataMember, slice = this.multiData.getSlice(argumentAxisPoint);
        return slice.getMeasureValue(measureId).getValue();
    }
    getArgumentBindingValue(argumentPoint, pointIndex) {
        return this.getArgument(argumentPoint);
    }
    getArgumentDisplayPath(axisPoint) {
        return axisPoint.getDisplayPath().reverse().join(', ');
    }
    getArgumentFormat() {
        return this.multiData && this.multiData.getMeasureFormat(this.viewModel.AxisXDataMember);
    }
    getArgumentText(argument) {
        if (this.viewModel.AxisXPercentValues)
            return _formatter_1.formatPercentValue(argument.value);
        if (this.viewModel.AxisXScientificValues)
            return _formatter_1.formatScientificAxisValue(argument.value);
        return _formatter_1.formatAxisValue(argument.value, argument.min, argument.max);
    }
    _getTooltipHtml(series, point, seriesFormats, encodeHtml, color) {
        var that = this, html = '', text, slice = that.multiData.getSlice(point.tag.axisPoint), measureIds = that._getMeasureIds();
        measureIds.forEach((measureId, index) => {
            text = that.multiData.getMeasureById(measureId).name + ': ' + slice.getMeasureValue(measureId).getDisplayText();
            text = encodeHtml ? _utils_1.encodeHtml(text) : text;
            html += '<tr><td>' + (color && index === 0 ? _render_helper_1.RenderHelper.rectangle(color, 10, 10) : '') + '&nbsp;</td><td>' + text + '</td></tr>';
        });
        return '<table>' + html + '</table>';
    }
    _getMeasureIds() {
        var measureIds = [];
        measureIds.push(this.viewModel.AxisXDataMember);
        this.viewModel.Panes[0].SeriesTemplates[0].DataMembers.forEach(measureId => {
            measureIds.push(measureId);
        });
        return measureIds;
    }
    getTooltipArgumentText(obj) {
        return this._getTooltipArgumentText(obj.point.tag.axisPoint);
    }
    _getTooltipArgumentText(axisPoint) {
        var axisName = axisPoint.getAxisName();
        if (this.drillDownState[axisName]) {
            return axisPoint.getDisplayText();
        }
        else {
            return this.getArgumentDisplayPath(axisPoint);
        }
    }
    _customizePointLabelText(valueContainer, pointLabel, seriesInfo) {
        var that = this, axisPoint = valueContainer.point.tag.axisPoint, argument = function () {
            return that._getTooltipArgumentText(axisPoint);
        }, weight = function () {
            var dataMembers = that.viewModel.Panes[0].SeriesTemplates[0].DataMembers;
            if (dataMembers.length > 1) {
                var measureId = dataMembers[1];
                var slice = that.multiData.getSlice(axisPoint);
                return slice.getMeasureValue(measureId).getDisplayText();
            }
            return null;
        }, values = function () {
            var text = '', measureIds = that._getMeasureIds(), slice = that.multiData.getSlice(axisPoint);
            measureIds.forEach((measureId, index) => {
                text += (index > 0 ? ' - ' : '') + slice.getMeasureValue(measureId).getDisplayText();
            });
            return text;
        };
        switch (pointLabel.scatterContent) {
            case 'Argument':
                return argument();
            case 'Weight':
                return weight();
            case 'Values':
                return values();
            case 'ArgumentAndWeight':
                return argument() + ': ' + weight();
            case 'ArgumentAndValues':
                return argument() + ': ' + values();
            default:
                return null;
        }
    }
    isQualitativeArgument() {
        return false;
    }
    isDiscreteArgument() {
        return false;
    }
    showPointLabels(pointLabelInfo) {
        return pointLabelInfo && pointLabelInfo.showPointLabels;
    }
    _getStyleSettingsInfo(argumentAxisPoint, seriesAxisPoint, seriesMeasureId, chartElement) {
        if (this.cfModel) {
            let seriesInfo = {
                argumentAxisPoint: argumentAxisPoint,
                seriesAxisPoint: seriesAxisPoint,
                chartElement: chartElement
            };
            return this._getStyleSettingsInfoCore(seriesInfo, this.cfModel.RuleModels, this.viewModel.ColumnAxisName, item_data_axis_names_1.itemDataAxisNames.defaultAxis);
        }
    }
    _getStyleIndexes(rule, seriesInfo, points) {
        return seriesInfo.chartElement === 'Point' ? super._getStyleIndexes(rule, seriesInfo, points) : [];
    }
}
exports.scatterChartDataController = scatterChartDataController;


/***/ }),

/***/ 15839:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.textItemDataController = void 0;
const $ = __webpack_require__(65311);
const _data_controller_base_1 = __webpack_require__(28097);
class textItemDataController extends _data_controller_base_1.dataControllerBase {
    constructor(options) {
        super(options);
        this.displayTexts = {};
        this._initialize();
    }
    _initialize() {
        var that = this, multiData = that.multiData;
        multiData && $.each(multiData.getMeasures(), function (_, measure) {
            that.displayTexts[measure.id] = multiData.getMeasureValue(measure.id).getDisplayText();
        });
    }
    getDisplayText(id) {
        return this.displayTexts[id];
    }
}
exports.textItemDataController = textItemDataController;


/***/ }),

/***/ 77315:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.treemapDataController = void 0;
const string_1 = __webpack_require__(36306);
const special_values_1 = __webpack_require__(91571);
const _formatter_1 = __webpack_require__(93687);
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const _utils_1 = __webpack_require__(7590);
const _data_controller_base_1 = __webpack_require__(28097);
class treemapDataController extends _data_controller_base_1.dataControllerBase {
    constructor(options) {
        super(options);
        this.elementCustomColor = options.elementCustomColor;
        this._prepare();
    }
    _prepare() {
        var multiData = this.multiData;
        if (multiData) {
            let dimensions = multiData.getDimensions();
            this.last_dimension_id = dimensions.length > 0 ? dimensions[dimensions.length - 1].id : null;
        }
        this.nodeHash = {};
    }
    getDataSource() {
        var that = this, dataSource = [], viewModel = that.viewModel, multiData = that.multiData, measureIndex = 0, contentDescription = viewModel.ContentDescription, measure, measureValue, elementColor, valueId;
        if (viewModel.ProvideValuesAsArguments) {
            for (var i = 0; i < viewModel.ValueDataMembers.length; i++) {
                valueId = viewModel.ValueDataMembers[i];
                measure = multiData.getMeasureById(valueId);
                measureValue = multiData.getMeasureValue(valueId);
                elementColor = _utils_1.toColor(multiData.getMeasureValue(viewModel.ColorDataMembers[i]).getValue());
                elementColor = that._getElementCustomColor(multiData.getAxis().getRootPoint(), elementColor, valueId);
                dataSource.push({
                    name: measure.name,
                    value: measureValue.getValue(),
                    valueText: measureValue.getDisplayText(),
                    color: elementColor
                });
            }
            if (viewModel.LayoutAlgorithm === 'SliceAndDice') {
                dataSource.sort(function (a, b) {
                    return b.value - a.value;
                });
            }
        }
        else {
            if (contentDescription != null && contentDescription.ElementSelectionEnabled)
                measureIndex = contentDescription.SelectedElementIndex;
            if (viewModel.ValueDataMembers.length > 0) {
                var root = multiData.getAxis().getRootPoint();
                dataSource = that._getChildren(root, measureIndex, viewModel.GroupArgumentDataMembers, null);
            }
        }
        return dataSource;
    }
    getLabel(node, encodeHtml = true) {
        var viewModel = this.viewModel;
        return this._getNodeText(node, viewModel.TilesLabelContentType, viewModel.GroupsLabelContentType, encodeHtml);
    }
    getTooltip(node, encodeHtml = true) {
        var viewModel = this.viewModel;
        return this._getNodeText(node, viewModel.TilesTooltipContentType, viewModel.GroupsTooltipContentType, encodeHtml);
    }
    getChildrenNodesUniqueValues(value) {
        var node = this.nodeHash[value], res = [];
        this._fillChildrenNodesUniqueValues(res, node);
        return res;
    }
    _fillChildrenNodesUniqueValues(res, node) {
        if (node.items) {
            for (var i = 0; i < node.items.length; i++) {
                this._fillChildrenNodesUniqueValues(res, node.items[i]);
            }
        }
        else
            res.push(node.uniqueValue);
    }
    _getChildren(currentPoint, measureIndex, groupArgumentDataMembers, prevArgumentDataMember) {
        var that = this, viewModel = that.viewModel, items = [], currentArgumentDataMember = groupArgumentDataMembers[0], points, recoveredGroupArgumentDataMembers, node;
        if (groupArgumentDataMembers.length > 1) {
            recoveredGroupArgumentDataMembers = [];
            for (var i = 1; i < groupArgumentDataMembers.length; i++) {
                recoveredGroupArgumentDataMembers.push(groupArgumentDataMembers[i]);
            }
            points = currentPoint.getPointsByDimensionId(currentArgumentDataMember);
            points.forEach(point => {
                node = that._createNode(point, measureIndex, prevArgumentDataMember);
                node.items = that._getChildren(point, measureIndex, recoveredGroupArgumentDataMembers, currentArgumentDataMember);
                items.push(node);
            });
        }
        else {
            points = currentPoint.getPointsByDimensionId(that.last_dimension_id);
            points.forEach(point => {
                node = that._createNode(point, measureIndex, prevArgumentDataMember);
                node.color = that._getColor(point, measureIndex);
                items.push(node);
            });
        }
        return items;
    }
    _createNode(point, measureIndex, prevArgumentDataMember) {
        var viewModel = this.viewModel, multiData = this.multiData, valueDataMember = viewModel.ValueDataMembers[measureIndex], measureValue = multiData.getSlice(point).getMeasureValue(valueDataMember), uniqueValue = point.getUniquePath(), node = {
            name: this._getArgumentString(point, prevArgumentDataMember),
            value: measureValue.getValue(),
            valueText: measureValue.getDisplayText(),
            uniqueValue: uniqueValue,
            format: function (value) {
                return _formatter_1.format(value, multiData.getMeasureFormat(valueDataMember));
            }
        };
        this.nodeHash[node.uniqueValue] = node;
        return node;
    }
    _getNodeText(node, tileType, groupType, encodeHtml) {
        if (node.isLeaf()) {
            return this._getTextByContentType(tileType, node.data.name, node.data.valueText, encodeHtml);
        }
        else {
            return this._getTextByContentType(groupType, node.data.name, node.data.format(node.value()), encodeHtml);
        }
    }
    _getTextByContentType(contentType, argumentText, valueText, encodeHtml) {
        var argumentEncoded = encodeHtml ? _utils_1.encodeHtml(argumentText) : argumentText;
        var valueEncoded = encodeHtml ? _utils_1.encodeHtml(valueText) : valueText;
        switch (contentType) {
            case 'Argument':
                return argumentEncoded;
            case 'ArgumentAndValue':
                return string_1.format(_localizer_1.localizer.getString(_localization_ids_1.localizationId.TreemapLabelValueTemplate), argumentEncoded, valueEncoded);
            case 'Value':
                return valueEncoded;
        }
    }
    _getArgumentString(point, prevArgumentDataMember) {
        var argumentString, path = point.getAxisPath(), dimension;
        if (this.drillDownState[point.getAxisName()]) {
            return point.getDisplayText();
        }
        for (var i = path.length - 1; i >= 0; i--) {
            dimension = path[i].getDimension();
            if (prevArgumentDataMember && dimension && dimension.id === prevArgumentDataMember)
                break;
            if (path[i].getUniqueValue() !== special_values_1.specialValues.olapNullValueGuid) {
                if (argumentString) {
                    argumentString = string_1.format(_localizer_1.localizer.getString(_localization_ids_1.localizationId.TreemapLabelArgumentTemplate), path[i].getDisplayText(), argumentString);
                }
                else {
                    argumentString = path[i].getDisplayText();
                }
            }
        }
        return argumentString;
    }
    _getColor(point, measureIndex) {
        var that = this, viewModel = that.viewModel, multiData = that.multiData, colorId = viewModel.ColorDataMembers[measureIndex], color;
        if (viewModel.ColorArgument) {
            var colorPoint = point.getParentByDimensionId(viewModel.ColorArgument);
            multiData = multiData.getSlice(colorPoint);
        }
        color = _utils_1.toColor(multiData.getMeasureValue(colorId).getValue());
        return that._getElementCustomColor(point, color, viewModel.ValueDataMembers[measureIndex]);
    }
    _getElementCustomColor(point, color, valueId) {
        var that = this, viewModel = that.viewModel, newColor;
        if (that.elementCustomColor && color) {
            var customElementColorEventArgs = {
                targetElement: [point],
                measureIds: [valueId],
                color: color
            };
            that.elementCustomColor(customElementColorEventArgs);
            newColor = customElementColorEventArgs.color;
            if (!newColor.colorIsInvalid && newColor !== color) {
                return newColor;
            }
        }
        return color;
    }
}
exports.treemapDataController = treemapDataController;


/***/ }),

/***/ 1657:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sliceRepository = exports.dataSlice = void 0;
const _utils_1 = __webpack_require__(7590);
class dataSlice {
    constructor(sliceKey, sliceDTO, decode, encode) {
        var keyIndexById = {}, valueIdByKey = {};
        sliceDTO.KeyIds.forEach((keyId, i) => {
            keyIndexById[keyId] = i;
        });
        Object.keys(sliceDTO.ValueIds).forEach((valueId) => {
            valueIdByKey[sliceDTO.ValueIds[valueId]] = valueId;
        });
        this._sliceKey = sliceKey;
        this._sliceDTO = sliceDTO;
        this._decode = decode;
        this._encode = encode;
        this._keyIndexById = keyIndexById;
        this._valueIdByKey = valueIdByKey;
    }
    getRowCount() {
        return Object.keys(this._sliceDTO.Data).length;
    }
    getKey() {
        return this._sliceKey;
    }
    getValue(rowKey, valueId) {
        var that = this, dto = that._sliceDTO, valueKey = dto.ValueIds[valueId], rowDTO = that._getRowDTO(rowKey), value = !!rowDTO && valueKey >= 0 ? rowDTO[valueKey] : null;
        return value === undefined ? null : value;
    }
    getRowValues(rowKey) {
        var that = this, values = {}, valueIdsByKey = that._valueIdByKey, rowDTO = that._getRowDTO(rowKey) || {};
        Object.keys(rowDTO).forEach((key) => {
            values[valueIdsByKey[key]] = rowDTO[key];
        });
        return values;
    }
    getRowKeyValues(rowKey) {
        var that = this, keyIds = that.getKeyIds(), keyValues = {};
        keyIds.forEach((keyId) => {
            keyValues[keyId] = that.getKeyValue(rowKey, keyId);
        });
        return keyValues;
    }
    _getRowDTO(rowKey) {
        var that = this;
        return that._sliceDTO.Data[that._stringifyKey(rowKey)];
    }
    getKeyValue(rowKey, keyId) {
        if (keyId === undefined)
            return null;
        var that = this, keyIndex = that._keyIndexById[keyId];
        return that._decode(keyId, rowKey[keyIndex]);
    }
    getKeyIds() {
        var that = this;
        return that._sliceDTO.KeyIds;
    }
    getValueIds() {
        return Object.keys(this._sliceDTO.ValueIds);
    }
    forEach(action) {
        var that = this;
        Object.keys(that._sliceDTO.Data).forEach((key) => {
            return action({
                sliceKey: that._sliceKey,
                rowKey: that._parseKey(key)
            });
        });
    }
    append(slice) {
        var that = this, newRowKeys = [], iterator = {
            forEach: function (action) {
                newRowKeys.forEach((key) => {
                    action({
                        sliceKey: that._sliceKey,
                        rowKey: key
                    });
                });
            }
        };
        slice.forEach((key) => {
            var keyValues = slice.getRowKeyValues(key.rowKey), values = slice.getRowValues(key.rowKey), newRowKey = that.addRow(keyValues, values);
            newRowKeys.push(newRowKey);
        });
        return iterator;
    }
    addRow(keyValues, values) {
        var that = this, newRowKey = [], valueIds = that._sliceDTO.ValueIds, encode = that._encode;
        Object.keys(keyValues).forEach((keyId) => {
            newRowKey.push(encode(keyId, keyValues[keyId]));
        });
        var valueDTO = {};
        Object.keys(values).forEach((valueId) => {
            var valueKey = valueIds[valueId];
            if (valueKey === undefined) {
                var count = 0;
                Object.keys(valueIds).forEach((valueId) => {
                    count++;
                });
                valueKey = count;
                valueIds[valueId] = valueKey;
            }
            valueDTO[valueKey] = values[valueId];
        });
        that._sliceDTO.Data[that._stringifyKey(newRowKey)] = valueDTO;
        return newRowKey;
    }
    _parseKey(key) {
        return JSON.parse(key);
    }
    _stringifyKey(key) {
        return '[' + key + ']';
    }
}
exports.dataSlice = dataSlice;
class sliceRepository {
    constructor(sliceListDTO, decode, encode) {
        this._sliceListDTO = sliceListDTO;
        this._sliceList = [];
        this._rowKeyConvertMap = {};
        this._sliceJoinCache = {};
        this._decode = decode;
        this._encode = encode;
        this._initialize(decode);
    }
    _initialize(decode) {
        var that = this;
        if (!that._sliceListDTO)
            return;
        that._sliceListDTO.forEach((sliceDTO, index) => {
            var slice = new dataSlice(index, sliceDTO, decode, that._encode);
            that._sliceList.push(slice);
        });
    }
    getAll() {
        return this._sliceList;
    }
    getKey(keyIds) {
        let slice = this._getByKeyIds(keyIds);
        return slice ? this._sliceList.indexOf(slice) : -1;
    }
    get(vsKey) {
        return this._sliceList[vsKey];
    }
    getOrCreate(keyIds) {
        var that = this, slice = that._getByKeyIds(keyIds);
        if (!slice) {
            var sliceDTO = {
                KeyIds: keyIds,
                ValueIds: {},
                Data: {}
            };
            if (keyIds.length == 0) {
                sliceDTO.Data['[]'] = {};
            }
            slice = new dataSlice(that._sliceList.length, sliceDTO, that._decode, that._encode);
            that._sliceList.push(slice);
        }
        return slice;
    }
    findDataRowKey(sliceKey, dataRowKey) {
        var that = this, newRowKey = [], map = that._getConvertMap(dataRowKey.sliceKey, sliceKey);
        for (var i = 0; i < map.length; i++) {
            newRowKey.push(dataRowKey.rowKey[map[i]]);
        }
        return {
            sliceKey: sliceKey,
            rowKey: newRowKey
        };
    }
    getCrossValue(dataRows, valueId) {
        var that = this, dataRow1 = dataRows[0], dataRow2 = dataRows[1], sliceKey, value = null;
        if (!dataRow1)
            sliceKey = 0;
        else
            sliceKey = dataRow2 ? that._joinSliceKey(dataRow1.sliceKey, dataRow2.sliceKey) : dataRow1.sliceKey;
        if (sliceKey >= 0) {
            var newRowKey = [], map1 = null, map2 = null;
            if (dataRow1) {
                map1 = that._getConvertMap(dataRow1.sliceKey, sliceKey),
                    map2 = dataRow2 ? that._getConvertMap(dataRow2.sliceKey, sliceKey) : null;
                for (var i = 0; i < map1.length; i++) {
                    var index = map1[i], key = index >= 0 ? dataRow1.rowKey[index] : newRowKey[i];
                    newRowKey.push(key);
                }
                if (map2 != null) {
                    for (var i = 0; i < map2.length; i++) {
                        var index = map2[i], key = index >= 0 ? dataRow2.rowKey[index] : newRowKey[i];
                        newRowKey[i] = key;
                    }
                }
            }
            var slice = that.get(sliceKey);
            if (slice)
                value = slice.getValue(newRowKey, valueId);
        }
        return value;
    }
    getKeyValue(dataRow, keyId) {
        var that = this, slice = that.get(dataRow.sliceKey), value = null;
        if (slice) {
            value = slice.getKeyValue(dataRow.rowKey, keyId);
        }
        return value;
    }
    getValue(dataRow, valueId) {
        var that = this, slice = that.get(dataRow.sliceKey), value = null;
        if (slice) {
            value = slice.getValue(dataRow.rowKey, valueId);
        }
        return value;
    }
    isEmpty() {
        return this._sliceList.filter(s => {
            if (s.getKeyIds().length === 0) {
                var values = s.getRowValues([]);
                return s.getValueIds().filter(id => values[id] !== null && values[id] !== undefined).length !== 0;
            }
            else {
                return s.getRowCount() !== 0;
            }
        }).length === 0;
    }
    _joinSliceKey(key1, key2) {
        var that = this, joinSliceCacheKey = [key1, key2];
        if (key2 < key1)
            joinSliceCacheKey = joinSliceCacheKey.reverse();
        var joinRes = that._sliceJoinCache[joinSliceCacheKey];
        if (joinRes == undefined) {
            var slice1 = that.get(key1), slice2 = that.get(key2), keyIds = slice1.getKeyIds().concat(slice2.getKeyIds());
            joinRes = that.getKey(keyIds);
            that._sliceJoinCache[joinSliceCacheKey] = joinRes;
        }
        return joinRes;
    }
    _getByKeyIds(keyIds) {
        var that = this, foundSlice = null;
        that._sliceList.forEach((slice) => {
            if (_utils_1.areNotOrderedListsEqual(slice.getKeyIds(), keyIds)) {
                foundSlice = slice;
                return false;
            }
        });
        return foundSlice;
    }
    _getConvertMap(sliceFromKey, sliceToKey) {
        var that = this, convertMapCacheKey = [sliceFromKey, sliceToKey];
        var map = that._rowKeyConvertMap[convertMapCacheKey];
        if (!map) {
            var fromSlice = that.get(sliceFromKey), toSlice = that.get(sliceToKey);
            map = [];
            toSlice.getKeyIds().forEach((keyId) => {
                map.push(fromSlice.getKeyIds().indexOf(keyId));
            });
            that._rowKeyConvertMap[convertMapCacheKey] = map;
        }
        return map;
    }
}
exports.sliceRepository = sliceRepository;


/***/ }),

/***/ 39486:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dataStorage = void 0;
const _data_slice_1 = __webpack_require__(1657);
class dataStorage {
    constructor(dto) {
        this._sliceRep = this._createSliceRep(dto);
    }
    _createSliceRep(dto) {
        var decodeMaps = dto.EncodeMaps, encodeMaps = {}, encodeCounters = {}, sliceListDTO = dto.Slices, decode = function (keyId, key) {
            return key === -1 ? null : decodeMaps[keyId][key];
        }, encode = function (keyId, value) {
            var map = encodeMaps[keyId];
            if (!map) {
                map = {};
                var decodeMap = decodeMaps[keyId];
                if (!decodeMap) {
                    decodeMap = [];
                    decodeMaps[keyId] = decodeMap;
                }
                encodeCounters[keyId] = decodeMap.length;
                decodeMap.forEach((value, index) => {
                    map[value] = index;
                });
                encodeMaps[keyId] = map;
            }
            var code = map[value];
            if (code === undefined) {
                var counter = encodeCounters[keyId];
                map[value] = counter;
                encodeCounters[keyId] = ++counter;
                decodeMaps[keyId].push(value);
            }
            return map[value];
        };
        return new _data_slice_1.sliceRepository(sliceListDTO, decode, encode);
    }
    _initialize() {
    }
    getSlices() {
        return this._sliceRep.getAll();
    }
    getSlice(sliceKey) {
        return this._sliceRep.get(sliceKey);
    }
    getSliceKey(keyIds) {
        return this._sliceRep.getKey(keyIds);
    }
    getSliceByIds(keyIds) {
        return this._sliceRep._getByKeyIds(keyIds);
    }
    getOrCreateSlice(keyIds) {
        return this._sliceRep.getOrCreate(keyIds);
    }
    findDataRowKey(sliceKey, dataRowKey) {
        return this._sliceRep.findDataRowKey(sliceKey, dataRowKey);
    }
    getCrossValue(dataRowKeys, valueId) {
        return this._sliceRep.getCrossValue(dataRowKeys, valueId);
    }
    getKeyValue(dataRow, keyId) {
        return this._sliceRep.getKeyValue(dataRow, keyId);
    }
    getValue(dataRow, valueId) {
        return this._sliceRep.getValue(dataRow, valueId);
    }
    isEmpty() {
        return this._sliceRep.isEmpty();
    }
    insert(ds, sortOrderSlices) {
        var that = this, slices = ds.getSlices(), iterators = {};
        slices.forEach((slice) => {
            var keyIds = slice.getKeyIds();
            var ownSlice = that.getOrCreateSlice(keyIds);
            iterators[ownSlice.getKey()] = ownSlice.append(slice);
        });
        return iterators;
    }
    insertSlice(ds, keyIds) {
        let newSlice = ds.getSliceByIds(keyIds);
        if (newSlice) {
            let existedSlice = this.getSliceByIds(keyIds);
            existedSlice.append(newSlice);
        }
    }
}
exports.dataStorage = dataStorage;


/***/ }),

/***/ 97068:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DrillThroughDataWrapper = void 0;
const _list_source_1 = __webpack_require__(19696);
class DrillThroughDataWrapper {
    constructor(drillThroughData) {
        this._drillThroughData = drillThroughData;
    }
    initialize() {
        var that = this;
        that._errorMessage = this._drillThroughData.ErrorMessage;
        if (that.isDataReceived()) {
            that._data = {};
            that._data.dataMembers = that._drillThroughData.DataMembers;
            that._data.displayNames = that._drillThroughData.DataMembersDisplayNames;
            that._data.listSource = new _list_source_1.listSource(that._drillThroughData.Data, that._data.dataMembers);
        }
    }
    getRowCount() {
        return this._data.listSource.getRowCount();
    }
    getRowValue(rowIndex, columnName) {
        return this._data.listSource.getRowValue(rowIndex, columnName);
    }
    getDataMembers() {
        return this._data.dataMembers;
    }
    getDisplayNames() {
        return this._data.data.displayNames;
    }
    isDataReceived() {
        return this._drillThroughData && this._drillThroughData.Data != null;
    }
    getRequestDataError() {
        return this._errorMessage;
    }
}
exports.DrillThroughDataWrapper = DrillThroughDataWrapper;


/***/ }),

/***/ 40144:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(94);
__exportStar(__webpack_require__(51101), exports);
__exportStar(__webpack_require__(59441), exports);
__exportStar(__webpack_require__(91571), exports);
__exportStar(__webpack_require__(29947), exports);


/***/ }),

/***/ 94:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(52161);
__webpack_require__(92906);
__webpack_require__(27893);
__exportStar(__webpack_require__(52441), exports);
__exportStar(__webpack_require__(50474), exports);
__exportStar(__webpack_require__(3757), exports);
__exportStar(__webpack_require__(29617), exports);
__exportStar(__webpack_require__(45709), exports);
__exportStar(__webpack_require__(40018), exports);
__exportStar(__webpack_require__(28097), exports);
__exportStar(__webpack_require__(99909), exports);
__exportStar(__webpack_require__(36400), exports);
__exportStar(__webpack_require__(85557), exports);
__exportStar(__webpack_require__(76946), exports);
__exportStar(__webpack_require__(46800), exports);
__exportStar(__webpack_require__(61724), exports);
__exportStar(__webpack_require__(78560), exports);
__exportStar(__webpack_require__(25851), exports);
__exportStar(__webpack_require__(89388), exports);
__exportStar(__webpack_require__(31499), exports);
__exportStar(__webpack_require__(77788), exports);
__exportStar(__webpack_require__(1685), exports);
__exportStar(__webpack_require__(15839), exports);
__exportStar(__webpack_require__(77315), exports);
__exportStar(__webpack_require__(1657), exports);
__exportStar(__webpack_require__(39486), exports);
__exportStar(__webpack_require__(97068), exports);
__exportStar(__webpack_require__(78074), exports);
__exportStar(__webpack_require__(59385), exports);
__exportStar(__webpack_require__(40552), exports);
__exportStar(__webpack_require__(74009), exports);
__exportStar(__webpack_require__(75291), exports);
__exportStar(__webpack_require__(81166), exports);
__exportStar(__webpack_require__(3503), exports);
__exportStar(__webpack_require__(60367), exports);
__exportStar(__webpack_require__(65855), exports);
__exportStar(__webpack_require__(92906), exports);
__exportStar(__webpack_require__(11222), exports);
__exportStar(__webpack_require__(29009), exports);
__exportStar(__webpack_require__(99150), exports);
__exportStar(__webpack_require__(27893), exports);
__exportStar(__webpack_require__(93687), exports);
__exportStar(__webpack_require__(97116), exports);
__exportStar(__webpack_require__(73022), exports);
__exportStar(__webpack_require__(77931), exports);
__exportStar(__webpack_require__(19696), exports);
__exportStar(__webpack_require__(31724), exports);
__exportStar(__webpack_require__(88084), exports);
__exportStar(__webpack_require__(30916), exports);
__exportStar(__webpack_require__(3522), exports);
__exportStar(__webpack_require__(7844), exports);
__exportStar(__webpack_require__(7590), exports);


/***/ }),

/***/ 27197:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(40144);
__webpack_require__(59441);
__webpack_require__(29947);
__exportStar(__webpack_require__(40144), exports);


/***/ }),

/***/ 3503:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.itemDataAxisPoint = exports.dataStorageSpecialIds = void 0;
const special_values_1 = __webpack_require__(91571);
const _formatter_1 = __webpack_require__(93687);
exports.dataStorageSpecialIds = {
    DisplayText: '_DisplayText_{4873F9E9-65B2-4307-BB25-BFD09F6A2E54}',
    Value: '_Value_{E5597004-313E-4F79-B02E-DEA46EEB1BFE}'
};
class itemDataAxisPoint {
    constructor(levelInfo, dataRowKey) {
        this._info = levelInfo;
        this._dataRowKey = dataRowKey;
        this._children = [];
        this._parent = undefined;
    }
    _getSpecialValue(specialId) {
        var that = this, info = that._info;
        return info.getMetaDataValue(that._dataRowKey, specialId);
    }
    getUniqueValue() {
        var that = this, info = that._info;
        return info.getBaseValue(that._dataRowKey);
    }
    getValue() {
        var that = this;
        var value = that._getSpecialValue(exports.dataStorageSpecialIds.Value);
        if (value === null || value === undefined)
            value = that.getUniqueValue();
        if (value === special_values_1.specialValues.nullValueGuid)
            value = null;
        return value;
    }
    _getLevel() {
        return this._info.level;
    }
    _getServerText() {
        var that = this;
        return that._getSpecialValue(exports.dataStorageSpecialIds.DisplayText);
    }
    getKey() {
        return this._dataRowKey;
    }
    getAxisName() {
        return this._info.axisName;
    }
    getChildren() {
        return this._children;
    }
    getParent() {
        return this._parent;
    }
    getAvaliableLeafPoints() {
        var children = this.getChildren();
        if (children && children.length) {
            return children.reduce((acc, child) => {
                var lastLevelPoints = child.getAvaliableLeafPoints();
                if (lastLevelPoints && lastLevelPoints.length) {
                    acc = acc.concat(lastLevelPoints);
                }
                return acc;
            }, []);
        }
        return [this];
    }
    _setParent(parent) {
        this._parent = parent;
    }
    _setChildren(children) {
        this._children = children;
    }
    getParentByDimensionId(dimensionId) {
        var current = this, dimension;
        while (current.getParent()) {
            dimension = current.getDimension();
            if (dimension && dimension.id == dimensionId) {
                return current;
            }
            current = current.getParent();
        }
        return dimensionId ? this : current;
    }
    getDimensionValue(dimensionId) {
        var that = this, dimension = that.getDimension();
        if (!dimensionId || dimension && dimension.id == dimensionId) {
            return {
                getValue: function () {
                    return that.getValue();
                },
                getUniqueValue: function () {
                    return that.getUniqueValue();
                },
                getDisplayText: function () {
                    return that.getDisplayText();
                }
            };
        }
        else {
            var parent = that.getParent();
            return parent ? parent.getDimensionValue(dimensionId) : null;
        }
    }
    getDisplayText() {
        var that = this, displayText = that._getServerText(), uniqueValue = that.getUniqueValue();
        if (uniqueValue === special_values_1.specialValues.olapNullValueGuid)
            return undefined;
        if (displayText == null) {
            var dimension = that.getDimension();
            if (dimension) {
                var format = that._info.metaData.getDimensionFormat(dimension.id);
                displayText = _formatter_1.format(this.getValue(), format);
            }
        }
        return displayText;
    }
    getDimension() {
        var that = this, axisName = that.getAxisName(), dimensions = that._info.metaData.getAxes()[axisName], dimension = dimensions[that._getLevel()];
        return dimension;
    }
    getDimensions() {
        var that = this, parent = that.getParent();
        return parent ? parent.getDimensions().concat([that.getDimension()]) : [];
    }
    getAxisPath() {
        return this._selectPath(undefined);
    }
    getUniquePath() {
        return this._selectPath(function (point) {
            return point.getUniqueValue();
        });
    }
    getValuePath(includeProc) {
        return this._selectIncludedPath(includeProc, function (point) {
            return point.getValue();
        });
    }
    getDisplayPath(includeProc) {
        return this._selectIncludedPath(includeProc, function (point) {
            return point.getDisplayText();
        });
    }
    getValues() {
        var value = [], axisPoint = this;
        while (axisPoint.getUniqueValue() != null) {
            value.push(axisPoint.getUniqueValue());
            if (this.getDimensions().length == 1)
                break;
            axisPoint = axisPoint.getParent();
        }
        value.reverse();
    }
    _selectIncludedPath(includeProc, pointProc) {
        return this._selectPath(function (point) {
            if (!includeProc || includeProc(point)) {
                return pointProc(point);
            }
            else {
                return undefined;
            }
        });
    }
    _selectPath(predicate) {
        var action = predicate ? predicate : function (axisPoint) {
            return axisPoint;
        }, buildParentsList = function (axisPoint) {
            var parent = axisPoint.getParent();
            if (parent) {
                var newValue = action(axisPoint);
                return buildParentsList(parent).concat(newValue === undefined ? [] : [newValue]);
            }
            else {
                return [];
            }
        };
        return buildParentsList(this);
    }
    getPointsByDimensionId(dimensionId) {
        return this._getPointsByDimensionId(dimensionId, function (point) {
            return point;
        });
    }
    getDisplayTextsByDimensionId(dimensionId) {
        return this._getPointsByDimensionId(dimensionId, function (point) {
            return point.getDisplayText();
        });
    }
    _getPointsByDimensionId(dimensionId, pointProc) {
        var result = [];
        this._findPoints(dimensionId, result, pointProc);
        return result;
    }
    _findPoints(dimensionId, result, pointProc) {
        var dimension = this.getDimension();
        if (dimension && dimension.id === dimensionId) {
            result.push(pointProc(this));
            return;
        }
        var children = this.getChildren();
        for (var i = 0; i < children.length; i++) {
            children[i]._findPoints(dimensionId, result, pointProc);
        }
    }
}
exports.itemDataAxisPoint = itemDataAxisPoint;


/***/ }),

/***/ 81166:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.itemDataAxis = void 0;
const _item_data_axis_helper_1 = __webpack_require__(59385);
var helper = _item_data_axis_helper_1.itemDataAxisHelper;
class itemDataAxis {
    constructor(dimensions, axisPoint) {
        this._dimensions = dimensions;
        this._axisPoint = axisPoint;
    }
    getDimensions() {
        return this._dimensions;
    }
    getRootPoint() {
        var getRoot = (point) => {
            var parent = point.getParent();
            if (parent)
                return getRoot(parent);
            return point;
        };
        return getRoot(this._axisPoint);
    }
    getPoints(ignoreRootPoint = false) {
        var dimensions = this.getDimensions(), lastLevelDimension = dimensions ? dimensions[dimensions.length - 1] : null;
        if (lastLevelDimension) {
            return this.getPointsByDimension(lastLevelDimension.id);
        }
        else {
            return ignoreRootPoint ? [] : [this.getRootPoint()];
        }
    }
    getAvaliableLeafPoints() {
        return this.getRootPoint().getAvaliableLeafPoints();
    }
    getPointsByDimension(dimensionId) {
        var root = this.getRootPoint(), points = [];
        if (dimensionId) {
            helper.eachPoint(root, function (point) {
                var dimension = point.getDimension();
                if (dimension && dimension.id == dimensionId) {
                    points.push(point);
                }
            });
        }
        else {
            points.push(root);
        }
        return points;
    }
    getPointByUniqueValues(values) {
        return helper.findFirstPointByUniqueValues(this.getRootPoint(), values);
    }
    getPointByUniqueValueAndDimension(value, dimensionId) {
        return helper.findFirstPointByUniqueValueAndDimension(this.getRootPoint(), value, dimensionId);
    }
    getPointByValues(values) {
        return helper.findFirstPointByValues(this.getRootPoint(), values);
    }
}
exports.itemDataAxis = itemDataAxis;


/***/ }),

/***/ 60367:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.itemDataTuple = void 0;
class itemDataTuple {
    constructor(axisPoints) {
        this._axisPoints = axisPoints;
    }
    getAxisPoint(axisName) {
        if (axisName) {
            return this._axisPoints.filter(axisPoint => {
                return axisPoint.getAxisName() == axisName;
            })[0];
        }
        else {
            return this._axisPoints[0];
        }
    }
}
exports.itemDataTuple = itemDataTuple;


/***/ }),

/***/ 75291:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.itemData = void 0;
const _formatter_1 = __webpack_require__(93687);
const _utils_1 = __webpack_require__(7590);
const _item_meta_data_1 = __webpack_require__(74009);
const item_data_axis_names_1 = __webpack_require__(51101);
const _item_data_axis_1 = __webpack_require__(81166);
const _item_data_axis_point_1 = __webpack_require__(3503);
const _item_data_tuple_1 = __webpack_require__(60367);
class itemData {
    constructor(metaData, storage, rootItems) {
        this._metaData = metaData;
        this._storage = storage;
        this._rootItems = rootItems;
    }
    isEmpty() {
        return this._storage.isEmpty();
    }
    getCurrentFilterValues(dimensionIds, axisName, selectedValues) {
        var that = this, dimensionCount = dimensionIds.length;
        if (dimensionCount > 0) {
            var axis = this.getAxis(axisName), tuples = [];
            if (selectedValues) {
                for (let valueIndex = 0; valueIndex < selectedValues.length; valueIndex++) {
                    const point = selectedValues[valueIndex];
                    var value = point[0];
                    var axisPoint = axis.getPointsByDimension(dimensionIds[0]).filter((point) => {
                        return _utils_1.checkValuesAreEqual(value, point.getUniqueValue());
                    })[0];
                    for (let i = 1; i < dimensionCount; i++) {
                        value = point[i];
                        axisPoint = axisPoint.getChildren().filter((point) => {
                            return _utils_1.checkValuesAreEqual(value, point.getUniqueValue());
                        })[0];
                    }
                    tuples.push(new _item_data_tuple_1.itemDataTuple([axisPoint]));
                }
            }
            return tuples;
        }
        return null;
    }
    getCurrentDrillDownValues(dimensionIds, axisName) {
        let dimensionCount = dimensionIds.length;
        if (dimensionCount > 0) {
            var axis = this.getAxis(axisName);
            if (axis) {
                let axisPoints = axis.getPointsByDimension(dimensionIds[0]);
                if (axisPoints.length > 0) {
                    var parentPoint = axisPoints[0].getParent();
                    if (parentPoint.getParent() != null) {
                        return new _item_data_tuple_1.itemDataTuple([parentPoint]);
                    }
                    else {
                        return null;
                    }
                }
                else {
                    return null;
                }
            }
            else {
                return null;
            }
        }
        return null;
    }
    getAvailableTuples(dimensionIds, axisName) {
        var that = this, dimensionCount = dimensionIds.length;
        if (dimensionCount > 0) {
            var axis = this.getAxis(axisName);
            if (axis) {
                var tuples = [];
                axis.getPointsByDimension(dimensionIds[dimensionCount - 1]).forEach((axisPoint) => {
                    tuples.push(new _item_data_tuple_1.itemDataTuple([axisPoint]));
                });
                return tuples;
            }
        }
        return null;
    }
    getAllSelectionValues(dimensionIds) {
        var multiData = this, allAxisNames = multiData.getAxisNames(), axisNames = [], selectionList = [], fillAvailableValues = function (axes, row, inputSelection) {
            var firstAxis = multiData.getAxis(axes[0]), nextAxes = axes.slice(1, axes.length), axisPoints = firstAxis.getPoints() || [];
            axisPoints.forEach((axisPoint) => {
                var newRow = row.slice();
                axisPoint.getAxisPath().forEach((pathPoint) => {
                    if (dimensionIds.filter((id) => { return id === pathPoint.getDimension().id; }).length > 0) {
                        newRow.push(pathPoint.getUniqueValue());
                    }
                });
                if (axes.length > 1) {
                    fillAvailableValues(nextAxes, newRow, inputSelection);
                }
                else {
                    inputSelection.push(newRow);
                }
            });
        };
        if (dimensionIds && dimensionIds.length > 0) {
            dimensionIds.forEach((id) => {
                allAxisNames.forEach((axisName) => {
                    if (multiData.getAxis(axisName).getDimensions().filter((descr) => {
                        return descr.id === id;
                    }).length > 0
                        && axisNames.indexOf(axisName) === -1) {
                        axisNames.push(axisName);
                    }
                });
            });
            fillAvailableValues(axisNames, [], selectionList);
        }
        return selectionList;
    }
    getMeasuresByIds(measureIds) {
        var that = this, measures = [];
        measureIds.forEach((id) => {
            measures.push(that.getMeasureById(id));
        });
        return measures;
    }
    getAxisNames() {
        return this._metaData.getAxisNames();
    }
    getAxis(axisName) {
        if (axisName === undefined) {
            axisName = item_data_axis_names_1.itemDataAxisNames.defaultAxis;
        }
        var dimensions = this.getDimensions(axisName), root = this._rootItems[axisName];
        return root ? new _item_data_axis_1.itemDataAxis(dimensions, root) : null;
    }
    getDimensions(axisName) {
        return this._metaData.getDimensions(axisName);
    }
    getColorMeasures() {
        return this._metaData.getColorMeasures();
    }
    getMeasures() {
        return this._metaData.getMeasures();
    }
    getDeltas() {
        return this._metaData.getDeltas();
    }
    getMeasureById(id) {
        return this._metaData.getMeasureById(id);
    }
    getDeltaById(id) {
        return this._metaData.getDeltaById(id);
    }
    getSlice(value) {
        return (value instanceof _item_data_tuple_1.itemDataTuple) ? this._getSliceByTuple(value) :
            (value instanceof _item_data_axis_point_1.itemDataAxisPoint) ? this._getSliceByAxisPoint(value) : null;
    }
    getMeasureFormat(measureId) {
        return this._metaData.getMeasureFormat(measureId);
    }
    getMeasureExpression(measureId) {
        return this._metaData.getMeasureExpression(measureId);
    }
    getMeasureCalculation(measureId) {
        return this._metaData.getMeasureCalculation(measureId);
    }
    getMeasureWindowDefinition(measureId) {
        return this._metaData.getMeasureWindowDefinition(measureId);
    }
    getDimensionFormat(dimensionId) {
        return this._metaData.getDimensionFormat(dimensionId);
    }
    getColorMeasureValue(colorMeasureId) {
        return this._getValue(colorMeasureId);
    }
    getConditionalFormattingMeasureValue(cfMeasureId) {
        return this._getValue(cfMeasureId);
    }
    getMeasureValue(measureId) {
        var that = this, format = that.getMeasureFormat(measureId);
        return that._getMeasureValueByKeys(that._getKeys(), measureId, format);
    }
    getPointsByDimensionId(dimensionId) {
        var points = [], root, axis;
        var that = this;
        let axes = that._metaData.getAxes();
        Object.keys(axes).forEach((axisName) => {
            let dimensions = axes[axisName];
            var foundDimensions = dimensions.filter((dimension) => {
                return dimension.id === dimensionId;
            });
            if (foundDimensions) {
                root = that._rootItems[axisName];
                axis = new _item_data_axis_1.itemDataAxis(dimensions, root);
                points = axis.getPointsByDimension(dimensionId);
                return false;
            }
        });
        return points;
    }
    _getKeys(points) {
        var that = this, rootItems = that._rootItems, keysList = [];
        Object.keys(rootItems).forEach((axisName) => {
            var userPoint = (points && points[axisName]), point = userPoint || rootItems[axisName];
            keysList.push(point.getKey());
        });
        return keysList;
    }
    _getValue(measureId) {
        var that = this;
        return that._getCellValue(that._getKeys(), measureId);
    }
    _getMeasureValueByKeys(keys, mId, format) {
        var that = this;
        return {
            getValue: function () {
                return that._getCellValue(keys, mId);
            },
            getDisplayText: function () {
                return that._getCellDisplayText(keys, mId, format);
            }
        };
    }
    _getDeltaValueByKeys(keys, deltaIds, formats) {
        var that = this, names = _item_meta_data_1.deltaValueNames, getValueItem = function (valueName) {
            return {
                getValue: function () {
                    return that._getCellValue(keys, deltaIds[valueName]);
                },
                getDisplayText: function () {
                    var format = formats[valueName];
                    if (format) {
                        format = {
                            NumericFormat: format
                        };
                    }
                    return that._getCellDisplayText(keys, deltaIds[valueName], format);
                }
            };
        };
        return {
            getActualValue: function () {
                return getValueItem(names.actualValue);
            },
            getTargetValue: function () {
                return getValueItem(names.targetValue);
            },
            getAbsoluteVariation: function () {
                return getValueItem(names.absoluteVariation);
            },
            getPercentVariation: function () {
                return getValueItem(names.percentVariation);
            },
            getPercentOfTarget: function () {
                return getValueItem(names.percentOfTarget);
            },
            getIsGood: function () {
                return getValueItem(names.isGood);
            },
            getIndicatorType: function () {
                return getValueItem(names.indicatorType);
            },
            getDisplayValue: function () {
                return getValueItem(names.mainValue);
            },
            getDisplaySubValue1: function () {
                return getValueItem(names.subValue1);
            },
            getDisplaySubValue2: function () {
                return getValueItem(names.subValue2);
            }
        };
    }
    _createPointsCache(axisPoints) {
        var cache = {};
        for (var i = 0; i < axisPoints.length; i++) {
            var areaName = axisPoints[i].getAxisName();
            cache[areaName] = axisPoints[i];
        }
        return cache;
    }
    getMeasureValueByAxisPoints(measureId, axisPoints) {
        var that = this, format = that.getMeasureFormat(measureId), pointsCache = that._createPointsCache(axisPoints);
        return that._getMeasureValueByKeys(that._getKeys(pointsCache), measureId, format);
    }
    getDeltaValue(deltaId) {
        var that = this, metaData = that._metaData, deltaIds = metaData.getDeltaValueIds(deltaId), formats = metaData.getDeltaFormats(deltaId);
        return that._getDeltaValueByKeys(that._getKeys(), deltaIds, formats);
    }
    getDeltaValueByAxisPoints(deltaId, axisPoints) {
        var that = this, metaData = this._metaData, deltaIds = metaData.getDeltaValueIds(deltaId), formats = metaData.getDeltaFormats(deltaId), pointsCache = this._createPointsCache(axisPoints);
        return this._getDeltaValueByKeys(that._getKeys(pointsCache), deltaIds, formats);
    }
    getDataMembers() {
        return this._metaData.getDataMembers();
    }
    createTuple(values) {
        var that = this, axisPoints = [];
        if (values[0] instanceof _item_data_axis_point_1.itemDataAxisPoint) {
            axisPoints = values;
        }
        else {
            values.forEach((axisValue) => {
                var axis = that.getAxis(axisValue.axisName), axisPoint = axis.getPointByUniqueValues(axisValue.value);
                axisPoints.push(axisPoint);
            });
        }
        return new _item_data_tuple_1.itemDataTuple(axisPoints);
    }
    _getCellValue(keys, valueId) {
        return this._storage.getCrossValue(keys, valueId);
    }
    _getCellDisplayText(keys, valueId, format) {
        return format ? _formatter_1.format(this._getCellValue(keys, valueId), format) : undefined;
    }
    _getSliceByAxisPoint(axisPoint) {
        var that = this, rootItems = that._rootItems, newRootItems = {};
        Object.keys(rootItems).forEach((name) => {
            newRootItems[name] = axisPoint.getAxisName() === name ? axisPoint : rootItems[name];
        });
        return new itemData(that._metaData, that._storage, newRootItems);
    }
    _getSliceByTuple(tuple) {
        var data = this;
        tuple._axisPoints.forEach((axisPoint) => {
            data = data._getSliceByAxisPoint(axisPoint);
        });
        return data;
    }
}
exports.itemData = itemData;


/***/ }),

/***/ 78074:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.itemDataAxisBuilder = exports.pivotAreaNames = void 0;
const _utils_1 = __webpack_require__(7590);
const _item_data_axis_point_1 = __webpack_require__(3503);
exports.pivotAreaNames = {
    columns: 'Columns',
    rows: 'Rows'
};
function redBlackTreeNodeComparer(arr1, arr2) {
    for (var i = 0; i < arr1.length && i < arr2.length; i++) {
        if (arr1[i] > arr2[i])
            return 1;
        if (arr1[i] < arr2[i])
            return -1;
    }
    if (arr1.length < arr2.length)
        return -1;
    if (arr1.length > arr2.length)
        return 1;
    return 0;
}
exports.itemDataAxisBuilder = {
    build: function (name, storage, dimensions, sortOrderSlices, metaData, iterators) {
        const cache = new _utils_1.RedBlackTree(redBlackTreeNodeComparer);
        const keyIds = dimensions.map(dimension => dimension.id);
        const allSlicesKeyIdsList = this._getKeyIdsList(keyIds);
        const levelInfoList = allSlicesKeyIdsList.map((keyIds, index) => {
            var baseKeyIds = keyIds.slice(-1), baseKeyId = baseKeyIds.length > 0 ? baseKeyIds[0] : null, metaDataSliceKey = storage.getSliceKey(baseKeyIds), dataSlice = storage.getOrCreateSlice(keyIds), level = index - 1;
            return {
                axisName: name,
                metaData: metaData,
                dataSlice: dataSlice,
                level: level,
                getMetaDataValue: function (dataRowKey, valueId) {
                    if (metaDataSliceKey < 0)
                        return null;
                    var metaDataRowKey = storage.findDataRowKey(metaDataSliceKey, dataRowKey);
                    return storage.getValue(metaDataRowKey, valueId);
                },
                getBaseValue: function (dataRowKey) {
                    return (level >= 0) ? storage.getKeyValue(dataRowKey, baseKeyId) : null;
                }
            };
        });
        const rootNode = new _item_data_axis_point_1.itemDataAxisPoint(levelInfoList[0], { rowKey: [], sliceKey: levelInfoList[0].dataSlice.getKey() });
        cache.getOrAdd([], () => rootNode);
        allSlicesKeyIdsList.forEach((keyIds) => {
            if (keyIds.length > 0 && !this._isSortOrderSlice(keyIds, sortOrderSlices))
                return;
            var levelInfo = levelInfoList[keyIds.length];
            var slice = levelInfo.dataSlice;
            var iterator = (slice && iterators) ? iterators[slice.getKey()] : slice;
            if (iterator) {
                iterator.forEach(function (dataRowKey) {
                    var item = null, childItem = null;
                    do {
                        var level = dataRowKey.rowKey.length;
                        let createAxisPoint = () => {
                            let levelInfo = levelInfoList[level];
                            return new _item_data_axis_point_1.itemDataAxisPoint(levelInfo, dataRowKey);
                        };
                        let addResult = cache.getOrAdd(dataRowKey.rowKey, createAxisPoint);
                        item = addResult.value;
                        if (childItem != null) {
                            item.getChildren().push(childItem);
                            childItem._setParent(item);
                        }
                        if (!addResult.added || level == 0)
                            break;
                        var prevSliceKey = levelInfoList[level - 1].dataSlice.getKey();
                        dataRowKey = storage.findDataRowKey(prevSliceKey, dataRowKey);
                        childItem = item;
                    } while (true);
                });
            }
        });
        return rootNode;
    },
    _getKeyIdsList: function (keyIds) {
        var list = [[]];
        keyIds.forEach((_, i) => {
            var slice = keyIds.slice(0, i + 1);
            list.push(slice);
        });
        return list;
    },
    _isSortOrderSlice: function (slice, sortOrderSlices) {
        var result = !sortOrderSlices || sortOrderSlices.length == 0;
        if (!result) {
            sortOrderSlices.forEach((orderSlice) => {
                result = result || _utils_1.areNotOrderedListsEqual(slice, orderSlice);
                return !result;
            });
        }
        return result;
    }
};


/***/ }),

/***/ 59385:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.itemDataAxisHelper = void 0;
const data_1 = __webpack_require__(72858);
exports.itemDataAxisHelper = {
    eachPoint: function (point, _process) {
        var that = this, children = point.getChildren();
        if (_process(point) === false)
            return false;
        children.forEach(childPoint => {
            if (that.eachPoint(childPoint, _process) === false)
                return false;
        });
    },
    findFirstPoint: function (root, predicate) {
        var that = this, foundPoint = undefined;
        that.eachPoint(root, function (point) {
            var points = point.getAxisPath();
            if (predicate(points)) {
                foundPoint = point;
                return false;
            }
        });
        return foundPoint;
    },
    findFirstPointByUniqueValues: function (root, values) {
        var that = this;
        return that.findFirstPoint(root, function (points) {
            return that._equalPredicate(points, values, function (value, point) {
                return that._areEqual(value, point.getUniqueValue());
            });
        });
    },
    findFirstPointByValues: function (root, values) {
        var that = this;
        return that.findFirstPoint(root, function (points) {
            return that._equalPredicate(points, values, function (value, point) {
                return that._areEqual(value, point.getValue());
            });
        });
    },
    findFirstPointByUniqueValueAndDimension: function (root, value, dimensionId) {
        var that = this, foundPoint = undefined;
        that.eachPoint(root, function (point) {
            var dimension = point.getDimension();
            if (!!dimension && dimension.id === dimensionId && that._areEqual(value, point.getUniqueValue())) {
                foundPoint = point;
                return false;
            }
        });
        return foundPoint;
    },
    _areEqual: function (value1, value2) {
        return data_1.toComparable(value1, false) === data_1.toComparable(value2, false);
    },
    _equalPredicate: function (points, values, equal) {
        values = values || [];
        if (points.length != values.length)
            return false;
        var passes = true;
        values.forEach((value, index) => {
            passes = passes && equal(value, points[index]);
            return passes;
        });
        return passes;
    },
    forSamePoints: function (baseItem, item, process) {
        var that = this;
        process(baseItem, item);
        baseItem.getChildren().forEach(baseChild => {
            var child = that.findChildByUniqueValue(item, baseChild.getUniqueValue());
            if (child)
                that.forSamePoints(baseChild, child, process);
        });
    },
    findChildByUniqueValue: function (point, value) {
        var that = this, children = point.getChildren(), foundPoint = undefined;
        children.forEach(child => {
            if (that._areEqual(value, child.getUniqueValue())) {
                foundPoint = child;
                return false;
            }
        });
        return foundPoint;
    },
    getValuesByTuples: function (tuples, dimensionIds) {
        var values = [], dimensionCount = dimensionIds.length;
        tuples.forEach(tuple => {
            var value = [], axisPoint = tuple.getAxisPoint();
            while (axisPoint.getParent() != null) {
                value.push(axisPoint.getUniqueValue());
                if (dimensionCount == 1)
                    break;
                axisPoint = axisPoint.getParent();
            }
            value.reverse();
            values.push(value);
        });
        return values;
    }
};


/***/ }),

/***/ 40552:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.itemDataManager = void 0;
const _data_storage_1 = __webpack_require__(39486);
const item_data_axis_names_1 = __webpack_require__(51101);
const _item_data_1 = __webpack_require__(75291);
const _item_data_axis_builder_1 = __webpack_require__(78074);
const _item_data_axis_helper_1 = __webpack_require__(59385);
const _item_meta_data_1 = __webpack_require__(74009);
class itemDataManager {
    initialize(itemDataDTO) {
        var metaData = this._createMetaData(itemDataDTO.MetaData), ds = new _data_storage_1.dataStorage(itemDataDTO.DataStorageDTO), items = {};
        let axes = metaData.getAxes();
        Object.keys(axes).forEach((name) => {
            items[name] = _item_data_axis_builder_1.itemDataAxisBuilder.build(name, ds, axes[name], itemDataDTO.SortOrderSlices, metaData);
        });
        this._dataStorage = ds;
        this._metaData = metaData;
        this._itemData = new _item_data_1.itemData(metaData, ds, items);
        this._items = items;
    }
    updateExpandedData(expandedItemDataDTO, expandInfo) {
        var that = this, areaNames = item_data_axis_names_1.itemDataAxisNames, sortOrderSlices = expandedItemDataDTO.SortOrderSlices, area = expandInfo.pivotArea == _item_data_axis_builder_1.pivotAreaNames.columns ? areaNames.pivotColumnAxis : areaNames.pivotRowAxis, values = expandInfo.values, metaData = that._metaData, ds = new _data_storage_1.dataStorage(expandedItemDataDTO.DataStorageDTO);
        var iterators = that._dataStorage.insert(ds, sortOrderSlices);
        var expandedAreaNewRootItem = _item_data_axis_builder_1.itemDataAxisBuilder.build(area, that._dataStorage, metaData.getAxes()[area], sortOrderSlices, metaData, iterators);
        if (!!expandedAreaNewRootItem) {
            var expandedAreaRootItem = that._items[area], expandedItem = _item_data_axis_helper_1.itemDataAxisHelper.findFirstPointByUniqueValues(expandedAreaRootItem, values), expandedNewItem = _item_data_axis_helper_1.itemDataAxisHelper.findFirstPointByUniqueValues(expandedAreaNewRootItem, values);
            if (!!expandedNewItem) {
                var newChildren = expandedNewItem.getChildren();
                newChildren.forEach((child) => {
                    child._setParent(expandedItem);
                });
                expandedItem._setChildren(newChildren);
            }
        }
    }
    updateTotals(expandedItemDataDTO) {
        const totalSliceKeyIds = [];
        let ds = new _data_storage_1.dataStorage(expandedItemDataDTO.DataStorageDTO);
        this._dataStorage.insertSlice(ds, totalSliceKeyIds);
    }
    getDataStorage() {
        return this._dataStorage;
    }
    getItemData() {
        return this._itemData;
    }
    getMetaData() {
        return this._metaData;
    }
    _createMetaData(metaDataDTO) {
        var metaData = new _item_meta_data_1.itemMetaData(metaDataDTO);
        metaData.initialize();
        return metaData;
    }
}
exports.itemDataManager = itemDataManager;


/***/ }),

/***/ 74009:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.itemMetaData = exports.deltaValueTypes = exports.deltaValueNames = void 0;
const _formatter_1 = __webpack_require__(93687);
const item_data_axis_names_1 = __webpack_require__(51101);
exports.deltaValueNames = {
    actualValue: 'actualValue',
    targetValue: 'targetValue',
    absoluteVariation: 'absoluteVariation',
    percentVariation: 'percentVariation',
    percentOfTarget: 'percentOfTarget',
    mainValue: 'mainValue',
    subValue1: 'subValue1',
    subValue2: 'subValue2',
    isGood: 'isGood',
    indicatorType: 'indicatorType'
};
exports.deltaValueTypes = {
    actualValue: 'ActualValue',
    absoluteVariation: 'AbsoluteVariation',
    percentVariation: 'PercentVariation',
    percentOfTarget: 'PercentOfTarget',
    targetValue: 'TargetValue'
};
class itemMetaData {
    constructor(metaDataDto) {
        this._metaDataDto = metaDataDto;
    }
    initialize() {
        let metaDataDto = this._metaDataDto;
        this._measuresInfo = this._createMeasureInfo(metaDataDto.MeasureDescriptors);
        this._colorMeasuresInfo = this._createMeasureInfo(metaDataDto.ColorMeasureDescriptors);
        this._conditionalFormattingMeasuresInfo = this._createMeasureInfo(metaDataDto.FormatConditionMeasureDescriptors);
        this._deltaInfo = this._createDeltaInfo();
        this._axesInfo = this._createAxesInfo();
        this._dataSourceColumns = this._metaDataDto.DataSourceColumns;
    }
    _createMeasureInfo(descriptors) {
        var measures = [], formatByMeasureId = {};
        let expressionByMeasureId = {};
        let calculationByMeasureId = {};
        let windowDefinitionByMeasureId = {};
        if (descriptors) {
            descriptors.forEach((_measure) => {
                var measure = {
                    id: _measure.ID,
                    name: _measure.Name,
                    dataItemId: _measure.DataItemId,
                    dataMember: _measure.DataMember,
                    dataType: _measure.DataType,
                    finalDataType: _measure.FinalDataType,
                    summaryType: _measure.SummaryType,
                    format: function (value) {
                        var format = _measure.Format, text = undefined;
                        if (format)
                            text = _formatter_1.format(value, format);
                        return text;
                    }
                };
                measures.push(measure);
                formatByMeasureId[measure.id] = _measure.Format;
                expressionByMeasureId[measure.id] = _measure.Expression;
                calculationByMeasureId[measure.id] = _measure.Calculation;
                windowDefinitionByMeasureId[measure.id] = _measure.WindowDefinition;
            });
        }
        return {
            measures: measures,
            formatByMeasureId: formatByMeasureId,
            expressionByMeasureId: expressionByMeasureId,
            calculationByMeasureId: calculationByMeasureId,
            windowDefinitionByMeasureId: windowDefinitionByMeasureId
        };
    }
    _createDeltaInfo() {
        var metaData = this._metaDataDto, names = exports.deltaValueNames, deltas = [], valueIdsByDeltaId = {}, formatsByDeltaId = {};
        if (metaData.DeltaDescriptors) {
            metaData.DeltaDescriptors.forEach((_delta) => {
                var delta = {
                    id: _delta.ID,
                    name: _delta.Name,
                    actualMeasureId: _delta.ActualMeasureID,
                    targetMeasureId: _delta.TargetMeasureID
                }, ids = {}, formats = {};
                deltas.push(delta);
                ids[names.actualValue] = _delta.ActualValueID;
                ids[names.targetValue] = _delta.TargetValueID;
                ids[names.absoluteVariation] = _delta.AbsoluteVariationID;
                ids[names.percentVariation] = _delta.PercentVariationID;
                ids[names.percentOfTarget] = _delta.PercentOfTargetID;
                ids[names.isGood] = _delta.IsGoodID;
                ids[names.indicatorType] = _delta.IndicatorTypeID;
                formats[names.actualValue] = _delta.ActualValueFormat;
                formats[names.targetValue] = _delta.TargetValueFormat;
                formats[names.absoluteVariation] = _delta.AbsoluteVariationFormat;
                formats[names.percentVariation] = _delta.PercentVariationFormat;
                formats[names.percentOfTarget] = _delta.PercentOfTargetFormat;
                switch (_delta.DeltaValueType) {
                    case exports.deltaValueTypes.actualValue:
                        ids[names.mainValue] = ids[names.actualValue];
                        ids[names.subValue1] = ids[names.absoluteVariation];
                        ids[names.subValue2] = ids[names.percentVariation];
                        formats[names.mainValue] = formats[names.actualValue];
                        formats[names.subValue1] = formats[names.absoluteVariation];
                        formats[names.subValue2] = formats[names.percentVariation];
                        break;
                    case exports.deltaValueTypes.absoluteVariation:
                        ids[names.mainValue] = ids[names.absoluteVariation];
                        ids[names.subValue1] = ids[names.actualValue];
                        ids[names.subValue2] = ids[names.percentVariation];
                        formats[names.mainValue] = formats[names.absoluteVariation];
                        formats[names.subValue1] = formats[names.actualValue];
                        formats[names.subValue2] = formats[names.percentVariation];
                        break;
                    case exports.deltaValueTypes.percentVariation:
                        ids[names.mainValue] = ids[names.percentVariation];
                        ids[names.subValue1] = ids[names.actualValue];
                        ids[names.subValue2] = ids[names.absoluteVariation];
                        formats[names.mainValue] = formats[names.percentVariation];
                        formats[names.subValue1] = formats[names.actualValue];
                        formats[names.subValue2] = formats[names.absoluteVariation];
                        break;
                    case exports.deltaValueTypes.percentOfTarget:
                        ids[names.mainValue] = ids[names.percentOfTarget];
                        ids[names.subValue1] = ids[names.actualValue];
                        ids[names.subValue2] = ids[names.absoluteVariation];
                        formats[names.mainValue] = formats[names.percentOfTarget];
                        formats[names.subValue1] = formats[names.actualValue];
                        formats[names.subValue2] = formats[names.absoluteVariation];
                        break;
                    case exports.deltaValueTypes.targetValue:
                        ids[names.mainValue] = ids[names.targetValue];
                        ids[names.subValue1] = ids[names.absoluteVariation];
                        ids[names.subValue2] = ids[names.percentVariation];
                        formats[names.mainValue] = formats[names.targetValue];
                        formats[names.subValue1] = formats[names.absoluteVariation];
                        formats[names.subValue2] = formats[names.percentVariation];
                        break;
                }
                valueIdsByDeltaId[delta.id] = ids;
                formatsByDeltaId[delta.id] = formats;
            });
        }
        return {
            deltas: deltas,
            valueIdsByDeltaId: valueIdsByDeltaId,
            formatsByDeltaId: formatsByDeltaId
        };
    }
    _createAxesInfo() {
        var metaDataDto = this._metaDataDto, axes = {}, dimensionDescriptorsByAxisName = metaDataDto.DimensionDescriptors || {}, levelByDimensionId = {}, formatByDimensionId = {}, pivotAreaByAxisName = {};
        Object.keys(dimensionDescriptorsByAxisName).forEach((_name) => {
            let _dimensions = dimensionDescriptorsByAxisName[_name];
            var dimensions = [];
            if (_dimensions) {
                _dimensions.forEach((_dimension) => {
                    var dimension = {
                        id: _dimension.ID,
                        name: _dimension.Name,
                        dataMember: _dimension.DataMember,
                        finalDataType: _dimension.FinalDataType,
                        dataType: _dimension.DataType,
                        dateTimeGroupInterval: _dimension.DateTimeGroupInterval,
                        textGroupInterval: _dimension.TextGroupInterval,
                        getFormat: function () {
                            return _formatter_1.convertToFormat(_dimension.Format);
                        },
                        format: function (value) {
                            var format = _dimension.Format, text = undefined;
                            if (format)
                                text = _formatter_1.format(value, format);
                            return text;
                        }
                    };
                    levelByDimensionId[dimension.id] = _dimension.Level;
                    formatByDimensionId[dimension.id] = _dimension.Format;
                    dimensions.push(dimension);
                });
            }
            axes[_name] = dimensions;
        });
        if (metaDataDto.ColumnHierarchy)
            pivotAreaByAxisName[metaDataDto.ColumnHierarchy] = 'Columns';
        if (metaDataDto.RowHierarchy)
            pivotAreaByAxisName[metaDataDto.RowHierarchy] = 'Rows';
        return {
            axes: axes,
            levelByDimensionId: levelByDimensionId,
            formatByDimensionId: formatByDimensionId,
            pivotAreaByAxisName: pivotAreaByAxisName
        };
    }
    getAxes() {
        return this._axesInfo.axes;
    }
    getAxisNames() {
        var names = [];
        Object.keys(this.getAxes()).forEach((name) => {
            names.push(name);
        });
        return names;
    }
    getPivotAreaByAxisName(name) {
        return this._axesInfo.pivotAreaByAxisName[name];
    }
    getColorMeasures() {
        return this._colorMeasuresInfo.measures;
    }
    getConditionalFormattingMeasures() {
        return this._conditionalFormattingMeasuresInfo.measures;
    }
    getDimensions(axisName) {
        return this.getAxes()[axisName === undefined ? item_data_axis_names_1.itemDataAxisNames.defaultAxis : axisName];
    }
    getMeasures() {
        return this._measuresInfo.measures;
    }
    getDeltas() {
        return this._deltaInfo.deltas;
    }
    getMeasureById(id) {
        var measures = this.getMeasures(), foundMeasures = measures.filter((measure) => {
            return measure.id == id;
        });
        return foundMeasures[0];
    }
    getDeltaById(id) {
        var deltas = this.getDeltas(), foundDeltas = deltas.filter((delta) => {
            return delta.id == id;
        });
        return foundDeltas[0];
    }
    getMeasureFormat(measureId) {
        return this._measuresInfo.formatByMeasureId[measureId];
    }
    getMeasureExpression(measureId) {
        return this._measuresInfo.expressionByMeasureId[measureId];
    }
    getMeasureCalculation(measureId) {
        return this._measuresInfo.calculationByMeasureId[measureId];
    }
    getMeasureWindowDefinition(measureId) {
        return this._measuresInfo.windowDefinitionByMeasureId[measureId];
    }
    getDeltaValueIds(deltaId) {
        return this._deltaInfo.valueIdsByDeltaId[deltaId];
    }
    getDeltaFormats(deltaId) {
        return this._deltaInfo.formatsByDeltaId[deltaId];
    }
    getDeltaValueType(deltaId) {
    }
    getDimensionLevel(dimensionId) {
        return this._axesInfo.levelByDimensionId[dimensionId];
    }
    getDimensionFormat(dimensionId) {
        return this._axesInfo.formatByDimensionId[dimensionId];
    }
    getDataMembers() {
        return this._dataSourceColumns;
    }
    getFinalDataType(dataItemId) {
        var dataItem = this.getMeasureById(dataItemId);
        if (!dataItem) {
            let axes = this.getAxes();
            Object.keys(axes).forEach((axisName) => {
                let dimensions = axes[axisName];
                dataItem = dimensions.filter(d => d.id == dataItemId)[0];
                if (!!dataItem) {
                    return false;
                }
            });
        }
        return !!dataItem ? dataItem.finalDataType : undefined;
    }
}
exports.itemMetaData = itemMetaData;


/***/ }),

/***/ 51101:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.itemDataAxisNames = void 0;
exports.itemDataAxisNames = {
    defaultAxis: 'Default',
    chartSeriesAxis: 'Series',
    chartArgumentAxis: 'Argument',
    sparklineAxis: 'Sparkline',
    pivotColumnAxis: 'Column',
    pivotRowAxis: 'Row'
};


/***/ }),

/***/ 59441:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 65855:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getDefaultLocalization = exports.formatLocalizable = exports.getLocalizationById = exports.tryLocalize = exports.defaultLocalization = void 0;
const analytics_internal_1 = __webpack_require__(19745);
const string_1 = __webpack_require__(36306);
exports.defaultLocalization = {
    'DashboardStringId.ActionClearMasterFilter': 'Clear Master Filter',
    'DashboardStringId.ActionClearSelection': 'Clear Selection',
    'DashboardStringId.ActionOtherValues': 'Values',
    'DashboardStringId.ActionDrillUp': 'Drill Up',
    'DashboardStringId.ActionExportTo': 'Export To',
    'DashboardStringId.ActionExportToPdf': 'Export To PDF',
    'DashboardStringId.ActionExportToImage': 'Export To Image',
    'DashboardStringId.ActionExportToExcel': 'Export To Excel',
    'DashboardStringId.RangeFilterCustomDateTimePeriod': 'Custom Period',
    'DashboardStringId.ActionExportTemplate': '{0} - {1}',
    'DashboardStringId.ActionAllowMultiselection': 'Multi-Select',
    'DashboardStringId.DashboardNullValue': ' ',
    'DashboardStringId.TopNOthersValue': 'Others',
    'DashboardStringId.DashboardErrorValue': 'Error',
    'DashboardStringId.DateTimeQuarterFormat': 'Q{0}',
    'DashboardStringId.MessageLoading': 'Loading...',
    'DashboardStringId.ParametersFormCaption': 'Dashboard Parameters',
    'DashboardStringId.ParametersSelectorText': 'Select...',
    'DashboardStringId.ParametersFormAllowNullColumnCaption': 'Pass Null',
    'DashboardStringId.ParametersFormValueColumnCaption': 'Value',
    'DashboardStringId.ParametersFormNameColumnCaption': 'Parameter Name',
    'DashboardStringId.ButtonOK': 'OK',
    'DashboardStringId.ButtonCancel': 'Cancel',
    'DashboardStringId.SelectDate': 'Select date',
    'DashboardStringId.ButtonReset': 'Reset',
    'DashboardStringId.ButtonSubmit': 'Submit',
    'DashboardStringId.ButtonApply': 'Apply',
    'DashboardStringId.ButtonExport': 'Export',
    'DashboardStringId.GridResetColumnWidths': 'Reset column widths',
    'DashboardStringId.GridSortAscending': 'Sort Ascending',
    'DashboardStringId.GridSortDescending': 'Sort Descending',
    'DashboardStringId.GridClearSorting': 'Clear Sorting',
    'DashboardStringId.PivotGridTotal': '{0} Total',
    'DashboardStringId.PivotGridGrandTotal': 'Grand Total',
    'DashboardStringId.ChartTotalValue': 'Total',
    'DashboardStringId.PageLayout': 'Page Layout',
    'DashboardStringId.PageLayoutAuto': 'Auto',
    'DashboardStringId.PageLayoutPortrait': 'Portrait',
    'DashboardStringId.PageLayoutLandscape': 'Landscape',
    'DashboardStringId.PaperKind': 'Size',
    'DashboardStringId.PaperKindLetter': 'Letter',
    'DashboardStringId.PaperKindLegal': 'Legal',
    'DashboardStringId.PaperKindExecutive': 'Executive',
    'DashboardStringId.PaperKindA5': 'A5',
    'DashboardStringId.PaperKindA4': 'A4',
    'DashboardStringId.PaperKindA3': 'A3',
    'DashboardStringId.ScaleMode': 'Scale Mode',
    'DashboardStringId.ScaleModeNone': 'None',
    'DashboardStringId.ScaleModeUseScaleFactor': 'Use Scale Factor',
    'DashboardStringId.ScaleModeAutoFitToPagesWidth': 'Auto Fit to Pages Width',
    'DashboardStringId.AutoFitPageCount': 'Auto Fit Page Count',
    'DashboardStringId.ScaleFactor': 'Scale Factor',
    'DashboardStringId.PrintHeadersOnEveryPage': 'Print Headers on Every Page',
    'DashboardStringId.FitToPageWidth': 'Fit to Page Width',
    'DashboardStringId.SizeMode': 'Size Mode',
    'DashboardStringId.SizeModeNone': 'None',
    'DashboardStringId.SizeModeStretch': 'Stretch',
    'DashboardStringId.SizeModeZoom': 'Zoom',
    'DashboardStringId.AutoArrangeContent': 'Auto Arrange Content',
    'DashboardStringId.ImageFormat': 'Image Format',
    'DashboardStringId.ExcelFormat': 'ExcelFormat',
    'DashboardStringId.CsvValueSeparator': 'Separator',
    'DashboardStringId.ExportFilters': 'Export Filters',
    'DashboardStringId.ExportParameters': 'Export Parameters',
    'DashboardStringId.DashboardStatePosition': 'Dashboard State',
    'DashboardStringId.Resolution': 'Resolution (dpi)',
    'DashboardStringId.ShowTitle': 'Show Title',
    'DashboardStringId.Title': 'Title',
    'DashboardStringId.FileName': 'File Name',
    'DashboardStringId.FilterStatePresentationAfter': 'Below',
    'DashboardStringId.FilterStatePresentationAfterAndSplitPage': 'Separate Page',
    'DashboardStringId.FilterStatePresentationSplitSheet': 'Separate Sheet',
    'DashboardStringId.MessageCustomItemIsNotSupported': 'The custom item is not supported by this control.',
    'DashboardStringId.MessageGridHasNoData': 'The grid has no data.',
    'DashboardStringId.MessagePivotHasNoData': 'The pivot grid has no data.',
    'DashboardStringId.SparklineTooltipStartValue': 'Start:',
    'DashboardStringId.SparklineTooltipEndValue': 'End:',
    'DashboardStringId.SparklineTooltipMinValue': 'Min:',
    'DashboardStringId.SparklineTooltipMaxValue': 'Max:',
    'DashboardStringId.OpenCaption': 'Open',
    'DashboardStringId.HighCaption': 'High',
    'DashboardStringId.LowCaption': 'Low',
    'DashboardStringId.CloseCaption': 'Close',
    'DashboardStringId.InitialExtent': 'Initial Extent',
    'DashboardStringId.FilterElementShowAllItem': '(All)',
    'DashboardStringId.NumericFormatUnitSymbolThousands': 'K',
    'DashboardStringId.NumericFormatUnitSymbolMillions': 'M',
    'DashboardStringId.NumericFormatUnitSymbolBillions': 'B',
    'DashboardStringId.ActionSelectDateTimePeriod': 'Select Date Time Period',
    'DashboardStringId.RangeFilterSelectRange': 'Select Range',
    'DashboardStringId.FilterElementCheckedComboBoxNoDataCaption': '(none)',
    'DashboardStringId.FilterElementRadioComboBoxNoDataCaption': 'Select...',
    'DashboardStringId.FilterElementNoDataToDisplay': 'No data to display',
    'DashboardWebStringId.FilterElementCheckedComboBoxSelected': '{0} selected',
    'DashboardStringId.RangeFilterSelectRangeFromCaption': 'From:',
    'DashboardStringId.RangeFilterSelectRangeToCaption': 'To:',
    'DashboardWebStringId.DashboardParameters': 'Parameters',
    'DashboardStringId.DataSourceDataMember': 'Data Member',
    'DashboardStringId.DescriptionMeasures': 'Measures',
    'DashboardWebStringId.TextBoxFormatText': 'Format',
    'DashboardStringId.NumericFormatUnitCaption': 'Unit',
    'DashboardWebStringId.SummaryType': 'Summary Type',
    'DashboardStringId.CalculationTypeExpression': 'Expression',
    'DevExpressWebStringId.CalculatedFieldDataType': 'DataType',
    'DashboardStringId.ValueCaption': 'Value',
    'DashboardStringId.Value1Caption': 'Value 1',
    'DashboardStringId.Value2Caption': 'Value 2',
    'DashboardStringId.CommandFormatRuleTopBottom': 'Top/Bottom',
    'DashboardStringId.CommandFormatRuleAboveBelowAverage': 'Average',
    'DashboardStringId.CommandFormatRuleBar': 'Bar',
    'DashboardStringId.CommandFormatRuleColorRangeBar': 'Color Range Bar',
    'DashboardStringId.CommandFormatRuleGradientRangeBar': 'Bar Gradient Ranges',
    'DashboardStringId.FormatRuleStyleAppearance': 'Appearance',
    'DashboardStringId.FormatRuleStyleIcons': 'Icons',
    'DashboardStringId.FormatRuleNegativeStyle': 'NegativeStyleSettings',
    'DashboardStringId.CommandFormatRuleExpression': 'Expression',
    'DashboardWebStringId.TopNMode': 'Mode',
    'DashboardStringId.CommandFormatRuleRangeSet': 'Range Set',
    'DashboardStringId.CommandFormatRuleValue': 'Value',
    'DashboardStringId.CommandFormatRuleDateOccurring': 'A Date Occurring',
    'DashboardWebStringId.ConditionalFormatting.Appearance.BackColor': 'BackColor',
    'DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor': 'ForeColor',
    'DashboardStringId.DescriptionBoundImageAttribute': 'Attribute',
    'DashboardWebStringId.ShowCaptionText': 'Show Caption',
    'DashboardWebStringId.DisplayItemAsPage': 'Display Item as Page',
    'DashboardStringId.DefaultNameItemGroup': 'Group',
    'DashboardStringId.DefaultNameTabContainerItem': 'Tab Container',
    'DashboardStringId.DefaultDataSourceName': 'Data Source',
    'DashboardWebStringId.CrossDataSourceFiltering': 'Cross-Data-Source Filtering',
    'DashboardStringId.RangeFilterCalculationAlongSeries': 'Series',
    'DashboardStringId.RangeFilterCalculationAlongArgument': 'Argument',
    'DashboardStringId.DescriptionItemSeries': 'Series',
    'DashboardStringId.DescriptionSeries': 'Series',
    'DashboardWebStringId.Chart.SeriesType': 'Series Type',
    'DashboardStringId.DescriptionDimensions': 'Dimensions',
    'DashboardWebStringId.TreeView.AutoExpand': 'AutoExpand',
    'DashboardWebStringId.ConditionalFormatting.ConditionMinimum': 'Minimum',
    'DashboardWebStringId.ConditionalFormatting.ConditionMaximum': 'Maximum',
    'DashboardStringId.DescriptionItemDimension': 'Dimension',
    'DashboardStringId.DescriptionItemMeasure': 'Measure',
    'DashboardWebStringId.Grid.MergeCells': 'Merge Cells',
    'DashboardWebStringId.Grid.ColumnWidthMode': 'Column Width Mode',
    'DashboardWebStringId.Grid.BandedRows': 'Banded Rows',
    'DashboardWebStringId.Grid.VerticalLines': 'Vertical Lines',
    'DashboardWebStringId.Grid.HorizontalLines': 'Horizontal Lines',
    'DashboardWebStringId.Grid.ColumnHeaders': 'Column Headers',
    'DashboardWebStringId.Grid.WordWrap': 'Word Wrap',
    'DashboardWebStringId.Grid.ShowFilterRow': 'Filter Row',
    'DashboardWebStringId.Grid.UpdateTotals': 'Update Totals',
    'DashboardWebStringId.Grid.GridColumnFilter': 'Column Filter',
    'DashboardStringId.ActualValueCaption': 'Actual',
    'DashboardStringId.TargetValueCaption': 'Target',
    'DashboardStringId.UriPatternCaption': 'Uri Pattern',
    'DashboardStringId.UriCaption': 'Uri',
    'DashboardStringId.DisplayValueCaption': 'Display Value',
    'DashboardStringId.WeightCaption': 'Weight',
    'DashboardStringId.DescriptionItemColor': 'Color',
    'DashboardStringId.Latitude': 'Latitude',
    'DashboardStringId.Longitude': 'Longitude',
    'DashboardWebStringId.GeoPointMapClusterization': 'Enable Clustering',
    'DashboardWebStringId.MapLockNavigation': 'Navigation',
    'DashboardWebStringId.WeightedLegendGalleryGroup': 'Position',
    'DashboardStringId.DescriptionItemArgument': 'Argument',
    'DashboardWebStringId.PieMapIsWeighted': 'Weighted Pies',
    'DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters': 'Ignore Master Filters',
    'DashboardWebStringId.InteractivityOptions.DrillDown': 'Drill Down',
    'DashboardWebStringId.Pie.ShowCaptions': 'Show Pie Captions',
    'DashboardStringId.DescriptionColumns': 'Columns',
    'DashboardStringId.DescriptionRows': 'Rows',
    'DashboardStringId.DescriptionValues': 'Values',
    'DashboardStringId.DescriptionArguments': 'Arguments',
    'DashboardStringId.TextGroupIntervalAlphabetical': 'Alphabetical',
    'DashboardStringId.ActionMaximizeDashboardItem': 'Maximize',
    'DashboardStringId.ActionRestoreDashboardItem': 'Restore Down',
    'DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource': 'Data Source',
    'DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember': 'Data Member',
    'DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember': 'Value Member',
    'DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember': 'Display Member',
    'DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder': 'Sort Order',
    'DevExpress.DashboardCommon.DashboardParameter.Visible': 'Visible',
    'DevExpress.DashboardCommon.DashboardParameter.Description': 'Description',
    'DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect': 'Allow Multiselect',
    'DevExpress.DashboardCommon.DashboardParameter.AllowNull': 'Allow Null',
    'DevExpress.DashboardCommon.DashboardParameter.SelectAllValues': 'Select All Values',
    'DevExpress.DashboardCommon.StaticListLookUpSettings.Values': 'Values',
    'DevExpress.DashboardCommon.DimensionSortOrder.Ascending': 'Ascending',
    'DevExpress.DashboardCommon.DimensionSortOrder.Descending': 'Descending',
    'DevExpress.DashboardCommon.DimensionSortOrder.None': 'None',
    'DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions': 'Point Labels',
    'DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute': 'Shape Labels',
    'DashboardStringId.CommandFormatRuleTopN': 'Top N',
    'DashboardWebStringId.Type': 'Type',
    'DashboardWebStringId.Grid.ColumnWidth': 'Column Width',
    'DashboardWebStringId.AccordionTab.ShowTotals': 'Totals',
    'DashboardWebStringId.AccordionTab.Layout': 'Layout',
    'DashboardWebStringId.AccordionTab.PivotInitialState': 'Initial State',
    'DashboardWebStringId.AccordionTab.ImageOptions': 'Options',
    'DashboardWebStringId.AccordionTab.Labels': 'Labels',
    'DashboardWebStringId.AccordionTab.MapLegend': 'Color Legend',
    'DashboardWebStringId.AccordionTab.WeightedLegend': 'Weighted Legend',
    'DashboardWebStringId.AccordionTab.Common': 'Common',
    'DashboardWebStringId.AccordionTab.ChartLegend': 'Legend',
    'DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode': 'AutoFit To Content',
    'DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode': 'AutoFitToGrid',
    'DashboardWebStringId.Grid.ManualGridColumnWidthMode': 'Manual',
    'DashboardStringId.DateTimeIntervalYear': 'Year',
    'DashboardStringId.DateTimeIntervalQuarter': 'Quarter',
    'DashboardStringId.DateTimeIntervalMonth': 'Month',
    'DashboardStringId.DateTimeIntervalWeek': 'Week',
    'DashboardStringId.DateTimeIntervalDay': 'Day',
    'DashboardStringId.DateTimeIntervalHour': 'Hour',
    'DashboardStringId.DateTimeIntervalMinute': 'Minute',
    'DashboardStringId.DateTimeIntervalSecond': 'Second',
    'DashboardStringId.DateTimeGroupIntervalYear': 'Year',
    'DashboardStringId.DateTimeGroupIntervalQuarter': 'Quarter',
    'DashboardStringId.DateTimeGroupIntervalMonth': 'Month',
    'DashboardStringId.DateTimeGroupIntervalDay': 'Day',
    'DashboardStringId.DateTimeGroupIntervalHour': 'Hour',
    'DashboardStringId.DateTimeGroupIntervalMinute': 'Minute',
    'DashboardStringId.DateTimeGroupIntervalSecond': 'Second',
    'DashboardStringId.DateTimeGroupIntervalDayOfYear': 'Day Of Year',
    'DashboardStringId.DateTimeGroupIntervalDayOfWeek': 'Day Of Week',
    'DashboardStringId.DateTimeGroupIntervalWeekOfYear': 'Week Of Year',
    'DashboardStringId.DateTimeGroupIntervalWeekOfMonth': 'Week Of Month',
    'DashboardStringId.DateTimeGroupIntervalMonthYear': 'Month-Year',
    'DashboardStringId.DateTimeGroupIntervalQuarterYear': 'Quarter-Year',
    'DashboardStringId.DateTimeGroupIntervalWeekYear': 'Week-Year',
    'DashboardStringId.DateTimeGroupIntervalDayMonthYear': 'Day-Month-Year',
    'DashboardStringId.DateTimeGroupIntervalDateHour': 'Date-Hour',
    'DashboardStringId.DateTimeGroupIntervalDateHourMinute': 'Date-Hour-Minute',
    'DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond': 'Date-Hour-Minute-Second',
    'DashboardStringId.DateTimeGroupIntervalExactDate': 'Exact Date',
    'DashboardStringId.GroupIntervalNone': 'No Grouping',
    'DashboardWebStringId.Treemap.StripedLayoutAlgorithm': 'Striped',
    'DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm': 'Squarified',
    'DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm': 'Slice and Dice',
    'DashboardWebStringId.Treemap.TileLabelsArgumentAndValue': 'Argument and Value',
    'DashboardWebStringId.Treemap.TileLabelsNone': 'None',
    'DashboardWebStringId.Treemap.TileLabelsValue': 'Value',
    'DashboardWebStringId.Treemap.TileLabelsArgument': 'Argument',
    'DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue': 'Argument and Value',
    'DashboardWebStringId.Treemap.TileTooltipsArgument': 'Argument',
    'DashboardWebStringId.Treemap.TileTooltipsValue': 'Value',
    'DashboardWebStringId.Treemap.TileTooltipsNone': 'None',
    'DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection': 'Top Left To Bottom Right',
    'DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection': 'Top Right To Bottom Left',
    'DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection': 'Bottom Left To Top Right',
    'DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection': 'Bottom Right To Top Left',
    'DashboardWebStringId.Treemap.LayoutDirection': 'Layout Direction',
    'DashboardWebStringId.Treemap.GroupLabelsNone': 'None',
    'DashboardWebStringId.Treemap.GroupLabelsArgument': 'Argument',
    'DashboardWebStringId.Treemap.GroupLabelsValue': 'Value',
    'DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue': 'Argument and Value',
    'DashboardWebStringId.Treemap.GroupTooltipsNone': 'None',
    'DashboardWebStringId.Treemap.GroupTooltipsArgument': 'Argument',
    'DashboardWebStringId.Treemap.GroupTooltipsValue': 'Value',
    'DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue': 'Argument and Value',
    'DashboardStringId.RankOrderAscending': 'Ascending',
    'DashboardStringId.RankOrderDescending': 'Descending',
    'DashboardStringId.DateTimeFormatYearFormatDefaultCaption': 'Default',
    'DashboardStringId.DateTimeFormatYearFormatFullCaption': 'Full',
    'DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption': 'Abbreviated',
    'DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption': 'Default',
    'DashboardStringId.DateTimeFormatQuarterFormatNumericCaption': 'Numeric',
    'DashboardStringId.DateTimeFormatQuarterFormatFullCaption': 'Full',
    'DashboardStringId.DateTimeFormatMonthFormatDefaultCaption': 'Default',
    'DashboardStringId.DateTimeFormatMonthFormatFullCaption': 'Full',
    'DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption': 'Abbreviated',
    'DashboardStringId.DateTimeFormatMonthFormatNumericCaption': 'Numeric',
    'DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption': 'Default',
    'DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption': 'Full',
    'DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption': 'Abbreviated',
    'DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption': 'Numeric',
    'DashboardStringId.DateTimeFormatDateFormatDefaultCaption': 'Default',
    'DashboardStringId.DateTimeFormatDateFormatLongCaption': 'Long',
    'DashboardStringId.DateTimeFormatDateFormatShortCaption': 'Short',
    'DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption': 'Default',
    'DashboardStringId.DateTimeFormatDateTimeFormatLongCaption': 'Long',
    'DashboardStringId.DateTimeFormatDateTimeFormatShortCaption': 'Short',
    'DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption': 'TimeOnly',
    'DashboardStringId.ExactDateFormatYear': 'Year',
    'DashboardStringId.ExactDateFormatQuarter': 'Quarter',
    'DashboardStringId.ExactDateFormatMonth': 'Month',
    'DashboardStringId.ExactDateFormatDay': 'Day',
    'DashboardStringId.ExactDateFormatHour': 'Hour',
    'DashboardStringId.ExactDateFormatMinute': 'Minute',
    'DashboardStringId.ExactDateFormatSecond': 'Second',
    'DashboardWebStringId.FormatType': 'Format Type',
    'DashboardWebStringId.TopN.Top': 'Top',
    'DashboardWebStringId.TopN.Bottom': 'Bottom',
    'DashboardWebStringId.DimensionSortBy': 'Sort by',
    'DashboardStringId.NumericFormatUnitAutoCaption': 'Auto',
    'DashboardStringId.NumericFormatFormatTypeAutoCaption': 'Auto',
    'DashboardStringId.NumericFormatFormatTypeGeneralCaption': 'General',
    'DashboardStringId.NumericFormatFormatTypeNumberCaption': 'Number',
    'DashboardStringId.NumericFormatFormatTypeCurrencyCaption': 'Currency',
    'DashboardStringId.NumericFormatFormatTypeScientificCaption': 'Scientific',
    'DashboardStringId.NumericFormatFormatTypePercentCaption': 'Percent',
    'DashboardStringId.NumericFormatUnitOnesCaption': 'Ones',
    'DashboardStringId.NumericFormatUnitThousandsCaption': 'Thousands',
    'DashboardStringId.NumericFormatUnitMillionsCaption': 'Millions',
    'DashboardStringId.NumericFormatUnitBillionsCaption': 'Billions',
    'DashboardStringId.DeltaValueTypeActualValueCaption': 'Actual Value',
    'DashboardStringId.DeltaValueTypeAbsoluteVariationCaption': 'Absolute Variation',
    'DashboardStringId.DeltaValueTypePercentVariationCaption': 'Percent Variation',
    'DashboardStringId.DeltaValueTypePercentOfTargetCaption': 'Percent Of Target',
    'DashboardStringId.DeltaValueTypeTargetValueCaption': 'Target Value',
    'DashboardStringId.GaugeScaleLabelFormatCaption': 'Scale Label',
    'DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption': 'Greater Is Good',
    'DashboardStringId.DeltaIndicationModeLessIsGoodCaption': 'Less Is Good',
    'DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption': 'Warning If Greater',
    'DashboardStringId.DeltaIndicationModeWarningIfLessCaption': 'Warning If Less',
    'DashboardStringId.DeltaIndicationModeNoIndicationCaption': 'No Indication',
    'DashboardStringId.DeltaThresholdTypeAbsolute': 'Absolute',
    'DashboardStringId.DeltaThresholdTypePercent': 'Percent',
    'DashboardStringId.CommandDimensionGroupChildValues': 'Group Tiles',
    'DashboardStringId.SeriesTypeBar': 'Bar',
    'DashboardStringId.SeriesTypeStackedBar': 'Stacked Bar',
    'DashboardStringId.SeriesTypeFullStackedBar': 'Full Stacked Bar',
    'DashboardStringId.SeriesTypePoint': 'Point',
    'DashboardStringId.SeriesTypeLine': 'Line',
    'DashboardStringId.SeriesTypeStackedLine': 'Stacked Line',
    'DashboardStringId.SeriesTypeFullStackedLine': 'Full Stacked Line',
    'DashboardStringId.SeriesTypeStepLine': 'Step Line',
    'DashboardStringId.SeriesTypeSpline': 'Spline',
    'DashboardStringId.SeriesTypeArea': 'Area',
    'DashboardStringId.SeriesTypeStackedArea': 'Stacked Area',
    'DashboardStringId.SeriesTypeFullStackedArea': 'Full Stacked Area',
    'DashboardStringId.SeriesTypeStepArea': 'Step Area',
    'DashboardStringId.SeriesTypeSplineArea': 'Spline Area',
    'DashboardStringId.SeriesTypeStackedSplineArea': 'Stacked Spline Area',
    'DashboardStringId.SeriesTypeFullStackedSplineArea': 'Full Stacked Spline Area',
    'DashboardWebStringId.Chart.ShowLegend': 'Show Legend',
    'DashboardStringId.DefaultNameBoundImageItem': 'Bound Image',
    'DashboardStringId.DefaultNameImageItem': 'Image',
    'DashboardStringId.DefaultNameTextBoxItem': 'Text Box',
    'DashboardStringId.DefaultNameCardItem': 'Cards',
    'DashboardStringId.DefaultNameChartItem': 'Chart',
    'DashboardStringId.DefaultNameComboBoxItem': 'Combo Box',
    'DashboardStringId.DefaultNameListBoxItem': 'List Box',
    'DashboardStringId.DefaultNameTreeViewItem': 'Tree View',
    'DashboardStringId.DefaultNameGaugeItem': 'Gauges',
    'DashboardStringId.DefaultNameGridItem': 'Grid',
    'DashboardStringId.GridHyperlinkUriPatternErrorMessage': 'Invalid placeholder',
    'DashboardWebStringId.DefaultNameBubbleMapItem': 'Bubble Map',
    'DashboardWebStringId.DefaultNameChoroplethMapItem': 'Choropleth Map',
    'DashboardWebStringId.DefaultNameGeoPointMapItem': 'Geo Point Map',
    'DashboardWebStringId.DefaultNamePieMapItem': 'Pie Map',
    'DashboardStringId.DefaultNamePieItem': 'Pies',
    'DashboardStringId.DefaultNamePivotItem': 'Pivot',
    'DashboardStringId.DefaultNameRangeFilterItem': 'Range Filter',
    'DashboardStringId.DefaultNameScatterChartItem': 'Scatter Chart',
    'DashboardStringId.DefaultNameTreemapItem': 'Treemap',
    'DashboardStringId.DescriptionMaps': 'Maps',
    'DashboardStringId.EntireRangePeriodCaption': 'Entire Range',
    'DashboardStringId.CalculationTypePercentOfTotal': 'Percent Of Total',
    'DashboardStringId.CalculationTypeDifference': 'Difference',
    'DashboardStringId.CalculationTypePercentageDifference': 'Percentage Difference',
    'DashboardStringId.CalculationTypeRunningTotal': 'Running Total',
    'DashboardStringId.CalculationTypeMovingCalculation': 'Moving Calculation',
    'DashboardStringId.CalculationTypeRank': 'Rank',
    'DashboardStringId.ColorPaletteIndex': 'Palette Index',
    'DashboardStringId.DifferenceCalculationTargetPrevious': 'Previous',
    'DashboardStringId.DifferenceCalculationTargetNext': 'Next',
    'DashboardStringId.DifferenceCalculationTargetFirst': 'First',
    'DashboardStringId.DifferenceCalculationTargetLast': 'Last',
    'DashboardStringId.SummaryTypeCount': 'Count',
    'DashboardStringId.SummaryTypeSum': 'Sum',
    'DashboardStringId.SummaryTypeMin': 'Min',
    'DashboardStringId.SummaryTypeMax': 'Max',
    'DashboardStringId.SummaryTypeAverage': 'Average',
    'DashboardStringId.SummaryTypeStdDev': 'StdDev',
    'DashboardStringId.SummaryTypeStdDevp': 'StdDevp',
    'DashboardStringId.SummaryTypeVar': 'Var',
    'DashboardStringId.SummaryTypeVarp': 'Varp',
    'DashboardStringId.SummaryTypeCountDistinct': 'Count Distinct',
    'DashboardStringId.SummaryTypeMedian': 'Median',
    'DashboardStringId.SummaryTypeMode': 'Mode',
    'DashboardStringId.RankTypeUnique': 'Unique',
    'DashboardStringId.RankTypeCompetition': 'Competition',
    'DashboardStringId.RankTypeDense': 'Dense',
    'DashboardStringId.RankTypeModified': 'Modified',
    'DashboardStringId.RankTypePercentile': 'Percentile',
    'DashboardStringId.CardCalculationAlongCards': 'Cards',
    'DashboardStringId.CardCalculationAlongSparklineArgument': 'Sparkline Argument',
    'DashboardStringId.CardCalculationAlongCardsAndSparklineArgument': 'Cards And Sparkline Argument',
    'DashboardStringId.CardCalculationAlongSparklineArgumentAndCards': 'Sparkline Argument And Cards',
    'DashboardStringId.ChartCalculationAlongArguments': 'Arguments',
    'DashboardStringId.ChartCalculationAlongSeries': 'Series',
    'DashboardStringId.ChartCalculationAlongArgumentsAndSeries': 'Arguments And Series',
    'DashboardStringId.ChartCalculationAlongSeriesAndArguments': 'Series And Arguments',
    'DashboardStringId.GridCalculationAlongRows': 'Rows',
    'DashboardStringId.GridCalculationAlongSparklineArgument': 'Sparkline Argument',
    'DashboardStringId.GridCalculationAlongRowsAndSparklineArgument': 'Rows And Sparkline Argument',
    'DashboardStringId.GridCalculationAlongSparklineArgumentAndRows': 'Sparkline Argument And Rows',
    'DashboardStringId.PivotCalculationAlongColumns': 'Columns',
    'DashboardStringId.PivotCalculationAlongRows': 'Rows',
    'DashboardStringId.PivotCalculationAlongColumnsAndRows': 'Columns And Rows',
    'DashboardStringId.PivotCalculationAlongRowsAndColumns': 'Rows And Columns',
    'DashboardStringId.PivotCalculationAlongGroupsInColumns': 'Groups In Columns',
    'DashboardStringId.PivotCalculationAlongGroupsInRows': 'Groups In Rows',
    'DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows': 'Groups In Columns And Rows',
    'DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns': 'Groups In Rows And Columns',
    'DashboardStringId.PieCalculationAlongArguments': 'Arguments',
    'DashboardStringId.PieCalculationAlongSeries': 'Series',
    'DashboardStringId.PieCalculationAlongArgumentsAndSeries': 'Arguments / Series',
    'DashboardStringId.PieCalculationAlongSeriesAndArguments': 'Series / Arguments',
    'DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries': 'Argument / Series',
    'DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument': 'Series / Argument',
    'DashboardStringId.GaugeCalculationAlongGauges': 'Gauges',
    'DashboardStringId.ScatterCalculationAlongArguments': 'Arguments',
    'DashboardStringId.CalculationAlongSpecificDimensions': 'Specific...',
    'DashboardStringId.CalculatedFieldTypeString': 'String',
    'DashboardStringId.CalculatedFieldTypeLong': 'Integer',
    'DashboardStringId.CalculatedFieldTypeDecimal': 'Decimal',
    'DashboardStringId.CalculatedFieldTypeBoolean': 'Boolean',
    'DashboardStringId.CalculatedFieldTypeDateTime': 'DateTime',
    'DashboardStringId.CalculatedFieldTypeDouble': 'Double',
    'DashboardStringId.CalculatedFieldTypeAuto': 'Auto',
    'DashboardStringId.CalculatedFieldTypeObject': 'Object',
    'DashboardStringId.DefaultEFDataSourceName': 'EF Data Source',
    'DashboardStringId.DefaultExcelDataSourceName': 'Excel Data Source',
    'DashboardStringId.DefaultFileExtractDataSourceName': 'Extract Data Source',
    'DashboardStringId.DefaultFederationDataSourceName': 'Federated Data Source',
    'DashboardStringId.DefaultObjectDataSourceName': 'Object Data Source',
    'DashboardStringId.DefaultOlapDataSourceName': 'OLAP Data Source',
    'DashboardStringId.DefaultSqlDataSourceName': 'SQL Data Source',
    'DashboardStringId.DefaultJsonDataSourceName': 'JSON Data Source',
    'DashboardStringId.DefaultMongoDBDataSourceName': 'MongoDB Data Source',
    'DashboardStringId.DefaultXpoDataSourceName': 'XPO Data Source',
    'DashboardStringId.OlapRaggedHierarchyNoneItemCaption': '(None)',
    'DashboardStringId.FormatRuleApplyToColumn': 'Apply to column',
    'DashboardStringId.SeriesTypeSideBySideRangeBar': 'Side By Side Range Bar',
    'DashboardStringId.SeriesTypeRangeArea': 'Range Area',
    'DashboardStringId.SeriesTypeHighLowClose': 'High Low Close',
    'DashboardStringId.SeriesTypeCandleStick': 'Candle Stick',
    'DashboardStringId.SeriesTypeStock': 'Type Stock',
    'DashboardWebStringId.StyleSettings': 'Style',
    'DashboardStringId.ParametersFormCalendarTodayButton': 'Today',
    'DashboardStringId.TreemapLabelArgumentTemplate': '{0} - {1}',
    'DashboardStringId.TreemapLabelValueTemplate': '{0}: {1}',
    'DashboardStringId.SearchNullValuePrompt': 'Enter text to search...',
    'DashboardStringId.CustomItems': 'Custom Items',
    'DashboardStringId.FormatRuleAllowNegativeAxis': 'Allow negative axis',
    'DashboardStringId.FormatRuleDrawAxis': 'Draw axis',
    'DashboardStringId.FormatRuleShowBarOnly': 'Show bar only',
    'DashboardStringId.CommandFormatRuleBottomN': 'Bottom N',
    'DashboardStringId.FormatConditionAppearanceNone': 'None',
    'DashboardStringId.FormatConditionAppearanceCustom': 'Custom',
    'DashboardStringId.FormatConditionAppearancePaleRed': 'Pale Red',
    'DashboardStringId.FormatConditionAppearancePaleYellow': 'Pale Yellow',
    'DashboardStringId.FormatConditionAppearancePaleGreen': 'Pale Green',
    'DashboardStringId.FormatConditionAppearancePaleBlue': 'Pale Blue',
    'DashboardStringId.FormatConditionAppearancePalePurple': 'Pale Purple',
    'DashboardStringId.FormatConditionAppearancePaleCyan': 'Pale Cyan',
    'DashboardStringId.FormatConditionAppearancePaleOrange': 'Pale Orange',
    'DashboardStringId.FormatConditionAppearancePaleGray': 'Pale Gray',
    'DashboardStringId.FormatConditionAppearanceRed': 'Red',
    'DashboardStringId.FormatConditionAppearanceYellow': 'Yellow',
    'DashboardStringId.FormatConditionAppearanceGreen': 'Green',
    'DashboardStringId.FormatConditionAppearanceBlue': 'Blue',
    'DashboardStringId.FormatConditionAppearancePurple': 'Purple',
    'DashboardStringId.FormatConditionAppearanceCyan': 'Cyan',
    'DashboardStringId.FormatConditionAppearanceOrange': 'Orange',
    'DashboardStringId.FormatConditionAppearanceGray': 'Gray',
    'DashboardStringId.FormatConditionAppearanceGradientRed': 'Gradient Red',
    'DashboardStringId.FormatConditionAppearanceGradientYellow': 'Gradient Yellow',
    'DashboardStringId.FormatConditionAppearanceGradientGreen': 'Gradient Green',
    'DashboardStringId.FormatConditionAppearanceGradientBlue': 'Gradient Blue',
    'DashboardStringId.FormatConditionAppearanceGradientPurple': 'Gradient Purple',
    'DashboardStringId.FormatConditionAppearanceGradientCyan': 'Gradient Cyan',
    'DashboardStringId.FormatConditionAppearanceGradientOrange': 'Gradient Orange',
    'DashboardStringId.FormatConditionAppearanceGradientTransparent': 'Gradient Transparent',
    'DashboardStringId.FormatConditionAppearanceFontBold': 'Bold',
    'DashboardStringId.FormatConditionAppearanceFontItalic': 'Italic',
    'DashboardStringId.FormatConditionAppearanceFontUnderline': 'Underline',
    'DashboardStringId.FormatConditionAppearanceFontGrayed': 'Grayed',
    'DashboardStringId.FormatConditionAppearanceFontRed': 'Red',
    'DashboardStringId.FormatConditionAppearanceFontYellow': 'Yellow',
    'DashboardStringId.FormatConditionAppearanceFontGreen': 'Green',
    'DashboardStringId.FormatConditionAppearanceFontBlue': 'Blue',
    'DashboardStringId.IntersectionLevelModeFirst': 'First level',
    'DashboardStringId.IntersectionLevelModeLast': 'Last level',
    'DashboardStringId.IntersectionLevelModeAuto': '(Auto)',
    'DashboardStringId.IntersectionLevelModeAll': 'All levels',
    'DashboardStringId.IntersectionLevelModeSpecific': 'Specific level',
    'DashboardStringId.FormatRuleApplyToRow': 'Apply to row',
    'DashboardStringId.FormatRuleApplyTo': 'Apply to',
    'DashboardStringId.FormatRuleApplyToChartElement': 'Apply to chart elements',
    'DashboardStringId.ChartElementPointCaption': 'Point',
    'DashboardStringId.ChartElementLineOrAreaCaption': 'Line/Area',
    'DashboardWebStringId.FilterItem.AllowEmptyFilter': 'Allow Empty Filter',
    'DashboardStringId.FormatConditionAppearanceFontStrikeout': 'Strikeout',
    'DashboardStringId.FormatConditionAutomaticValueType': 'Automatic',
    'DashboardStringId.FormatConditionNumberValueType': 'Number',
    'DashboardStringId.FormatConditionPercentValueType': 'Percent',
    'DashboardStringId.CommandFormatRuleRangeIcons': 'Range Icons',
    'DashboardStringId.CommandFormatRuleGreaterThan': 'Greater',
    'DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo': 'Greater Or Equal',
    'DashboardStringId.CommandFormatRuleLessThan': 'Less',
    'DashboardStringId.CommandFormatRuleLessThanOrEqualTo': 'Less Or Equal',
    'DashboardStringId.CommandFormatRuleEqualTo': 'Equal',
    'DashboardStringId.CommandFormatRuleNotEqualTo': 'Not Equal',
    'DashboardStringId.CommandFormatRuleBetween': 'Between',
    'DashboardStringId.CommandFormatRuleNotBetween': 'Not Between',
    'DashboardStringId.CommandFormatRuleBetweenOrEqual': 'Between Or Equal',
    'DashboardStringId.CommandFormatRuleNotBetweenOrEqual': 'Not Between Or Equal',
    'DashboardStringId.CommandFormatRuleContains': 'Contains Text',
    'DashboardStringId.ColorAutoAssigned': 'Auto',
    'DashboardStringId.CalculationTypeNone': 'None',
    'DashboardStringId.UndoText': 'Undo',
    'DashboardStringId.RedoText': 'Redo',
    'DashboardStringId.DashboardCurrencyUseCurrentCurrency': 'Use client system settings',
    'DashboardStringId.CommandDimensionSortModeDisplayText': '(Display Text)',
    'DashboardStringId.CommandDimensionSortModeValue': '(Value)',
    'DashboardStringId.CommandDimensionSortModeID': '(ID)',
    'DashboardStringId.CommandDimensionSortModeKey': '(Key)',
    'DashboardWebStringId.Chart.AddPane': 'Add Pane',
    'DashboardStringId.MapShapeNoneAttribute': 'NONE',
    'DashboardStringId.DefaultPeriodName': 'Period',
    'DashboardStringId.CardLayoutTemplateStretchedCaption': 'Stretched',
    'DashboardStringId.CardLayoutTemplateCenteredCaption': 'Centered',
    'DashboardStringId.CardLayoutTemplateCompactCaption': 'Compact',
    'DashboardStringId.CardLayoutTemplateLightweightCaption': 'Lightweight',
    'DashboardStringId.CardLayoutTemplateCustomCaption': 'Custom',
    'DashboardStringId.CardLayoutTemplateNoneCaption': 'None',
    'DashboardStringId.CardRowDataElementTypeTitleCaption': 'Title',
    'DashboardStringId.CardRowDataElementTypeSubtitleCaption': 'Subtitle',
    'DashboardStringId.CardRowDataElementTypeActualValueCaption': 'Actual Value',
    'DashboardStringId.CardRowDataElementTypeTargetValueCaption': 'Target Value',
    'DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption': 'Absolute Variation',
    'DashboardStringId.CardRowDataElementTypePercentVariationCaption': 'Percent Variation',
    'DashboardStringId.CardRowDataElementTypePercentOfTargetCaption': 'Percent of Target',
    'DashboardStringId.CardRowDataElementTypeDimensionValueCaption': 'Dimension',
    'DashboardStringId.CardRowDataElementTypeCardNameCaption': 'Card Name',
    'DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption': 'Delta Indicator',
    'DashboardStringId.CardRowDataElementTypeSparklineCaption': 'Sparkline',
    'DashboardStringId.FormatRuleApplyToAllElements': 'All elements',
    'DashboardWebStringId.FormatRuleApplyToDimensionElement': 'Dimension',
    'DashboardWebStringId.FormatRuleApplyToTextElement': 'Text',
    'DashboardStringId.FormatRuleDisplayInLegend': 'Display in legend',
    'DashboardStringId.FormatRuleDisplayName': 'Caption',
    'DashboardStringId.LegendItemFormatString': '{0} - {1}',
    'DashboardWebStringId.Pie.LabelPosition': 'Label Position',
    'DashboardWebStringId.Pie.LabelPositionOutside': 'Outside',
    'DashboardWebStringId.Pie.LabelPositionInside': 'Inside',
    'DashboardStringId.IncludeExportDashboardState': 'Include',
    'DashboardStringId.PointLabelContentTypeArgument': 'Argument',
    'DashboardStringId.PointLabelContentTypeSeriesName': 'Series Name',
    'DashboardStringId.PointLabelContentTypeValue': 'Value',
    'DashboardStringId.PointLabelContentTypePercent': 'Percent',
    'DashboardWebStringId.DashboardMenu': 'Dashboard Menu',
    'DashboardWebStringId.DashboardMenuNew': 'New...',
    'DashboardWebStringId.DashboardMenuOpen': 'Open...',
    'DashboardWebStringId.DashboardMenuSave': 'Save',
    'DashboardWebStringId.DashboardMenuCurrency': 'Currency',
    'DashboardWebStringId.DashboardMenuDataSources': 'Data Sources',
    'DashboardWebStringId.DashboardMenuColorScheme': 'Color Scheme',
    'DashboardWebStringId.DashboardMenuNewDashboardCreate': 'Create',
    'DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder': 'Enter a dashboard name',
    'DashboardWebStringId.Binding.DefaultEmptyPlaceholder': 'Set {0}',
    'DashboardWebStringId.Binding.DefaultSelectedPlaceholder': 'Configure {0}',
    'DashboardWebStringId.Binding.DataSource': 'Data Source',
    'DashboardWebStringId.Binding.Argument': 'Argument ',
    'DashboardWebStringId.Binding.Attribute': 'Attribute ',
    'DashboardWebStringId.Binding.Sparkline': 'Sparkline ',
    'DashboardWebStringId.Binding.Columns': 'Columns ',
    'DashboardWebStringId.Binding.TooltipDimensions': 'Tooltip Dimensions',
    'DashboardWebStringId.Binding.TooltipMeasures': 'Tooltip Measures',
    'DashboardWebStringId.Binding.HiddenDimensions': 'Hidden Dimensions',
    'DashboardWebStringId.Binding.HiddenMeasures': 'Hidden Measures',
    'DashboardWebStringId.Binding.AddDimension': 'Add Dimension',
    'DashboardWebStringId.Binding.AddMeasure': 'Add Measure',
    'DashboardWebStringId.Binding.AddColumn': 'Add Column',
    'DashboardWebStringId.Binding.AddRow': 'Add Row',
    'DashboardWebStringId.Binding.AddValue': 'Add Value',
    'DashboardWebStringId.Binding.AddSeries': 'Add Series',
    'DashboardWebStringId.Binding.SetLatitude': 'Set Latitude',
    'DashboardWebStringId.Binding.SetLongitude': 'Set Longitude',
    'DashboardWebStringId.Binding.SetArgument': 'Set Argument',
    'DashboardWebStringId.Binding.AddArgument': 'Add Argument',
    'DashboardWebStringId.Binding.SetWeight': 'Set Weight',
    'DashboardWebStringId.Binding.SetColor': 'Set Color',
    'DashboardWebStringId.Binding.SetAttribute': 'Set Attribute',
    'DashboardWebStringId.Binding.SetValue': 'Set Value',
    'DashboardWebStringId.Binding.XAxis': 'X - axis ',
    'DashboardWebStringId.Binding.YAxis': 'Y - axis ',
    'DashboardWebStringId.Binding.ConfigureDimension': 'Configure Dimension',
    'DashboardWebStringId.Binding.ConfigureMeasure': 'Configure Measure',
    'DashboardWebStringId.Binding.ConfigureSeries': 'Configure Series',
    'DashboardWebStringId.Binding.ConfigureArgument': 'Configure Argument',
    'DashboardWebStringId.Binding.ConfigureValue': 'Configure Value',
    'DashboardWebStringId.Binding.ConfigureAttribute': 'Configure Attribute',
    'DashboardWebStringId.Binding.ConfigureLatitude': 'Configure Latitude',
    'DashboardWebStringId.Binding.ConfigureLongitude': 'Configure Longitude',
    'DashboardWebStringId.Binding.ConfigureColumn': 'Configure Column',
    'DashboardWebStringId.Binding.ConfigureRow': 'Configure Row',
    'DashboardWebStringId.Binding.ConfigureWeight': 'Configure Weight',
    'DashboardWebStringId.Binding.ConfigureColor': 'Configure Color',
    'DashboardWebStringId.Binding.ShowAll': 'Show All',
    'DashboardWebStringId.ColorScheme.Color': 'Color',
    'DashboardWebStringId.ColorScheme.Colors': 'Colors',
    'DashboardWebStringId.Parameters.ParameterList': 'Parameter List',
    'DashboardWebStringId.Parameters.AddParameter': 'Add New Parameter',
    'DashboardWebStringId.Parameters.AddParameter.Tooltip': 'Add new parameter to the dashboard',
    'DashboardWebStringId.Parameters.NoSelectedParameter': 'No parameter is selected.',
    'DashboardWebStringId.Parameters.Reorder': 'Reorder',
    'DashboardWebStringId.Parameters.Done': 'Done',
    'DashboardWebStringId.Currency.Currency': 'Currency',
    'DashboardWebStringId.Currency.CurrencyCulture': 'Culture',
    'DashboardWebStringId.Currency.DefaultCurrencyWarning': 'The currency culture format is based on environmental settings. Specify the culture explicitly to ignore these settings.',
    'DashboardWebStringId.Preview': 'Preview',
    'DashboardWebStringId.Add': 'Add',
    'DashboardWebStringId.DataSources.UsedDataSources': 'Used Data Sources',
    'DashboardWebStringId.DataSources.DataItems': 'Data Items',
    'DashboardWebStringId.DataSources.AddQuery': 'Add Query',
    'DashboardWebStringId.DataSources.ManageQueries': 'Manage Queries',
    'DashboardWebStringId.DataSources.AddCalculatedField': 'Add Calculated Field',
    'DashboardWebStringId.DataSources.AddDataSource': 'Add Data Source',
    'DashboardWebStringId.DataSources.RenameDataSource': 'Rename Data Source',
    'DashboardWebStringId.DataSources.NoUsedDataSources': 'There are no used data sources in this dashboard.',
    'DashboardWebStringId.DataSources.NoAvailableDataSources': 'There are no available datasources.',
    'DashboardWebStringId.DataSources.ChooseDataSource': 'Choose the data source for the dashboard',
    'DashboardWebStringId.DataSources.CreateDataSource': 'Create',
    'DashboardWebStringId.DataSources.CreateNewDataSource': 'Create data source...',
    'DashboardWebStringId.DataSources.CreateDataSource.Tooltip': 'Create a new data source...',
    'DashboardWebStringId.DataSources.EditCalculatedField': 'Edit Calculated Field',
    'DashboardWebStringId.DataSources.CalculatedField.Name': 'Name ',
    'DashboardWebStringId.DataSources.CalculatedField.FieldType': 'Field Type',
    'DashboardWebStringId.DataSources.CalculatedField.UniqueNameError': 'Calculated field should have a unique name.',
    'DashboardWebStringId.DataSources.CalculatedField.Corrupted': 'The calculated field contains errors',
    'DashboardWebStringId.DataSources.Edit': 'Edit',
    'DashboardWebStringId.DataSources.Rename': 'Rename',
    'DashboardWebStringId.DataSources.NewDataSourceName': 'New Data Source Name:',
    'DashboardWebStringId.DataSources.DataSourceNameExistsMessage': 'Duplicate Name: Please enter a unique data source name to proceed.',
    'DashboardStringId.MessageCollectionTypesNotSupported': 'Dashboard does not support collection types.',
    'DashboardWebStringId.New.DashboardName': 'Dashboard Name:',
    'DashboardWebStringId.Bindings': 'Binding',
    'DashboardWebStringId.Interactivity': 'Interactivity',
    'DashboardWebStringId.Filters': 'Filters',
    'DashboardWebStringId.Options': 'Options',
    'DashboardWebStringId.Remove': 'Remove',
    'DashboardWebStringId.MasterFilterMode': 'Master Filter Mode',
    'DashboardWebStringId.Title.Text': 'Text',
    'DashboardWebStringId.Title.Visible': 'Visible',
    'DashboardWebStringId.Title.IncludeMasterFilter': 'Include Master Filter',
    'DashboardWebStringId.Title.Aligment': 'Alignment',
    'DashboardWebStringId.Title.Image': 'Image',
    'DashboardWebStringId.DataSources.Cancel': 'Cancel',
    'DashboardWebStringId.DataSources.IncludeToTheDashboard': 'Add',
    'DashboardWebStringId.DataSources.AvailableDataSourcesError': 'An error has occurred on an attempt to load the list of available data sources',
    'DashboardWebStringId.DataSources.DashboardDataSourceWizard': 'Dashboard Data Source Wizard',
    'DashboardWebStringId.Viewer': 'Viewer ',
    'DashboardWebStringId.Loading': 'LOADING...',
    'DashboardWebStringId.ClickHereInvitation': 'Click here',
    'DashboardWebStringId.BindDataInvitation': 'to bind this item to data',
    'DashboardWebStringId.AddItemInvitation': 'Drag an item from the Toolbox or click a button below to create a new item.',
    'DashboardWebStringId.Parameters.Values': 'Values ',
    'DashboardWebStringId.Binding.Cards': 'Cards ',
    'DashboardWebStringId.Binding.AddCard': 'Add Card',
    'DashboardWebStringId.Binding.ConfigureCard': 'Configure Card',
    'DashboardWebStringId.Binding.AddValues': 'Add Values',
    'DashboardWebStringId.Binding.ConfigureValues': 'Configure Values',
    'DashboardWebStringId.Binding.Maps': 'Maps ',
    'DashboardWebStringId.Binding.AddMap': 'Add Map',
    'DashboardWebStringId.Binding.ConfigureMap': 'Configure Map',
    'DashboardWebStringId.Binding.Gauges': 'Gauges ',
    'DashboardWebStringId.Binding.AddGauge': 'Add Gauge',
    'DashboardWebStringId.Binding.ConfigureGauge': 'Configure Gauge',
    'DashboardWebStringId.InteractivityOptions': 'Interactivity Options',
    'DashboardWebStringId.Binding.Values': 'Values ',
    'DashboardWebStringId.Binding.RemovePane': 'Remove Pane',
    'DashboardWebStringId.ClickToSetFilterCriteria': 'Click to set Filter Criteria',
    'DashboardWebStringId.DataSources.OK': 'OK',
    'DashboardWebStringId.DataSources.Save': 'Save',
    'DashboardWebStringId.Cards.ArrangementMode': 'Content Arrangement Mode',
    'DashboardWebStringId.Cards.ArrangementMode.Auto': 'Auto',
    'DashboardWebStringId.Cards.ArrangementMode.FixedRows': 'Fixed Rows',
    'DashboardWebStringId.Cards.ArrangementMode.FixedColumns': 'Fixed Columns',
    'DashboardWebStringId.Cards.LineCount': 'Line Count',
    'DashboardWebStringId.ConditionalFormatting': 'Conditional Formatting',
    'DashboardWebStringId.CollectionEditor.NoItems': 'Click + to add a new item.',
    'DashboardWebStringId.CollectionEditor.Totals.NoItems': 'Click + to add a new total.',
    'DashboardWebStringId.CollectionEditor.Parameters.NoItems': 'Click + to add a new parameter.',
    'DashboardWebStringId.PivotGrid.AutoExpandColumnGroups': 'Auto - Expand Column Groups',
    'DashboardWebStringId.PivotGrid.AutoExpandRowGroups': 'Auto - Expand Row Groups',
    'DashboardWebStringId.PivotGrid.ColumnGrandTotals': 'Column Grand Totals',
    'DashboardWebStringId.PivotGrid.RowGrandTotals': 'Row Grand Totals',
    'DashboardWebStringId.PivotGrid.ColumnTotals': 'Column Totals',
    'DashboardWebStringId.PivotGrid.RowTotals': 'Row Totals',
    'DashboardWebStringId.PivotGrid.ValuesPosition': 'Values Position',
    'DashboardWebStringId.PivotGrid.ValuesPositionColumns': 'Columns',
    'DashboardWebStringId.PivotGrid.ValuesPositionRows': 'Rows',
    'DashboardWebStringId.PivotGrid.RowTotalsPosition': 'Row Totals Position',
    'DashboardWebStringId.PivotGrid.RowTotalsPositionBottom': 'Bottom',
    'DashboardWebStringId.PivotGrid.RowTotalsPositionTop': 'Top',
    'DashboardWebStringId.PivotGrid.ColumnTotalsPosition': 'Column Totals Position',
    'DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar': 'Far',
    'DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear': 'Near',
    'DashboardWebStringId.PivotGrid.LayoutType': 'Layout',
    'DashboardWebStringId.PivotGrid.LayoutTypeCompact': 'Compact',
    'DashboardWebStringId.PivotGrid.LayoutTypeTabular': 'Tabular',
    'DashboardWebStringId.Options.Caption': 'Caption',
    'DashboardWebStringId.InteractivityOptions.IsMasterFilter': 'Master Filter',
    'DashboardWebStringId.InteractivityOptions.MasterFilterMode.None': 'None',
    'DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single': 'Single',
    'DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple': 'Multiple',
    'DashboardWebStringId.InteractivityOptions.TargetDimensions': 'Target Dimensions',
    'DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments': 'Arguments',
    'DashboardWebStringId.InteractivityOptions.TargetDimensions.Series': 'Series',
    'DashboardWebStringId.InteractivityOptions.TargetDimensions.Points': 'Points',
    'DashboardWebStringId.ColoringOptions': 'Coloring',
    'DashboardWebStringId.DataSources.Filter': 'Filter',
    'DashboardWebStringId.Chart.Rotated': 'Rotated',
    'DashboardWebStringId.Chart.Panes': 'Panes',
    'DashboardWebStringId.Chart.Legend': 'Legend',
    'DashboardWebStringId.Chart.AxisX': 'Axis X',
    'DashboardWebStringId.Chart.AxisY': 'Axis Y',
    'DashboardWebStringId.Chart.AxisYSecondary': 'Axis Y Secondary',
    'DashboardWebStringId.Chart.PointLabelOptions': 'Point Label Options',
    'DashboardWebStringId.Chart.AxisXMeasure': 'Axis X Measure',
    'DashboardWebStringId.Chart.AxisYMeasure': 'Axis Y Measure',
    'DashboardWebStringId.Chart.Weight': 'Weight',
    'DashboardWebStringId.Chart.Content': 'Content',
    'DashboardWebStringId.Chart.ArgumentAndWeight': 'Argument and Weight',
    'DashboardWebStringId.Chart.ArgumentAndValues': 'Argument and Values',
    'DashboardWebStringId.Chart.Reverse': 'Reverse',
    'DashboardWebStringId.Chart.Visible': 'Visible',
    'DashboardWebStringId.Chart.Title': 'Title',
    'DashboardWebStringId.Chart.TitleText': 'Title Text',
    'DashboardWebStringId.Chart.EnableZooming': 'Enable Zooming',
    'DashboardWebStringId.Chart.LimitVisiblePoints': 'Limit visible points',
    'DashboardWebStringId.Chart.VisiblePointsCount': 'Visible Points Count',
    'DashboardWebStringId.Chart.AlwaysShowZeroLevel': 'Always show zero level',
    'DashboardWebStringId.Chart.GridLines': 'Grid Lines',
    'DashboardWebStringId.Chart.LogarithmicScale': 'Logarithmic Scale',
    'DashboardWebStringId.Chart.LogarithmicScaleBase': 'Logarithmic Scale Base',
    'DashboardWebStringId.Chart.LogarithmicScaleBase2': '2',
    'DashboardWebStringId.Chart.LogarithmicScaleBase5': '5',
    'DashboardWebStringId.Chart.LogarithmicScaleBase10': '10',
    'DashboardWebStringId.Chart.Position': 'Position',
    'DashboardWebStringId.Chart.IsInsideOfDiagram': 'Inside diagram',
    'DashboardWebStringId.Chart.PrimaryAxisY': 'PrimaryAxisY',
    'DashboardWebStringId.Chart.SecondaryAxisY': 'SecondaryAxisY',
    'DashboardWebStringId.Chart.Name': 'Name',
    'DashboardWebStringId.Chart.PlotOnSecondaryAxis': 'Plot on secondary axis',
    'DashboardWebStringId.Chart.IgnoreEmptyPoints': 'Ignore empty points',
    'DashboardWebStringId.Chart.ShowPointMarkers': 'Show point markers',
    'DashboardWebStringId.Chart.Value': 'Value',
    'DashboardWebStringId.Chart.ShowZeroValues': 'Show for zero values',
    'DashboardWebStringId.Chart.OverlappingMode': 'Overlapping Mode',
    'DashboardWebStringId.Chart.Orientation': 'Orientation',
    'DashboardWebStringId.Chart.ShowPointLablels': 'Show Point Labels',
    'DashboardWebStringId.Chart.TooltipContent': 'Tooltips',
    'DashboardWebStringId.Chart.LabelContent': 'Data Labels',
    'DashboardWebStringId.Card.SparklineOptions': 'Sparkline Options',
    'DashboardWebStringId.Card.SparklineVisible': 'Show Sparkline',
    'DashboardWebStringId.Chart.Position.TopLeftVertical': 'Top Left Vertical',
    'DashboardWebStringId.Chart.Position.TopLeftHorizontal': 'Top Left Horizontal',
    'DashboardWebStringId.Chart.Position.TopCenterHorizontal': 'Top Center Horizontal',
    'DashboardWebStringId.Chart.Position.TopRightVertical': 'Top Right Vertical',
    'DashboardWebStringId.Chart.Position.TopRightHorizontal': 'Top Right Horizontal',
    'DashboardWebStringId.Chart.Position.BottomLeftVertical': 'Bottom Left Vertical',
    'DashboardWebStringId.Chart.Position.BottomLeftHorizontal': 'Bottom Left Horizontal',
    'DashboardWebStringId.Chart.Position.BottomCenterHorizontal': 'Bottom Center Horizontal',
    'DashboardWebStringId.Chart.Position.BottomRightVertical': 'Bottom Right Vertical',
    'DashboardWebStringId.Chart.Position.BottomRightHorizontal': 'Bottom Right Horizontal',
    'DashboardWebStringId.Chart.Position.TopCenterVertical': 'Top Center Vertical',
    'DashboardWebStringId.Chart.Position.BottomCenterVertical': 'Bottom Center Vertical',
    'DashboardWebStringId.FilterItem.Type': 'Type',
    'DashboardWebStringId.FilterItem.Type.Standard': 'Standard',
    'DashboardWebStringId.FilterItem.Type.Checked': 'Checked',
    'DashboardWebStringId.FilterItem.Type.Radio': 'Radio',
    'DashboardWebStringId.FilterItem.ShowAllValue': 'Show "All" Value',
    'DashboardWebStringId.FilterItem.EnableSearch': 'Enable Search',
    'DashboardWebStringId.Gauge.Min': 'Minimum Value',
    'DashboardWebStringId.Gauge.Max': 'Maximum Value',
    'DashboardWebStringId.Gauge.ScaleOptions': 'Scale Options',
    'DashboardWebStringId.Gauge.Type': 'Gauge Type',
    'DashboardWebStringId.Gauge.Type.FullQuarterGauge': 'Full Quarter Gauge',
    'DashboardWebStringId.Gauge.Type.HalfCircular': 'Half Circular',
    'DashboardWebStringId.Gauge.Type.LeftQuarterCircular': 'Left - Quarter Circular',
    'DashboardWebStringId.Gauge.Type.RightQuarterCircular': 'Right - Quarter Circular',
    'DashboardWebStringId.Gauge.Type.ThreeFourthCircular': 'Three-Quarter Circular',
    'DashboardWebStringId.Gauge.Type.LinearHorizontal': 'Linear Horizontal',
    'DashboardWebStringId.Gauge.Type.LinearVertical': 'Linear Vertical',
    'DashboardWebStringId.Gauge.Captions': 'Show Gauge Captions',
    'DashboardWebStringId.Gauge.Scale.Custom': 'Custom',
    'DashboardWebStringId.Gauge.Scale.Auto': 'Auto',
    'DashboardWebStringId.Grid.ColumnType': 'Column Type',
    'DashboardWebStringId.Grid.DisplayMode': 'Display Mode',
    'DashboardWebStringId.Grid.DisplayMode.Value': 'Value',
    'DashboardWebStringId.Grid.DisplayMode.Bar': 'Bar',
    'DashboardWebStringId.Grid.DisplayMode.Text': 'Text',
    'DashboardWebStringId.Grid.DisplayMode.Image': 'Image',
    'DashboardWebStringId.Grid.FixedWidth': 'Fixed Width',
    'DashboardWebStringId.Grid.WidthType': 'Width Type',
    'DashboardWebStringId.Grid.WidthType.Weight': 'Weight',
    'DashboardWebStringId.Grid.WidthType.FitToContent': 'Fit To Content',
    'DashboardWebStringId.Grid.DeltaOptions': 'Delta Options',
    'DashboardWebStringId.Grid.ShowStartEndValues': 'Show Start/ End Values',
    'DashboardWebStringId.Grid.TotalType': 'Total Type',
    'DashboardWebStringId.Grid.Dimension': 'Dimension',
    'DashboardWebStringId.Grid.Measure': 'Measure',
    'DashboardWebStringId.Grid.Delta': 'Delta',
    'DashboardWebStringId.Grid.Sparkline': 'Sparkline',
    'DashboardWebStringId.Grid.Hyperlink': 'Hyperlink',
    'DashboardWebStringId.Grid.Options': 'Grid Options',
    'DashboardWebStringId.Map.ShapeFileLoaded': '(SHP File)',
    'DashboardWebStringId.Map.AttributeFileLoaded': '(DBF File)',
    'DashboardWebStringId.Map.ValueMap': 'Value Map',
    'DashboardWebStringId.Map.DeltaMap': 'Delta Map',
    'DashboardWebStringId.Map.TooltipCaption': 'Tooltip Caption',
    'DashboardWebStringId.Map.TooltipActualValueCaption': 'Tooltip Actual Value Caption',
    'DashboardWebStringId.Map.TooltipDeltaCaption': 'Tooltip Delta Caption',
    'DashboardWebStringId.Map.CustomMapOptions': 'Custom Map Options',
    'DashboardWebStringId.Map.CustomMapOptionsSource': 'Source',
    'DashboardWebStringId.Map.CustomMapOptionsUrl': 'Url',
    'DashboardWebStringId.Map.CustomMapOptionsFile': 'File',
    'DashboardWebStringId.Map.CustomMapUrl': 'Shape File Url',
    'DashboardWebStringId.Map.CustomMapFile': 'Shape File',
    'DashboardWebStringId.Map.CustomAttributeFile': 'Attribute File',
    'DashboardWebStringId.Map.AttributeDimension': 'Attribute Dimension',
    'DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle': 'Include Summary Value',
    'DashboardWebStringId.Map.AttributeName': 'Attribute Name',
    'DashboardWebStringId.Map.TooltipAttribute': 'Tooltip Attribute',
    'DashboardWebStringId.Map.TooltipDimensions': 'Tooltip Dimensions',
    'DashboardWebStringId.Map.Area.Custom': 'Custom',
    'DashboardWebStringId.Map.Area.WorldCountries': 'World Countries',
    'DashboardWebStringId.Map.Area.Europe': 'Europe',
    'DashboardWebStringId.Map.Area.Asia': 'Asia',
    'DashboardWebStringId.Map.Area.NorthAmerica': 'North America',
    'DashboardWebStringId.Map.Area.SouthAmerica': 'South America',
    'DashboardWebStringId.Map.Area.Africa': 'Africa',
    'DashboardWebStringId.Map.Area.USA': 'USA',
    'DashboardWebStringId.Map.Area.Canada': 'Canada',
    'DashboardWebStringId.Map.Viewport': 'Viewport',
    'DashboardWebStringId.Map.ShapeTitleAttribute': 'Shape Title Attribute',
    'DashboardWebStringId.Map.UseBindingAttribute': 'Use binding attribute',
    'DashboardWebStringId.Map.WeightedLegendType': 'Type',
    'DashboardWebStringId.Map.WeightedLegendType.Linear': 'Linear',
    'DashboardWebStringId.Map.WeightedLegendType.Nested': 'Nested',
    'DashboardWebStringId.Map.Orientation.Vertical': 'Vertical',
    'DashboardWebStringId.Map.Orientation.Horizontal': 'Horizontal',
    'DashboardWebStringId.Map.Position.TopLeft': 'Top Left',
    'DashboardWebStringId.Map.Position.TopCenter': 'Top Center',
    'DashboardWebStringId.Map.Position.TopRight': 'Top Right',
    'DashboardWebStringId.Map.Position.BottomLeft': 'Bottom Left',
    'DashboardWebStringId.Map.Position.BottomCenter': 'Bottom Center',
    'DashboardWebStringId.Map.Position.BottomRight': 'Bottom Right',
    'DashboardWebStringId.Map.Viewport.TopLatitude': 'Top Latitude',
    'DashboardWebStringId.Map.Viewport.LeftLongitude': 'Left Longitude',
    'DashboardWebStringId.Map.Viewport.RightLongitude': 'Right Longitude',
    'DashboardWebStringId.Map.Viewport.BottomLatitude': 'Bottom Latitude',
    'DashboardWebStringId.Map.Viewport.CenterPointLatitude': 'Center Point Latitude',
    'DashboardWebStringId.Map.Viewport.CenterPointLongitude': 'Center Point Longitude',
    'DashboardWebStringId.Map.Viewport.CreateViewerPaddings': 'Create Viewer Paddings',
    'DashboardWebStringId.Map.ShowLegend': 'Show Color Legend',
    'DashboardWebStringId.Map.ShowWeightedLegend': 'Show Weighted Legend',
    'DashboardWebStringId.Pie.Type': 'Pie Type',
    'DashboardWebStringId.Pie': 'Pie',
    'DashboardWebStringId.Pie.Donut': 'Donut',
    'DashboardWebStringId.Pie.LabelContentType.None': 'None',
    'DashboardWebStringId.Pie.LabelContentType.Argument': 'Argument',
    'DashboardWebStringId.Pie.LabelContentType.Percent': 'Percent',
    'DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent': 'Argument And Percent',
    'DashboardWebStringId.Pie.LabelContentType.Value': 'Value',
    'DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue': 'Argument And Value',
    'DashboardWebStringId.Pie.LabelContentType.ValueAndPercent': 'Value And Percent',
    'DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent': 'Argument, Value And Percent',
    'DashboardWebStringId.Image.BindingMode': 'Binding Mode',
    'DashboardWebStringId.Image.BindingMode.BinaryArray': 'Binary Array',
    'DashboardWebStringId.Image.BindingMode.Uri': 'Uri',
    'DashboardWebStringId.RangeFilter.UriPattern': 'Uri Pattern',
    'DashboardWebStringId.Image.SizeMode.Clip': 'Clip',
    'DashboardWebStringId.Image.SizeMode.Stretch': 'Stretch',
    'DashboardWebStringId.Image.SizeMode.Zoom': 'Zoom',
    'DashboardWebStringId.Image.SizeMode.Squeeze': 'Squeeze',
    'DashboardWebStringId.Image.HorizontalAlignment': 'Horizontal Alignment',
    'DashboardWebStringId.Image.VerticalAlignment': 'Vertical Alignment',
    'DashboardWebStringId.Image.Alignment.Left': 'Left',
    'DashboardWebStringId.Image.Alignment.Center': 'Center',
    'DashboardWebStringId.Image.Alignment.Right': 'Right',
    'DashboardWebStringId.Image.Alignment.Top': 'Top',
    'DashboardWebStringId.Image.Alignment.Bottom': 'Bottom',
    'DashboardWebStringId.SeriesItem.SeriesDimensions': 'Series Dimensions',
    'DashboardWebStringId.TextBox.Text': 'Text',
    'DashboardWebStringId.Chart.Orientation.Default': 'Default',
    'DashboardWebStringId.Chart.Orientation.RotateRight': 'Rotate Right',
    'DashboardWebStringId.Chart.Orientation.RotateLeft': 'Rotate Left',
    'DashboardWebStringId.Chart.OverlappingMode.Hide': 'Hide',
    'DashboardWebStringId.Chart.OverlappingMode.None': 'None',
    'DashboardWebStringId.Chart.Position.Outside': 'Outside',
    'DashboardWebStringId.Chart.Position.Inside': 'Inside',
    'DashboardWebStringId.Chart.SeriesType.Weighted': 'Weighted',
    'DashboardWebStringId.Coloring.MeasuresColoringMode': 'Measures Coloring',
    'DashboardWebStringId.Coloring.Global': 'Global',
    'DashboardWebStringId.Coloring.Local': 'Local',
    'DashboardWebStringId.Delta.ValueType': 'Value Type',
    'DashboardWebStringId.Delta.ResultIndication': 'Result Indication',
    'DashboardWebStringId.Delta.ThresholdType': 'Threshold Type',
    'DashboardWebStringId.Delta.ThresholdValue': 'Threshold Value',
    'DashboardWebStringId.Sparkline.ViewType': 'View Type',
    'DashboardWebStringId.Sparkline.HighlightMinMaxPoints': 'Highlight Min/ Max Points',
    'DashboardWebStringId.Sparkline.HighlightStartEndPoints': 'Highlight Start/ End Points',
    'DashboardWebStringId.Title.Aligment.Left': 'Left',
    'DashboardWebStringId.Title.Aligment.Center': 'Center',
    'DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp': 'No Look-Up',
    'DashboardWebStringId.Parameters.LookUpSettingsType.StaticList': 'Static List',
    'DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList': 'Dynamic List',
    'DashboardWebStringId.Parameters.LookUpSettingsType': 'Look-up Settings',
    'DashboardWebStringId.Parameters.DefaultValue': 'Default Value',
    'DashboardWebStringId.DataItem': 'Data Item',
    'DashboardWebStringId.DataItem.Precision': 'Precision',
    'DashboardWebStringId.DataItem.IncludeGroupSeparator': 'Include Group Separator',
    'DashboardWebStringId.DataItem.ShowValues': 'Show Values',
    'DashboardWebStringId.DataItem.ShowTotals': 'Show Totals',
    'DashboardWebStringId.DataItem.ShowGrandTotals': 'Show Grand Totals',
    'DashboardWebStringId.Dialog.ConfirmSaving': 'Confirm saving',
    'DashboardWebStringId.Dialog.Warning': 'Warning',
    'DashboardWebStringId.Dimension.GroupInterval': 'Group Interval',
    'DashboardWebStringId.Dimension.SortMode': 'Sort Mode',
    'DashboardWebStringId.Dialog.ArgumentMode': 'Axis Type',
    'DashboardWebStringId.Calculations': 'Calculations',
    'DashboardWebStringId.Calculations.Expression': 'Calculation',
    'DashboardWebStringId.Calculations.DifferenceCalculation': 'Difference of',
    'DashboardWebStringId.Calculations.Moving': 'Moving of',
    'DashboardWebStringId.Calculations.RunningTotal': 'Running Total of',
    'DashboardWebStringId.Calculations.PercentOfTotal': 'Percent Of Total of',
    'DashboardWebStringId.Calculations.Rank': 'Rank of',
    'DashboardWebStringId.Calculations.DefinitionMode': 'Definition Mode',
    'DashboardWebStringId.Calculations.WindowDefinition': 'Window Definition',
    'DashboardWebStringId.Calculations.WindowDefinitionModeSpecific': 'Specific',
    'DashboardWebStringId.Calculations.WindowDefinitionModePredefined': 'Predefined',
    'DashboardWebStringId.Calculations.DifferenceType': 'Difference Type',
    'DashboardWebStringId.TreemapLayoutAlgorithm': 'Layout Algorithm',
    'DashboardWebStringId.TilesLabelContentType': 'Tile Label',
    'DashboardWebStringId.TilesTooltipContentType': 'Tile Tooltip',
    'DashboardWebStringId.GroupsLabelContentType': 'Group Label',
    'DashboardWebStringId.GroupsTooltipContentType': 'Group Tooltip',
    'DashboardWebStringId.ShowOthersValue': 'Show "Others" Value',
    'DashboardWebStringId.TopNEnabled': 'Enabled',
    'DashboardWebStringId.Parameters.StaticListLookUpSettings': 'Static List LookUp Settings',
    'DashboardWebStringId.Parameters.DynamicListLookUpSettings': 'Dynamic List LookUp Settings',
    'DashboardWebStringId.ConvertTo': 'Convert To',
    'DashboardWebStringId.Duplicate': 'Duplicate current item',
    'DashboardWebStringId.DataSourceWizard': 'Dashboard Data Source Wizard',
    'DashboardWebStringId.RangeFilter.CustomPeriods': 'Custom Periods',
    'DashboardWebStringId.RangeFilter.StartMode': 'Start Mode',
    'DashboardWebStringId.RangeFilter.EndMode': 'End Mode',
    'DashboardWebStringId.RangeFilter.StartIntervalAndOffset': 'Start Interval and Offset',
    'DashboardWebStringId.RangeFilter.EndIntervalAndOffset': 'End Interval and Offset',
    'DashboardWebStringId.RangeFilter.StartDate': 'Start Date',
    'DashboardWebStringId.RangeFilter.EndDate': 'End Date',
    'DashboardWebStringId.RangeFilter.None': 'None',
    'DashboardWebStringId.RangeFilter.Fixed': 'Fixed',
    'DashboardWebStringId.RangeFilter.Flow': 'Flow',
    'DashboardWebStringId.Tabs.Binding': 'Binding',
    'DashboardWebStringId.Tabs.DataShaping': 'Data Shaping',
    'DashboardWebStringId.Tabs.Format': 'Format',
    'DashboardWebStringId.Calculations.Types.Moving': 'Moving',
    'DashboardWebStringId.Parameters.SortByMember': 'Sort By',
    'DashboardWebStringId.Parameters.LookUpSettingsTypeCaption': 'Look-Up Settings Type',
    'DashboardWebStringId.Dashboard.Items': 'Items',
    'DashboardWebStringId.Dashboard.Groups': 'Groups',
    'DashboardWebStringId.Dashboard.LayoutItems': 'Layout Items',
    'DashboardWebStringId.Dashboard.ComponentName': 'Component Name',
    'DashboardWebStringId.ButtonConfirm': 'Confirm',
    'DashboardWebStringId.Colorization.GroupInterval': 'Group Interval',
    'DashboardWebStringId.ButtonOn': 'ON',
    'DashboardWebStringId.ButtonOff': 'OFF',
    'DashboardWebStringId.ButtonYes': 'YES',
    'DashboardWebStringId.ButtonNo': 'NO',
    'DashboardWebStringId.ButtonDiscrete': 'DISCRETE',
    'DashboardWebStringId.ButtonContinuous': 'CONTINUOUS',
    'DashboardWebStringId.ButtonVisible': 'VISIBLE',
    'DashboardWebStringId.ButtonHidden': 'HIDDEN',
    'DashboardWebStringId.Calculations.PreviousValuesCount': 'Start Offset',
    'DashboardWebStringId.Calculations.NextValuesCount': 'End Offset',
    'DashboardWebStringId.Calculations.RankType': 'Rank Type',
    'DashboardWebStringId.Calculations.RankOrder': 'Rank Order',
    'DashboardWebStringId.TileOptions': 'Tile Options',
    'DashboardWebStringId.MapLockNavigationLocked': 'Locked',
    'DashboardWebStringId.MapLockNavigationUnlocked': 'Unlocked',
    'DashboardWebStringId.ConditionalFormatting.BarOptions': 'Bar Options',
    'DashboardWebStringId.ConditionalFormatting.CalculatedBy': 'Calculated by',
    'DashboardWebStringId.ConditionalFormatting.IconType': 'Icon Type',
    'DashboardStringId.FormatRulePredefinedColor': 'Predefined Color',
    'DashboardStringId.FormatRuleCustomColor': 'Custom Color',
    'DashboardWebStringId.ConditionalFormatting.AppearanceType': 'Appearance Type',
    'DashboardWebStringId.ConditionalFormatting.FontStyle': 'Font Style',
    'DashboardWebStringId.ConditionalFormatting.FontFamily': 'Font Family',
    'DashboardWebStringId.ConditionalFormatting.FontRegular': 'Regular',
    'DashboardWebStringId.ConditionalFormatting.IconType.None': 'None',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp': 'Directional Green Arrow Up',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow': 'Directional Yellow Up Incline Arrow',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow': 'Directional Yellow Side Arrow',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow': 'Directional Yellow Down Incline Arrow',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow': 'Directional Red Down Arrow',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp': 'Directional Gray Arrow Up',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow': 'Directional Gray Up Incline Arrow',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow': 'Directional Gray Side Arrow',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow': 'Directional Gray Down Incline Arrow',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow': 'Directional Gray Down Arrow',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash': 'Directional Yellow Dash',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown': 'Directional Red Triangle Down',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp': 'Directional Green Triangle Up',
    'DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar': 'Rating Full Gray Star',
    'DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar': 'Rating Half Gray Star',
    'DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar': 'Rating Empty Gray Star',
    'DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle': 'Rating Full Gray Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle': 'Rating 1 Quarter Gray Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle': 'Rating 2 Quarters Gray Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle': 'Rating 3 Quarters Gray Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle': 'Rating Empty Gray Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars': 'Rating 4 Bars',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars': 'Rating 3 Bars',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars': 'Rating 2 Bars',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar': 'Rating 1 Bar',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars': 'Rating 0 Bars',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes': 'Rating 4 Filled Boxes',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes': 'Rating 3 Filled Boxes',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes': 'Rating 2 Filled Boxes',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox': 'Rating 1 Filled Box',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes': 'Rating 0 Filled Boxes',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight': 'Shape Green Traffic Light',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight': 'Shape Yellow Traffic Light',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight': 'Shape Red Traffic Light',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle': 'Shape Green Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle': 'Shape Yellow Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle': 'Shape Red Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle': 'Shape Light Red Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle': 'Shape Light Gray Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle': 'Shape Yellow Triangle',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond': 'Shape Red Diamond',
    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck': 'Indicator Green Check',
    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation': 'Indicator Yellow Exclamation',
    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross': 'Indicator Red Cross',
    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck': 'Indicator Circled Green Check',
    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation': 'Indicator Circled Yellow Exclamation',
    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross': 'Indicator Circled Red Cross',
    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag': 'Indicator Green Flag',
    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag': 'Indicator Yellow Flag',
    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag': 'Indicator Red Flag',
    'DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension': 'Intersection Column Dimension',
    'DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension': 'Intersection Row Dimension',
    'DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode': 'Intersection Level Mode',
    'DashboardWebStringId.ConditionalFormatting.GradientRangeBar': 'Gradient Range Bar',
    'DashboardWebStringId.ConditionalFormatting.RangeGradient': 'Range Gradient',
    'DashboardWebStringId.ConditionalFormatting.SegmentNumber': 'Segment Number',
    'DashboardWebStringId.ConditionalFormatting.ValueComparison': 'Value Comparison',
    'DashboardWebStringId.ConditionalFormatting.Ranges': 'Ranges',
    'DashboardWebStringId.ConditionalFormatting.AverageType': 'Average Type',
    'DashboardWebStringId.ConditionalFormatting.Above': 'Above',
    'DashboardWebStringId.ConditionalFormatting.AboveOrEqual': 'Above or Equal',
    'DashboardWebStringId.ConditionalFormatting.Below': 'Below',
    'DashboardWebStringId.ConditionalFormatting.BelowOrEqual': 'Below or Equal',
    'DashboardWebStringId.ConditionalFormatting.StyleSettingsType': 'Style Settings Type',
    'DashboardWebStringId.ConditionalFormatting.Positive': 'Positive',
    'DashboardWebStringId.ConditionalFormatting.Negative': 'Negative',
    'DashboardWebStringId.ConditionalFormatting.MinimumType': 'Minimum Type',
    'DashboardWebStringId.ConditionalFormatting.MaximumType': 'Maximum Type',
    'DashboardWebStringId.ConditionalFormatting.DateType': 'Date Type',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringNone': 'None',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringEmpty': 'Empty',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringYesterday': 'Yesterday',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringToday': 'Today',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringTomorrow': 'Tomorrow',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringLastWeek': 'Last Week',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringThisWeek': 'This Week',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringNextWeek': 'Next Week',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo1': 'Last Month',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringThisMonth': 'This Month',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter1': 'Next Month',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisWeek': 'This week, prior to yesterday',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisMonth': 'This month, prior to previous week',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisYear': 'This year, prior to this month',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo2': 'During the month 2 months ago',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo3': 'During the month 3 months ago',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo4': 'During the month 4 months ago',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo5': 'During the month 5 months ago',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo6': 'During the month 6 months ago',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlier': 'Prior to the month 6 months ago',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringPriorThisYear': 'Prior to this year',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisWeek': 'This week, beyond tomorrow',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisMonth': 'This month, beyond next week',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisYear': 'This year, beyond this month',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter2': 'During the month in 2 months time',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyond': 'Following the month in 2 months time',
    'DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyondThisYear': 'Following this year',
    'DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem': 'Data Item',
    'DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard': 'Card',
    'DashboardWebStringId.ConditionalFormatting.InvalidApplyToValue': 'Please select a valid data item',
    'DashboardWebStringId.Colorization.NoSelectedSchema': 'Select color signature to edit schema',
    'DashboardWebStringId.Colorization.ColorSchemes': 'Color Schemes',
    'DashboardWebStringId.LayoutHasBeenChangedDialogMessage': 'The dashboard layout has been changed.',
    'DashboardWebStringId.SaveConfirmationDialogMessage': 'If you leave before saving, your changes will be lost.',
    'DashboardWebStringId.SaveChangesDialogMessage': 'Do you want to save changes?',
    'DashboardWebStringId.Dialog.Save': 'Save',
    'DashboardWebStringId.Dialog.DoNotSave': "Don't Save",
    'DashboardWebStringId.Dialog.UnsupportedCalculatedField': 'This data item does not support the calculated field you created. This field is available on the Data Sources page of the dashboard menu.',
    'DashboardWebStringId.Colorization.ColorSchemeType': 'Color Scheme Type',
    'DashboardWebStringId.Colorization.MeasureNames': 'Measure Names',
    'DashboardWebStringId.Colorization.AddColor': 'Add Color',
    'DashboardWebStringId.Colorization.ValidationSelectMeasure': 'Select at least one measure',
    'DashboardWebStringId.ColoringModeAuto': 'Auto',
    'DashboardWebStringId.ColoringModeOff': 'Off',
    'DashboardWebStringId.ColoringModeOn': 'On',
    'DashboardWebStringId.ColorScheme.Empty': 'The current dashboard does not contain color schemes',
    'DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton': 'Select a data source',
    'DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip': 'To add a data source to the current dashboard, go to Menu | Data Sources.',
    'DashboardWebStringId.DashboardItemMenu.Bindings.ChangedDataSourceMessage': 'The data source for the {0} item was changed to {1}',
    'DashboardWebStringId.ConditionalFormatting.Miscellaneous': 'Miscellaneous',
    'DashboardWebStringId.Dashboards': 'Dashboards',
    'DashboardWebStringId.EditInDesigner': 'Edit in Designer',
    'DashboardWebStringId.NoDashboards': 'There are no dashboards to display.',
    'DashboardWebStringId.AddNewDashboard': 'To add a new dashboard, click',
    'DashboardWebStringId.NewDashboard': 'New Dashboard',
    'DashboardWebStringId.Binding.Searching': 'Start typing to search...',
    'DashboardWebStringId.Binding.EmptySearchResult': 'Nothing was found',
    'DashboardWebStringId.Errors.AttemptToLoadData': 'An error has occurred on an attempt to load data',
    'DashboardWebStringId.ConditionType': 'Condition Type',
    'DashboardWebStringId.ConditionalFormatting.UnsupportedDataType': 'This data type is not supported',
    'DashboardWebStringId.FormatRule': 'Format Rule',
    'DashboardWebStringId.Notification.DashboardSaving': 'Dashboard is saving',
    'DashboardWebStringId.Notification.DashboardSaved': 'Dashboard is saved',
    'DashboardWebStringId.Notification.DashboardCanNotBeSaved': 'The dashboard cannot be saved',
    'DashboardWebStringId.Notification.DashboardSavingIsNotAvailable': 'Saving is not available',
    'DashboardWebStringId.Notification.AttemptToLoadDashboards': 'An error has occurred on an attempt to load the list of available dashboards',
    'DashboardWebStringId.Notification.DashboardLoading': 'Dashboard is loading...',
    'DashboardWebStringId.Notification.AttemptToLoadDashboard': 'An error has occurred on an attempt to load the dashboard ',
    'DashboardWebStringId.Notification.AttemptToConnectionStrings': 'An error occurred on an attempt to load connection strings',
    'DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode': 'This method is not allowed in the viewer mode',
    'DashboardWebStringId.Notification.AttemptToLoadParameterValues': 'An error has occurred on an attempt to load parameter values for the data source ',
    'DashboardWebStringId.Notification.AttemptToGetUnderlyingData': 'An error has occurred on an attempt to get underlying data for the item ',
    'DashboardWebStringId.Notification.AttemptToConvertItemToType': 'An error has occurred on an attempt to convert the item to the type ',
    'DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues': 'An error has occurred on an attempt to load dimension unique values for the data source ',
    'DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource': 'An error has occurred on an attempt to load the field list for the data source ',
    'DashboardWebStringId.Notification.AttemptToGetColorScheme': 'An error has occurred on an attempt to get the color scheme',
    'DashboardWebStringId.Notification.NewDashboardCannotBeCreated': 'A new dashboard cannot be created',
    'DashboardWebStringId.Notification.ErrorHasOccuredOn': 'An error has occurred on an',
    'DashboardWebStringId.Notification.UnsupportedDataSourceType': 'Unsupported data source type',
    'DashboardWebStringId.Notification.QueryDoesNotExist': 'The query with the specified name does not exist: {0}.',
    'DashboardWebStringId.Notification.UnderlyingRequestDataNotLoaded': 'The data for the \'{0}\' dashboard item has not been loaded yet. Please check whether the \'getItemData\' method call returns an initialized non-null value before you request the underlying data.',
    'DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip': 'This dashboard item is bound to a large dataset and does not currently display all data to retain performance. Click this button to display all data.',
    'DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip': 'This dashboard item is bound to a large data set. To increase performance, click this icon to limit visible data.',
    'DashboardWebStringId.ConditionalFormatting.Condition': 'Condition',
    'DashboardWebStringId.CardLayout.MinWidth': 'Min Width',
    'DashboardWebStringId.CardLayout.MaxWidth': 'Max Width',
    'DashboardWebStringId.CardLayout.Editor.CardLayout': 'Card Layout',
    'DashboardWebStringId.CardLayout.Editor.FormatOptions': 'Format Options',
    'DashboardWebStringId.CardLayout.LayoutOptions': 'Layout Options',
    'DashboardWebStringId.CardLayout.ResetTemplate': 'Reset',
    'DashboardWebStringId.CardLayout.ApplyToAllCards': 'Apply to all Cards',
    'DashboardWebStringId.Binding.ValuesPattern': 'Values {0}',
    'DashboardWebStringId.Parameters.ParameterNameShouldBeUnique': 'A name of the parameter should be unique',
    'DashboardWebStringId.Title.ImageEmbedded': 'Embedded',
    'DashboardWebStringId.Title.ImageLinked': 'Linked',
    'DashboardWebStringId.Title.ImageNone': 'None',
    'DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod': 'Set as Default',
    'DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod': 'Clear Default Custom Period',
    'DashboardWebStringId.MobileLayout.Back': 'Back',
    'DashboardWebStringId.MobileLayout.SwitchToViewer': 'You have opened the Web Dashboard in the Designer mode. The control supports a mobile layout only if it works in the Viewer mode. Do you want to switch to the Viewer mode?',
    'DashboardWebStringId.Search': 'Search...',
    'DashboardStringId.DefaultNameTabPage': 'Page',
    'DashboardStringId.DefaultNameChartPane': 'Pane',
    'DashboardStringId.NewCalculatedFieldNamePrefix': 'Calculated Field',
    'DashboardStringId.NewParameterNamePrefix': 'Parameter',
    'AnalyticsCoreStringId.Parameter_Type_String': 'String',
    'AnalyticsCoreStringId.Parameter_Type_DateTime': 'Date',
    'AnalyticsCoreStringId.Parameter_Type_Int16': 'Number (16 bit integer)',
    'AnalyticsCoreStringId.Parameter_Type_Int32': 'Number (32 bit integer)',
    'AnalyticsCoreStringId.Parameter_Type_Int64': 'Number (64 bit integer)',
    'AnalyticsCoreStringId.Parameter_Type_Float': 'Number (floating-point)',
    'AnalyticsCoreStringId.Parameter_Type_Double': 'Number (double-precision floating-point)',
    'AnalyticsCoreStringId.Parameter_Type_Decimal': 'Number (decimal)',
    'AnalyticsCoreStringId.Parameter_Type_Boolean': 'Boolean',
    'AnalyticsCoreStringId.Parameter_Type_Guid': 'Guid',
    'AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption': 'Expression Editor',
    'DataAccessUIStringId.FiltersView': 'Filter Editor',
    'DashboardStringId.SeriesTypeGroupArea': 'Area',
    'DashboardStringId.SeriesTypeGroupBar': 'Bar',
    'DashboardStringId.SeriesTypeGroupBubble': 'Bubble',
    'DashboardStringId.SeriesTypeGroupFinancial': 'Financial',
    'DashboardStringId.SeriesTypeGroupPointLine': 'Point / Line',
    'DashboardStringId.SeriesTypeGroupRange': 'Range',
    'DashboardStringId.FunctionCategoryWindow': 'Window',
    'DashboardStringId.FunctionCategoryAggregate': 'Aggregate',
    'DashboardStringId.FunctionCategoryAdvanced': 'Advanced',
    'DashboardStringId.FunctionDescriptionRunningCustomAggregate': 'RunningAggregate(SummaryExpression, CustomAggregateName) - Returns the cumulative result of the custom function applied to specified expression from the first row in the window to the current row.\r\n',
    'DashboardStringId.FunctionDescriptionWindowCustomAggregate': 'WindowAggregate(SummaryExpression, StartOffset, EndOffset, CustomAggregateName) - Returns the result of the custom function applied to the specified expression in the window.\r\n',
    'DashboardStringId.FunctionDescriptionWindowAvg': 'WindowAvg(SummaryExpression, StartOffset, EndOffset)\r\nReturns the average of the expression within the window, which is defined using offsets from the current row.\r\n  ',
    'DashboardStringId.FunctionDescriptionRunningMin': 'RunningMin(SummaryExpression)\r\nReturns the running minimum of the specified expression from the first row in the window to the current row.\r\n  ',
    'DashboardStringId.FunctionDescriptionTotal': 'Total(SummaryExpression)\r\nReturns the total for the specified expression in a table calculation window.\r\n  ',
    'DashboardStringId.FunctionDescriptionRankCompetition': 'RankCompetition(SummaryExpression, ["asc", "desc"])\r\nReturns the standard competition rank for the current row in the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionLookup': 'Lookup(SummaryExpression, Position)\r\nReturns the value of the expression in a target position specified as a relative offset from the current position.\r\n  ',
    'DashboardStringId.FunctionDescriptionRunningCount': 'RunningCount(SummaryExpression)\r\nReturns the running count of the specified expression from the first row in the window to the current row.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowMax': 'WindowMax(SummaryExpression, StartOffset, EndOffset)\r\nReturns the maximum of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionVarp': 'Varp(Value)\r\nReturns the variance of a population, where the population is the entire data to be summarized.',
    'DashboardStringId.FunctionDescriptionRunningAvg': 'RunningAvg(SummaryExpression)\r\nReturns the running average of the specified expression from the first row in the window to the current row.\r\n  ',
    'DashboardStringId.FunctionDescriptionFirst': 'First()\r\nReturns the number of rows from the current row to the first row in the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowMin': 'WindowMin(SummaryExpression, StartOffset, EndOffset)\r\nReturns the minimum of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowStdDev': 'WindowStdDev(SummaryExpression, StartOffset, EndOffset)\r\nReturns the sample standard deviation of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionLast': 'Last()\r\nReturns the number of rows from the current row to the last row in the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowCount': 'WindowCount(SummaryExpression, StartOffset, EndOffset)\r\nReturns the count of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionCountDistinct': 'CountDistinct(Value)\r\nReturns the number of unique objects in a collection.',
    'DashboardStringId.FunctionDescriptionIndex': 'Index()\r\nReturns the index of the current row in the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowStdDevp': 'WindowStdDevp(SummaryExpression, StartOffset, EndOffset)\r\nReturns the biased standard deviation of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowMode': 'WindowMode(SummaryExpression, StartOffset, EndOffset)\r\n Returns the mode of the expression within the window.',
    'DashboardStringId.FunctionDescriptionRunningMax': 'RunningMax(SummaryExpression)\r\nReturns the running maximum of the specified expression from the first row in the window to the current row.\r\n  ',
    'DashboardStringId.FunctionDescriptionRankPercentile': 'RankPercentile(SummaryExpression, ["asc", "desc"])\r\nReturns the percentile rank for the current row in the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionRankDense': 'RankDense(SummaryExpression, ["asc", "desc"])\r\nReturns the dense rank for the current row in the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowSum': 'WindowSum(SummaryExpression, StartOffset, EndOffset)\r\nReturns the sum of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowCountDistinct': 'WindowCountDistinct(SummaryExpression, StartOffset, EndOffset)\r\nReturns the distinct count of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionStdDevp': 'StdDevp(Value)\r\nReturns the standard deviation of a population, where the population is the entire data to be summarized.',
    'DashboardStringId.FunctionDescriptionSize': 'Size()\r\nReturns the number of rows in the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionMedian': 'Median(Value)\r\nReturns the median of the values in a collection.',
    'DashboardStringId.FunctionDescriptionRankModified': 'RankModified(SummaryExpression, ["asc", "desc"])\r\nReturns the modified competition rank for the current row in the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowMedian': 'WindowMedian(SummaryExpression, StartOffset, EndOffset)\r\nReturns the median of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionRunningSum': 'RunningSum(SummaryExpression)\r\nReturns the running sum of the specified expression from the first row in the window to the current row.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowVarp': 'WindowVarp(SummaryExpression, StartOffset, EndOffset)\r\nReturns the biased variance of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowVar': 'WindowVar(SummaryExpression, StartOffset, EndOffset)\r\nReturns the variance of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionStdDev': 'StdDev(Value)\r\nReturns an estimate of the standard deviation of a population, where the sample is a subset of the entire population.',
    'DashboardStringId.FunctionDescriptionRankUnique': 'RankUnique(SummaryExpression, ["asc", "desc"])\r\nReturns the unique rank for the current row in the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionVar': 'Var(Value)\r\nReturns an estimate of the variance of a population, where the sample is a subset of the entire population.',
    'DashboardStringId.FunctionDescriptionAggr': 'aggr(SummaryExpression, Dimension1, Dimension2, ...)\r\nUses the detail level and summary function to aggregate underlying data. The level depends on the number of dimensions.',
    'DashboardStringId.FunctionDescriptionAggrJoinRule': "joinRule(dimension, searchValue)\r\nSpecifies the dimension for the 'aggr' function and a column whose values are used in the join operation after aggregation is completed.",
    'DashboardStringId.FunctionDescriptionWindowDefinition': 'w(WindowExpression, partitionByFunction, orderByFunction)\r\nCalculates aggregated values with the specified window function for the window defined by the specified partitioning and ordering.',
    'DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy': 'partitionBy(column1, column2, ...)\r\nSpecifies the columns by which the data rows are partitioned. The window function is applied to each partition separately.',
    'DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy': 'orderBy(column1, column2, ...)\r\nSpecifies the logical order in which the window function calculation is performed on the rows in the window.',
    'DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc': 'asc(column)\r\nSpecifies that the values in the specified column are sorted in ascending order. This is the default sort order.',
    'DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc': 'desc(column)\r\nSpecifies that the values in the specified column are sorted in descending order.',
    'DashboardStringId.AggregateExFunctionDescriptionCountNotNull': 'CountNotNull(Value)\r\nReturns a number of non-null objects in a collection.',
    'DashboardStringId.AggregateExFunctionDescriptionMode': 'Mode(Value)\r\nThe mode of the values.A mode is the value that is repeated more often than any other.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour': 'GetDateHour(DateTime)\r\nExtracts the date part with the hour value from the defined DateTime.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute': 'GetDateHourMinute(DateTime)\r\nExtracts the date part with the hour and minute values from the defined DateTime.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond': 'GetDateHourMinuteSecond(DateTime)\r\nExtracts the date part with the hour, minute, and second values from the defined DateTime.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear': 'GetDateHourMinuteSecond(DateTime)\r\nExtracts the date part with the hour, minute, and second values from the defined DateTime.',
    'DashboardStringId.FunctionDescriptionGetDateWeekYear': 'GetDateWeekYear(DateTime)\r\nReturns the date that corresponds the first day of the week in the defined DateTime depending on the culture settings.',
    'DashboardStringId.FunctionDescriptionGetDateWeekYear2': "GetDateWeekYear(DateTime, ['FirstDay', 'FirstFullWeek', 'FirstFourDayWeek'])\r\nReturns the date of the first day of the week for a given DateTime. The second parameter determines the rule for calculating the calendar week.",
    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear': 'GetDateQuarterYear(DateTime)\r\nExtracts the date with the quarter and year from the defined DateTime.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter': 'GetQuarter(DateTime)\r\nExtracts a quarter from the defined DateTime.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth': 'GetWeekOfMonth(DateTime)\r\nExtracts the week of the month from the defined DateTime.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear': 'GetWeekOfYear(DateTime)\r\nExtracts the week of the year from the defined DateTime.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3': 'MakeDateTime(Year, Month, Day)\r\nReturns a date value constructed from the specified Year, Month and Day.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4': 'MakeDateTime(Year, Month, Day, Hour)\r\nReturns a date value constructed from the specified Year, Month, Day and Hour.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5': 'MakeDateTime(Year, Month, Day, Hour, Minute)\r\nReturns a date value constructed from the specified Year, Month, Day, Hour and Minute.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6': 'MakeDateTime(Year, Month, Day, Hour, Minute, Second)\r\nReturns a date value constructed from the specified Year, Month, Day, Hour, Minute and Second.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean': 'ToBoolean(Value)\r\nConverts Value to an equivalent Boolean value.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime': 'ToDateTime(Value)\r\nConverts Value to a DateTime value.',
    'DashboardStringId.SparklineIndicationModeLine': 'Line',
    'DashboardStringId.SparklineIndicationModeArea': 'Area',
    'DashboardStringId.SparklineIndicationModeBar': 'Bar',
    'DashboardStringId.SparklineIndicationModeWinLoss': 'Win/Loss',
    'DashboardStringId.DefaultNameDateFilterItem': 'Date Filter',
    'DashboardWebStringId.DateFilter.FilterType': 'Filter Type',
    'DashboardWebStringId.DateFilter.FilterTypeExact': 'Exact',
    'DashboardWebStringId.DateFilter.FilterTypeAfter': 'After',
    'DashboardWebStringId.DateFilter.FilterTypeBefore': 'Before',
    'DashboardWebStringId.DateFilter.FilterTypeBetween': 'Between',
    'DashboardWebStringId.DateFilter.ArrangementMode': 'Arrangement Mode',
    'DashboardWebStringId.DateFilter.ArrangementModeAutoHeight': 'Auto Height',
    'DashboardWebStringId.DateFilter.ArrangementModeHorizontal': 'Horizontal',
    'DashboardWebStringId.DateFilter.ArrangementModeVertical': 'Vertical',
    'DashboardWebStringId.DateFilter.DatePickerLocation': 'Date Picker Location',
    'DashboardWebStringId.DateFilter.DatePickerLocationFar': 'Far',
    'DashboardWebStringId.DateFilter.DatePickerLocationNear': 'Near',
    'DashboardWebStringId.DateFilter.DatePickerLocationHidden': 'Hidden',
    'DashboardStringId.DateFilterDisplayTextPattern': 'Display Text Pattern',
    'DashboardStringId.DateFilterDatePickerButtonDefaultText': 'Set Filter...',
    'DashboardStringId.FromDatePeriodCaption': 'From {0}',
    'DashboardStringId.ToDatePeriodCaption': 'To {0}',
    'DashboardStringId.FromToDatePeriodCaption': '{0} - {1}',
    'DashboardStringId.UniqueNameValidationMessage': 'A name should be unique.',
    'DashboardStringId.GridTotalAutoTemplate': '{0}',
    'DashboardStringId.GridTotalValueTemplate': '{0}',
    'DashboardStringId.GridTotalTemplate': '{0} = {1}',
    'DashboardStringId.GridTotalTypeCount': 'Count',
    'DashboardStringId.GridTotalTypeMin': 'Min',
    'DashboardStringId.GridTotalTypeMax': 'Max',
    'DashboardStringId.GridTotalTypeAvg': 'Avg',
    'DashboardStringId.GridTotalTypeSum': 'Sum',
    'DashboardStringId.ActionShowDataInspector': 'Inspect Data',
    'DashboardStringId.InspectedData': 'Inspected Data:',
    'DashboardStringId.InspectedTypeFormatString': '({0} Data)',
    'DashboardStringId.AggregatedDataType': 'Aggregated',
    'DashboardStringId.RawDataType': 'Raw',
    'DashboardStringId.OLAPUnavailableRawData': 'OLAP Data Source - Data Unavailable',
    'DashboardStringId.SparklineValuesSeparator': ', ',
    'DashboardStringId.SparklineArgumentValueSeparator': ' - ',
    'DashboardStringId.DataInspectorButtonClose': 'Close',
    'DashboardWebStringId.Grid.FilterClause.ApplyFilter': 'Apply filter',
    'DashboardWebStringId.Grid.FilterClause.ResetOperation': 'Reset',
    'DashboardWebStringId.Grid.FilterClause.Contains': 'Contains',
    'DashboardWebStringId.Grid.FilterClause.DoesNotContain': 'Does not contain',
    'DashboardWebStringId.Grid.FilterClause.StartsWith': 'Starts with',
    'DashboardWebStringId.Grid.FilterClause.EndsWith': 'Ends with',
    'DashboardWebStringId.Grid.FilterClause.Equals': 'Equals',
    'DashboardWebStringId.Grid.FilterClause.DoesNotEqual': 'Does not equal',
    'DashboardWebStringId.Grid.FilterClause.Less': 'Less than',
    'DashboardWebStringId.Grid.FilterClause.Greater': 'Greater than',
    'DashboardWebStringId.Grid.FilterClause.LessOrEqual': 'Less than or equal to',
    'DashboardWebStringId.Grid.FilterClause.GreaterOrEqual': 'Greater than or equal to',
    'DashboardWebStringId.Grid.FilterClause.Between': 'Between',
    'DashboardWebStringId.Grid.FilterClause.BetweenStart': 'Start',
    'DashboardWebStringId.Grid.FilterClause.BetweenEnd': 'End',
    'DashboardWebStringId.AccordionTab.Content': 'Content',
    'DashboardWebStringId.TextBoxItemEditor.NoFields': 'No dashboard fields',
    'DashboardWebStringId.TextBoxItemEditor.InsertField': 'Insert Field',
    'DashboardWebStringId.TextBoxItemEditor.EditTextButton': 'Edit Text',
    'DashboardWebStringId.TextBoxItemEditor.DialogCaption': 'Text Editor',
    'DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose': 'Save and Close',
    'DashboardWebStringId.TextBoxItemEditor.DialogClose': 'Close',
    'DashboardStringId.StartDate': '(Start Date)',
    'DashboardStringId.EndDate': '(End Date)',
    'DashboardWebStringId.AccordionTab.MeasureFilter': 'Filter',
    'DashboardStringId.FunctionDescriptionAggregateFilter': 'filter(SummaryExpression, filterCriteria)\r\nFilters underlying data with specified filter criteria and aggregates filtered data using current detail level and the summary function.',
    'DashboardWebStringId.TabPages': 'Tab Pages',
    'DashboardWebStringId.More': 'More',
    'DashboardStringId.MeasureFilterCaptionFormatString': 'Filtered {0}',
    'DashboardWebStringId.AccordionTab.ItemFilter': 'Item Filter',
    'DashboardWebStringId.AccordionTab.VisibleDataFilter': 'Visible Data Filter',
    'DashboardStringId.LayoutDimensionModeAuto': 'Auto',
    'DashboardStringId.LayoutDimensionModeFixed': 'Fixed',
    'DashboardWebStringId.DesignerToolbar.Width': 'W:',
    'DashboardWebStringId.DesignerToolbar.Height': 'H:',
    'DashboardWebStringId.DesignerToolbar.Pixels': 'px',
    'DashboardWebStringId.DesignerToolbar.LayoutDimensionValidationError': 'The value should be between {0} and {1}',
    'DataAccessStringId.Wizard_NoDataSourcesForDataFederationMessage': 'Provide at least one data source to be used to create a federated data source.'
};
function tryLocalize(key) {
    return analytics_internal_1.localize(key) || key;
}
exports.tryLocalize = tryLocalize;
function getLocalizationById(key) {
    return analytics_internal_1.localize(key) || key;
}
exports.getLocalizationById = getLocalizationById;
function formatLocalizable(localizationId, arg1) {
    return string_1.format(getLocalizationById(localizationId), getLocalizationById(arg1));
}
exports.formatLocalizable = formatLocalizable;
function getDefaultLocalization() {
    return exports.defaultLocalization;
}
exports.getDefaultLocalization = getDefaultLocalization;


/***/ }),

/***/ 92906:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setLocalization = void 0;
const analytics_localization_1 = __webpack_require__(23133);
const _default_1 = __webpack_require__(65855);
function setLocalization(localization) {
    analytics_localization_1.loadMessages(localization);
}
exports.setLocalization = setLocalization;
setLocalization(_default_1.getDefaultLocalization());


/***/ }),

/***/ 91571:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.specialValues = void 0;
exports.specialValues = {
    nullValueGuid: 'D86D8A6C-0D87-4CA4-9C15-3356A83699B5',
    othersValueGuid: '5821CCA5-303B-425D-909F-B8373FB7FAE3',
    olapNullValueGuid: '764E2930-72BE-4464-ACB6-4ADB205BD414',
    errorValueGuid: 'D7BB8881-C9F3-45E3-B370-2EA8E836FC5D'
};


/***/ }),

/***/ 29947:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 8464:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getDataItemDisplayName = exports.getDataItemContainerDisplayName = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const dimension_1 = __webpack_require__(48336);
const measure_1 = __webpack_require__(17012);
const _dimension_1 = __webpack_require__(47557);
const _measure_1 = __webpack_require__(72150);
const _data_field_1 = __webpack_require__(68951);
function getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, dataItemContainer) {
    return dashboardItem._getDataItemContainerDisplayName(dataItemContainer, (dataItem) => getDataItemDisplayName(dataSourceBrowser, dashboardItem, dataItem));
}
exports.getDataItemContainerDisplayName = getDataItemContainerDisplayName;
function getDataItemDisplayName(dataFieldProvider, dataDashboardItem, dataItem) {
    let dataSourceName = dataDashboardItem.dataSource.peek(), queryName = dataDashboardItem.dataMember.peek(), dataMember = dataItem.dataMember(), cacheKey = createKey(dataSourceName, queryName, dataMember);
    if (!dataItem[cacheKey]) {
        var dataFieldObservable = ko.observable(null);
        dataFieldProvider
            .findDataField(dataSourceName, queryName, dataMember, true)
            .done((dataField) => {
            if (dataField) {
                dataFieldObservable(dataField);
            }
        });
        dataItem[cacheKey] = ko.computed(() => getDataItemDisplayNameByField(dataDashboardItem, dataItem, dataFieldObservable));
    }
    return dataItem[cacheKey]();
}
exports.getDataItemDisplayName = getDataItemDisplayName;
function getDataItemDisplayNameByField(dataDashboardItem, dataItem, dataFieldObservable) {
    if (dataItem.name()) {
        return dataItem.name();
    }
    var dataField = dataFieldObservable();
    if (dataField) {
        return computeDataItemDisplayName(dataDashboardItem, dataItem, dataField);
    }
    else {
        return guessDataItemDisplayName(dataDashboardItem, dataItem);
    }
}
function createKey(dataSourceName, queryName, dataMemberName) {
    return '__dx_displayNameCache_' + [dataSourceName, queryName, dataMemberName].join('_');
}
function guessDataItemDisplayName(dataDashboardItem, dataItem) {
    var dataMember = dataItem.dataMember();
    var isOlap = _data_field_1.DataField.isOlap(dataMember);
    if (isOlap) {
        var parts = dataMember.split(_data_field_1.DataField.olapMarker());
        var length = parts.length - 1;
        return parts[length].substr(0, parts[length].length - 1);
    }
    else if (dataItem instanceof measure_1.Measure) {
        return _getMeasureDisplayName(dataDashboardItem, dataItem, dataMember);
    }
    else if (dataItem instanceof dimension_1.Dimension) {
        let timeGroupInterval = dataItem.dateTimeGroupInterval();
        let postfix = timeGroupInterval !== 'Year' && timeGroupInterval !== 'None' ?
            ' (' + _default_1.getLocalizationById(_dimension_1.dateTimeGroupIntervalsDict[timeGroupInterval]) + ')' : '';
        return dataMember + postfix;
    }
    else {
        return dataMember;
    }
}
function computeDataItemDisplayName(dataDashboardItem, dataItem, dataField) {
    var displayName = dataField.displayName();
    var isOlap = _data_field_1.DataField.isOlap(dataItem.dataMember());
    if (isOlap) {
        return displayName;
    }
    else if (dataItem instanceof measure_1.Measure) {
        return _getMeasureDisplayName(dataDashboardItem, dataItem, displayName, dataField.isAggregate && dataField.isAggregate() || false);
    }
    else if (dataItem instanceof dimension_1.Dimension) {
        let timeGroupInterval = dataItem.dateTimeGroupInterval();
        if (_data_field_1.IsDateTime(dataField.fieldType()) && timeGroupInterval !== 'None') {
            return displayName + ' (' + _default_1.getLocalizationById(_dimension_1.dateTimeGroupIntervalsDict[timeGroupInterval]) + ')';
        }
        else {
            return displayName;
        }
    }
    else {
        return displayName;
    }
}
function _getMeasureDisplayName(dataDashboardItem, measure, dataMemberDisplayName, isAggregate = false) {
    if (dataDashboardItem._isAttribute(measure)) {
        return dataMemberDisplayName;
    }
    if (!!measure.expression()) {
        return _default_1.getLocalizationById('DashboardWebStringId.Calculations.Expression');
    }
    let prefix = !!measure.calculation.calculation() && _default_1.getLocalizationById(measure.calculation.calculation().name);
    let postfix = isAggregate ? '' : ' (' + _default_1.getLocalizationById(_measure_1.summaryTypeDict[measure.summaryType()]) + ')';
    return ((prefix && (prefix + ' ')) || '') + dataMemberDisplayName + postfix;
}


/***/ }),

/***/ 28768:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getAceTheme = void 0;
const _dx_devextreme_themes_integration_1 = __webpack_require__(83257);
var getAceTheme = () => _dx_devextreme_themes_integration_1.getBaseColorScheme() === 'light' ? 'ace/theme/dreamweaver' : 'ace/theme/ambiance';
exports.getAceTheme = getAceTheme;


/***/ }),

/***/ 7014:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createDataMemberInfo = void 0;
const ko = __webpack_require__(71032);
const data_item_1 = __webpack_require__(44650);
const olap_data_source_1 = __webpack_require__(40755);
function createDataMemberInfo(field, dataSource) {
    let dataMemberInfo = {
        name: dataSource instanceof olap_data_source_1.OlapDataSource ? field.dataMember() : field.name(),
        displayName: ko.unwrap(field.displayName),
        isList: !field.isDataFieldNode(),
        specifics: field.isDataFieldNode() ? field.fieldType && data_item_1.DataItem.typesMap[field.fieldType()] || 'Default' :
            field.isDataSourceNode && field.isDataSourceNode() ||
                field.isDataTableNode && field.isDataTableNode() ||
                field.isExpressionsNode && field.isExpressionsNode() ||
                field.isList && field.isList() ? 'List' :
                'Default',
    };
    return Object.assign(Object.assign({}, dataMemberInfo), { hasItems: !field.isDataFieldNode(), field: field });
}
exports.createDataMemberInfo = createDataMemberInfo;


/***/ }),

/***/ 1628:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._customizeTabs = void 0;
const custom_properties_metadata_1 = __webpack_require__(16318);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const CustomTabOrderNo = 500000;
function _customizeTabs(tabs, customSectionOption, object) {
    customSectionOption.items.forEach(item => {
        if (item.dataField && !custom_properties_metadata_1._customMetadataContainsProperty(item.dataField) && !object.customProperties._isKnownProperty(item.dataField)) {
            console.warn(`You cannot create an editor for the '${item.dataField}' because the custom property with this name is not registered. First, pass the corresponding custom property options to the registerCustomProperty method.`);
        }
    });
    if (customSectionOption.items.some(formOption => !!object.customProperties._isKnownProperty(formOption.dataField))) {
        let wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: object.customProperties,
            properties: customSectionOption.items.map(formItem => {
                return {
                    propertyName: formItem.dataField,
                    dxFormItem: formItem
                };
            })
        });
        wrapper.onContentReady = customSectionOption.onContentReady;
        wrapper.onInitialized = customSectionOption.onInitialized;
        wrapper.onFieldDataChanged = customSectionOption.onFieldDataChanged;
        var tab = new _accordion_tab_1.AccordionTab(customSectionOption.title, customSectionOption.title, wrapper);
        tab.orderNo = CustomTabOrderNo;
        tabs.push(tab);
    }
}
exports._customizeTabs = _customizeTabs;


/***/ }),

/***/ 36765:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
ko.components.register('dx-dashboard-button-group', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            var options = {
                keyExpr: 'value',
                width: '100%',
                items: ko.unwrap(params.values).map(function (val) { return { value: val.value, text: _default_1.getLocalizationById(val.displayValue) }; }),
                onItemClick: function (e) { params.value(e.itemData.value); },
                disabled: params.disabled,
                selectedItemKeys: [ko.unwrap(params.value.peek())]
            };
            return options;
        }
    },
    template: { element: 'dx-dashboard-button-group-template' }
});
ko.components.register('dx-dashboard-checked-button', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            let key = 'key';
            var options = {
                elementAttr: { class: params.icon ? 'dx-dashboard-button-with-icon' : undefined },
                keyExpr: 'key',
                width: '100%',
                items: ko.computed(() => {
                    var template = ko.unwrap(params.template);
                    var icon = ko.unwrap(params.icon);
                    if (!template && icon) {
                        template = '<svg><use xlink:href=#' + icon + '></use></svg>';
                    }
                    return [{
                            key: key,
                            disabled: ko.unwrap(params.disabled),
                            hint: ko.unwrap(params.hint),
                            text: ko.unwrap(params.text),
                            template: template
                        }];
                }),
                onItemClick: params.click,
                disabled: params.disabled,
                selectedItemKeys: ko.computed(() => ko.unwrap(params.isSelected) ? [key] : []),
            };
            if (params.isSelected === false) {
                options.onSelectionChanged = (e) => {
                    e.component.option('selectedItemKeys', []);
                };
            }
            return options;
        }
    },
    template: { element: 'dx-dashboard-button-group-template' }
});


/***/ }),

/***/ 10571:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CalcFieldEditorViewModel = exports.CalcFieldEditor = void 0;
const ko = __webpack_require__(71032);
const _data_source_browser_1 = __webpack_require__(9970);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const calculated_field_1 = __webpack_require__(53955);
const ef_data_source_1 = __webpack_require__(69468);
const federation_data_source_1 = __webpack_require__(71010);
const _calculated_field_1 = __webpack_require__(6070);
const mongodb_data_source_1 = __webpack_require__(62410);
const sql_data_source_1 = __webpack_require__(66265);
const _helper_classes_1 = __webpack_require__(8384);
const _base_metadata_1 = __webpack_require__(17916);
const _expression_editor_display_name_provider_1 = __webpack_require__(87953);
const _expression_editor_item_provider_1 = __webpack_require__(14531);
class CalcFieldEditor {
    constructor(dataSourceBrowser) {
        this.dataSourceBrowser = dataSourceBrowser;
        this.viewModel = ko.observable(null);
    }
    canAddCalculatedField(dataSourceName) {
        var dataSource = this.dataSourceBrowser.findDataSource(dataSourceName);
        if (dataSource && dataSource.hasCalculatedFields) {
            if (dataSource instanceof sql_data_source_1.SqlDataSource) {
                return dataSource.queries().length > 0;
            }
            else if (dataSource instanceof ef_data_source_1.EFDataSource) {
                return dataSource._tables().length > 0;
            }
            else if (dataSource instanceof federation_data_source_1.FederationDataSource) {
                return dataSource.queries().length > 0;
            }
            else if (dataSource instanceof mongodb_data_source_1.MongoDBDataSource) {
                return dataSource.queries().length > 0;
            }
            return !!dataSource;
        }
        else {
            return false;
        }
    }
    showAddDialog(dataSourceName, dataMemberName) {
        var def = _jquery_helpers_1.createJQueryDeferred();
        if (this.canAddCalculatedField) {
            var dataSourceInstance = this.dataSourceBrowser.findDataSource(dataSourceName);
            var newCalculatedFieldName = _helper_classes_1.NameGenerator.generateName(_default_1.getLocalizationById('DashboardStringId.NewCalculatedFieldNamePrefix') + ' ', dataSourceInstance.calculatedFields(), 'name', 1);
            var newCalculatedField = new calculated_field_1.CalculatedField({ '@Name': newCalculatedFieldName, '@DataMember': dataMemberName, '@DataType': 'Auto' });
            this.show(newCalculatedField, dataSourceName, dataMemberName).then(calcField => def.resolve(calcField), calcField => def.reject(calcField));
        }
        else {
            def.reject();
        }
        return def.promise();
    }
    showEditDialog(calculatedField, dataSourceName, dataMemberName) {
        return this.show(calculatedField, dataSourceName, dataMemberName);
    }
    removeCalcField(calculatedField, dataSourceName) {
        var dataSourceInstance = this.dataSourceBrowser.findDataSource(dataSourceName);
        var dataMemberName = calculatedField.dataMember();
        var pathInCache = [dataSourceName].concat(dataMemberName ? [dataMemberName] : []);
        this.dataSourceBrowser.clearFieldsCache(pathInCache.join('.'));
        dataSourceInstance.calculatedFields.remove(calculatedField);
        return _jquery_helpers_1.createJQueryDeferred().resolve(calculatedField).promise();
    }
    show(calculatedField, dataSourceName, dataMemberName) {
        var def = _jquery_helpers_1.createJQueryDeferred();
        var pathInCache = [dataSourceName].concat(dataMemberName ? [dataMemberName] : []);
        this.viewModel(new CalcFieldEditorViewModel(calculatedField, this.dataSourceBrowser, dataSourceName, calcField => {
            let dsi = this.dataSourceBrowser.findDataSource(dataSourceName);
            if (dsi && dsi.calculatedFields.indexOf(calcField) === -1) {
                dsi.calculatedFields.push(calcField);
            }
            def.resolve(calcField);
        }, () => this.dataSourceBrowser.clearFieldsCache(pathInCache.join('.'))));
        return def.promise();
    }
}
exports.CalcFieldEditor = CalcFieldEditor;
class CalcFieldEditorViewModel {
    constructor(calculatedField, dataSourceBrowser, dataSourceName, onSave, onBeforeSave) {
        this.toolbarItems = [];
        this.isCalcFieldNameValid = ko.observable(true);
        this.popupVisible = ko.observable(true);
        var dataSource = dataSourceBrowser.findDataSource(dataSourceName);
        this.getInfo = () => {
            return [_base_metadata_1.name, _calculated_field_1.calculatedFieldType, _calculated_field_1.calcFieldExpressionEditable];
        };
        this.nameValidationRules = [{
                type: 'required'
            }, {
                type: 'custom',
                validationCallback: (params) => {
                    var previousParams = false;
                    let dataSource = dataSourceBrowser.findDataSource(dataSourceName);
                    let dataMembers = [''];
                    if (dataSource instanceof sql_data_source_1.SqlDataSource) {
                        dataMembers = dataSource.queries().map(dm => dm.name());
                    }
                    else if (dataSource instanceof ef_data_source_1.EFDataSource) {
                        dataMembers = dataSource._tables().map(dm => dm.name());
                    }
                    else if (dataSource instanceof federation_data_source_1.FederationDataSource) {
                        dataMembers = dataSource.queries().map(dm => dm.alias());
                    }
                    else if (dataSource instanceof mongodb_data_source_1.MongoDBDataSource) {
                        dataMembers = dataSource.queries().map(dm => dm._actualName());
                    }
                    let promises = dataMembers.map(dataMember => dataSourceBrowser.findDataField(dataSourceName, dataMember, params.value));
                    _jquery_helpers_1.jqueryWhen(...promises).done((...fields) => {
                        previousParams = true;
                        params.rule.isValid = fields.reduce((result, curField) => { return result && !curField; }, true);
                        params.validator.validate();
                    });
                    if (previousParams)
                        return params.rule.isValid;
                    return false;
                },
                message: _default_1.getLocalizationById('DashboardWebStringId.DataSources.CalculatedField.UniqueNameError')
            }];
        this.calculatedField = calculatedField;
        this.dataMember = ko.observable(calculatedField.dataMember());
        this.fieldType = ko.observable(calculatedField.fieldType());
        this.availableTypes = Object.keys(_calculated_field_1.calculatedFieldType.values);
        this.name = ko.observable(calculatedField.name());
        this.expression = ko.observable(calculatedField.expression());
        this.expressionEditable = {
            value: this.expression,
            path: ko.observable(calculatedField.dataMember() ? [dataSourceName, calculatedField.dataMember()].join('.') : dataSourceName),
            fieldName: calculatedField.name,
            patchFieldName: (fieldPath) => _data_source_browser_1.patchCalcFieldPath(dataSource, calculatedField, fieldPath),
            isValid: ko.observable(true),
            customizeCategories: (sender, categories, dblclick) => {
                var treeList = categories[0].content.data.fields().treeListController;
                var putSelectionHandlerBase = treeList.putSelectionHandler;
                treeList.putSelectionHandler = (data, element) => {
                    if (!data.data.isList) {
                        putSelectionHandlerBase.call(treeList, data, element);
                    }
                };
            }
        };
        this.itemsProvider = new _expression_editor_item_provider_1.ExpressionEditorItemsProvider(dataSourceBrowser, dataSourceBrowser, dataSourceBrowser.parameters && dataSourceBrowser.parameters(), ko.pureComputed(() => dataSourceName), calculatedField.dataMember);
        this.displayNameProvider = _expression_editor_display_name_provider_1.ExpressionEditorDisplayNameProvider.create(dataSourceBrowser, dataSourceBrowser, dataSourceName, calculatedField.dataMember());
        this.saveHandler = ko.observable();
        var saveHandler = (sender) => {
            this.saveHandler()(() => {
                onBeforeSave && onBeforeSave();
                calculatedField.expression(this.expression());
                calculatedField.name(this.name());
                calculatedField.fieldType(this.fieldType());
                onSave && onSave(calculatedField);
                this.popupVisible(false);
            });
        };
        this.toolbarItems = [
            {
                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                    text: _default_1.getLocalizationById('DashboardWebStringId.DashboardMenuSave'),
                    onClick: saveHandler,
                    disabled: ko.computed(() => !this.isCalcFieldNameValid()),
                    type: 'default'
                }
            },
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.Cancel'), onClick: () => this.popupVisible(false) } }
        ];
        this.popupVisible(true);
    }
}
exports.CalcFieldEditorViewModel = CalcFieldEditorViewModel;


/***/ }),

/***/ 76643:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExpressionEditorWrapper = exports.CalculationExpressionEditor = void 0;
const ko = __webpack_require__(71032);
const _expression_editor_1 = __webpack_require__(28570);
const _expression_editor_functions_1 = __webpack_require__(32615);
class CalculationExpressionEditor {
    constructor(params) {
        this.params = params;
        this.editorTemplate = 'dx-dashboard-calculation-expression-editor';
        this.editor = new ExpressionEditorWrapper(params);
        this.criteriaString = ko.computed(() => {
            var criteria = params.options().value();
            return criteria;
        });
    }
    edit() {
        this.editor.show();
    }
    remove() {
        this.params.options().value(null);
    }
}
exports.CalculationExpressionEditor = CalculationExpressionEditor;
class ExpressionEditorWrapper {
    constructor(params) {
        this.params = params;
        this.viewModel = ko.observable();
    }
    show() {
        if (this.viewModel()) {
            this.viewModel().dispose();
        }
        var expressionEditorOptions = this.params.options();
        expressionEditorOptions.functions = _expression_editor_functions_1.getExpressionEditorFunctions();
        var editor = new _expression_editor_1.DashboardExpressionEditor(expressionEditorOptions, this.params.fieldListProvider, this.params.displayNameProvider);
        editor.textAreaValue(expressionEditorOptions.value());
        editor.popupVisible(true);
        this.viewModel(editor);
    }
}
exports.ExpressionEditorWrapper = ExpressionEditorWrapper;


/***/ }),

/***/ 14104:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.windowDefinitionEditor = exports.WindowDefinitionEditor = exports.WindowDefinitionMode = void 0;
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const data_item_1 = __webpack_require__(44650);
const specific_calc_window_definition_1 = __webpack_require__(31615);
const _undo_engine_helper_1 = __webpack_require__(2908);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _display_name_provider_1 = __webpack_require__(8464);
var WindowDefinitionMode;
(function (WindowDefinitionMode) {
    WindowDefinitionMode[WindowDefinitionMode["Predefined"] = 0] = "Predefined";
    WindowDefinitionMode[WindowDefinitionMode["Specific"] = 1] = "Specific";
})(WindowDefinitionMode = exports.WindowDefinitionMode || (exports.WindowDefinitionMode = {}));
class WindowDefinitionEditor {
    constructor(windowDefinition, _params) {
        this._params = _params;
        this.mode = ko.observable(null);
        this.value = windowDefinition.windowDefinition;
        if (this.value() instanceof specific_calc_window_definition_1.SpecificWindowDefinition) {
            this.mode(WindowDefinitionMode.Specific);
            let definition = this.value();
            definition._dimensionsInfoPatcher = WindowDefinitionEditor.createPatchSpecificWindowDimensionsInfo(definition, _params.dataDashboardItem, _params.dataSourceBrowser);
        }
        else {
            this.mode(WindowDefinitionMode.Predefined);
        }
        this.mode.subscribe(this.setValue, this);
        this.formAdapterWrapper = ko.pureComputed(() => {
            if (this.value()) {
                return new _object_properties_wrapper_1.ObjectPropertiesWrapper({ model: this.value(), properties: this.value().getInfo() });
            }
        });
    }
    get dataSource() {
        return [
            { value: WindowDefinitionMode.Predefined, displayValue: 'DashboardWebStringId.Calculations.WindowDefinitionModePredefined' },
            { value: WindowDefinitionMode.Specific, displayValue: 'DashboardWebStringId.Calculations.WindowDefinitionModeSpecific' }
        ];
    }
    setValue(newMode) {
        if (newMode === WindowDefinitionMode.Predefined) {
            this.value(this._params.dataDashboardItem._getDefaultCalculationWindowDefinition());
        }
        else {
            var windowDefinition = new specific_calc_window_definition_1.SpecificWindowDefinition();
            windowDefinition._dimensionsInfoPatcher = WindowDefinitionEditor.createPatchSpecificWindowDimensionsInfo(windowDefinition, this._params.dataDashboardItem, this._params.dataSourceBrowser);
            this.value(windowDefinition);
        }
    }
}
WindowDefinitionEditor.createPatchSpecificWindowDimensionsInfo = (definition, dataDashboardItem, dataSourceBrowser) => (propertyInfo) => {
    var lookupValueFromDimension = (d) => {
        return {
            value: d.uniqueName(),
            displayValue: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dataDashboardItem, d)
        };
    };
    var allDimensions = dataDashboardItem._dimensions.map(lookupValueFromDimension);
    var getAvailableDimensions = () => {
        return dataDashboardItem._dimensions
            .filter(d => !definition.dimensions().some(wd => wd.uniqueName() === d.uniqueName()))
            .map(lookupValueFromDimension);
    };
    const editorOptions = {
        dataFields: ['uniqueName'],
        gridColumns: [{
                dataField: 'uniqueName',
                lookup: {
                    displayExpr: 'displayValue',
                    valueExpr: 'value',
                },
                calculateDisplayValue: (gridRow) => {
                    const dimension = allDimensions.filter(d => d.value === gridRow.uniqueName)[0];
                    return dimension && dimension.displayValue || gridRow.uniqueName;
                }
            }],
        enableAddItem: () => !!getAvailableDimensions().length,
        noDataText: 'DashboardWebStringId.CollectionEditor.NoItems',
        createNewItemHandler: () => {
            if (getAvailableDimensions().length > 0) {
                return new data_item_1.DataItemLink(dataDashboardItem, { '@DefaultId': getAvailableDimensions()[0].value });
            }
        },
        customizeInlineEditor: (e) => {
            const uniqueName = e.row && e.row.data && e.row.data.uniqueName;
            const availableDimensions = getAvailableDimensions();
            if (availableDimensions.filter(d => d.value === uniqueName).length) {
                e.editorOptions.dataSource = availableDimensions;
            }
            else {
                e.editorOptions.dataSource = allDimensions
                    .filter(d => d.value === uniqueName)
                    .concat(availableDimensions);
            }
        },
    };
    return Object.assign(Object.assign({}, propertyInfo), { formAdapterItem: _form_adapter_editors_1.inlineEditCollectionEditor(editorOptions) });
};
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], WindowDefinitionEditor.prototype, "setValue", null);
exports.WindowDefinitionEditor = WindowDefinitionEditor;
const windowDefinitionEditor = params => context => {
    return {
        template: (args, itemElement) => {
            const windowDefinition = args.component.option('formData')[args.dataField];
            var viewModel = new WindowDefinitionEditor(windowDefinition, params);
            ko.applyBindingsToNode(_jquery_helpers_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-window-definition-editor', data: viewModel } }, context.bindingContext);
        }
    };
};
exports.windowDefinitionEditor = windowDefinitionEditor;


/***/ }),

/***/ 47160:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CalculationSurface = void 0;
const ko = __webpack_require__(71032);
const _calculation_properties_composer_1 = __webpack_require__(82992);
class CalculationSurface {
    constructor(model, measure, dashboardItem, dataSourceBrowser, propertiesController) {
        this.model = model;
        this.measure = measure;
        this.dashboardItem = dashboardItem;
        this.dataSourceBrowser = dataSourceBrowser;
        this.propertiesController = propertiesController;
        this._disposables = [];
        this.propertiesTabs = ko.observableArray([]);
    }
    updatePropertiesTabs() {
        var composer = new _calculation_properties_composer_1.CalculationPropertiesComposer();
        var tabs = composer.composeTabs(this.measure, {
            dashboardItem: this.dashboardItem,
            dataSourceBrowser: this.dataSourceBrowser
        });
        this.propertiesTabs(tabs);
        this.propertiesController.secondaryModel({
            displayText: this.model.title,
            data: this
        });
        this.propertiesController.secondarySelectedIndex(0);
    }
    startEditing(args) {
        args.createImmediately = false;
        this.updatePropertiesTabs();
    }
    dispose() {
        this._disposables.forEach((d) => {
            d.dispose();
        });
    }
}
exports.CalculationSurface = CalculationSurface;


/***/ }),

/***/ 34765:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardColorSchemeEditorExtension = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const control_options_1 = __webpack_require__(82560);
const _default_1 = __webpack_require__(65855);
const color_1 = __webpack_require__(78224);
const _dimension_1 = __webpack_require__(47557);
const _coloring_options_1 = __webpack_require__(73498);
const _dashboard_item_coloring_options_1 = __webpack_require__(9309);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const toolbox_items_1 = __webpack_require__(29608);
const _display_name_provider_1 = __webpack_require__(8464);
const _color_picker_model_1 = __webpack_require__(4785);
const _color_scheme_model_1 = __webpack_require__(36220);
const _color_tree_view_model_1 = __webpack_require__(71366);
const _entry_editor_model_1 = __webpack_require__(96635);
var name = 'dashboard-color-scheme-editor';
var nameAlias = 'dashboardColorSchemeEditor';
class DashboardColorSchemeEditorExtension {
    constructor(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._subscriptions = [];
        this.selected = ko.observable(false);
        this._colorSchemeModel = ko.observable();
        this._colorPalette = ko.observableArray();
        this._entryEditorModel = new _entry_editor_model_1.EntryEditorViewModel(this._colorPalette);
        this._colorPickerModel = ko.computed(() => new _color_picker_model_1.ColorPickerModel(this._colorSchemeModel(), this._colorPalette));
        this._selectedEntry = ko.observable();
        this._createNewEntry = () => {
            this._colorSchemeModel().initNewEntry();
            this._entryEditorModel.editEntry(this.dataSourceBrowserExtension._dataSourceBrowserViewModel().dataSourceBrowser, this._colorSchemeModel().newEntry(), this._colorSchemeModel().selectedSignatures()[0].colorByMeasures, this._colorSchemeModel().getAvailableMeasureKeys(), editedEntry => this._colorSchemeModel().updateEntry(undefined, editedEntry), false);
        };
        this._menuItem = new toolbox_items_1.DashboardMenuItem(this.name, 'DashboardWebStringId.DashboardMenuColorScheme', 250, 0);
        this._menuItem.template = 'dx-dashboard-form-color-scheme';
        this._menuItem.data = {
            colorSchemeModel: this._colorSchemeModel,
            selectedEntry: this._selectedEntry,
            entryEditorModel: this._entryEditorModel,
            colorPickerModel: this._colorPickerModel,
            createNewEntry: this._createNewEntry,
            colorPalette: this._colorPalette,
            getDataSourceName: (dataSourceId) => {
                if (this.dashboardControl.dashboard() && this.dashboardControl.dashboard().dataSources()) {
                    let dataSource = this.dashboardControl.dashboard().dataSources().filter(dataSource => dataSource.componentName() === dataSourceId)[0];
                    if (dataSource)
                        return dataSource.name();
                }
                return dataSourceId;
            }
        };
        this._menuItem.disabled = ko.computed(() => !dashboardControl.dashboard());
    }
    static _isColoringSupported(item) {
        return !!item['coloringOptions'];
    }
    _updateExtensionModel() {
        if (!!this.dashboardControl.dashboard() && this.dashboardControl.isDesignMode()) {
            !!this.dashboardControl._serviceClient() && this.dashboardControl._serviceClient().getDashboardPalette().done(palette => {
                this._colorPalette(analytics_utils_1.deserializeArray(palette, (colorModel) => new color_1.Color(colorModel['#text']))());
            });
            this._colorSchemeModel(new _color_scheme_model_1.ColorSchemeModel(this.dashboardControl.dashboard(), this.dashboardControl._serviceClient() && this.dashboardControl._serviceClient().getColoringScheme || null, this.dashboardControl._updateHub));
        }
        else {
            this._colorSchemeModel(null);
        }
    }
    start() {
        this._propertiesPanelExtension = this.dashboardControl.findExtension('item-options-panel');
        this.dataSourceBrowserExtension = this.dashboardControl.findExtension('data-source-browser');
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.push(this._menuItem);
        }
        this._subscriptions.push(this.dashboardControl.dashboard.subscribe(this._updateExtensionModel, this));
        this._subscriptions.push(this.dashboardControl.isDesignMode.subscribe(this._updateExtensionModel, this));
        this._subscriptions.push(this._selectedEntry.subscribe((entry) => {
            if (entry == null) {
                this._entryEditorModel.close();
            }
            else {
                this._entryEditorModel.editEntry(this.dataSourceBrowserExtension._dataSourceBrowserViewModel().dataSourceBrowser, entry, this._colorSchemeModel().selectedSignatures()[0].colorByMeasures, this._colorSchemeModel().getAvailableMeasureKeys(), editedEntry => this._colorSchemeModel().updateEntry(entry, editedEntry), this._colorSchemeModel().isEntryAutogenerated(entry));
            }
        }));
        ko.computed(() => {
            var model = this._colorSchemeModel();
            if (model) {
                this._subscriptions.push(model.selectedSignatures.subscribe(v => {
                    this._entryEditorModel.close();
                    model.newEntry(null);
                }));
            }
        });
        var oldColoringComputed = null;
        if (!!this._propertiesPanelExtension) {
            this._subscriptions.push(this._propertiesPanelExtension._subscribeTabsChanged(tabs => {
                oldColoringComputed && oldColoringComputed.dispose();
                var item = this.dashboardControl._actualLayoutController() && this.dashboardControl._actualLayoutController().selectedDashboardItem() || null;
                if (item && DashboardColorSchemeEditorExtension._isColoringSupported(item)) {
                    var coloringTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ColoringOptions, 'DashboardWebStringId.ColoringOptions');
                    tabs.push(coloringTab);
                    oldColoringComputed = ko.computed(() => {
                        coloringTab.tabModel(this._getColoringWrapper(item));
                    });
                    this._subscriptions.push(oldColoringComputed);
                    tabs.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ColorScheme, 'DashboardWebStringId.DashboardMenuColorScheme', this._getColorSchemeWrapper(item)));
                }
            }));
        }
        this._updateExtensionModel();
    }
    stop() {
        this._subscriptions.forEach(s => s.dispose());
        this._subscriptions = [];
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.remove(this._menuItem);
        }
    }
    _getColorSchemeWrapper(model) {
        ko.computed(() => {
            if (!!this._colorSchemeModel())
                this._colorSchemeModel().selectedSignatures([model._getColoringSignatureOnCurrentDrillDownLevel()]);
        });
        var artificialModel = {
            colorSchemeModel: this._colorSchemeModel(),
            coloringOptions: model.coloringOptions
        };
        var properties = [{
                propertyName: 'colorSchemeModel',
                formAdapterItem: _color_tree_view_model_1.colorSchemeTreeViewEditor({
                    dataSource: this._colorSchemeModel().selectedSignatureEntries,
                    editColor: (entry, event) => {
                        this._colorPickerModel().init(entry, event.target);
                    },
                    colorPalette: this._colorPalette,
                    colorPickerModel: this._colorPickerModel,
                }),
            }, {
                container: _coloring_options_1.coloringOptions,
                properties: [_dashboard_item_coloring_options_1.useGlobalColors]
            }];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: artificialModel,
            properties: properties
        });
    }
    _getColoringWrapper(model) {
        var allColorsModel = {
            measuresColoringMode: model.coloringOptions.measuresColoringMode,
            getInfo: () => []
        };
        var properties = [];
        var addColoringOptions = (item, arr, prefixId) => {
            var prefix = _default_1.getLocalizationById(prefixId);
            arr.forEach(arg => {
                if (arg.dataItem()) {
                    allColorsModel[arg.uniqueName()] = arg.dataItem().coloringMode;
                    properties.push({
                        propertyName: arg.uniqueName(),
                        displayName: prefix + ' - ' + _display_name_provider_1.getDataItemDisplayName(this.dashboardControl._dataSourceBrowser, item, arg.dataItem()),
                        simpleFormAdapterItem: 'buttonGroupEditor',
                        values: _dimension_1.coloringMode.values
                    });
                }
            });
        };
        var addItemColoringOptions = (itemsInfo) => {
            itemsInfo.forEach(itemInfo => addColoringOptions(model, itemInfo.items, itemInfo.prefixId));
        };
        addItemColoringOptions(model._getColorizableDataItemsInfo());
        if (model._canColorByMeasures) {
            properties.push(_dashboard_item_coloring_options_1.measuresColoringMode);
        }
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: allColorsModel,
            properties: properties
        });
    }
}
exports.DashboardColorSchemeEditorExtension = DashboardColorSchemeEditorExtension;
control_options_1.designerExtensions[name] = (dashboardControl, options) => new DashboardColorSchemeEditorExtension(dashboardControl);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 4785:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColorPickerModel = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const color_1 = __webpack_require__(78224);
const color_scheme_entry_1 = __webpack_require__(68800);
class ColorPickerModel {
    constructor(colorSchemeModel, colorPalette) {
        this.colorSchemeModel = colorSchemeModel;
        this.colorPalette = colorPalette;
        this.target = ko.observable();
        this.visible = ko.observable();
        this.colorCss = ko.observable('');
        this.confirm = () => {
            this.entry.paletteIndex(null);
            this.entry.color(color_1.Color.fromRgbaString(this.colorCss()));
            if (this.entry instanceof color_scheme_entry_1.AutoColorSchemeEntry) {
                var newEntry = this.entry.clone();
                this.colorSchemeModel.updateEntry(this.entry, newEntry);
            }
            this.visible(false);
        };
        this.buttonItems = ko.observableArray([
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: _default_1.getLocalizationById('DashboardWebStringId.ButtonConfirm'), onClick: this.confirm } },
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: _default_1.getLocalizationById('DashboardStringId.ButtonCancel'), onClick: () => this.visible(false) } }
        ]);
    }
    init(entry, target) {
        this.entry = entry;
        let color = entry.paletteIndex() === null ? entry.color() : this.colorPalette()[entry.paletteIndex()];
        this.colorCss(color ? color.css : '');
        this.target(target);
        this.visible(true);
    }
}
exports.ColorPickerModel = ColorPickerModel;


/***/ }),

/***/ 78340:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColorSchemeEntryCreator = void 0;
const analytics_criteria_1 = __webpack_require__(16835);
const analytics_criteria_utils_1 = __webpack_require__(26484);
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const color_scheme_entry_1 = __webpack_require__(68800);
const dimension_key_1 = __webpack_require__(74425);
const measure_definition_1 = __webpack_require__(59958);
const _dimension_definition_1 = __webpack_require__(52817);
const calculation_1 = __webpack_require__(9237);
const dimension_1 = __webpack_require__(48336);
const window_definition_1 = __webpack_require__(23810);
const _expression_utils_1 = __webpack_require__(79537);
class ColorSchemeEntryCreator {
    constructor() {
        this._entry = new color_scheme_entry_1.ColorSchemeEntry({});
    }
    static createMeasureKey(dataMember, summaryType) {
        var measureDefinition = new measure_definition_1.MeasureDefinition({ '@ItemType': 'Definition' });
        measureDefinition.dataMember(dataMember);
        measureDefinition.summaryType(summaryType);
        return measureDefinition;
    }
    static createMeasureDefinitionFromMeasure(measure, otherDataItems) {
        var measureDefinition = new measure_definition_1.MeasureDefinition({ '@ItemType': 'Definition' });
        var serializer = new analytics_utils_1.ModelSerializer();
        var calculationClone = new calculation_1.Calculation(serializer.serialize(measure.calculation));
        var windowDefinitionJson = serializer.serialize(measure.windowDefinition);
        var windowDefinitionClone = new window_definition_1.WindowDefinition(windowDefinitionJson);
        measureDefinition.dataMember(measure.dataMember());
        measureDefinition.summaryType(measure.summaryType());
        measureDefinition.calculation.calculation(calculationClone.calculation());
        measureDefinition.calculation.calculationType(calculationClone.calculationType());
        measureDefinition.expression(measure.expression());
        measureDefinition.windowDefinition.windowDefinition(windowDefinitionClone.windowDefinition());
        measureDefinition.windowDefinition.windowDefinitionType(windowDefinitionClone.windowDefinitionType());
        let filterString = measure.filterString();
        measureDefinition.filterString(filterString);
        if (filterString && otherDataItems && otherDataItems.length > 0) {
            let filterCriteria = _expression_utils_1.getFilterCriteria(filterString);
            let dimensions = [];
            analytics_criteria_utils_1.criteriaForEach(filterCriteria, op => {
                if (op instanceof analytics_criteria_1.OperandProperty) {
                    let prop = op;
                    let dataItem = otherDataItems.filter(di => di.uniqueName() === prop.propertyName)[0];
                    if (dataItem instanceof dimension_1.Dimension) {
                        dimensions.push(this.createDimensionDefinitionFromDimension(dataItem));
                    }
                }
            });
            measureDefinition.definitions(dimensions);
        }
        return measureDefinition;
    }
    static createDimensionDefinitionFromDimension(dimension) {
        var dimensionDefinition = new _dimension_definition_1.DimensionDefinition();
        dimensionDefinition.dataMember = dimension.dataMember;
        dimensionDefinition.dateTimeGroupInterval = dimension.dateTimeGroupInterval;
        return dimensionDefinition;
    }
    static createMeasureDefinitionCopy(measureKey) {
        var serializer = new analytics_utils_1.ModelSerializer();
        return new measure_definition_1.MeasureDefinition(serializer.serialize(measureKey));
    }
    static createDimensionKey(dataMember, groupInterval, valueType, value) {
        var dimensionKey = new dimension_key_1.DimensionKey({ '@ItemType': 'DimensionKey' });
        dimensionKey.definition = {
            dataMember: ko.observable(dataMember),
            dateTimeGroupInterval: ko.observable(groupInterval)
        };
        dimensionKey.value = {
            value: ko.observable(value),
            type: ko.observable(valueType)
        };
        return dimensionKey;
    }
    addColor(color) {
        this._entry.color(color);
        return this;
    }
    addItemComponentName(name) {
        this._entry.itemComponentName = name;
        return this;
    }
    addPaletteIndex(paletteIndex) {
        this._entry.paletteIndex(paletteIndex);
        return this;
    }
    addDataSourceName(dataSourceName) {
        this._entry.dataSource(dataSourceName);
        return this;
    }
    addDataMemberName(dataMember) {
        this._entry.dataMember(dataMember);
        return this;
    }
    addMeasureKey(dataMember, summaryType) {
        this._entry.measureKeys.push(ColorSchemeEntryCreator.createMeasureKey(dataMember, summaryType));
        return this;
    }
    addDimensionKey(dataMember, groupInterval, valueType, value) {
        this._entry.dimensionKeys.push(ColorSchemeEntryCreator.createDimensionKey(dataMember, groupInterval, valueType, value));
        return this;
    }
    getEntry() {
        return this._entry;
    }
}
exports.ColorSchemeEntryCreator = ColorSchemeEntryCreator;


/***/ }),

/***/ 36220:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColorSchemeModel = exports.ItemColorScheme = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const $ = __webpack_require__(65311);
const ko = __webpack_require__(71032);
const _utils_1 = __webpack_require__(7590);
const color_1 = __webpack_require__(78224);
const color_scheme_entry_1 = __webpack_require__(68800);
const disposable_object_1 = __webpack_require__(99253);
const _array_utils_1 = __webpack_require__(60618);
const _knockout_utils_1 = __webpack_require__(4437);
const data_dashboard_item_1 = __webpack_require__(70355);
const _base_metadata_1 = __webpack_require__(17916);
const _color_scheme_entry_creator_1 = __webpack_require__(78340);
var measureDefinitionEqual = (key1, key2) => key1._id === key2._id;
function combineEntries(auto, custom) {
    var customEntries = custom.slice();
    var result = [];
    var dimensionValuesEqual = (value1, value2) => value1.value() === value2.value();
    return auto.map(autoEntry => {
        var foundCustom = customEntries.filter(customEntry => {
            return customEntry.definition.equals(autoEntry.definition) &&
                _array_utils_1.compareArrays(customEntry.dimensionKeys().map(key => key.value), autoEntry.dimensionKeys().map(key => key.value), dimensionValuesEqual) &&
                _array_utils_1.compareArrays(customEntry.measureKeys(), autoEntry.measureKeys(), measureDefinitionEqual);
        })[0];
        !!foundCustom && customEntries.splice(customEntries.indexOf(foundCustom), 1);
        return foundCustom || autoEntry;
    }).concat(customEntries);
}
class ItemColorScheme extends disposable_object_1.DisposableObject {
    constructor(item, _requestColorSchemeDelegate, _updateHub) {
        super();
        this.generatedEntries = ko.observableArray();
        this.componentName = '';
        this.name = '';
        if (item instanceof data_dashboard_item_1.DataDashboardItem) {
            this.componentName = item.componentName();
            this.name = item.name();
        }
        this.customEntries = item.colorScheme;
        this.allEntries = ko.computed(() => {
            return combineEntries(this.generatedEntries(), this.customEntries());
        });
        this.toDispose(this.allEntries);
        var update = _utils_1.debounce(() => {
            if (!this.disposed) {
                _requestColorSchemeDelegate(this.componentName).done(scheme => {
                    var coloringSchemeEntries = analytics_utils_1.deserializeArray(scheme, (item) => new color_scheme_entry_1.AutoColorSchemeEntry(item, null, this.componentName, this.name))();
                    this.generatedEntries(coloringSchemeEntries);
                });
            }
        }, 10);
        this.toDispose(this.customEntries.subscribe(update));
        var dashboardItemUpdated = (args) => {
            if ((args.category !== _base_metadata_1.PropertyCategory.ViewModel && args.category !== _base_metadata_1.PropertyCategory.NoUpdate)
                && item._colorableItems().indexOf(args.item) !== -1) {
                update();
            }
        };
        item._colorableItems.subscribe(update);
        _updateHub.dashboardItemPropertyChanged.add(dashboardItemUpdated);
        this.toDispose({ dispose: () => { _updateHub.dashboardItemPropertyChanged.remove(dashboardItemUpdated); } });
        update();
    }
}
exports.ItemColorScheme = ItemColorScheme;
function contains(array, item) {
    return array.some(element => element === item);
}
class ColorSchemeModel {
    constructor(dashboard, _requestColorSchemeDelegate, _updateHub) {
        this.dashboard = dashboard;
        this._requestColorSchemeDelegate = _requestColorSchemeDelegate;
        this._updateHub = _updateHub;
        this.isSignatureAutogenerated = (definition) => this.itemColorSchemes[definition.componentName].generatedEntries().some(entry => entry.definition.equals(definition));
        this.removeEntry = (entry) => {
            this.getScheme(entry.definition.componentName).remove(entry);
            this.newEntry(null);
        };
        this.removeTable = (definition) => {
            var scheme = this.getScheme(definition.componentName);
            scheme.removeAll(scheme().filter(entry => entry.definition.equals(definition)));
        };
        this.initNewEntry = () => {
            var entryCreator = new _color_scheme_entry_creator_1.ColorSchemeEntryCreator();
            var entryToClone = this.selectedSignatureEntries()[0];
            var defaultNames = this.generateDefaultNames(entryToClone);
            entryCreator.addItemComponentName(entryToClone.definition.componentName);
            entryCreator.addDataSourceName(entryToClone.definition.dataSource);
            entryCreator.addDataMemberName(entryToClone.definition.dataMember);
            entryToClone.dimensionKeys().map((key, index) => {
                entryCreator.addDimensionKey(key.definition.dataMember(), key.definition.dateTimeGroupInterval(), key.value.type(), defaultNames[index]);
            });
            entryCreator.addColor(color_1.Color.fromArgb(1, 0, 0, 0));
            this.newEntry(entryCreator.getEntry());
        };
        this.updateEntry = (entry, editedEntry) => {
            var entries = this.getScheme(editedEntry.definition.componentName);
            var oldEntryIndex = entry instanceof color_scheme_entry_1.AutoColorSchemeEntry ? -1 : entries().indexOf(entry);
            if (oldEntryIndex >= 0) {
                entries.splice(oldEntryIndex, 1);
            }
            if (entries().indexOf(editedEntry) === -1) {
                entries.push(editedEntry);
            }
            this.newEntry(null);
        };
        this.getAvailableMeasureKeys = () => {
            var result = [];
            var definition = this.selectedSignatureEntries().length > 0 ? this.selectedSignatureEntries()[0].definition : null;
            var itemId = definition.componentName;
            var addMeasureDefinition = function (measureDefinition) {
                if (!result.some(definition => measureDefinitionEqual(definition, measureDefinition)))
                    result.push(measureDefinition);
            };
            var items = this.dashboard._dataDashboardItems().
                filter(item => (!!itemId ? item.componentName() === itemId : item._isGloballyColored) &&
                definition.equals(item._getColoringSignature()));
            if (items.length > 0) {
                items.forEach(item => {
                    item._measures.forEach(measure => {
                        if (item._isColoringEnabled(measure)) {
                            addMeasureDefinition(_color_scheme_entry_creator_1.ColorSchemeEntryCreator.createMeasureDefinitionFromMeasure(measure, item.dataItems()));
                        }
                    });
                });
            }
            else {
                this.selectedSignatureEntries().forEach(entry => {
                    entry.measureKeys().forEach(measure => addMeasureDefinition(_color_scheme_entry_creator_1.ColorSchemeEntryCreator.createMeasureDefinitionCopy(measure)));
                });
            }
            return result;
        };
        this.selectedSignatures = ko.observable([]);
        this.itemColorSchemes = {};
        this.newEntry = ko.observable();
        this.itemColorSchemes[''] = new ItemColorScheme(dashboard, _requestColorSchemeDelegate, _updateHub);
        var localyColoredItems = ko.computed(() => dashboard._dataDashboardItems().filter(item => item._isLocallyColored));
        localyColoredItems().forEach(item => this.createItemColorScheme(item));
        _knockout_utils_1.subscribeWithPrev(localyColoredItems, (oldValues, newValues) => {
            var deleted = oldValues
                .filter(oldValue => !newValues.some(element => element === oldValue))
                .forEach(item => {
                this.itemColorSchemes[item.componentName()].dispose();
                delete this.itemColorSchemes[item.componentName()];
            });
            var added = newValues
                .filter(newValue => !oldValues.some(element => element === newValue))
                .forEach(item => this.createItemColorScheme(item));
        });
        this.allEntries = ko.computed(() => {
            var result = [];
            $.each(this.itemColorSchemes, (componentName, scheme) => {
                result = result.concat(scheme.allEntries());
            });
            return result;
        });
        this.availableSignatures = ko.computed(() => {
            var result = [];
            this.allEntries().forEach(entry => {
                var definition = entry.definition;
                if (!result.some(resultDefinition => resultDefinition.equals(definition))) {
                    result.push(definition);
                }
            });
            return result;
        });
        this.editableSignatures = ko.computed(() => {
            return this.availableSignatures().filter(s => s.dataItems().length > 0);
        });
        this.selectedSignatureEntries = ko.pureComputed(() => {
            return this.allEntries().filter(entry => !!this.selectedSignatures().length && entry.definition.equals(this.selectedSignatures()[0])).concat(this.newEntry() ? [this.newEntry()] : []);
        });
    }
    createItemColorScheme(item) {
        this.itemColorSchemes[item.componentName()] = new ItemColorScheme(item, this._requestColorSchemeDelegate, this._updateHub);
    }
    getScheme(componentName = '') {
        return this.itemColorSchemes[componentName].customEntries;
    }
    retainColorIndex(entry) {
        var newEntry = entry.clone();
        newEntry.color(null);
        newEntry.paletteIndex(entry.paletteIndex());
        this.getScheme(entry.definition.componentName).push(newEntry);
    }
    generateDefaultNames(newEntry) {
        var result = [];
        var entries = this.itemColorSchemes[newEntry.definition.componentName].allEntries().filter(entry => entry.definition.equals(newEntry.definition));
        var dimensionKeys = newEntry.dimensionKeys();
        var lastDimensionIndex = null;
        var isString = function (dimensionKey) {
            return dimensionKey.value.type() === 'System.String';
        };
        for (var i = dimensionKeys.length - 1; i >= 0; i--) {
            if (isString(dimensionKeys[i])) {
                lastDimensionIndex = i;
                break;
            }
        }
        if (lastDimensionIndex != null) {
            for (var i = 0; i < lastDimensionIndex; i++) {
                result.push(isString(dimensionKeys[i]) ? dimensionKeys[i].definition.dataMember() + '1' : null);
            }
            var lastDimensionPattern = dimensionKeys[lastDimensionIndex].definition.dataMember();
            var lastDimensionPostfix = 1;
            while (entries.some(entry => entry.dimensionKeys()[lastDimensionIndex].value.value() === lastDimensionPattern + (lastDimensionPostfix).toString())) {
                lastDimensionPostfix++;
            }
            result[lastDimensionIndex] = lastDimensionPattern + lastDimensionPostfix.toString();
        }
        return result;
    }
    isEntryAutogenerated(entry) {
        return this.itemColorSchemes[entry.definition.componentName].generatedEntries().some(generatedEntry => generatedEntry.equals(entry));
    }
}
exports.ColorSchemeModel = ColorSchemeModel;


/***/ }),

/***/ 71366:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.colorSchemeTreeViewEditor = exports.ColorTreeViewModel = exports.ColorEntryTreeItem = void 0;
const ko = __webpack_require__(71032);
const _knockout_utils_1 = __webpack_require__(4437);
class ColorEntryTreeItem {
    constructor(value, uniqueKey, entry, editColor, entryComputedColor) {
        this.value = value;
        this.uniqueKey = uniqueKey;
        this.entry = entry;
        this.items = [];
        this.expanded = true;
        this.custom = false;
        if (editColor) {
            this.editColor = (_, ev) => {
                editColor(entry, ev);
            };
            this.custom = entry.custom;
        }
        var entryColor = !!editColor && entryComputedColor;
        this.color = !!entryColor ? entryColor.css : null;
    }
}
exports.ColorEntryTreeItem = ColorEntryTreeItem;
class ColorTreeViewModel {
    constructor(params) {
        this.removeItem = (item) => {
            this.removeEntry(item.entry);
            this.selectedEntry(null);
        };
        this.selectedTreeItems = ko.observable([]);
        this.onItemSelectionChanged = (e) => {
            this.selectedEntry(e.node.itemData.entry);
        };
        this.dataSource = ko.computed(() => {
            var tree = [];
            params.dataSource().forEach(entry => {
                var plainValues = entry.dimensionKeys().map(dim => ({
                    displayValue: dim.displayText(),
                    id: dim.displayText()
                }));
                if (entry.measureKeys().length) {
                    plainValues.push({
                        displayValue: entry.measureKeys().map(m => m.displayText()).join(' | '),
                        id: entry.measureKeys().map(m => m._id).join(' | ')
                    });
                }
                let entryComputedColor = entry.paletteIndex() === null ? entry.color() : params.colorPalette()[entry.paletteIndex()];
                ColorTreeViewModel.construct(plainValues, tree, entry, ko.unwrap(params.editColor), entryComputedColor);
            });
            return tree;
        });
        this.colorPickerModel = params.colorPickerModel;
        this.isTreeMode = ko.computed(() => {
            return params.dataSource().length > 0 && (params.dataSource()[0].dimensionKeys().length + params.dataSource()[0].measureKeys().length) > 1;
        });
        this.allowModify = params.allowModify;
        this.selectedEntry = params.selectedEntry;
        this.addNewEntry = params.addNewEntry;
        this.removeEntry = ko.unwrap(params.removeEntry);
        this.allowAddNewEntry = _knockout_utils_1.safeComputed({ colorSchemeEntries: params.dataSource }, (args) => this.allowModify && args.colorSchemeEntries.some(entry => entry.dimensionKeys().length > 0));
    }
    static construct(values, children, entry, editColor = () => { }, entryComputedColor) {
        var value = values.shift();
        var foundChild = children.filter(item => item.uniqueKey === value.id)[0];
        if (!foundChild && !!value) {
            foundChild = new ColorEntryTreeItem(value.displayValue, value.id, entry, values.length === 0 ? editColor : null, entryComputedColor);
            children.push(foundChild);
        }
        if (foundChild && values.length > 0) {
            ColorTreeViewModel.construct(values, foundChild.items, entry, editColor, entryComputedColor);
        }
    }
}
exports.ColorTreeViewModel = ColorTreeViewModel;
const colorSchemeTreeViewEditor = (options) => context => ({
    template: args => colorSchemeTreeViewEditorTemplate(args, context, options)
});
exports.colorSchemeTreeViewEditor = colorSchemeTreeViewEditor;
const colorSchemeTreeViewEditorTemplate = (args, context, options) => {
    const div = document.createElement('div');
    div.classList.add('dx-dashboard-form-column-content-wrapper');
    let viewModel = new ColorTreeViewModel(options);
    ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-colors-view', data: viewModel } }, context.bindingContext);
    return div;
};
ko.components.register('dx-dashboard-colors-component', {
    viewModel: ColorTreeViewModel,
    template: { element: 'dx-dashboard-colors-view' }
});


/***/ }),

/***/ 96635:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EntryEditorViewModel = void 0;
const validation_engine_1 = __webpack_require__(9496);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const color_1 = __webpack_require__(78224);
const _item_filter_items_provider_1 = __webpack_require__(14716);
const _color_scheme_entry_creator_1 = __webpack_require__(78340);
class EntryEditorViewModel {
    constructor(colorPalette) {
        this.colorPalette = colorPalette;
        this.editEntry = (dataSourceBrowser, entry, colorByMeasures, availableMeasures, updateEntry, isAutoGenerated) => {
            this.invalidate();
            this.isAutogenerated(isAutoGenerated);
            this.updateEntry = updateEntry;
            this.hasMeasures(colorByMeasures);
            this.availableMeasures(availableMeasures);
            this.entryToEdit(entry.clone());
            this.subscribeObservables();
            if (colorByMeasures) {
                this.measuresValidationRules = [{
                        type: 'custom',
                        validationCallback: () => {
                            return this.measureKeys().length > 0;
                        },
                        message: _default_1.getLocalizationById('DashboardWebStringId.Colorization.ValidationSelectMeasure')
                    }];
            }
            var dimensionEditors = [];
            var promises = [];
            this.dimensionKeys().forEach(key => {
                promises.push(dataSourceBrowser
                    .findDataField(entry.definition.dataSource, entry.definition.dataMember, key.definition.dataMember())
                    .done(field => {
                    var type = field && _item_filter_items_provider_1.getRealDimensionType(key.definition, field) || 'Unknown';
                    dimensionEditors.push({
                        dimensionKey: key,
                        valueType: type
                    });
                }));
            });
            _jquery_helpers_1.jqueryWhenArray(promises).done((fields) => {
                this.dimensionEditors(dimensionEditors);
                this.visible(true);
            });
        };
        this.close = () => {
            this.visible(false);
            this.invalidate();
        };
        this.validate = () => {
            var validationGroup = validation_engine_1.default.getGroupConfig(this._validationGroupName);
            if (!!validationGroup && validationGroup.validate().isValid) {
                this.dimensionKeys().forEach((key, index) => this.entryToEdit().dimensionKeys()[index].value.value(key.value.value()));
                this.entryToEdit().measureKeys(this.measureKeys().map(key => _color_scheme_entry_creator_1.ColorSchemeEntryCreator.createMeasureDefinitionCopy(key)));
                this.entryToEdit().paletteIndex(null);
                this.entryToEdit().color(color_1.Color.fromRgbaString(this.color()));
                this.updateEntry(this.entryToEdit());
            }
        };
        this.invalidate = () => {
            this._subscriptions.forEach(s => s.dispose());
            this._subscriptions = [];
            this.entryToEdit(null);
            this.isAutogenerated(false);
            this.measuresValidationRules = [];
            this.dimensionKeys([]);
            this.measureKeys([]);
        };
        this.visible = ko.observable(false);
        this.entryToEdit = ko.observable();
        this.isAutogenerated = ko.observable(false);
        this.hasMeasures = ko.observable();
        this.availableMeasures = ko.observableArray();
        this.measuresValidationRules = [];
        this.dimensionEditors = ko.observableArray();
        this.dimensionKeys = ko.observableArray();
        this.measureKeys = ko.observableArray();
        this.selectedMeasuresIds = ko.computed({
            read: () => {
                return this.measureKeys().map(md => md._id);
            },
            write: (selectedIds) => {
                this.measureKeys(this.availableMeasures().filter(md => selectedIds.some(id => id === md._id)));
            }
        });
        this.color = ko.observable();
        this._subscriptions = [];
        this._validationGroupName = 'newEntry';
    }
    subscribeObservables() {
        this.entryToEdit().dimensionKeys().forEach(key => this.dimensionKeys.push(_color_scheme_entry_creator_1.ColorSchemeEntryCreator.createDimensionKey(key.definition.dataMember(), key.definition.dateTimeGroupInterval(), key.value.type(), key.value.value())));
        this.measureKeys(this.entryToEdit().measureKeys().map(key => _color_scheme_entry_creator_1.ColorSchemeEntryCreator.createMeasureDefinitionCopy(key)));
        let computedColor = this.entryToEdit().paletteIndex() === null ? this.entryToEdit().color() : this.colorPalette()[this.entryToEdit().paletteIndex()];
        this.color(computedColor ? computedColor.toHex() : '');
        this.dimensionKeys().forEach(key => {
            this._subscriptions.push(key.value.value.subscribe(this.validate));
        });
        this._subscriptions.push(this.measureKeys.subscribe(this.validate));
        this._subscriptions.push(this.color.subscribe(this.validate));
    }
}
exports.EntryEditorViewModel = EntryEditorViewModel;


/***/ }),

/***/ 17355:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatConditionTypeEditorSurface = void 0;
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const _data_field_1 = __webpack_require__(68951);
const _format_condition_average_1 = __webpack_require__(97952);
const _format_condition_top_bottom_1 = __webpack_require__(79380);
const _format_condition_value_1 = __webpack_require__(57912);
const range_converter_1 = __webpack_require__(96463);
const range_generator_1 = __webpack_require__(25496);
const _dashboard_item_format_rule_1 = __webpack_require__(41938);
const _appearance_settings_provider_1 = __webpack_require__(55425);
const _style_settings_provider_1 = __webpack_require__(76106);
const _cssHelper_1 = __webpack_require__(95259);
function getConditionTypes(dataType, filters = {}) {
    var filterGradient = (array) => array.filter(displayValue => filters.rangeGradientPredefinedTypeFilter ? filters.rangeGradientPredefinedTypeFilter(displayValue.value) : true);
    var filterRangeSet = (array) => array.filter(displayValue => filters.rangeSetPredefinedTypeFilter ? filters.rangeSetPredefinedTypeFilter(displayValue.value) : true);
    var conditionTypeFilter = filters.conditionTypeFilter || (() => true);
    return [{
            propertyName: 'conditionValue',
            constraint: (dataType) => dataType !== 'Enum',
            specificTypes: Object
                .keys(_format_condition_value_1.conditionInCondition.values)
                .map(key => {
                return {
                    value: key,
                    displayText: _format_condition_value_1.conditionInCondition.values[key],
                    constraint: ['Equal', 'NotEqual', 'ContainsText'].indexOf(key) !== -1 ? () => true : (dataType => dataType !== 'Text')
                };
            })
        }, {
            propertyName: 'conditionTopBottom',
            constraint: (dataType) => _data_field_1.IsNumeric(dataType),
            specificTypes: Object
                .keys(_format_condition_top_bottom_1.topBottom.values)
                .map(key => { return { value: key, displayText: _format_condition_top_bottom_1.topBottom.values[key] }; })
        }, {
            propertyName: 'conditionAverage',
            displayText: 'DashboardStringId.CommandFormatRuleAboveBelowAverage',
            constraint: (dataType) => _data_field_1.IsNumeric(dataType),
            specificTypes: Object
                .keys(_format_condition_average_1.averageType.values)
                .map(key => { return { value: key, displayText: _format_condition_average_1.averageType.values[key] }; })
        }, {
            propertyName: 'conditionDateOccuring',
            constraint: (dataType) => _data_field_1.IsDateTime(dataType)
        }, {
            propertyName: 'conditionExpression',
            constraint: (dataType) => dataType !== 'Enum'
        }, {
            propertyName: 'conditionRangeSet',
            displayText: 'DashboardStringId.CommandFormatRuleRangeIcons',
            rangeStyleType: 'Icon',
            constraint: (dataType) => !_data_field_1.IsTextual(dataType),
            subtype: 'icons',
            specificTypes: [{
                    key: 'Ranges 2',
                    items: filterRangeSet([
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Arrows2, displayText: 'Arrows 2' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ArrowsGray2, displayText: 'Arrows Gray 2' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Circles2, displayText: 'Circles 2' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Symbols2, displayText: 'Symbols 2' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.SymbolsCircled2, displayText: 'Symbols Circled 2' }
                    ])
                }, {
                    key: 'Ranges 3',
                    items: filterRangeSet([
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Arrows3, displayText: 'Arrows 3' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ArrowsGray3, displayText: 'Arrows Gray 3' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.PositiveNegative3, displayText: 'Positive Negative 3' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Circles3, displayText: 'Circles 3' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.TrafficLights3, displayText: 'Traffic Lights 3' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Signs3, displayText: 'Signs 3' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Symbols3, displayText: 'Symbols 3' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.SymbolsCircled3, displayText: 'Symbols Circled 3' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Stars3, displayText: 'Stars 3' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Flags3, displayText: 'Flags 3' }
                    ])
                }, {
                    key: 'Ranges 4',
                    items: filterRangeSet([
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Arrows4, displayText: 'Arrows 4' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ArrowsGray4, displayText: 'Arrows Gray 4' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Circles4, displayText: 'Circles 4' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.CirclesRedToBlack4, displayText: 'Circles Red To Black 4' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Bars4, displayText: 'Bars 4' }
                    ])
                }, {
                    key: 'Ranges 5',
                    items: filterRangeSet([
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Arrows5, displayText: 'Arrows 5' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ArrowsGray5, displayText: 'Arrows Gray 5' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Quarters5, displayText: 'Quarters 5' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Bars5, displayText: 'Bars 5' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Boxes5, displayText: 'Boxes 5' }
                    ])
                }]
        }, {
            propertyName: 'conditionRangeSet',
            rangeStyleType: 'Color',
            constraint: (dataType) => !_data_field_1.IsTextual(dataType),
            subtype: 'colors',
            specificTypes: [{
                    key: 'Ranges 2',
                    items: filterRangeSet([
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedGreen, displayText: 'Pale Red Green' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedGreen, displayText: 'Red Green' }
                    ])
                }, {
                    key: 'Ranges 3',
                    items: filterRangeSet([
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedGreenBlue, displayText: 'Pale Red Green Blue' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedGreenBlue, displayText: 'Red Green Blue' }
                    ])
                }, {
                    key: 'Ranges 4',
                    items: filterRangeSet([
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedYellowGreenBlue, displayText: 'Pale Red Yellow Green Blue' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedYellowGreenBlue, displayText: 'Red Yellow Green Blue' }
                    ])
                }, {
                    key: 'Ranges 5',
                    items: filterRangeSet([
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedOrangeYellowGreenBlue, displayText: 'Pale Red Orange Yellow Green Blue' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedOrangeYellowGreenBlue, displayText: 'Red Orange Yellow Green Blue' }
                    ])
                }]
        }, {
            propertyName: 'conditionRangeGradient',
            rangeStyleType: 'Gradient',
            constraint: (dataType) => !_data_field_1.IsTextual(dataType),
            specificTypes: [{
                    key: '2 Color Gradient Ranges',
                    items: filterGradient([
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhite, displayText: 'Green White' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteGreen, displayText: 'White Green' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhite, displayText: 'Red White' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteRed, displayText: 'White Red' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellow, displayText: 'Green Yellow' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowGreen, displayText: 'Yellow Green' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellow, displayText: 'Red Yellow' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowRed, displayText: 'Yellow Red' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhite, displayText: 'Blue White' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteBlue, displayText: 'White Blue' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueRed, displayText: 'Blue Red' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedBlue, displayText: 'Red Blue' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowBlue, displayText: 'Yellow Blue' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellow, displayText: 'Blue Yellow' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenBlue, displayText: 'Green Blue' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueGreen, displayText: 'Blue Green' }
                    ])
                }, {
                    key: '3 Color Gradient Ranges',
                    items: filterGradient([
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhiteBlue, displayText: 'Green White Blue' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhiteGreen, displayText: 'Blue White Green' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhiteRed, displayText: 'Blue White Red' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhiteBlue, displayText: 'Red White Blue' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhiteRed, displayText: 'Green White Red' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhiteGreen, displayText: 'Red White Green' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellowRed, displayText: 'Green Yellow Red' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellowGreen, displayText: 'Red Yellow Green' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellowRed, displayText: 'Blue Yellow Red' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellowBlue, displayText: 'Red Yellow Blue' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellowBlue, displayText: 'Green Yellow Blue' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellowGreen, displayText: 'Blue Yellow Green' }
                    ])
                }]
        }, {
            propertyName: 'conditionBar',
            constraint: (dataType) => !_data_field_1.IsTextual(dataType)
        }, {
            propertyName: 'conditionColorRangeBar',
            displayText: 'DashboardStringId.CommandFormatRuleColorRangeBar',
            rangeStyleType: 'ColorBar',
            constraint: (dataType) => !_data_field_1.IsTextual(dataType),
            specificTypes: [{
                    key: 'Ranges 2',
                    items: filterRangeSet([
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedGreen, displayText: 'Pale Red Green' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedGreen, displayText: 'Red Green' }
                    ])
                }, {
                    key: 'Ranges 3',
                    items: filterRangeSet([
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedGreenBlue, displayText: 'Pale Red Green Blue' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedGreenBlue, displayText: 'Red Green Blue' }
                    ])
                }, {
                    key: 'Ranges 4',
                    items: filterRangeSet([
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedYellowGreenBlue, displayText: 'Pale Red Yellow Green Blue' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedYellowGreenBlue, displayText: 'Red Yellow Green Blue' }
                    ])
                }, {
                    key: 'Ranges 5',
                    items: filterRangeSet([
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedOrangeYellowGreenBlue, displayText: 'Pale Red Orange Yellow Green Blue' },
                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedOrangeYellowGreenBlue, displayText: 'Red Orange Yellow Green Blue' }
                    ])
                }]
        }, {
            propertyName: 'conditionGradientRangeBar',
            displayText: 'DashboardStringId.CommandFormatRuleGradientRangeBar',
            rangeStyleType: 'GradientBar',
            constraint: (dataType) => !_data_field_1.IsTextual(dataType),
            specificTypes: [{
                    key: '2 Color Gradient Ranges',
                    items: filterGradient([
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhite, displayText: 'Green White' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteGreen, displayText: 'White Green' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhite, displayText: 'Red White' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteRed, displayText: 'White Red' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellow, displayText: 'Green Yellow' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowGreen, displayText: 'Yellow Green' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellow, displayText: 'Red Yellow' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowRed, displayText: 'Yellow Red' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhite, displayText: 'Blue White' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteBlue, displayText: 'White Blue' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueRed, displayText: 'Blue Red' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedBlue, displayText: 'Red Blue' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowBlue, displayText: 'Yellow Blue' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellow, displayText: 'Blue Yellow' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenBlue, displayText: 'Green Blue' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueGreen, displayText: 'Blue Green' }
                    ])
                }, {
                    key: '3 Color Gradient Ranges',
                    items: filterGradient([
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhiteBlue, displayText: 'Green White Blue' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhiteGreen, displayText: 'Blue White Green' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhiteRed, displayText: 'Blue White Red' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhiteBlue, displayText: 'Red White Blue' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhiteRed, displayText: 'Green White Red' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhiteGreen, displayText: 'Red White Green' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellowRed, displayText: 'Green Yellow Red' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellowGreen, displayText: 'Red Yellow Green' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellowRed, displayText: 'Blue Yellow Red' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellowBlue, displayText: 'Red Yellow Blue' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellowBlue, displayText: 'Green Yellow Blue' },
                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellowGreen, displayText: 'Blue Yellow Green' }
                    ])
                }]
        },
    ]
        .map(typeDescr => {
        typeDescr['displayText'] = typeDescr['displayText'] || _dashboard_item_format_rule_1.conditionTypes.filter(t => t.propertyName === typeDescr.propertyName)[0].displayName;
        return typeDescr;
    })
        .filter(ct => conditionTypeFilter(ct.propertyName, ct.subtype))
        .filter(ct => ct.constraint(dataType));
}
function getConditionSpecificTypes(conditionType, dataType, filters) {
    var conditionTypeDesciptor = getConditionTypes(dataType, filters).filter(ct => !!ct.subtype
        ? ct.propertyName + '_' + ct.subtype === conditionType
        : ct.propertyName === conditionType)[0];
    if (conditionTypeDesciptor && conditionTypeDesciptor.specificTypes) {
        let types = conditionTypeDesciptor.specificTypes
            .filter(st => !st.constraint || st.constraint(dataType));
        types['rangeStyleType'] = conditionTypeDesciptor.rangeStyleType || 'None';
        return types;
    }
    else {
        let types = [{ value: conditionType, displayText: '-' }];
        types['rangeStyleType'] = 'None';
        return types;
    }
}
class FormatConditionTypeEditorSurface {
    constructor(options) {
        this.displayMode = ko.observable();
        this.ancestors = ko.observable([]);
        this.backClick = () => {
            this.displayMode('conditionTypes');
        };
        this.updateItemAppearance = (e) => {
            let element = _jquery_helpers_1.$unwrap(e.itemElement);
            e.itemData.hasSpecificTypes ? element.classList.add('dx-dashboard-has-children') : element.classList.remove('dx-dashboard-has-children');
        };
        this.dataType = options.dataType;
        this.conditionType = options.conditionType;
        this.specificType = options.specificType;
        this.displayMode.subscribe(mode => {
            if (mode === 'conditionTypes') {
                this.ancestors(['…']);
            }
            else {
                this.ancestors(['…', this.availableConditionTypes().filter(t => t.value === this.conditionType())[0].displayText]);
            }
        });
        this.availableConditionTypes = ko.computed(() => {
            if (!this.dataType())
                return;
            var types = getConditionTypes(this.dataType(), options.filters)
                .map(ct => ({
                value: ct.propertyName + (ct.subtype ? '_' + ct.subtype : ''),
                displayText: ct.displayText,
                hasSpecificTypes: !!ct.specificTypes
            }));
            return types;
        });
        this.availableConditionTypes.subscribe((types) => {
            if (!types.filter(t => t.value === this.conditionType.peek())[0]) {
                this.conditionType(null);
            }
        });
        this.availableSpecificTypes = ko.computed(() => {
            let conditionType = this.conditionType();
            let dataType = this.dataType();
            let types = dataType && conditionType ? getConditionSpecificTypes(conditionType, dataType, options.filters) : [];
            if (types && (types.length > 1)) {
                this.displayMode('specificTypes');
            }
            else {
                this.displayMode('conditionTypes');
            }
            return types;
        });
        this.availableSpecificTypes.subscribe(types => {
            if (types.length === 1)
                this.specificType(types[0].value);
        });
        this.selectedSpecificTypes = ko.computed(() => {
            if (this.availableSpecificTypes()['rangeStyleType'] === 'None') {
                return this.availableSpecificTypes() && this.availableSpecificTypes().filter((value) => value.value === this.specificType()) || [];
            }
            else {
                var selection = null, key = null;
                this.availableSpecificTypes().forEach((group) => {
                    group.items.forEach(item => {
                        if (item.value === this.specificType()) {
                            key = group.key;
                            selection = item;
                            return false;
                        }
                    });
                    if (selection)
                        return false;
                });
                return selection && [{ key: key, items: [selection] }] || [];
            }
        });
    }
    getStyleList(rangeStyleType) {
        var styleList = range_converter_1.FormatConditionConverter.getStyleList(rangeStyleType).list.reverse();
        return styleList.map(styleType => {
            if (this.availableSpecificTypes()['rangeStyleType'] === 'Icon') {
                return _style_settings_provider_1.styleSettingsProvider.toIconCssClass(styleType);
            }
            else {
                return _cssHelper_1.convertCssPropertyWrappersToString(_appearance_settings_provider_1.appearanceSettingsProvider.toCssProperties(styleType));
            }
        });
    }
    getGradientColorsList(type) {
        return range_generator_1.FormatConditionRangeGenerator.generateGradientColors(type, 6).reverse();
    }
}
exports.FormatConditionTypeEditorSurface = FormatConditionTypeEditorSurface;


/***/ }),

/***/ 7110:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RuleRangesEditor = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const color_1 = __webpack_require__(78224);
const _range_info_1 = __webpack_require__(74133);
const range_generator_1 = __webpack_require__(25496);
const _format_rules_common_1 = __webpack_require__(94102);
const _style_settings_base_1 = __webpack_require__(86347);
const _knockout_utils_1 = __webpack_require__(4437);
const _style_settings_adapters_1 = __webpack_require__(73918);
const negativeInfinityDisplayText = '-∞';
var dataGridColumnTypes = {
    Text: 'string',
    DateTime: 'date',
    Bool: 'boolean',
    Integer: 'number',
    Float: 'number',
    Double: 'number',
    Decimal: 'number',
    Enum: 'string',
    Custom: 'object',
    Unknown: 'object'
};
class RuleRangesEditor {
    constructor(options) {
        this.selection = ko.observable(null);
        this.value = ko.observableArray([]);
        this.closeEditCell = () => {
            this._closeEditCell && this._closeEditCell();
        };
        this._closeEditCell = null;
        this.isGradient = options.condition.isGradient();
        this.appearanceMode = options.appearanceMode;
        this.condition = options.condition;
        this.enableCustomStyles = options.enableCustomStyles;
        this.dataType = this.condition.dataType;
        this.isPercent = ko.computed({
            read: () => this.condition.valueType() === 'Percent',
            write: (isPercent) => {
                if (isPercent) {
                    this.condition.setValues(range_generator_1.FormatConditionRangeGenerator.calculateRangePercentValues(this.condition.rangeSet.ranges.peek().length));
                }
            }
        });
        _knockout_utils_1.safeComputed({ valueType: this.condition.valueType }, () => {
            this._updateValue();
            this.updateRangeValues(this.isPercent());
        });
        this.condition.rangeSet.ranges.subscribe(() => this._updateValue(), null, 'arrayChange');
    }
    updateRangeValues(isPercent) {
        const valueType = isPercent ? 'System.Double' : _format_rules_common_1.fieldTypes[this.dataType()];
        this.condition.rangeSet.ranges().forEach((rangeInfo) => rangeInfo.value.setValue(RuleRangesEditor.patchValueToMatchSerializedType(rangeInfo.value.value(), valueType), valueType));
    }
    isRangeEmptyAllowed(range) {
        if (this.isGradient) {
            var ranges = this.value.peek();
            var index = ranges.indexOf(range);
            return (index != 0) && (index != ranges.length - 1);
        }
        else {
            return true;
        }
    }
    createStyleSettingsEditorOptions(range) {
        return {
            allowChangeViewMode: false,
            appearanceMode: this.appearanceMode,
            isEmptyAllowed: this.isRangeEmptyAllowed(range),
            selectedChanged: this.getSelectedStyleChangedHandler(range),
            closeEditCell: this.closeEditCell,
            enableCustomStyles: this.enableCustomStyles,
        };
    }
    createStyleSettingsEditorItemOptions(range) {
        return {
            item: range.style(),
            clickHandler: () => { },
            isSelected: ko.observable(false),
            isEmptyAllowed: this.isRangeEmptyAllowed(range),
            isRange: true,
            isGradient: this.isGradient,
            restrictToColor: this.isGradient
        };
    }
    createRangeNumberEditorViewModel(args) {
        const isNegativeInfintySelected = args.value() === _format_rules_common_1.negativeInfinity;
        const editorValue = ko.observable(isNegativeInfintySelected ? 0 : args.value());
        const allowInfinity = args.isRightValue && args.grid.totalCount() === args.rowIndex + 1 && !this.isPercent();
        const infinitValue = ko.observable(isNegativeInfintySelected);
        const editorType = this.dataType() === 'DateTime' ? 'dateBox' : 'numberBox';
        const editorOptions = {
            onValueChanged: (e) => {
                args.setValue(e.value);
                editorValue(e.value);
            },
            format: this.dataType() === 'Integer' && !this.isPercent() ? 'fixedPoint' : '',
            value: editorValue()
        };
        const buttonOptions = {
            width: '100%',
            keyExpr: 'value',
            selectedItemKeys: [isNegativeInfintySelected ? _format_rules_common_1.negativeInfinity : 'number'],
            items: [{
                    value: 'number',
                    text: _default_1.getLocalizationById('DashboardStringId.FormatConditionNumberValueType')
                }, {
                    value: _format_rules_common_1.negativeInfinity,
                    text: negativeInfinityDisplayText
                }],
            selectionMode: 'single',
            onSelectionChanged: (e) => {
                if (e.addedItems[0].value === _format_rules_common_1.negativeInfinity) {
                    args.setValue(_format_rules_common_1.negativeInfinity);
                    infinitValue(true);
                }
                else {
                    args.setValue(editorValue());
                    infinitValue(false);
                }
            }
        };
        return {
            editorType,
            negativeInfinityDisplayText,
            allowInfinity,
            infinitValue,
            editorOptions,
            buttonOptions
        };
    }
    get dataGridOptions() {
        let valueType = dataGridColumnTypes[this.dataType()];
        return {
            dataSource: (this.value),
            twoWayBindingEnabled: false,
            hoverStateEnabled: false,
            showRowLines: true,
            showColumnHeaders: false,
            rowAlternationEnabled: false,
            selection: undefined,
            paging: {
                enabled: false
            },
            editing: {
                mode: 'cell',
                allowFiltering: false,
                allowSorting: false,
                allowUpdating: true
            },
            onInitialized: (e) => {
                e.component.getController('editorFactory')._showRevertButton = () => { };
                this._closeEditCell = () => {
                    e.component.closeEditCell();
                    this._updateValue();
                };
            },
            onCellHoverChanged: function (e) {
                let cellElement = _jquery_helpers_1.$unwrap(e.cellElement);
                if (e.eventType === 'mouseover') {
                    cellElement.classList.add('dx-dashboard-range-editor-state-hover');
                }
                else {
                    cellElement.classList.remove('dx-dashboard-range-editor-state-hover');
                }
            },
            onRowPrepared: function (e) {
                if (e.data === this.selection()) {
                    let selectedRow = _jquery_helpers_1.$unwrap(e.element).querySelector('tr.dx-selection');
                    if (selectedRow) {
                        selectedRow.classList.remove('dx-selection');
                    }
                    _jquery_helpers_1.$unwrap(e.rowElement).classList.add('dx-selection');
                }
            },
            onEditingStart: function (e) {
                if (e.component.getRowIndexByKey(e.key) === 0 && e.column.dataField === 'leftValue') {
                    e.cancel = true;
                }
            },
            onCellPrepared: function (e) {
                let cellElement = _jquery_helpers_1.$unwrap(e.cellElement);
                if (cellElement.classList.contains('dx-editor-cell')) {
                    this.selection(e.data);
                    let selectedRow = _jquery_helpers_1.$unwrap(e.element).querySelector('tr.dx-selection');
                    if (selectedRow) {
                        selectedRow.classList.remove('dx-selection');
                    }
                    cellElement.parentElement.classList.add('dx-selection');
                }
            },
            onRowValidating: function (e) {
                if (!!e.newData.sign || e.brokenRules.length > 0)
                    return;
                var dataGrid = e.component, value = e.newData.leftValue || e.newData.rightValue, rowIndex = dataGrid.getRowIndexByKey(e.key), bottomValue = undefined, upperValue = undefined;
                if (!!e.newData.leftValue) {
                    bottomValue = dataGrid.getKeyByRowIndex(rowIndex).rightValue();
                    upperValue = rowIndex - 1 >= 0 ? dataGrid.getKeyByRowIndex(rowIndex - 1).leftValue() : undefined;
                }
                else if (!!e.newData.rightValue) {
                    var count = dataGrid.option('dataSource').length;
                    var minBottomValue = this.isPercent() && (rowIndex + 1 == count) ? 0 : undefined;
                    bottomValue = rowIndex + 1 < count ? dataGrid.getKeyByRowIndex(rowIndex + 1).rightValue() : minBottomValue;
                    upperValue = dataGrid.getKeyByRowIndex(rowIndex).leftValue();
                }
                if (value == undefined || (bottomValue !== undefined && value < bottomValue) || (upperValue !== undefined && value > upperValue)) {
                    e.isValid = false;
                    e.errorText = 'Invalid value: value should be between [' + bottomValue + ', ' + upperValue + ']';
                }
            },
            columns: [{
                    dataField: 'style',
                    alignment: 'center',
                    width: 52,
                    cellTemplate: 'dx-dashboard-range-style-template',
                    lookup: {
                        dataSource: []
                    },
                    editCellTemplate: 'dx-dashboard-range-style-editor-template'
                }, {
                    dataField: 'leftValue',
                    dataType: valueType,
                    width: 74,
                    alignment: 'center',
                    cellTemplate: 'dx-dashboard-range-cell-template',
                    editCellTemplate: 'dx-dashboard-range-edit-number-template-left',
                    cssClass: 'dx-dashboard-range-value',
                    validationRules: [{ type: 'required' }]
                }, {
                    dataField: 'sign',
                    alignment: 'center',
                    cellTemplate: 'dx-dashboard-range-cell-template',
                    cssClass: 'dx-dashboard-range-sign',
                    showEditorAlways: false,
                    editorOptions: {
                        searchEnabled: false,
                        showDropDownButton: false
                    },
                    lookup: {
                        dataSource: [{
                                name: _range_info_1.rangeValueComparison.values['GreaterOrEqual'],
                                id: 'GreaterOrEqual'
                            }, {
                                name: _range_info_1.rangeValueComparison.values['Greater'],
                                id: 'Greater'
                            }],
                        displayExpr: 'name',
                        valueExpr: 'id'
                    }
                }, {
                    dataField: 'rightValue',
                    dataType: valueType,
                    alignment: 'center',
                    width: 74,
                    cellTemplate: 'dx-dashboard-range-cell-template',
                    editCellTemplate: 'dx-dashboard-range-edit-number-template-right',
                    cssClass: 'dx-dashboard-range-value',
                    validationRules: [{ type: 'required' }],
                    customizeText: (e) => {
                        return e.value === -Infinity ? negativeInfinityDisplayText : e.valueText;
                    }
                }
            ]
        };
    }
    add() {
        var index = !!this.selection() ? this.condition.rangeSet.ranges.indexOf(this.selection().rangeInfo) : this.condition.rangeSet.ranges().length - 1;
        var rangeInfo = this.condition.rangeSet.ranges()[index];
        this.condition.rangeSet.ranges.splice(index, 0, rangeInfo.clone());
    }
    remove() {
        if (!!this.selection() && this.condition.rangeSet.ranges().length > 2) {
            var rangeInfo = this.selection().rangeInfo;
            var index = this.condition.rangeSet.ranges.indexOf(rangeInfo);
            this.condition.rangeSet.ranges.splice(index, 1);
            this.selection(this.value()[this.value().indexOf(this.selection())]);
        }
    }
    getSelectedStyleChangedHandler(range) {
        return (oldStyle, newStyle) => {
            range.rangeInfo.styleSettings(newStyle);
        };
    }
    _updateValue() {
        this.value(generateRanges(this.condition.rangeSet.ranges.peek(), this.isGradient, this.isPercent()));
    }
}
exports.RuleRangesEditor = RuleRangesEditor;
RuleRangesEditor.patchValueToMatchSerializedType = (value, valueType) => {
    if (valueType === 'System.Int32')
        return Math.round(value);
    return value;
};
var generateRanges = (ranges, isGradient, isPercent) => {
    var value = [];
    var prevIndex = -1, nextIndex = ranges.length;
    var isStyleEmpty = (s) => {
        return !s || _style_settings_adapters_1.styleSettingsAdapter(s).getPredefinedStyle() == _style_settings_base_1.emptyStyleType;
    };
    var generateStyleSettings = (currentIndex) => {
        let color;
        let nextColor;
        const itemAdapter = _style_settings_adapters_1.styleSettingsAdapter(ranges[prevIndex].styleSettings());
        const nextItemAdapter = _style_settings_adapters_1.styleSettingsAdapter(ranges[nextIndex].styleSettings());
        color = itemAdapter.hasCustomStyle() ? color_1.Color.fromRgbaString(itemAdapter.getCustomColor()) : color_1.Color.fromAppearance(itemAdapter.getPredefinedStyle());
        nextColor = nextItemAdapter.hasCustomStyle() ? color_1.Color.fromRgbaString(nextItemAdapter.getCustomColor()) : color_1.Color.fromAppearance(nextItemAdapter.getPredefinedStyle());
        const generatedColor = color_1.Color.fromDxColor(nextColor.blend(color, (currentIndex - nextIndex) / (prevIndex - nextIndex))).css;
        const newItem = _style_settings_adapters_1.styleSettingsAdapter(ranges[0].styleSettings()).itemFactory();
        _style_settings_adapters_1.styleSettingsAdapter(newItem).setCustomColor(generatedColor);
        return ko.observable(newItem);
    };
    var getRangeValue = (index) => {
        var rangeInfo = ranges[index];
        return rangeInfo.value.value;
    };
    for (var i = ranges.length - 1; i >= 0; i--) {
        var styleSettings = ranges[i].styleSettings;
        if (isGradient) {
            if (isStyleEmpty(styleSettings())) {
                if (nextIndex > i) {
                    for (var j = i - 1; j >= 0; j--) {
                        if (!isStyleEmpty(ranges[j].styleSettings())) {
                            nextIndex = j;
                            break;
                        }
                    }
                }
                styleSettings = generateStyleSettings(i);
            }
            else {
                prevIndex = i;
            }
        }
        value.push({
            style: styleSettings,
            sign: ranges[i].valueComparison,
            leftValue: (i < ranges.length - 1) ? getRangeValue(i + 1) : (isPercent ? ko.observable(100) : ko.observable('∞')),
            rightValue: getRangeValue(i),
            rangeInfo: ranges[i]
        });
    }
    return value;
};


/***/ }),

/***/ 73918:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.styleSettingsAdapter = void 0;
const _default_1 = __webpack_require__(65855);
const color_1 = __webpack_require__(78224);
const appearance_settings_1 = __webpack_require__(93722);
const bar_style_settings_1 = __webpack_require__(9661);
const color_style_settings_1 = __webpack_require__(28872);
const icon_settings_1 = __webpack_require__(15958);
const _appearance_settings_1 = __webpack_require__(91566);
const _icon_settings_1 = __webpack_require__(25681);
const _style_settings_base_1 = __webpack_require__(86347);
const _appearance_settings_provider_1 = __webpack_require__(55425);
const _style_settings_provider_1 = __webpack_require__(76106);
const _cssHelper_1 = __webpack_require__(95259);
const _style_settings_palette_1 = __webpack_require__(79305);
const colorStyleSettingsAdapter = {
    getCssStyles: (item) => {
        const predefinedColor = item.predefinedColor();
        if (predefinedColor === 'Custom' || predefinedColor === _style_settings_base_1.emptyStyleType) {
            return 'background-color: ' + (item.color() && item.color().css);
        }
        else {
            return _cssHelper_1.convertCssPropertyWrappersToString(_appearance_settings_provider_1.appearanceSettingsProvider.toCssProperties(predefinedColor));
        }
    },
    getCssClasses: (item, isEmptyAllowed, isRange) => {
        const isEmpty = isEmptyAllowed && item.predefinedColor() === _style_settings_base_1.emptyStyleType;
        const isLabel = colorStyleSettingsAdapter.isEmptyCustomStyle(item) || (colorStyleSettingsAdapter.getLabelText(item, isRange, false) !== '');
        return [
            isEmpty ? 'dx-dashboard-appearance-item-empty' : '',
            isLabel ? 'dx-dashboard-appearance-item-label' : '',
            isRange ? 'dx-dashboard-range-appearance-item' : 'dx-dashboard-appearance-item',
        ];
    },
    getLocalizedCaption: (item) => _default_1.getLocalizationById(_appearance_settings_1.appearanceType.values[item.predefinedColor()]),
    getLabelText: (item, isRange, isGradient) => {
        const labelText = _style_settings_palette_1.Palette.getLabelText(item.predefinedColor(), isGradient ? '(Automatic)' : 'No Style');
        return (!isRange || isRange && item.predefinedColor() !== _style_settings_base_1.emptyStyleType) ? labelText : '';
    },
    getPredefinedStyle: (item) => item.predefinedColor(),
    setPredefinedStyle: (item, style) => item.predefinedColor(style),
    hasCustomStyle: (item) => item.predefinedColor() === 'Custom',
    isEmptyCustomStyle: (item) => colorStyleSettingsAdapter.hasCustomStyle(item) && !item.color(),
    getCustomColor: (item) => item.color() && item.color().css,
    getCustomAppearance: (item) => null,
    setCustomColor: (item, style) => item.color(style && color_1.Color.fromRgbaString(style)),
    setCustomAppearance: () => { },
};
const iconStyleSettingsAdapter = {
    getCssStyles: () => '',
    getCssClasses: (item, isEmptyAllowed, isRange) => {
        if (isEmptyAllowed && item.iconType() === _style_settings_base_1.emptyStyleType) {
            return [
                'dx-dashboard-appearance-item',
                'dx-dashboard-appearance-item-label',
                'dx-dashboard-appearance-item-empty'
            ];
        }
        else {
            return [
                isRange ? 'dx-dashboard-rangeicon' : 'dx-dashboard-icon-item',
                _style_settings_provider_1.styleSettingsProvider.toIconCssClass(item.iconType())
            ];
        }
    },
    getLocalizedCaption: (item) => _default_1.getLocalizationById(_icon_settings_1.iconType.values[item.iconType()]),
    getLabelText: (item, isRange, isGradient) => {
        const labelText = _style_settings_palette_1.Palette.getLabelText(item.iconType(), isGradient ? '(Automatic)' : 'No Style');
        return (!isRange || isRange && item.iconType() !== _style_settings_base_1.emptyStyleType) ? labelText : '';
    },
    getPredefinedStyle: (item) => item.iconType(),
    setPredefinedStyle: (item, style) => item.iconType(style),
    hasCustomStyle: () => false,
    isEmptyCustomStyle: () => false,
    getCustomColor: () => null,
    getCustomAppearance: () => null,
    setCustomColor: () => { },
    setCustomAppearance: () => { },
};
const appearanceStyleSettingsAdapter = {
    getCssStyles: (item) => {
        if (item.appearanceType() !== _style_settings_base_1.emptyStyleType && !appearanceStyleSettingsAdapter.hasCustomStyle(item)) {
            return _cssHelper_1.convertCssPropertyWrappersToString(_appearance_settings_provider_1.appearanceSettingsProvider.toCssProperties(item.appearanceType()));
        }
        else {
            var backColor = item.backColor();
            return backColor ? 'background-color: ' + backColor.css + ';' : '';
        }
    },
    getCssClasses: (item, isEmptyAllowed, isRange, isGradient = false) => {
        const _isEmptyAppearanceItem = () => isEmptyAllowed && item.appearanceType() === _style_settings_base_1.emptyStyleType;
        const _isTransparent = () => item.appearanceType() === 'GradientTransparent';
        const _isLabel = () => (item.appearanceType() === 'GradientTransparent')
            || (appearanceStyleSettingsAdapter.getLabelText(item, isRange, isGradient) !== '')
            || (appearanceStyleSettingsAdapter.isEmptyCustomStyle(item));
        return [
            isRange ? 'dx-dashboard-range-appearance-item' : 'dx-dashboard-appearance-item',
            _isEmptyAppearanceItem() ? 'dx-dashboard-appearance-item-empty' : '',
            _isLabel() ? 'dx-dashboard-appearance-item-label' : '',
            _isTransparent() && !isRange ? 'dx-dashboard-appearance-item-transparent' : ''
        ];
    },
    getLocalizedCaption: (item) => _default_1.getLocalizationById(_appearance_settings_1.appearanceType.values[item.appearanceType()]),
    getLabelText: (item, isRange, isGradient) => {
        const labelText = _style_settings_palette_1.Palette.getLabelText(item.appearanceType(), isGradient ? '(Automatic)' : 'No Style');
        return (!isRange || isRange && item.appearanceType() !== _style_settings_base_1.emptyStyleType) ? labelText : '';
    },
    getPredefinedStyle: (item) => item.appearanceType(),
    setPredefinedStyle: (item, style) => item.appearanceType(style),
    hasCustomStyle: (item) => item.appearanceType() === 'Custom',
    isEmptyCustomStyle: (item) => {
        return appearanceStyleSettingsAdapter.hasCustomStyle(item)
            && !item.foreColor() && !item.backColor()
            && item.fontStyle() === _appearance_settings_1.fontStyle.defaultVal
            && item.fontFamily() === _appearance_settings_1.fontFamily.defaultVal;
    },
    getCustomColor: (item) => item.backColor() && item.backColor().css,
    getCustomAppearance: (item) => {
        return !appearanceStyleSettingsAdapter.hasCustomStyle(item) || appearanceStyleSettingsAdapter.isEmptyCustomStyle(item) ? null : ({
            fontFamily: item.fontFamily(),
            fontStyle: item.fontStyle(),
            backColor: item.backColor() && item.backColor().css,
            foreColor: item.foreColor() && item.foreColor().css
        });
    },
    setCustomColor: (item, style) => item.backColor(style && color_1.Color.fromRgbaString(style)),
    setCustomAppearance: (item, style) => {
        item.fontFamily(style && style.fontFamily);
        item.fontStyle(style ? style.fontStyle : null);
        item.backColor(style && style.backColor && color_1.Color.fromRgbaString(style.backColor));
        item.foreColor(style && style.foreColor && color_1.Color.fromRgbaString(style.foreColor));
    },
};
function styleSettingsAdapter(item, itemType) {
    let adapter;
    switch (itemType || item.constructor) {
        case appearance_settings_1.AppearanceSettings:
            itemType = appearance_settings_1.AppearanceSettings;
            adapter = appearanceStyleSettingsAdapter;
            break;
        case icon_settings_1.IconSettings:
            itemType = icon_settings_1.IconSettings;
            adapter = iconStyleSettingsAdapter;
            break;
        case bar_style_settings_1.BarStyleSettings:
            itemType = bar_style_settings_1.BarStyleSettings;
            adapter = colorStyleSettingsAdapter;
            break;
        case color_style_settings_1.ColorStyleSettings:
            itemType = color_style_settings_1.ColorStyleSettings;
            adapter = colorStyleSettingsAdapter;
            break;
        default:
            throw new Error('Unknown StyleSettings type');
    }
    return {
        itemFactory: () => new itemType(),
        getCssStyles: () => adapter.getCssStyles(item),
        getCssClasses: (isEmptyAllowed, isRange, isGradient) => adapter.getCssClasses(item, isEmptyAllowed, isRange, isGradient),
        getLocalizedCaption: () => adapter.getLocalizedCaption(item),
        getLabelText: (isRange, isGradient) => adapter.getLabelText(item, isRange, isGradient),
        getPredefinedStyle: () => adapter.getPredefinedStyle(item),
        setPredefinedStyle: (style) => adapter.setPredefinedStyle(item, style),
        hasCustomStyle: () => adapter.hasCustomStyle(item),
        isEmptyCustomStyle: () => adapter.isEmptyCustomStyle(item),
        getCustomColor: () => adapter.getCustomColor(item),
        getCustomAppearance: () => adapter.getCustomAppearance(item),
        setCustomColor: (style) => adapter.setCustomColor(item, style),
        setCustomAppearance: (style) => adapter.setCustomAppearance(item, style),
    };
}
exports.styleSettingsAdapter = styleSettingsAdapter;


/***/ }),

/***/ 32280:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StyleSettingsEditorItem = void 0;
const ko = __webpack_require__(71032);
const _custom_appearance_dialog_1 = __webpack_require__(66568);
const _popover_color_picker_1 = __webpack_require__(49169);
const _style_settings_adapters_1 = __webpack_require__(73918);
class StyleSettingsEditorItem {
    constructor(args) {
        this._item = args.item;
        this._itemAdapter = _style_settings_adapters_1.styleSettingsAdapter(this._item);
        this._editorClickHandler = args.clickHandler;
        this._isSelected = args.isSelected;
        this._initialize({ isEmptyAllowed: args.isEmptyAllowed, isRange: args.isRange, isGradient: args.isGradient, restrictToColor: args.restrictToColor });
        this.colorPicker = new _popover_color_picker_1.PopoverColorPicker((style) => {
            if (style) {
                this._itemAdapter.setCustomColor(style);
                this._editorClickHandler('SaveColor');
            }
        });
        this.customizeAppearanceDialog = new _custom_appearance_dialog_1.CustomAppearanceDialog((style) => {
            if (style) {
                this._itemAdapter.setCustomAppearance(style);
                this._editorClickHandler('SaveAppearance');
            }
        });
    }
    clickHandlerCore(isRestrictToColor) {
        if (this._itemAdapter.hasCustomStyle() && (this._itemAdapter.isEmptyCustomStyle() || this._isSelected())) {
            this._showCustomStyleEditor(isRestrictToColor);
        }
        else {
            this._editorClickHandler('None');
        }
    }
    _showCustomStyleEditor(isRestrictToColor) {
        if (isRestrictToColor) {
            let color = this._itemAdapter.getCustomColor();
            this.colorPicker.show(color ? color : 'rgba(255,255,255,1)');
        }
        else {
            let appearance = this._itemAdapter.getCustomAppearance();
            this.customizeAppearanceDialog.show(appearance);
        }
        return {};
    }
    _initialize({ isEmptyAllowed, isRange, isGradient, restrictToColor }) {
        this.title = ko.pureComputed(() => this._itemAdapter.getLocalizedCaption());
        this.cssStyles = ko.pureComputed(() => this._itemAdapter.getCssStyles());
        this.cssClasses = ko.pureComputed(() => {
            const classes = this._itemAdapter.getCssClasses(isEmptyAllowed, isRange, isGradient);
            if (this._isSelected() && !isRange)
                classes.push('dx-state-selected');
            return classes.join(' ');
        });
        this.dataLabel = ko.pureComputed(() => this._itemAdapter.getLabelText(isRange, isGradient));
        this.isRangeStop = ko.pureComputed(() => isRange && isGradient && this._itemAdapter.getPredefinedStyle() !== 'None');
        this.clickHandler = isRange ? undefined : () => this.clickHandlerCore(restrictToColor);
    }
}
exports.StyleSettingsEditorItem = StyleSettingsEditorItem;
ko.components.register('dx-dashboard-style-settings-editor-item', {
    viewModel: {
        createViewModel: (params) => {
            return new StyleSettingsEditorItem(ko.unwrap(params.args));
        }
    },
    template: { element: 'dx-dashboard-style-settings-editor-item' }
});


/***/ }),

/***/ 78199:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StyleSettingsEditor = void 0;
const ko = __webpack_require__(71032);
const appearance_settings_1 = __webpack_require__(93722);
const icon_settings_1 = __webpack_require__(15958);
const _icon_settings_1 = __webpack_require__(25681);
const _style_settings_base_1 = __webpack_require__(86347);
const _conditional_formatting_custom_color_storage_1 = __webpack_require__(96107);
const _style_settings_adapters_1 = __webpack_require__(73918);
const _style_settings_palette_1 = __webpack_require__(79305);
class StyleSettingsEditor {
    constructor(target, params) {
        this.customColorsSupported = false;
        this.allowChangeViewMode = false;
        this.isGradient = false;
        this.isEmptyAllowed = false;
        this.restrictToColor = false;
        this.numberOfCustomStyleItems = 8;
        this.value = target;
        this.isEmptyAllowed = params.isEmptyAllowed;
        this.isGradient = params.appearanceMode === 'GradientColors';
        this.allowChangeViewMode = (this.value() instanceof appearance_settings_1.AppearanceSettings || this.value() instanceof icon_settings_1.IconSettings) && params.allowChangeViewMode;
        this.viewMode = ko.observable(this.value() instanceof icon_settings_1.IconSettings ? 'Icon' : 'Appearance');
        this.customColorsSupported = params.enableCustomStyles;
        this.restrictToColor = true;
        this.selectedChanged = params.selectedChanged;
        this.closeEditCell = params.closeEditCell || (() => { });
        const { predefinedStyles, predefinedIcons, customStyles } = this._createDataSources(params.appearanceMode, this.isEmptyAllowed, this.customColorsSupported, this.restrictToColor, this.value, _conditional_formatting_custom_color_storage_1.conditionalFormattingEditor);
        this.list = predefinedStyles;
        this.iconList = predefinedIcons;
        this.customStyleItems = customStyles;
    }
    _setStyleType(styleSettingsModel, saveCustomStyle) {
        const oldSelectedStyle = this.value();
        this.value(styleSettingsModel);
        if (this.selectedChanged) {
            this.selectedChanged(oldSelectedStyle, styleSettingsModel);
        }
        this.closeEditCell();
        switch (saveCustomStyle) {
            case 'SaveColor':
                const customColors = this.customStyleItems
                    .map(viewModel => viewModel.item)
                    .filter(model => !!model)
                    .map(model => _style_settings_adapters_1.styleSettingsAdapter(model).getCustomColor());
                _conditional_formatting_custom_color_storage_1.conditionalFormattingEditor.customColorStorage.setValue(customColors);
                break;
            case 'SaveAppearance':
                const customAppearances = this.customStyleItems
                    .map(viewModel => viewModel.item)
                    .filter(model => !!model)
                    .map(model => _style_settings_adapters_1.styleSettingsAdapter(model).getCustomAppearance());
                _conditional_formatting_custom_color_storage_1.conditionalFormattingEditor.customAppearanceStorage.setValue(customAppearances);
                break;
            case 'None':
            default:
                break;
        }
    }
    _createDataSources(mode, isEmptyAllowed, isCustomStyleEnabled, isCustomColorsOnly, selectedValue, customStylesProvider) {
        let predefinedAppearanceItems = [];
        let predefinedIconItems = [];
        let customStyleItems = null;
        let specificCustomItemType = undefined;
        switch (mode) {
            case 'Appearance':
                predefinedAppearanceItems = _style_settings_palette_1.Palette.standard;
                predefinedIconItems = Object.keys(_icon_settings_1.iconType.values).slice(1);
                specificCustomItemType = appearance_settings_1.AppearanceSettings;
                break;
            case 'AllColors':
                predefinedAppearanceItems = _style_settings_palette_1.Palette.allColors;
                break;
            case 'RichColors':
                predefinedAppearanceItems = _style_settings_palette_1.Palette.richColors;
                break;
            case 'GradientColors':
                predefinedAppearanceItems = _style_settings_palette_1.Palette.gradient;
                break;
        }
        if (isEmptyAllowed) {
            predefinedAppearanceItems = [_style_settings_base_1.emptyStyleType].concat(predefinedAppearanceItems);
            predefinedIconItems = predefinedIconItems.length ? [_style_settings_base_1.emptyStyleType].concat(predefinedIconItems) : [];
        }
        if (isCustomStyleEnabled) {
            const selectedItemAdapter = _style_settings_adapters_1.styleSettingsAdapter(selectedValue());
            if (isCustomColorsOnly) {
                customStyleItems = this._getCustomStyles(customStylesProvider.customColorStorage, selectedItemAdapter.hasCustomStyle() && selectedItemAdapter.getCustomColor())
                    .map(this.createItemViewModel(this.createCustomColorStyleSettingsModel(selectedValue(), specificCustomItemType), selectedValue));
            }
            else {
                customStyleItems = this._getCustomStyles(customStylesProvider.customAppearanceStorage, selectedItemAdapter.hasCustomStyle() && selectedItemAdapter.getCustomAppearance())
                    .map(this.createItemViewModel(this.createCustomAppearanceStyleSettingsModel(selectedValue(), specificCustomItemType), selectedValue));
            }
        }
        return {
            predefinedStyles: predefinedAppearanceItems.map(this.createItemViewModel(this.createStyleSettingsModel(selectedValue(), specificCustomItemType), selectedValue)),
            predefinedIcons: predefinedIconItems.map(this.createItemViewModel(this.createStyleSettingsModel(selectedValue(), icon_settings_1.IconSettings), selectedValue)),
            customStyles: customStyleItems
        };
    }
    _getCustomStyles(storage, selectedStyle) {
        const savedStyles = (storage && storage.getValue() || []);
        const styles = savedStyles.concat(Array.apply(null, Array(Math.max(this.numberOfCustomStyleItems - savedStyles.length, 0))));
        if (!!selectedStyle && styles.indexOf(selectedStyle) === -1) {
            let i = 0;
            for (; i < styles.length; i++) {
                if (!styles[i]) {
                    styles[i] = selectedStyle;
                    break;
                }
            }
            if (styles.length === i) {
                styles[styles.length - 1] = selectedStyle;
            }
        }
        return styles;
    }
    createStyleSettingsModel(selectedValue, stylesModelType) {
        return (item) => {
            const model = _style_settings_adapters_1.styleSettingsAdapter(selectedValue, stylesModelType).itemFactory();
            _style_settings_adapters_1.styleSettingsAdapter(model).setPredefinedStyle(item);
            return model;
        };
    }
    createCustomColorStyleSettingsModel(selectedValue, stylesModelType) {
        return (color) => {
            const model = this.createStyleSettingsModel(selectedValue, stylesModelType)('Custom');
            color && _style_settings_adapters_1.styleSettingsAdapter(model).setCustomColor(color);
            return model;
        };
    }
    createCustomAppearanceStyleSettingsModel(selectedValue, stylesModelType) {
        return (appearance) => {
            const model = this.createStyleSettingsModel(selectedValue, stylesModelType)('Custom');
            appearance && _style_settings_adapters_1.styleSettingsAdapter(model).setCustomAppearance(appearance);
            return model;
        };
    }
    createItemViewModel(modelFactory, selectedValue) {
        return (item) => {
            const itemModel = modelFactory(item);
            return {
                item: itemModel,
                clickHandler: (saveCustomStyle) => this._setStyleType(itemModel, saveCustomStyle),
                isSelected: ko.computed(() => !!itemModel.equals(selectedValue())),
                isEmptyAllowed: this.isEmptyAllowed,
                isRange: false,
                isGradient: this.isGradient,
                restrictToColor: this.restrictToColor
            };
        };
    }
}
exports.StyleSettingsEditor = StyleSettingsEditor;
ko.components.register('dx-dashboard-style-settings-editor', {
    viewModel: {
        createViewModel: (params) => {
            return new StyleSettingsEditor(ko.unwrap(params).target, ko.unwrap(params).options);
        }
    },
    template: { element: 'dx-dashboard-style-settings-editor' }
});


/***/ }),

/***/ 79305:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Palette = void 0;
const _style_settings_base_1 = __webpack_require__(86347);
exports.Palette = {
    standard: [
        'PaleRed',
        'PaleYellow',
        'PaleGreen',
        'PaleBlue',
        'PalePurple',
        'PaleCyan',
        'PaleOrange',
        'PaleGray',
        'Red',
        'Yellow',
        'Green',
        'Blue',
        'Purple',
        'Cyan',
        'Orange',
        'Gray',
        'FontBold',
        'FontItalic',
        'FontUnderline',
        'FontGrayed',
        'FontRed',
        'FontYellow',
        'FontGreen',
        'FontBlue'
    ],
    richColors: [
        'Red',
        'Yellow',
        'Green',
        'Blue',
        'Purple',
        'Cyan',
        'Orange',
        'Gray',
    ],
    allColors: [
        'PaleRed',
        'PaleYellow',
        'PaleGreen',
        'PaleBlue',
        'PalePurple',
        'PaleCyan',
        'PaleOrange',
        'PaleGray',
        'Red',
        'Yellow',
        'Green',
        'Blue',
        'Purple',
        'Cyan',
        'Orange',
        'Gray'
    ],
    gradient: [
        'GradientRed',
        'GradientYellow',
        'GradientGreen',
        'GradientBlue',
        'GradientPurple',
        'GradientCyan',
        'GradientOrange',
        'GradientTransparent'
    ],
    getLabelText: (type, empty) => {
        switch (type) {
            case _style_settings_base_1.emptyStyleType: return empty ? empty : 'No Style';
            case 'FontBold': return 'B';
            case 'FontItalic': return 'I';
            case 'FontUnderline': return 'U';
            case 'FontGrayed': return 'Gr';
            case 'FontRed': return 'R';
            case 'FontYellow': return 'Y';
            case 'FontGreen': return 'G';
            case 'FontBlue': return 'B';
            default: return '';
        }
    }
};


/***/ }),

/***/ 96107:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.conditionalFormattingEditor = exports.InMemoryStorage = void 0;
class InMemoryStorage {
    getValue() { return this.value; }
    setValue(value) { this.value = value; }
}
exports.InMemoryStorage = InMemoryStorage;
exports.conditionalFormattingEditor = {
    customColorStorage: new InMemoryStorage(),
    customAppearanceStorage: new InMemoryStorage()
};


/***/ }),

/***/ 66568:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomAppearanceDialog = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
class CustomAppearanceDialog {
    constructor(setAppearance) {
        this.setAppearance = setAppearance;
        this.visible = ko.observable(false);
        this.appearance = ko.observable();
        this.appearanceWrapper = {};
        this.items = [{
                label: { text: 'Font family' },
                dataField: 'fontFamily',
                editorType: 'dxSelectBox',
                editorOptions: {
                    dataSource: [
                        'Arial',
                        'Segoe UI',
                        'Tahoma',
                        'Times New Roman',
                    ]
                }
            }, {
                label: { text: 'Bold' },
                dataField: 'bold',
                editorType: 'dxCheckBox',
                editorOptions: {}
            }, {
                label: { text: 'Italic' },
                dataField: 'italic',
                editorType: 'dxCheckBox',
                editorOptions: {}
            }, {
                label: { text: 'Underline' },
                dataField: 'underline',
                editorType: 'dxCheckBox',
                editorOptions: {}
            }, {
                label: { text: 'Strikeout' },
                dataField: 'strikeout',
                editorType: 'dxCheckBox',
                editorOptions: {}
            }, {
                label: { text: 'Background color' },
                dataField: 'backColor',
                editorType: 'dxColorBox',
                editorOptions: {}
            }, {
                label: { text: 'Foreground color' },
                dataField: 'foreColor',
                editorType: 'dxColorBox',
                editorOptions: {}
            }];
        this.buttonItems = ko.observableArray([
            {
                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                    text: _default_1.getLocalizationById('DashboardWebStringId.ButtonConfirm'), onClick: () => {
                        this.setValue(this.appearanceWrapper);
                        this.setAppearance(this.appearance());
                        this.visible(false);
                    }
                }
            },
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: _default_1.getLocalizationById('DashboardStringId.ButtonCancel'), onClick: () => this.visible(false) } }
        ]);
    }
    show(appearance) {
        const styles = appearance && appearance.fontStyle && appearance.fontStyle.split(',').filter(item => !!item).map(item => item.trim()) || [];
        this.appearanceWrapper = {
            backColor: appearance && appearance.backColor,
            foreColor: appearance && appearance.foreColor,
            fontFamily: appearance && appearance.fontFamily,
            bold: styles.indexOf('Bold') !== -1,
            italic: styles.indexOf('Italic') !== -1,
            underline: styles.indexOf('Underline') !== -1,
            strikeout: styles.indexOf('Strikeout') !== -1,
        };
        this.visible(true);
    }
    setValue(value) {
        const styles = [];
        if (value.bold)
            styles.push('Bold');
        if (value.italic)
            styles.push('Italic');
        if (value.underline)
            styles.push('Underline');
        if (value.strikeout)
            styles.push('Strikeout');
        const appearance = {
            backColor: value.backColor,
            foreColor: value.foreColor,
            fontFamily: value.fontFamily,
            fontStyle: styles.length ? styles.join(', ') : null
        };
        this.appearance(appearance);
    }
}
exports.CustomAppearanceDialog = CustomAppearanceDialog;


/***/ }),

/***/ 49169:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PopoverColorPicker = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
class PopoverColorPicker {
    constructor(setColor) {
        this.setColor = setColor;
        this.color = ko.observable('');
        this.visible = ko.observable(false);
        this.buttonItems = ko.observableArray([
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: _default_1.getLocalizationById('DashboardWebStringId.ButtonConfirm'), onClick: () => {
                        this.setColor(this.color());
                        this.visible(false);
                    } } },
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: _default_1.getLocalizationById('DashboardStringId.ButtonCancel'), onClick: () => this.visible(false) } }
        ]);
    }
    show(color) {
        this.color(color);
        this.visible(true);
    }
}
exports.PopoverColorPicker = PopoverColorPicker;


/***/ }),

/***/ 67551:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardItemConditionTypeFilters = exports.createCardItemDeltaFormatRulePropertiesComposer = exports.isDeltaFormatRuleAvaliable = exports.createCardItemFormatRulePropertiesComposer = exports.isDataItemFormatRuleAvaliable = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const model_1 = __webpack_require__(14198);
const card_item_delta_format_rule_1 = __webpack_require__(50075);
const card_item_format_rule_1 = __webpack_require__(22233);
const _card_format_rule_row_element_1 = __webpack_require__(47976);
const _card_item_delta_format_rule_1 = __webpack_require__(2357);
const _card_item_format_rule_1 = __webpack_require__(47729);
const _card_item_format_rule_base_1 = __webpack_require__(8943);
const _card_layout_template_element_1 = __webpack_require__(5691);
const _delta_options_1 = __webpack_require__(62800);
const _base_metadata_1 = __webpack_require__(17916);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _display_name_provider_1 = __webpack_require__(8464);
const _shared_format_rule_properties_composer_1 = __webpack_require__(740);
function getCardItemFormatRuleDataItems(dashboardItem) {
    return dashboardItem.seriesDimensions().concat(dashboardItem.hiddenMeasures());
}
function isDataItemFormatRuleAvaliable(dashboardItem) {
    return getCardItemFormatRuleDataItems(dashboardItem).length > 0;
}
exports.isDataItemFormatRuleAvaliable = isDataItemFormatRuleAvaliable;
function createCardItemFormatRulePropertiesComposer(selectedRuleContainer) {
    return new _shared_format_rule_properties_composer_1.FormatRulePropertiesComposer({
        createDataTypeObservable: _shared_format_rule_properties_composer_1.createDataTypeObservable,
        getCommonFormatRuleProperties: (formatRule, dashboardItem, dataSourceBrowser) => {
            let propertiesInfo = {
                properties: [],
                disabledFilterRules: {},
                dynamicEditorRules: {},
                visibilityFilterRules: {}
            };
            var dataItems = getCardItemFormatRuleDataItems(dashboardItem);
            let dataItemsDisplayText = ko.pureComputed(() => dataItems.map(dataItem => {
                return {
                    value: dataItem.uniqueName(),
                    displayValueId: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dashboardItem, dataItem)
                };
            }));
            if (!formatRule.dataItemName() && dataItems.length) {
                formatRule.dataItemName(dataItems[0].uniqueName());
            }
            propertiesInfo.properties.push(Object.assign(Object.assign({}, _card_item_format_rule_1.cardItemformatRuleDataItem), { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor({ values: dataItemsDisplayText }) }));
            return getCommonCardFormatRuleProperties(formatRule, dashboardItem, propertiesInfo, selectedRuleContainer);
        },
        getMiscFormatRuleProperties: () => ({ properties: [] }),
        conditionTypeFilter: exports.cardItemConditionTypeFilters,
        getConditionFormatRuleProperties: getConditionFormatRuleProperties,
    });
}
exports.createCardItemFormatRulePropertiesComposer = createCardItemFormatRulePropertiesComposer;
function cardItemDeltaFormatRuleCards(dashboardItem) {
    return dashboardItem.cards();
}
function isDeltaFormatRuleAvaliable(dashboardItem) {
    return cardItemDeltaFormatRuleCards(dashboardItem).length > 0;
}
exports.isDeltaFormatRuleAvaliable = isDeltaFormatRuleAvaliable;
function createCardItemDeltaFormatRulePropertiesComposer(selectedRuleContainer) {
    return new _shared_format_rule_properties_composer_1.FormatRulePropertiesComposer({
        createDataTypeObservable: _shared_format_rule_properties_composer_1.createDeltaDataTypeObservable,
        getCommonFormatRuleProperties: (formatRule, dashboardItem, dataSourceBrowser, requestRecalculation) => {
            let propertiesInfo = {
                properties: [],
                disabledFilterRules: {},
                dynamicEditorRules: {},
                visibilityFilterRules: {}
            };
            var card = cardItemDeltaFormatRuleCards(dashboardItem);
            let cardsDisplayText = ko.pureComputed(() => card.map(card => {
                return {
                    value: card._getDataId(),
                    displayValueId: _display_name_provider_1.getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, card)
                };
            }));
            if (!formatRule.cardId() && cardsDisplayText().length) {
                formatRule.cardId(cardsDisplayText()[0].value);
            }
            propertiesInfo.disabledFilterRules[_card_item_delta_format_rule_1.cardId.propertyName] = _ => !!formatRule.condition();
            propertiesInfo.disabledFilterRules[_card_item_delta_format_rule_1.deltaValueType.propertyName] = _ => !!formatRule.condition();
            propertiesInfo.properties.push(Object.assign(Object.assign({}, _card_item_delta_format_rule_1.cardId), { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor({ values: cardsDisplayText }) }));
            propertiesInfo.properties.push(Object.assign(Object.assign({}, _card_item_delta_format_rule_1.deltaValueType), { simpleFormAdapterItem: 'selectBoxEditor', values: _delta_options_1.deltaValueTypeMap }));
            propertiesInfo.properties.push(Object.assign(Object.assign({}, _card_item_delta_format_rule_1.deltaValueType), { replacementPropertyName: 'fakeDeltaValueTypeActual', sourceObject: ko.observable('ActualValue'), simpleFormAdapterItem: 'selectBoxEditor', values: { 'ActualValue': 'DashboardStringId.DeltaValueTypeActualValueCaption' } }));
            propertiesInfo.properties.push(Object.assign(Object.assign({}, _card_item_delta_format_rule_1.deltaValueType), { sourceObject: ko.observable('TargetValue'), replacementPropertyName: 'fakeDeltaValueTypeTarget', simpleFormAdapterItem: 'selectBoxEditor', values: { 'TargetValue': 'DashboardStringId.DeltaValueTypeTargetValueCaption' } }));
            const getActualCard = () => dashboardItem.cards().filter(card => card._getDataId() === formatRule.cardId())[0];
            const hasActualDataItem = () => !!getActualCard().actualValue();
            const hasTargetDataItem = () => !!getActualCard().targetValue();
            requestRecalculation.add(_ => {
                if (dashboardItem.formatRules.indexOf(formatRule) === -1) {
                    if (hasActualDataItem() && !hasTargetDataItem())
                        formatRule.deltaValueType('ActualValue');
                    else if (!hasActualDataItem() && hasTargetDataItem()) {
                        formatRule.deltaValueType('TargetValue');
                    }
                }
            });
            propertiesInfo.visibilityFilterRules[_card_item_delta_format_rule_1.deltaValueType.propertyName] = _ => hasActualDataItem() && hasTargetDataItem();
            propertiesInfo.visibilityFilterRules['fakeDeltaValueTypeActual'] = _ => hasActualDataItem() && !hasTargetDataItem();
            propertiesInfo.visibilityFilterRules['fakeDeltaValueTypeTarget'] = _ => !hasActualDataItem() && hasTargetDataItem();
            propertiesInfo.disabledFilterRules['fakeDeltaValueTypeActual'] = _ => true;
            propertiesInfo.disabledFilterRules['fakeDeltaValueTypeTarget'] = _ => true;
            return getCommonCardFormatRuleProperties(formatRule, dashboardItem, propertiesInfo, selectedRuleContainer);
        },
        getConditionFormatRuleProperties: getConditionFormatRuleProperties,
        getMiscFormatRuleProperties: () => ({ properties: [] }),
        conditionTypeFilter: exports.cardItemConditionTypeFilters
    });
}
exports.createCardItemDeltaFormatRulePropertiesComposer = createCardItemDeltaFormatRulePropertiesComposer;
function getConditionFormatRuleProperties(formatRule, dashboardItem, dataSourceBrowser) {
    let layoutElementTypeValues = Object.keys(_card_layout_template_element_1.cardFormatRuleLayoutElementValuesMap).map(key => {
        return { value: key, displayValue: _default_1.getLocalizationById(_card_layout_template_element_1.cardFormatRuleLayoutElementValuesMap[key]) };
    });
    layoutElementTypeValues.push({ value: 'Dimension', displayValue: _default_1.getLocalizationById('DashboardWebStringId.FormatRuleApplyToDimensionElement') });
    layoutElementTypeValues.push({ value: 'Text', displayValue: _default_1.getLocalizationById('DashboardWebStringId.FormatRuleApplyToTextElement') });
    let textEditorValues = getAllApplyToTextElements(formatRule, dashboardItem);
    let dimensionEditorValues = dashboardItem.seriesDimensions().map(dimension => {
        return { value: dimension.uniqueName(), displayValue: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dashboardItem, dimension) };
    });
    let visibilityFilterRules = {};
    visibilityFilterRules[_card_format_rule_row_element_1.dimensionId.propertyName] = (model) => model.elementTypeApplyTo() === 'Dimension';
    visibilityFilterRules[_card_format_rule_row_element_1.textId.propertyName] = (model) => model.elementTypeApplyTo() === 'Text';
    let properties = [{
            container: _card_item_format_rule_base_1.cardLayoutElement,
            properties: [
                Object.assign(Object.assign({}, _card_format_rule_row_element_1.elementTypeApplyTo), { valuesArray: layoutElementTypeValues }),
                Object.assign(Object.assign({}, _card_format_rule_row_element_1.dimensionId), { valuesArray: dimensionEditorValues }),
                Object.assign(Object.assign({}, _card_format_rule_row_element_1.textId), { valuesArray: textEditorValues })
            ]
        }];
    return {
        properties: properties,
        disabledFilterRules: {},
        dynamicEditorRules: {},
        visibilityFilterRules: visibilityFilterRules
    };
}
function getAllApplyToTextElements(formatRule, dashboardItem) {
    let isExpressionRule = formatRule.condition() instanceof model_1.FormatConditionExpression;
    let isHiddenMeasureRule = formatRule instanceof card_item_format_rule_1.CardItemFormatRule && dashboardItem.hiddenMeasures().filter(measure => measure.uniqueName() === formatRule.dataItemName()).length > 0;
    let affectedCards = isExpressionRule || isHiddenMeasureRule ? dashboardItem.cards() : [(dashboardItem.cards()[dashboardItem._selectedElementIndex() || 0])];
    return affectedCards.map(card => getCardApplyToTextElements(card)).reduce((prev, curr) => [...prev, ...curr]);
}
function getCardApplyToTextElements(card) {
    let textElements = getCardRows(card).map(row => row.elements().filter(element => element instanceof model_1.CardRowTextElement));
    if (textElements.length > 0) {
        return textElements.reduce((prev, current) => [...prev, ...current])
            .map(textElement => {
            return { value: textElement.text(), displayValue: textElement.text() };
        });
    }
    else
        return [];
}
function getCardRows(card) {
    let layoutTemplate = card.layoutTemplate();
    let layout = layoutTemplate ? layoutTemplate.layout : null;
    return layout ? layout.rows().filter(element => element instanceof model_1.CardRow) : [];
}
exports.cardItemConditionTypeFilters = {
    conditionTypeFilter: (conditionTypePropertyName) => {
        return ['conditionBar', 'conditionColorRangeBar', 'conditionGradientRangeBar'].indexOf(conditionTypePropertyName) === -1;
    }
};
function getCommonCardFormatRuleProperties(formatRule, dashboardItem, calculatedByProperties, selectedRuleContainer) {
    let propertiesInfo = {
        properties: [],
        disabledFilterRules: {},
        dynamicEditorRules: {},
        visibilityFilterRules: {}
    };
    let selectedRuleType = ko.observable(formatRule.itemType());
    selectedRuleType.subscribe(newSelectedContainer => {
        if (newSelectedContainer === 'CardItemFormatRule') {
            selectedRuleContainer(new card_item_format_rule_1.CardItemFormatRule());
        }
        else if (newSelectedContainer === 'CardItemDeltaFormatRule') {
            selectedRuleContainer(new card_item_delta_format_rule_1.CardItemDeltaFormatRule());
        }
    });
    propertiesInfo.properties.push(Object.assign(Object.assign({}, _base_metadata_1.itemType), { sourceObject: selectedRuleType, replacementPropertyName: 'selectedContainer', displayName: 'DashboardWebStringId.ConditionalFormatting.CalculatedBy', formAdapterItem: _form_adapter_editors_1.buttonGroupEditor([
            {
                displayValueId: 'DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard',
                value: 'CardItemDeltaFormatRule'
            },
            {
                displayValueId: 'DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem',
                value: 'CardItemFormatRule'
            }
        ]) }));
    propertiesInfo.disabledFilterRules['selectedContainer'] = m => !!formatRule.condition() || !isDeltaFormatRuleAvaliable(dashboardItem) || !isDataItemFormatRuleAvaliable(dashboardItem);
    propertiesInfo.properties.push(...calculatedByProperties.properties);
    propertiesInfo.disabledFilterRules = Object.assign(Object.assign({}, propertiesInfo.disabledFilterRules), calculatedByProperties.disabledFilterRules);
    propertiesInfo.dynamicEditorRules = Object.assign(Object.assign({}, propertiesInfo.dynamicEditorRules), calculatedByProperties.dynamicEditorRules);
    propertiesInfo.visibilityFilterRules = Object.assign(Object.assign({}, propertiesInfo.visibilityFilterRules), calculatedByProperties.visibilityFilterRules);
    return propertiesInfo;
}


/***/ }),

/***/ 10651:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getChartFormatRuleLegendSettingsTab = exports.chartFormatRuleConditionFilters = exports.getChartApplyToDataItems = exports.createChartItemFormatRulePropertiesComposer = void 0;
const ko = __webpack_require__(71032);
const model_1 = __webpack_require__(14198);
const format_condition_range_base_1 = __webpack_require__(80161);
const _chart_item_format_rule_1 = __webpack_require__(78320);
const _chart_item_format_rule_base_1 = __webpack_require__(38980);
const chart_series_1 = __webpack_require__(34303);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const _display_name_provider_1 = __webpack_require__(8464);
const _shared_format_rule_properties_composer_1 = __webpack_require__(740);
function createChartItemFormatRulePropertiesComposer() {
    const opts = {
        conditionTypeFilter: exports.chartFormatRuleConditionFilters,
        createDataTypeObservable: _shared_format_rule_properties_composer_1.createDataTypeObservable,
        getCommonFormatRuleProperties: (model, dashboardItem, dataSourceBrowser, ruleAdded) => getCommonChartFormatRuleProperties(model, getDataItems(dashboardItem, dataSourceBrowser), getChartApplyToDataItems(dashboardItem, dataSourceBrowser)),
        getConditionFormatRuleProperties: (model, dashboardItem, dataSourceBrowser) => ({
            properties: [_chart_item_format_rule_1.applyToChartElement],
            visibilityFilterRules: {
                [_chart_item_format_rule_1.applyToChartElement.propertyName]: _ => canChangeApplyToElement(dashboardItem, model)
            }
        }),
        getMiscFormatRuleProperties: () => ({ properties: [] }),
        getAdditionalTabs: (formatRule) => getChartFormatRuleLegendSettingsTab(formatRule),
    };
    return new _shared_format_rule_properties_composer_1.FormatRulePropertiesComposer(opts);
}
exports.createChartItemFormatRulePropertiesComposer = createChartItemFormatRulePropertiesComposer;
function getCommonChartFormatRuleProperties(formatRule, getDataItems, getApplyToDataItems) {
    const dataItems = ko.pureComputed(() => getDataItems().map((m) => ({ value: ko.unwrap(m.uniqueName), displayValueId: ko.unwrap(m.displayName) })));
    const applyToDataItems = ko.pureComputed(() => getApplyToDataItems().map((m) => ({ value: ko.unwrap(m.uniqueName), displayValueId: ko.unwrap(m.displayName) })));
    if (!formatRule.dataItemName() && dataItems().length) {
        formatRule.dataItemName(ko.unwrap(dataItems()[0].value));
    }
    const applyToDataItemsNames = applyToDataItems().map(di => ko.unwrap(di.value));
    if (!formatRule.dataItemApplyToName() && applyToDataItemsNames.length) {
        formatRule.dataItemApplyToName(applyToDataItemsNames[0]);
    }
    const commonProperties = [];
    commonProperties.push(Object.assign(Object.assign({}, _chart_item_format_rule_base_1.dataItemName), { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor({ values: dataItems }) }));
    commonProperties.push(Object.assign(Object.assign({}, _chart_item_format_rule_1.dataItemApplyToName), { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor({ values: applyToDataItems }) }));
    return {
        properties: commonProperties
    };
}
function getChartCFSeries(dashboardItem) {
    return []
        .concat(...dashboardItem.panes().map(pane => pane.series()))
        .filter(series => series._isConditionalFormattingSupported);
}
function getDataItems(dashboardItem, dataSourceBrowser) {
    return () => []
        .concat(...getChartCFSeries(dashboardItem).map(s => s._measures), dashboardItem.arguments(), dashboardItem.seriesDimensions(), dashboardItem.hiddenMeasures())
        .map(dataItem => ({
        uniqueName: dataItem.uniqueName(),
        displayName: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dashboardItem, dataItem)
    }));
}
function canChangeApplyToElement(chartItem, formatRule) {
    const unsupportedSimpleSeriesTypes = ['Bar', 'StackedBar', 'FullStackedBar', 'Point'];
    const unsupportedRangeSeriesTypes = ['SideBySideRangeBar'];
    const selectedSeries = chartItem
        .panes()
        .reduce((seriesCollection, pane) => [...seriesCollection, ...pane.series()], [])
        .filter(series => series._measures.some(measure => measure.uniqueName() === formatRule.dataItemApplyToName()))[0];
    return (selectedSeries instanceof chart_series_1.SimpleSeries && unsupportedSimpleSeriesTypes.indexOf(selectedSeries.seriesType()) === -1)
        || (selectedSeries instanceof chart_series_1.RangeSeries && unsupportedRangeSeriesTypes.indexOf(selectedSeries.seriesType()) === -1);
}
function getChartApplyToDataItems(dashboardItem, dataSourceBrowser) {
    return () => getChartCFSeries(dashboardItem).reduce((result, series) => {
        result.push({
            uniqueName: series._getDataId(),
            displayName: series.name() || _display_name_provider_1.getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, series)
        });
        return result;
    }, []);
}
exports.getChartApplyToDataItems = getChartApplyToDataItems;
exports.chartFormatRuleConditionFilters = {
    conditionTypeFilter: (name, subType) => {
        const disabledTypes = [{
                name: 'conditionBar'
            }, {
                name: 'conditionColorRangeBar'
            }, {
                name: 'conditionGradientRangeBar'
            }, {
                name: 'conditionRangeSet',
                subType: 'icons'
            }];
        return disabledTypes.filter(item => item.name === name && (!item.subType || item.subType === subType)).length === 0;
    },
    rangeGradientPredefinedTypeFilter: (type) => {
        var validTypes = [
            model_1.FormatConditionRangeGradientPredefinedType.YellowGreen,
            model_1.FormatConditionRangeGradientPredefinedType.GreenYellow,
            model_1.FormatConditionRangeGradientPredefinedType.YellowRed,
            model_1.FormatConditionRangeGradientPredefinedType.RedYellow,
            model_1.FormatConditionRangeGradientPredefinedType.BlueRed,
            model_1.FormatConditionRangeGradientPredefinedType.RedBlue,
            model_1.FormatConditionRangeGradientPredefinedType.YellowBlue,
            model_1.FormatConditionRangeGradientPredefinedType.BlueYellow,
            model_1.FormatConditionRangeGradientPredefinedType.GreenBlue,
            model_1.FormatConditionRangeGradientPredefinedType.BlueGreen,
            model_1.FormatConditionRangeGradientPredefinedType.GreenYellowRed,
            model_1.FormatConditionRangeGradientPredefinedType.RedYellowGreen,
            model_1.FormatConditionRangeGradientPredefinedType.BlueYellowRed,
            model_1.FormatConditionRangeGradientPredefinedType.RedYellowBlue,
            model_1.FormatConditionRangeGradientPredefinedType.GreenYellowBlue,
            model_1.FormatConditionRangeGradientPredefinedType.BlueYellowGreen
        ];
        return validTypes.indexOf(type) !== -1;
    },
    rangeSetPredefinedTypeFilter: (type) => {
        var validTypes = [
            model_1.FormatConditionRangeSetPredefinedType.ColorsRedGreen,
            model_1.FormatConditionRangeSetPredefinedType.ColorsRedGreenBlue,
            model_1.FormatConditionRangeSetPredefinedType.ColorsRedYellowGreenBlue,
            model_1.FormatConditionRangeSetPredefinedType.ColorsRedOrangeYellowGreenBlue
        ];
        return validTypes.indexOf(type) !== -1;
    }
};
function getChartFormatRuleLegendSettingsTab(formatRule) {
    const tab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.FormatRuleChartLegend, 'DashboardWebStringId.AccordionTab.ChartLegend');
    const wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
        model: formatRule,
        properties: [_chart_item_format_rule_base_1.displayName, _chart_item_format_rule_base_1.showInLegend],
        disabledFilterRules: {
            [_chart_item_format_rule_base_1.showInLegend.propertyName]: _ => !(formatRule.displayName() || formatRule.condition() instanceof format_condition_range_base_1.FormatConditionRangeBase)
        },
        visibilityFilterRules: {
            [_chart_item_format_rule_base_1.displayName.propertyName]: _ => !(formatRule.condition() instanceof format_condition_range_base_1.FormatConditionRangeBase)
        }
    });
    tab.tabModel(wrapper);
    return [tab];
}
exports.getChartFormatRuleLegendSettingsTab = getChartFormatRuleLegendSettingsTab;


/***/ }),

/***/ 13861:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createGridItemFormatRulePropertiesComposer = void 0;
const _default_1 = __webpack_require__(65855);
const _cells_item_format_rule_1 = __webpack_require__(42079);
const grid_columns_1 = __webpack_require__(27233);
const _section_descriptors_1 = __webpack_require__(70990);
const _display_name_provider_1 = __webpack_require__(8464);
const _shared_format_rule_properties_composer_1 = __webpack_require__(740);
function createGridItemFormatRulePropertiesComposer() {
    return new _shared_format_rule_properties_composer_1.FormatRulePropertiesComposer({
        createDataTypeObservable: _shared_format_rule_properties_composer_1.createDataTypeObservable,
        getCommonFormatRuleProperties: (formatRule, dashboardItem, dataSourceBrowser) => {
            return _shared_format_rule_properties_composer_1.getCommonCellsFormatRuleProperties(formatRule, grabDataItems(dashboardItem, dataSourceBrowser), grapApplyToItems(dashboardItem, dataSourceBrowser));
        },
        getConditionFormatRuleProperties: () => ({ properties: [] }),
        getMiscFormatRuleProperties: getMiscFormatRuleProperties
    });
}
exports.createGridItemFormatRulePropertiesComposer = createGridItemFormatRulePropertiesComposer;
function getMiscFormatRuleProperties(formatRule, dashboardItem, dataSourceBrowser) {
    let visibilityRules = {};
    visibilityRules[_cells_item_format_rule_1.applyToRow.propertyName] = m => !formatRule.condition()._isApplyToRowColumnRestricted;
    return {
        properties: [_cells_item_format_rule_1.applyToRow],
        visibilityFilterRules: visibilityRules
    };
}
function grabDataItems(dashboardItem, dataSourceBrowser) {
    return () => dashboardItem
        .columns()
        .filter(c => !(c instanceof grid_columns_1.GridDeltaColumn) && !(c instanceof grid_columns_1.GridSparklineColumn))
        .map(c => ({
        uniqueName: c.actualDataItem.uniqueName(),
        displayName: _display_name_provider_1.getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, c)
    }))
        .concat(dashboardItem
        .hiddenMeasures()
        .map(m => ({
        uniqueName: m.uniqueName(),
        displayName: _default_1.getLocalizationById(_section_descriptors_1.SectionDescriptors.HiddenMeasures.title) + ' - ' + _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dashboardItem, m)
    })));
}
function grapApplyToItems(dashboardItem, dataSourceBrowser) {
    return () => dashboardItem
        .columns()
        .filter(c => !(c instanceof grid_columns_1.GridDeltaColumn))
        .map(c => {
        return {
            uniqueName: c.actualDataItem.uniqueName,
            displayName: _display_name_provider_1.getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, c)
        };
    });
}


/***/ }),

/***/ 62980:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createPivotItemFormatRulePropertiesComposer = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const model_1 = __webpack_require__(14198);
const _cells_item_format_rule_1 = __webpack_require__(42079);
const _pivot_item_format_rule_1 = __webpack_require__(36503);
const _pivot_item_format_rule_level_1 = __webpack_require__(40649);
const _form_adapter_1 = __webpack_require__(16744);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _section_descriptors_1 = __webpack_require__(70990);
const _display_name_provider_1 = __webpack_require__(8464);
const _shared_format_rule_properties_composer_1 = __webpack_require__(740);
function createPivotItemFormatRulePropertiesComposer() {
    return new _shared_format_rule_properties_composer_1.FormatRulePropertiesComposer({
        createDataTypeObservable: _shared_format_rule_properties_composer_1.createDataTypeObservable,
        getCommonFormatRuleProperties: (formatRule, dashboardItem, dataSourceBrowser) => {
            let info = _shared_format_rule_properties_composer_1.getCommonCellsFormatRuleProperties(formatRule, grabDataItems(dashboardItem, dataSourceBrowser), grapApplyToItems(dashboardItem, dataSourceBrowser));
            if (!info.disabledFilterRules)
                info.disabledFilterRules = {};
            info.disabledFilterRules[_cells_item_format_rule_1.dataItemApplyTo.propertyName] = (m) => {
                let pivot = dashboardItem;
                return !(pivot.values().filter(v => v.uniqueName() === m.dataItemName()).length
                    || pivot.hiddenMeasures().filter(v => v.uniqueName() === m.dataItemName()).length);
            };
            return info;
        },
        getConditionFormatRuleProperties: () => ({ properties: [] }),
        getMiscFormatRuleProperties: getMiscFormatRuleProperties
    });
}
exports.createPivotItemFormatRulePropertiesComposer = createPivotItemFormatRulePropertiesComposer;
function getMiscFormatRuleProperties(formatRule, pivot, dataSourceBrowser) {
    let visibilityRules = {};
    let properties = [];
    let intersectionLevelModeValuesObservable = ko.observable(_form_adapter_1.transformValuesDictionary(_pivot_item_format_rule_1.intersectionLevelModeValues));
    ko.computed(() => {
        if ((formatRule.condition() instanceof model_1.FormatConditionRangeBase && formatRule.condition().valueType() !== 'Number')
            || formatRule.condition() instanceof model_1.FormatConditionTopBottom
            || formatRule.condition() instanceof model_1.FormatConditionAverage) {
            intersectionLevelModeValuesObservable(_form_adapter_1.transformValuesDictionary(_pivot_item_format_rule_1.restrictedIntersectionLevelModeValues));
        }
        else {
            intersectionLevelModeValuesObservable(_form_adapter_1.transformValuesDictionary(_pivot_item_format_rule_1.intersectionLevelModeValues));
        }
    });
    properties.push(Object.assign(Object.assign({}, _pivot_item_format_rule_1.intersectionLevelMode), { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor({ values: intersectionLevelModeValuesObservable }) }));
    properties.push({
        container: _pivot_item_format_rule_1.pivotLevel,
        properties: [
            Object.assign({ valuesArray: [{ value: null, displayValue: '[Grand Total]' }].concat(pivot.columns().map(m => ({ value: m.uniqueName(), displayValue: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, pivot, m) }))) }, _pivot_item_format_rule_level_1.pivotLevelColumn),
            Object.assign({ valuesArray: [{ value: null, displayValue: '[Grand Total]' }].concat(pivot.rows().map(m => ({ value: m.uniqueName(), displayValue: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, pivot, m) }))) }, _pivot_item_format_rule_level_1.pivotLevelRow)
        ]
    });
    properties.push(_pivot_item_format_rule_1.applyToColumn);
    properties.push(_cells_item_format_rule_1.applyToRow);
    let isMeasure = !!pivot.values().filter(v => v.uniqueName() === formatRule.dataItemApplyToName()).length;
    visibilityRules[_cells_item_format_rule_1.applyToRow.propertyName] = m => !formatRule.condition()._isApplyToRowColumnRestricted && isMeasure;
    visibilityRules[_pivot_item_format_rule_1.applyToColumn.propertyName] = m => !formatRule.condition()._isApplyToRowColumnRestricted && isMeasure;
    visibilityRules[_pivot_item_format_rule_level_1.pivotLevelColumn.propertyName] =
        [_pivot_item_format_rule_1.intersectionLevelMode.propertyName, '=', 'SpecificLevel'];
    visibilityRules[_pivot_item_format_rule_level_1.pivotLevelRow.propertyName] =
        [_pivot_item_format_rule_1.intersectionLevelMode.propertyName, '=', 'SpecificLevel'];
    return {
        properties: properties,
        visibilityFilterRules: visibilityRules
    };
}
function grabDataItems(dashboardItem, dataSourceBrowser) {
    return () => grapApplyToItems(dashboardItem, dataSourceBrowser)()
        .concat(dashboardItem
        .hiddenMeasures()
        .map(m => ({
        uniqueName: m.uniqueName(),
        displayName: _default_1.getLocalizationById(_section_descriptors_1.SectionDescriptors.HiddenMeasures.title) + ' - ' + _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dashboardItem, m)
    })));
}
function grapApplyToItems(pivot, dataSourceBrowser) {
    return () => pivot.values().map(m => ({
        uniqueName: m.uniqueName(),
        displayName: _default_1.getLocalizationById(_section_descriptors_1.SectionDescriptors.Values.title) + ' - ' + _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, pivot, m)
    })).concat(pivot.columns().map(d => ({
        uniqueName: d.uniqueName(),
        displayName: _default_1.getLocalizationById(_section_descriptors_1.SectionDescriptors.Columns.title) + ' - ' + _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, pivot, d)
    }))).concat(pivot.rows().map(d => ({
        uniqueName: d.uniqueName(),
        displayName: _default_1.getLocalizationById(_section_descriptors_1.SectionDescriptors.Rows.title) + ' - ' + _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, pivot, d)
    })));
}


/***/ }),

/***/ 94927:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createScatterChartItemFormatRulePropertiesComposer = void 0;
const ko = __webpack_require__(71032);
const _chart_item_format_rule_base_1 = __webpack_require__(38980);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _display_name_provider_1 = __webpack_require__(8464);
const _chart_item_format_rule_properties_composer_1 = __webpack_require__(10651);
const _shared_format_rule_properties_composer_1 = __webpack_require__(740);
function createScatterChartItemFormatRulePropertiesComposer() {
    const opts = {
        conditionTypeFilter: _chart_item_format_rule_properties_composer_1.chartFormatRuleConditionFilters,
        createDataTypeObservable: _shared_format_rule_properties_composer_1.createDataTypeObservable,
        getCommonFormatRuleProperties: (formatRule, dashboardItem, dataSourceBrowser) => getCommonScatterChartFormatRuleProperties(formatRule, getDataItems(dashboardItem, dataSourceBrowser)),
        getConditionFormatRuleProperties: (formatRule, dashboardItem, dataSourceBrowser) => ({ properties: [] }),
        getMiscFormatRuleProperties: () => ({ properties: [] }),
        getAdditionalTabs: (formatRule) => _chart_item_format_rule_properties_composer_1.getChartFormatRuleLegendSettingsTab(formatRule),
    };
    return new _shared_format_rule_properties_composer_1.FormatRulePropertiesComposer(opts);
}
exports.createScatterChartItemFormatRulePropertiesComposer = createScatterChartItemFormatRulePropertiesComposer;
function getCommonScatterChartFormatRuleProperties(formatRule, getDataItems) {
    const dataItems = ko.pureComputed(() => getDataItems().map((m) => ({ value: ko.unwrap(m.uniqueName), displayValueId: ko.unwrap(m.displayName) })));
    if (!formatRule.dataItemName() && dataItems().length) {
        formatRule.dataItemName(ko.unwrap(dataItems()[0].value));
    }
    return {
        properties: [Object.assign(Object.assign({}, _chart_item_format_rule_base_1.dataItemName), { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor({ values: dataItems }) })]
    };
}
function getDataItems(dashboardItem, dataSourceBrowser) {
    return () => [
        dashboardItem.axisXMeasure(),
        dashboardItem.axisYMeasure(),
        dashboardItem.weight(),
        ...dashboardItem.arguments(),
        ...dashboardItem.hiddenMeasures(),
    ]
        .filter(dataItem => !!dataItem)
        .map(dataItem => ({
        uniqueName: dataItem.uniqueName(),
        displayName: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dashboardItem, dataItem)
    }));
}


/***/ }),

/***/ 740:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCommonCellsFormatRuleProperties = exports.addConditionEditor = exports.createDataTypeObservable = exports.createDeltaDataTypeObservable = exports.FormatRulePropertiesComposer = void 0;
const ko = __webpack_require__(71032);
const common_1 = __webpack_require__(50999);
const _default_1 = __webpack_require__(65855);
const model_1 = __webpack_require__(14198);
const dimension_1 = __webpack_require__(48336);
const measure_1 = __webpack_require__(17012);
const enums_1 = __webpack_require__(76114);
const format_condition_average_1 = __webpack_require__(92610);
const format_condition_expression_1 = __webpack_require__(92267);
const format_condition_top_bottom_1 = __webpack_require__(2407);
const _format_condition_bar_1 = __webpack_require__(93881);
const _format_condition_bar_options_1 = __webpack_require__(98602);
const _format_condition_date_occuring_1 = __webpack_require__(30692);
const _format_condition_expression_1 = __webpack_require__(29786);
const _format_condition_min_max_base_1 = __webpack_require__(58053);
const _format_condition_top_bottom_1 = __webpack_require__(79380);
const _format_condition_value_1 = __webpack_require__(57912);
const _format_condition_range_base_1 = __webpack_require__(98827);
const _format_condition_range_gradient_1 = __webpack_require__(30634);
const _cells_item_format_rule_1 = __webpack_require__(42079);
const _dashboard_item_format_rule_1 = __webpack_require__(41938);
const _format_rules_common_1 = __webpack_require__(94102);
const _helper_classes_1 = __webpack_require__(8384);
const _knockout_utils_1 = __webpack_require__(4437);
const _parameters_helper_1 = __webpack_require__(57914);
const _filter_utils_1 = __webpack_require__(87524);
const _item_filter_display_name_provider_1 = __webpack_require__(45834);
const _item_filter_items_provider_1 = __webpack_require__(14716);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
class FormatRulePropertiesComposer {
    constructor(_options) {
        this._options = _options;
    }
    composeTabs(model, args) {
        const commonTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.FormatRuleCommon, 'DashboardWebStringId.AccordionTab.Common');
        const conditionTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.FormatRuleCondition, 'DashboardWebStringId.ConditionalFormatting.Condition');
        const miscTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.FormatRuleMisc, 'DashboardWebStringId.ConditionalFormatting.Miscellaneous');
        let additionalTabs = [];
        this._fillCommonFormatRuleCommonWrapper(commonTab, model, args.dashboardItem, args.dataSourceBrowser, args.requestRecalculation, args.specificTypeChanged);
        if (ko.unwrap(model && model.condition)) {
            this._fillConditionWrapper(conditionTab, model, args.dashboardItem, args.dataSourceBrowser);
            additionalTabs = this._options.getAdditionalTabs && this._options.getAdditionalTabs(model, args.dashboardItem, args.dataSourceBrowser);
            this._fillMiscWrapper(miscTab, model, args.dashboardItem, args.dataSourceBrowser);
        }
        return [commonTab, conditionTab, ...(additionalTabs || []), miscTab].filter(tab => !!tab);
    }
    _fillCommonFormatRuleCommonWrapper(tab, formatRule, dashboardItem, dataSourceBrowser, requestRecalculation, specificTypeChanged) {
        let propertiesInfo = this._options.getCommonFormatRuleProperties(formatRule, dashboardItem, dataSourceBrowser, requestRecalculation);
        let disabledRules = {};
        const dataType = this._options.createDataTypeObservable(formatRule, dashboardItem, dataSourceBrowser);
        disabledRules[_cells_item_format_rule_1.formatRuleDataItem.propertyName] = () => !!ko.unwrap(formatRule.condition);
        disabledRules['typeChooser'] = function () { return !!ko.unwrap(formatRule.condition); };
        let wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: formatRule,
            visibilityFilterRules: propertiesInfo.visibilityFilterRules,
            properties: propertiesInfo.properties,
            disabledFilterRules: Object.assign(Object.assign({}, disabledRules), propertiesInfo.disabledFilterRules)
        });
        addConditionEditor(wrapper, dataType, formatRule, dashboardItem, requestRecalculation, specificTypeChanged, this._options.conditionTypeFilter);
        tab.tabModel(wrapper);
    }
    _fillConditionWrapper(tab, model, dashboardItem, dataSourceBrowser) {
        let p = [];
        let visibilityRules = {};
        visibilityRules[_format_condition_range_base_1.rangeValueType.propertyName] = () => model.condition() && !model.condition().dateTimeGroupInterval();
        let isChartItem = dashboardItem instanceof model_1.ChartItem || dashboardItem instanceof model_1.ScatterChartItem;
        let simpleStylesAppearance = isChartItem ? 'RichColors' : 'Appearance';
        let barStylesAppearance = 'AllColors';
        let gradientStylesAppearance = 'GradientColors';
        let simpleStyleSettingsEditorOptions = {
            allowChangeViewMode: !isChartItem,
            appearanceMode: simpleStylesAppearance,
            isEmptyAllowed: false,
            enableCustomStyles: isChartItem
        };
        let barStyleSettingsEditorOptions = {
            allowChangeViewMode: false,
            appearanceMode: barStylesAppearance,
            isEmptyAllowed: false,
            enableCustomStyles: true
        };
        switch (model.condition() && model.condition().constructor) {
            case model_1.FormatConditionValue:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [{
                            container: _format_condition_value_1.formatConditionValue1,
                            properties: [
                                Object.assign({ simpleFormAdapterItem: _parameters_helper_1.ParameterHelper.getEditorType(model.condition()[_format_condition_value_1.formatConditionValue1.propertyName].type()), displayName: 'DashboardStringId.ValueCaption', replacementPropertyName: 'value1_value' }, _format_rules_common_1.complexValueValue)
                            ]
                        }, {
                            container: _format_condition_value_1.formatConditionValue2,
                            properties: [Object.assign({ simpleFormAdapterItem: _parameters_helper_1.ParameterHelper.getEditorType(model.condition()[_format_condition_value_1.formatConditionValue1.propertyName].type()), displayName: 'DashboardStringId.Value2Caption', replacementPropertyName: 'value2_value' }, _format_rules_common_1.complexValueValue)]
                        }, Object.assign(Object.assign({}, _format_rules_common_1.styleSettings), { formAdapterItem: _form_adapter_editors_1.styleSettingsEditor(simpleStyleSettingsEditorOptions) }), _format_condition_value_1.conditionInCondition,]
                });
                visibilityRules['value2_value'] =
                    [_format_condition_value_1.conditionInCondition.propertyName, 'contains', 'Between'];
                visibilityRules[_format_condition_value_1.conditionInCondition.propertyName] = () => false;
                break;
            case format_condition_top_bottom_1.FormatConditionTopBottom:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        Object.assign(Object.assign({}, _format_rules_common_1.styleSettings), { formAdapterItem: _form_adapter_editors_1.styleSettingsEditor(simpleStyleSettingsEditorOptions) }),
                        _format_condition_top_bottom_1.rank,
                        _format_condition_top_bottom_1._actualRankType
                    ]
                });
                break;
            case format_condition_average_1.FormatConditionAverage:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        Object.assign(Object.assign({}, _format_rules_common_1.styleSettings), { formAdapterItem: _form_adapter_editors_1.styleSettingsEditor(simpleStyleSettingsEditorOptions) }),
                    ]
                });
                break;
            case model_1.FormatConditionDateOccurring:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        Object.assign(Object.assign({}, _format_rules_common_1.styleSettings), { formAdapterItem: _form_adapter_editors_1.styleSettingsEditor(simpleStyleSettingsEditorOptions) }),
                        Object.assign(Object.assign({}, _format_condition_date_occuring_1.dateType), { formAdapterItem: _form_adapter_editors_1.flagsEnumTagBoxEditor({
                                values: _format_condition_date_occuring_1.baseDateTypeValues.concat(common_1.LegacySettings.showExtendedDateOccurringList ? _format_condition_date_occuring_1.extendedDateTypeValues : []),
                                enumDeclaration: enums_1.FilterDateType
                            }) })
                    ]
                });
                break;
            case format_condition_expression_1.FormatConditionExpression:
                let expressionCondition = model.condition();
                let ruleExpressionEditorParams = {
                    fieldListProvider: ko.observable(new _item_filter_items_provider_1.ItemFilterItemsProvider(dataSourceBrowser, dataSourceBrowser, dataSourceBrowser.parameters, dashboardItem, (di) => dashboardItem._conditionFormattingExpressionEditorFilter(di))),
                    options: _filter_utils_1.createItemFilterOptions(expressionCondition.expression, expressionCondition, dataSourceBrowser, { text: 'Expression', localizationId: 'DashboardStringId.CommandFormatRuleExpression' }),
                    displayNameProvider: new _item_filter_display_name_provider_1.ItemFilterDisplayNameProvider(dashboardItem, dataSourceBrowser)
                };
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        Object.assign(Object.assign({}, _format_condition_expression_1.formatConditionFilter), { formAdapterItem: _form_adapter_editors_1.filterEditor(ruleExpressionEditorParams) }),
                        Object.assign(Object.assign({}, _format_rules_common_1.styleSettings), { formAdapterItem: _form_adapter_editors_1.styleSettingsEditor(simpleStyleSettingsEditorOptions) }),
                    ]
                });
                break;
            case model_1.FormatConditionBar:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        _format_condition_min_max_base_1.minimumType,
                        _format_condition_min_max_base_1.formatConditionMinimum,
                        _format_condition_min_max_base_1.maximumType,
                        _format_condition_min_max_base_1.formatConditionMaximum,
                        _format_condition_bar_1.barCurrentStyleSettingsType,
                        Object.assign(Object.assign({}, _format_condition_bar_1.barCurrentStyleSettings), { formAdapterItem: _form_adapter_editors_1.styleSettingsEditor(barStyleSettingsEditorOptions) }),
                        {
                            container: _format_rules_common_1.barOptions,
                            properties: [
                                _format_condition_bar_options_1.allowNegativeAxis,
                                _format_condition_bar_options_1.drawAxis,
                                _format_condition_bar_options_1.showBarOnly
                            ]
                        }
                    ]
                });
                visibilityRules[_format_condition_min_max_base_1.formatConditionMinimum.propertyName] = [_format_condition_min_max_base_1.minimumType.propertyName, '<>', 'Automatic'];
                visibilityRules[_format_condition_min_max_base_1.formatConditionMaximum.propertyName] = [_format_condition_min_max_base_1.maximumType.propertyName, '<>', 'Automatic'];
                break;
            case model_1.FormatConditionColorRangeBar:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        _format_condition_range_base_1.rangeValueType,
                        Object.assign(Object.assign({}, _format_condition_range_base_1.rangeSet), { formAdapterItem: _form_adapter_editors_1.ruleRangesEditor({ condition: model.condition(), appearanceMode: barStylesAppearance, enableCustomStyles: true }) }),
                        {
                            container: _format_rules_common_1.barOptions,
                            properties: [
                                _format_condition_bar_options_1.allowNegativeAxis,
                                _format_condition_bar_options_1.drawAxis,
                                _format_condition_bar_options_1.showBarOnly
                            ]
                        }
                    ]
                });
                break;
            case model_1.FormatConditionGradientRangeBar:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        _format_condition_range_base_1.rangeValueType,
                        _format_condition_range_gradient_1.segmentNumber,
                        Object.assign(Object.assign({}, _format_condition_range_base_1.rangeSet), { formAdapterItem: _form_adapter_editors_1.ruleRangesEditor({ condition: model.condition(), appearanceMode: gradientStylesAppearance, enableCustomStyles: true }) }),
                        {
                            container: _format_rules_common_1.barOptions,
                            properties: [
                                _format_condition_bar_options_1.allowNegativeAxis,
                                _format_condition_bar_options_1.drawAxis,
                                _format_condition_bar_options_1.showBarOnly
                            ]
                        }
                    ]
                });
                break;
            case model_1.FormatConditionRangeGradient:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        _format_condition_range_base_1.rangeValueType,
                        _format_condition_range_gradient_1.segmentNumber,
                        Object.assign(Object.assign({}, _format_condition_range_base_1.rangeSet), { formAdapterItem: _form_adapter_editors_1.ruleRangesEditor({ condition: model.condition(), appearanceMode: gradientStylesAppearance, enableCustomStyles: true }) }),
                    ]
                });
                break;
            case model_1.FormatConditionRangeSet:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        _format_condition_range_base_1.rangeValueType,
                        Object.assign(Object.assign({}, _format_condition_range_base_1.rangeSet), { formAdapterItem: _form_adapter_editors_1.ruleRangesEditor({ condition: model.condition(), appearanceMode: simpleStylesAppearance, enableCustomStyles: isChartItem }) }),
                    ]
                });
                break;
            case undefined:
                break;
            default:
                throw new Error('Unsupported formatting rule condition');
        }
        var additionProperties = this._options.getConditionFormatRuleProperties(model, dashboardItem, dataSourceBrowser);
        let wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: p.concat(additionProperties.properties),
            visibilityFilterRules: Object.assign(Object.assign({}, visibilityRules), additionProperties.visibilityFilterRules),
            disabledFilterRules: additionProperties.disabledFilterRules,
            dynamicEditorRules: additionProperties.dynamicEditorRules
        });
        tab.tabModel(wrapper);
    }
    _fillMiscWrapper(tab, model, dashboardItem, dataSourceBrowser) {
        let miscProperties = this._options.getMiscFormatRuleProperties(model, dashboardItem, dataSourceBrowser);
        let wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [
                _dashboard_item_format_rule_1.enabled,
                ...miscProperties.properties
            ],
            disabledFilterRules: miscProperties.disabledFilterRules,
            dynamicEditorRules: miscProperties.dynamicEditorRules,
            visibilityFilterRules: miscProperties.visibilityFilterRules
        });
        tab.tabModel(wrapper);
    }
}
exports.FormatRulePropertiesComposer = FormatRulePropertiesComposer;
function createDeltaDataTypeObservable(model, dashboardItem, dataSourceBrowser) {
    const dataType = ko.observable(model.condition() && model.condition().dataType());
    let fillDataTypeForDelta = () => {
        let fillDataTypes = (measure) => {
            dataSourceBrowser.findDataField(dashboardItem.dataSource(), dashboardItem.dataMember(), measure.dataMember()).done(field => {
                let summaryType = measure.summaryType();
                if ((summaryType === 'Count') || (summaryType === 'CountDistinct')) {
                    dataType('Integer');
                    model.condition() && model.condition().dataType(dataType());
                }
                else if (['Sum', 'Average', 'StdDev', 'StdDevp', 'Var', 'VarP'].indexOf(summaryType) !== -1) {
                    dataType('Decimal');
                    model.condition() && model.condition().dataType(dataType());
                }
                else {
                    dataType(field.fieldType());
                    model.condition() && model.condition().dataType(dataType());
                }
            });
        };
        let kpiElement = dashboardItem.cards().filter(card => card._getDataId() === model.cardId())[0];
        let deltaValueType = model.deltaValueType();
        if (deltaValueType === 'ActualValue') {
            fillDataTypes(kpiElement.actualValue());
        }
        else if (deltaValueType === 'TargetValue') {
            fillDataTypes(kpiElement.targetValue());
        }
        else {
            dataType('Decimal');
            model.condition() && model.condition().dataType(dataType());
        }
    };
    fillDataTypeForDelta();
    model.cardId.subscribe(containerId => {
        fillDataTypeForDelta();
    });
    model.deltaValueType.subscribe(deltaValueTypeId => {
        fillDataTypeForDelta();
    });
    return { dataType: dataType, dateTimeGroupInterval: ko.observable() };
}
exports.createDeltaDataTypeObservable = createDeltaDataTypeObservable;
function createDataTypeObservable(formatRule, dashboardItem, dataSourceBrowser) {
    const dataItemCalculateBy = dashboardItem.dataItems().filter(d => formatRule.dataItemName() === d.uniqueName())[0];
    const dateTimeGroupInterval = ko.observable(dataItemCalculateBy instanceof dimension_1.Dimension ? dataItemCalculateBy.dateTimeGroupInterval() : undefined);
    const dataType = ko.observable(formatRule.condition() && formatRule.condition().dataType());
    let fillDataType = uniqueName => dashboardItem
        .dataItems()
        .filter(dataItem => uniqueName === dataItem.uniqueName() && !!dataItem.dataMember())
        .map(dataItem => ({
        dataItem: dataItem,
        fieldPromise: dataSourceBrowser.findDataField(dashboardItem.dataSource(), dashboardItem.dataMember(), dataItem.dataMember())
    }))
        .forEach(d => d.fieldPromise.done(field => {
        let newDataType = field.fieldType();
        if (d.dataItem instanceof dimension_1.Dimension) {
            newDataType = _item_filter_items_provider_1.getRealDimensionType(d.dataItem, field);
            dateTimeGroupInterval(field.fieldType() === 'DateTime' ? d.dataItem.dateTimeGroupInterval() : undefined);
            formatRule.condition() && formatRule.condition().dateTimeGroupInterval(dateTimeGroupInterval());
        }
        if (d.dataItem instanceof measure_1.Measure) {
            let summaryType = d.dataItem.summaryType();
            if ((summaryType === 'Count') || (summaryType === 'CountDistinct')) {
                newDataType = 'Integer';
            }
            else if (['Sum', 'Average', 'StdDev', 'StdDevp', 'let', 'letp'].indexOf(summaryType) !== -1) {
                newDataType = 'Decimal';
            }
        }
        dataType(newDataType);
        formatRule.condition() && formatRule.condition().dataType(dataType());
    }));
    if (!dataType() && formatRule.dataItemName())
        fillDataType(formatRule.dataItemName());
    formatRule.dataItemName.subscribe(fillDataType);
    return { dataType: dataType, dateTimeGroupInterval: dateTimeGroupInterval };
}
exports.createDataTypeObservable = createDataTypeObservable;
function addConditionEditor(wrapper, dataTypeInfo, formatRuleModel, dashboardItem, requestRecalculation, specificTypeChanged, conditionTypeFilter) {
    const originalConditionType = formatRuleModel._classId;
    const conditionType = ko.observable(formatRuleModel._classId).extend({ notify: 'always' });
    const specificType = ko.observable(formatRuleModel.condition() && formatRuleModel.condition().getSpecificType());
    wrapper.addProperty(ko.observable(), {
        propertyName: 'typeChooser',
        displayName: 'DashboardWebStringId.ConditionType',
        formAdapterItem: _form_adapter_editors_1.conditionTypeEditor({ dataType: dataTypeInfo.dataType, conditionType, specificType, filters: conditionTypeFilter })
    });
    specificType.subscribe((newSpecificType) => {
        let condition = formatRuleModel.condition(), newRule = !condition, changedConditionType = originalConditionType !== conditionType(), realConditionType = conditionType().split('_')[0];
        if (newRule || changedConditionType) {
            formatRuleModel._changeConditionType(realConditionType);
            condition = formatRuleModel.condition();
            condition.dataType(dataTypeInfo.dataType());
            condition.dateTimeGroupInterval(dataTypeInfo.dateTimeGroupInterval());
        }
        condition.setSpecificType(newSpecificType);
        if (newRule) {
            formatRuleModel.name(_helper_classes_1.NameGenerator.generateName(_default_1.getLocalizationById('DashboardWebStringId.FormatRule') + ' ', dashboardItem.formatRules(), 'name', 1));
        }
        if (newRule || changedConditionType) {
            requestRecalculation.fire();
        }
        specificTypeChanged();
    });
}
exports.addConditionEditor = addConditionEditor;
function getCommonCellsFormatRuleProperties(formatRule, getDataItems, getApplyToDataItems) {
    const dataItems = ko.pureComputed(() => getDataItems().map((m) => ({ value: ko.unwrap(m.uniqueName), displayValueId: ko.unwrap(m.displayName) })));
    const applyToDataItems = ko.pureComputed(() => getApplyToDataItems().map((m) => ({ value: ko.unwrap(m.uniqueName), displayValueId: ko.unwrap(m.displayName) })));
    if (!formatRule.dataItemName() && dataItems().length) {
        formatRule.dataItemName(ko.unwrap(dataItems()[0].value));
    }
    const externalUpdateCallback = formUpdateHandler => _knockout_utils_1.safeSubscribe({
        dataItemName: formatRule.dataItemApplyToName,
        applyToDataItems
    }, () => formUpdateHandler({ forceValidate: true }));
    const getApplyToPlaceHolder = () => {
        const dataItemApplyToInfo = applyToDataItems().filter(item => item.value === formatRule.dataItemApplyToName())[0];
        return dataItemApplyToInfo && dataItemApplyToInfo.displayValueId;
    };
    const commonProperties = [];
    commonProperties.push(Object.assign(Object.assign({}, _cells_item_format_rule_1.formatRuleDataItem), { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor({ values: dataItems }) }));
    commonProperties.push(Object.assign(Object.assign({}, _cells_item_format_rule_1.dataItemApplyTo), { externalUpdateCallback, formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor({
            values: applyToDataItems,
            additionalOptions: () => ({
                placeholder: getApplyToPlaceHolder()
            }),
            comparableEditorOptions: ['placeholder']
        }), validationRules: [{
                type: 'custom',
                message: _default_1.getLocalizationById('DashboardWebStringId.ConditionalFormatting.InvalidApplyToValue'),
                reevaluate: true,
                validationCallback: (e) => {
                    const applyToDataItemsNames = applyToDataItems().map(di => di.value);
                    return !e.value && applyToDataItemsNames.indexOf(formatRule.dataItemName()) !== -1
                        || !!e.value && applyToDataItemsNames.indexOf(e.value) !== -1;
                }
            }] }));
    return {
        properties: commonProperties
    };
}
exports.getCommonCellsFormatRuleProperties = getCommonCellsFormatRuleProperties;


/***/ }),

/***/ 25059:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatRuleSurface = void 0;
const ko = __webpack_require__(71032);
const card_item_delta_format_rule_1 = __webpack_require__(50075);
const card_item_format_rule_1 = __webpack_require__(22233);
const chart_item_format_rule_1 = __webpack_require__(3267);
const grid_item_format_rule_1 = __webpack_require__(39430);
const pivot_item_format_rule_1 = __webpack_require__(40014);
const scatter_chart_item_format_rule_1 = __webpack_require__(22149);
const _card_item_format_rule_properties_composer_1 = __webpack_require__(67551);
const _chart_item_format_rule_properties_composer_1 = __webpack_require__(10651);
const _grid_item_format_rule_properties_composer_1 = __webpack_require__(13861);
const _pivot_item_format_rule_properties_composer_1 = __webpack_require__(62980);
const _scatter_chart_item_format_rule_properties_composer_1 = __webpack_require__(94927);
class FormatRuleSurface {
    constructor(model, dashboardItem, dataSourceBrowser, propertiesController) {
        this.model = model;
        this.dashboardItem = dashboardItem;
        this.dataSourceBrowser = dataSourceBrowser;
        this.propertiesController = propertiesController;
        this._disposables = [];
    }
    updatePropertiesTabs(requestRecalculation) {
        var composer = null;
        if (this.model() instanceof card_item_delta_format_rule_1.CardItemDeltaFormatRule) {
            composer = _card_item_format_rule_properties_composer_1.createCardItemDeltaFormatRulePropertiesComposer(this.model);
        }
        else if (this.model() instanceof card_item_format_rule_1.CardItemFormatRule) {
            composer = _card_item_format_rule_properties_composer_1.createCardItemFormatRulePropertiesComposer(this.model);
        }
        else if (this.model() instanceof grid_item_format_rule_1.GridItemFormatRule) {
            composer = _grid_item_format_rule_properties_composer_1.createGridItemFormatRulePropertiesComposer();
        }
        else if (this.model() instanceof pivot_item_format_rule_1.PivotItemFormatRule) {
            composer = _pivot_item_format_rule_properties_composer_1.createPivotItemFormatRulePropertiesComposer();
        }
        else if (this.model() instanceof chart_item_format_rule_1.ChartItemFormatRule) {
            composer = _chart_item_format_rule_properties_composer_1.createChartItemFormatRulePropertiesComposer();
        }
        else if (this.model() instanceof scatter_chart_item_format_rule_1.ScatterChartItemFormatRule) {
            composer = _scatter_chart_item_format_rule_properties_composer_1.createScatterChartItemFormatRulePropertiesComposer();
        }
        var propertiesTabs = composer.composeTabs(this.model(), {
            dashboardItem: this.dashboardItem,
            dataSourceBrowser: this.dataSourceBrowser,
            requestRecalculation,
            specificTypeChanged: () => {
                this.propertiesController.secondarySelectedIndex(1);
            }
        });
        this.propertiesController.secondaryModel({
            displayText: this.model()._classCaption,
            data: {
                model: this.model(),
                propertiesTabs: ko.observableArray(propertiesTabs)
            },
            containingCollection: this.dashboardItem.formatRules
        });
        if (this.model().condition()) {
            this.propertiesController.secondarySelectedIndex(1);
        }
    }
    startEditing(args) {
        args.createImmediately = false;
        this.updatePropertiesTabs(args.requestRecalculation);
        args.requestRecalculation.add(() => this.updatePropertiesTabs(args.requestRecalculation));
        this.model.subscribe(() => this.updatePropertiesTabs(args.requestRecalculation));
    }
    dispose() {
        this._disposables.forEach((d) => {
            d.dispose();
        });
    }
}
exports.FormatRuleSurface = FormatRuleSurface;


/***/ }),

/***/ 75110:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConfirmDialogViewModel = void 0;
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
class ConfirmDialogViewModel {
    constructor() {
        this.confirmTitle = ko.observable('');
        this.confirmText = ko.observable('');
        this.confirmVisible = ko.observable(false);
        this.confirmButtons = ko.observable([]);
        this.confirmHidden = (e) => { };
    }
    confirm(title, message, okButtonText, cancelButtonText) {
        var deferred = _jquery_helpers_1.createJQueryDeferred();
        this.confirmTitle(title);
        this.confirmText(message);
        let buttons = [];
        if (_utils_1.type.isDefined(okButtonText))
            buttons.push({
                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                    text: okButtonText,
                    type: 'default',
                    onClick: () => {
                        setTimeout(() => { this.confirmVisible(false); }, 1);
                        deferred.resolve(true);
                    }
                }
            });
        if (_utils_1.type.isDefined(cancelButtonText))
            buttons.push({
                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                    text: cancelButtonText,
                    onClick: () => {
                        setTimeout(() => { this.confirmVisible(false); }, 1);
                        deferred.resolve(false);
                    }
                }
            });
        this.confirmButtons(buttons);
        this.confirmHidden = (e) => {
            if (deferred.state() === 'pending')
                deferred.reject();
        };
        this.confirmVisible(true);
        return deferred.promise();
    }
}
exports.ConfirmDialogViewModel = ConfirmDialogViewModel;


/***/ }),

/***/ 89176:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CURRENCIES = void 0;
exports.CURRENCIES = [{
        name: 'DJF',
        displayName: 'DJF (Djiboutian Franc)',
        cultures: [{
                name: 'aa-DJ',
                displayName: 'Afar (Djibouti)'
            }, {
                name: 'ar-DJ',
                displayName: 'Arabic (Djibouti)'
            }, {
                name: 'fr-DJ',
                displayName: 'French (Djibouti)'
            }, {
                name: 'so-DJ',
                displayName: 'Somali (Djibouti)'
            }]
    }, {
        name: 'ERN',
        displayName: 'ERN (Eritrean Nakfa)',
        cultures: [{
                name: 'aa-ER',
                displayName: 'Afar (Eritrea)'
            }, {
                name: 'ar-ER',
                displayName: 'Arabic (Eritrea)'
            }, {
                name: 'byn-ER',
                displayName: 'Blin (Eritrea)'
            }, {
                name: 'en-ER',
                displayName: 'English (Eritrea)'
            }, {
                name: 'ssy-ER',
                displayName: 'Saho (Eritrea)'
            }, {
                name: 'ti-ER',
                displayName: 'Tigrinya (Eritrea)'
            }, {
                name: 'tig-ER',
                displayName: 'Tigre (Eritrea)'
            }]
    }, {
        name: 'ETB',
        displayName: 'ETB (Ethiopian Birr)',
        cultures: [{
                name: 'aa-ET',
                displayName: 'Afar (Ethiopia)'
            }, {
                name: 'am-ET',
                displayName: 'Amharic (Ethiopia)'
            }, {
                name: 'om-ET',
                displayName: 'Oromo (Ethiopia)'
            }, {
                name: 'so-ET',
                displayName: 'Somali (Ethiopia)'
            }, {
                name: 'ti-ET',
                displayName: 'Tigrinya (Ethiopia)'
            }, {
                name: 'wal-ET',
                displayName: 'Wolaytta (Ethiopia)'
            }]
    }, {
        name: 'NAD',
        displayName: 'NAD (Namibian Dollar)',
        cultures: [{
                name: 'af-NA',
                displayName: 'Afrikaans (Namibia)'
            }, {
                name: 'en-NA',
                displayName: 'English (Namibia)'
            }, {
                name: 'naq-NA',
                displayName: 'Nama (Namibia)'
            }]
    }, {
        name: 'ZAR',
        displayName: 'ZAR (South African Rand)',
        cultures: [{
                name: 'af-ZA',
                displayName: 'Afrikaans (South Africa)'
            }, {
                name: 'en-LS',
                displayName: 'English (Lesotho)'
            }, {
                name: 'en-ZA',
                displayName: 'English (South Africa)'
            }, {
                name: 'nr-ZA',
                displayName: 'South Ndebele (South Africa)'
            }, {
                name: 'nso-ZA',
                displayName: 'Sesotho sa Leboa (South Africa)'
            }, {
                name: 'ss-ZA',
                displayName: 'Swati (South Africa)'
            }, {
                name: 'st-LS',
                displayName: 'Sesotho (Lesotho)'
            }, {
                name: 'st-ZA',
                displayName: 'Southern Sotho (South Africa)'
            }, {
                name: 'tn-ZA',
                displayName: 'Setswana (South Africa)'
            }, {
                name: 'ts-ZA',
                displayName: 'Tsonga (South Africa)'
            }, {
                name: 've-ZA',
                displayName: 'Venda (South Africa)'
            }, {
                name: 'xh-ZA',
                displayName: 'isiXhosa (South Africa)'
            }, {
                name: 'zu-ZA',
                displayName: 'isiZulu (South Africa)'
            }]
    }, {
        name: 'XAF',
        displayName: 'XAF (Central African CFA Franc)',
        cultures: [{
                name: 'agq-CM',
                displayName: 'Aghem (Cameroon)'
            }, {
                name: 'ar-TD',
                displayName: 'Arabic (Chad)'
            }, {
                name: 'bas-CM',
                displayName: 'Basaa (Cameroon)'
            }, {
                name: 'dua-CM',
                displayName: 'Duala (Cameroon)'
            }, {
                name: 'en-CM',
                displayName: 'English (Cameroon)'
            }, {
                name: 'es-GQ',
                displayName: 'Spanish (Equatorial Guinea)'
            }, {
                name: 'ewo-CM',
                displayName: 'Ewondo (Cameroon)'
            }, {
                name: 'ff-CM',
                displayName: 'Fulah (Cameroon)'
            }, {
                name: 'fr-CF',
                displayName: 'French (Central African Republic)'
            }, {
                name: 'fr-CG',
                displayName: 'French (Congo)'
            }, {
                name: 'fr-CM',
                displayName: 'French (Cameroon)'
            }, {
                name: 'fr-GA',
                displayName: 'French (Gabon)'
            }, {
                name: 'fr-GQ',
                displayName: 'French (Equatorial Guinea)'
            }, {
                name: 'fr-TD',
                displayName: 'French (Chad)'
            }, {
                name: 'jgo-CM',
                displayName: 'Ngomba (Cameroon)'
            }, {
                name: 'kkj-CM',
                displayName: 'Kako (Cameroon)'
            }, {
                name: 'ksf-CM',
                displayName: 'Bafia (Cameroon)'
            }, {
                name: 'ln-CF',
                displayName: 'Lingala (Central African Republic)'
            }, {
                name: 'ln-CG',
                displayName: 'Lingala (Congo)'
            }, {
                name: 'mgo-CM',
                displayName: "Meta' (Cameroon)"
            }, {
                name: 'mua-CM',
                displayName: 'Mundang (Cameroon)'
            }, {
                name: 'nmg-CM',
                displayName: 'Kwasio (Cameroon)'
            }, {
                name: 'nnh-CM',
                displayName: 'Ngiemboon (Cameroon)'
            }, {
                name: 'pt-GQ',
                displayName: 'Portuguese (Equatorial Guinea)'
            }, {
                name: 'sg-CF',
                displayName: 'Sango (Central African Republic)'
            }, {
                name: 'yav-CM',
                displayName: 'Yangben (Cameroon)'
            }]
    }, {
        name: 'GHS',
        displayName: 'GHS (Ghanaian Cedi)',
        cultures: [{
                name: 'ak-GH',
                displayName: 'Akan (Ghana)'
            }, {
                name: 'ee-GH',
                displayName: 'Ewe (Ghana)'
            }, {
                name: 'en-GH',
                displayName: 'English (Ghana)'
            }, {
                name: 'ha-Latn-GH',
                displayName: 'Hausa (Latin, Ghana)'
            }]
    }, {
        name: 'XDR',
        displayName: 'XDR (Special Drawing Rights)',
        cultures: [{
                name: 'ar-001',
                displayName: 'Arabic (World)'
            }, {
                name: 'en-001',
                displayName: 'English (World)'
            }, {
                name: 'en-150',
                displayName: 'English (Europe)'
            }, {
                name: 'eo-001',
                displayName: 'Esperanto (World)'
            }, {
                name: 'es-419',
                displayName: 'Spanish (Latin America)'
            }, {
                name: 'ia-001',
                displayName: 'Interlingua (World)'
            }, {
                name: 'la-001',
                displayName: 'Latin (World)'
            }, {
                name: 'prg-001',
                displayName: 'Prussian (World)'
            }, {
                name: 'vo-001',
                displayName: 'Volapük (World)'
            }, {
                name: 'yi-001',
                displayName: 'Yiddish (World)'
            }]
    }, {
        name: 'AED',
        displayName: 'AED (United Arab Emirates Dirham)',
        cultures: [{
                name: 'ar-AE',
                displayName: 'Arabic (U.A.E.)'
            }]
    }, {
        name: 'BHD',
        displayName: 'BHD (Bahraini Dinar)',
        cultures: [{
                name: 'ar-BH',
                displayName: 'Arabic (Bahrain)'
            }]
    }, {
        name: 'DZD',
        displayName: 'DZD (Algerian Dinar)',
        cultures: [{
                name: 'ar-DZ',
                displayName: 'Arabic (Algeria)'
            }, {
                name: 'fr-DZ',
                displayName: 'French (Algeria)'
            }, {
                name: 'kab-DZ',
                displayName: 'Kabyle (Algeria)'
            }, {
                name: 'tzm-Latn-DZ',
                displayName: 'Tamazight (Latin, Algeria)'
            }]
    }, {
        name: 'EGP',
        displayName: 'EGP (Egyptian Pound)',
        cultures: [{
                name: 'ar-EG',
                displayName: 'Arabic (Egypt)'
            }]
    }, {
        name: 'ILS',
        displayName: 'ILS (Israeli New Shekel)',
        cultures: [{
                name: 'ar-IL',
                displayName: 'Arabic (Israel)'
            }, {
                name: 'ar-PS',
                displayName: 'Arabic (Palestinian Authority)'
            }, {
                name: 'en-IL',
                displayName: 'English (Israel)'
            }, {
                name: 'he-IL',
                displayName: 'Hebrew (Israel)'
            }]
    }, {
        name: 'IQD',
        displayName: 'IQD (Iraqi Dinar)',
        cultures: [{
                name: 'ar-IQ',
                displayName: 'Arabic (Iraq)'
            }, {
                name: 'ku-Arab-IQ',
                displayName: 'Central Kurdish (Iraq)'
            }, {
                name: 'lrc-IQ',
                displayName: 'Northern Luri (Iraq)'
            }]
    }, {
        name: 'JOD',
        displayName: 'JOD (Jordanian Dinar)',
        cultures: [{
                name: 'ar-JO',
                displayName: 'Arabic (Jordan)'
            }]
    }, {
        name: 'KMF',
        displayName: 'KMF (Comorian Franc)',
        cultures: [{
                name: 'ar-KM',
                displayName: 'Arabic (Comoros)'
            }, {
                name: 'fr-KM',
                displayName: 'French (Comoros)'
            }]
    }, {
        name: 'KWD',
        displayName: 'KWD (Kuwaiti Dinar)',
        cultures: [{
                name: 'ar-KW',
                displayName: 'Arabic (Kuwait)'
            }]
    }, {
        name: 'LBP',
        displayName: 'LBP (Lebanese Pound)',
        cultures: [{
                name: 'ar-LB',
                displayName: 'Arabic (Lebanon)'
            }]
    }, {
        name: 'LYD',
        displayName: 'LYD (Libyan Dinar)',
        cultures: [{
                name: 'ar-LY',
                displayName: 'Arabic (Libya)'
            }]
    }, {
        name: 'MAD',
        displayName: 'MAD (Moroccan Dirham)',
        cultures: [{
                name: 'ar-MA',
                displayName: 'Arabic (Morocco)'
            }, {
                name: 'fr-MA',
                displayName: 'French (Morocco)'
            }, {
                name: 'shi-Latn-MA',
                displayName: 'Tachelhit (Latin, Morocco)'
            }, {
                name: 'shi-Tfng-MA',
                displayName: 'Tachelhit (Tifinagh, Morocco)'
            }, {
                name: 'tzm-Arab-MA',
                displayName: 'Central Atlas Tamazight (Arabic, Morocco)'
            }, {
                name: 'tzm-Latn-MA',
                displayName: 'Central Atlas Tamazight (Latin, Morocco)'
            }, {
                name: 'tzm-Tfng-MA',
                displayName: 'Central Atlas Tamazight (Tifinagh, Morocco)'
            }, {
                name: 'zgh-Tfng-MA',
                displayName: 'Standard Moroccan Tamazight (Tifinagh, Morocco)'
            }]
    }, {
        name: 'MRO',
        displayName: 'MRO (Mauritanian Ouguiya)',
        cultures: [{
                name: 'ar-MR',
                displayName: 'Arabic (Mauritania)'
            }, {
                name: 'ff-MR',
                displayName: 'Fulah (Mauritania)'
            }, {
                name: 'fr-MR',
                displayName: 'French (Mauritania)'
            }]
    }, {
        name: 'OMR',
        displayName: 'OMR (Omani Rial)',
        cultures: [{
                name: 'ar-OM',
                displayName: 'Arabic (Oman)'
            }]
    }, {
        name: 'QAR',
        displayName: 'QAR (Qatari Rial)',
        cultures: [{
                name: 'ar-QA',
                displayName: 'Arabic (Qatar)'
            }]
    }, {
        name: 'SAR',
        displayName: 'SAR (Saudi Riyal)',
        cultures: [{
                name: 'ar-SA',
                displayName: 'Arabic (Saudi Arabia)'
            }]
    }, {
        name: 'SDG',
        displayName: 'SDG (Sudanese Pound)',
        cultures: [{
                name: 'ar-SD',
                displayName: 'Arabic (Sudan)'
            }, {
                name: 'en-SD',
                displayName: 'English (Sudan)'
            }]
    }, {
        name: 'SOS',
        displayName: 'SOS (Somali Shilling)',
        cultures: [{
                name: 'ar-SO',
                displayName: 'Arabic (Somalia)'
            }, {
                name: 'so-SO',
                displayName: 'Somali (Somalia)'
            }]
    }, {
        name: 'SSP',
        displayName: 'SSP (South Sudanese Pound)',
        cultures: [{
                name: 'ar-SS',
                displayName: 'Arabic (South Sudan)'
            }, {
                name: 'en-SS',
                displayName: 'English (South Sudan)'
            }, {
                name: 'nus-SS',
                displayName: 'Nuer (South Sudan)'
            }]
    }, {
        name: 'SYP',
        displayName: 'SYP (Syrian Pound)',
        cultures: [{
                name: 'ar-SY',
                displayName: 'Arabic (Syria)'
            }, {
                name: 'fr-SY',
                displayName: 'French (Syria)'
            }, {
                name: 'syr-SY',
                displayName: 'Syriac (Syria)'
            }]
    }, {
        name: 'TND',
        displayName: 'TND (Tunisian Dinar)',
        cultures: [{
                name: 'ar-TN',
                displayName: 'Arabic (Tunisia)'
            }, {
                name: 'fr-TN',
                displayName: 'French (Tunisia)'
            }]
    }, {
        name: 'YER',
        displayName: 'YER (Yemeni Rial)',
        cultures: [{
                name: 'ar-YE',
                displayName: 'Arabic (Yemen)'
            }]
    }, {
        name: 'CLP',
        displayName: 'CLP (Chilean Peso)',
        cultures: [{
                name: 'arn-CL',
                displayName: 'Mapudungun (Chile)'
            }, {
                name: 'es-CL',
                displayName: 'Spanish (Chile)'
            }]
    }, {
        name: 'INR',
        displayName: 'INR (Indian Rupee)',
        cultures: [{
                name: 'as-IN',
                displayName: 'Assamese (India)'
            }, {
                name: 'bn-IN',
                displayName: 'Bangla (India)'
            }, {
                name: 'bo-IN',
                displayName: 'Tibetan (India)'
            }, {
                name: 'brx-IN',
                displayName: 'Bodo (India)'
            }, {
                name: 'en-IN',
                displayName: 'English (India)'
            }, {
                name: 'gu-IN',
                displayName: 'Gujarati (India)'
            }, {
                name: 'hi-IN',
                displayName: 'Hindi (India)'
            }, {
                name: 'kn-IN',
                displayName: 'Kannada (India)'
            }, {
                name: 'kok-IN',
                displayName: 'Konkani (India)'
            }, {
                name: 'ks-Arab-IN',
                displayName: 'Kashmiri (Perso-Arabic)'
            }, {
                name: 'ks-Deva-IN',
                displayName: 'Kashmiri (Devanagari, India)'
            }, {
                name: 'ml-IN',
                displayName: 'Malayalam (India)'
            }, {
                name: 'mni-IN',
                displayName: 'Manipuri (India)'
            }, {
                name: 'mr-IN',
                displayName: 'Marathi (India)'
            }, {
                name: 'ne-IN',
                displayName: 'Nepali (India)'
            }, {
                name: 'or-IN',
                displayName: 'Odia (India)'
            }, {
                name: 'pa-IN',
                displayName: 'Punjabi (India)'
            }, {
                name: 'sa-IN',
                displayName: 'Sanskrit (India)'
            }, {
                name: 'sd-Deva-IN',
                displayName: 'Sindhi (Devanagari, India)'
            }, {
                name: 'ta-IN',
                displayName: 'Tamil (India)'
            }, {
                name: 'te-IN',
                displayName: 'Telugu (India)'
            }, {
                name: 'ur-IN',
                displayName: 'Urdu (India)'
            }]
    }, {
        name: 'TZS',
        displayName: 'TZS (Tanzanian Shilling)',
        cultures: [{
                name: 'asa-TZ',
                displayName: 'Asu (Tanzania)'
            }, {
                name: 'bez-TZ',
                displayName: 'Bena (Tanzania)'
            }, {
                name: 'en-TZ',
                displayName: 'English (Tanzania)'
            }, {
                name: 'jmc-TZ',
                displayName: 'Machame (Tanzania)'
            }, {
                name: 'kde-TZ',
                displayName: 'Makonde (Tanzania)'
            }, {
                name: 'ksb-TZ',
                displayName: 'Shambala (Tanzania)'
            }, {
                name: 'lag-TZ',
                displayName: 'Langi (Tanzania)'
            }, {
                name: 'mas-TZ',
                displayName: 'Masai (Tanzania)'
            }, {
                name: 'rof-TZ',
                displayName: 'Rombo (Tanzania)'
            }, {
                name: 'rwk-TZ',
                displayName: 'Rwa (Tanzania)'
            }, {
                name: 'sbp-TZ',
                displayName: 'Sangu (Tanzania)'
            }, {
                name: 'sw-TZ',
                displayName: 'Kiswahili (Tanzania)'
            }, {
                name: 'vun-TZ',
                displayName: 'Vunjo (Tanzania)'
            }]
    }, {
        name: 'EUR',
        displayName: 'EUR (Euro)',
        cultures: [{
                name: 'ast-ES',
                displayName: 'Asturian (Spain)'
            }, {
                name: 'br-FR',
                displayName: 'Breton (France)'
            }, {
                name: 'ca-AD',
                displayName: 'Catalan (Andorra)'
            }, {
                name: 'ca-ES',
                displayName: 'Catalan (Catalan)'
            }, {
                name: 'ca-ES-valencia',
                displayName: 'Valencian (Spain)'
            }, {
                name: 'ca-FR',
                displayName: 'Catalan (France)'
            }, {
                name: 'ca-IT',
                displayName: 'Catalan (Italy)'
            }, {
                name: 'co-FR',
                displayName: 'Corsican (France)'
            }, {
                name: 'de-AT',
                displayName: 'German (Austria)'
            }, {
                name: 'de-BE',
                displayName: 'German (Belgium)'
            }, {
                name: 'de-DE',
                displayName: 'German (Germany)'
            }, {
                name: 'de-IT',
                displayName: 'German (Italy)'
            }, {
                name: 'de-LU',
                displayName: 'German (Luxembourg)'
            }, {
                name: 'dsb-DE',
                displayName: 'Lower Sorbian (Germany)'
            }, {
                name: 'el-CY',
                displayName: 'Greek (Cyprus)'
            }, {
                name: 'el-GR',
                displayName: 'Greek (Greece)'
            }, {
                name: 'en-AT',
                displayName: 'English (Austria)'
            }, {
                name: 'en-BE',
                displayName: 'English (Belgium)'
            }, {
                name: 'en-CY',
                displayName: 'English (Cyprus)'
            }, {
                name: 'en-DE',
                displayName: 'English (Germany)'
            }, {
                name: 'en-FI',
                displayName: 'English (Finland)'
            }, {
                name: 'en-IE',
                displayName: 'English (Ireland)'
            }, {
                name: 'en-MT',
                displayName: 'English (Malta)'
            }, {
                name: 'en-NL',
                displayName: 'English (Netherlands)'
            }, {
                name: 'en-SI',
                displayName: 'English (Slovenia)'
            }, {
                name: 'es-ES',
                displayName: 'Spanish (Spain)'
            }, {
                name: 'et-EE',
                displayName: 'Estonian (Estonia)'
            }, {
                name: 'eu-ES',
                displayName: 'Basque (Basque)'
            }, {
                name: 'fi-FI',
                displayName: 'Finnish (Finland)'
            }, {
                name: 'fr-BE',
                displayName: 'French (Belgium)'
            }, {
                name: 'fr-BL',
                displayName: 'French (Saint Barthélemy)'
            }, {
                name: 'fr-FR',
                displayName: 'French (France)'
            }, {
                name: 'fr-GF',
                displayName: 'French (French Guiana)'
            }, {
                name: 'fr-GP',
                displayName: 'French (Guadeloupe)'
            }, {
                name: 'fr-LU',
                displayName: 'French (Luxembourg)'
            }, {
                name: 'fr-MC',
                displayName: 'French (Monaco)'
            }, {
                name: 'fr-MF',
                displayName: 'French (Saint Martin)'
            }, {
                name: 'fr-MQ',
                displayName: 'French (Martinique)'
            }, {
                name: 'fr-PM',
                displayName: 'French (Saint Pierre and Miquelon)'
            }, {
                name: 'fr-RE',
                displayName: 'French (Reunion)'
            }, {
                name: 'fr-YT',
                displayName: 'French (Mayotte)'
            }, {
                name: 'fur-IT',
                displayName: 'Friulian (Italy)'
            }, {
                name: 'fy-NL',
                displayName: 'Frisian (Netherlands)'
            }, {
                name: 'ga-IE',
                displayName: 'Irish (Ireland)'
            }, {
                name: 'gl-ES',
                displayName: 'Galician (Galician)'
            }, {
                name: 'gsw-FR',
                displayName: 'Alsatian (France)'
            }, {
                name: 'hsb-DE',
                displayName: 'Upper Sorbian (Germany)'
            }, {
                name: 'ia-FR',
                displayName: 'Interlingua (France)'
            }, {
                name: 'it-IT',
                displayName: 'Italian (Italy)'
            }, {
                name: 'it-SM',
                displayName: 'Italian (San Marino)'
            }, {
                name: 'it-VA',
                displayName: 'Italian (Vatican City)'
            }, {
                name: 'ksh-DE',
                displayName: 'Ripuarian (Germany)'
            }, {
                name: 'lb-LU',
                displayName: 'Luxembourgish (Luxembourg)'
            }, {
                name: 'lt-LT',
                displayName: 'Lithuanian (Lithuania)'
            }, {
                name: 'lv-LV',
                displayName: 'Latvian (Latvia)'
            }, {
                name: 'mt-MT',
                displayName: 'Maltese (Malta)'
            }, {
                name: 'nds-DE',
                displayName: 'Low German (Germany)'
            }, {
                name: 'nds-NL',
                displayName: 'Low German (Netherlands)'
            }, {
                name: 'nl-BE',
                displayName: 'Dutch (Belgium)'
            }, {
                name: 'nl-NL',
                displayName: 'Dutch (Netherlands)'
            }, {
                name: 'oc-FR',
                displayName: 'Occitan (France)'
            }, {
                name: 'pt-LU',
                displayName: 'Portuguese (Luxembourg)'
            }, {
                name: 'pt-PT',
                displayName: 'Portuguese (Portugal)'
            }, {
                name: 'se-FI',
                displayName: 'Sami, Northern (Finland)'
            }, {
                name: 'sk-SK',
                displayName: 'Slovak (Slovakia)'
            }, {
                name: 'sl-SI',
                displayName: 'Slovenian (Slovenia)'
            }, {
                name: 'smn-FI',
                displayName: 'Sami, Inari (Finland)'
            }, {
                name: 'sms-FI',
                displayName: 'Sami, Skolt (Finland)'
            }, {
                name: 'sq-XK',
                displayName: 'Albanian (Kosovo)'
            }, {
                name: 'sr-Cyrl-ME',
                displayName: 'Serbian (Cyrillic, Montenegro)'
            }, {
                name: 'sr-Cyrl-XK',
                displayName: 'Serbian (Cyrillic, Kosovo)'
            }, {
                name: 'sr-Latn-ME',
                displayName: 'Serbian (Latin, Montenegro)'
            }, {
                name: 'sr-Latn-XK',
                displayName: 'Serbian (Latin, Kosovo)'
            }, {
                name: 'sv-AX',
                displayName: 'Swedish (Åland Islands)'
            }, {
                name: 'sv-FI',
                displayName: 'Swedish (Finland)'
            }, {
                name: 'tr-CY',
                displayName: 'Turkish (Cyprus)'
            }]
    }, {
        name: 'AZN',
        displayName: 'AZN (Azerbaijani Manat)',
        cultures: [{
                name: 'az-Cyrl-AZ',
                displayName: 'Azerbaijani (Cyrillic, Azerbaijan)'
            }, {
                name: 'az-Latn-AZ',
                displayName: 'Azerbaijani (Latin, Azerbaijan)'
            }]
    }, {
        name: 'RUB',
        displayName: 'RUB (Russian Ruble)',
        cultures: [{
                name: 'ba-RU',
                displayName: 'Bashkir (Russia)'
            }, {
                name: 'ce-RU',
                displayName: 'Chechen (Russia)'
            }, {
                name: 'cu-RU',
                displayName: 'Church Slavic (Russia)'
            }, {
                name: 'os-RU',
                displayName: 'Ossetian (Cyrillic, Russia)'
            }, {
                name: 'ru-RU',
                displayName: 'Russian (Russia)'
            }, {
                name: 'sah-RU',
                displayName: 'Sakha (Russia)'
            }, {
                name: 'tt-RU',
                displayName: 'Tatar (Russia)'
            }]
    }, {
        name: 'BYN',
        displayName: 'BYN (Belarusian Ruble)',
        cultures: [{
                name: 'be-BY',
                displayName: 'Belarusian (Belarus)'
            }, {
                name: 'ru-BY',
                displayName: 'Russian (Belarus)'
            }]
    }, {
        name: 'ZMW',
        displayName: 'ZMW (Zambian Kwacha)',
        cultures: [{
                name: 'bem-ZM',
                displayName: 'Bemba (Zambia)'
            }, {
                name: 'en-ZM',
                displayName: 'English (Zambia)'
            }]
    }, {
        name: 'BGN',
        displayName: 'BGN (Bulgarian Lev)',
        cultures: [{
                name: 'bg-BG',
                displayName: 'Bulgarian (Bulgaria)'
            }]
    }, {
        name: 'NGN',
        displayName: 'NGN (Nigerian Naira)',
        cultures: [{
                name: 'bin-NG',
                displayName: 'Edo (Nigeria)'
            }, {
                name: 'en-NG',
                displayName: 'English (Nigeria)'
            }, {
                name: 'ff-NG',
                displayName: 'Fulah (Nigeria)'
            }, {
                name: 'ha-Latn-NG',
                displayName: 'Hausa (Latin, Nigeria)'
            }, {
                name: 'ibb-NG',
                displayName: 'Ibibio (Nigeria)'
            }, {
                name: 'ig-NG',
                displayName: 'Igbo (Nigeria)'
            }, {
                name: 'kr-NG',
                displayName: 'Kanuri (Nigeria)'
            }, {
                name: 'yo-NG',
                displayName: 'Yoruba (Nigeria)'
            }]
    }, {
        name: 'XOF',
        displayName: 'XOF (West African CFA Franc)',
        cultures: [{
                name: 'bm-Latn-ML',
                displayName: 'Bambara (Latin, Mali)'
            }, {
                name: 'dje-NE',
                displayName: 'Zarma (Niger)'
            }, {
                name: 'dyo-SN',
                displayName: 'Jola-Fonyi (Senegal)'
            }, {
                name: 'ee-TG',
                displayName: 'Ewe (Togo)'
            }, {
                name: 'ff-Latn-SN',
                displayName: 'Fulah (Latin, Senegal)'
            }, {
                name: 'fr-BF',
                displayName: 'French (Burkina Faso)'
            }, {
                name: 'fr-BJ',
                displayName: 'French (Benin)'
            }, {
                name: 'fr-CI',
                displayName: 'French (Côte d’Ivoire)'
            }, {
                name: 'fr-ML',
                displayName: 'French (Mali)'
            }, {
                name: 'fr-NE',
                displayName: 'French (Niger)'
            }, {
                name: 'fr-SN',
                displayName: 'French (Senegal)'
            }, {
                name: 'fr-TG',
                displayName: 'French (Togo)'
            }, {
                name: 'ha-Latn-NE',
                displayName: 'Hausa (Latin, Niger)'
            }, {
                name: 'khq-ML',
                displayName: 'Koyra Chiini (Mali)'
            }, {
                name: 'pt-GW',
                displayName: 'Portuguese (Guinea-Bissau)'
            }, {
                name: 'ses-ML',
                displayName: 'Koyraboro Senni (Mali)'
            }, {
                name: 'twq-NE',
                displayName: 'Tasawaq (Niger)'
            }, {
                name: 'wo-SN',
                displayName: 'Wolof (Senegal)'
            }, {
                name: 'yo-BJ',
                displayName: 'Yoruba (Benin)'
            }]
    }, {
        name: 'BDT',
        displayName: 'BDT (Bangladeshi Taka)',
        cultures: [{
                name: 'bn-BD',
                displayName: 'Bangla (Bangladesh)'
            }]
    }, {
        name: 'CNY',
        displayName: 'CNY (Chinese Yuan)',
        cultures: [{
                name: 'bo-CN',
                displayName: 'Tibetan (PRC)'
            }, {
                name: 'ii-CN',
                displayName: 'Yi (PRC)'
            }, {
                name: 'mn-Mong-CN',
                displayName: 'Mongolian (Traditional Mongolian, PRC)'
            }, {
                name: 'ug-CN',
                displayName: 'Uyghur (PRC)'
            }, {
                name: 'zh-CN',
                displayName: 'Chinese (Simplified, PRC)'
            }]
    }, {
        name: 'BAM',
        displayName: 'BAM (Bosnia-Herzegovina Convertible Mark)',
        cultures: [{
                name: 'bs-Cyrl-BA',
                displayName: 'Bosnian (Cyrillic, Bosnia and Herzegovina)'
            }, {
                name: 'bs-Latn-BA',
                displayName: 'Bosnian (Latin, Bosnia and Herzegovina)'
            }, {
                name: 'hr-BA',
                displayName: 'Croatian (Latin, Bosnia and Herzegovina)'
            }, {
                name: 'sr-Cyrl-BA',
                displayName: 'Serbian (Cyrillic, Bosnia and Herzegovina)'
            }, {
                name: 'sr-Latn-BA',
                displayName: 'Serbian (Latin, Bosnia and Herzegovina)'
            }]
    }, {
        name: 'UGX',
        displayName: 'UGX (Ugandan Shilling)',
        cultures: [{
                name: 'cgg-UG',
                displayName: 'Chiga (Uganda)'
            }, {
                name: 'en-UG',
                displayName: 'English (Uganda)'
            }, {
                name: 'lg-UG',
                displayName: 'Ganda (Uganda)'
            }, {
                name: 'nyn-UG',
                displayName: 'Nyankole (Uganda)'
            }, {
                name: 'sw-UG',
                displayName: 'Kiswahili (Uganda)'
            }, {
                name: 'teo-UG',
                displayName: 'Teso (Uganda)'
            }, {
                name: 'xog-UG',
                displayName: 'Soga (Uganda)'
            }]
    }, {
        name: 'USD',
        displayName: 'USD (US Dollar)',
        cultures: [{
                name: 'chr-Cher-US',
                displayName: 'Cherokee (Cherokee)'
            }, {
                name: 'en-AS',
                displayName: 'English (American Samoa)'
            }, {
                name: 'en-FM',
                displayName: 'English (Micronesia)'
            }, {
                name: 'en-GU',
                displayName: 'English (Guam)'
            }, {
                name: 'en-IO',
                displayName: 'English (British Indian Ocean Territory)'
            }, {
                name: 'en-MH',
                displayName: 'English (Marshall Islands)'
            }, {
                name: 'en-MP',
                displayName: 'English (Northern Mariana Islands)'
            }, {
                name: 'en-PR',
                displayName: 'English (Puerto Rico)'
            }, {
                name: 'en-PW',
                displayName: 'English (Palau)'
            }, {
                name: 'en-TC',
                displayName: 'English (Turks and Caicos Islands)'
            }, {
                name: 'en-UM',
                displayName: 'English (US Minor Outlying Islands)'
            }, {
                name: 'en-US',
                displayName: 'English (United States)'
            }, {
                name: 'en-VG',
                displayName: 'English (British Virgin Islands)'
            }, {
                name: 'en-VI',
                displayName: 'English (US Virgin Islands)'
            }, {
                name: 'en-ZW',
                displayName: 'English (Zimbabwe)'
            }, {
                name: 'es-EC',
                displayName: 'Spanish (Ecuador)'
            }, {
                name: 'es-PR',
                displayName: 'Spanish (Puerto Rico)'
            }, {
                name: 'es-SV',
                displayName: 'Spanish (El Salvador)'
            }, {
                name: 'es-US',
                displayName: 'Spanish (United States)'
            }, {
                name: 'haw-US',
                displayName: 'Hawaiian (United States)'
            }, {
                name: 'lkt-US',
                displayName: 'Lakota (United States)'
            }, {
                name: 'nd-ZW',
                displayName: 'North Ndebele (Zimbabwe)'
            }, {
                name: 'nl-BQ',
                displayName: 'Dutch (Bonaire, Sint Eustatius and Saba)'
            }, {
                name: 'pap-029',
                displayName: 'Papiamento (Caribbean)'
            }, {
                name: 'pt-TL',
                displayName: 'Portuguese (Timor-Leste)'
            }, {
                name: 'quz-EC',
                displayName: 'Quechua (Ecuador)'
            }, {
                name: 'sn-Latn-ZW',
                displayName: 'Shona (Latin, Zimbabwe)'
            }]
    }, {
        name: 'CZK',
        displayName: 'CZK (Czech Koruna)',
        cultures: [{
                name: 'cs-CZ',
                displayName: 'Czech (Czech Republic)'
            }]
    }, {
        name: 'GBP',
        displayName: 'GBP (British Pound)',
        cultures: [{
                name: 'cy-GB',
                displayName: 'Welsh (United Kingdom)'
            }, {
                name: 'en-GB',
                displayName: 'English (United Kingdom)'
            }, {
                name: 'en-GG',
                displayName: 'English (Guernsey)'
            }, {
                name: 'en-IM',
                displayName: 'English (Isle of Man)'
            }, {
                name: 'en-JE',
                displayName: 'English (Jersey)'
            }, {
                name: 'gd-GB',
                displayName: 'Scottish Gaelic (United Kingdom)'
            }, {
                name: 'gv-IM',
                displayName: 'Manx (Isle of Man)'
            }, {
                name: 'kw-GB',
                displayName: 'Cornish (United Kingdom)'
            }]
    }, {
        name: 'DKK',
        displayName: 'DKK (Danish Krone)',
        cultures: [{
                name: 'da-DK',
                displayName: 'Danish (Denmark)'
            }, {
                name: 'da-GL',
                displayName: 'Danish (Greenland)'
            }, {
                name: 'en-DK',
                displayName: 'English (Denmark)'
            }, {
                name: 'fo-DK',
                displayName: 'Faroese (Denmark)'
            }, {
                name: 'fo-FO',
                displayName: 'Faroese (Faroe Islands)'
            }, {
                name: 'kl-GL',
                displayName: 'Greenlandic (Greenland)'
            }]
    }, {
        name: 'KES',
        displayName: 'KES (Kenyan Shilling)',
        cultures: [{
                name: 'dav-KE',
                displayName: 'Taita (Kenya)'
            }, {
                name: 'ebu-KE',
                displayName: 'Embu (Kenya)'
            }, {
                name: 'en-KE',
                displayName: 'English (Kenya)'
            }, {
                name: 'guz-KE',
                displayName: 'Gusii (Kenya)'
            }, {
                name: 'kam-KE',
                displayName: 'Kamba (Kenya)'
            }, {
                name: 'ki-KE',
                displayName: 'Kikuyu (Kenya)'
            }, {
                name: 'kln-KE',
                displayName: 'Kalenjin (Kenya)'
            }, {
                name: 'luo-KE',
                displayName: 'Luo (Kenya)'
            }, {
                name: 'luy-KE',
                displayName: 'Luyia (Kenya)'
            }, {
                name: 'mas-KE',
                displayName: 'Masai (Kenya)'
            }, {
                name: 'mer-KE',
                displayName: 'Meru (Kenya)'
            }, {
                name: 'om-KE',
                displayName: 'Oromo (Kenya)'
            }, {
                name: 'saq-KE',
                displayName: 'Samburu (Kenya)'
            }, {
                name: 'so-KE',
                displayName: 'Somali (Kenya)'
            }, {
                name: 'sw-KE',
                displayName: 'Kiswahili (Kenya)'
            }, {
                name: 'teo-KE',
                displayName: 'Teso (Kenya)'
            }]
    }, {
        name: 'CHF',
        displayName: 'CHF (Swiss Franc)',
        cultures: [{
                name: 'de-CH',
                displayName: 'German (Switzerland)'
            }, {
                name: 'de-LI',
                displayName: 'German (Liechtenstein)'
            }, {
                name: 'en-CH',
                displayName: 'English (Switzerland)'
            }, {
                name: 'fr-CH',
                displayName: 'French (Switzerland)'
            }, {
                name: 'gsw-CH',
                displayName: 'Alsatian (Switzerland)'
            }, {
                name: 'gsw-LI',
                displayName: 'Alsatian (Liechtenstein)'
            }, {
                name: 'it-CH',
                displayName: 'Italian (Switzerland)'
            }, {
                name: 'pt-CH',
                displayName: 'Portuguese (Switzerland)'
            }, {
                name: 'rm-CH',
                displayName: 'Romansh (Switzerland)'
            }, {
                name: 'wae-CH',
                displayName: 'Walser (Switzerland)'
            }]
    }, {
        name: 'MVR',
        displayName: 'MVR (Maldivian Rufiyaa)',
        cultures: [{
                name: 'dv-MV',
                displayName: 'Divehi (Maldives)'
            }]
    }, {
        name: 'BTN',
        displayName: 'BTN (Bhutanese Ngultrum)',
        cultures: [{
                name: 'dz-BT',
                displayName: 'Dzongkha (Bhutan)'
            }]
    }, {
        name: 'XCD',
        displayName: 'XCD (Eastern Caribbean Dollar)',
        cultures: [{
                name: 'en-029',
                displayName: 'English (Caribbean)'
            }, {
                name: 'fr-029',
                displayName: 'French (Caribbean)'
            }]
    }, {
        name: 'XCD',
        displayName: 'XCD (East Caribbean Dollar)',
        cultures: [{
                name: 'en-AG',
                displayName: 'English (Antigua and Barbuda)'
            }, {
                name: 'en-AI',
                displayName: 'English (Anguilla)'
            }, {
                name: 'en-DM',
                displayName: 'English (Dominica)'
            }, {
                name: 'en-GD',
                displayName: 'English (Grenada)'
            }, {
                name: 'en-KN',
                displayName: 'English (Saint Kitts and Nevis)'
            }, {
                name: 'en-LC',
                displayName: 'English (Saint Lucia)'
            }, {
                name: 'en-MS',
                displayName: 'English (Montserrat)'
            }, {
                name: 'en-VC',
                displayName: 'English (Saint Vincent and the Grenadines)'
            }]
    }, {
        name: 'AUD',
        displayName: 'AUD (Australian Dollar)',
        cultures: [{
                name: 'en-AU',
                displayName: 'English (Australia)'
            }, {
                name: 'en-CC',
                displayName: 'English (Cocos [Keeling] Islands)'
            }, {
                name: 'en-CX',
                displayName: 'English (Christmas Island)'
            }, {
                name: 'en-KI',
                displayName: 'English (Kiribati)'
            }, {
                name: 'en-NF',
                displayName: 'English (Norfolk Island)'
            }, {
                name: 'en-NR',
                displayName: 'English (Nauru)'
            }, {
                name: 'en-TV',
                displayName: 'English (Tuvalu)'
            }]
    }, {
        name: 'BBD',
        displayName: 'BBD (Barbadian Dollar)',
        cultures: [{
                name: 'en-BB',
                displayName: 'English (Barbados)'
            }]
    }, {
        name: 'BIF',
        displayName: 'BIF (Burundian Franc)',
        cultures: [{
                name: 'en-BI',
                displayName: 'English (Burundi)'
            }, {
                name: 'fr-BI',
                displayName: 'French (Burundi)'
            }, {
                name: 'rn-BI',
                displayName: 'Rundi (Burundi)'
            }]
    }, {
        name: 'BMD',
        displayName: 'BMD (Bermudan Dollar)',
        cultures: [{
                name: 'en-BM',
                displayName: 'English (Bermuda)'
            }]
    }, {
        name: 'BSD',
        displayName: 'BSD (Bahamian Dollar)',
        cultures: [{
                name: 'en-BS',
                displayName: 'English (Bahamas)'
            }]
    }, {
        name: 'BWP',
        displayName: 'BWP (Botswanan Pula)',
        cultures: [{
                name: 'en-BW',
                displayName: 'English (Botswana)'
            }, {
                name: 'tn-BW',
                displayName: 'Setswana (Botswana)'
            }]
    }, {
        name: 'BZD',
        displayName: 'BZD (Belize Dollar)',
        cultures: [{
                name: 'en-BZ',
                displayName: 'English (Belize)'
            }, {
                name: 'es-BZ',
                displayName: 'Spanish (Belize)'
            }]
    }, {
        name: 'CAD',
        displayName: 'CAD (Canadian Dollar)',
        cultures: [{
                name: 'en-CA',
                displayName: 'English (Canada)'
            }, {
                name: 'fr-CA',
                displayName: 'French (Canada)'
            }, {
                name: 'iu-Cans-CA',
                displayName: 'Inuktitut (Syllabics, Canada)'
            }, {
                name: 'iu-Latn-CA',
                displayName: 'Inuktitut (Latin, Canada)'
            }, {
                name: 'moh-CA',
                displayName: 'Mohawk (Mohawk)'
            }]
    }, {
        name: 'NZD',
        displayName: 'NZD (New Zealand Dollar)',
        cultures: [{
                name: 'en-CK',
                displayName: 'English (Cook Islands)'
            }, {
                name: 'en-NU',
                displayName: 'English (Niue)'
            }, {
                name: 'en-NZ',
                displayName: 'English (New Zealand)'
            }, {
                name: 'en-PN',
                displayName: 'English (Pitcairn Islands)'
            }, {
                name: 'en-TK',
                displayName: 'English (Tokelau)'
            }, {
                name: 'mi-NZ',
                displayName: 'Maori (New Zealand)'
            }]
    }, {
        name: 'FJD',
        displayName: 'FJD (Fijian Dollar)',
        cultures: [{
                name: 'en-FJ',
                displayName: 'English (Fiji)'
            }]
    }, {
        name: 'FKP',
        displayName: 'FKP (Falkland Islands Pound)',
        cultures: [{
                name: 'en-FK',
                displayName: 'English (Falkland Islands)'
            }]
    }, {
        name: 'GIP',
        displayName: 'GIP (Gibraltar Pound)',
        cultures: [{
                name: 'en-GI',
                displayName: 'English (Gibraltar)'
            }]
    }, {
        name: 'GMD',
        displayName: 'GMD (Gambian Dalasi)',
        cultures: [{
                name: 'en-GM',
                displayName: 'English (Gambia)'
            }]
    }, {
        name: 'GYD',
        displayName: 'GYD (Guyanaese Dollar)',
        cultures: [{
                name: 'en-GY',
                displayName: 'English (Guyana)'
            }]
    }, {
        name: 'HKD',
        displayName: 'HKD (Hong Kong Dollar)',
        cultures: [{
                name: 'en-HK',
                displayName: 'English (Hong Kong SAR)'
            }, {
                name: 'zh-Hans-HK',
                displayName: 'Chinese (Simplified Han, Hong Kong SAR)'
            }, {
                name: 'zh-HK',
                displayName: 'Chinese (Traditional, Hong Kong S.A.R.)'
            }]
    }, {
        name: 'IDR',
        displayName: 'IDR (Indonesian Rupiah)',
        cultures: [{
                name: 'en-ID',
                displayName: 'English (Indonesia)'
            }, {
                name: 'id-ID',
                displayName: 'Indonesian (Indonesia)'
            }, {
                name: 'jv-Java-ID',
                displayName: 'Javanese (Javanese, Indonesia)'
            }, {
                name: 'jv-Latn-ID',
                displayName: 'Javanese (Indonesia)'
            }]
    }, {
        name: 'JMD',
        displayName: 'JMD (Jamaican Dollar)',
        cultures: [{
                name: 'en-JM',
                displayName: 'English (Jamaica)'
            }]
    }, {
        name: 'KYD',
        displayName: 'KYD (Cayman Islands Dollar)',
        cultures: [{
                name: 'en-KY',
                displayName: 'English (Cayman Islands)'
            }]
    }, {
        name: 'LRD',
        displayName: 'LRD (Liberian Dollar)',
        cultures: [{
                name: 'en-LR',
                displayName: 'English (Liberia)'
            }, {
                name: 'vai-Latn-LR',
                displayName: 'Vai (Latin, Liberia)'
            }, {
                name: 'vai-Vaii-LR',
                displayName: 'Vai (Vai, Liberia)'
            }]
    }, {
        name: 'MGA',
        displayName: 'MGA (Malagasy Ariary)',
        cultures: [{
                name: 'en-MG',
                displayName: 'English (Madagascar)'
            }, {
                name: 'fr-MG',
                displayName: 'French (Madagascar)'
            }, {
                name: 'mg-MG',
                displayName: 'Malagasy (Madagascar)'
            }]
    }, {
        name: 'MOP',
        displayName: 'MOP (Macanese Pataca)',
        cultures: [{
                name: 'en-MO',
                displayName: 'English (Macao SAR)'
            }, {
                name: 'pt-MO',
                displayName: 'Portuguese (Macao SAR)'
            }, {
                name: 'zh-Hans-MO',
                displayName: 'Chinese (Simplified Han, Macao SAR)'
            }, {
                name: 'zh-MO',
                displayName: 'Chinese (Traditional, Macao S.A.R.)'
            }]
    }, {
        name: 'MUR',
        displayName: 'MUR (Mauritian Rupee)',
        cultures: [{
                name: 'en-MU',
                displayName: 'English (Mauritius)'
            }, {
                name: 'fr-MU',
                displayName: 'French (Mauritius)'
            }, {
                name: 'mfe-MU',
                displayName: 'Morisyen (Mauritius)'
            }]
    }, {
        name: 'MWK',
        displayName: 'MWK (Malawian Kwacha)',
        cultures: [{
                name: 'en-MW',
                displayName: 'English (Malawi)'
            }]
    }, {
        name: 'MYR',
        displayName: 'MYR (Malaysian Ringgit)',
        cultures: [{
                name: 'en-MY',
                displayName: 'English (Malaysia)'
            }, {
                name: 'ms-MY',
                displayName: 'Malay (Malaysia)'
            }, {
                name: 'ta-MY',
                displayName: 'Tamil (Malaysia)'
            }]
    }, {
        name: 'PGK',
        displayName: 'PGK (Papua New Guinean Kina)',
        cultures: [{
                name: 'en-PG',
                displayName: 'English (Papua New Guinea)'
            }]
    }, {
        name: 'PHP',
        displayName: 'PHP (Philippine Peso)',
        cultures: [{
                name: 'en-PH',
                displayName: 'English (Republic of the Philippines)'
            }, {
                name: 'es-PH',
                displayName: 'Spanish (Philippines)'
            }, {
                name: 'fil-PH',
                displayName: 'Filipino (Philippines)'
            }]
    }, {
        name: 'PKR',
        displayName: 'PKR (Pakistani Rupee)',
        cultures: [{
                name: 'en-PK',
                displayName: 'English (Pakistan)'
            }, {
                name: 'pa-Arab-PK',
                displayName: 'Punjabi (Islamic Republic of Pakistan)'
            }, {
                name: 'sd-Arab-PK',
                displayName: 'Sindhi (Islamic Republic of Pakistan)'
            }, {
                name: 'ur-PK',
                displayName: 'Urdu (Islamic Republic of Pakistan)'
            }]
    }, {
        name: 'RWF',
        displayName: 'RWF (Rwandan Franc)',
        cultures: [{
                name: 'en-RW',
                displayName: 'English (Rwanda)'
            }, {
                name: 'fr-RW',
                displayName: 'French (Rwanda)'
            }, {
                name: 'rw-RW',
                displayName: 'Kinyarwanda (Rwanda)'
            }]
    }, {
        name: 'SBD',
        displayName: 'SBD (Solomon Islands Dollar)',
        cultures: [{
                name: 'en-SB',
                displayName: 'English (Solomon Islands)'
            }]
    }, {
        name: 'SCR',
        displayName: 'SCR (Seychellois Rupee)',
        cultures: [{
                name: 'en-SC',
                displayName: 'English (Seychelles)'
            }, {
                name: 'fr-SC',
                displayName: 'French (Seychelles)'
            }]
    }, {
        name: 'SEK',
        displayName: 'SEK (Swedish Krona)',
        cultures: [{
                name: 'en-SE',
                displayName: 'English (Sweden)'
            }, {
                name: 'se-SE',
                displayName: 'Sami, Northern (Sweden)'
            }, {
                name: 'sma-SE',
                displayName: 'Sami, Southern (Sweden)'
            }, {
                name: 'smj-SE',
                displayName: 'Sami, Lule (Sweden)'
            }, {
                name: 'sv-SE',
                displayName: 'Swedish (Sweden)'
            }]
    }, {
        name: 'SGD',
        displayName: 'SGD (Singapore Dollar)',
        cultures: [{
                name: 'en-SG',
                displayName: 'English (Singapore)'
            }, {
                name: 'ms-SG',
                displayName: 'Malay (Latin, Singapore)'
            }, {
                name: 'ta-SG',
                displayName: 'Tamil (Singapore)'
            }, {
                name: 'zh-SG',
                displayName: 'Chinese (Simplified, Singapore)'
            }]
    }, {
        name: 'SHP',
        displayName: 'SHP (Saint Helena Pound)',
        cultures: [{
                name: 'en-SH',
                displayName: 'English (St Helena, Ascension, Tristan da Cunha)'
            }]
    }, {
        name: 'SLL',
        displayName: 'SLL (Sierra Leonean Leone)',
        cultures: [{
                name: 'en-SL',
                displayName: 'English (Sierra Leone)'
            }]
    }, {
        name: 'ANG',
        displayName: 'ANG (Netherlands Antillean Guilder)',
        cultures: [{
                name: 'en-SX',
                displayName: 'English (Sint Maarten)'
            }, {
                name: 'nl-CW',
                displayName: 'Dutch (Curaçao)'
            }, {
                name: 'nl-SX',
                displayName: 'Dutch (Sint Maarten)'
            }]
    }, {
        name: 'SZL',
        displayName: 'SZL (Swazi Lilangeni)',
        cultures: [{
                name: 'en-SZ',
                displayName: 'English (Swaziland)'
            }, {
                name: 'ss-SZ',
                displayName: 'Swati (Swaziland)'
            }]
    }, {
        name: 'TOP',
        displayName: 'TOP (Tongan Paʻanga)',
        cultures: [{
                name: 'en-TO',
                displayName: 'English (Tonga)'
            }, {
                name: 'to-TO',
                displayName: 'Tongan (Tonga)'
            }]
    }, {
        name: 'TTD',
        displayName: 'TTD (Trinidad and Tobago Dollar)',
        cultures: [{
                name: 'en-TT',
                displayName: 'English (Trinidad and Tobago)'
            }]
    }, {
        name: 'VUV',
        displayName: 'VUV (Vanuatu Vatu)',
        cultures: [{
                name: 'en-VU',
                displayName: 'English (Vanuatu)'
            }, {
                name: 'fr-VU',
                displayName: 'French (Vanuatu)'
            }]
    }, {
        name: 'WST',
        displayName: 'WST (Samoan Tala)',
        cultures: [{
                name: 'en-WS',
                displayName: 'English (Samoa)'
            }]
    }, {
        name: 'ARS',
        displayName: 'ARS (Argentine Peso)',
        cultures: [{
                name: 'es-AR',
                displayName: 'Spanish (Argentina)'
            }]
    }, {
        name: 'BOB',
        displayName: 'BOB (Bolivian Boliviano)',
        cultures: [{
                name: 'es-BO',
                displayName: 'Spanish (Bolivia)'
            }, {
                name: 'quz-BO',
                displayName: 'Quechua (Bolivia)'
            }]
    }, {
        name: 'BRL',
        displayName: 'BRL (Brazilian Real)',
        cultures: [{
                name: 'es-BR',
                displayName: 'Spanish (Brazil)'
            }, {
                name: 'pt-BR',
                displayName: 'Portuguese (Brazil)'
            }]
    }, {
        name: 'COP',
        displayName: 'COP (Colombian Peso)',
        cultures: [{
                name: 'es-CO',
                displayName: 'Spanish (Colombia)'
            }]
    }, {
        name: 'CRC',
        displayName: 'CRC (Costa Rican Colón)',
        cultures: [{
                name: 'es-CR',
                displayName: 'Spanish (Costa Rica)'
            }]
    }, {
        name: 'CUP',
        displayName: 'CUP (Cuban Peso)',
        cultures: [{
                name: 'es-CU',
                displayName: 'Spanish (Cuba)'
            }]
    }, {
        name: 'DOP',
        displayName: 'DOP (Dominican Peso)',
        cultures: [{
                name: 'es-DO',
                displayName: 'Spanish (Dominican Republic)'
            }]
    }, {
        name: 'GTQ',
        displayName: 'GTQ (Guatemalan Quetzal)',
        cultures: [{
                name: 'es-GT',
                displayName: 'Spanish (Guatemala)'
            }, {
                name: 'quc-Latn-GT',
                displayName: "K'iche' (Guatemala)"
            }]
    }, {
        name: 'HNL',
        displayName: 'HNL (Honduran Lempira)',
        cultures: [{
                name: 'es-HN',
                displayName: 'Spanish (Honduras)'
            }]
    }, {
        name: 'MXN',
        displayName: 'MXN (Mexican Peso)',
        cultures: [{
                name: 'es-MX',
                displayName: 'Spanish (Mexico)'
            }]
    }, {
        name: 'NIO',
        displayName: 'NIO (Nicaraguan Córdoba)',
        cultures: [{
                name: 'es-NI',
                displayName: 'Spanish (Nicaragua)'
            }]
    }, {
        name: 'PAB',
        displayName: 'PAB (Panamanian Balboa)',
        cultures: [{
                name: 'es-PA',
                displayName: 'Spanish (Panama)'
            }]
    }, {
        name: 'PEN',
        displayName: 'PEN (Peruvian Sol)',
        cultures: [{
                name: 'es-PE',
                displayName: 'Spanish (Peru)'
            }, {
                name: 'quz-PE',
                displayName: 'Quechua (Peru)'
            }]
    }, {
        name: 'PYG',
        displayName: 'PYG (Paraguayan Guarani)',
        cultures: [{
                name: 'es-PY',
                displayName: 'Spanish (Paraguay)'
            }, {
                name: 'gn-PY',
                displayName: 'Guarani (Paraguay)'
            }]
    }, {
        name: 'UYU',
        displayName: 'UYU (Uruguayan Peso)',
        cultures: [{
                name: 'es-UY',
                displayName: 'Spanish (Uruguay)'
            }]
    }, {
        name: 'VEF',
        displayName: 'VEF (Venezuelan Bolívar)',
        cultures: [{
                name: 'es-VE',
                displayName: 'Spanish (Bolivarian Republic of Venezuela)'
            }]
    }, {
        name: 'IRR',
        displayName: 'IRR (Iranian Rial)',
        cultures: [{
                name: 'fa-IR',
                displayName: 'Persian (Iran)'
            }, {
                name: 'ku-Arab-IR',
                displayName: 'Kurdish (Perso-Arabic, Iran)'
            }, {
                name: 'lrc-IR',
                displayName: 'Northern Luri (Iran)'
            }, {
                name: 'mzn-IR',
                displayName: 'Mazanderani (Iran)'
            }]
    }, {
        name: 'GNF',
        displayName: 'GNF (Guinean Franc)',
        cultures: [{
                name: 'ff-GN',
                displayName: 'Fulah (Guinea)'
            }, {
                name: 'fr-GN',
                displayName: 'French (Guinea)'
            }, {
                name: 'nqo-GN',
                displayName: "N'ko (Guinea)"
            }]
    }, {
        name: 'CDF',
        displayName: 'CDF (Congolese Franc)',
        cultures: [{
                name: 'fr-CD',
                displayName: 'French (Congo DRC)'
            }, {
                name: 'ln-CD',
                displayName: 'Lingala (Congo DRC)'
            }, {
                name: 'lu-CD',
                displayName: 'Luba-Katanga (Congo DRC)'
            }, {
                name: 'sw-CD',
                displayName: 'Kiswahili (Congo DRC)'
            }]
    }, {
        name: 'HTG',
        displayName: 'HTG (Haitian Gourde)',
        cultures: [{
                name: 'fr-HT',
                displayName: 'French (Haiti)'
            }]
    }, {
        name: 'XPF',
        displayName: 'XPF (CFP Franc)',
        cultures: [{
                name: 'fr-NC',
                displayName: 'French (New Caledonia)'
            }, {
                name: 'fr-PF',
                displayName: 'French (French Polynesia)'
            }, {
                name: 'fr-WF',
                displayName: 'French (Wallis and Futuna)'
            }]
    }, {
        name: 'HRK',
        displayName: 'HRK (Croatian Kuna)',
        cultures: [{
                name: 'hr-HR',
                displayName: 'Croatian (Croatia)'
            }]
    }, {
        name: 'HUF',
        displayName: 'HUF (Hungarian Forint)',
        cultures: [{
                name: 'hu-HU',
                displayName: 'Hungarian (Hungary)'
            }]
    }, {
        name: 'AMD',
        displayName: 'AMD (Armenian Dram)',
        cultures: [{
                name: 'hy-AM',
                displayName: 'Armenian (Armenia)'
            }]
    }, {
        name: 'ISK',
        displayName: 'ISK (Icelandic Króna)',
        cultures: [{
                name: 'is-IS',
                displayName: 'Icelandic (Iceland)'
            }]
    }, {
        name: 'JPY',
        displayName: 'JPY (Japanese Yen)',
        cultures: [{
                name: 'ja-JP',
                displayName: 'Japanese (Japan)'
            }]
    }, {
        name: 'GEL',
        displayName: 'GEL (Georgian Lari)',
        cultures: [{
                name: 'ka-GE',
                displayName: 'Georgian (Georgia)'
            }, {
                name: 'os-GE',
                displayName: 'Ossetian (Cyrillic, Georgia)'
            }]
    }, {
        name: 'CVE',
        displayName: 'CVE (Cape Verdean Escudo)',
        cultures: [{
                name: 'kea-CV',
                displayName: 'Kabuverdianu (Cabo Verde)'
            }, {
                name: 'pt-CV',
                displayName: 'Portuguese (Cabo Verde)'
            }]
    }, {
        name: 'KZT',
        displayName: 'KZT (Kazakhstani Tenge)',
        cultures: [{
                name: 'kk-KZ',
                displayName: 'Kazakh (Kazakhstan)'
            }, {
                name: 'ru-KZ',
                displayName: 'Russian (Kazakhstan)'
            }]
    }, {
        name: 'KHR',
        displayName: 'KHR (Cambodian Riel)',
        cultures: [{
                name: 'km-KH',
                displayName: 'Khmer (Cambodia)'
            }]
    }, {
        name: 'KPW',
        displayName: 'KPW (North Korean Won)',
        cultures: [{
                name: 'ko-KP',
                displayName: 'Korean (North Korea)'
            }]
    }, {
        name: 'KRW',
        displayName: 'KRW (South Korean Won)',
        cultures: [{
                name: 'ko-KR',
                displayName: 'Korean (Korea)'
            }]
    }, {
        name: 'KGS',
        displayName: 'KGS (Kyrgystani Som)',
        cultures: [{
                name: 'ky-KG',
                displayName: 'Kyrgyz (Kyrgyzstan)'
            }, {
                name: 'ru-KG',
                displayName: 'Russian (Kyrgyzstan)'
            }]
    }, {
        name: 'AOA',
        displayName: 'AOA (Angolan Kwanza)',
        cultures: [{
                name: 'ln-AO',
                displayName: 'Lingala (Angola)'
            }, {
                name: 'pt-AO',
                displayName: 'Portuguese (Angola)'
            }]
    }, {
        name: 'LAK',
        displayName: 'LAK (Laotian Kip)',
        cultures: [{
                name: 'lo-LA',
                displayName: 'Lao (Lao P.D.R.)'
            }]
    }, {
        name: 'MZN',
        displayName: 'MZN (Mozambican Metical)',
        cultures: [{
                name: 'mgh-MZ',
                displayName: 'Makhuwa-Meetto (Mozambique)'
            }, {
                name: 'pt-MZ',
                displayName: 'Portuguese (Mozambique)'
            }, {
                name: 'seh-MZ',
                displayName: 'Sena (Mozambique)'
            }]
    }, {
        name: 'MKD',
        displayName: 'MKD (Macedonian Denar)',
        cultures: [{
                name: 'mk-MK',
                displayName: 'Macedonian (Former Yugoslav Republic of Macedonia)'
            }, {
                name: 'sq-MK',
                displayName: 'Albanian (Macedonia, FYRO)'
            }]
    }, {
        name: 'MNT',
        displayName: 'MNT (Mongolian Tugrik)',
        cultures: [{
                name: 'mn-MN',
                displayName: 'Mongolian (Cyrillic, Mongolia)'
            }, {
                name: 'mn-Mong-MN',
                displayName: 'Mongolian (Traditional Mongolian, Mongolia)'
            }]
    }, {
        name: 'BND',
        displayName: 'BND (Brunei Dollar)',
        cultures: [{
                name: 'ms-BN',
                displayName: 'Malay (Brunei Darussalam)'
            }]
    }, {
        name: 'MMK',
        displayName: 'MMK (Myanmar Kyat)',
        cultures: [{
                name: 'my-MM',
                displayName: 'Burmese (Myanmar)'
            }]
    }, {
        name: 'NOK',
        displayName: 'NOK (Norwegian Krone)',
        cultures: [{
                name: 'nb-NO',
                displayName: 'Norwegian, Bokmål (Norway)'
            }, {
                name: 'nb-SJ',
                displayName: 'Norwegian, Bokmål (Svalbard and Jan Mayen)'
            }, {
                name: 'nn-NO',
                displayName: 'Norwegian, Nynorsk (Norway)'
            }, {
                name: 'se-NO',
                displayName: 'Sami, Northern (Norway)'
            }, {
                name: 'sma-NO',
                displayName: 'Sami, Southern (Norway)'
            }, {
                name: 'smj-NO',
                displayName: 'Sami, Lule (Norway)'
            }]
    }, {
        name: 'NPR',
        displayName: 'NPR (Nepalese Rupee)',
        cultures: [{
                name: 'ne-NP',
                displayName: 'Nepali (Nepal)'
            }]
    }, {
        name: 'AWG',
        displayName: 'AWG (Aruban Florin)',
        cultures: [{
                name: 'nl-AW',
                displayName: 'Dutch (Aruba)'
            }]
    }, {
        name: 'SRD',
        displayName: 'SRD (Surinamese Dollar)',
        cultures: [{
                name: 'nl-SR',
                displayName: 'Dutch (Suriname)'
            }]
    }, {
        name: 'PLN',
        displayName: 'PLN (Polish Zloty)',
        cultures: [{
                name: 'pl-PL',
                displayName: 'Polish (Poland)'
            }]
    }, {
        name: 'AFN',
        displayName: 'AFN (Afghan Afghani)',
        cultures: [{
                name: 'prs-AF',
                displayName: 'Dari (Afghanistan)'
            }, {
                name: 'ps-AF',
                displayName: 'Pashto (Afghanistan)'
            }, {
                name: 'uz-Arab-AF',
                displayName: 'Uzbek (Perso-Arabic, Afghanistan)'
            }]
    }, {
        name: 'STD',
        displayName: 'STD (São Tomé and Príncipe Dobra)',
        cultures: [{
                name: 'pt-ST',
                displayName: 'Portuguese (São Tomé and Príncipe)'
            }]
    }, {
        name: 'MDL',
        displayName: 'MDL (Moldovan Leu)',
        cultures: [{
                name: 'ro-MD',
                displayName: 'Romanian (Moldova)'
            }, {
                name: 'ru-MD',
                displayName: 'Russian (Moldova)'
            }]
    }, {
        name: 'RON',
        displayName: 'RON (Romanian Leu)',
        cultures: [{
                name: 'ro-RO',
                displayName: 'Romanian (Romania)'
            }]
    }, {
        name: 'UAH',
        displayName: 'UAH (Ukrainian Hryvnia)',
        cultures: [{
                name: 'ru-UA',
                displayName: 'Russian (Ukraine)'
            }, {
                name: 'uk-UA',
                displayName: 'Ukrainian (Ukraine)'
            }]
    }, {
        name: 'LKR',
        displayName: 'LKR (Sri Lankan Rupee)',
        cultures: [{
                name: 'si-LK',
                displayName: 'Sinhala (Sri Lanka)'
            }, {
                name: 'ta-LK',
                displayName: 'Tamil (Sri Lanka)'
            }]
    }, {
        name: 'ALL',
        displayName: 'ALL (Albanian Lek)',
        cultures: [{
                name: 'sq-AL',
                displayName: 'Albanian (Albania)'
            }]
    }, {
        name: 'RSD',
        displayName: 'RSD (Serbian Dinar)',
        cultures: [{
                name: 'sr-Cyrl-RS',
                displayName: 'Serbian (Cyrillic, Serbia)'
            }, {
                name: 'sr-Latn-RS',
                displayName: 'Serbian (Latin, Serbia)'
            }]
    }, {
        name: 'TJS',
        displayName: 'TJS (Tajikistani Somoni)',
        cultures: [{
                name: 'tg-Cyrl-TJ',
                displayName: 'Tajik (Cyrillic, Tajikistan)'
            }]
    }, {
        name: 'THB',
        displayName: 'THB (Thai Baht)',
        cultures: [{
                name: 'th-TH',
                displayName: 'Thai (Thailand)'
            }]
    }, {
        name: 'TMT',
        displayName: 'TMT (Turkmenistani Manat)',
        cultures: [{
                name: 'tk-TM',
                displayName: 'Turkmen (Turkmenistan)'
            }]
    }, {
        name: 'TRY',
        displayName: 'TRY (Turkish Lira)',
        cultures: [{
                name: 'tr-TR',
                displayName: 'Turkish (Turkey)'
            }]
    }, {
        name: 'UZS',
        displayName: 'UZS (Uzbekistani Som)',
        cultures: [{
                name: 'uz-Cyrl-UZ',
                displayName: 'Uzbek (Cyrillic, Uzbekistan)'
            }, {
                name: 'uz-Latn-UZ',
                displayName: 'Uzbek (Latin, Uzbekistan)'
            }]
    }, {
        name: 'VND',
        displayName: 'VND (Vietnamese Dong)',
        cultures: [{
                name: 'vi-VN',
                displayName: 'Vietnamese (Vietnam)'
            }]
    }, {
        name: 'TWD',
        displayName: 'TWD (New Taiwan Dollar)',
        cultures: [{
                name: 'zh-TW',
                displayName: 'Chinese (Traditional, Taiwan)'
            }]
    }];


/***/ }),

/***/ 256:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurrencySelector = exports.CultureInfo = exports.CurrencyInfo = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _format_helper_1 = __webpack_require__(27893);
const _knockout_utils_1 = __webpack_require__(4437);
const _currencies_1 = __webpack_require__(89176);
class CurrencyInfo {
    constructor(name, displayText, previewText = '') {
        this.name = name;
        this.displayText = displayText;
        this.previewText = previewText;
    }
}
exports.CurrencyInfo = CurrencyInfo;
class CultureInfo {
}
exports.CultureInfo = CultureInfo;
class CurrencySelector {
    constructor(currencyCultureName, disabled) {
        this.disabled = disabled;
        this._defaultCurrency = null;
        this._getDefaultCurrencyInfo = function () {
            if (!this._defaultCurrency) {
                this._defaultCurrency = new CurrencyInfo(null, _default_1.getLocalizationById('DashboardStringId.DashboardCurrencyUseCurrentCurrency'), '');
                this._defaultCurrency.cultures = [{
                        name: null,
                        displayText: _default_1.getLocalizationById('DashboardStringId.DashboardCurrencyUseCurrentCurrency')
                    }];
            }
            return this._defaultCurrency;
        };
        this.getPreviewText = function (value, currency) {
            if (currency) {
                var dashboardFormat = {
                    format: 'currency',
                    currency: currency
                };
                return _format_helper_1.DashboardFormatHelper.format(value, dashboardFormat);
            }
            else {
                return null;
            }
        };
        this.selectedCurrency = ko.observable(this._getDefaultCurrencyInfo());
        this.selectedCulture = ko.observable(this._getDefaultCurrencyInfo().cultures[0]);
        this.previewPositive = ko.pureComputed(() => this.getPreviewText(123, this.selectedCurrency().name));
        this.previewNegative = ko.pureComputed(() => this.getPreviewText(-123, this.selectedCurrency().name));
        this.previewWarning = ko.pureComputed(() => this.selectedCurrency().name ? null : _default_1.getLocalizationById('DashboardWebStringId.Currency.DefaultCurrencyWarning'));
        this.currencies = ko.observableArray([this._getDefaultCurrencyInfo()].concat(_currencies_1.CURRENCIES.map((currency) => {
            var currencyInfo = new CurrencyInfo(currency.name, currency.displayName, this.getPreviewText(123, currency.name));
            currencyInfo.cultures = currency.cultures.map(culture => {
                var cultureInfo = new CultureInfo();
                cultureInfo.name = culture.name;
                cultureInfo.displayText = culture.displayName;
                if (cultureInfo.name === currencyCultureName()) {
                    this.selectedCurrency(currencyInfo);
                    this.selectedCulture(cultureInfo);
                }
                return cultureInfo;
            });
            return currencyInfo;
        }).sort((c1, c2) => c1.displayText.localeCompare(c2.displayText))));
        _knockout_utils_1.subscribeWithPrev(this.selectedCurrency, (prevCurrencyInfo, currencyInfo) => {
            if (currencyInfo && prevCurrencyInfo !== currencyInfo) {
                this.selectedCulture(currencyInfo.cultures[0]);
            }
        });
        this.selectedCulture.subscribe(currencyCultureInfo => {
            if (currencyCultureInfo) {
                currencyCultureName(currencyCultureInfo.name);
            }
        });
    }
}
exports.CurrencySelector = CurrencySelector;
ko.components.register('dx-dashboard-currency-selector', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            return new CurrencySelector(params.currencyCultureName, ko.observable(false));
        }
    },
    template: { element: 'dx-dash-currency-selector' }
});


/***/ }),

/***/ 14058:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardCurrencyEditorExtension = void 0;
const ko = __webpack_require__(71032);
const control_options_1 = __webpack_require__(82560);
const toolbox_items_1 = __webpack_require__(29608);
var name = 'dashboard-currency-editor';
var nameAlias = 'dashboardCurrencyEditor';
class DashboardCurrencyEditorExtension {
    constructor(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._menuItem = new toolbox_items_1.DashboardMenuItem(this.name, 'DashboardWebStringId.DashboardMenuCurrency', 230, 67);
        this._menuItem.template = 'dx-dashboard-form-currency-settings';
        this._menuItem.data = dashboardControl;
        this._menuItem.disabled = ko.computed(() => !this.dashboardControl.dashboard());
    }
    start() {
        let toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.push(this._menuItem);
        }
    }
    stop() {
        let toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.remove(this._menuItem);
        }
    }
}
exports.DashboardCurrencyEditorExtension = DashboardCurrencyEditorExtension;
control_options_1.designerExtensions[name] = (dashboardControl, options) => new DashboardCurrencyEditorExtension(dashboardControl);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 4771:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddDataSourcePopup = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const dashboard_1 = __webpack_require__(15306);
class AddDataSourcePopup {
    constructor(accessibleDataSourcesExtension, dataSourceFilter, addDataSourcesCallback, popupVisible) {
        this.title = _default_1.getLocalizationById('DashboardWebStringId.DataSources.AddDataSource');
        this.toolbarItems = [];
        this.addButtonDisable = ko.computed(() => { return accessibleDataSourcesExtension && accessibleDataSourcesExtension().selectedDataSources().length === 0; });
        this.template = accessibleDataSourcesExtension().templateName;
        this.bindingData = accessibleDataSourcesExtension().viewModel;
        this.dataSourcesFilter = dataSourceFilter;
        this.toolbarItems = [{
                toolbar: 'bottom',
                location: 'after',
                widget: 'dxButton',
                disabled: this.addButtonDisable,
                options: {
                    text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.IncludeToTheDashboard'),
                    type: 'default',
                    onClick: () => {
                        addDataSourcesCallback(accessibleDataSourcesExtension().selectedDataSources().map(dataSource => {
                            return dashboard_1.Dashboard._createDataSource(new analytics_utils_1.ModelSerializer({ useRefs: false }).serialize(dataSource), new analytics_utils_1.ModelSerializer());
                        }));
                        popupVisible(false);
                    }
                }
            }, {
                toolbar: 'bottom',
                location: 'after',
                widget: 'dxButton',
                options: {
                    text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.Cancel'),
                    onClick: () => { popupVisible(false); }
                }
            }];
    }
}
exports.AddDataSourcePopup = AddDataSourcePopup;


/***/ }),

/***/ 76279:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataSourceTreeListViewModel = exports.DataSourceBrowserViewModel = void 0;
const analytics_widgets_1 = __webpack_require__(30010);
const analytics_widgets_internal_1 = __webpack_require__(86092);
const ko = __webpack_require__(71032);
const _data_source_browser_1 = __webpack_require__(9970);
const _default_1 = __webpack_require__(65855);
const model_1 = __webpack_require__(14198);
const json_data_source_1 = __webpack_require__(32988);
const sql_data_source_1 = __webpack_require__(66265);
const disposable_object_1 = __webpack_require__(99253);
const index_internal_1 = __webpack_require__(47350);
const _helper_classes_1 = __webpack_require__(8384);
const _undo_engine_helper_1 = __webpack_require__(2908);
const _calc_field_editor_1 = __webpack_require__(10571);
const _expression_editor_item_provider_1 = __webpack_require__(14531);
const _filter_utils_1 = __webpack_require__(87524);
const _field_list_item_provider_1 = __webpack_require__(28475);
const _rename_data_source_popup_1 = __webpack_require__(27123);
const _add_data_source_popup_1 = __webpack_require__(4771);
class DataSourceBrowserViewModel extends disposable_object_1.DisposableObject {
    constructor(dataSourceBrowser, dataSourceWizardExtension, accessibleDataSourcesExtension, updateHub) {
        super();
        this.dataSourceBrowser = dataSourceBrowser;
        this.dataSourceWizardExtension = dataSourceWizardExtension;
        this.accessibleDataSourcesExtension = accessibleDataSourcesExtension;
        this.editDataSourceActions = ko.observableArray();
        this.addDataSources = (dataSources) => {
            dataSources.forEach(dataSource => {
                if (!dataSource.name() || !_helper_classes_1.NameGenerator.isValidName(dataSource.name(), this.dataSourceBrowser._dataSources(), 'name')) {
                    var prefix = !dataSource.name() ? _default_1.getLocalizationById(dataSource.getDisplayNamePrefix()) : dataSource.name();
                    dataSource.name(_helper_classes_1.NameGenerator.generateName(prefix + ' ', this.dataSourceBrowser._dataSources(), 'name', 1));
                }
                this.dataSourceBrowser._dataSources.push(dataSource);
                this.selectedDataSource(dataSource);
            });
        };
        this.addQuery = () => {
            this.editQuery(null);
        };
        this.manageQueries = () => {
            this.manageFederationQueries();
        };
        this.dataSourceActions = ko.observableArray();
        this.removeDataSource = (dataSource) => {
            this._removeDataSource(dataSource);
        };
        this.showRenameDataSourceForm = (dataSource) => {
            this.renameDataSourcePopup.show(dataSource);
        };
        this.usedDataSourcesExist = () => {
            return this.dataSourceBrowser._dataSources().length > 0;
        };
        this.availableDataSourcesExist = () => {
            return this.accessibleDataSourcesExtension() && this.accessibleDataSourcesExtension().dataSources().length > 0;
        };
        this.popupContent = ko.observable();
        this.popupVisible = ko.computed({
            read: () => {
                return !!this.popupContent();
            },
            write: (val) => {
                if (!val) {
                    this.popupContent(undefined);
                }
            }
        });
        this.addCalculatedField = () => {
            if (this.canAddCalculatedField) {
                var dataSource = this.selectedDataSource();
                var { dataMember, fieldPath } = _data_source_browser_1.findDataMember(dataSource, _data_source_browser_1.trimLeadingPathElement(this.selectedPath(), dataSource.componentName()));
                if (!dataMember && dataSource.supportDataMembers) {
                    dataMember = _data_source_browser_1.getFirstDataMember(dataSource);
                }
                var pathInCache = [this.selectedDataSourceComponentName()].concat(dataMember ? [dataMember] : []);
                this.calcFieldEditor.showAddDialog(dataSource.componentName(), dataMember)
                    .then(calcField => {
                    var newCalculatedFieldPath = pathInCache.concat([calcField.name()]);
                    this.selectedPath(newCalculatedFieldPath.join('.'));
                });
            }
        };
        this.editCalcField = (field) => {
            this.calcFieldEditor.showEditDialog(field, this.selectedDataSourceComponentName(), field.dataMember());
        };
        this.removeCalcField = (field) => {
            this.calcFieldEditor.removeCalcField(field, this.selectedDataSource().componentName());
        };
        this.selectedPath = ko.observable();
        this.selectedDataSource = ko.observable();
        this.filterEditorModel = ko.computed(() => {
            if (this.selectedDataSource() && this.selectedDataSource().hasFilter) {
                var filterString = this.selectedDataSource().filter;
                var options = _filter_utils_1.createItemFilterOptions(filterString, undefined, this.dataSourceBrowser);
                options().path(this.selectedDataSource().componentName());
                var filterEditorItemsProvider = new _expression_editor_item_provider_1.ExpressionEditorItemsProvider(this.dataSourceBrowser, this.dataSourceBrowser, this.dataSourceBrowser.parameters(), this.selectedDataSource().componentName, ko.observable(''), (field) => !field.isAggregate());
                return new analytics_widgets_1.FilterEditor(options, ko.observable(filterEditorItemsProvider));
            }
            return null;
        });
        this.editFilter = () => {
            this.filterEditorModel() && this.filterEditorModel().popupVisible(true);
        };
        this.calcFieldEditor = new _calc_field_editor_1.CalcFieldEditor(this.dataSourceBrowser);
        this.renameDataSourcePopup = new _rename_data_source_popup_1.RenameDataSourcePopup(this.dataSourceBrowser);
        if (dataSourceBrowser._dataSources().length > 0) {
            this.selectedDataSource(dataSourceBrowser._dataSources()[0]);
        }
        this.selectedDataSourceComponentName = ko.computed(() => {
            return this.selectedDataSource() && this.selectedDataSource().componentName() || '';
        });
        this.allowAddQuery = ko.computed(() => {
            return this.selectedDataSource() instanceof sql_data_source_1.SqlDataSource;
        });
        this.allowManageQueries = ko.computed(() => {
            return this.selectedDataSource() instanceof model_1.FederationDataSource;
        });
        this.allowEditDataSource = ko.computed(() => {
            return this.selectedDataSource() instanceof json_data_source_1.JsonDataSource;
        });
        this.toDispose(this.allowAddQuery);
        this.toDispose(this.allowManageQueries);
        this.toDispose(this.allowEditDataSource);
        this.toDispose(updateHub.dataSourcePropertyChanged.add((args) => this._onDataSourcePropertyChanged(args)));
        this.toDispose(this.selectedDataSource.subscribe(dataSource => {
            this.selectedPath('');
            if (dataSource instanceof sql_data_source_1.SqlDataSource) {
                let sqlDataSource = dataSource;
                if (sqlDataSource.queries().length > 0)
                    this._expandQuery(sqlDataSource, sqlDataSource.queries()[0].name());
            }
        }));
        if (this.accessibleDataSourcesExtension()) {
            this.dataSourceActions.push({
                click: () => this.showAddDataSourceForm(),
                text: _default_1.getLocalizationById('DashboardWebStringId.Add'),
                disabled: ko.computed(() => false)
            });
        }
        this.editDataSourceActions.push({
            click: () => this.addCalculatedField(),
            text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.AddCalculatedField'),
            visible: ko.computed(() => this.canAddCalculatedField)
        });
        if (this.canEditDataSource) {
            this.editDataSourceActions.push({
                click: () => this.addQuery(),
                text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.AddQuery'),
                visible: ko.computed(() => this.allowAddQuery())
            });
            this.editDataSourceActions.push({
                click: () => this.editDataSource(),
                text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.Edit'),
                visible: ko.computed(() => this.allowEditDataSource())
            });
            this.editDataSourceActions.push({
                click: () => this.manageQueries(),
                text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.ManageQueries'),
                visible: ko.computed(() => this.allowManageQueries())
            });
        }
        this.editDataSourceActions.push({
            click: () => this.editFilter(),
            text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.Filter'),
            visible: ko.computed(() => this.filterEditorModel() !== null)
        });
        this.dataSourceTreeListViewModel = new DataSourceTreeListViewModel(this);
    }
    _expandQuery(dataSource, queryName) {
        this.dataSourceBrowser.getDataFieldsArray(dataSource.componentName(), queryName, '', _data_source_browser_1.isNonCollectionDataField).done(dataFields => {
            if (dataFields.length > 0) {
                this.selectedPath([dataSource.componentName(), queryName, dataFields[0].name()].join('.'));
            }
        });
    }
    get canEditDataSource() {
        return !!this.dataSourceWizardExtension();
    }
    get canEditCustomSqlQueries() {
        return this.dataSourceWizardExtension() && this.dataSourceWizardExtension().isCustomSqlEnabled || false;
    }
    refreshFieldList() {
        this.dataSourceBrowser.clearFieldsCache(this.selectedDataSourceComponentName());
        this.dataSourceBrowser.initDataSource(this.selectedDataSource());
        this.dataSourceTreeListViewModel.triggerItemsChanged();
    }
    showAddDataSourceForm() {
        this.popupContent(new _add_data_source_popup_1.AddDataSourcePopup(this.accessibleDataSourcesExtension, (ds) => !ds.componentName() || _helper_classes_1.NameGenerator.isValidName(ds.componentName(), this.dataSourceBrowser._dataSources(), 'componentName'), this.addDataSources, this.popupVisible));
    }
    editQuery(queryName) {
        if (this.canEditDataSource) {
            this.dataSourceWizardExtension().showSqlQueryEditingDialog(this.selectedDataSource(), queryName);
        }
    }
    editFederationQuery(queryName) {
        if (this.canEditDataSource) {
            this.dataSourceWizardExtension().showFederationQueryEditingDialog(this.selectedDataSource(), queryName);
        }
    }
    manageFederationQueries() {
        if (this.canEditDataSource) {
            this.dataSourceWizardExtension().showManageFederationQueriesDialog(this.selectedDataSource());
        }
    }
    removeQuery(queryName) {
        var sqlDataSource = this.selectedDataSource();
        if (sqlDataSource) {
            var queryToRemove = sqlDataSource.queries().filter(query => query.name() === queryName)[0];
            if (queryToRemove) {
                sqlDataSource.queries.remove(queryToRemove);
                sqlDataSource.calculatedFields.remove(calcField => calcField.dataMember() === queryName);
            }
        }
    }
    removeFederationQuery(queryName) {
        let federationDataSource = this.selectedDataSource();
        if (federationDataSource) {
            let queryToRemove = federationDataSource.queries().find(query => query.alias() === queryName);
            if (queryToRemove) {
                federationDataSource.queries.remove(queryToRemove);
                federationDataSource.calculatedFields.remove(calcField => calcField.dataMember() === queryName);
            }
        }
    }
    editDataSource() {
        if (this.canEditDataSource) {
            var selectedDataSource = this.selectedDataSource();
            if (selectedDataSource instanceof json_data_source_1.JsonDataSource)
                this.dataSourceWizardExtension()._showEditJsonDataSourceDialog(selectedDataSource);
        }
    }
    _removeDataSource(dataSource) {
        this.selectedDataSource(null);
        this.dataSourceBrowser.removeDataSource(dataSource);
        if (this.dataSourceBrowser._dataSources().length > 0) {
            this.selectedDataSource(this.dataSourceBrowser._dataSources()[0]);
        }
    }
    get canAddCalculatedField() {
        return this.calcFieldEditor.canAddCalculatedField(this.selectedDataSourceComponentName());
    }
    _onDataSourcePropertyChanged(args) {
        if (!args.propertyName)
            this.refreshFieldList();
        else {
            if (args.dataSource instanceof sql_data_source_1.SqlDataSource) {
                let sqlDataSource = args.dataSource;
                switch (args.propertyName) {
                    case 'queries':
                        if (args.status === 'added') {
                            let queryName = args.model.name();
                            this._expandQuery(sqlDataSource, queryName);
                            this.refreshFieldList();
                        }
                        else if (args.status === 'deleted') {
                            this.refreshFieldList();
                        }
                }
            }
            else if (args.dataSource instanceof json_data_source_1.JsonDataSource) {
                switch (args.propertyName) {
                    case 'rootElement':
                    case 'schema':
                        this.refreshFieldList();
                        break;
                }
            }
            else if (args.dataSource instanceof model_1.FederationDataSource) {
                let federationDataSource = args.dataSource;
                switch (args.propertyName) {
                    case 'queries':
                        if (args.status === 'added') {
                            let queryName = args.model.alias();
                            this._expandQuery(federationDataSource, queryName);
                            this.refreshFieldList();
                        }
                        else if (args.status === 'deleted') {
                            this.refreshFieldList();
                        }
                }
            }
            if (args.dataSource.hasCalculatedFields) {
                switch (args.propertyName) {
                    case 'fieldType':
                    case 'expression':
                        this.refreshFieldList();
                        break;
                    case 'calculatedFields':
                        if (args.status === 'added' || args.status === 'deleted')
                            this.refreshFieldList();
                        break;
                }
            }
        }
    }
}
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DataSourceBrowserViewModel.prototype, "_removeDataSource", null);
exports.DataSourceBrowserViewModel = DataSourceBrowserViewModel;
class DataSourceTreeListViewModel {
    constructor(dataSourceBrowserViewModel) {
        this.treeListEditorOption = ko.observable();
        index_internal_1.subscribeAndPerform(dataSourceBrowserViewModel.selectedDataSource, (newDataSource) => {
            if (newDataSource) {
                let getFieldsCallback = (dataSourceName, dataMember, fieldPath) => dataSourceBrowserViewModel.dataSourceBrowser.getDataFieldsArray(dataSourceName, dataMember, fieldPath, () => true);
                this._itemsProvider = new _field_list_item_provider_1.FieldListItemProvider(dataSourceBrowserViewModel, getFieldsCallback);
                this.treeListEditorOption({
                    itemsProvider: this._itemsProvider,
                    treeListController: new DashboardTreeListController(),
                    selectedPath: dataSourceBrowserViewModel.selectedPath,
                    templateName: 'dx-dashboard-treelist-item-template',
                    path: ko.observable(dataSourceBrowserViewModel.selectedDataSourceComponentName())
                });
            }
            else {
                this.treeListEditorOption(null);
            }
        });
    }
    triggerItemsChanged() {
        this._itemsProvider && this._itemsProvider.triggerItemsChanged();
    }
}
exports.DataSourceTreeListViewModel = DataSourceTreeListViewModel;
class DashboardTreeListController extends analytics_widgets_internal_1.TreeListController {
    hasItems(item) {
        return item['hasItems'];
    }
    canSelect(value) {
        return !value.data.isList;
    }
}


/***/ }),

/***/ 18288:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataSourceBrowserExtension = void 0;
const ko = __webpack_require__(71032);
const control_options_1 = __webpack_require__(82560);
const _obsolete_helper_1 = __webpack_require__(64060);
const toolbox_items_1 = __webpack_require__(29608);
const _data_source_browser_viewmodel_1 = __webpack_require__(76279);
var name = 'data-source-browser';
var nameAlias = 'dataSourceBrowser';
class DataSourceBrowserExtension {
    constructor(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._perDashboardSubscription = [];
        this._dataSourceBrowserViewModel = ko.observable();
        this._menuItem = new toolbox_items_1.DashboardMenuItem(this.name, 'DashboardWebStringId.DashboardMenuDataSources', 210, 65);
        this._menuItem.template = 'dx-dashboard-form-datasource-browser';
        this._menuItem.data = this._dataSourceBrowserViewModel;
        this._menuItem.disabled = ko.computed(() => !this.dashboardControl.dashboard());
        _obsolete_helper_1.defineObsoleteProperty({
            target: this,
            memberName: 'dataSourceBrowserViewModel',
            oldMemberDisplayName: 'dataSourceBrowserViewModel',
            action: () => this._dataSourceBrowserViewModel
        });
    }
    _disposePerDashboardSubcriptions() {
        this._perDashboardSubscription.forEach(s => s.dispose());
        this._perDashboardSubscription = [];
    }
    _updateExtensionModel(dashboard) {
        this._disposePerDashboardSubcriptions();
        if (!!dashboard) {
            var dataSourceWizardExtension = ko.computed(() => (this.dashboardControl.findExtension('data-source-wizard')));
            var accessibleDataSourcesExtension = ko.computed(() => (this.dashboardControl.findExtension('available-data-sources')));
            var viewModel = new _data_source_browser_viewmodel_1.DataSourceBrowserViewModel(this.dashboardControl._dataSourceBrowser, dataSourceWizardExtension, accessibleDataSourcesExtension, this.dashboardControl._updateHub);
            this._perDashboardSubscription.push(dataSourceWizardExtension);
            this._perDashboardSubscription.push(accessibleDataSourcesExtension);
            this._perDashboardSubscription.push(viewModel);
            this._dataSourceBrowserViewModel(viewModel);
        }
        else {
            this._dataSourceBrowserViewModel(null);
        }
    }
    start() {
        let toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.push(this._menuItem);
        }
        this._subscription = this.dashboardControl.dashboard.subscribe(this._updateExtensionModel, this);
        this._updateExtensionModel(this.dashboardControl.dashboard());
    }
    stop() {
        this._disposePerDashboardSubcriptions();
        if (this._subscription) {
            this._subscription.dispose();
            this._subscription = undefined;
        }
        let toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.remove(this._menuItem);
        }
    }
}
exports.DataSourceBrowserExtension = DataSourceBrowserExtension;
control_options_1.designerExtensions[name] = (dashboardControl, options) => new DataSourceBrowserExtension(dashboardControl);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 28475:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FieldListItemProvider = exports.DataFieldViewModel = void 0;
const ko = __webpack_require__(71032);
const _data_source_browser_1 = __webpack_require__(9970);
const _jquery_helpers_1 = __webpack_require__(59384);
const model_1 = __webpack_require__(14198);
const data_item_1 = __webpack_require__(44650);
const olap_data_source_1 = __webpack_require__(40755);
const sql_data_source_1 = __webpack_require__(66265);
class DataFieldViewModel {
    constructor(name, displayName, hasItems, specifics, field, isList, isCorruptedCalcField) {
        this.name = name;
        this.displayName = displayName;
        this.hasItems = hasItems;
        this.specifics = specifics;
        this.field = field;
        this.isList = isList;
        this.isCorruptedCalcField = isCorruptedCalcField;
        this.innerActions = ko.observableArray();
    }
}
exports.DataFieldViewModel = DataFieldViewModel;
class FieldListItemProvider {
    constructor(_dataSourceBrowserViewModel, _getDataFieldArrayCallback, isFieldValid) {
        this._dataSourceBrowserViewModel = _dataSourceBrowserViewModel;
        this._getDataFieldArrayCallback = _getDataFieldArrayCallback;
        this.isFieldValid = isFieldValid;
        this.loading = ko.observable(false);
        this._changeTrigger = ko.observable(false);
    }
    triggerItemsChanged() {
        this._changeTrigger.valueHasMutated();
    }
    getItems(pathRequest) {
        var deferred = _jquery_helpers_1.createJQueryDeferred();
        var dataSource = this._dataSourceBrowserViewModel.selectedDataSource();
        this._changeTrigger();
        if (!!dataSource) {
            var { dataMember, fieldPath } = _data_source_browser_1.findDataMember(dataSource, pathRequest.path);
            this.loading(true);
            this._getDataFieldArrayCallback(dataSource.componentName(), dataMember, fieldPath).done(dataFields => {
                deferred.resolve(dataFields
                    .filter(field => !!field.dataMember())
                    .filter(field => !this.isFieldValid || this.isFieldValid(field))
                    .map(dataNode => {
                    var name = dataSource instanceof olap_data_source_1.OlapDataSource ? dataNode.dataMember() : dataNode.name();
                    var dataFieldViewModel = new DataFieldViewModel(name, ko.unwrap(dataNode.displayName), !dataNode.isDataFieldNode(), data_item_1.DataItem.typesMap[dataNode.fieldType()] || 'string', dataNode, !_data_source_browser_1.isNonCollectionDataField(dataNode), dataNode.isCorruptedCalcField && dataNode.isCorruptedCalcField());
                    if (dataSource instanceof sql_data_source_1.SqlDataSource) {
                        let isSqlQueryNode = pathRequest.path.length === 0;
                        let query = dataSource.queries().filter(query => query.name() === dataNode.dataMember())[0];
                        if (this._dataSourceBrowserViewModel.canEditDataSource && query != null && isSqlQueryNode) {
                            if (this._dataSourceBrowserViewModel.canEditCustomSqlQueries || query.type() !== 'CustomSqlQuery') {
                                dataFieldViewModel.innerActions.push({
                                    click: () => {
                                        this._dataSourceBrowserViewModel.editQuery(dataNode.dataMember());
                                    },
                                    icon: 'dx-dashboard-ds-edit',
                                    style: 'dx-dashboard-datasource-field-icon-edit'
                                });
                            }
                            dataFieldViewModel.innerActions.push({
                                click: () => {
                                    this._dataSourceBrowserViewModel.removeQuery(dataNode.dataMember());
                                },
                                icon: 'dx-dashboard-remove-small',
                                style: 'dx-dashboard-datasource-field-icon-remove'
                            });
                        }
                    }
                    if (dataSource instanceof model_1.FederationDataSource) {
                        let isQueryNode = pathRequest.path.length === 0;
                        let query = dataSource.queries().find(query => query.alias() === dataNode.dataMember());
                        if (this._dataSourceBrowserViewModel.canEditDataSource && query && isQueryNode) {
                            dataFieldViewModel.innerActions.push({
                                click: () => {
                                    this._dataSourceBrowserViewModel.editFederationQuery(dataNode.dataMember());
                                },
                                icon: 'dx-dashboard-ds-edit',
                                style: 'dx-dashboard-datasource-field-icon-edit'
                            });
                            dataFieldViewModel.innerActions.push({
                                click: () => {
                                    this._dataSourceBrowserViewModel.removeFederationQuery(dataNode.dataMember());
                                },
                                icon: 'dx-dashboard-remove-small',
                                style: 'dx-dashboard-datasource-field-icon-remove'
                            });
                        }
                    }
                    if (dataNode.nodeType() === 'CalculatedDataField') {
                        dataFieldViewModel.style = 'dx-dashboard-calculated-field';
                        var calcField = dataSource.calculatedFields().filter(calculatedField => calculatedField.name() === dataNode.dataMember())[0];
                        if (calcField) {
                            dataFieldViewModel.innerActions.push({
                                click: () => {
                                    this._dataSourceBrowserViewModel.editCalcField(calcField);
                                },
                                icon: 'dx-dashboard-ds-edit',
                                style: 'dx-dashboard-datasource-field-icon-edit'
                            });
                            dataFieldViewModel.innerActions.push({
                                click: () => {
                                    this._dataSourceBrowserViewModel.removeCalcField(calcField);
                                },
                                icon: 'dx-dashboard-remove-small',
                                style: 'dx-dashboard-datasource-field-icon-remove'
                            });
                        }
                    }
                    this.customizeDataFieldViewModel && this.customizeDataFieldViewModel(dataFieldViewModel);
                    return dataFieldViewModel;
                }));
            });
        }
        else {
            deferred.resolve([]);
        }
        deferred.always(() => {
            this.loading(false);
        });
        return deferred.promise();
    }
}
exports.FieldListItemProvider = FieldListItemProvider;


/***/ }),

/***/ 27123:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RenameDataSourcePopup = void 0;
const _rename_data_source_viewmodel_1 = __webpack_require__(47048);
class RenameDataSourcePopup {
    constructor(dataSourceBrowser) {
        this._viewModel = new _rename_data_source_viewmodel_1.RenameDataSourceViewModel(dataSourceBrowser);
        this.template = {
            name: 'dx-dashboard-datasources-rename-popup',
            data: this._viewModel
        };
    }
    show(dataSource) {
        this._viewModel.show(dataSource);
    }
}
exports.RenameDataSourcePopup = RenameDataSourcePopup;


/***/ }),

/***/ 47048:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RenameDataSourceViewModel = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _helper_classes_1 = __webpack_require__(8384);
class RenameDataSourceViewModel {
    constructor(dataSourceBrowser) {
        this.title = _default_1.getLocalizationById('DashboardWebStringId.DataSources.RenameDataSource');
        this.label = _default_1.getLocalizationById('DashboardWebStringId.DataSources.NewDataSourceName');
        this.isDataSourceNameValid = ko.observable(true);
        this.popupVisible = ko.observable(false);
        this.toolbarItems = [];
        this.dsName = ko.observable('');
        this._dataSourceNameValid = (dsName) => {
            let otherDataSources = this._dataSourceBrowser._dataSources().filter(ds => ds.componentName() !== this._dataSource.componentName());
            return dsName && _helper_classes_1.NameGenerator.isValidName(dsName, otherDataSources, 'name');
        };
        this._dataSourceBrowser = dataSourceBrowser;
        this.toolbarItems = [{
                toolbar: 'bottom',
                location: 'after',
                widget: 'dxButton',
                options: {
                    text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.Rename'),
                    type: 'default',
                    disabled: ko.computed(() => !this.isDataSourceNameValid()),
                    onClick: () => {
                        this._dataSource.name(this.dsName());
                        this.popupVisible(false);
                    }
                }
            },
            {
                toolbar: 'bottom',
                location: 'after',
                widget: 'dxButton',
                options: {
                    text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.Cancel'),
                    onClick: () => { this.popupVisible(false); }
                }
            }];
        this.nameValidationRules = [{
                type: 'required'
            }, {
                type: 'custom',
                validationCallback: (params) => {
                    return this._dataSourceNameValid(params.value);
                },
                message: _default_1.getLocalizationById('DashboardWebStringId.DataSources.DataSourceNameExistsMessage')
            }];
        this.nameTextBoxOptions = {
            value: this.dsName
        };
        this.nameValidatorOptions = {
            isValid: this.isDataSourceNameValid,
            validationRules: this.nameValidationRules
        };
    }
    show(dataSource) {
        this._dataSource = dataSource;
        this.dsName(dataSource.name());
        this.popupVisible(true);
    }
}
exports.RenameDataSourceViewModel = RenameDataSourceViewModel;


/***/ }),

/***/ 12209:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.renameDataMember = exports.FederationDataSourceAnalyticsWrapper = exports.FederationDataSourceProviderWrapper = exports.getFederationFieldList = exports.createWizardSettings = exports.createDataSourceInfos = exports.addOrUpdateQuery = exports.initialQueryAliasSymbol = exports.toAnalyticsFederationDataSource = exports.toSameSourcesFederationQuery = exports.addSourceIfNotExists = exports.toFederationDataSource = exports.createNewFederationDataSource = exports.getDataSourceInfo = void 0;
const analytics_data_1 = __webpack_require__(14376);
const analytics_internal_1 = __webpack_require__(19745);
const analytics_utils_1 = __webpack_require__(25733);
const analytics_wizard_1 = __webpack_require__(72652);
const analytics_wizard_internal_1 = __webpack_require__(44009);
const utils_1 = __webpack_require__(31564);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _utils_1 = __webpack_require__(7590);
const model_1 = __webpack_require__(14198);
const json_data_source_1 = __webpack_require__(32988);
const _helper_classes_1 = __webpack_require__(8384);
const _field_list_provider_1 = __webpack_require__(42114);
function getDataSourceInfo(dataSource) {
    let dataSourceInfo = {
        name: dataSource.name(),
        data: null,
        id: dataSource.componentName(),
        isSqlDataSource: dataSource instanceof model_1.SqlDataSource,
        isJsonDataSource: dataSource instanceof json_data_source_1.JsonDataSource,
        isObjectDataSource: dataSource instanceof model_1.ObjectDataSource,
        isFederationDataSource: dataSource instanceof model_1.FederationDataSource,
        isListType: !dataSource.supportDataMembers,
        isSupportQueries: dataSource.supportDataMembers
    };
    return Object.assign(Object.assign({}, dataSourceInfo), { componentName: dataSource.componentName() });
}
exports.getDataSourceInfo = getDataSourceInfo;
function createNewFederationDataSource(federationWizardModel, usedDataSources) {
    let analyticsDataSource = analytics_wizard_1._restoreFederationDataSourceFromState(federationWizardModel, usedDataSources);
    let federationDataSource = toFederationDataSource(analyticsDataSource, usedDataSources());
    federationDataSource.name(_default_1.getLocalizationById('DashboardStringId.DefaultFederationDataSourceName'));
    return federationDataSource;
}
exports.createNewFederationDataSource = createNewFederationDataSource;
function toFederationDataSource(analyticsDataSource, usedDataSources) {
    let federationDataSource = new model_1.FederationDataSource({ '@ItemType': 'FederationDataSource' }, new analytics_utils_1.ModelSerializer());
    analyticsDataSource.sources().forEach(analyticsSource => {
        let source = toFederationSource(analyticsSource, usedDataSources);
        federationDataSource.sources.push(source);
    });
    analyticsDataSource.queries().forEach(analyticsQuery => {
        let query = toSameSourcesFederationQuery(analyticsQuery);
        federationDataSource.queries.push(query);
    });
    return federationDataSource;
}
exports.toFederationDataSource = toFederationDataSource;
function toFederationSource(analyticsSource, usedDataSources) {
    let source = new model_1.Source({ '@ItemType': 'Source' });
    source.name(analyticsSource.sourceName());
    source.dataMember(analyticsSource.dataMember() || '');
    let dataSourceInfoName = getDataSourceName(analyticsSource.sourceName(), analyticsSource.dataMember());
    let dataSourceInfo = usedDataSources.find(dsInfo => dsInfo.name === dataSourceInfoName);
    if (!dataSourceInfo)
        throw new Error(`The dashboard DataSource for SourceName '${analyticsSource.sourceName()}' is not found.`);
    source.dataSource(dataSourceInfo.componentName);
    return source;
}
function getDataSourceName(analyticsSourceName, analyticsDataMember) {
    return analyticsSourceName && analyticsDataMember ? analyticsSourceName.slice(0, -(analyticsDataMember.length + 1)) : analyticsSourceName;
}
function addSourceIfNotExists(analyticsSource, dashboardFederationDataSource, usedDataSources) {
    let existingSource = dashboardFederationDataSource.sources().find(s => s.name() === analyticsSource.sourceName());
    if (existingSource === undefined) {
        let newSource = toFederationSource(analyticsSource, usedDataSources);
        dashboardFederationDataSource.sources.push(newSource);
    }
}
exports.addSourceIfNotExists = addSourceIfNotExists;
function toSameSourcesFederationQuery(analyticsQuery) {
    let analyticsQueryJson = new analytics_utils_1.ModelSerializer().serialize(analyticsQuery);
    return new model_1.QueryNode(analyticsQueryJson);
}
exports.toSameSourcesFederationQuery = toSameSourcesFederationQuery;
function toAnalyticsFederationDataSource(federationDataSource, usedDataSources, dataSourceBrowser) {
    let observableDataSourceInfos = ko.observableArray(usedDataSources);
    let fieldListProvider = new analytics_internal_1.FieldListProvider(pathRequest => getFederationFieldList(pathRequest, dataSourceBrowser), observableDataSourceInfos, [new analytics_wizard_internal_1.FederationDataSourceItemsExtender(observableDataSourceInfos)], true);
    let analyticsFederationDataSource = new FederationDataSourceAnalyticsWrapper(federationDataSource.sources(), observableDataSourceInfos, fieldListProvider);
    analyticsFederationDataSource.name(federationDataSource.name());
    federationDataSource.sources().forEach(source => {
        let analyticsSource = toAnalyticsFederationSource(source);
        analyticsFederationDataSource.sources.push(analyticsSource);
    });
    federationDataSource.queries().forEach(query => {
        let analyticsQuery = toSameSourcesAnalyticsFederationQuery(query, analyticsFederationDataSource);
        analyticsFederationDataSource.queries.push(analyticsQuery);
    });
    return analyticsFederationDataSource;
}
exports.toAnalyticsFederationDataSource = toAnalyticsFederationDataSource;
function toAnalyticsFederationSource(source) {
    let analyticsSource = new analytics_data_1.FederationSource({});
    analyticsSource.dataMember(source.dataMember());
    analyticsSource.sourceName(source.name());
    return analyticsSource;
}
exports.initialQueryAliasSymbol = '__initialQuery';
function toSameSourcesAnalyticsFederationQuery(query, analyticsFederationDataSource) {
    let queryJson = new analytics_utils_1.ModelSerializer().serialize(query);
    let analyticsQuery = analyticsFederationDataSource.createQuery(queryJson);
    analyticsQuery[exports.initialQueryAliasSymbol] = query.alias();
    return analyticsQuery;
}
function addOrUpdateQuery(dashboard, federationDataSource, index, newQuery) {
    _helper_classes_1.Guard.isNotFalsy(newQuery, "'newQuery'");
    _helper_classes_1.Guard.requires(!federationDataSource.queries().some((q, i) => i !== index && q === newQuery));
    let oldQuery = federationDataSource.queries()[index];
    if (oldQuery === newQuery)
        return;
    if (oldQuery)
        federationDataSource.queries.splice(index, 1, newQuery);
    else
        federationDataSource.queries.push(newQuery);
    let nameIndex = 1;
    let baseAlias = newQuery.alias();
    let newQueryAlias = baseAlias;
    while (federationDataSource.queries().find((q, i) => i !== index && q.alias() === newQueryAlias) !== undefined) {
        newQueryAlias = baseAlias + ' ' + nameIndex++;
    }
    newQuery.alias(newQueryAlias);
    if (oldQuery && newQuery.alias() !== oldQuery.alias()) {
        renameDataMember(dashboard, federationDataSource, oldQuery.alias(), newQuery.alias());
    }
}
exports.addOrUpdateQuery = addOrUpdateQuery;
function createDataSourceInfos(dashboardDataSources) {
    let dataSourceInfos = dashboardDataSources.map(ds => getDataSourceInfo(ds));
    let dataSourceInfosByName = new Map();
    for (let info of dataSourceInfos) {
        let inDict = dataSourceInfosByName.get(info.name);
        if (inDict !== undefined)
            inDict.push(info);
        else
            dataSourceInfosByName.set(info.name, [info]);
    }
    dataSourceInfosByName.forEach((infos, name) => {
        for (let i = 1; i < infos.length; i++)
            infos[i].name = name + ' ' + i;
    });
    return dataSourceInfos.map(info => {
        return Object.assign(Object.assign({}, info), { id: info.componentName });
    });
}
exports.createDataSourceInfos = createDataSourceInfos;
function createWizardSettings(publicSettings) {
    return {
        enableSqlDataSource: publicSettings && _utils_1.type.isDefined(publicSettings.enableSqlDataSource) ? publicSettings.enableSqlDataSource : true,
        enableJsonDataSource: publicSettings && _utils_1.type.isDefined(publicSettings.enableJsonDataSource) ? publicSettings.enableJsonDataSource : true,
        enableObjectDataSource: false,
        enableFederationDataSource: publicSettings && _utils_1.type.isDefined(publicSettings.enableFederationDataSource) ? publicSettings.enableFederationDataSource : true,
        enableOlapDataSource: publicSettings && _utils_1.type.isDefined(publicSettings.enableOlapDataSource) ? publicSettings.enableOlapDataSource : true,
    };
}
exports.createWizardSettings = createWizardSettings;
function getFederationFieldList(pathRequest, dataSourceBrowser) {
    return _field_list_provider_1.getFieldList(pathRequest, new _field_list_provider_1.FlatteningDataFieldsProviderWrapper(dataSourceBrowser, field => field && (field.isDataTableNode && field.isDataTableNode() || field.isExpressionsNode && field.isExpressionsNode())), new FederationDataSourceProviderWrapper(dataSourceBrowser), field => field && field.nodeType() !== 'CalculatedDataField');
}
exports.getFederationFieldList = getFederationFieldList;
class FederationDataSourceProviderWrapper {
    constructor(basic) {
        this._basic = basic;
    }
    findDataSource(name) {
        let basicDataSource = this._basic.findDataSource(name);
        return basicDataSource && basicDataSource._isFederationDataProvider ? basicDataSource : undefined;
    }
}
exports.FederationDataSourceProviderWrapper = FederationDataSourceProviderWrapper;
class FederationDataSourceAnalyticsWrapper extends analytics_data_1.FederationDataSource {
    constructor(sources, dataSources, fieldListProvider) {
        super({}, dataSources, fieldListProvider, new analytics_utils_1.ModelSerializer());
        this._sources = sources;
        this._dataSources = dataSources();
    }
    getQueryNameFromPath(path) {
        if (!path)
            return '';
        let pathParts = path.split('.');
        _helper_classes_1.Guard.requires(!!pathParts && !!pathParts.length);
        let dataSourceInfo = this._dataSources.find(x => x.ref == pathParts[0] || x.id == pathParts[0]);
        if (dataSourceInfo === undefined)
            throw new Error(`The dataSource for path '${path}' cannot be found.`);
        let sameDataSourceSources = this._sources.filter(s => s.dataSource() === dataSourceInfo.componentName);
        if (!sameDataSourceSources || sameDataSourceSources.length === 0)
            return super.getQueryNameFromPath(path);
        if (sameDataSourceSources.length === 1) {
            return sameDataSourceSources[0].name();
        }
        else {
            let dataMember = pathParts.slice(1).join('.');
            let source = sameDataSourceSources.find(s => s.dataMember() === dataMember);
            if (source === undefined)
                return super.getQueryNameFromPath(path);
            return source.name();
        }
    }
    getPathFromQueryName(sourceName) {
        let source = this._sources.find(s => s.name() === sourceName);
        if (source === undefined)
            return super.getPathFromQueryName(sourceName);
        return getPath(source);
    }
    createQuery(queryJson) {
        let query = super.createQuery(queryJson);
        if (query.queryType() === utils_1.FederationQueryType[utils_1.FederationQueryType.UnionNode]) {
            query.getQueryNameFromPath = (path) => this.getQueryNameFromPath(path);
            query.getPathFromQueryName = (sourceName) => this.getPathFromQueryName(sourceName);
        }
        return query;
    }
}
exports.FederationDataSourceAnalyticsWrapper = FederationDataSourceAnalyticsWrapper;
function getPath(source) {
    _helper_classes_1.Guard.isNotFalsy(source, 'source');
    return !!source.dataMember() ? source.dataSource() + '.' + source.dataMember() : source.dataSource();
}
function renameDataMember(dashboard, dataSource, oldDataMember, newDataMember) {
    dashboard.items()
        .filter(item => item instanceof model_1.DataDashboardItem
        && item.dataSource() === dataSource.componentName()
        && item.dataMember() === oldDataMember)
        .forEach((item) => {
        item.dataMember(newDataMember);
    });
    dataSource.calculatedFields()
        .filter(calcField => calcField.dataMember() === oldDataMember)
        .forEach(calcField => calcField.dataMember(newDataMember));
    dashboard.parameters()
        .map(parameter => parameter.dynamicListLookUpSettings())
        .filter(lookUpSettings => !!lookUpSettings
        && lookUpSettings.dataSource() === dataSource.componentName()
        && lookUpSettings.dataMember() === oldDataMember)
        .forEach(lookUpSettings => lookUpSettings.dataMember(newDataMember));
    dashboard.colorScheme()
        .filter(entry => entry.dataMember() === oldDataMember)
        .forEach(entry => entry.dataMember(newDataMember));
    dashboard.items()
        .filter(item => item instanceof model_1.DataDashboardItem)
        .map((item) => item.colorScheme())
        .forEach(colorScheme => colorScheme
        .filter(entry => entry.dataMember() === oldDataMember)
        .forEach(entry => entry.dataMember(newDataMember)));
}
exports.renameDataMember = renameDataMember;


/***/ }),

/***/ 5138:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MultiQueryDataSourceWizardExtension = exports.DataSourceWizardExtension = void 0;
const analytics_data_1 = __webpack_require__(14376);
const analytics_internal_1 = __webpack_require__(19745);
const analytics_utils_1 = __webpack_require__(25733);
const analytics_wizard_1 = __webpack_require__(72652);
const analytics_wizard_internal_1 = __webpack_require__(44009);
const queryBuilder_widgets_internal_1 = __webpack_require__(44478);
const string_1 = __webpack_require__(36306);
const ko = __webpack_require__(71032);
const control_options_1 = __webpack_require__(82560);
const _options_manager_1 = __webpack_require__(47337);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const dashboard_1 = __webpack_require__(15306);
const json_data_source_1 = __webpack_require__(32988);
const _obsolete_helper_1 = __webpack_require__(64060);
const _data_source_wizard_model_1 = __webpack_require__(16059);
const _parameters_item_provider_1 = __webpack_require__(5043);
const _data_source_wizard_1 = __webpack_require__(7035);
const _edit_json_data_source_wizard_1 = __webpack_require__(1309);
const _multi_query_data_source_wizard_1 = __webpack_require__(65459);
const _helpers_1 = __webpack_require__(12209);
var name = 'data-source-wizard';
var nameAlias = 'dataSourceWizard';
class DataSourceWizardExtension {
    constructor(dashboardControl, options = {}) {
        this.dashboardControl = dashboardControl;
        this._subscriptions = [];
        this._loadingPanelVisible = ko.observable(false);
        this._wizardElement = ko.observable();
        this._optionsManager = new _options_manager_1.OptionsManager();
        this._customTemplate = {
            name: 'dx-dashboard-data-source-wizard',
            data: {
                loadingPanelVisible: this._loadingPanelVisible,
                wizardElement: this._wizardElement
            }
        };
        this.name = name;
        let defaultOptions = {
            enableCustomSql: false,
            allowCreateNewJsonConnection: false,
            wizardSettings: {
                enableSqlDataSource: true,
                enableOlapDataSource: true,
                enableJsonDataSource: true,
                enableFederationDataSource: true
            }
        };
        this._optionsManager.initialize({
            alias: nameAlias,
            dashboardControl: dashboardControl,
            defaultOptions: defaultOptions,
            eventsHolder: this,
            initOptions: options,
            optionChanged: (args) => this._optionChanged(args)
        });
        this._requestWrapper = new _data_source_wizard_model_1.DashboardRequestWrapper(dashboardControl);
        this._dashboardParameters = ko.computed(() => dashboardControl.dashboard() && dashboardControl.dashboard().parameters() || []);
        this._getConnectionStringsCallback = () => {
            return this.dashboardControl.remoteService.getFromServer(dashboardControl._endpointCollection.dataSourceWizardUrls.GetConnectionStringsAction)
                .fail(request => {
                this.dashboardControl.notificationController.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToConnectionStrings'), request);
            });
        };
        _obsolete_helper_1.defineObsoleteMethod({
            target: this,
            memberName: 'createDataSource',
            oldMemberDisplayName: 'DataSourceWizardExtension.createDataSource',
            newMemberDisplayName: 'DataSourceWizardExtension.showDataSourceCreatingDialog',
            action: (dataSources) => {
                this.showDataSourceCreatingDialog().done((dataSource) => {
                    dataSources.push(dataSource);
                });
            }
        });
        _obsolete_helper_1.defineObsoleteMethod({
            target: this,
            memberName: 'editSqlQuery',
            oldMemberDisplayName: 'DataSourceWizardExtension.editSqlQuery',
            newMemberDisplayName: 'DataSourceWizardExtension.showSqlQueryEditingDialog',
            action: (dashboardSqlDataSource, queryName) => {
                this.showSqlQueryEditingDialog(dashboardSqlDataSource, queryName);
            }
        });
    }
    static _convertDataSource(dashboardSqlDataSource, requestWrapper) {
        var serializer = new analytics_utils_1.ModelSerializer({ useRefs: false });
        return dashboardSqlDataSource ?
            new analytics_data_1.SqlDataSource(serializer.serialize(dashboardSqlDataSource), serializer, requestWrapper) :
            new analytics_data_1.SqlDataSource({}, serializer, requestWrapper);
    }
    get isCustomSqlEnabled() { return this._optionsManager.get('enableCustomSql'); }
    get _dataSourceBrowser() { return this.dashboardControl._dataSourceBrowser; }
    start() {
        this.dashboardControl.customTemplates.push(this._customTemplate);
    }
    stop() {
        this.dashboardControl.customTemplates.remove(this._customTemplate);
        this._subscriptions.forEach(s => s.dispose());
        this._subscriptions = [];
    }
    showDataSourceCreatingDialog() {
        return this._showDataSourceCreatingDialog(this._getFederationDataProviders());
    }
    _getDashboardDataSources() {
        return this.dashboardControl.dashboard() && this.dashboardControl.dashboard().dataSources() || [];
    }
    _getFederationDataProviders() {
        return this._getDashboardDataSources().filter(ds => ds._isFederationDataProvider);
    }
    _showDataSourceCreatingDialog(federationDataProviders) {
        let deferred = _jquery_helpers_1.createJQueryDeferred();
        let loadingConnectionsStrings = true;
        this._loadingPanelVisible(true);
        let stopLoading = () => {
            loadingPanelSubscription.dispose();
            loadingConnectionsStrings = false;
        };
        let loadingPanelSubscription = this._loadingPanelVisible.subscribe(newValue => {
            if (!newValue && loadingConnectionsStrings) {
                stopLoading();
                deferred.reject();
            }
        });
        let dashboardConnectionStrings = {
            sql: ko.observableArray()
        };
        this._getConnectionStringsCallback()
            .done((connectionStrings) => {
            stopLoading();
            if (deferred.state() !== 'rejected') {
                dashboardConnectionStrings = {
                    sql: ko.observableArray(connectionStrings.filter(c => c.connectionType === 'Sql')),
                    json: ko.observableArray(connectionStrings.filter(c => c.connectionType === 'Json')),
                    olap: connectionStrings.filter(c => c.connectionType === 'Olap'),
                };
            }
        })
            .always(() => {
            stopLoading();
            if (deferred.state() !== 'rejected') {
                let wizardFederationSources = _helpers_1.createDataSourceInfos(federationDataProviders);
                let dataSourceWizard = this.createDataSourceWizard(dashboardConnectionStrings, wizardFederationSources);
                this._initializeDataSourceWizard(dataSourceWizard, deferred);
                this._renderAndStartWizard(dataSourceWizard);
                this._loadingPanelVisible(false);
            }
        });
        return deferred.promise();
    }
    showSqlQueryEditingDialog(dashboardSqlDataSource, queryName) {
        if (queryName && dashboardSqlDataSource.queries().filter(q => q.name() === queryName).length === 0)
            throw new Error(string_1.format(_default_1.getLocalizationById('DashboardWebStringId.Notification.QueryDoesNotExist'), queryName));
        var dataSource = DataSourceWizardExtension._convertDataSource(dashboardSqlDataSource, this._requestWrapper);
        let singleDataSourceWizard = this._createEditQueryWizard();
        singleDataSourceWizard.initialize({
            sqlDataSourceWizard: {
                sqlDataSourceJSON: JSON.stringify(new analytics_utils_1.ModelSerializer().serialize(dataSource)),
                queryName: queryName
            }
        }, (factory, stateManager) => new _data_source_wizard_1.EditQueryWizardIterator(factory, stateManager));
        singleDataSourceWizard['_finishCallback'] = (state) => {
            var model = analytics_wizard_1._restoreSqlDataSourceFromState(state.sqlDataSourceWizard);
            var queryIndex = model['_queryIndex'];
            var query = model.sqlQuery;
            if (queryIndex === dashboardSqlDataSource.queries().length) {
                dashboardSqlDataSource.queries.push(query);
            }
            else {
                let oldQuery = dashboardSqlDataSource.queries()[queryIndex];
                dashboardSqlDataSource.queries.splice(queryIndex, 1, query);
                if (oldQuery.name() !== query.name()) {
                    _helpers_1.renameDataMember(this.dashboardControl.dashboard(), dashboardSqlDataSource, oldQuery.name(), query.name());
                }
            }
            var def = _jquery_helpers_1.createJQueryDeferred();
            def.resolve();
            return def.promise();
        };
        this._renderAndStartWizard(singleDataSourceWizard);
    }
    showFederationQueryEditingDialog(dashboardFederationDataSource, queryName) {
        let element = this._wizardElement();
        if (element) {
            let queryIndex = dashboardFederationDataSource.queries().findIndex(q => q.alias() === queryName);
            if (queryIndex === -1)
                throw new Error(string_1.format(_default_1.getLocalizationById('DashboardWebStringId.Notification.QueryDoesNotExist'), queryName));
            let query = dashboardFederationDataSource.queries()[queryIndex];
            let federationDataProviders = this._getFederationDataProviders();
            let dataSourceInfos = _helpers_1.createDataSourceInfos(federationDataProviders);
            let analyticsDataSource = _helpers_1.toAnalyticsFederationDataSource(dashboardFederationDataSource, dataSourceInfos, this._dataSourceBrowser);
            let analyticsQuery = analyticsDataSource.queries().find(q => q.alias && q.alias() === queryName);
            let setQuery = (analyticsQuery) => {
                analyticsQuery.sources()
                    .forEach(analyticsSource => _helpers_1.addSourceIfNotExists(analyticsSource, dashboardFederationDataSource, dataSourceInfos));
                let newQuery = _helpers_1.toSameSourcesFederationQuery(analyticsQuery);
                _helpers_1.addOrUpdateQuery(this.dashboardControl.dashboard(), dashboardFederationDataSource, queryIndex, newQuery);
            };
            let popup;
            switch (query.queryType) {
                case 'SelectNode':
                    popup = new analytics_wizard_internal_1.FederationSelectQueryBuilderPopup(setQuery, analyticsDataSource);
                    break;
                case 'UnionNode':
                    popup = new analytics_wizard_internal_1.FederationUnionQueryBuilderPopup(setQuery, analyticsDataSource);
                    break;
                case 'TransformationNode':
                    popup = new analytics_wizard_internal_1.FederationTransformQueryBuilderPopup(setQuery, analyticsDataSource);
                    break;
                default:
                    throw new Error(`The query of '${query.queryType}' type cannot be edited. `);
            }
            ko.cleanNode(element);
            analytics_internal_1.appendStaticContextToRootViewModel(popup);
            ko.applyBindingsToNode(element, { template: 'dxrd-querybuilder-federation-popup' }, popup);
            let visibleSubscription = popup.popupVisible.subscribe(visible => {
                if (!visible) {
                    visibleSubscription.dispose();
                    popup.dispose();
                    ko.cleanNode(element);
                }
            });
            popup.show(analyticsQuery);
        }
    }
    showManageFederationQueriesDialog(dashboardFederationDataSource) {
        let element = this._wizardElement();
        if (element) {
            let federationDataProviders = this._getFederationDataProviders();
            let federationDataProvidersInfos = _helpers_1.createDataSourceInfos(federationDataProviders);
            let analyticsFederationDataSource = _helpers_1.toAnalyticsFederationDataSource(dashboardFederationDataSource, federationDataProvidersInfos, this._dataSourceBrowser);
            let editor = new queryBuilder_widgets_internal_1.ManageFederatedQueriesEditor(analyticsFederationDataSource, () => {
                analyticsFederationDataSource.sources()
                    .forEach(analyticsSource => _helpers_1.addSourceIfNotExists(analyticsSource, dashboardFederationDataSource, federationDataProvidersInfos));
                let removedQueries = dashboardFederationDataSource.queries().filter(dashboardQuery => !analyticsFederationDataSource.queries().some(analyticsQuery => analyticsQuery[_helpers_1.initialQueryAliasSymbol] === dashboardQuery.alias()));
                removedQueries.forEach(q => dashboardFederationDataSource.queries.remove(q));
                analyticsFederationDataSource.queries().forEach((analyticsQuery, i) => {
                    let newQuery = _helpers_1.toSameSourcesFederationQuery(analyticsQuery);
                    let initialQuery = dashboardFederationDataSource.queries().find(q => q.alias() === analyticsQuery[_helpers_1.initialQueryAliasSymbol]);
                    let queryIndex = !!initialQuery ? dashboardFederationDataSource.queries().indexOf(initialQuery) : dashboardFederationDataSource.queries().length;
                    _helpers_1.addOrUpdateQuery(this.dashboardControl.dashboard(), dashboardFederationDataSource, queryIndex, newQuery);
                });
            });
            ko.cleanNode(element);
            analytics_internal_1.appendStaticContextToRootViewModel(editor);
            ko.applyBindingsToNode(element, { template: 'dxrd-federated-manageQueries-editor' }, editor);
            let visibleSubscription = editor.popupVisible.subscribe(visible => {
                if (!visible) {
                    visibleSubscription.dispose();
                    editor.dispose();
                    analyticsFederationDataSource.dispose();
                }
            });
            editor.popupVisible(true);
        }
    }
    _createEditQueryWizard() {
        let wizard = _data_source_wizard_1.createDashboardDataSourceWizard(this._requestWrapper, this._dashboardParameters, !this.isCustomSqlEnabled, false, { enableOlapDataSource: false, enableSqlDataSource: false, enableJsonDataSource: false, enableObjectDataSource: false, enableFederationDataSource: false }, { sql: ko.observableArray() }, [], this._dataSourceBrowser, this.dashboardControl.customTemplates);
        this._customizeDataSourceWizard('EditQueryWizard', wizard);
        return wizard;
    }
    _optionChanged(args) {
        switch (args.name) {
            case 'allowCreateNewJsonConnection':
            case 'enableCustomSql':
            case 'wizardSettings':
                return null;
            default:
                return null;
        }
    }
    createDataSourceWizard(connectionStrings, federationSources) {
        let wizard = _data_source_wizard_1.createDashboardDataSourceWizard(this._requestWrapper, this._dashboardParameters, !this.isCustomSqlEnabled, this._optionsManager.get('allowCreateNewJsonConnection') || this._optionsManager.getInitialOptions()['canCreateNewJsonDataSource'], this._optionsManager.get('wizardSettings'), connectionStrings, federationSources, this._dataSourceBrowser, this.dashboardControl.customTemplates);
        this._customizeDataSourceWizard('DataSourceWizard', wizard);
        return wizard;
    }
    _createEditJsonDataSourceWizard() {
        let wizard = _edit_json_data_source_wizard_1.createEditJsonDataSourceWizard(this._requestWrapper);
        this._customizeDataSourceWizard('EditJsonDataSourceWizard', wizard);
        return wizard;
    }
    _customizeDataSourceWizard(customizationType, wizard) {
        this._optionsManager.raiseEvent('customizeDataSourceWizard', { type: customizationType, wizard: wizard });
    }
    _createNewDataSourceWizardIterator(factory, stateManager) {
        return new _data_source_wizard_1.CreateNewDataSourceWizardIterator(factory, stateManager);
    }
    _initializeDataSourceWizard(wizard, deferred) {
        let initialState = new _data_source_wizard_1.DashboardDataSourceWizardState();
        wizard.initialize(initialState, (factory, stateManager) => this._createNewDataSourceWizardIterator(factory, stateManager));
        wizard['_finishCallback'] = (state) => {
            let sqlModel = state.sqlDataSourceWizard;
            let olapModel = state.olapDataSourceWizard;
            let jsonModel = state.jsonDataSourceWizard;
            let federationModel = state.federationDataSourceWizard;
            if (sqlModel && state.dashboardDataSourceType === 'Sql') {
                let sqlDataSource = dashboard_1.Dashboard._createDataSource({ '@ItemType': 'SqlDataSource' }, new analytics_utils_1.ModelSerializer());
                let dataSourceWrapper = analytics_wizard_1._restoreSqlDataSourceFromState(sqlModel);
                sqlDataSource.connection.name(dataSourceWrapper.sqlDataSource.connection.name());
                sqlDataSource.connection.fromAppConfig(true);
                dataSourceWrapper.sqlDataSource.queries().forEach(query => {
                    sqlDataSource.queries.push(query);
                    sqlDataSource.name(sqlDataSource.queries()[0].name());
                });
                deferred.resolve(sqlDataSource);
                return _jquery_helpers_1.createJQueryDeferred().resolve().promise();
            }
            else if (olapModel && state.dashboardDataSourceType === 'Olap') {
                let olapDataSource = dashboard_1.Dashboard._createDataSource({ '@ItemType': 'OLAPDataSource' }, new analytics_utils_1.ModelSerializer());
                olapDataSource.connectionName(olapModel.connectionName);
                olapDataSource.name(_default_1.getLocalizationById('DashboardStringId.DefaultOlapDataSourceName'));
                deferred.resolve(olapDataSource);
                return _jquery_helpers_1.createJQueryDeferred().resolve().promise();
            }
            else if (jsonModel && state.dashboardDataSourceType === 'Json') {
                let jsonDeferred = _jquery_helpers_1.createJQueryDeferred();
                let analyticsDataSourceDeferred = _jquery_helpers_1.createJQueryDeferred();
                let analyticsDataSource = analytics_wizard_1._restoreJsonDataSourceFromState(jsonModel);
                if (jsonModel.newConnectionName) {
                    var jsonSource = analyticsDataSource.source;
                    var jsonSourceJSON = JSON.stringify(jsonSource.serialize(true));
                    var requestString = JSON.stringify({
                        connectionName: jsonModel.newConnectionName,
                        customJson: jsonSource.json(),
                        uriJsonSourceJSON: jsonSourceJSON
                    });
                    this._requestWrapper
                        .sendRequest('saveJsonSource', encodeURIComponent(requestString))
                        .done(() => {
                        analyticsDataSource.connectionName(jsonModel.newConnectionName);
                        analyticsDataSource.source = null;
                        analyticsDataSourceDeferred.resolve(analyticsDataSource);
                    })
                        .fail(() => analyticsDataSourceDeferred.reject());
                }
                else {
                    analyticsDataSourceDeferred.resolve(analyticsDataSource);
                }
                analyticsDataSourceDeferred
                    .done((repDataSource) => {
                    var serializer = new analytics_utils_1.ModelSerializer();
                    var analyticsJsonDataSourceJson = serializer.serialize(repDataSource);
                    var dataSource = new json_data_source_1.JsonDataSource(analyticsJsonDataSourceJson);
                    dataSource.name(_default_1.getLocalizationById('DashboardStringId.DefaultJsonDataSourceName'));
                    deferred.resolve(dataSource);
                    jsonDeferred.resolve();
                })
                    .fail(() => {
                    deferred.reject();
                    jsonDeferred.reject();
                });
                return jsonDeferred.promise();
            }
            else if (federationModel && state.dashboardDataSourceType === 'Federation') {
                deferred.resolve(_helpers_1.createNewFederationDataSource(federationModel, wizard.options.dataSources));
                return _jquery_helpers_1.createJQueryDeferred().resolve().promise();
            }
            else {
                deferred.reject();
                throw Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.UnsupportedDataSourceType'));
            }
        };
    }
    _showEditJsonDataSourceDialog(jsonDataSource) {
        var serializer = new analytics_utils_1.ModelSerializer();
        var dashboardJsonDataSourceJson = serializer.serialize(jsonDataSource);
        let editJsonDataSourceWizard = this._createEditJsonDataSourceWizard();
        editJsonDataSourceWizard.initialize({
            jsonDataSourceWizard: {
                jsonScheme: JSON.stringify(dashboardJsonDataSourceJson.Schema),
                rootElement: jsonDataSource.rootElement()
            }
        }, (factory, stateManager) => new _edit_json_data_source_wizard_1.EditJsonDataSourceWizardIterator(factory, stateManager));
        editJsonDataSourceWizard['_finishCallback'] = (state) => {
            var jsonModel = state.jsonDataSourceWizard;
            if (jsonModel) {
                var modifiedReportsDataSource = analytics_wizard_1._restoreJsonDataSourceFromState(jsonModel);
                jsonDataSource.schema(modifiedReportsDataSource.schema);
                jsonDataSource.rootElement(modifiedReportsDataSource.rootElement());
            }
            return _jquery_helpers_1.createJQueryDeferred().resolve().promise();
        };
        this._renderAndStartWizard(editJsonDataSourceWizard);
    }
    _renderAndStartWizard(wizardModel) {
        var element = this._wizardElement();
        if (element) {
            ko.cleanNode(element);
            var viewModel = {
                wizardModel: wizardModel,
                dataBindingsProvider: new _parameters_item_provider_1.ParametersItemProvider(this._dashboardParameters()),
                resizeHandler: {
                    starting: () => { },
                    stopped: () => { },
                    disabled: analytics_internal_1.DragDropHandler.started
                }
            };
            analytics_internal_1.appendStaticContextToRootViewModel(viewModel);
            ko.applyBindingsToNode(element, { template: 'dx-dashboard-data-source-wizard-binding' }, viewModel);
            wizardModel.isVisible.subscribe(visible => {
                if (!visible) {
                    wizardModel.dispose();
                    ko.cleanNode(element);
                }
            });
        }
        wizardModel.start();
    }
}
exports.DataSourceWizardExtension = DataSourceWizardExtension;
class MultiQueryDataSourceWizardExtension extends DataSourceWizardExtension {
    constructor(dashboardControl, options) {
        super(dashboardControl, options);
    }
    _createNewDataSourceWizardIterator(factory, stateManager) {
        return new _multi_query_data_source_wizard_1.DashboardMultiQueryWizardIterator(factory, stateManager);
    }
    createDataSourceWizard(connectionStrings, federationSources) {
        let wizard = _multi_query_data_source_wizard_1.createDashboardMultiQueryWizard(this._requestWrapper, this._dashboardParameters, !this.isCustomSqlEnabled, this._optionsManager.get('allowCreateNewJsonConnection') || this._optionsManager.getInitialOptions()['canCreateNewJsonDataSource'], this._optionsManager.get('wizardSettings'), connectionStrings, federationSources, this._dataSourceBrowser, this.dashboardControl.customTemplates);
        this._customizeDataSourceWizard('MultiQueryDataSourceWizard', wizard);
        return wizard;
    }
}
exports.MultiQueryDataSourceWizardExtension = MultiQueryDataSourceWizardExtension;
control_options_1.designerExtensions[name] = (dashboardControl, options) => new DataSourceWizardExtension(dashboardControl, options);
control_options_1.extensionNameMap[name] = nameAlias;
ko.virtualElements.allowedBindings['dx-dashboard-element-accessor-binding'] = true;
ko.bindingHandlers['dx-dashboard-element-accessor-binding'] = {
    init: function (element, valueAccessor, _, __, bindingContext) {
        var params = ko.unwrap(valueAccessor());
        params.element(element);
        return { controlsDescendantBindings: true };
    }
};


/***/ }),

/***/ 16059:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardMultiQueryDataSourceWizardOptions = exports.DashboardDataSourceWizardOptions = exports.DashboardRequestWrapper = void 0;
const analytics_wizard_1 = __webpack_require__(72652);
const queryBuilder_utils_1 = __webpack_require__(31564);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
class DashboardRequestWrapper extends queryBuilder_utils_1.RequestWrapper {
    constructor(dashboardControl) {
        super();
        this.dashboardControl = dashboardControl;
    }
    _sendRequest(settings) {
        return this.sendRequest(settings.action, settings.arg);
    }
    sendRequest(action, arg) {
        var def = _jquery_helpers_1.createJQueryDeferred();
        this.dashboardControl.remoteService.postToServer(this.dashboardControl._endpointCollection.dataSourceWizardUrls.DataSourceWizardAction, {
            actionKey: action,
            arg: arg
        }).done(data => {
            if (data.success) {
                def.resolve(data.result);
            }
            else {
                let errorText = data.error;
                this.dashboardControl.notificationController.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.ErrorHasOccuredOn'), errorText);
                def.reject(errorText);
            }
        }).fail(request => {
            this.dashboardControl.notificationController.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.ErrorHasOccuredOn'), request);
            def.reject();
        });
        return def.promise();
    }
}
exports.DashboardRequestWrapper = DashboardRequestWrapper;
class DashboardDataSourceWizardOptions extends analytics_wizard_1._DataSourceWizardOptions {
    constructor() {
        super();
        this.connectionStrings = Object.assign(Object.assign({}, this.connectionStrings), { olap: [] });
        this.wizardSettings = Object.assign(Object.assign({}, this.wizardSettings), { enableOlapDataSource: false });
    }
}
exports.DashboardDataSourceWizardOptions = DashboardDataSourceWizardOptions;
class DashboardMultiQueryDataSourceWizardOptions extends analytics_wizard_1._MultiQueryDataSourceWizardOptions {
    constructor() {
        super();
        this.connectionStrings = Object.assign(Object.assign({}, this.connectionStrings), { olap: [] });
        this.wizardSettings = Object.assign(Object.assign({}, this.wizardSettings), { enableOlapDataSource: false });
    }
}
exports.DashboardMultiQueryDataSourceWizardOptions = DashboardMultiQueryDataSourceWizardOptions;


/***/ }),

/***/ 83149:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ToDashboardDataSourceType = exports.ToDataSourceTypeNumber = void 0;
const analytics_wizard_1 = __webpack_require__(72652);
const OlapDataSourceType = 3099;
function ToDataSourceTypeNumber(dashboardType) {
    switch (dashboardType) {
        case 'Sql': return analytics_wizard_1.DataSourceType.Sql;
        case 'Json': return analytics_wizard_1.DataSourceType.Json;
        case 'Olap': return OlapDataSourceType;
        case 'Federation': return analytics_wizard_1.DataSourceType.Federation;
    }
}
exports.ToDataSourceTypeNumber = ToDataSourceTypeNumber;
function ToDashboardDataSourceType(typeNumber) {
    switch (typeNumber) {
        case analytics_wizard_1.DataSourceType.Sql: return 'Sql';
        case analytics_wizard_1.DataSourceType.Json: return 'Json';
        case OlapDataSourceType: return 'Olap';
        case analytics_wizard_1.DataSourceType.Federation: return 'Federation';
    }
    throw new Error('Unknown datasource type number: ' + typeNumber);
}
exports.ToDashboardDataSourceType = ToDashboardDataSourceType;


/***/ }),

/***/ 5225:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._registerChooseJsonSchemaPage = exports.JsonDataSourceWizardSettings = void 0;
const analytics_wizard_1 = __webpack_require__(72652);
exports.JsonDataSourceWizardSettings = {
    allowObjectPropertiesAsRoot: true
};
function _registerChooseJsonSchemaPage(factory, requestWrapper) {
    analytics_wizard_1._registerChooseJsonSchemaPage(factory, requestWrapper);
    var chooseJsonSchemaPageMeta = factory.getMetadata(analytics_wizard_1.JsonDataSourceWizardPageId.ChooseJsonSchemaPage);
    chooseJsonSchemaPageMeta.create = () => new analytics_wizard_1.ChooseJsonSchemaPage(requestWrapper, exports.JsonDataSourceWizardSettings.allowObjectPropertiesAsRoot);
}
exports._registerChooseJsonSchemaPage = _registerChooseJsonSchemaPage;


/***/ }),

/***/ 70937:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createQueryPageCallback = void 0;
const _helpers_1 = __webpack_require__(12209);
const _parameters_item_provider_1 = __webpack_require__(5043);
function createQueryPageCallback(requestWrapper, parameters, dataSourceBrowser, customQueriesPreset = undefined) {
    return {
        customQueriesPreset: customQueriesPreset,
        customizeQBInitData: (initData) => {
            initData.parametersItemsProvider = new _parameters_item_provider_1.ParametersItemProvider(parameters());
            initData.requestWrapper = requestWrapper;
            return initData;
        },
        selectStatement: (connection, query) => requestWrapper.getSelectStatement(connection, query),
        getItemsProviderCallback: () => new _parameters_item_provider_1.ParametersItemProvider(parameters()),
        fieldListsCallback: (pathRequest, dataSourceInfo) => _helpers_1.getFederationFieldList(pathRequest, dataSourceBrowser),
    };
}
exports.createQueryPageCallback = createQueryPageCallback;


/***/ }),

/***/ 42114:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FlatteningDataFieldsProviderWrapper = exports.getFieldList = void 0;
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _helper_classes_1 = __webpack_require__(8384);
const _helpers_1 = __webpack_require__(7014);
function getFieldList(pathRequest, dataFieldsProvider, dataSourceProvider, filterDelegate = (field) => true) {
    _helper_classes_1.Guard.requires(_utils_1.type.isDefined(pathRequest));
    _helper_classes_1.Guard.requires(_utils_1.type.isDefined(dataFieldsProvider));
    _helper_classes_1.Guard.requires(_utils_1.type.isDefined(dataSourceProvider));
    let pathParts;
    let dataSourceComponentName;
    if (pathRequest.ref || pathRequest.id) {
        dataSourceComponentName = pathRequest.ref || pathRequest.id;
        pathParts = [dataSourceComponentName].concat(pathRequest.path ? pathRequest.path.split('.') : []);
    }
    else if (pathRequest.pathParts && pathRequest.pathParts.length > 0) {
        pathParts = pathRequest.pathParts;
        dataSourceComponentName = pathParts[0];
    }
    else {
        pathParts = pathRequest.fullPath ? pathRequest.fullPath.split('.') : [];
        dataSourceComponentName = pathParts[0];
    }
    let dataSource = dataSourceProvider.findDataSource(dataSourceComponentName);
    if (!dataSource)
        throw new Error(`The '${dataSourceComponentName}' DataSource cannot be found.`);
    let dataMember;
    let fieldPath;
    if (dataSource.supportDataMembers) {
        dataMember = pathParts[1] || '';
        fieldPath = pathParts.slice(2).join('.');
    }
    else {
        dataMember = '';
        fieldPath = pathParts.slice(1).join('.');
    }
    let deferred = _jquery_helpers_1.createJQueryDeferred();
    dataFieldsProvider
        .getDataFieldsArray(dataSourceComponentName, dataMember, fieldPath, filterDelegate)
        .done(dataFields => {
        let items = dataFields.map(field => _helpers_1.createDataMemberInfo(field, dataSource));
        deferred.resolve(items);
    });
    return deferred.promise();
}
exports.getFieldList = getFieldList;
class FlatteningDataFieldsProviderWrapper {
    constructor(basic, shouldFlatten = (field) => false) {
        _helper_classes_1.Guard.isNotFalsy(basic, 'The basic fields provider for a flattening fields provider');
        this._basic = basic;
        this._shouldFlatten = shouldFlatten;
    }
    findDataField(dataSourceName, dataMemberName, fullFieldName, hasGroupSeparator) {
        throw new Error('The method is not implemented.');
    }
    getDataFieldsArray(dataSourceName, dataMember, fieldPath, filterDelegate) {
        let deferred = _jquery_helpers_1.createJQueryDeferred();
        let flattenPromises = [];
        let notFlattened = [];
        this._basic.getDataFieldsArray(dataSourceName, dataMember, fieldPath, filterDelegate)
            .done(dataFields => {
            dataFields.forEach(field => {
                if (this._shouldFlatten(field)) {
                    if (field.isDataSourceNode && field.isDataSourceNode())
                        throw new Error('Flattening of the datasource and query nodes is not supported.');
                    let flattenDeferred = _jquery_helpers_1.createJQueryDeferred();
                    flattenPromises.push(flattenDeferred.promise());
                    let fieldName = field.dataMember ? ko.unwrap(field.dataMember) : '';
                    let newDataMember = dataMember || '';
                    let newFieldPath = fieldPath ? (fieldPath + '.' + fieldName) : fieldName;
                    this.getDataFieldsArray(dataSourceName, newDataMember, newFieldPath, filterDelegate)
                        .done(fields => flattenDeferred.resolve(fields))
                        .fail(() => flattenDeferred.reject());
                }
                else {
                    notFlattened.push(field);
                }
            });
            if (flattenPromises.length > 0)
                _jquery_helpers_1.jqueryWhenArray(flattenPromises).done((...flattenedDataFieldsArrays) => {
                    let flattenedDataFields = flattenedDataFieldsArrays.reduce((acc, items) => acc.concat(items), []);
                    deferred.resolve(notFlattened.concat(flattenedDataFields));
                })
                    .fail(() => deferred.reject());
            else
                deferred.resolve(notFlattened);
        });
        return deferred.promise();
    }
}
exports.FlatteningDataFieldsProviderWrapper = FlatteningDataFieldsProviderWrapper;


/***/ }),

/***/ 5043:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParametersItemProvider = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const data_item_1 = __webpack_require__(44650);
class ParametersItemProvider {
    constructor(dashboardParameters = []) {
        this.dashboardParameters = dashboardParameters;
    }
    getItems(pathRequest) {
        var items = [], fullPath = pathRequest.fullPath && pathRequest.fullPath.toLowerCase() || '';
        if (fullPath === '') {
            items = [{
                    displayName: 'Parameters',
                    name: 'Parameters',
                    isList: true,
                    specifics: 'parameters'
                }];
        }
        else if (fullPath === 'parameters') {
            items = this.dashboardParameters.map(parameter => {
                return {
                    displayName: parameter.name(),
                    name: parameter.name(),
                    isList: false,
                    specifics: data_item_1.DataItem.typesMap[parameter.type().replace('System.', '')]
                };
            });
        }
        return _jquery_helpers_1.createJQueryDeferred().resolve(items).promise();
    }
}
exports.ParametersItemProvider = ParametersItemProvider;


/***/ }),

/***/ 49888:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._registerChooseDataSourceTypePage = exports.DashboardChooseDataSourceTypePage = void 0;
const analytics_widgets_internal_1 = __webpack_require__(86092);
const analytics_wizard_1 = __webpack_require__(72652);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const _confirm_dialog_1 = __webpack_require__(75110);
const data_source_wizard_model_1 = __webpack_require__(83149);
const page_id_1 = __webpack_require__(4451);
const _OlapSvgIconTemplate = {
    'dx-dashboard-svg-wizard-OlapDataSource': '<svg version="1.1" data-bind="svgAttrs" x="0px" y="0px" viewBox="0 0 96 96" style="enable-background:new 0 0 96 96;" xml:space="preserve"><style type="text/css"> .Black{fill:#727272;} .White{fill:#FFFFFF;} .Green{fill:#039C23;} .Blue{fill:#1177D7;} .Red{fill:#D11C1C;} .st0{opacity:0.75;} .st1{opacity:0.25;} .st2{opacity:0.5;}</style><g id="Layer_1"><g class="st1">	<ellipse class="Black" cx="44" cy="19.5" rx="26" ry="7.5"/></g><g class="st2"><path class="Black" d="M46,52.7v-0.2L70,40V21.4c0,4.2-11.6,7.6-26,7.6s-26-3.4-26-7.6v45c0,4.2,11.6,7.6,26,7.6c0.7,0,1.3,0,2,0 V52.7z"/></g><g class="st0"><polygon class="Blue" points="48,56 69,67 69,91 48,80"/></g><polygon class="Blue" points="92,56 71,67 71,91 92,80"/><g class="st2"><polygon class="Blue" points="70,42.2 48,53.7 70,65.3 92,53.7"/></g></g><g id="Layer_2"></g></svg>'
};
analytics_widgets_internal_1.SvgTemplatesEngine.addTemplates(_OlapSvgIconTemplate);
class DashboardChooseDataSourceTypePage extends analytics_wizard_1.ChooseDataSourceTypePage {
    constructor(wizardOptions, customTemplates) {
        super(wizardOptions);
        this._confirmDialogViewModel = new _confirm_dialog_1.ConfirmDialogViewModel();
        this._confirmDialogCustomTemplate = {
            name: 'dx-dashboard-confirm-dialog',
            data: this._confirmDialogViewModel
        };
        this.connectionStrings = wizardOptions.connectionStrings;
        this._dataSources = wizardOptions.dataSources && wizardOptions.dataSources() || [];
        this._customTemplates = customTemplates;
        customTemplates.push(this._confirmDialogCustomTemplate);
    }
    _createTypeItems() {
        let typeItems = [];
        let wizardSettings = this._dataSourceTypeOptions.wizardSettings;
        if (wizardSettings.enableSqlDataSource) {
            typeItems.push(new analytics_wizard_1.TypeItem('Database', 'DataAccessUIStringId.DSTypeSql', 'sqldatasource', 'dxrd-svg-wizard-SqlDataSource', data_source_wizard_model_1.ToDataSourceTypeNumber('Sql')));
        }
        if (wizardSettings.enableJsonDataSource) {
            typeItems.push(new analytics_wizard_1.TypeItem('JSON', 'DataAccessUIStringId.DSTypeJson', 'jsondatasource', 'dxrd-svg-wizard-JsonDataSource', data_source_wizard_model_1.ToDataSourceTypeNumber('Json')));
        }
        if (wizardSettings.enableOlapDataSource) {
            typeItems.push(new analytics_wizard_1.TypeItem('OLAP Data Source', 'DashboardStringId.DefaultOlapDataSourceName', 'olapdatasource', 'dx-dashboard-svg-wizard-OlapDataSource', data_source_wizard_model_1.ToDataSourceTypeNumber('Olap')));
        }
        if (wizardSettings.enableFederationDataSource) {
            typeItems.push(new analytics_wizard_1.TypeItem('Data Federation', 'DataAccessUIStringId.DSTypeFederation', 'federationdatasource', 'dxrd-svg-wizard-FederationDataSource', data_source_wizard_model_1.ToDataSourceTypeNumber('Federation')));
        }
        return typeItems;
    }
    commit() {
        if (this.selectedItem().type === analytics_wizard_1.DataSourceType.Federation) {
            if (!this._dataSources || this._dataSources.length === 0) {
                let def = _jquery_helpers_1.createJQueryDeferred();
                this._confirmDialogViewModel.confirm(_default_1.getLocalizationById('DashboardWebStringId.DataSources.DashboardDataSourceWizard'), _default_1.getLocalizationById('DataAccessStringId.Wizard_NoDataSourcesForDataFederationMessage'), _default_1.getLocalizationById('DashboardStringId.ButtonOK')).always(() => def.reject());
                return def.promise();
            }
        }
        return super.commit();
    }
    dispose() {
        this._customTemplates.remove(this._confirmDialogCustomTemplate);
        super.dispose();
    }
}
exports.DashboardChooseDataSourceTypePage = DashboardChooseDataSourceTypePage;
function _registerChooseDataSourceTypePage(factory, wizardOptions, customTemplates) {
    let chooseDataSourceTypePageMeta = factory.getMetadata(analytics_wizard_1.DataSourceWizardPageId.ChooseDataSourceTypePage);
    if (!chooseDataSourceTypePageMeta) {
        analytics_wizard_1._registerChooseDataSourceTypePage(factory, wizardOptions);
        chooseDataSourceTypePageMeta = factory.getMetadata(analytics_wizard_1.DataSourceWizardPageId.ChooseDataSourceTypePage);
        factory.unregisterMetadata(analytics_wizard_1.DataSourceWizardPageId.ChooseDataSourceTypePage);
    }
    factory.registerMetadata(page_id_1.DataSourceWizardPageId.ChooseDataSourceTypePage, {
        setState: (data, state) => {
            state.dataSourceType = data.dataSourceType;
        },
        getState: (state) => {
            return state;
        },
        resetState: (state, defaultState) => {
            state.dataSourceType = defaultState.dataSourceType;
        },
        create: () => new DashboardChooseDataSourceTypePage(wizardOptions, customTemplates),
        description: chooseDataSourceTypePageMeta.description,
        template: chooseDataSourceTypePageMeta.template
    });
}
exports._registerChooseDataSourceTypePage = _registerChooseDataSourceTypePage;


/***/ }),

/***/ 6271:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._registerOlapConnectionStringsPage = exports.DashboardChooseOlapConnectionStringPage = void 0;
const analytics_wizard_1 = __webpack_require__(72652);
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const page_id_1 = __webpack_require__(4451);
class DashboardChooseOlapConnectionStringPage extends analytics_wizard_1.WizardPageBase {
    constructor(connectionStrings) {
        super();
        this._selectedConnectionString = ko.observableArray([]);
        this._connectionStrings = connectionStrings;
        this._disposables.push(this._selectedConnectionString.subscribe(() => this._onChange()));
    }
    canNext() {
        return false;
    }
    canFinish() {
        return this._selectedConnectionString().length !== 0;
    }
    commit() {
        var deferred = _jquery_helpers_1.createJQueryDeferred();
        if (this._selectedConnectionString()[0]) {
            deferred.resolve({
                connectionName: this._selectedConnectionString()[0].name
            });
        }
        else {
            deferred.resolve();
        }
        return deferred.promise();
    }
    initialize(state) {
        if (this._connectionStrings && this._connectionStrings.length === 1) {
            this._selectedConnectionString([this._connectionStrings[0]]);
        }
        else if (this._connectionStrings && this._connectionStrings.length > 0) {
            let matchingStrings = this._connectionStrings.filter(c => c.name == state.connectionName);
            var selectedString = matchingStrings.length > 0 ? matchingStrings[0] : this._connectionStrings[0];
            this._selectedConnectionString(selectedString ? [selectedString] : []);
        }
        else {
            this._selectedConnectionString([]);
        }
        return _jquery_helpers_1.createJQueryDeferred().resolve().promise();
    }
}
exports.DashboardChooseOlapConnectionStringPage = DashboardChooseOlapConnectionStringPage;
function _registerOlapConnectionStringsPage(factory, connectionStrings) {
    let sqlConnectionStringsMeta = factory.getMetadata(analytics_wizard_1.SqlDataSourceWizardPageId.ChooseConnectionPage);
    if (!sqlConnectionStringsMeta) {
        analytics_wizard_1._registerChooseSqlConnectionPage(factory, undefined);
        sqlConnectionStringsMeta = factory.getMetadata(analytics_wizard_1.SqlDataSourceWizardPageId.ChooseConnectionPage);
        factory.unregisterMetadata(analytics_wizard_1.SqlDataSourceWizardPageId.ChooseConnectionPage);
    }
    factory.registerMetadata(page_id_1.OlapDataSourceWizardPageId.ChooseConnectionPage, {
        create: () => {
            return new DashboardChooseOlapConnectionStringPage(connectionStrings);
        },
        setState: (result, state) => {
            state.connectionName = result.connectionName;
        },
        getState: (state) => {
            return state.olapDataSourceWizard;
        },
        resetState: (state, defaultState) => {
            state.connectionName = defaultState.connectionName;
        },
        template: sqlConnectionStringsMeta.template,
        description: sqlConnectionStringsMeta.description
    });
}
exports._registerOlapConnectionStringsPage = _registerOlapConnectionStringsPage;


/***/ }),

/***/ 36002:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._registerFederatedQueryConfigurePage = void 0;
const analytics_wizard_1 = __webpack_require__(72652);
function _registerFederatedQueryConfigurePage(factory, wizardOptions) {
    let analyticsMeta = factory.getMetadata(analytics_wizard_1.FederationDataSourceWizardPageId.FederatedQueryConfigurePage);
    if (!analyticsMeta) {
        analytics_wizard_1._registerFederatedQueryConfigurePage(factory, wizardOptions);
        analyticsMeta = factory.getMetadata(analytics_wizard_1.FederationDataSourceWizardPageId.FederatedQueryConfigurePage);
    }
    let dashboardMeta = Object.assign({}, analyticsMeta);
    let analyticsMetaCreate = analyticsMeta.create;
    dashboardMeta.create = () => {
        let page = analyticsMetaCreate();
        page.canNext = () => false;
        return page;
    };
    factory.unregisterMetadata(analytics_wizard_1.FederationDataSourceWizardPageId.FederatedQueryConfigurePage);
    factory.registerMetadata(analytics_wizard_1.FederationDataSourceWizardPageId.FederatedQueryConfigurePage, dashboardMeta);
}
exports._registerFederatedQueryConfigurePage = _registerFederatedQueryConfigurePage;


/***/ }),

/***/ 4451:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OlapDataSourceWizardPageId = exports.DataSourceWizardPageId = void 0;
exports.DataSourceWizardPageId = {
    ChooseDataSourceTypePage: 'dashboardChooseDataSourceTypePageId'
};
exports.OlapDataSourceWizardPageId = {
    ChooseConnectionPage: 'dashboardChooseOlapConnectionStringPageId'
};


/***/ }),

/***/ 84590:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataSourceWizardPageIteratorBase = void 0;
const analytics_wizard_1 = __webpack_require__(72652);
const page_id_1 = __webpack_require__(4451);
class DataSourceWizardPageIteratorBase extends analytics_wizard_1.PageIterator {
    getInitialPage() {
        return page_id_1.DataSourceWizardPageId.ChooseDataSourceTypePage;
    }
    getNextPageId(pageId) {
        if (!pageId) {
            return this.getInitialPage();
        }
        else {
            let currentState = this._getCurrentState();
            switch (pageId) {
                case page_id_1.DataSourceWizardPageId.ChooseDataSourceTypePage:
                    switch (currentState.dashboardDataSourceType) {
                        case 'Sql':
                            return analytics_wizard_1.SqlDataSourceWizardPageId.ChooseConnectionPage;
                        case 'Olap':
                            return page_id_1.OlapDataSourceWizardPageId.ChooseConnectionPage;
                        case 'Json':
                            return analytics_wizard_1.JsonDataSourceWizardPageId.ChooseConnectionPage;
                        case 'Federation':
                            return analytics_wizard_1.FederationDataSourceWizardPageId.FederatedQueryConfigurePage;
                        default:
                            throw new Error('Unknown datasource type.');
                    }
                case analytics_wizard_1.SqlDataSourceWizardPageId.ChooseConnectionPage:
                    return this.getConfigureQueryPage();
                case analytics_wizard_1.ObjectDataSourceWizardPageId.ChooseTypesPage:
                    return analytics_wizard_1.ObjectDataSourceWizardPageId.ChooseDataMembersPage;
                case analytics_wizard_1.ObjectDataSourceWizardPageId.ChooseDataMembersPage:
                    return analytics_wizard_1.ObjectDataSourceWizardPageId.ConfigureParametersPage;
                case this.getConfigureQueryPage():
                    return this.getConfigureSqlParametersPage();
                case analytics_wizard_1.JsonDataSourceWizardPageId.ChooseConnectionPage:
                    if (currentState.jsonDataSourceWizard.connectionName) {
                        return analytics_wizard_1.JsonDataSourceWizardPageId.ChooseJsonSchemaPage;
                    }
                    else {
                        return analytics_wizard_1.JsonDataSourceWizardPageId.ChooseJsonSourcePage;
                    }
                case analytics_wizard_1.JsonDataSourceWizardPageId.ChooseJsonSourcePage:
                    return analytics_wizard_1.JsonDataSourceWizardPageId.ChooseJsonSchemaPage;
            }
        }
    }
    getConfigureQueryPage() {
        return analytics_wizard_1.SqlDataSourceWizardPageId.ConfigureQueryPage;
    }
    getConfigureSqlParametersPage() {
        return analytics_wizard_1.SqlDataSourceWizardPageId.ConfigureParametersPage;
    }
    getConfigureObjectParametersPage() {
        return analytics_wizard_1.ObjectDataSourceWizardPageId.ConfigureParametersPage;
    }
}
exports.DataSourceWizardPageIteratorBase = DataSourceWizardPageIteratorBase;


/***/ }),

/***/ 7035:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createDashboardDataSourceWizard = exports.DashboardDataSourceWizardState = exports.DashboardDataSourceWizard = exports.DashboardDataSourceWizardBase = exports.EditQueryWizardIterator = exports.CreateNewDataSourceWizardIterator = void 0;
const analytics_wizard_1 = __webpack_require__(72652);
const $ = __webpack_require__(65311);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const data_source_wizard_model_1 = __webpack_require__(83149);
const _data_source_wizard_model_1 = __webpack_require__(16059);
const choose_data_source_type_page_1 = __webpack_require__(49888);
const choose_olap_connection_string_page_1 = __webpack_require__(6271);
const federated_query_configure_page_1 = __webpack_require__(36002);
const _choose_json_schema_page_1 = __webpack_require__(5225);
const _create_query_page_1 = __webpack_require__(70937);
const _parameters_item_provider_1 = __webpack_require__(5043);
const _helpers_1 = __webpack_require__(12209);
const _data_source_wizard_page_iterator_1 = __webpack_require__(84590);
class CreateNewDataSourceWizardIterator extends _data_source_wizard_page_iterator_1.DataSourceWizardPageIteratorBase {
    constructor(factory, stateManager) {
        super(factory, stateManager);
    }
}
exports.CreateNewDataSourceWizardIterator = CreateNewDataSourceWizardIterator;
class EditQueryWizardIterator extends _data_source_wizard_page_iterator_1.DataSourceWizardPageIteratorBase {
    constructor(factory, stateManager) {
        super(factory, stateManager);
    }
    getInitialPage() {
        return analytics_wizard_1.SqlDataSourceWizardPageId.ConfigureQueryPage;
    }
}
exports.EditQueryWizardIterator = EditQueryWizardIterator;
class DashboardDataSourceWizardBase extends analytics_wizard_1.PopupWizard {
    constructor(factory) {
        super(factory);
    }
}
exports.DashboardDataSourceWizardBase = DashboardDataSourceWizardBase;
class DashboardDataSourceWizard extends DashboardDataSourceWizardBase {
    constructor(factory, options) {
        super(factory);
        this.title = _default_1.getLocalizationById('DashboardWebStringId.DataSources.DashboardDataSourceWizard');
        this._container = (element) => $.fn.constructor(element).closest('.dx-dashboard-widget-container');
        this._extendCssClass = 'dxrd-sqldatasource-wizard';
        this._options = options;
    }
    get options() {
        return this._options;
    }
}
exports.DashboardDataSourceWizard = DashboardDataSourceWizard;
class DashboardDataSourceWizardState {
    constructor() {
        this.sqlDataSourceWizard = {};
        this.jsonDataSourceWizard = {};
        this.olapDataSourceWizard = {};
        this.objectDataSourceWizard = {};
        this.federationDataSourceWizard = {};
    }
    get dashboardDataSourceType() {
        return this.dataSourceType && data_source_wizard_model_1.ToDashboardDataSourceType(this.dataSourceType) || undefined;
    }
    set dashboardDataSourceType(value) {
        this.dataSourceType = data_source_wizard_model_1.ToDataSourceTypeNumber(value);
    }
}
exports.DashboardDataSourceWizardState = DashboardDataSourceWizardState;
function createDashboardDataSourceWizard(requestWrapper, parameters, disableCustomSql, allowCreateNewJsonConnection, wizardSettings, dashboardConnectionStrings, dataSources, dataSourceBrowser, customTemplates) {
    var factory = new analytics_wizard_1.PageFactory();
    var wizardOptions = new _data_source_wizard_model_1.DashboardDataSourceWizardOptions();
    wizardOptions.callbacks = _create_query_page_1.createQueryPageCallback(requestWrapper, parameters, dataSourceBrowser);
    wizardOptions.disableCustomSql = disableCustomSql;
    wizardOptions.requestWrapper = requestWrapper;
    wizardOptions.wizardSettings = _helpers_1.createWizardSettings(wizardSettings);
    wizardOptions.allowCreateNewJsonConnection = allowCreateNewJsonConnection || false;
    wizardOptions.connectionStrings = dashboardConnectionStrings;
    wizardOptions.dataSources = ko.pureComputed(() => dataSources);
    choose_data_source_type_page_1._registerChooseDataSourceTypePage(factory, wizardOptions, customTemplates);
    analytics_wizard_1._registerChooseSqlConnectionPage(factory, dashboardConnectionStrings.sql);
    choose_olap_connection_string_page_1._registerOlapConnectionStringsPage(factory, dashboardConnectionStrings.olap);
    analytics_wizard_1._registerChooseJsonConnectionPage(factory, wizardOptions);
    analytics_wizard_1._registerConfigureQueryPage(factory, wizardOptions);
    analytics_wizard_1._registerConfigureParametersPage(factory, requestWrapper);
    analytics_wizard_1._registerChooseJsonSourcePage(factory, requestWrapper, () => new _parameters_item_provider_1.ParametersItemProvider(parameters()));
    _choose_json_schema_page_1._registerChooseJsonSchemaPage(factory, requestWrapper);
    federated_query_configure_page_1._registerFederatedQueryConfigurePage(factory, wizardOptions);
    return new DashboardDataSourceWizard(factory, wizardOptions);
}
exports.createDashboardDataSourceWizard = createDashboardDataSourceWizard;


/***/ }),

/***/ 1309:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createEditJsonDataSourceWizard = exports.EditJsonDataSourceWizard = exports.EditJsonDataSourceWizardIterator = void 0;
const analytics_wizard_1 = __webpack_require__(72652);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const _choose_json_schema_page_1 = __webpack_require__(5225);
class EditJsonDataSourceWizardIterator extends analytics_wizard_1.PageIterator {
    constructor(factory, stateManager) {
        super(factory, stateManager);
    }
    getNextPageId(pageId) {
        return analytics_wizard_1.JsonDataSourceWizardPageId.ChooseJsonSchemaPage;
    }
}
exports.EditJsonDataSourceWizardIterator = EditJsonDataSourceWizardIterator;
class EditJsonDataSourceWizard extends analytics_wizard_1.PopupWizard {
    constructor() {
        super(...arguments);
        this.title = _default_1.getLocalizationById('DashboardWebStringId.DataSources.DashboardDataSourceWizard');
        this._container = (element) => {
            return _jquery_helpers_1.$wrap(_jquery_helpers_1.closest(element, '.dx-dashboard-widget-container'));
        };
        this._extendCssClass = 'dxrd-sqldatasource-wizard';
    }
}
exports.EditJsonDataSourceWizard = EditJsonDataSourceWizard;
function createEditJsonDataSourceWizard(requestWrapper) {
    var factory = new analytics_wizard_1.PageFactory();
    _choose_json_schema_page_1._registerChooseJsonSchemaPage(factory, requestWrapper);
    return new EditJsonDataSourceWizard(factory);
}
exports.createEditJsonDataSourceWizard = createEditJsonDataSourceWizard;


/***/ }),

/***/ 65459:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createDashboardMultiQueryWizard = exports.DashboardMultiQueryDataSourceWizard = exports.DashboardMultiQueryWizardIterator = void 0;
const analytics_wizard_1 = __webpack_require__(72652);
const ko = __webpack_require__(71032);
const _data_source_wizard_model_1 = __webpack_require__(16059);
const choose_data_source_type_page_1 = __webpack_require__(49888);
const choose_olap_connection_string_page_1 = __webpack_require__(6271);
const _choose_json_schema_page_1 = __webpack_require__(5225);
const _create_query_page_1 = __webpack_require__(70937);
const _parameters_item_provider_1 = __webpack_require__(5043);
const _helpers_1 = __webpack_require__(12209);
const _data_source_wizard_1 = __webpack_require__(7035);
const _data_source_wizard_page_iterator_1 = __webpack_require__(84590);
class DashboardMultiQueryWizardIterator extends _data_source_wizard_page_iterator_1.DataSourceWizardPageIteratorBase {
    getInitialPage() {
        return super.getInitialPage();
    }
    getConfigureQueryPage() {
        return analytics_wizard_1.SqlDataSourceWizardPageId.MultiQueryConfigurePage;
    }
    getConfigureSqlParametersPage() {
        return analytics_wizard_1.SqlDataSourceWizardPageId.MultiQueryConfigureParametersPage;
    }
}
exports.DashboardMultiQueryWizardIterator = DashboardMultiQueryWizardIterator;
class DashboardMultiQueryDataSourceWizard extends _data_source_wizard_1.DashboardDataSourceWizardBase {
    constructor(pageFactory, options) {
        super(pageFactory);
        this._extendCssClass = 'dxrd-multiqueries-sqldatasource-wizard';
        this.height(443);
        this._options = options;
    }
    get options() {
        return this._options;
    }
}
exports.DashboardMultiQueryDataSourceWizard = DashboardMultiQueryDataSourceWizard;
function createDashboardMultiQueryWizard(requestWrapper, parameters, disableCustomSql, allowCreateNewJsonConnection, wizardSettings, dashboardConnectionStrings, dataSources, dataSourceBrowser, customTemplates) {
    var factory = new analytics_wizard_1.PageFactory();
    var wizardOptions = new _data_source_wizard_model_1.DashboardMultiQueryDataSourceWizardOptions();
    wizardOptions.callbacks = _create_query_page_1.createQueryPageCallback(requestWrapper, parameters, dataSourceBrowser, DashboardMultiQueryDataSourceWizard.customQueriesPreset);
    wizardOptions.disableCustomSql = disableCustomSql;
    wizardOptions.requestWrapper = requestWrapper;
    wizardOptions.wizardSettings = _helpers_1.createWizardSettings(wizardSettings);
    wizardOptions.allowCreateNewJsonConnection = allowCreateNewJsonConnection || false;
    wizardOptions.connectionStrings = dashboardConnectionStrings;
    wizardOptions.dataSources = ko.pureComputed(() => dataSources);
    choose_data_source_type_page_1._registerChooseDataSourceTypePage(factory, wizardOptions, customTemplates);
    analytics_wizard_1._registerChooseSqlConnectionPage(factory, dashboardConnectionStrings.sql);
    choose_olap_connection_string_page_1._registerOlapConnectionStringsPage(factory, dashboardConnectionStrings.olap);
    analytics_wizard_1._registerMultiQueryConfigurePage(factory, wizardOptions);
    analytics_wizard_1._registerMultiQueryConfigureParametersPage(factory, requestWrapper);
    analytics_wizard_1._registerChooseJsonConnectionPage(factory, wizardOptions);
    analytics_wizard_1._registerChooseJsonSourcePage(factory, requestWrapper, () => new _parameters_item_provider_1.ParametersItemProvider(parameters()));
    _choose_json_schema_page_1._registerChooseJsonSchemaPage(factory, requestWrapper);
    analytics_wizard_1._registerFederatedQueryConfigurePage(factory, wizardOptions);
    var multiQueryConfigurePageMeta = factory.getMetadata(analytics_wizard_1.SqlDataSourceWizardPageId.MultiQueryConfigurePage);
    multiQueryConfigurePageMeta.canNext = (page) => page._hasParametersToEdit();
    return new DashboardMultiQueryDataSourceWizard(factory, wizardOptions);
}
exports.createDashboardMultiQueryWizard = createDashboardMultiQueryWizard;


/***/ }),

/***/ 87953:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExpressionEditorDisplayNameProvider = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const ef_data_source_1 = __webpack_require__(69468);
const object_data_source_1 = __webpack_require__(43407);
const xpo_data_source_1 = __webpack_require__(86870);
class ExpressionEditorDisplayNameProvider {
    constructor(_dataFieldsProvider, _dataSourceName, _dataMember) {
        this._dataFieldsProvider = _dataFieldsProvider;
        this._dataSourceName = _dataSourceName;
        this._dataMember = _dataMember;
    }
    static create(dataSourceProvider, dataFieldsProvider, dataSourceName, dataMember) {
        var dataSource = dataSourceProvider.findDataSource(dataSourceName);
        if (dataSource instanceof object_data_source_1.ObjectDataSource || dataSource instanceof xpo_data_source_1.XpoDataSource || dataSource instanceof ef_data_source_1.EFDataSource) {
            return new ExpressionEditorDisplayNameProvider(dataFieldsProvider, dataSourceName, dataMember);
        }
        return null;
    }
    getDisplayNameByPath(dataSourcePath, fieldPath) {
        let parts = fieldPath.split('.');
        let result = null;
        let curPath = null;
        for (let i = 0; i < parts.length; i++) {
            curPath = curPath ? curPath + '.' + parts[i] : parts[i];
            let closedCurPath = curPath;
            let addCurDisplayPart = (curDisplayPath) => this._dataFieldsProvider.findDataField(this._dataSourceName, this._dataMember, closedCurPath)
                .then(dataField => {
                let def = _jquery_helpers_1.createJQueryDeferred();
                if (!dataField)
                    def.reject(fieldPath);
                else {
                    let displayName = dataField.displayName() || dataField.dataMember();
                    def.resolve(curDisplayPath ? curDisplayPath + '.' + displayName : displayName);
                }
                return def.promise();
            }, () => fieldPath);
            result = result ? result.then(addCurDisplayPart) : addCurDisplayPart('');
        }
        let removeRejection = (result) => _jquery_helpers_1.createJQueryDeferred().resolve(result).promise();
        return result.then(removeRejection, removeRejection);
    }
    getRealName(dataSourcePath, fieldDisplayPath) {
        return this._getRealNameRecursive('', fieldDisplayPath.split('.'))
            .then(dataMember => _jquery_helpers_1.createJQueryDeferred().resolve(dataMember ? dataMember : fieldDisplayPath).promise());
    }
    _getRealNameRecursive(curFieldPath, displayNameParts) {
        return this._dataFieldsProvider.getDataFieldsArray(this._dataSourceName, this._dataMember, curFieldPath, _ => true).then(dataFieldList => {
            let i = 0;
            let dataField;
            for (; i <= displayNameParts.length; i++) {
                const displayName = displayNameParts.slice(0, i).join('.');
                dataField = dataFieldList.filter(dataField => dataField.displayName() === displayName)[0];
                if (dataField)
                    break;
            }
            if (!dataField)
                return;
            if (i === displayNameParts.length)
                return dataField.dataMember();
            return this._getRealNameRecursive(dataField.dataMember(), displayNameParts.slice(i));
        });
    }
}
exports.ExpressionEditorDisplayNameProvider = ExpressionEditorDisplayNameProvider;


/***/ }),

/***/ 32615:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getExpressionEditorFunctions = exports.ExpressionEditorFunctions = void 0;
const analytics_widgets_internal_1 = __webpack_require__(86092);
var windowFunctions = {
    display: 'Window Functions',
    localizationId: 'DashboardStringId.FunctionCategoryWindow',
    items: {
        First: [{
                paramCount: 1,
                text: 'First()',
                displayName: 'First()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionFirst'
            }],
        Last: [{
                paramCount: 1,
                text: 'Last()',
                displayName: 'Last()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionLast'
            }],
        Index: [{
                paramCount: 1,
                text: 'Index()',
                displayName: 'Index()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionIndex'
            }],
        Size: [{
                paramCount: 1,
                text: 'Size()',
                displayName: 'Size()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionSize'
            }],
        Lookup: [{
                paramCount: 2,
                text: 'Lookup(, )',
                displayName: 'Lookup(, )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionLookup'
            }],
        RankCompetition: [{
                paramCount: 2,
                text: 'RankCompetition(, )',
                displayName: 'RankCompetition(, )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRankCompetition'
            }],
        RankDense: [{
                paramCount: 2,
                text: 'RankDense(, )',
                displayName: 'RankDense(, )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRankDense'
            }],
        RankUnique: [{
                paramCount: 2,
                text: 'RankUnique(, )',
                displayName: 'RankUnique(, )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRankUnique'
            }],
        RankModified: [{
                paramCount: 2,
                text: 'RankModified(, )',
                displayName: 'RankModified(, )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRankModified'
            }],
        RankPercentile: [{
                paramCount: 2,
                text: 'RankPercentile(, )',
                displayName: 'RankPercentile(, )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRankPercentile'
            }],
        RunningAggregate: [{
                paramCount: 2,
                text: 'RunningAggregate(, )',
                displayName: 'RunningAggregate(, )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningCustomAggregate'
            }],
        RunningAvg: [{
                paramCount: 1,
                text: 'RunningAvg()',
                displayName: 'RunningAvg()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningAvg'
            }],
        RunningCount: [{
                paramCount: 1,
                text: 'RunningCount()',
                displayName: 'RunningCount()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningCount'
            }],
        RunningMax: [{
                paramCount: 1,
                text: 'RunningMax()',
                displayName: 'RunningMax()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningMax'
            }],
        RunningMin: [{
                paramCount: 1,
                text: 'RunningMin()',
                displayName: 'RunningMin()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningMin'
            }],
        RunningSum: [{
                paramCount: 1,
                text: 'RunningSum()',
                displayName: 'RunningSum()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningSum'
            }],
        WindowAggregate: [{
                paramCount: 4,
                text: 'WindowAggregate(, , , )',
                displayName: 'WindowAggregate(, , , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowCustomAggregate'
            }],
        WindowAvg: [{
                paramCount: 3,
                text: 'WindowAvg(, , )',
                displayName: 'WindowAvg(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowAvg'
            }],
        WindowCount: [{
                paramCount: 3,
                text: 'WindowCount(, , )',
                displayName: 'WindowCount(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowCount'
            }],
        WindowCountDistinct: [{
                paramCount: 3,
                text: 'WindowCountDistinct(, , )',
                displayName: 'WindowCountDistinct(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowCountDistinct'
            }],
        WindowMax: [{
                paramCount: 3,
                text: 'WindowMax(, , )',
                displayName: 'WindowMax(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowMax'
            }],
        WindowMin: [{
                paramCount: 3,
                text: 'WindowMin(, , )',
                displayName: 'WindowMin(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowMin'
            }],
        WindowSum: [{
                paramCount: 3,
                text: 'WindowSum(, , )',
                displayName: 'WindowSum(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowSum'
            }],
        WindowMedian: [{
                paramCount: 3,
                text: 'WindowMedian(, , )',
                displayName: 'WindowMedian(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowMedian'
            }],
        WindowMode: [{
                paramCount: 3,
                text: 'WindowMode(, , )',
                displayName: 'WindowMode(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowMode'
            }],
        WindowVar: [{
                paramCount: 3,
                text: 'WindowVar(, , )',
                displayName: 'WindowVar(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowVar'
            }],
        WindowVarp: [{
                paramCount: 3,
                text: 'WindowVarp(, , )',
                displayName: 'WindowVarp(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowVarp'
            }],
        WindowStdDev: [{
                paramCount: 3,
                text: 'WindowStdDev(, , )',
                displayName: 'WindowStdDev(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowStdDev'
            }],
        WindowStdDevp: [{
                paramCount: 3,
                text: 'WindowStdDevp(, , )',
                displayName: 'WindowStdDevp(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowStdDevp'
            }],
        Total: [{
                paramCount: 0,
                text: 'Total()',
                displayName: 'Total()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionTotal'
            }]
    }
};
var dashboardAggrFunctions = {
    display: 'Aggregate',
    localizationId: 'DashboardStringId.FunctionCategoryAggregate',
    category: 'DashboardAggregate',
    items: {
        Avg: [{ paramCount: 1, text: 'Avg()', displayName: 'Avg()', descriptionStringId: 'XtraEditorsExpressionEditor.AvgAggregate.Description' }],
        Count: [{ paramCount: 1, text: 'Count()', displayName: 'Count()', descriptionStringId: 'XtraEditorsExpressionEditor.CountAggregate.Description' }],
        Max: [{ paramCount: 1, text: 'Max()', displayName: 'Max()', descriptionStringId: 'XtraEditorsExpressionEditor.MaxAggregate.Description' }],
        Min: [{ paramCount: 1, text: 'Min()', displayName: 'Min()', descriptionStringId: 'XtraEditorsExpressionEditor.MinAggregate.Description' }],
        Sum: [{ paramCount: 1, text: 'Sum()', displayName: 'Sum()', descriptionStringId: 'XtraEditorsExpressionEditor.SumAggregate.Description' }],
        CountNotNull: [{ paramCount: 1, text: 'CountNotNull()', displayName: 'CountNotNull()', descriptionStringId: 'DashboardStringId.AggregateExFunctionDescriptionCountNotNull' }],
        CountDistinct: [{ paramCount: 1, text: 'CountDistinct()', displayName: 'CountDistinct()', descriptionStringId: 'DashboardStringId.FunctionDescriptionCountDistinct' }],
        Median: [{ paramCount: 1, text: 'Median()', displayName: 'Median()', descriptionStringId: 'DashboardStringId.FunctionDescriptionMedian' }],
        Mode: [{ paramCount: 1, text: 'Mode()', displayName: 'Mode()', descriptionStringId: 'DashboardStringId.AggregateExFunctionDescriptionMode' }],
        StdDev: [{ paramCount: 1, text: 'StdDev()', displayName: 'StdDev()', descriptionStringId: 'DashboardStringId.FunctionDescriptionStdDev' }],
        StdDevp: [{ paramCount: 1, text: 'StdDevp()', displayName: 'StdDevp()', descriptionStringId: 'DashboardStringId.FunctionDescriptionStdDevp' }],
        Var: [{ paramCount: 1, text: 'Var()', displayName: 'Var()', descriptionStringId: 'DashboardStringId.FunctionDescriptionVar' }],
        Varp: [{ paramCount: 1, text: 'Varp()', displayName: 'Varp()', descriptionStringId: 'DashboardStringId.FunctionDescriptionVarp' }]
    }
};
var dashboardAdvancedFunctions = {
    display: 'Advanced',
    localizationId: 'DashboardStringId.FunctionCategoryAdvanced',
    category: 'Advanced',
    items: {
        aggr: [{ paramCount: 1, text: 'aggr()', displayName: 'aggr()', descriptionStringId: 'DashboardStringId.FunctionDescriptionAggr' }],
        asc: [{ paramCount: 1, text: 'asc()', displayName: 'asc()', descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc' }],
        desc: [{ paramCount: 1, text: 'desc()', displayName: 'desc()', descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc' }],
        orderBy: [{ paramCount: 1, text: 'orderBy()', displayName: 'orderBy()', descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy' }],
        partitionBy: [{ paramCount: 1, text: 'partitionBy()', displayName: 'partitionBy()', descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy' }],
        w: [{ paramCount: 3, text: 'w( , partitionBy(), orderBy() )', displayName: 'w()', descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinition' }],
        filter: [{ paramCount: 2, text: 'filter( , )', displayName: 'filter()', descriptionStringId: 'DashboardStringId.FunctionDescriptionAggregateFilter' }],
        joinRule: [{ paramCount: 2, text: 'joinRule()', displayName: 'joinRule()', descriptionStringId: 'DashboardStringId.FunctionDescriptionAggrJoinRule' }]
    }
};
var dashboardAdditionalFunctions = {
    'Date-Time': {
        GetDateHour: [{ paramCount: 1, text: 'GetDateHour()', displayName: 'GetDateHour()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour' }],
        GetDateHourMinute: [{ paramCount: 1, text: 'GetDateHourMinute()', displayName: 'GetDateHourMinute()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute' }],
        GetDateHourMinuteSecond: [{ paramCount: 1, text: 'GetDateHourMinuteSecond()', displayName: 'GetDateHourMinuteSecond()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond' }],
        GetDateMonthYear: [{ paramCount: 1, text: 'GetDateMonthYear()', displayName: 'GetDateMonthYear()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear' }],
        GetDateWeekYear: [
            { paramCount: 1, text: 'GetDateWeekYear()', displayName: 'GetDateWeekYear()', descriptionStringId: 'DashboardStringId.FunctionDescriptionGetDateWeekYear' },
            { paramCount: 2, text: 'GetDateWeekYear(,)', displayName: 'GetDateWeekYear(,)', descriptionStringId: 'DashboardStringId.FunctionDescriptionGetDateWeekYear2' }
        ],
        GetDateQuarterYear: [{ paramCount: 1, text: 'GetDateQuarterYear()', displayName: 'GetDateQuarterYear()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear' }],
        GetQuarter: [{ paramCount: 1, text: 'GetQuarter()', displayName: 'GetQuarter()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter' }],
        GetWeekOfMonth: [{ paramCount: 1, text: 'GetWeekOfMonth()', displayName: 'GetWeekOfMonth()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth' }],
        GetWeekOfYear: [{ paramCount: 1, text: 'GetWeekOfYear()', displayName: 'GetWeekOfYear()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear' }],
        ToDateTime: [{ paramCount: 1, text: 'ToDateTime()', displayName: 'ToDateTime()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime' }],
        MakeDateTime: [
            { paramCount: 3, text: 'MakeDateTime(,,)', displayName: 'MakeDateTime(,,)', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3' },
            { paramCount: 4, text: 'MakeDateTime(,,,)', displayName: 'MakeDateTime(,,,)', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4' },
            { paramCount: 5, text: 'MakeDateTime(,,,,)', displayName: 'MakeDateTime(,,,,)', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5' },
            { paramCount: 6, text: 'MakeDateTime(,,,,,)', displayName: 'MakeDateTime(,,,,,)', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6' }
        ]
    },
    'Logical': {
        ToBoolean: [{ paramCount: 1, text: 'ToBoolean()', displayName: 'ToBoolean()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean' }]
    },
    'String': {
        Join: null
    }
};
class ExpressionEditorFunctions {
}
exports.ExpressionEditorFunctions = ExpressionEditorFunctions;
ExpressionEditorFunctions.customFunctions = [];
function getExpressionEditorFunctions() {
    return [dashboardAdvancedFunctions,
        dashboardAggrFunctions]
        .concat(analytics_widgets_internal_1.functionDisplay().filter(category => category.display !== 'Aggregate'))
        .map(functionCategory => {
        let category = functionCategory.display;
        if (dashboardAdditionalFunctions[category]) {
            var clone = Object.assign({}, functionCategory);
            clone.items = Object.assign(Object.assign({}, clone.items), dashboardAdditionalFunctions[category]);
            return clone;
        }
        else {
            return functionCategory;
        }
    })
        .concat([windowFunctions])
        .concat(ExpressionEditorFunctions.customFunctions);
}
exports.getExpressionEditorFunctions = getExpressionEditorFunctions;


/***/ }),

/***/ 14531:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExpressionEditorItemsProvider = void 0;
const ko = __webpack_require__(71032);
const _data_source_browser_1 = __webpack_require__(9970);
const _jquery_helpers_1 = __webpack_require__(59384);
const data_item_1 = __webpack_require__(44650);
const olap_data_source_1 = __webpack_require__(40755);
const _parameters_helper_1 = __webpack_require__(57914);
class ExpressionEditorItemsProvider {
    constructor(dataFieldsProvider, dataSourceProvider, parameters, dataSourceName, dataMember, filterPredicate = () => true) {
        this.dataFieldsProvider = dataFieldsProvider;
        this.dataSourceProvider = dataSourceProvider;
        this.parameters = parameters;
        this.dataSourceName = dataSourceName;
        this.dataMember = dataMember;
        this.filterPredicate = filterPredicate;
    }
    getItems(pathRequest) {
        var items = [], fullPath = pathRequest.fullPath && pathRequest.fullPath.toLowerCase() || '';
        if (fullPath === '') {
            items = [{
                    displayName: 'Parameters',
                    name: 'Parameters',
                    isList: true,
                    specifics: 'parameters'
                }];
        }
        else if (fullPath === 'parameters') {
            items = (this.parameters && this.parameters || []).map(parameter => {
                const parameterType = _parameters_helper_1.ParameterHelper.typeValues.filter(item => item.value === parameter.type())[0];
                const parameterSpecific = parameterType && parameterType.specifics || 'Default';
                return {
                    displayName: parameter.name(),
                    name: parameter.name(),
                    isList: false,
                    specifics: parameterSpecific
                };
            });
        }
        else {
            var deferred = _jquery_helpers_1.createJQueryDeferred(), fieldPath = pathRequest.path, dataSource = this.dataSourceProvider.findDataSource(this.dataSourceName());
            if (!!this.dataMember) {
                fieldPath = _data_source_browser_1.trimLeadingPathElement(fieldPath, this.dataMember());
            }
            this.dataFieldsProvider.getDataFieldsArray(this.dataSourceName(), this.dataMember(), fieldPath, _data_source_browser_1.isNonCollectionDataField)
                .done(dataFields => {
                items = dataFields.filter(this.filterPredicate).map(field => {
                    return {
                        displayName: ko.unwrap(field.displayName),
                        name: dataSource instanceof olap_data_source_1.OlapDataSource ? field.dataMember() : field.name(),
                        field: field,
                        isList: !field.isDataFieldNode(),
                        hasItems: !field.isDataFieldNode(),
                        specifics: field.isDataFieldNode() ? data_item_1.DataItem.typesMap[field.fieldType()] || 'Default' : field.isList && field.isList() ? 'List' : 'Default'
                    };
                });
                deferred.resolve(items);
            });
            return deferred.promise();
        }
        return _jquery_helpers_1.createJQueryDeferred().resolve(items).promise();
    }
}
exports.ExpressionEditorItemsProvider = ExpressionEditorItemsProvider;


/***/ }),

/***/ 76790:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 28570:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardExpressionEditor = void 0;
const analytics_criteria_utils_1 = __webpack_require__(26484);
const analytics_widgets_1 = __webpack_require__(30010);
const $ = __webpack_require__(65311);
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const _dx_designer_integration_1 = __webpack_require__(28768);
const _expression_editor_functions_1 = __webpack_require__(32615);
const _flat_item_provider_wrapper_1 = __webpack_require__(86167);
class DashboardExpressionEditor extends analytics_widgets_1.ExpressionEditor {
    constructor(options, fieldListProvider, displayNameProvider, saveHandler, disabled) {
        options.theme = _dx_designer_integration_1.getAceTheme();
        super(options, fieldListProvider, disabled, undefined, displayNameProvider);
        var createCompletersBase = this.languageHelper.createCompleters;
        this.languageHelper.createCompleters = (e, b, v) => {
            var completers = createCompletersBase.call(this.languageHelper, e, b, v);
            completers[0]['_fieldListProvider'] = new _flat_item_provider_wrapper_1.FlatItemProviderWrapper(fieldListProvider());
            completers.forEach(completer => this._disposables.push(completer));
            return completers;
        };
        let saveHandlerValue = (callback) => {
            var val = '';
            if (this.aceAvailable) {
                val = this.editorContainer().getSession().getValue();
            }
            else {
                val = this.textAreaValue();
            }
            var toRealExpressionPromise = this.displayExpressionConverter ?
                this.displayExpressionConverter.toRealExpression(options.path(), val) :
                _jquery_helpers_1.createJQueryDeferred().resolve(val).promise();
            toRealExpressionPromise
                .then((realExpression) => {
                if (!!realExpression) {
                    analytics_criteria_utils_1.CriteriaOperatorStateMachine.parse(realExpression);
                    options.value(realExpression);
                    this.isValid(true);
                    options.isValid(true);
                }
                else {
                    this.isValid(false);
                    options.isValid(false);
                }
            })
                .catch((exception) => {
                this.isValid(false);
                options.isValid(false);
            })
                .then(() => {
                if (this.isValid()) {
                    callback();
                }
            });
        };
        saveHandler && saveHandler(saveHandlerValue);
        this._disposables.push(this.displayValue.subscribe(newValue => this.textAreaValue(newValue)));
    }
    focus() {
        this.editorContainer() && this.editorContainer().focus();
    }
}
exports.DashboardExpressionEditor = DashboardExpressionEditor;
ko.bindingHandlers['dshdExpressionEditor'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var $element = $.fn.constructor(element);
        $element.children().remove();
        $element.addClass('dx-filtereditor');
        var templateHtml = analytics_widgets_1.getTemplate('dx-expressioneditor-main'), $element = $element.append(templateHtml), editorElement = $element.children()[0], values = valueAccessor();
        values.options.functions = _expression_editor_functions_1.getExpressionEditorFunctions();
        var editor = new DashboardExpressionEditor(values.options, ko.observable(values.fieldListProvider), values.displayNameProvider, values.saveHandler, viewModel.disabled);
        editor.popupVisible(true);
        ko.utils.domNodeDisposal.addDisposeCallback(editorElement, () => {
            editor.dispose();
        });
        ko.applyBindings(editor, editorElement);
        editor.focus();
        return { controlsDescendantBindings: true };
    }
};


/***/ }),

/***/ 71940:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FilterExpressionEditorViewModel = void 0;
const analytics_internal_1 = __webpack_require__(19745);
const analytics_widgets_1 = __webpack_require__(30010);
const ko = __webpack_require__(71032);
class FilterExpressionEditorViewModel {
    constructor(params) {
        this.params = params;
        this.editorTemplate = 'dx-filtereditor-popup';
        this.criteriaString = ko.observable();
        this.editor = new analytics_widgets_1.FilterEditor(params.options, params.fieldListProvider, false, params.displayNameProvider);
        ko.computed(() => {
            var displayExpressionConverter = new analytics_internal_1.DisplayExpressionConverter(params.displayNameProvider);
            displayExpressionConverter.toDisplayExpression(params.options().path(), params.options().value()).done((result) => {
                this.criteriaString(result);
            }).fail(() => {
                this.criteriaString(params.options().value());
            });
        });
    }
    edit() {
        this.editor.popupVisible(true);
    }
    remove() {
        this.params.options().value(null);
    }
}
exports.FilterExpressionEditorViewModel = FilterExpressionEditorViewModel;


/***/ }),

/***/ 86167:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FlatItemProviderWrapper = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
class FlatItemProviderWrapper {
    constructor(itemsProvider) {
        this.itemsProvider = itemsProvider;
    }
    getItems(path) {
        var def = _jquery_helpers_1.createJQueryDeferred();
        this.itemsProvider.getItems(path).done(items => {
            if (!path.fullPath) {
                def.resolve(items);
            }
            else {
                var leafs = items.filter(i => !i.isList);
                var nodePromises = items
                    .filter(i => i.isList)
                    .map(node => {
                    var newPath = {
                        dataSource: path.dataSource,
                        fullPath: path.fullPath + '.' + node.name,
                        path: path.path + '.' + node.name,
                        id: path.id,
                        pathParts: path.pathParts && path.pathParts.concat(node.name) || undefined,
                        ref: path.ref
                    };
                    return this.itemsProvider.getItems(newPath);
                });
                if (nodePromises.length) {
                    _jquery_helpers_1.jqueryWhenArray(nodePromises).done((...itemArray) => {
                        var itemFlatList = itemArray.reduce((acc, items) => acc.concat(items), []);
                        def.resolve(leafs.concat(itemFlatList));
                    });
                }
                else {
                    def.resolve(leafs);
                }
            }
        });
        return def.promise();
    }
}
exports.FlatItemProviderWrapper = FlatItemProviderWrapper;


/***/ }),

/***/ 33269:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AvailableDataSourcesViewModel = void 0;
class AvailableDataSourcesViewModel {
    constructor(_dataSources, selectedDataSources, uiState, errorState, _showCreateDataSourceWizardDelegate) {
        this._dataSources = _dataSources;
        this.selectedDataSources = selectedDataSources;
        this.uiState = uiState;
        this.errorState = errorState;
        this._showCreateDataSourceWizardDelegate = _showCreateDataSourceWizardDelegate;
        this.showCreateDataSourceWizard = (federationSources) => {
            if (this.canCreateDataSourceWizard) {
                this._showCreateDataSourceWizardDelegate()(federationSources);
            }
        };
    }
    getDataSources(dataSourcesFilter = (() => true)) {
        return this._dataSources().filter(dataSourcesFilter);
    }
    get canCreateDataSourceWizard() {
        return !!this._showCreateDataSourceWizardDelegate();
    }
}
exports.AvailableDataSourcesViewModel = AvailableDataSourcesViewModel;


/***/ }),

/***/ 30457:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AvailableDataSourcesExtension = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const control_options_1 = __webpack_require__(82560);
const notificator_1 = __webpack_require__(16812);
const _default_1 = __webpack_require__(65855);
const dashboard_1 = __webpack_require__(15306);
const disposable_object_1 = __webpack_require__(99253);
const _helper_classes_1 = __webpack_require__(8384);
const _knockout_utils_1 = __webpack_require__(4437);
const _obsolete_helper_1 = __webpack_require__(64060);
const _available_data_sources_view_model_1 = __webpack_require__(33269);
var name = 'available-data-sources';
var nameAlias = 'availableDataSources';
class AvailableDataSourcesExtension extends disposable_object_1.DisposableObject {
    constructor(dashboardControl) {
        super();
        this.dashboardControl = dashboardControl;
        this.name = name;
        this.templateName = 'dx-dashboard-datasource-available-datasources';
        this.selectedDataSources = ko.observableArray();
        this.dataSources = ko.observableArray();
        this._errorState = ko.observable(null);
        this._uiState = ko.observable('empty');
        let showCreateDataSourceWizardDelegate = ko.computed(() => {
            var dataSourceWizardExtension = (this.dashboardControl.findExtension('data-source-wizard'));
            if (dataSourceWizardExtension) {
                return (federationSources) => {
                    let createdDataSourcePromise = federationSources ? dataSourceWizardExtension._showDataSourceCreatingDialog(federationSources) : dataSourceWizardExtension.showDataSourceCreatingDialog();
                    createdDataSourcePromise.done(dataSource => {
                        _helper_classes_1.NameGenerator.validateName(dataSource, this.dataSources(), 'name', 1, true);
                        this.dataSources.push(dataSource);
                    });
                };
            }
            else {
                return null;
            }
        });
        this.toDispose(showCreateDataSourceWizardDelegate);
        let isInitialized = false;
        let uiStateComputed = ko.computed(() => {
            if (!isInitialized) {
                this.loadAvailableDataSources();
                isInitialized = true;
            }
            return this._uiState();
        }, this, {
            deferEvaluation: true
        });
        this.toDispose(uiStateComputed);
        this.viewModel = new _available_data_sources_view_model_1.AvailableDataSourcesViewModel(this.dataSources, this.selectedDataSources, uiStateComputed, this._errorState, showCreateDataSourceWizardDelegate);
        _obsolete_helper_1.defineObsoleteMethod({
            target: this,
            memberName: 'loadAvaliableDataSources',
            oldMemberDisplayName: 'AvailableDataSourcesExtension.loadAvaliableDataSources',
            newMemberDisplayName: 'AvailableDataSourcesExtension.loadAvailableDataSources',
            action: () => this.loadAvailableDataSources()
        });
    }
    start() {
        if (this.dataSources().length > 0) {
            this.selectedDataSources([this.dataSources()[0]]);
        }
        _knockout_utils_1.subscribeArrayChange(this.dataSources, {
            added: (item) => this.selectedDataSources([item])
        });
    }
    stop() {
        this._errorState(null);
    }
    loadAvailableDataSources() {
        if (this.dashboardControl._endpointCollection.dataSourceUrls) {
            this._uiState('loading');
            this.dashboardControl.remoteService.getFromServer(this.dashboardControl._endpointCollection.dataSourceUrls.GetDataSourcesAction)
                .then((result) => {
                let dataSources = analytics_utils_1.deserializeArray(result, (item) => dashboard_1.Dashboard._createDataSource(item, new analytics_utils_1.ModelSerializer()))();
                dataSources.forEach(dataSource => {
                    if (!dataSource.name()) {
                        dataSource.name(_helper_classes_1.NameGenerator.generateName(_default_1.getLocalizationById('DashboardStringId.DefaultDataSourceName') + ' ', dataSources, 'name', 1));
                    }
                });
                this.dataSources(dataSources);
                this._uiState('live');
            }, (errorInfo) => {
                let errorDetail = notificator_1.NotificationController._getDetailedErrorMessage(errorInfo);
                this._errorState({
                    title: _default_1.getLocalizationById('DashboardWebStringId.DataSources.AvailableDataSourcesError'),
                    detail: errorDetail
                });
                this._uiState('error');
            });
        }
    }
}
exports.AvailableDataSourcesExtension = AvailableDataSourcesExtension;
control_options_1.designerExtensions[name] = (dashboardControl, options) => new AvailableDataSourcesExtension(dashboardControl);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 43704:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BindingPanelExtension = void 0;
const ko = __webpack_require__(71032);
const control_options_1 = __webpack_require__(82560);
const _options_manager_1 = __webpack_require__(47337);
const data_dashboard_item_1 = __webpack_require__(70355);
const _base_item_surface_1 = __webpack_require__(32498);
const _dashboard_item_menu_1 = __webpack_require__(67205);
var name = 'item-binding-panel';
var nameAlias = 'itemBindingPanel';
class BindingPanelExtension {
    constructor(dashboardControl, options = {}) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._subscriptions = [];
        this._optionsManager = new _options_manager_1.OptionsManager();
        this._optionsManager.initialize({
            alias: nameAlias,
            dashboardControl: dashboardControl,
            defaultOptions: {},
            eventsHolder: this,
            initOptions: options,
            optionChanged: (args) => null
        });
    }
    _contextMenuSubscriber(dashboardItemMenu) {
        if (!!dashboardItemMenu) {
            if (this.dashboardControl._actualLayoutController().selectedDashboardItem() instanceof data_dashboard_item_1.DataDashboardItem) {
                this._updateDashboardItemMenu(dashboardItemMenu);
            }
        }
    }
    _updateEmptyItemTemplate(dashboardLayout) {
        if (dashboardLayout && dashboardLayout.emptyItemTemplates) {
            dashboardLayout.emptyItemTemplates.push({
                name: 'dx-dashboard-binding-properties-empty-item',
                data: {
                    isDesignMode: this.dashboardControl.isDesignMode,
                    click: () => {
                        var contextMenuExtension = this.dashboardControl.findExtension('item-menu');
                        if (contextMenuExtension) {
                            contextMenuExtension.menuItemClick(this.name);
                        }
                    }
                }
            });
        }
    }
    _updateDashboardItemMenu(menu) {
        if (menu instanceof _dashboard_item_menu_1.DashboardItemMenu && menu.selectedItemSurface instanceof _base_item_surface_1.DataDashboardItemSurface) {
            const surface = menu.selectedItemSurface;
            if (surface && surface.dataSections && surface.dataSections().length > 0) {
                surface.customizeDataItemContainerTabs = (args) => {
                    this._optionsManager.raiseEvent('customizeDataItemContainerSections', args);
                };
                menu.contextMenuItems.push({
                    menuItemId: this.name,
                    icon: 'dx-dashboard-item-options',
                    hint: 'DashboardWebStringId.Bindings',
                    popoverClass: 'dx-dashboard-binding-panel',
                    panelWidth: _dashboard_item_menu_1.DashboardItemMenuSizes.BindingPanelPanelWidth(),
                    templateName: 'dx-dashboard-binding-properties',
                    detailVisible: ko.observable(false),
                    customData: surface,
                    index: 100
                });
            }
        }
    }
    start() {
        this._updateEmptyItemTemplate(this.dashboardControl._actualLayoutController());
        this.dashboardControl._actualLayoutController.subscribe(layoutController => this._updateEmptyItemTemplate(layoutController));
        var contextMenuExtension = this.dashboardControl.findExtension('item-menu');
        if (contextMenuExtension) {
            this._subscriptions.push(contextMenuExtension._itemContextMenu.subscribe(this._contextMenuSubscriber, this));
            this._contextMenuSubscriber(contextMenuExtension._itemContextMenu());
        }
    }
    stop() {
        this._subscriptions.forEach(s => s.dispose());
        this._subscriptions = [];
    }
}
exports.BindingPanelExtension = BindingPanelExtension;
control_options_1.designerExtensions[name] = (dashboardControl, options) => new BindingPanelExtension(dashboardControl, options);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 82247:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConversionPanelExtension = void 0;
const ko = __webpack_require__(71032);
const control_options_1 = __webpack_require__(82560);
const _default_1 = __webpack_require__(65855);
const _utils_1 = __webpack_require__(7590);
const dashboard_1 = __webpack_require__(15306);
const dashboard_item_1 = __webpack_require__(5815);
const data_dashboard_item_1 = __webpack_require__(70355);
const serializable_model_1 = __webpack_require__(29591);
const _dashboard_item_menu_1 = __webpack_require__(67205);
var name = 'item-conversion-panel';
var nameAlias = 'itemConversionPanel';
class ConversionPanelExtension {
    constructor(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._subscriptions = [];
    }
    _contextMenuSubscriber(itemContextMenu) {
        if (!!itemContextMenu) {
            var item = this.dashboardControl._actualLayoutController().selectedDashboardItem();
            if (item instanceof data_dashboard_item_1.DataDashboardItem) {
                this._updateContextMenu(itemContextMenu, item, this.dashboardControl.dashboard(), this.dashboardControl._serviceClient());
            }
        }
    }
    start() {
        var contextMenuExtension = this.dashboardControl.findExtension('item-menu');
        if (contextMenuExtension) {
            this._subscriptions.push(contextMenuExtension._itemContextMenu.subscribe(this._contextMenuSubscriber, this));
            this._contextMenuSubscriber(contextMenuExtension._itemContextMenu());
        }
    }
    stop() {
        this._subscriptions.forEach(s => s.dispose());
        this._subscriptions = [];
    }
    _updateContextMenu(itemContextMenu, dashboardItem, dashboard, serviceClient) {
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        var _convertItem = _utils_1.asyncDebounce(serviceClient.convertItem.bind(serviceClient), (result) => {
            var tmpDashboard = new dashboard_1.Dashboard(result);
            var newItem = tmpDashboard.items()[0];
            newItem.dataSource(dashboardItem.dataSource());
            newItem.componentName(undefined);
            dashboard._changeItem(dashboardItem, newItem);
        });
        const groups = toolboxExtension && toolboxExtension
            .toolboxGroups()
            .map(group => ({
            groupTitle: _default_1.getLocalizationById(group.title),
            items: group.items()
                .filter(item => !!item.type && item.type !== 'Group' && item.type !== 'Image' && item.type !== 'TabContainer' && !serializable_model_1.itemTypesMap[item.type].customItemType)
                .map(item => ({
                title: _default_1.getLocalizationById(item.title),
                icon: item.icon,
                convert: () => _convertItem(dashboardItem, dashboard_item_1.DashboardItem._getCommonItemType(item.type)),
                disabled: dashboardItem.itemType() === item.type,
                type: item.type
            }))
        }))
            .filter(group => group.items.length) || [];
        const viewModel = {
            groups,
            duplicate: () => dashboard._duplicateItem(dashboardItem),
            duplicateActionCaption: _default_1.getLocalizationById('DashboardWebStringId.Duplicate'),
        };
        itemContextMenu.contextMenuItems.push({
            menuItemId: this.name,
            icon: 'dx-dashboard-convert',
            title: 'DashboardWebStringId.ConvertTo',
            panelWidth: _dashboard_item_menu_1.DashboardItemMenuSizes.OptionsPanelWidth(),
            templateName: 'dx-dashboard-convert-to',
            detailVisible: ko.observable(false),
            customData: viewModel,
            index: 400
        });
    }
}
exports.ConversionPanelExtension = ConversionPanelExtension;
control_options_1.designerExtensions[name] = (dashboardControl, options) => new ConversionPanelExtension(dashboardControl);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 92170:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateDashboardExtension = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const control_options_1 = __webpack_require__(82560);
const _default_1 = __webpack_require__(65855);
const dashboard_1 = __webpack_require__(15306);
const toolbox_items_1 = __webpack_require__(29608);
var name = 'create-dashboard';
var nameAlias = 'createDashboard';
class CreateDashboardExtension {
    constructor(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this.showCreateNewDashboard = () => {
            var extension = this.dashboardControl.findExtension('toolbox');
            if (extension) {
                extension.selectMenuItem(this._newDashboardMenuItem);
            }
        };
        this._createNewDashboard = (dataSources, dashboardName) => {
            var toolboxExtension = this.dashboardControl.findExtension('toolbox');
            if (toolboxExtension) {
                toolboxExtension.menuVisible(false);
            }
            let createDashboardCallback = () => {
                var dashboardPropotype = new dashboard_1.Dashboard({});
                dashboardPropotype.title.text(dashboardName);
                dataSources.forEach(dataSource => {
                    var newDataSource = dashboard_1.Dashboard._createDataSource(new analytics_utils_1.ModelSerializer({ useRefs: false }).serialize(dataSource), new analytics_utils_1.ModelSerializer());
                    dashboardPropotype.dataSources.push(newDataSource);
                });
                this.performCreateDashboard(dashboardName, dashboardPropotype.getJSON());
            };
            let saveExtension = this.dashboardControl.findExtension('save-dashboard');
            if (saveExtension) {
                saveExtension.ensureDashboardSaved(createDashboardCallback);
            }
            else {
                createDashboardCallback();
            }
        };
        var accessibleDataSourcesExtension = ko.computed(() => this.dashboardControl.findExtension('available-data-sources'));
        var clickHandler = () => {
            this._newDashboardMenuItem.template = 'dx-dashboard-form-new';
            this._newDashboardMenuItem.data = new CreateNewDashboardViewModel(accessibleDataSourcesExtension, this._createNewDashboard);
        };
        this._newDashboardMenuItem = new toolbox_items_1.DashboardMenuItem(this.name, 'DashboardWebStringId.DashboardMenuNew', 105, 78, () => clickHandler());
    }
    start() {
        var extension = this.dashboardControl.findExtension('toolbox');
        if (extension) {
            extension.menuItems.push(this._newDashboardMenuItem);
        }
        this.dashboardControl._emptyControlTemplates.push({
            name: 'dx-dashboard-add-new-dashboard',
            data: {
                isDesignMode: this.dashboardControl.isDesignMode,
                showCreateNewDashboard: this.showCreateNewDashboard
            }
        });
    }
    stop() {
        var extension = this.dashboardControl.findExtension('toolbox');
        if (extension) {
            extension.menuItems.remove(this._newDashboardMenuItem);
        }
        var template = this.dashboardControl._emptyControlTemplates().filter(temlp => temlp.name === 'dx-dashboard-add-new-dashboard')[0];
        if (template) {
            this.dashboardControl._emptyControlTemplates.remove(template);
        }
    }
    performCreateDashboard(dashboardName, dashboardJson) {
        this.dashboardControl.notificationController.showState(_default_1.getLocalizationById('DashboardWebStringId.Notification.DashboardLoading'));
        return this.dashboardControl.remoteService.postToServer(this.dashboardControl._endpointCollection.dashboardUrls.GetDashboardsAction, { name: dashboardName, dashboard: dashboardJson })
            .then((result, status, query) => {
            this.dashboardControl.initializeDashboard(result['dashboardId'], result['dashboard'].Dashboard);
        }, request => {
            this.dashboardControl.notificationController.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.NewDashboardCannotBeCreated'), request);
        });
    }
}
exports.CreateDashboardExtension = CreateDashboardExtension;
control_options_1.designerExtensions[name] = (dashboardControl, options) => new CreateDashboardExtension(dashboardControl);
control_options_1.extensionNameMap[name] = nameAlias;
class CreateNewDashboardViewModel {
    constructor(accessibleDataSourcesExtension, _newDashboardCallback) {
        this.accessibleDataSourcesExtension = accessibleDataSourcesExtension;
        this._newDashboardCallback = _newDashboardCallback;
        this.dashboardName = ko.observable();
        this.selectionMode = 'single';
        this.createNewDashboard = () => {
            this._newDashboardCallback(this.accessibleDataSourcesExtension().selectedDataSources(), this.dashboardName());
        };
        this.dashboardName(_default_1.getLocalizationById('DashboardWebStringId.NewDashboard'));
        this.createNewDashboardDisabled = ko.computed(() => {
            return !this.dashboardName() || !this.accessibleDataSourcesExtension() || this.accessibleDataSourcesExtension().selectedDataSources().length === 0;
        });
    }
}


/***/ }),

/***/ 94041:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FilterPanelExtension = void 0;
const ko = __webpack_require__(71032);
const control_options_1 = __webpack_require__(82560);
const model_1 = __webpack_require__(14198);
const _dashboard_item_menu_1 = __webpack_require__(67205);
const _item_filter_properties_composer_1 = __webpack_require__(70872);
var name = 'item-filter-panel';
var nameAlias = 'itemFilterPanel';
class FilterPanelExtension {
    constructor(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._subscriptions = [];
    }
    _contextMenuSubscriber(itemContextMenu) {
        if (!!itemContextMenu) {
            var item = this.dashboardControl._actualLayoutController().selectedDashboardItem();
            this._updateContextMenu(itemContextMenu, item);
        }
    }
    _updateContextMenu(menu, item) {
        if (menu instanceof _dashboard_item_menu_1.DashboardItemMenu && item instanceof model_1.DataDashboardItem) {
            menu.contextMenuItems.push({
                menuItemId: this.name,
                icon: 'dx-dashboard-item-filter',
                title: 'DashboardWebStringId.Filters',
                panelWidth: _dashboard_item_menu_1.DashboardItemMenuSizes.OptionsPanelWidth(),
                templateName: 'dx-dashboard-options',
                detailVisible: ko.observable(false),
                showMenu: () => {
                    var composer = new _item_filter_properties_composer_1.ItemFilterPropertiesComposer(this.dashboardControl._dataSourceBrowser);
                    var tabs = composer.composeTabs(item);
                    menu.propertiesController.mainModel({
                        data: {
                            model: item,
                            propertiesTabs: ko.observableArray(tabs),
                        }
                    });
                },
                customData: {
                    propertiesController: menu.propertiesController,
                },
                index: 150
            });
        }
    }
    start() {
        var contextMenuExtension = this.dashboardControl.findExtension('item-menu');
        if (contextMenuExtension) {
            this._subscriptions.push(contextMenuExtension._itemContextMenu.subscribe(this._contextMenuSubscriber, this));
            this._contextMenuSubscriber(contextMenuExtension._itemContextMenu());
        }
    }
    stop() {
        this._subscriptions.forEach(s => s.dispose());
        this._subscriptions = [];
    }
}
exports.FilterPanelExtension = FilterPanelExtension;
control_options_1.designerExtensions[name] = (dashboardControl, options) => new FilterPanelExtension(dashboardControl);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 31121:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InteractivityPanelExtension = void 0;
const ko = __webpack_require__(71032);
const control_options_1 = __webpack_require__(82560);
const _dashboard_item_menu_1 = __webpack_require__(67205);
const _interactivity_properties_composer_1 = __webpack_require__(99429);
var name = 'item-interactivity-panel';
var nameAlias = 'itemInteractivityPanel';
class InteractivityPanelExtension {
    constructor(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._subscriptions = [];
    }
    _contextMenuSubscriber(itemContextMenu) {
        if (!!itemContextMenu) {
            var item = this.dashboardControl._actualLayoutController().selectedDashboardItem();
            this._updateContextMenu(itemContextMenu, item);
        }
    }
    _updateContextMenu(menu, item) {
        if (item._isInteractivityAllowed()) {
            if (menu instanceof _dashboard_item_menu_1.DashboardItemMenu) {
                menu.contextMenuItems.push({
                    menuItemId: this.name,
                    icon: 'dx-dashboard-interactivity',
                    title: 'DashboardWebStringId.Interactivity',
                    panelWidth: _dashboard_item_menu_1.DashboardItemMenuSizes.OptionsPanelWidth(),
                    templateName: 'dx-dashboard-options',
                    detailVisible: ko.observable(false),
                    showMenu: () => {
                        var composer = new _interactivity_properties_composer_1.InteractivityPropertiesComposer(menu.propertiesController);
                        var tabs = composer.composeTabs(item);
                        menu.propertiesController.mainModel({
                            data: {
                                model: item,
                                propertiesTabs: ko.observableArray(tabs),
                            }
                        });
                    },
                    customData: {
                        propertiesController: menu.propertiesController,
                    },
                    index: 200
                });
            }
        }
    }
    start() {
        var contextMenuExtension = this.dashboardControl.findExtension('item-menu');
        if (contextMenuExtension) {
            this._subscriptions.push(contextMenuExtension._itemContextMenu.subscribe(this._contextMenuSubscriber, this));
            this._contextMenuSubscriber(contextMenuExtension._itemContextMenu());
        }
    }
    stop() {
        this._subscriptions.forEach(s => s.dispose());
        this._subscriptions = [];
    }
}
exports.InteractivityPanelExtension = InteractivityPanelExtension;
control_options_1.designerExtensions[name] = (dashboardControl, options) => new InteractivityPanelExtension(dashboardControl);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 59698:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardItemMenuExtension = void 0;
const ko = __webpack_require__(71032);
const control_options_1 = __webpack_require__(82560);
const _docking_layout_controller_1 = __webpack_require__(82106);
const _interfaces_1 = __webpack_require__(60136);
const disposable_object_1 = __webpack_require__(99253);
const _dashboard_item_menu_1 = __webpack_require__(67205);
var name = 'item-menu';
var nameAlias = 'itemMenu';
class DashboardItemMenuExtension extends disposable_object_1.DisposableObject {
    constructor(dashboardControl) {
        super();
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._itemContextMenu = ko.observable();
    }
    start() {
        this.dashboardControl._actualLayoutController.subscribe(layoutController => this._updateExtension(layoutController));
        this._updateExtension(this.dashboardControl._actualLayoutController());
    }
    stop() {
    }
    processKeyEvent(keyEventType, eventArgs) {
        if (keyEventType === 'keydown' && eventArgs.keyCode === _interfaces_1.KeyCodes.Esc) {
            let menu = this._itemContextMenu();
            if (menu && menu instanceof _dashboard_item_menu_1.DashboardItemMenu) {
                if (menu.isSecondaryPanelVisible()) {
                    menu.hideBindingProperties();
                    return true;
                }
                else if (menu.propertiesController.mainModel()) {
                    menu.hideBindingProperties();
                    return true;
                }
                else if (menu.menuItemDetailVisible()) {
                    menu.hideBindingPanel();
                    return true;
                }
            }
        }
        return false;
    }
    menuItemClick(menuItemId) {
        let menu = this._itemContextMenu();
        if (menu && menu instanceof _dashboard_item_menu_1.DashboardItemMenu) {
            var contextMenuItem = menu.contextMenuItems().filter(item => item.menuItemId === menuItemId)[0];
            if (contextMenuItem) {
                menu.menuItemClick(contextMenuItem.menuItemId);
            }
        }
    }
    _updateExtension(layoutController) {
        var that = this;
        if (layoutController != null && layoutController instanceof _docking_layout_controller_1.DockingLayoutController) {
            layoutController.contextMenu = (layoutItem) => {
                return {
                    data: {
                        dockingLayoutController: layoutController,
                        layoutItem: layoutItem,
                        itemMenuViewModelContainer: that._itemContextMenu,
                        notificationController: that.dashboardControl.notificationController
                    },
                    name: 'dx-dashboard-item-menu-holder'
                };
            };
        }
    }
}
exports.DashboardItemMenuExtension = DashboardItemMenuExtension;
control_options_1.designerExtensions[name] = (dashboardControl, options) => new DashboardItemMenuExtension(dashboardControl);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 18295:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getDimensionToolbarItems = void 0;
const analytics_widgets_internal_1 = __webpack_require__(86092);
const string_1 = __webpack_require__(36306);
const number_box_1 = __webpack_require__(53158);
const validator_1 = __webpack_require__(90286);
const _default_1 = __webpack_require__(65855);
const _formatter_1 = __webpack_require__(93687);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _toolbar_extension_1 = __webpack_require__(25822);
function getDimensionToolbarItems(caption, namePrefix) {
    const minDimensionValue = 100;
    const maxDimensionValue = 10000;
    const dimensionRangeRuleMessage = function () {
        const formatViewModel = {
            FormatType: 'Number',
            IncludeGroupSeparator: true,
        };
        const maxFormattedDimensionValue = _formatter_1.formatNumeric(maxDimensionValue, formatViewModel);
        const minFormattedDimensionValue = _formatter_1.formatNumeric(minDimensionValue, formatViewModel);
        return string_1.format(_default_1.getLocalizationById('DashboardWebStringId.DesignerToolbar.LayoutDimensionValidationError'), minFormattedDimensionValue, maxFormattedDimensionValue);
    }();
    let dimensionOptions;
    let numberBox;
    let numberBoxValidator;
    let buttonGroup;
    let dimensionNameElement = document.createElement('div');
    dimensionNameElement.innerText = caption;
    let pixelElement = document.createElement('div');
    pixelElement.innerText = _default_1.getLocalizationById('DashboardWebStringId.DesignerToolbar.Pixels');
    let valueSubscription;
    let buttonGroupModeSubscription;
    let textBoxModeSubscription;
    let pixelElementModeSubscription;
    let updateNumberBox = () => {
        if (numberBox) {
            if (dimensionOptions) {
                let updateNumberBoxText = (value) => {
                    if (numberBox.option('disabled') || !_utils_1.type.isDefined(value))
                        numberBox.option('value', null);
                    else
                        numberBox.option('value', value);
                };
                let updateNumberBoxDisability = (mode) => {
                    numberBox.option('disabled', mode !== 'Fixed');
                    updateNumberBoxText(dimensionOptions.value());
                };
                updateNumberBoxDisability(dimensionOptions.mode());
                valueSubscription && valueSubscription.dispose();
                valueSubscription = dimensionOptions.value.subscribe(newValue => updateNumberBoxText(newValue));
                textBoxModeSubscription && textBoxModeSubscription.dispose();
                textBoxModeSubscription = dimensionOptions.mode.subscribe(newMode => updateNumberBoxDisability(newMode));
                numberBox.option('onValueChanged', (args) => {
                    if (dimensionOptions && dimensionOptions.mode() === 'Fixed' && numberBox.option('isValid'))
                        dimensionOptions.value(args.value && parseInt(args.value));
                });
            }
            else {
                numberBox.option('value', null);
                numberBox.option('disabled', true);
                numberBox.option('onValueChanged', (args) => { });
            }
        }
    };
    let updateButtonGroup = () => {
        buttonGroupModeSubscription && buttonGroupModeSubscription.dispose();
        if (buttonGroup) {
            if (dimensionOptions) {
                buttonGroup.option('disabled', false);
                let updateButtonGroupSelection = (value) => buttonGroup && buttonGroup.option('selectedItemKeys', value ? [value] : []);
                buttonGroupModeSubscription = dimensionOptions.mode.subscribe(newValue => updateButtonGroupSelection(newValue));
                buttonGroup.option('onSelectionChanged', (args) => {
                    if (args.addedItems && args.addedItems.length === 1 && dimensionOptions) {
                        let buttonType = args.addedItems[0].key;
                        dimensionOptions.mode(buttonType);
                    }
                });
                updateButtonGroupSelection(dimensionOptions.mode());
            }
            else {
                buttonGroup.option('disabled', true);
                buttonGroup.option('onSelectionChanged', (args) => { });
            }
        }
    };
    let updatePixelElement = () => {
        pixelElementModeSubscription && pixelElementModeSubscription.dispose();
        let updatePixelElementDisability = (mode) => {
            if (mode === 'Fixed')
                pixelElement.classList.remove('dx-dashboard-toolbar-disabled-label');
            else
                pixelElement.classList.add('dx-dashboard-toolbar-disabled-label');
        };
        if (dimensionOptions) {
            updatePixelElementDisability(dimensionOptions.mode());
            pixelElementModeSubscription = dimensionOptions.mode.subscribe(newMode => updatePixelElementDisability(newMode));
        }
        else {
            updatePixelElementDisability(null);
        }
    };
    let updateDimensionNameElement = () => {
        if (dimensionOptions)
            dimensionNameElement.classList.remove('dx-dashboard-toolbar-disabled-label');
        else
            dimensionNameElement.classList.add('dx-dashboard-toolbar-disabled-label');
    };
    let validateDimensionValue = (option) => {
        if (dimensionOptions && dimensionOptions.mode() === 'Fixed') {
            const newValue = option.value ? parseInt(option.value.toString()) : 0;
            const currentDimensionValue = dimensionOptions.value();
            const currentValue = currentDimensionValue ? parseInt(currentDimensionValue.toString()) : 0;
            if (currentValue !== newValue)
                return newValue >= minDimensionValue && newValue <= maxDimensionValue;
        }
        return true;
    };
    let items = [
        {
            name: namePrefix + 'Label',
            location: 'before',
            cssClass: 'dx-dashboard-toolbar-label',
            template: (data, index, element) => {
                updateDimensionNameElement();
                _jquery_helpers_1.$unwrap(element).appendChild(dimensionNameElement);
            }
        },
        {
            name: namePrefix + 'ButtonGroup',
            location: 'before',
            cssClass: 'dx-dashboard-toolbar-button-group',
            widget: 'dxButtonGroup',
            options: {
                items: [
                    {
                        text: _default_1.getLocalizationById('DashboardStringId.LayoutDimensionModeAuto'),
                        key: 'Auto'
                    },
                    {
                        text: _default_1.getLocalizationById('DashboardStringId.LayoutDimensionModeFixed'),
                        key: 'Fixed'
                    }
                ],
                keyExpr: 'key',
                onInitialized: (args) => {
                    buttonGroup = args.component;
                    updateButtonGroup();
                },
                width: '100%',
                disabled: true
            }
        },
        {
            name: namePrefix + 'NumberBox',
            location: 'before',
            cssClass: 'dx-dashboard-toolbar-spinedit',
            template: (data, index, element) => {
                const widgetContainer = document.createElement('div');
                _jquery_helpers_1.$unwrap(element).appendChild(widgetContainer);
                numberBox = new number_box_1.default(widgetContainer, {
                    disabled: true,
                    showSpinButtons: true,
                    width: '100%',
                    min: 1,
                    step: 10,
                });
                numberBoxValidator = new validator_1.default(widgetContainer, {
                    validationRules: [{
                            type: 'custom',
                            validationCallback: validateDimensionValue,
                            message: dimensionRangeRuleMessage,
                        }],
                });
                updateNumberBox();
            }
        },
        {
            name: namePrefix + 'PixelLabel',
            location: 'before',
            cssClass: 'dx-dashboard-toolbar-pixel-label',
            template: (data, index, element) => {
                updatePixelElement();
                _jquery_helpers_1.$unwrap(element).appendChild(pixelElement);
            }
        },
        Object.assign({ name: namePrefix + 'Separator', location: 'before' }, _toolbar_extension_1.createToolbarSeparator())
    ];
    return {
        items,
        assignModel: (options) => {
            dimensionOptions = options;
            updateDimensionNameElement();
            updateButtonGroup();
            updateNumberBox();
            updatePixelElement();
        },
        dispose: () => {
            numberBoxValidator && numberBoxValidator.dispose();
            valueSubscription && valueSubscription.dispose();
            buttonGroupModeSubscription && buttonGroupModeSubscription.dispose();
            textBoxModeSubscription && textBoxModeSubscription.dispose();
            pixelElementModeSubscription && pixelElementModeSubscription.dispose();
        }
    };
}
exports.getDimensionToolbarItems = getDimensionToolbarItems;
analytics_widgets_internal_1.registerBaseBinding('dxButtonGroup', 'options');


/***/ }),

/***/ 73011:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LayoutOptionEditorExtension = void 0;
const control_options_1 = __webpack_require__(82560);
const _default_1 = __webpack_require__(65855);
const disposable_object_1 = __webpack_require__(99253);
const _knockout_utils_1 = __webpack_require__(4437);
const _layout_options_editor_1 = __webpack_require__(18295);
class LayoutOptionEditorExtension extends disposable_object_1.DisposableObject {
    constructor(dashboardControl) {
        super();
        this.name = 'layoutOptionEditor';
        this._dashboardControl = dashboardControl;
        let widthItems = _layout_options_editor_1.getDimensionToolbarItems(_default_1.getLocalizationById('DashboardWebStringId.DesignerToolbar.Width'), 'width');
        let heightItems = _layout_options_editor_1.getDimensionToolbarItems(_default_1.getLocalizationById('DashboardWebStringId.DesignerToolbar.Height'), 'height');
        this._predefinedToolbarItems = widthItems.items.concat(heightItems.items);
        this._defaultToolbarItems = this._predefinedToolbarItems.map((item, index) => ({ name: item.name, index: LayoutOptionEditorExtension._toolbarItemsIndex + index }));
        this._refreshItems = (layoutOptions) => {
            widthItems.assignModel(layoutOptions && layoutOptions.width);
            heightItems.assignModel(layoutOptions && layoutOptions.height);
        };
        this._disposeItems = () => {
            widthItems.dispose();
            heightItems.dispose();
        };
    }
    start() {
        this._addToolbarItems(this._dashboardControl.findExtension('designerToolbar'));
        this._extensionsChangeSubscription && this._extensionsChangeSubscription.dispose();
        this._extensionsChangeSubscription = this._dashboardControl.subscribeExtensionsChanged({
            added: (extension) => {
                if (extension.name === 'designerToolbar') {
                    this._addToolbarItems(extension);
                }
            },
            deleted: (extension) => {
                if (extension.name === 'designerToolbar') {
                    this._removeToolbarItems(extension);
                }
            }
        });
        this._dashboardSubscription && this._dashboardSubscription.dispose();
        this._dashboardSubscription = _knockout_utils_1.subscribeAndPerform(this._dashboardControl.dashboard, dashboard => this._refreshItems(dashboard && dashboard.layoutOptions));
    }
    stop() {
        this._extensionsChangeSubscription && this._extensionsChangeSubscription.dispose();
        this._dashboardSubscription && this._dashboardSubscription.dispose();
        this._removeToolbarItems(this._dashboardControl.findExtension('designerToolbar'));
    }
    _addToolbarItems(toolbar) {
        if (toolbar) {
            toolbar._unregisterDefaultItems(this._defaultToolbarItems);
            toolbar._unregisterPredefinedItems(this._predefinedToolbarItems);
            toolbar._registerDefaultItems(this._defaultToolbarItems);
            toolbar._registerPredefinedItems(this._predefinedToolbarItems);
            toolbar._update();
        }
    }
    _removeToolbarItems(toolbar) {
        if (toolbar) {
            toolbar._unregisterDefaultItems(this._defaultToolbarItems);
            toolbar._unregisterPredefinedItems(this._predefinedToolbarItems);
            toolbar._update();
        }
    }
    dispose() {
        this.stop();
        this._disposeItems();
        super.dispose();
    }
}
exports.LayoutOptionEditorExtension = LayoutOptionEditorExtension;
LayoutOptionEditorExtension._toolbarItemsIndex = 100;
control_options_1.designerExtensions['layoutOptionEditor'] = (dashboardControl, options) => new LayoutOptionEditorExtension(dashboardControl);
control_options_1.extensionNameMap['layoutOptionEditor'] = 'layoutOptionEditor';


/***/ }),

/***/ 30779:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OpenDashboardExtension = void 0;
const array_store_1 = __webpack_require__(79322);
const control_options_1 = __webpack_require__(82560);
const _jquery_helpers_1 = __webpack_require__(59384);
const toolbox_items_1 = __webpack_require__(29608);
var name = 'open-dashboard';
var nameAlias = 'openDashboard';
class OpenDashboardExtension {
    constructor(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._menuItem = new toolbox_items_1.DashboardMenuItem(this.name, 'DashboardWebStringId.DashboardMenuOpen', 108, 79);
        this._menuItem.template = 'dx-dashboard-form-open';
        this._menuItem.data = {
            dashboardsListStore: (loadOptions) => {
                let def = _jquery_helpers_1.createJQueryDeferred();
                this.dashboardControl.requestDashboardList().done(items => {
                    new array_store_1.default(items).load({ filter: loadOptions.searchValue ? [loadOptions.searchExpr, loadOptions.searchOperation, loadOptions.searchValue] : null }).then(function (data) {
                        def.resolve(data);
                    });
                });
                return def;
            },
            openDashboard: (e) => {
                let toolboxExtension = this.dashboardControl.findExtension('toolbox');
                if (toolboxExtension) {
                    toolboxExtension.menuVisible(false);
                }
                let openDashboardCallback = () => this.loadDashboard(e.itemData.id);
                let saveExtension = this.dashboardControl.findExtension('save-dashboard');
                if (saveExtension) {
                    saveExtension.ensureDashboardSaved(openDashboardCallback);
                }
                else {
                    openDashboardCallback();
                }
            }
        };
    }
    start() {
        let toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.push(this._menuItem);
        }
    }
    stop() {
        let toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.remove(this._menuItem);
        }
    }
    loadDashboard(dashboardId) {
        return this.dashboardControl.loadDashboard(dashboardId);
    }
}
exports.OpenDashboardExtension = OpenDashboardExtension;
control_options_1.designerExtensions[name] = (dashboardControl, options) => new OpenDashboardExtension(dashboardControl);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 54792:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OptionsPanelExtension = void 0;
const ko = __webpack_require__(71032);
const control_options_1 = __webpack_require__(82560);
const _options_manager_1 = __webpack_require__(47337);
const _dashboard_item_menu_1 = __webpack_require__(67205);
const name = 'item-options-panel';
const nameAlias = 'itemOptionsPanel';
class OptionsPanelExtension {
    constructor(dashboardControl, options = {}) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._subscriptions = [];
        this._perMenuSubscriptions = [];
        this._customizeTabsHandlers = [];
        this._optionsManager = new _options_manager_1.OptionsManager();
        this._optionsManager.initialize({
            alias: nameAlias,
            dashboardControl: dashboardControl,
            defaultOptions: {},
            eventsHolder: this,
            initOptions: options,
            optionChanged: (args) => null
        });
    }
    _contextMenuSubscriber(itemContextMenu) {
        if (!!itemContextMenu) {
            var item = this.dashboardControl._actualLayoutController().selectedDashboardItem();
            this._updateContextMenu(itemContextMenu, item, this.dashboardControl.dashboard(), this.dashboardControl._dataSourceBrowser);
        }
    }
    start() {
        var contextMenuExtension = this.dashboardControl.findExtension('item-menu');
        if (contextMenuExtension) {
            this._subscriptions.push(contextMenuExtension._itemContextMenu.subscribe(this._contextMenuSubscriber, this));
            this._contextMenuSubscriber(contextMenuExtension._itemContextMenu());
        }
    }
    stop() {
        this._perMenuSubscriptions.forEach(s => s.dispose());
        this._perMenuSubscriptions = [];
        this._subscriptions.forEach(s => s.dispose());
        this._subscriptions = [];
    }
    _updateContextMenu(menu, item, dashboard, dataSourceBrowser) {
        let composer;
        if (menu.selectedItemSurface) {
            composer = menu.selectedItemSurface.getPropertiesComposer();
            menu.selectedItemSurface.customizeDashboardItemTabs = (args) => {
                this._optionsManager.raiseEvent('customizeSections', args);
            };
        }
        menu.contextMenuItems.push({
            menuItemId: this.name,
            icon: 'dx-dashboard-properties',
            title: 'DashboardWebStringId.Options',
            panelWidth: _dashboard_item_menu_1.DashboardItemMenuSizes.OptionsPanelWidth(),
            templateName: 'dx-dashboard-options',
            detailVisible: ko.observable(false),
            showMenu: () => {
                let args = { dataSourceBrowser, dashboard, propertiesController: menu.propertiesController };
                let tabs = composer.composeTabs(item, args);
                this._customizeTabsHandlers.forEach(handler => handler(tabs, item));
                menu.propertiesController.mainModel({
                    data: {
                        model: item,
                        propertiesTabs: ko.observableArray(tabs),
                    }
                });
            },
            customData: {
                propertiesController: menu.propertiesController,
            },
            index: 300
        });
    }
    _subscribeTabsChanged(handler) {
        if (this._customizeTabsHandlers.indexOf(handler) === -1) {
            this._customizeTabsHandlers.push(handler);
        }
        return {
            dispose: () => {
                this._customizeTabsHandlers.splice(this._customizeTabsHandlers.indexOf(handler), 1);
            }
        };
    }
}
exports.OptionsPanelExtension = OptionsPanelExtension;
control_options_1.designerExtensions[name] = (dashboardControl, options) => new OptionsPanelExtension(dashboardControl, options);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 30199:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SaveDashboardExtension = void 0;
const ko = __webpack_require__(71032);
const control_options_1 = __webpack_require__(82560);
const _interfaces_1 = __webpack_require__(60136);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const _confirm_dialog_1 = __webpack_require__(75110);
const toolbox_items_1 = __webpack_require__(29608);
var name = 'save-dashboard';
var nameAlias = 'saveDashboard';
class SaveDashboardExtension {
    constructor(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = 'save-dashboard';
        this._confirmDialogViewModel = new _confirm_dialog_1.ConfirmDialogViewModel();
        this.canSaveDashboard = ko.computed(() => !!this.dashboardControl.dashboard());
        this._isDashboardDirty = ko.computed(() => this._undoEngineExtension && this._undoEngineExtension.isChanged());
        this._customTemplate = {
            name: 'dx-dashboard-confirm-dialog',
            data: this._confirmDialogViewModel
        };
        this.designerToViewerAction = {
            orderNo: 20,
            action: options => {
                var def = _jquery_helpers_1.createJQueryDeferred();
                this._ensureDashboardSaved()
                    .then(() => {
                    if (this._isDashboardDirty()) {
                        var container = this.dashboardControl.dashboardContainer();
                        this.dashboardControl.loadDashboard(container.id)
                            .done(() => def.resolve(options));
                    }
                    def.resolve(options);
                }, () => def.reject());
                return def.promise();
            }
        };
        this._menuItem = new toolbox_items_1.DashboardMenuItem('save', 'DashboardWebStringId.DashboardMenuSave', 110, _interfaces_1.KeyCodes.S, () => { this._toolboxExtension.closeMenu(); this.saveDashboard(); });
        this._menuItem.hasSeparator = true;
        this._menuItem.disabled = ko.computed(() => !this.canSaveDashboard() || !this._isDashboardDirty());
    }
    start() {
        this.dashboardControl.customTemplates.push(this._customTemplate);
        this._toolboxExtension.menuItems.push(this._menuItem);
    }
    stop() {
        this._toolboxExtension.menuItems.remove(this._menuItem);
        this.dashboardControl.customTemplates.remove(this._customTemplate);
    }
    get _toolboxExtension() {
        var extension = this.dashboardControl.findExtension('toolbox');
        if (!extension) {
            throw Error('Open Dashboard Extension requeries Toolbox Extension');
        }
        return extension;
    }
    get _undoEngineExtension() {
        return this.dashboardControl.findExtension('undo-redo');
    }
    performSaveDashboard(dashboardId, dashboardJson) {
        this.dashboardControl.notificationController.showState(_default_1.getLocalizationById('DashboardWebStringId.Notification.DashboardSaving'));
        return this.dashboardControl.remoteService.postToServer(this.dashboardControl._endpointCollection.dashboardUrls.DashboardAction + '/' + encodeURIComponent(dashboardId), dashboardJson)
            .done((result) => {
            this.dashboardControl.notificationController.showSuccess(_default_1.getLocalizationById('DashboardWebStringId.Notification.DashboardSaved'));
        }).fail((jqXHR) => {
            this.dashboardControl.notificationController.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.DashboardCanNotBeSaved'), jqXHR);
        });
    }
    ensureDashboardSaved(action) {
        this._ensureDashboardSaved().done(action);
    }
    _ensureDashboardSaved() {
        let def = _jquery_helpers_1.createJQueryDeferred();
        if (this._isDashboardDirty()) {
            this._confirmDialogViewModel
                .confirm(_default_1.getLocalizationById('DashboardWebStringId.Dialog.ConfirmSaving'), _default_1.getLocalizationById('DashboardWebStringId.SaveConfirmationDialogMessage') + '<br/>' + _default_1.getLocalizationById('DashboardWebStringId.SaveChangesDialogMessage'), _default_1.getLocalizationById('DashboardWebStringId.Dialog.Save'), _default_1.getLocalizationById('DashboardWebStringId.Dialog.DoNotSave'))
                .then(result => {
                if (result) {
                    this.saveDashboard()
                        .done(() => def.resolve());
                }
                else {
                    def.resolve();
                }
            }, () => def.reject());
        }
        else {
            def.resolve();
        }
        return def.promise();
    }
    saveDashboard() {
        if (this.canSaveDashboard()) {
            var dashboardContainer = this.dashboardControl.dashboardContainer();
            return this.performSaveDashboard(dashboardContainer.id, dashboardContainer.dashboard.getJSON())
                .done(() => this._undoEngineExtension && this._undoEngineExtension.isChanged(false));
        }
        else {
            throw Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.DashboardSavingIsNotAvailable'));
        }
    }
}
exports.SaveDashboardExtension = SaveDashboardExtension;
control_options_1.designerExtensions[name] = (dashboardControl, options) => new SaveDashboardExtension(dashboardControl);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 27612:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardTitleEditorExtension = void 0;
const ko = __webpack_require__(71032);
const control_options_1 = __webpack_require__(82560);
const _dashboard_title_model_1 = __webpack_require__(98448);
const _default_1 = __webpack_require__(65855);
const disposable_object_1 = __webpack_require__(99253);
const _base_metadata_1 = __webpack_require__(17916);
const _title_1 = __webpack_require__(20994);
const _dashboard_title_view_constants_1 = __webpack_require__(68899);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const toolbox_items_1 = __webpack_require__(29608);
var name = 'dashboard-title-editor';
var nameAlias = 'dashboardTitleEditor';
class DashboardTitleEditorExtension extends disposable_object_1.DisposableObject {
    constructor(dashboardControl) {
        super();
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._titlePreviewViewModel = ko.observable(null);
        this._titleSettingsViewModel = ko.observable(null);
        this._perDashboardSubscriptions = [];
        this._menuItem = new toolbox_items_1.DashboardMenuItem(this.name, 'DashboardStringId.Title', 220, 84);
        this._menuItem.template = 'dx-dashboard-form-title-settings';
        this._menuItem.data = {
            formCaption: _default_1.getLocalizationById('DashboardWebStringId.Preview'),
            titleSettings: this._titleSettingsViewModel,
            getTitleComponentArgs: $element => ({
                options: this._titlePreviewViewModel,
                height: ko.observable(_dashboard_title_view_constants_1.titleHeight),
                width: ko.observable($element.parentElement.innerWidth),
                encodeHtml: true
            })
        };
        this._menuItem.disabled = ko.computed(() => !dashboardControl.dashboard());
    }
    start() {
        this._updateTitleToolbar();
        this.toDispose(this.dashboardControl.dashboard.subscribe(() => this._updateTitleToolbar()));
        let toolbarExtension = this.dashboardControl.findExtension('toolbox');
        if (toolbarExtension) {
            toolbarExtension.menuItems.push(this._menuItem);
        }
    }
    stop() {
        let toolbarExtension = this.dashboardControl.findExtension('toolbox');
        if (toolbarExtension) {
            toolbarExtension.menuItems.remove(this._menuItem);
        }
        this.dispose();
    }
    dispose() {
        this._disposePerDashboardSubscriptions();
        super.dispose();
    }
    _disposePerDashboardSubscriptions() {
        this._perDashboardSubscriptions.forEach(disposable => disposable.dispose());
        this._perDashboardSubscriptions = [];
        if (this._titlePreviewViewModel()) {
            this._titleSettingsViewModel().unbindModel();
        }
        this._titlePreviewViewModel(null);
        this._titleSettingsViewModel(null);
    }
    _updateTitleToolbar() {
        this._disposePerDashboardSubscriptions();
        if (this.dashboardControl.dashboard()) {
            let titleModel = new _dashboard_title_model_1.DashboardTitleModel(undefined, this.dashboardControl.dashboard());
            this._titlePreviewViewModel(titleModel.toolbarOptions());
            this._titleSettingsViewModel(this._createTitleSettings(this.dashboardControl.dashboard().title));
            this._perDashboardSubscriptions.push(titleModel.toolbarOptions.subscribe(newOptions => {
                this._titlePreviewViewModel(newOptions);
            }));
        }
    }
    _createTitleSettings(titleModel) {
        const visibilityRules = {};
        visibilityRules[_title_1.titleImage64.propertyName] = () => titleModel.imageType() === 'embedded';
        visibilityRules[_base_metadata_1.url.propertyName] = () => titleModel.imageType() === 'linked';
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: titleModel,
            properties: [
                _title_1.titleText,
                _title_1.titleVisible,
                _title_1.titleAlignment,
                _title_1.includeMasterFilter,
                _title_1.titleImageType,
                Object.assign(Object.assign({}, _title_1.titleImage64), { formAdapterItem: _form_adapter_editors_1.filePickerEditor({ placeholderId: 'Image', accept: 'image/bmp, image/gif, image/x-ico, image/jpeg, image/png, image/tiff', type: 'img' }) }),
                _title_1.titleImageUrl
            ],
            visibilityFilterRules: visibilityRules,
        });
    }
}
exports.DashboardTitleEditorExtension = DashboardTitleEditorExtension;
control_options_1.designerExtensions[name] = (dashboardControl, options) => new DashboardTitleEditorExtension(dashboardControl);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 87588:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UndoRedoExtension = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const control_options_1 = __webpack_require__(82560);
const _interfaces_1 = __webpack_require__(60136);
const _default_1 = __webpack_require__(65855);
const _utils_1 = __webpack_require__(7590);
const disposable_object_1 = __webpack_require__(99253);
const _knockout_utils_1 = __webpack_require__(4437);
const _obsolete_helper_1 = __webpack_require__(64060);
const _undo_engine_helper_1 = __webpack_require__(2908);
const viewer_parts_1 = __webpack_require__(13674);
const _toolbar_extension_1 = __webpack_require__(25822);
const toolbox_items_1 = __webpack_require__(29608);
var name = 'undo-redo';
var nameAlias = 'undoRedo';
class UndoRedoExtension extends disposable_object_1.DisposableObject {
    constructor(dashboardControl) {
        super();
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._undoEngine = ko.observable();
        this._predefinedToolbarItems = [];
        this._defaultToolbarItems = [];
        this.isChanged = ko.computed({
            read: () => !!(this._undoEngine() && this._undoEngine().isDirty()),
            write: (value) => this._undoEngine() && this._undoEngine().isDirty(value)
        });
        _obsolete_helper_1.defineObsoleteProperty({
            target: this,
            memberName: 'undoEngine',
            oldMemberDisplayName: 'UndoRedoExtension.undoEngine',
            warmMessage: 'The undoEngine property is obsolete.',
            action: () => {
                return this._undoEngine;
            }
        });
    }
    reset() {
        if (this._undoEngine()) {
            this._undoEngine().reset();
        }
    }
    processKeyEvent(keyEventType, eventArgs) {
        if (keyEventType === 'keyup' && eventArgs.ctrlKey) {
            if (eventArgs.keyCode === _interfaces_1.KeyCodes.Z && this._undoEngine().undoEnabled()) {
                this._undoEngine().undo();
                return true;
            }
            else if (eventArgs.keyCode === _interfaces_1.KeyCodes.Y && this._undoEngine().redoEnabled()) {
                this._undoEngine().redo();
                return true;
            }
        }
        else if (keyEventType === 'keydown' && eventArgs.ctrlKey && [_interfaces_1.KeyCodes.Z, _interfaces_1.KeyCodes.Y].indexOf(eventArgs.keyCode) !== -1) {
            eventArgs.preventDefault();
            return true;
        }
        return false;
    }
    start() {
        this.toDispose(this.dashboardControl.dashboard.subscribe(prevDashboard => {
            this.reset();
        }, null, 'beforeChange'));
        this.toDispose(this.dashboardControl.dashboard.subscribe(newDashboard => {
            var undoEngine = new DashboardUndoEngine(newDashboard, null, 'getInfo');
            _undo_engine_helper_1.UndoEngineContainer.undoEngine = undoEngine;
            this._undoEngine(undoEngine);
        }));
        this._controlOptionChangedHandler = this._onControlOptionChanged.bind(this);
        this.dashboardControl.on('optionChanged', this._controlOptionChangedHandler);
        this._setShowConfirmationDialog(this.dashboardControl.showConfirmationOnBrowserClosing);
        let undoButton = this._createToolbarItem('undoButton', () => this.undo(), 'dx-dashboard-undo', _default_1.getLocalizationById('DashboardStringId.UndoText'), ko.pureComputed(() => !this.undoEnabled()));
        let redoButton = this._createToolbarItem('redoButton', () => this.redo(), 'dx-dashboard-redo', _default_1.getLocalizationById('DashboardStringId.RedoText'), ko.pureComputed(() => !this.redoEnabled()));
        let separator = Object.assign({ name: 'undoRedoSeparator', location: 'before' }, _toolbar_extension_1.createToolbarSeparator());
        this._predefinedToolbarItems = [undoButton, redoButton, separator];
        if (viewer_parts_1.LegacySettings.showUndoRedoButtonsInToolbox) {
            let toolboxExtension = this.dashboardControl.findExtension('toolbox');
            if (!!toolboxExtension) {
                let undoItem = new toolbox_items_1.DashboardToolbarItem('undo', () => this.undo(), 'dx-dashboard-undo', 'DashboardStringId.UndoText');
                undoItem.disabled = ko.pureComputed(() => !this.undoEnabled());
                let redoItem = new toolbox_items_1.DashboardToolbarItem('redo', () => this.redo(), 'dx-dashboard-redo', 'DashboardStringId.RedoText');
                redoItem.disabled = ko.pureComputed(() => !this.redoEnabled());
                this._toolboxToolbarGroup = new toolbox_items_1.DashboardToolbarGroup('undo-redo', 'Undo/Redo', 50, undoItem, redoItem);
                toolboxExtension.toolbarGroups.push(this._toolboxToolbarGroup);
            }
        }
        else {
            this._defaultToolbarItems = this._predefinedToolbarItems.map((item, index) => ({ name: item.name, index: UndoRedoExtension._toolbarItemsIndex + index }));
        }
        this._addToolbarItems(this.dashboardControl.findExtension('designerToolbar'));
    }
    _createToolbarItem(name, action, icon, hint, disabled) {
        let subscription;
        return {
            name: name,
            location: 'before',
            widget: 'dxButton',
            cssClass: `dx-dashboard-undo-redo-button ${icon}`,
            options: {
                hint: hint,
                stylingMode: 'text',
                onClick: action,
                focusStateEnabled: false,
                activeStateEnabled: false,
                disabled: disabled(),
                template: (args) => _utils_1.createSvgIconElement(icon),
                onInitialized: (args) => {
                    subscription = _knockout_utils_1.subscribeAndPerform(disabled, () => {
                        args.component && args.component.option('disabled', disabled());
                    });
                },
                onDisposed: () => {
                    subscription.dispose();
                }
            }
        };
    }
    _addToolbarItems(toolbar) {
        if (toolbar) {
            toolbar._unregisterDefaultItems(this._defaultToolbarItems);
            toolbar._unregisterPredefinedItems(this._predefinedToolbarItems);
            toolbar._registerDefaultItems(this._defaultToolbarItems);
            toolbar._registerPredefinedItems(this._predefinedToolbarItems);
            toolbar._update();
        }
    }
    _removeToolbarItems(toolbar) {
        if (toolbar) {
            toolbar._unregisterDefaultItems(this._defaultToolbarItems);
            toolbar._unregisterPredefinedItems(this._predefinedToolbarItems);
            toolbar._update();
        }
    }
    undo() {
        this._undoEngine() && this._undoEngine().undo();
    }
    redo() {
        this._undoEngine() && this._undoEngine().redo();
    }
    undoEnabled() {
        return !!(this._undoEngine() && this._undoEngine().undoEnabled());
    }
    redoEnabled() {
        return !!(this._undoEngine() && this._undoEngine().redoEnabled());
    }
    stop() {
        this._removeToolbarItems(this.dashboardControl.findExtension('designerToolbar'));
        let toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension && this._toolboxToolbarGroup) {
            toolboxExtension.toolbarGroups.remove(this._toolboxToolbarGroup);
        }
        this.reset();
        if (this._controlOptionChangedHandler)
            this.dashboardControl.off('optionChanged', this._controlOptionChangedHandler);
        this._setShowConfirmationDialog(false);
    }
    _onControlOptionChanged(args) {
        switch (args.name) {
            case 'showConfirmationOnBrowserClosing':
                this._setShowConfirmationDialog(args.value);
                break;
        }
    }
    _setShowConfirmationDialog(value) {
        if (value) {
            this._beforeWindowUnloadHandler = this._onBeforeWindowUnload.bind(this);
            window.onbeforeunload = this._beforeWindowUnloadHandler;
        }
        else {
            if (this._beforeWindowUnloadHandler)
                window.onbeforeunload = null;
            this._beforeWindowUnloadHandler = null;
        }
    }
    _onBeforeWindowUnload(event) {
        if (this.dashboardControl.isDesignMode() && this.isChanged()) {
            event.preventDefault();
            return event.returnValue = _default_1.getLocalizationById('DashboardWebStringId.LayoutHasBeenChangedDialogMessage') + ' ' + _default_1.getLocalizationById('DashboardWebStringId.SaveConfirmationDialogMessage');
        }
    }
}
exports.UndoRedoExtension = UndoRedoExtension;
UndoRedoExtension._toolbarItemsIndex = 0;
class DashboardUndoEngine extends analytics_utils_1.UndoEngine {
    constructor(target, ignoredProperties, getInfoMethodName) {
        super(target, ignoredProperties, getInfoMethodName);
    }
    validatePropertyName(target, propertyName) {
        return propertyName;
    }
}
control_options_1.designerExtensions[name] = (dashboardControl, options) => new UndoRedoExtension(dashboardControl);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 87524:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createItemFilterOptions = void 0;
const analytics_widgets_1 = __webpack_require__(30010);
const ko = __webpack_require__(71032);
const _parameters_helper_1 = __webpack_require__(57914);
const _dx_designer_integration_1 = __webpack_require__(28768);
var createItemFilterOptions = (expression, item, _dataSourceBrowser, title) => {
    return ko.computed(() => {
        var options = new analytics_widgets_1.FilterStringOptions(expression, undefined, undefined, title);
        options.popupContainer = '.dx-dashboard-widget-container';
        options.helper.aceTheme = _dx_designer_integration_1.getAceTheme();
        if (_dataSourceBrowser && _dataSourceBrowser.parameters) {
            options.helper.parameters(_dataSourceBrowser.parameters().map(parameter => {
                var shortTypeName = parameter.type().split(',')[0];
                return { displayName: parameter.name(), name: parameter.name(), specifics: _parameters_helper_1.ParameterHelper.typeValues.filter(typeDescription => typeDescription.value === shortTypeName)[0].specifics || 'string' };
            }));
            options.helper.canChoiceParameters = true;
        }
        if (item) {
            options['item'] = item;
        }
        return options;
    });
};
exports.createItemFilterOptions = createItemFilterOptions;


/***/ }),

/***/ 45834:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ItemFilterDisplayNameProvider = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const _display_name_provider_1 = __webpack_require__(8464);
class ItemFilterDisplayNameProvider {
    constructor(dashboardItem, dataSourceBrowser) {
        this.dashboardItem = dashboardItem;
        this.dataSourceBrowser = dataSourceBrowser;
    }
    _mapDataItemProperties(getSourceProperty, getTargetProperty, value) {
        let dataItem = this.dashboardItem.dataItems().filter(di => getSourceProperty(di) === value)[0];
        let result = '';
        if (dataItem) {
            result = getTargetProperty(dataItem);
        }
        else {
            result = value;
        }
        return _jquery_helpers_1.createJQueryDeferred().resolve(result).promise();
    }
    getDisplayNameByPath(path, dataMember) {
        return this._mapDataItemProperties((dataItem) => dataItem.uniqueName(), (dataItem) => _display_name_provider_1.getDataItemDisplayName(this.dataSourceBrowser, this.dashboardItem, dataItem), dataMember);
    }
    getRealName(path, displayDataMember) {
        return this._mapDataItemProperties((dataItem) => _display_name_provider_1.getDataItemDisplayName(this.dataSourceBrowser, this.dashboardItem, dataItem), (dataItem) => dataItem.uniqueName(), displayDataMember);
    }
}
exports.ItemFilterDisplayNameProvider = ItemFilterDisplayNameProvider;


/***/ }),

/***/ 14716:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ItemFilterItemsProvider = exports.isCategoricalDateTime = exports.getRealDimensionType = void 0;
const date_1 = __webpack_require__(41561);
const _data_source_browser_1 = __webpack_require__(9970);
const _formatter_1 = __webpack_require__(93687);
const _jquery_helpers_1 = __webpack_require__(59384);
const data_item_1 = __webpack_require__(44650);
const dimension_1 = __webpack_require__(48336);
const _data_field_1 = __webpack_require__(68951);
const _display_name_provider_1 = __webpack_require__(8464);
var getRealDimensionType = (dimension, dataField) => {
    return exports.isCategoricalDateTime(dimension, dataField) ? 'Integer' : dataField.fieldType();
};
exports.getRealDimensionType = getRealDimensionType;
var isCategoricalDateTime = (dimension, dataField) => {
    return dataField.fieldType() === 'DateTime' && ['Year', 'Quarter', 'Month', 'Day', 'Hour', 'Minute', 'Second',
        'DayOfYear', 'DayOfWeek', 'WeekOfYear', 'WeekOfMonth'].indexOf(dimension.dateTimeGroupInterval() || 'Year') !== -1;
};
exports.isCategoricalDateTime = isCategoricalDateTime;
class ItemFilterItemsProvider {
    constructor(dataItemValuesProvider, dataFieldProvider, parameters, dataDashboardItem, filterPredicate = () => true) {
        this.dataItemValuesProvider = dataItemValuesProvider;
        this.dataFieldProvider = dataFieldProvider;
        this.parameters = parameters;
        this.dataDashboardItem = dataDashboardItem;
        this.filterPredicate = filterPredicate;
    }
    static formatValue(value, dataItem, fieldTypeName) {
        var getFormatViewModel = (fieldTypeName) => {
            var fieldType = data_item_1.DataItem.typesMap[fieldTypeName];
            switch (fieldType) {
                case data_item_1.DataItem.typesMap.DateTime:
                    return dataItem.dateTimeFormat._getViewModel(dataItem instanceof dimension_1.Dimension ? dataItem.dateTimeGroupInterval() : undefined);
                case data_item_1.DataItem.typesMap.Decimal:
                case data_item_1.DataItem.typesMap.Double:
                case data_item_1.DataItem.typesMap.Integer:
                    return dataItem.numericFormat._getViewModel();
                default:
                    return undefined;
            }
        };
        var formatViewModel = getFormatViewModel(fieldTypeName);
        return !!formatViewModel ? _formatter_1.format(value, formatViewModel) : value;
    }
    getItems(pathRequest) {
        var deferred = _jquery_helpers_1.createJQueryDeferred();
        if (pathRequest.fullPath === 'Parameters') {
            deferred.resolve(this.parameters()
                .map(parameter => {
                return {
                    displayName: parameter.name(),
                    name: parameter.name()
                };
            }));
        }
        else {
            this._getDashboardItemDataFields().done(dataFields => {
                deferred.resolve(this.dataDashboardItem
                    ._uniqueDataItems
                    .filter(this.filterPredicate)
                    .map(dataItem => {
                    let dataField = dataFields.filter(dataField => dataField.dataMember() === dataItem.dataMember())[0];
                    let itemType = 'string';
                    if (dataField) {
                        itemType = dataItem instanceof dimension_1.Dimension ? exports.getRealDimensionType(dataItem, dataField) : dataField.fieldType();
                    }
                    return {
                        displayName: _display_name_provider_1.getDataItemDisplayName(this.dataFieldProvider, this.dataDashboardItem, dataItem),
                        name: dataItem.uniqueName(),
                        specifics: data_item_1.DataItem.typesMap[itemType] || 'string'
                    };
                }));
            });
        }
        return deferred.promise();
    }
    getValues(pathRequest) {
        var dataItem = this.dataDashboardItem._dimensions.filter(di => di.uniqueName() === pathRequest.path)[0];
        var def = _jquery_helpers_1.createJQueryDeferred();
        if (!dataItem) {
            return def.resolve([]).promise();
        }
        this._getDashboardItemDataFields()
            .done(dataFields => {
            var dataField = dataFields.filter(dataField => dataField.dataMember() === dataItem.dataMember())[0];
            if (!dataField) {
                return def.resolve([]).promise();
            }
            if (dataItem.dateTimeGroupInterval() === 'DayOfWeek' && dataField.fieldType() === 'DateTime') {
                def.resolve([0, 1, 2, 3, 4, 5, 6].map(index => ({
                    value: index,
                    display: date_1.default.getDayNames(undefined)[index]
                })));
            }
            else if (_data_field_1.IsNumeric(dataField.fieldType()) || _data_field_1.IsTextual(dataField.fieldType()) || exports.isCategoricalDateTime(dataItem, dataField) ||
                dataItem.dateTimeGroupInterval() === 'WeekYear') {
                this.dataItemValuesProvider.getDimensionUniqueValues(this.dataDashboardItem.dataSource(), this.dataDashboardItem.dataMember(), dataItem)
                    .done(values => {
                    def.resolve((values || [])
                        .filter(value => value !== null)
                        .map(value => {
                        if (dataField.fieldType() === 'Text') {
                            return value;
                        }
                        else {
                            return {
                                value: value,
                                display: ItemFilterItemsProvider.formatValue(value, dataItem, dataField.fieldType())
                            };
                        }
                    }));
                });
            }
            else {
                return def.resolve([]);
            }
        });
        return def.promise();
    }
    _getDashboardItemDataFields() {
        let fieldsNames = this.dataDashboardItem
            ._uniqueDataItems
            .filter(this.filterPredicate)
            .map(dataItem => dataItem.dataMember());
        return _data_source_browser_1.getDataFields(fieldsNames, this.dataDashboardItem.dataSource(), this.dataDashboardItem.dataMember(), this.dataFieldProvider);
    }
}
exports.ItemFilterItemsProvider = ItemFilterItemsProvider;


/***/ }),

/***/ 22984:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FilterFieldSelector = void 0;
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const model_1 = __webpack_require__(14198);
const dimension_1 = __webpack_require__(48336);
const _display_name_provider_1 = __webpack_require__(8464);
class FilterFieldWrapper {
    constructor(dimension, getDisplayName) {
        this.getDisplayName = getDisplayName;
        this.add = (d) => this._dimensions.push(d);
        this.dataMember = () => this._dimensions[0].dataMember();
        this.displayName = () => this._dimensions.map(d => '[' + this.getDisplayName(d) + ']').join(' - ');
        this.groupIndex = () => this._dimensions[0].groupIndex();
        this.hasItems = (path) => (this.isGroup() && !!path) ? path.length !== this._dimensions.length : this.isGroup();
        this.isGroup = () => this._dimensions.length > 1;
        this.reorder = (dataFields) => {
            if (!dataFields)
                return;
            let newDimensions = [];
            dataFields.forEach(dataField => {
                let dimension = this._dimensions.filter(d => d.dataMember() == dataField.dataMember())[0];
                if (!!dimension) {
                    newDimensions.push(dimension);
                }
            });
            this._dimensions = newDimensions;
        };
        this._dimensions = [dimension];
    }
}
class FilterFieldSelector extends model_1.DisposableObject {
    constructor(dashboardItem, dataSourceBrowser, selectedFieldChanged) {
        super();
        this.dashboardItem = dashboardItem;
        this.dataSourceBrowser = dataSourceBrowser;
        this._selectedField = ko.observable();
        this._fields = ko.observableArray();
        this.template = {
            name: 'dx-simple-filter-data-field-selector',
            data: {
                selectedField: this._selectedField,
                fields: this._fields
            }
        };
        this.toDispose(this._selectedField.subscribe(field => {
            selectedFieldChanged(field);
        }));
    }
    get selectedField() {
        return this._selectedField();
    }
    init() {
        this._loadDataFields().done((fields) => {
            this._selectedField(fields[0]);
            this._fields(fields);
        });
    }
    clear() {
        this._selectedField(null);
    }
    _loadDataFields() {
        let deferred = _jquery_helpers_1.createJQueryDeferred();
        let dimensions = this.dashboardItem._uniqueDataItems.filter(item => item instanceof dimension_1.Dimension);
        let result = this._generateFields(dimensions);
        let findPromises = dimensions.map(dimension => this.dataSourceBrowser.findDataField(this.dashboardItem.dataSource(), this.dashboardItem.dataMember(), dimension.dataMember()));
        _jquery_helpers_1.jqueryWhenArray(findPromises).done((...dataFields) => {
            result.forEach(wrapper => {
                if (wrapper.groupIndex() !== undefined && wrapper.groupIndex() !== null) {
                    let groupedFields = dataFields.filter(dataField => !!dataField && dataField.groupIndex() == wrapper.groupIndex());
                    wrapper.reorder(groupedFields && groupedFields.length > 0 && groupedFields[0].groupDataItems);
                }
            });
            deferred.resolve(result);
        });
        return deferred.promise();
    }
    _generateFields(dimensions) {
        let fields = [];
        return dimensions.reduce((acc, dimension) => {
            if (dimension.groupIndex() !== undefined && dimension.groupIndex() !== null) {
                var groupField = acc.filter(wrapper => wrapper.groupIndex() === dimension.groupIndex())[0];
                if (groupField) {
                    groupField.add(dimension);
                    return acc;
                }
            }
            acc.push(new FilterFieldWrapper(dimension, (dataItem) => _display_name_provider_1.getDataItemDisplayName(this.dataSourceBrowser, this.dashboardItem, dataItem)));
            return acc;
        }, []);
    }
}
exports.FilterFieldSelector = FilterFieldSelector;


/***/ }),

/***/ 32606:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SimpleFilterExpressionEditorViewModel = void 0;
const ko = __webpack_require__(71032);
const _simple_filter_editor_1 = __webpack_require__(85981);
class SimpleFilterExpressionEditorViewModel {
    constructor(options) {
        this.options = options;
        this.editorTemplate = 'dx-simple-filter-popup';
        this.editor = new _simple_filter_editor_1.SimpleFilterEditor(options.dashboardItem, options.dataSourceBrowser);
        this.criteriaString = ko.computed(() => options.dashboardItem.filterString());
    }
    edit() {
        this.editor.popupVisible(true);
    }
    remove() {
        this.options.dashboardItem.filterString(null);
    }
}
exports.SimpleFilterExpressionEditorViewModel = SimpleFilterExpressionEditorViewModel;


/***/ }),

/***/ 85981:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SimpleFilterEditor = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const disposable_object_1 = __webpack_require__(99253);
const _filter_field_wrapper_1 = __webpack_require__(22984);
const _simple_filter_tree_list_1 = __webpack_require__(83517);
class SimpleFilterEditor extends disposable_object_1.DisposableObject {
    constructor(dashboardItem, dataSourceBrowser) {
        super();
        this.dashboardItem = dashboardItem;
        this.dataSourceBrowser = dataSourceBrowser;
        this.popupVisible = ko.observable(false);
        this._filterTreeList = new _simple_filter_tree_list_1.SimpleFilterTreeList(dashboardItem, dataSourceBrowser);
        this._fieldSelector = new _filter_field_wrapper_1.FilterFieldSelector(dashboardItem, dataSourceBrowser, (field) => {
            this._filterTreeList.reload(field);
        });
        this._fieldSelector.init();
        this.viewModel = {
            getPopupOptions: (container) => {
                return {
                    target: container,
                    container: container,
                    position: {
                        my: 'center',
                        at: 'center',
                        boundary: container
                    },
                    height: '50%',
                    width: '50%',
                    minHeight: '250px',
                    minWidth: '250px',
                    animation: {},
                    focusStateEnabled: true,
                    resizeEnabled: true,
                    hideOnOutsideClick: false,
                    toolbarItems: [
                        { toolbar: 'bottom',
                            location: 'after',
                            widget: 'dxButton',
                            options: {
                                text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.Save'),
                                onClick: () => this._applyHandler()
                            }
                        },
                        { toolbar: 'bottom',
                            location: 'after',
                            widget: 'dxButton',
                            options: {
                                text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.Cancel'),
                                onClick: () => { this._onPopupHidden(); }
                            }
                        }
                    ],
                    onHidden: () => this._onPopupHidden(),
                    onShown: () => this._onPopupShown(),
                    visible: this.popupVisible,
                    shadingColor: 'rgba(0, 0, 0, 0.2)',
                    showTitle: true,
                    title: _default_1.getLocalizationById('DataAccessUIStringId.FiltersView'),
                    wrapperAttr: {
                        class: 'dx-filter-popup dx-dashboard-typography dx-dashboard-simple-filter'
                    }
                };
            },
            fieldSelector: this._fieldSelector,
            filterTreeList: this._filterTreeList
        };
    }
    _onPopupHidden() {
        this.popupVisible(false);
        this._filterTreeList.hide();
    }
    _onPopupShown() {
        this._filterTreeList.show(this._fieldSelector.selectedField);
    }
    _applyHandler() {
        if (!!this._fieldSelector.selectedField) {
            this.dataSourceBrowser.getDimensionFilterString(this.dashboardItem, this._fieldSelector.selectedField.dataMember(), this._filterTreeList.getTreeListItems().map(i => i.data)).done(filterString => {
                this.dashboardItem.filterString(filterString);
            });
        }
        this.popupVisible(false);
    }
    dispose() {
        super.dispose();
        this._fieldSelector.dispose();
        this._filterTreeList.dispose();
    }
}
exports.SimpleFilterEditor = SimpleFilterEditor;


/***/ }),

/***/ 83517:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SimpleFilterTreeList = void 0;
const array_store_1 = __webpack_require__(79322);
const custom_store_1 = __webpack_require__(5773);
const check_box_1 = __webpack_require__(21523);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const model_1 = __webpack_require__(14198);
const treeRootValue = '0';
class SimpleFilterTreeList extends model_1.DisposableObject {
    constructor(dashboardItem, dataSourceBrowser) {
        super();
        this.dashboardItem = dashboardItem;
        this.dataSourceBrowser = dataSourceBrowser;
        this._dataCache = [];
        this.template = {
            name: 'dx-simple-filter-tree-list',
            data: {
                editorOptions: ko.observable(undefined),
                visible: ko.observable(false)
            }
        };
    }
    reload(field) {
        this._dataCache = [];
        this.template.data.editorOptions(this._getTreeListOptions(this._getStore(field), field && !field.isGroup()));
    }
    show(field) {
        this.template.data.visible(true);
        this.reload(field);
    }
    hide() {
        this.template.data.visible(false);
        this.template.data.editorOptions(undefined);
    }
    getTreeListItems() {
        return this._dataCache;
    }
    dispose() {
        this.dispose();
        this._dataCache = [];
    }
    _getBranchIndexes(filterItems, initialParentId) {
        let branchIndexes = [];
        let parentId = initialParentId;
        while (parentId !== treeRootValue) {
            var index = _utils_1.findIndex(filterItems, filterItem => filterItem.id == parentId);
            branchIndexes.push(index);
            parentId = filterItems[index].parentId;
        }
        return branchIndexes.reverse();
    }
    _getStore(selectedField) {
        return new custom_store_1.default({
            load: (options) => {
                if (!selectedField) {
                    return undefined;
                }
                let result = _jquery_helpers_1.createJQueryDeferred();
                if (options.filter) {
                    new array_store_1.default({ data: this._dataCache })
                        .load({ filter: options.filter })
                        .then((data) => {
                        if (data && data.length) {
                            result.resolve(data);
                        }
                        else if (options.filter[0] === 'parentId') {
                            let parentId = (options.filter && options.filter[0] === 'parentId') ? options.filter[2] : treeRootValue;
                            let pathComponents = !!parentId ? parentId.split('.') : undefined;
                            let filterItemsState = this.getTreeListItems();
                            let branch = this._getBranchIndexes(filterItemsState, parentId);
                            this.dataSourceBrowser.getDimensionFilterItems(this.dashboardItem, selectedField.dataMember(), filterItemsState.map(i => i.data), branch).done(expandedItems => {
                                let items = expandedItems.map((item, index) => {
                                    return {
                                        id: parentId + '.' + index,
                                        parentId: parentId,
                                        displayName: item.IsBlank ? '(Blank)' : item.Text,
                                        hasItems: selectedField.hasItems(pathComponents),
                                        data: item
                                    };
                                });
                                var parentIndex = _utils_1.findIndex(this._dataCache, item => item.id === parentId);
                                this._dataCache.splice(parentIndex + 1, 0, ...items);
                                result.resolve(items);
                            });
                        }
                        else {
                            result.resolve([]);
                        }
                    });
                }
                return _jquery_helpers_1.$promiseAdapter(result.promise());
            }
        });
    }
    _getTreeListOptions(store, searchEnabled) {
        return {
            dataSource: { store: store },
            noDataText: '',
            encodeNoDataText: true,
            rootValue: treeRootValue,
            dataStructure: 'plain',
            keyExpr: 'id',
            parentIdExpr: 'parentId',
            hasItemsExpr: 'hasItems',
            columns: [{
                    caption: _default_1.getLocalizationById('DashboardStringId.FilterElementShowAllItem'),
                    dataField: 'displayName',
                }],
            selection: {
                allowSelectAll: true,
                mode: 'multiple',
                recursive: true
            },
            scrolling: {
                mode: 'virtual'
            },
            searchPanel: {
                placeholder: _default_1.getLocalizationById('DashboardStringId.SearchNullValuePrompt'),
                visible: searchEnabled,
                width: '100%',
                searchVisibleColumnsOnly: true
            },
            remoteOperations: {
                filtering: true
            },
            showRowLines: false,
            onEditorPrepared: (e) => {
                _jquery_helpers_1.$unwrap(e.editorElement).classList.remove('dx-treelist-checkbox-size');
            },
            onSelectionChanged: (e) => {
                e.component.forEachNode(node => {
                    node.data.data.IsChecked = e.component.isRowSelected(node.key);
                });
            },
            onCellPrepared: (e) => {
                if (e.rowType === 'data' && (e.data.data.IsChecked === null || e.data.data.IsChecked === undefined)) {
                    let editor = check_box_1.default.getInstance(_jquery_helpers_1.$unwrap(e.cellElement).querySelector('.dx-select-checkbox'));
                    if (editor) {
                        editor.option('value', undefined);
                    }
                }
            },
            onNodesInitialized: (e) => {
                let selectedKeys = [];
                e.component.forEachNode(node => {
                    if (node.data.data.IsChecked) {
                        selectedKeys.push(node.key);
                    }
                });
                e.component.selectRows(selectedKeys, false);
            },
            onInitialized: (e) => {
                this.treeList = e.component;
            },
        };
    }
}
exports.SimpleFilterTreeList = SimpleFilterTreeList;


/***/ }),

/***/ 69949:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.conditionTypeEditor = exports.styleSettingsEditor = exports.ruleRangesEditor = exports.nestedPropertyGridEditor = exports.filePickerEditor = exports.simpleFilterEditor = exports.filterEditor = exports.calculationExpressionEditor = exports.flowModeSettingsEditor = exports.nullableNumberBoxEditor = exports.iconTypeEditor = exports.currencyEditor = exports.flagsEnumTagBoxEditor = exports.flagsEnumListEditor = exports.actionButtons = exports.textPreviewEditor = exports.inlineEditCollectionEditor = exports.collectionEditor = exports.editableListEditor = exports.listEditor = exports.buttonGroupEditor = exports.observableSelectBoxEditor = exports.dynamicSelectBoxEditor = exports.selectBoxEditor = exports.guidEditor = exports.textBoxEditor = exports.checkBoxEditor = exports.numberBoxEditor = exports.dateBoxEditor = exports.getFieldValue = void 0;
const analytics_widgets_internal_1 = __webpack_require__(86092);
const data_source_1 = __webpack_require__(47545);
const list_1 = __webpack_require__(13052);
const tag_box_1 = __webpack_require__(8520);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _common_1 = __webpack_require__(29009);
const _jquery_helpers_1 = __webpack_require__(59384);
const _localization_ids_1 = __webpack_require__(31724);
const _parameters_helper_1 = __webpack_require__(57914);
const _expression_editor_1 = __webpack_require__(76643);
const _condition_type_editor_1 = __webpack_require__(17355);
const _rule_ranges_editor_1 = __webpack_require__(7110);
const _style_settings_editor_1 = __webpack_require__(78199);
const _currency_selector_1 = __webpack_require__(256);
const _filter_expression_editor_1 = __webpack_require__(71940);
const _simple_filter_editor_view_model_1 = __webpack_require__(32606);
const _container_type_selector_1 = __webpack_require__(62509);
const form_item_templates_1 = __webpack_require__(9978);
const _collection_editor_viewmodel_1 = __webpack_require__(66072);
const _editable_list_editor_viewmodel_1 = __webpack_require__(91675);
const _inline_edit_collection_editor_viewmodel_1 = __webpack_require__(95145);
function getFieldValue(args) {
    return ko.unwrap(args.component.option('formData')[args.dataField]);
}
exports.getFieldValue = getFieldValue;
function localizeValues(v) {
    return v.map(v => ({ value: v.value, displayValue: _default_1.tryLocalize(v.displayValueId) }));
}
const dateBoxEditor = () => ({
    editorType: 'dxDateBox',
    editorOptions: {
        closeOnValueChange: true,
        showClearButton: true,
        type: 'datetime',
        applyButtonText: _default_1.getLocalizationById(_localization_ids_1.localizationId.buttonNames.ButtonOK),
        cancelButtonText: _default_1.getLocalizationById(_localization_ids_1.localizationId.buttonNames.ButtonCancel),
        todayButtonText: _default_1.getLocalizationById(_localization_ids_1.localizationId.labelName.ParametersFormCalendarTodayButton)
    }
});
exports.dateBoxEditor = dateBoxEditor;
const numberBoxEditor = (options = {}) => ({
    editorType: 'dxNumberBox',
    editorOptions: Object.assign(Object.assign({}, options), { showSpinButtons: true })
});
exports.numberBoxEditor = numberBoxEditor;
const checkBoxEditor = (args) => {
    var text = args && args.text || null;
    return {
        editorType: 'dxCheckBox',
        label: { visible: !text },
        editorOptions: {
            elementAttr: {
                class: 'dx-dashboard-check-box'
            },
            text: text
        }
    };
};
exports.checkBoxEditor = checkBoxEditor;
const textBoxEditor = () => ({ editorType: 'dxTextBox' });
exports.textBoxEditor = textBoxEditor;
const guidEditor = () => ({
    editorType: 'dxTextBox',
    validationRules: [
        {
            type: 'custom',
            validationCallback: (options) => { return _parameters_helper_1.validateGuid(options.value); },
            message: _default_1.getLocalizationById('AnalyticsCoreStringId.GuidIsRequired_Error')
        }
    ]
});
exports.guidEditor = guidEditor;
const selectBoxEditor = values => context => {
    return {
        editorType: 'dxSelectBox',
        editorOptions: {
            items: localizeValues(values),
            valueExpr: 'value',
            displayExpr: 'displayValue',
            displayCustomValue: true,
            dropDownOptions: { container: context.widgetContainer }
        }
    };
};
exports.selectBoxEditor = selectBoxEditor;
function dynamicSelectBoxEditor(options) {
    return observableSelectBoxEditor(Object.assign(Object.assign({}, options), { observables: { values: options.values }, load: (args) => localizeValues(args.values) }));
}
exports.dynamicSelectBoxEditor = dynamicSelectBoxEditor;
function observableSelectBoxEditor(options) {
    return context => {
        let dataSource = new data_source_1.default({
            load: () => options.load(Object.keys(options.observables).reduce((acc, key) => { acc[key] = options.observables[key](); return acc; }, {})),
            key: 'value',
            loadMode: 'raw'
        });
        const dynamicOptions = options.additionalOptions && options.additionalOptions() || {};
        return {
            editorType: 'dxSelectBox',
            editorOptions: Object.assign({ dataSource: dataSource, valueExpr: 'value', displayExpr: 'displayValue', displayCustomValue: true, dropDownOptions: { container: context.widgetContainer }, onInitialized: e => {
                    const disposables = e.component.__DX_DASHBOARD_DISPOSABLES = (e.component.__DX_DASHBOARD_DISPOSABLES || []);
                    Object.keys(options.observables).map(obsName => options.observables[obsName].subscribe(newValue => {
                        dataSource.reload();
                    })).forEach(d => disposables.push(d));
                }, onDisposing: e => {
                    (e.component.__DX_DASHBOARD_DISPOSABLES || []).forEach(d => d && d.dispose());
                    e.component.__DX_DASHBOARD_DISPOSABLES = [];
                } }, dynamicOptions),
            comparableEditorOptions: options.comparableEditorOptions
        };
    };
}
exports.observableSelectBoxEditor = observableSelectBoxEditor;
const buttonGroupEditor = values => ({
    template: form_item_templates_1.FormItemTemplates.buttonGroup,
    editorOptions: {
        keyExpr: 'value',
        items: values.map((val) => ({ value: val.value, text: _default_1.getLocalizationById(val.displayValueId) })),
    }
});
exports.buttonGroupEditor = buttonGroupEditor;
const listEditor = (values) => ({
    template: args => getListTemplate(args, values)
});
exports.listEditor = listEditor;
function getListTemplate(args, values) {
    var div = document.createElement('div');
    var initialValue = getFieldValue(args);
    var options = {
        dataSource: values,
        selectionMode: 'single',
        disabled: args.editorOptions && args.editorOptions.disabled || undefined,
        selectedItems: values.filter(value => { return value.value === initialValue; }),
        onItemClick: (e) => { args.component.updateData(args.dataField, e.itemData.value); },
        itemTemplate: (itemData) => {
            var span = document.createElement('span');
            span.innerText = _default_1.getLocalizationById(itemData.displayValueId);
            return span;
        }
    };
    new list_1.default(div, options);
    return div;
}
const editableListEditor = options => context => {
    return {
        editorOptions: options,
        template: args => editableListEditorTemplate(args, context, options)
    };
};
exports.editableListEditor = editableListEditor;
const editableListEditorTemplate = (args, context, options) => {
    let viewModel = new _editable_list_editor_viewmodel_1.EditableListEditorViewModel(options, args.component.option('formData')[args.dataField]);
    const div = document.createElement('div');
    ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-collection-editor', data: viewModel } }, context.bindingContext);
    return div;
};
const collectionEditor = options => context => {
    return {
        editorOptions: options,
        template: (args) => collectionEditorTemplate(args, context, options)
    };
};
exports.collectionEditor = collectionEditor;
const collectionEditorTemplate = (args, context, options) => {
    let viewModel = new _collection_editor_viewmodel_1.CollectionEditorViewModel(options, args.component.option('formData')[args.dataField]);
    const div = document.createElement('div');
    ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-collection-editor', data: viewModel } }, context.bindingContext);
    return div;
};
const inlineEditCollectionEditor = options => context => ({
    editorOptions: options,
    template: (args, elt) => inlineEditCollectionEditorTemplate(args, _jquery_helpers_1.$unwrap(elt), context, options)
});
exports.inlineEditCollectionEditor = inlineEditCollectionEditor;
const inlineEditCollectionEditorTemplate = (args, elt, context, options) => {
    const viewModel = new _inline_edit_collection_editor_viewmodel_1.InlineEditCollectionEditorViewModel(options, args.component.option('formData')[args.dataField]);
    ko.applyBindingsToNode(elt, { template: { name: 'dx-dashboard-editable-collection-editor', data: viewModel } }, context.bindingContext);
};
const textPreviewEditor = options => context => {
    return {
        template: args => {
            const field = args.component.option('formData')[args.dataField];
            const div = document.createElement('div');
            div.classList.add('dx-dashboard-text-preview');
            ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-text-preview', data: options.target } }, context.bindingContext);
            return div;
        }
    };
};
exports.textPreviewEditor = textPreviewEditor;
const actionButtons = (options) => context => {
    return {
        template: args => {
            const div = document.createElement('div');
            ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-action-buttons', data: { buttons: options } } }, context.bindingContext);
            return div;
        }
    };
};
exports.actionButtons = actionButtons;
const flagsEnumListEditor = options => {
    return {
        template: args => {
            const div = document.createElement('div');
            div.classList.add('dx-dashboard-point-label-content-type-selector');
            new list_1.default(div, Object.assign({ showSelectionControls: true, selectionMode: 'multiple', keyExpr: 'value', onInitialized: function (e) {
                    e.component.option('selectedItemKeys', _common_1.getFlagsEnumTypeValues(getFieldValue(args), options.enumDeclaration, 'value'));
                } }, getFlagsEnumWidgetCommonOptions(args, options.values)));
            return div;
        }
    };
};
exports.flagsEnumListEditor = flagsEnumListEditor;
const flagsEnumTagBoxEditor = options => context => {
    return {
        template: args => {
            const div = document.createElement('div');
            div.classList.add('dx-dashboard-enum-flags-date-type-selector');
            new tag_box_1.default(div, Object.assign(Object.assign({ placeholder: _default_1.getLocalizationById('DashboardWebStringId.ConditionalFormatting.DatesOccurringNone'), selectAllMode: 'allPages', showSelectionControls: true, showDropDownButton: true, multiline: false, searchEnabled: true, valueExpr: 'value', onInitialized: function (e) {
                    e.component.option('value', _common_1.getFlagsEnumTypeValues(getFieldValue(args), options.enumDeclaration, 'value'));
                } }, getFlagsEnumWidgetCommonOptions(args, options.values)), {
                selectAllText: _default_1.getLocalizationById('DashboardStringId.FilterElementShowAllItem'),
                pageLoadMode: 'scrollBottom',
                dropDownOptions: { container: context.widgetContainer }
            }));
            return div;
        }
    };
};
exports.flagsEnumTagBoxEditor = flagsEnumTagBoxEditor;
function getFlagsEnumWidgetCommonOptions(args, values) {
    return {
        dataSource: values,
        displayExpr: e => e && _default_1.getLocalizationById(e.displayValueId),
        onSelectionChanged: function (e) {
            var val = getFieldValue(args);
            e.addedItems.forEach(function (added) {
                val = val | added.value;
            });
            e.removedItems.forEach(function (removed) {
                val = val & ~removed.value;
            });
            args.component.updateData(args.dataField, val);
        },
    };
}
const currencyEditor = () => (context) => ({
    template: args => currencyEditorTemplate(args, context)
});
exports.currencyEditor = currencyEditor;
const currencyEditorTemplate = (args, context) => {
    const div = document.createElement('div');
    let viewModel = new _currency_selector_1.CurrencySelector(args.component.option('formData')[args.dataField], args.editorOptions.disabled);
    ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-currency-editor-template', data: viewModel } }, context.bindingContext);
    return div;
};
const iconTypeEditor = (options) => context => ({
    template: args => iconTypeEditorTemplate(args, context, options)
});
exports.iconTypeEditor = iconTypeEditor;
const iconTypeEditorTemplate = (args, context, options) => {
    const div = document.createElement('div');
    var value = args.component.option('formData')[args.dataField];
    var viewModel = new _container_type_selector_1.ContainerTypeSelector(options.containersMap, value, options.containerGroupLocalization || undefined, options.highlightedTypes);
    ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-container-type-selector-full', data: viewModel } }, context.bindingContext);
    return div;
};
const nullableNumberBoxEditor = (options) => context => {
    return {
        template: (args) => nullableNumberBoxEditorTemplate(args, context, options)
    };
};
exports.nullableNumberBoxEditor = nullableNumberBoxEditor;
const nullableNumberBoxEditorTemplate = (args, context, options) => {
    const div = document.createElement('div');
    var value = args.component.option('formData')[args.dataField];
    const defaultValue = options.defaultValue ? options.defaultValue : 0;
    const viewModel = {
        buttonGroupOptions: {
            selectedItemKeys: ko.pureComputed(() => [isNaN(value())]),
            keyExpr: 'value',
            width: '100%',
            items: [
                { value: true, text: _default_1.getLocalizationById('DashboardWebStringId.Gauge.Scale.Auto') },
                { value: false, text: _default_1.getLocalizationById('DashboardWebStringId.Gauge.Scale.Custom') }
            ],
            onItemClick: e => { value(e.itemData.value ? NaN : defaultValue); }
        },
        numberBoxOptions: Object.assign(Object.assign({}, options.editorOptions), { disabled: ko.pureComputed(() => isNaN(value())), value: value, showSpinButtons: true, step: 1 })
    };
    ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-nullable-numberbox', data: viewModel } }, context.bindingContext);
    return div;
};
const flowModeSettingsEditor = () => context => {
    return {
        template: (args, itemElement) => {
            const periodLimit = args.component.option('formData')[args.dataField];
            const viewModel = {
                selectBoxOptions: {
                    items: periodLimit._getAvailableIntervals(),
                    value: periodLimit.interval,
                    valueExpr: 'value',
                    displayExpr: 'displayValue',
                    displayCustomValue: true,
                    dropDownOptions: { container: args.editorOptions.dashboardWidgetContainer }
                },
                numberBoxOptions: {
                    value: periodLimit.offset,
                    showSpinButtons: true,
                    step: 1
                }
            };
            ko.applyBindingsToNode(_jquery_helpers_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-flow-mode-settings', data: viewModel } }, context.bindingContext);
        }
    };
};
exports.flowModeSettingsEditor = flowModeSettingsEditor;
const calculationExpressionEditor = options => expressionEditorFormAdapter(() => new _expression_editor_1.CalculationExpressionEditor(options));
exports.calculationExpressionEditor = calculationExpressionEditor;
const filterEditor = options => expressionEditorFormAdapter(() => new _filter_expression_editor_1.FilterExpressionEditorViewModel(options));
exports.filterEditor = filterEditor;
const simpleFilterEditor = options => expressionEditorFormAdapter(() => new _simple_filter_editor_view_model_1.SimpleFilterExpressionEditorViewModel(options));
exports.simpleFilterEditor = simpleFilterEditor;
function expressionEditorFormAdapter(createEditorViewModel) {
    return context => {
        return {
            template: (args, itemElement) => {
                var viewModel = createEditorViewModel();
                ko.applyBindingsToNode(_jquery_helpers_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-expression-editor-view', data: viewModel } }, context.bindingContext);
            }
        };
    };
}
const filePickerEditor = (options) => {
    return {
        template: (args) => {
            var div = document.createElement('div');
            new analytics_widgets_internal_1.dxFileImagePicker(div, Object.assign(Object.assign({}, options), { value: getFieldValue(args), onValueChanged: (e) => {
                    args.component.updateData(args.dataField, e.value);
                } }));
            return div;
        }
    };
};
exports.filePickerEditor = filePickerEditor;
const nestedPropertyGridEditor = (caption) => context => {
    return {
        template: (args, itemElement) => {
            const formatModel = args.component.option('formData')[args.dataField];
            ko.applyBindingsToNode(_jquery_helpers_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-nested-propertygrid-editor', data: {
                        object: formatModel,
                        caption: caption
                    } } }, context.bindingContext);
        }
    };
};
exports.nestedPropertyGridEditor = nestedPropertyGridEditor;
const ruleRangesEditor = (options) => context => {
    return {
        options: options,
        template: (args, itemElement) => {
            var viewModel = new _rule_ranges_editor_1.RuleRangesEditor(options);
            ko.applyBindingsToNode(_jquery_helpers_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-rule-ranges-editor', data: viewModel } }, context.bindingContext);
        }
    };
};
exports.ruleRangesEditor = ruleRangesEditor;
const styleSettingsEditor = (options) => context => {
    return {
        options: options,
        template: (args, itemElement) => {
            const styleSettings = args.component.option('formData')[args.dataField];
            var viewModel = new _style_settings_editor_1.StyleSettingsEditor(styleSettings, options);
            ko.applyBindingsToNode(_jquery_helpers_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-style-settings-editor', data: viewModel } }, context.bindingContext);
        }
    };
};
exports.styleSettingsEditor = styleSettingsEditor;
const conditionTypeEditor = options => context => {
    return {
        options: options,
        template: (args, itemElement) => {
            const viewModel = new _condition_type_editor_1.FormatConditionTypeEditorSurface(options);
            ko.applyBindingsToNode(_jquery_helpers_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-format-rule-condition-type-editor', data: viewModel } }, context.bindingContext);
        }
    };
};
exports.conditionTypeEditor = conditionTypeEditor;


/***/ }),

/***/ 16744:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.transformValuesDictionary = exports.updateFormItemsCore = exports.twoWayUpdateInterval = void 0;
const form_1 = __webpack_require__(83160);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _utils_1 = __webpack_require__(7590);
const _form_adapter_editors_1 = __webpack_require__(69949);
exports.twoWayUpdateInterval = 1;
function extractFormAdapterItem(serializableInfo) {
    if (serializableInfo.formAdapterItem) {
        return serializableInfo.formAdapterItem;
    }
    else {
        return mapEditor(serializableInfo);
    }
}
function mapEditor(serializableInfo) {
    if (!serializableInfo.simpleFormAdapterItem) {
        return null;
    }
    switch (serializableInfo.simpleFormAdapterItem) {
        case 'dateBoxEditor':
            return _form_adapter_editors_1.dateBoxEditor();
        case 'numberBoxEditor':
            return _form_adapter_editors_1.numberBoxEditor();
        case 'checkBoxEditor':
            return _form_adapter_editors_1.checkBoxEditor({ text: _default_1.getLocalizationById(serializableInfo.displayName) });
        case 'textBoxEditor':
            return _form_adapter_editors_1.textBoxEditor();
        case 'guidEditor':
            return _form_adapter_editors_1.guidEditor();
        case 'selectBoxEditor':
            return _form_adapter_editors_1.selectBoxEditor(getEditorValues(serializableInfo));
        case 'onOffButtonGroupEditor':
            return _form_adapter_editors_1.buttonGroupEditor([{ value: true, displayValueId: 'DashboardWebStringId.ButtonOn' }, { value: false, displayValueId: 'DashboardWebStringId.ButtonOff' }]);
        case 'yesNoButtonGroupEditor':
            return _form_adapter_editors_1.buttonGroupEditor([{ value: true, displayValueId: 'DashboardWebStringId.ButtonYes' }, { value: false, displayValueId: 'DashboardWebStringId.ButtonNo' }]);
        case 'buttonGroupEditor':
            return _form_adapter_editors_1.buttonGroupEditor(getEditorValues(serializableInfo));
        case 'discreteContinuousButtonGroupEditor':
            return _form_adapter_editors_1.buttonGroupEditor([{ value: true, displayValueId: 'DashboardWebStringId.ButtonDiscrete' }, { value: false, displayValueId: 'DashboardWebStringId.ButtonContinuous' }]);
        case 'listEditor':
            return _form_adapter_editors_1.listEditor(getEditorValues(serializableInfo));
        default:
            throw new Error('Unsupported simple formAdapterItem type');
    }
}
function getFormAdapterItemOptions(serializationInfo, propertiesWrapper, bindingContext) {
    const dynamicEditor = propertiesWrapper.getDynamicEditor ? propertiesWrapper.getDynamicEditor(serializationInfo.propertyName) : null;
    const formAdapterItemProvider = dynamicEditor || serializationInfo;
    const formAdapterItem = extractFormAdapterItem(formAdapterItemProvider);
    const formAdapterContext = {
        bindingContext: bindingContext,
        widgetContainer: bindingContext.$root.getWidgetContainer()
    };
    return (typeof formAdapterItem === 'function') ? formAdapterItem(formAdapterContext) : formAdapterItem;
}
function getFormItems(target, context) {
    return target
        .getInfo()
        .map(serializationInfo => {
        if (serializationInfo.dxFormItem) {
            return serializationInfo.dxFormItem;
        }
        let formAdapterItemOptions = getFormAdapterItemOptions(serializationInfo, target, context);
        if (!formAdapterItemOptions) {
            return null;
        }
        return {
            dataField: serializationInfo.propertyName,
            name: serializationInfo.propertyName,
            label: Object.assign({ text: _default_1.getLocalizationById(serializationInfo.displayName), visible: !!serializationInfo.displayName }, formAdapterItemOptions.label),
            visible: target.isPropertyVisible ? target.isPropertyVisible(serializationInfo.propertyName) : true,
            validationRules: [...(serializationInfo.validationRules || []), ...(formAdapterItemOptions.validationRules || [])],
            editorType: formAdapterItemOptions.editorType,
            template: formAdapterItemOptions.template,
            customEditorType: formAdapterItemOptions.customEditorType,
            editorOptions: Object.assign(Object.assign({ disabled: target.isPropertyDisabled ? target.isPropertyDisabled(serializationInfo.propertyName) : false }, formAdapterItemOptions.editorOptions), serializationInfo.editorOptions)
        };
    }).filter(i => !!i);
}
function getItemComparableOptions(propertyName, target, context) {
    const info = target.getInfo().filter(info => info.propertyName === propertyName)[0];
    const itemOptions = info && getFormAdapterItemOptions(info, target, context);
    return itemOptions && itemOptions.comparableEditorOptions || [];
}
function updateFormItemsCore(form, target, bindingContext, propertiesToForceUpdate = []) {
    form.beginUpdate();
    getFormItems(target, bindingContext).forEach(newItem => {
        const itemOptions = form.itemOption(newItem.dataField);
        if (itemOptions.visible !== newItem.visible) {
            form.itemOption(newItem.dataField, 'visible', newItem.visible);
        }
        if (itemOptions.editorOptions && newItem.editorOptions) {
            const isOptionsChanged = ['disabled', ...getItemComparableOptions(newItem.dataField, target, bindingContext)]
                .reduce((acc, prop) => acc || (newItem.editorOptions[prop] !== itemOptions.editorOptions[prop]), false);
            isOptionsChanged && form.itemOption(newItem.dataField, 'editorOptions', newItem.editorOptions);
        }
        if (itemOptions['customEditorType'] !== newItem['customEditorType'] || itemOptions.editorType !== newItem.editorType ||
            _utils_1.type.isDefined(propertiesToForceUpdate) && propertiesToForceUpdate.filter(f => f === newItem.dataField).length > 0) {
            form.itemOption(newItem.dataField, newItem);
        }
    });
    form.endUpdate();
}
exports.updateFormItemsCore = updateFormItemsCore;
function transformValuesDictionary(values) {
    return Object.keys(values).map(k => ({ value: k, displayValueId: values[k] }));
}
exports.transformValuesDictionary = transformValuesDictionary;
function getEditorValues(propertyEditorInfo) {
    if (propertyEditorInfo.values) {
        let values = ko.unwrap(propertyEditorInfo.values);
        return transformValuesDictionary(values);
    }
    else if (propertyEditorInfo.valuesArray)
        return propertyEditorInfo.valuesArray.map((val) => ({ value: val.value, displayValueId: val.displayValue }));
    return undefined;
}
ko.bindingHandlers['dx-dashboard-form-adapter'] = {
    init: function (element, valueAccessor, _, __, bindingContext) {
        let subscriptions = [];
        const params = ko.unwrap(valueAccessor());
        const target = ko.unwrap(params.target);
        const onFormInitialized = ko.unwrap(params.onFormInitialized);
        const updateFormItems = (form, propertiesToForceUpdate) => {
            updateFormItemsCore(form, target, bindingContext, propertiesToForceUpdate);
        };
        let twoWayTimeout;
        let twoWayPropsUpdated = [];
        const clearTwoWayTimeout = (propsToClear) => {
            twoWayPropsUpdated = twoWayPropsUpdated.filter(tw => propsToClear.filter(tc => tc === tw).length === 0);
            if (twoWayPropsUpdated.length === 0) {
                clearTimeout(twoWayTimeout);
                twoWayTimeout = null;
            }
        };
        const updateTwoWay = (prop) => {
            clearTimeout(twoWayTimeout);
            twoWayPropsUpdated.push(prop);
            twoWayTimeout = setTimeout(() => {
                let force = twoWayPropsUpdated;
                clearTwoWayTimeout(twoWayPropsUpdated);
                updateFormItems(form, force);
            }, exports.twoWayUpdateInterval);
        };
        const form = new form_1.default(element, {
            formData: target,
            colCount: 1,
            labelLocation: 'top',
            showColonAfterLabel: false,
            items: getFormItems(target, bindingContext),
            onContentReady: (e) => {
                target.onContentReady && target.onContentReady(e);
            },
            onInitialized: (e) => {
                onFormInitialized && onFormInitialized(e);
                target.onInitialized && target.onInitialized(e);
            },
            onFieldDataChanged: (e) => {
                if (twoWayTimeout)
                    clearTwoWayTimeout([e.dataField]);
                updateFormItems(e.component);
                target.onFieldDataChanged && target.onFieldDataChanged(e);
            }
        });
        target.assignValidationPovider(form);
        target.getInfo()
            .filter(propInfo => propInfo.externalUpdateCallback)
            .forEach(propInfo => subscriptions.push(propInfo.externalUpdateCallback(({ forceValidate }) => {
            updateFormItems(form);
            if (forceValidate)
                form.validate();
        })));
        target.getInfo()
            .filter(propInfo => propInfo.isTwoWay)
            .forEach(propInfo => {
            let property = target[propInfo.propertyName];
            if (property && ko.isObservable(property)) {
                subscriptions.push(property.subscribe(newValue => {
                    updateTwoWay(propInfo.propertyName);
                }));
            }
        });
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            target.assignValidationPovider(null);
            subscriptions.forEach(d => d.dispose());
            subscriptions = [];
        });
        return { controlsDescendantBindings: true };
    }
};


/***/ }),

/***/ 74970:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ObjectPropertiesWrapper = void 0;
const query_1 = __webpack_require__(38218);
const ko = __webpack_require__(71032);
class ObjectPropertiesWrapper {
    constructor(options) {
        this._serializationInfo = [];
        this.isPropertyVisible = (name) => {
            if (!this._serializationInfo.filter(i => i.propertyName === name)[0]) {
                throw new Error('unknown property');
            }
            var result = true;
            var propertyFilter = this.visibilityFilterRules[name];
            if (propertyFilter) {
                result = !!query_1.default([this]).filter(propertyFilter).toArray().length;
            }
            return result;
        };
        this.isPropertyDisabled = (name) => {
            if (!this._serializationInfo.filter(i => i.propertyName === name)[0]) {
                throw new Error('unknown property');
            }
            var result = false;
            var propertyFilter = this.disabledFilterRules[name];
            if (propertyFilter) {
                result = !!query_1.default([this]).filter(propertyFilter).toArray().length;
            }
            return result;
        };
        this.getDynamicEditor = (name) => {
            if (!this._serializationInfo.filter(i => i.propertyName === name)[0]) {
                throw new Error('unknown property');
            }
            return this.dynamicEditorRules[name] && this.dynamicEditorRules[name](this.model) || null;
        };
        this.model = options.model;
        this.visibilityFilterRules = options.visibilityFilterRules || {};
        this.disabledFilterRules = options.disabledFilterRules || {};
        this.dynamicEditorRules = options.dynamicEditorRules || {};
        this._modelSubscriptions = options.disposableModelSubscriptions || [];
        this.summary = options.summary;
        this.getPropertiesFromContainer(this.model, options.properties);
        if (options.modelExtention) {
            this.getPropertiesFromContainer(options.modelExtention, options.properties);
        }
        if (options.properties.length === 0) {
            this.model['getInfo']().forEach(propertyInfo => {
                this._assignPropertyCore(this.model[propertyInfo.propertyName], propertyInfo);
            });
        }
    }
    getPropertiesFromContainer(cur, properties) {
        properties.forEach((propertyInfo) => {
            if (propertyInfo['container']) {
                var containerObject = ko.unwrap(cur[propertyInfo['container'].propertyName]);
                if (!!containerObject) {
                    this.getPropertiesFromContainer(containerObject, propertyInfo['properties']);
                }
            }
            else {
                var sourcePropertyName = propertyInfo.propertyName, targetPropertyName = propertyInfo.replacementPropertyName || sourcePropertyName;
                if (cur[sourcePropertyName]) {
                    var serializationInfo = sourcePropertyName !== targetPropertyName ? Object.assign(Object.assign({}, propertyInfo), { propertyName: targetPropertyName }) : propertyInfo;
                    this._assignPropertyCore((propertyInfo.sourceObject || cur[sourcePropertyName]), serializationInfo);
                }
            }
        });
    }
    assignValidationPovider(validationProvider) {
        this._validationProvider = validationProvider;
    }
    _assignPropertyCore(propertyObject, info) {
        if (info.validateBeforeSet === true && ko.isObservable(propertyObject)) {
            this[info.propertyName] = ko.pureComputed({
                read: () => propertyObject(),
                write: (value) => {
                    if (this._validationProvider) {
                        var validateResult = this._validationProvider.validate();
                        if (validateResult.status === 'valid') {
                            propertyObject(value);
                        }
                    }
                    else {
                        propertyObject(value);
                    }
                }
            });
            this._modelSubscriptions.push(this[info.propertyName]);
        }
        else {
            this[info.propertyName] = propertyObject;
        }
        this._serializationInfo.push(info);
    }
    addProperty(propertyValue, info) {
        this._assignPropertyCore(propertyValue, info);
    }
    getInfo() {
        return this._serializationInfo;
    }
    isEmpty() {
        if (this._serializationInfo.length !== 0) {
            let everythingIsInvisible = true;
            this._serializationInfo.forEach(i => {
                if (this.isPropertyVisible(i.propertyName))
                    everythingIsInvisible = false;
            });
            return everythingIsInvisible;
        }
        return true;
    }
    unbindModel() {
        this._modelSubscriptions.forEach(disposable => disposable.dispose());
        this._modelSubscriptions = [];
    }
}
exports.ObjectPropertiesWrapper = ObjectPropertiesWrapper;


/***/ }),

/***/ 38992:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(1628);
__webpack_require__(29297);
__webpack_require__(35323);
__exportStar(__webpack_require__(1628), exports);
__exportStar(__webpack_require__(34765), exports);
__exportStar(__webpack_require__(14058), exports);
__exportStar(__webpack_require__(18288), exports);
__exportStar(__webpack_require__(5138), exports);
__exportStar(__webpack_require__(83149), exports);
__exportStar(__webpack_require__(49888), exports);
__exportStar(__webpack_require__(6271), exports);
__exportStar(__webpack_require__(4451), exports);
__exportStar(__webpack_require__(30457), exports);
__exportStar(__webpack_require__(43704), exports);
__exportStar(__webpack_require__(82247), exports);
__exportStar(__webpack_require__(92170), exports);
__exportStar(__webpack_require__(94041), exports);
__exportStar(__webpack_require__(31121), exports);
__exportStar(__webpack_require__(59698), exports);
__exportStar(__webpack_require__(73011), exports);
__exportStar(__webpack_require__(30779), exports);
__exportStar(__webpack_require__(54792), exports);
__exportStar(__webpack_require__(30199), exports);
__exportStar(__webpack_require__(27612), exports);
__exportStar(__webpack_require__(87588), exports);
__exportStar(__webpack_require__(25979), exports);
__exportStar(__webpack_require__(9978), exports);
__exportStar(__webpack_require__(65692), exports);
__exportStar(__webpack_require__(35323), exports);
__exportStar(__webpack_require__(96216), exports);
__exportStar(__webpack_require__(29608), exports);


/***/ }),

/***/ 29297:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(34024);
__webpack_require__(34024);
__webpack_require__(36765);
__webpack_require__(78199);
__webpack_require__(32280);
__webpack_require__(76790);
__webpack_require__(18295);
__webpack_require__(16744);
__webpack_require__(2596);
__webpack_require__(22871);
__webpack_require__(91867);
__webpack_require__(25822);
__webpack_require__(68936);
__exportStar(__webpack_require__(36765), exports);
__exportStar(__webpack_require__(10571), exports);
__exportStar(__webpack_require__(47160), exports);
__exportStar(__webpack_require__(76643), exports);
__exportStar(__webpack_require__(14104), exports);
__exportStar(__webpack_require__(4785), exports);
__exportStar(__webpack_require__(78340), exports);
__exportStar(__webpack_require__(36220), exports);
__exportStar(__webpack_require__(71366), exports);
__exportStar(__webpack_require__(96635), exports);
__exportStar(__webpack_require__(96107), exports);
__exportStar(__webpack_require__(66568), exports);
__exportStar(__webpack_require__(49169), exports);
__exportStar(__webpack_require__(740), exports);
__exportStar(__webpack_require__(25059), exports);
__exportStar(__webpack_require__(17355), exports);
__exportStar(__webpack_require__(7110), exports);
__exportStar(__webpack_require__(78199), exports);
__exportStar(__webpack_require__(79305), exports);
__exportStar(__webpack_require__(75110), exports);
__exportStar(__webpack_require__(89176), exports);
__exportStar(__webpack_require__(256), exports);
__exportStar(__webpack_require__(28475), exports);
__exportStar(__webpack_require__(4771), exports);
__exportStar(__webpack_require__(76279), exports);
__exportStar(__webpack_require__(16059), exports);
__exportStar(__webpack_require__(5225), exports);
__exportStar(__webpack_require__(70937), exports);
__exportStar(__webpack_require__(42114), exports);
__exportStar(__webpack_require__(5043), exports);
__exportStar(__webpack_require__(7035), exports);
__exportStar(__webpack_require__(65459), exports);
__exportStar(__webpack_require__(12209), exports);
__exportStar(__webpack_require__(28570), exports);
__exportStar(__webpack_require__(32615), exports);
__exportStar(__webpack_require__(14531), exports);
__exportStar(__webpack_require__(76790), exports);
__exportStar(__webpack_require__(71940), exports);
__exportStar(__webpack_require__(86167), exports);
__exportStar(__webpack_require__(18295), exports);
__exportStar(__webpack_require__(85981), exports);
__exportStar(__webpack_require__(87524), exports);
__exportStar(__webpack_require__(45834), exports);
__exportStar(__webpack_require__(14716), exports);
__exportStar(__webpack_require__(74970), exports);
__exportStar(__webpack_require__(76176), exports);
__exportStar(__webpack_require__(99032), exports);
__exportStar(__webpack_require__(47298), exports);
__exportStar(__webpack_require__(62509), exports);
__exportStar(__webpack_require__(20942), exports);
__exportStar(__webpack_require__(53239), exports);
__exportStar(__webpack_require__(96390), exports);
__exportStar(__webpack_require__(82992), exports);
__exportStar(__webpack_require__(28439), exports);
__exportStar(__webpack_require__(31641), exports);
__exportStar(__webpack_require__(4677), exports);
__exportStar(__webpack_require__(20562), exports);
__exportStar(__webpack_require__(94766), exports);
__exportStar(__webpack_require__(90592), exports);
__exportStar(__webpack_require__(35434), exports);
__exportStar(__webpack_require__(78295), exports);
__exportStar(__webpack_require__(16821), exports);
__exportStar(__webpack_require__(96431), exports);
__exportStar(__webpack_require__(74906), exports);
__exportStar(__webpack_require__(56549), exports);
__exportStar(__webpack_require__(74664), exports);
__exportStar(__webpack_require__(76671), exports);
__exportStar(__webpack_require__(827), exports);
__exportStar(__webpack_require__(11347), exports);
__exportStar(__webpack_require__(33271), exports);
__exportStar(__webpack_require__(21624), exports);
__exportStar(__webpack_require__(88653), exports);
__exportStar(__webpack_require__(41642), exports);
__exportStar(__webpack_require__(29423), exports);
__exportStar(__webpack_require__(25404), exports);
__exportStar(__webpack_require__(59022), exports);
__exportStar(__webpack_require__(44726), exports);
__exportStar(__webpack_require__(65862), exports);
__exportStar(__webpack_require__(3734), exports);
__exportStar(__webpack_require__(5191), exports);
__exportStar(__webpack_require__(51558), exports);
__exportStar(__webpack_require__(52172), exports);
__exportStar(__webpack_require__(53379), exports);
__exportStar(__webpack_require__(14530), exports);
__exportStar(__webpack_require__(95236), exports);
__exportStar(__webpack_require__(32498), exports);
__exportStar(__webpack_require__(93422), exports);
__exportStar(__webpack_require__(52420), exports);
__exportStar(__webpack_require__(76330), exports);
__exportStar(__webpack_require__(9637), exports);
__exportStar(__webpack_require__(34238), exports);
__exportStar(__webpack_require__(15583), exports);
__exportStar(__webpack_require__(93254), exports);
__exportStar(__webpack_require__(85915), exports);
__exportStar(__webpack_require__(2029), exports);
__exportStar(__webpack_require__(71816), exports);
__exportStar(__webpack_require__(12465), exports);
__exportStar(__webpack_require__(74890), exports);
__exportStar(__webpack_require__(68378), exports);
__exportStar(__webpack_require__(92111), exports);
__exportStar(__webpack_require__(77038), exports);
__exportStar(__webpack_require__(21054), exports);
__exportStar(__webpack_require__(10297), exports);
__exportStar(__webpack_require__(72657), exports);
__exportStar(__webpack_require__(51871), exports);
__exportStar(__webpack_require__(20662), exports);
__exportStar(__webpack_require__(92409), exports);
__exportStar(__webpack_require__(65465), exports);
__exportStar(__webpack_require__(64361), exports);
__exportStar(__webpack_require__(67205), exports);
__exportStar(__webpack_require__(67080), exports);
__exportStar(__webpack_require__(99429), exports);
__exportStar(__webpack_require__(22871), exports);
__exportStar(__webpack_require__(70990), exports);
__exportStar(__webpack_require__(91867), exports);
__exportStar(__webpack_require__(31203), exports);
__exportStar(__webpack_require__(3816), exports);
__exportStar(__webpack_require__(74885), exports);
__exportStar(__webpack_require__(52993), exports);
__exportStar(__webpack_require__(25822), exports);
__exportStar(__webpack_require__(51350), exports);
__exportStar(__webpack_require__(66072), exports);
__exportStar(__webpack_require__(37965), exports);
__exportStar(__webpack_require__(91675), exports);
__exportStar(__webpack_require__(95145), exports);
__exportStar(__webpack_require__(9995), exports);
__exportStar(__webpack_require__(82911), exports);
__exportStar(__webpack_require__(68936), exports);
__exportStar(__webpack_require__(8464), exports);
__exportStar(__webpack_require__(28768), exports);


/***/ }),

/***/ 46421:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(50999);
__webpack_require__(14198);
__webpack_require__(38992);
__exportStar(__webpack_require__(38992), exports);


/***/ }),

/***/ 4991:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createPopoverOptionsGetterFunction = void 0;
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _knockout_utils_1 = __webpack_require__(4437);
const createPopoverOptionsGetterFunction = (menuItem, dashboardItemMenu) => (rootContainer) => {
    const viewerBoundary = rootContainer.querySelector('.dx-dashboard-layout-container');
    const itemMenuElement = rootContainer.querySelector('.dx-dashboard-item-menu-container.dx-state-selected .dx-dashboard-item-menu .dx-dashboard-' + menuItem.menuItemId + '-options-button');
    const itemMenuItemVisible = ko.observable(true);
    const getHeight = () => viewerBoundary.clientHeight;
    let repaintComponentFunction = null;
    let resizeObserver = null;
    let intersectionObserver = null;
    let disposed = false;
    const popoverVisible = ko.pureComputed(() => {
        return menuItem.detailVisible() && itemMenuItemVisible();
    });
    return {
        target: itemMenuElement,
        container: rootContainer,
        visible: popoverVisible,
        position: {
            my: _knockout_utils_1.safeComputed({ isLeft: dashboardItemMenu.isLeft }, args => args.isLeft ? 'right' : 'left'),
            at: _knockout_utils_1.safeComputed({ isLeft: dashboardItemMenu.isLeft }, args => args.isLeft ? 'left' : 'right'),
            boundary: viewerBoundary,
            collision: 'flipfit',
            boundaryOffset: '0, 0',
            offset: _knockout_utils_1.safeComputed({ isLeft: dashboardItemMenu.isLeft }, arg => arg.isLeft ? '+10, 0' : '-10, 0')
        },
        height: getHeight(),
        width: ko.unwrap(menuItem.panelWidth) + 2,
        hoverStateEnabled: false,
        onShown: (options) => {
            _jquery_helpers_1.$unwrap(options.component._$content).classList.add('dx-state-hover');
        },
        hideOnOutsideClick: false,
        animation: { enabled: false },
        onInitialized: (args) => {
            let popupComponent = args.component;
            let setPopupHeightDebounce = _utils_1.debounce(() => {
                popupComponent.option('height', getHeight());
            }, 1);
            resizeObserver = new ResizeObserver(entries => entries[0] && setPopupHeightDebounce());
            resizeObserver.observe(viewerBoundary);
            intersectionObserver = new IntersectionObserver(entries => {
                entries[0] && itemMenuItemVisible(entries[0].intersectionRatio > 0);
            }, { root: viewerBoundary, rootMargin: '-36px' });
            intersectionObserver.observe(itemMenuElement);
            repaintComponentFunction = _utils_1.debounce(() => {
                if (!disposed) {
                    popupComponent.repaint();
                }
            }, 1);
            dashboardItemMenu.layoutController.subscribeOnScroll(repaintComponentFunction);
            dashboardItemMenu.subscribeLayoutItemRepaintRequest(repaintComponentFunction);
        },
        onDisposing: () => {
            disposed = true;
            resizeObserver && resizeObserver.unobserve(viewerBoundary);
            intersectionObserver && intersectionObserver.unobserve(itemMenuElement);
            dashboardItemMenu.layoutController.unsubscribeOnScroll(repaintComponentFunction);
            dashboardItemMenu.unsubscribeLayoutItemRepaintRequest(repaintComponentFunction);
            popoverVisible.dispose();
        },
        hideOnParentScroll: false,
        wrapperAttr: _knockout_utils_1.safeComputed({ isLeft: dashboardItemMenu.isLeft }, args => {
            const classes = [
                'dx-dashboard-property-grid',
                'dx-disappearing-overlay',
                'dx-dashboard-context-menu-container',
                'dx-menu-position-' + (args.isLeft ? 'left' : 'right')
            ];
            if (menuItem.popoverClass)
                classes.push(menuItem.popoverClass);
            return {
                class: classes.join(' ')
            };
        })
    };
};
exports.createPopoverOptionsGetterFunction = createPopoverOptionsGetterFunction;


/***/ }),

/***/ 67205:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ItemMenuPositionCalculator = exports.DashboardItemMenu = exports.createContextPopupMenuViewModel = exports.DashboardItemMenuSizes = void 0;
const events_1 = __webpack_require__(68396);
const themes_1 = __webpack_require__(84201);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const disposable_object_1 = __webpack_require__(99253);
const _knockout_utils_1 = __webpack_require__(4437);
const _properties_controller_1 = __webpack_require__(52993);
const _dashboard_item_menu_popover_1 = __webpack_require__(4991);
const _section_descriptors_1 = __webpack_require__(70990);
exports.DashboardItemMenuSizes = {
    BindingPanelPanelWidth: (collapsed = false) => {
        if (collapsed) {
            return themes_1.default.isMaterial(themes_1.default.current()) ? 300 : 220;
        }
        return themes_1.default.isMaterial(themes_1.default.current()) ? 600 : 495;
    },
    OptionsPanelWidth: (content = false) => {
        if (themes_1.default.isMaterial(themes_1.default.current())) {
            return content ? 300 : 298;
        }
        return 274;
    }
};
const createContextPopupMenuViewModel = (menuItem, dashboardItemMenu) => {
    return {
        menuButton: {
            icon: menuItem.icon,
            hint: _default_1.getLocalizationById(menuItem.hint || menuItem.title),
            cssClass: _knockout_utils_1.safeComputed({ detailVisible: menuItem.detailVisible }, args => {
                const classes = ['dx-dashboard-' + menuItem.menuItemId + '-options-button'];
                if (args.detailVisible)
                    classes.push('dx-state-selected');
                return classes.join(' ');
            }),
            clickHandler: () => dashboardItemMenu.menuItemClick(menuItem && menuItem.menuItemId),
        },
        menuPropertiesPanel: {
            title: _default_1.getLocalizationById(menuItem.title),
            panelContent: {
                view: menuItem.templateName,
                viewModel: {
                    title: _default_1.getLocalizationById(menuItem.title || menuItem.hint),
                    data: menuItem.customData,
                    isSecondaryPanelVisible: dashboardItemMenu.isSecondaryPanelVisible,
                    hideBindingPanel: dashboardItemMenu.hideBindingPanel,
                    hideBindingProperties: dashboardItemMenu.hideBindingProperties,
                    detailVisible: menuItem.detailVisible
                }
            },
            cssClasses: ko.pureComputed(() => {
                return dashboardItemMenu.selectedItemSurface
                    && dashboardItemMenu.selectedItemSurface.propertiesController.mainModel() ? 'dx-visible-properties' : '';
            }),
            style: dashboardItemMenu.propertiesPanelStyle,
            detailVisible: menuItem.detailVisible,
            hidePanelAction: dashboardItemMenu.hideBindingPanel,
        },
        getPopoverOptions: _dashboard_item_menu_popover_1.createPopoverOptionsGetterFunction(menuItem, dashboardItemMenu)
    };
};
exports.createContextPopupMenuViewModel = createContextPopupMenuViewModel;
class DashboardItemMenu extends disposable_object_1.DisposableObject {
    constructor(layoutController, layoutItem, _positionCalculator, propertiesController, itemSurface) {
        super();
        this.layoutController = layoutController;
        this.layoutItem = layoutItem;
        this._positionCalculator = _positionCalculator;
        this.propertiesController = propertiesController;
        this.menuItemClick = (menuItemId) => {
            this.contextMenuItems().forEach(contextMenuItem => {
                if (contextMenuItem.menuItemId !== menuItemId) {
                    contextMenuItem.detailVisible(false);
                }
                else {
                    this.propertiesController.mainModel(null);
                    if (contextMenuItem.detailVisible.peek()) {
                        contextMenuItem.detailVisible(false);
                    }
                    else {
                        contextMenuItem.showMenu && contextMenuItem.showMenu();
                        contextMenuItem.detailVisible(true);
                    }
                }
            });
        };
        this.contextMenuItems = ko.observableArray();
        this.contextMenuItemViewModels = _knockout_utils_1.safeComputed({ contextMenuItems: this.contextMenuItems }, (args) => args.contextMenuItems
            .sort((a, b) => (a.index || Number.MAX_VALUE) - (b.index || Number.MAX_VALUE))
            .map(item => exports.createContextPopupMenuViewModel(item, this)));
        this.menuItemDetailVisible = ko.pureComputed(() => this.contextMenuItems().some(contextMenuItem => contextMenuItem.detailVisible()));
        this.verticalPosition = ko.observable();
        this.isLeft = ko.observable();
        this.isCollapsed = ko.observable(false);
        this.isCollapsedStateToggleVisible = ko.observable(false);
        this._recalculateVerticalPosition = () => {
            window.setTimeout(() => {
                this.verticalPosition(this._positionCalculator.calculateVPosition());
            }, 1);
        };
        this._recalculatePosition = () => {
            this.verticalPosition(this._positionCalculator.calculateVPosition());
            this.isLeft(this._positionCalculator.calculateIsLeft());
        };
        this._recalculatePositionDebounced = _utils_1.debounce(this._recalculatePosition, 1);
        this.hideBindingProperties = () => {
            if (this.propertiesController.secondaryModel() && this.isSecondaryPanelVisible()) {
                this.isSecondaryPanelVisible(false);
            }
            else {
                this.propertiesController.mainModel(null);
                if (this.contextMenuItems().filter(mi => mi.detailVisible() && mi.menuItemId !== 'item-binding-panel')[0]) {
                    this.hideBindingPanel();
                }
            }
        };
        this.hideBindingPanel = () => {
            this.propertiesController.secondaryModel(null);
            this.propertiesController.mainModel(null);
            this.menuItemClick(null);
        };
        this.isSecondaryPanelVisible = ko.observable(false);
        this.__secondaryPanelVisibleTimeout = 0;
        this._repaintHandlers = [];
        this.selectedItemSurface = itemSurface;
        ko.computed(() => {
            layoutController.itemInteractionInProgress(this.menuItemDetailVisible());
        });
        this.isSecondaryPanelVisible.subscribe((visibility) => {
            if (!visibility) {
                this.__secondaryPanelVisibleTimeout = window.setTimeout(() => {
                    this.propertiesController.secondaryModel(undefined);
                    this.__secondaryPanelVisibleTimeout = 0;
                }, 350);
            }
        });
        this.propertiesController.secondaryModel.subscribe((model) => {
            this.isSecondaryPanelVisible(!!model);
            if (this.__secondaryPanelVisibleTimeout)
                clearTimeout(this.__secondaryPanelVisibleTimeout);
        });
        this.propertiesPanelStyle = ko.computed(() => {
            var visiblePanel = this.contextMenuItems().filter(contextMenuItem => contextMenuItem.detailVisible())[0], mainModel = this.propertiesController.mainModel();
            if (visiblePanel) {
                if (visiblePanel.menuItemId === 'item-binding-panel') {
                    return { width: exports.DashboardItemMenuSizes.BindingPanelPanelWidth(!mainModel).toString() + 'px', marginLeft: '' };
                }
            }
            return { width: exports.DashboardItemMenuSizes.OptionsPanelWidth(true).toString() + 'px', marginLeft: '0px' };
        });
        this.subscribeLayoutItemRepaintRequest(this._recalculatePositionDebounced);
        this.toDispose(this.contextMenuItemViewModels.subscribe(() => this._recalculatePositionDebounced()));
        this.toDispose(this.layoutItem.isSelected.subscribe(() => this._recalculatePositionDebounced()));
        this.toDispose(this.isCollapsed.subscribe(() => this._recalculatePositionDebounced()));
        this._recalculatePosition();
    }
    createViewModel() {
        return {
            isCollapsedStateToggleVisible: _knockout_utils_1.safeComputed({ isLeft: this.isLeft }, args => args.isLeft && this._positionCalculator.calculateIsLeftAndInside()),
            isCollapsed: this.isCollapsed,
            collapsedStateToggle: () => this.isCollapsed(!this.isCollapsed()),
            menuContainerCssClasses: _knockout_utils_1.safeComputed({
                isLeft: this.isLeft,
                isSelected: this.layoutItem.isSelected,
                verticalPosition: this.verticalPosition,
                isCollapsed: this.isCollapsed,
            }, args => {
                const classes = [];
                const isInnerMenu = args.isLeft && this._positionCalculator.calculateIsLeftAndInside();
                if (isInnerMenu) {
                    classes.push('dx-position-left-inside');
                }
                else if (args.isLeft) {
                    classes.push('dx-position-left');
                }
                args.isSelected && classes.push('dx-state-selected');
                args.verticalPosition === 'top' && classes.push('dx-dashboard-item-top');
                if (args.verticalPosition === 'bottom') {
                    args.isCollapsed && isInnerMenu ? classes.push('dx-dashboard-item-top') : classes.push('dx-dashboard-item-bottom');
                }
                return classes.join(' ');
            }),
            menuItemDetailVisible: this.menuItemDetailVisible,
            contextMenuItemViewModels: this.contextMenuItemViewModels,
            deleteCurrentItemAction: () => this.layoutController._selectedLayoutItem().delete(),
            deleteCurrentItemActionCaption: _default_1.getLocalizationById('DashboardWebStringId.Remove'),
        };
    }
    subscribeLayoutItemRepaintRequest(handler) {
        this.layoutItem.repaintCallbacks.add(handler);
        this._repaintHandlers.push(handler);
    }
    unsubscribeLayoutItemRepaintRequest(handler) {
        this.layoutItem.repaintCallbacks.remove(handler);
        this._repaintHandlers.splice(this._repaintHandlers.indexOf(handler), 1);
    }
    dispose() {
        super.dispose();
        this._repaintHandlers.forEach(handler => this.layoutItem.repaintCallbacks.remove(handler));
        this._repaintHandlers = [];
        this.selectedItemSurface && this.selectedItemSurface.dispose();
    }
}
exports.DashboardItemMenu = DashboardItemMenu;
ko.components.register('dx-dashboard-item-menu', {
    viewModel: {
        createViewModel: function ({ layoutController, layoutItem, itemMenuViewModelContainer, notificationController }, componentInfo) {
            let positionCalculator = new ItemMenuPositionCalculator(componentInfo.element);
            let itemSurface = _section_descriptors_1.surfaceItemsFactory.createSurfaceItem(layoutItem.viewModel.item(), layoutController.dashboardModel, layoutController.dataSourceBrowser, notificationController);
            let propertiesController = new _properties_controller_1.PropertiesController();
            itemSurface.propertiesController = propertiesController;
            let itemMenu = new DashboardItemMenu(layoutController, layoutItem, positionCalculator, propertiesController, itemSurface);
            itemMenuViewModelContainer(itemMenu);
            ko.utils.domNodeDisposal.addDisposeCallback(componentInfo.element, function () {
                itemMenu.dispose();
                propertiesController.dispose();
                itemMenuViewModelContainer(undefined);
            });
            return itemMenu.createViewModel();
        }
    },
    template: { element: 'dx-dashboard-item-menu' }
});
class ItemMenuPositionCalculator {
    constructor(element) {
        this.element = element;
        this.layoutContainer = _jquery_helpers_1.closest(this.element, '.dx-dashboard-layout-container');
    }
    _isValidElement() {
        return this.element.parentElement && this.layoutContainer;
    }
    calculateIsLeft() {
        if (!this._isValidElement()) {
            return false;
        }
        var elementParentBounds = this.element.parentElement.getBoundingClientRect();
        var rootBounds = this.layoutContainer.getBoundingClientRect();
        var left = elementParentBounds.left, right = elementParentBounds.right, rootLeft = rootBounds.left, rootRight = rootBounds.right;
        return (rootRight - right < exports.DashboardItemMenuSizes.BindingPanelPanelWidth() &&
            left - rootLeft > exports.DashboardItemMenuSizes.BindingPanelPanelWidth()) || (rootRight - right < 50);
    }
    calculateVPosition() {
        let itemMenuElement = this.element.querySelector('.dx-dashboard-item-menu');
        let layoutItem = _jquery_helpers_1.closest(this.element, '.dx-layout-item-wrapper');
        if (!this._isValidElement() || !layoutItem || !itemMenuElement) {
            return 'center';
        }
        var layoutItemBounds = layoutItem.getBoundingClientRect();
        var layoutRootBounds = this.layoutContainer.getBoundingClientRect();
        var itemMenuBounds = itemMenuElement.getBoundingClientRect();
        if (itemMenuBounds.height <= layoutItemBounds.height) {
            return 'center';
        }
        else {
            if (layoutItemBounds.top + layoutItemBounds.height - itemMenuBounds.height < layoutRootBounds.top) {
                return 'top';
            }
            else {
                return 'bottom';
            }
        }
    }
    calculateIsLeftAndInside() {
        if (!this._isValidElement()) {
            return false;
        }
        const elementParentBounds = this.element.parentElement.getBoundingClientRect();
        const layoutRootBounds = this.layoutContainer.getBoundingClientRect();
        return elementParentBounds.left - 50 < layoutRootBounds.left;
    }
}
exports.ItemMenuPositionCalculator = ItemMenuPositionCalculator;
var DISAPPEARING_EVENT_NAMESPACE = '.disappearing';
var findContainer = (element) => {
    return _jquery_helpers_1.closest(element, '.dx-layout-item-wrapper').querySelector('.dx-layout-item-container');
};
ko.bindingHandlers['menuVisibilitySubscription'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            events_1.off(findContainer(element), DISAPPEARING_EVENT_NAMESPACE);
        });
    },
    update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        let toggleClass = (state) => {
            const cssClass = 'dx-target-widget-hovered';
            let nodes = document.querySelectorAll('.dx-disappearing-overlay>.dx-overlay-content');
            for (let i = 0; i < nodes.length; i++) {
                if (state) {
                    nodes[i].classList.add(cssClass);
                }
                else {
                    nodes[i].classList.remove(cssClass);
                }
            }
        };
        valueAccessor().visible.subscribe((val) => {
            let container = findContainer(element);
            if (val) {
                events_1.on(container, 'mouseenter' + DISAPPEARING_EVENT_NAMESPACE, () => { toggleClass(true); });
                events_1.on(container, 'mouseleave' + DISAPPEARING_EVENT_NAMESPACE, () => { toggleClass(false); });
            }
            else {
                events_1.off(container, DISAPPEARING_EVENT_NAMESPACE);
                toggleClass(false);
            }
        });
    }
};


/***/ }),

/***/ 67080:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DragProcessor = void 0;
const events_1 = __webpack_require__(68396);
const $ = __webpack_require__(65311);
const ko = __webpack_require__(71032);
const _undo_engine_helper_1 = __webpack_require__(2908);
class DragProcessor {
    constructor(rootElement) {
        this.rootElement = rootElement;
        this.CSS_DRAG_IN_PROGRESS = 'dx-dashboard-collection-drag';
        this.CSS_HIGHLIGHT_PLACEHOLDER = 'dx-state-hovered';
        this.COLLECTION_SELECTOR = '.dx-dashboard-collection';
        this.TARGET_SELECTOR = '.dx-dashboard-drop-target';
        this.EVENT_NAMESPACE = '.dragInGroup';
        this.currentDrag = null;
        this.state = 'pending';
        this.setDataItemsPositions = (sourceCollectionRoot) => {
            var elementData = ko.dataFor(sourceCollectionRoot);
            $.fn.constructor(sourceCollectionRoot).find('.dx-dashboard-data-item').each((index, item) => {
                if (elementData.supportGroups) {
                    var groupHolder = ko.contextFor(item).$parents[1], groupSize = groupHolder.items === undefined
                        ? 1
                        : groupHolder.items.length, firstItemInGroup = groupHolder.items ? groupHolder.items[0] : ko.dataFor(item);
                    item.setAttribute('data-position', (groupHolder.position === undefined
                        ? elementData['groups'] ? elementData['groups']().length : 0
                        : groupHolder.position).toString());
                    item.setAttribute('data-array-position', elementData.items().indexOf(firstItemInGroup).toString());
                    item.setAttribute('data-group-size', groupSize.toString());
                }
                else {
                    item.setAttribute('data-position', '0');
                    item.setAttribute('data-array-position', '0');
                    item.setAttribute('data-group-size', '0');
                }
            });
            this.currentDrag.itemPosition = Number(this.currentDrag.itemElement.getAttribute('data-position'));
            var isOlap = this.currentDrag.sourceCollection.isOlap();
            $.fn.constructor(this.rootElement).find(this.COLLECTION_SELECTOR).each((_, collectionElement) => {
                var isOtherCollection = ko.dataFor(collectionElement) !== ko.dataFor(sourceCollectionRoot);
                var arrayPosition = 0;
                $.fn.constructor(collectionElement).find(this.TARGET_SELECTOR).each((index, dragTargetElement) => {
                    var elementData = ko.dataFor(dragTargetElement), elementContext = ko.contextFor(dragTargetElement), groupSize = (elementData.items && elementData.items.length) || 0;
                    dragTargetElement.setAttribute('data-position', index.toString());
                    dragTargetElement.setAttribute('data-array-position', arrayPosition.toString());
                    arrayPosition += groupSize;
                    var result = isOtherCollection
                        ? !isOlap
                        : this.checkItemIsDraggableToPosition(this.currentDrag.itemPosition, index);
                    $.fn.constructor(dragTargetElement).toggleClass('dx-state-active', result);
                });
            });
        };
        this.processHtmlDragEvent = () => {
            this.currentDrag.originalEvent.dataTransfer.effectAllowed = 'move';
            this.currentDrag.originalEvent.dataTransfer.setData('text', this.currentDrag.itemPosition.toString());
            let itemElement = this.currentDrag.itemElement;
            var groupElement = $.fn.constructor(itemElement).parents('.dx-dashboard-hierarchical-group')[0], uiFeedbackElement = groupElement || itemElement;
            var crt = uiFeedbackElement.cloneNode(true);
            crt.style.position = 'absolute';
            crt.style.top = '-100000px';
            crt.style.right = '-100000px';
            crt.className = crt.className + ' dx-dashboard-cloned-copy';
            crt.style.width = $.fn.constructor(itemElement).width() + 'px';
            this.currentDrag.clonedElement = crt;
            var container = $.fn.constructor(uiFeedbackElement).parents('.dx-dashboard-property-grid')[0];
            if (container)
                container.appendChild(crt);
            var event = this.currentDrag.originalEvent;
            if (event.dataTransfer['setDragImage']) {
                event.dataTransfer.setDragImage(crt, event.offsetX === undefined ? event.layerX : event.offsetX, event.offsetY === undefined ? event.layerY : event.offsetY);
            }
        };
        this.finishDrag = () => {
            events_1.off(this.rootElement, this.EVENT_NAMESPACE);
            $.fn.constructor(document).off(this.EVENT_NAMESPACE);
            this.rootElement.classList.remove(this.CSS_DRAG_IN_PROGRESS);
            $.fn.constructor(this.rootElement).parents('.dx-overlay-content').removeClass(this.CSS_DRAG_IN_PROGRESS).addClass('dx-state-hover');
            $.fn.constructor(this.rootElement).find(this.TARGET_SELECTOR).removeClass(this.CSS_HIGHLIGHT_PLACEHOLDER);
            this.currentDrag.itemElement.classList.remove('dx-dashboard-drag-in-progress');
            var clonedElement = this.currentDrag.clonedElement;
            if (clonedElement && clonedElement.parentNode) {
                clonedElement.parentNode.removeChild(clonedElement);
            }
            this.currentDrag.clonedElement = null;
            this.state = 'pending';
        };
    }
    startDrag(ev) {
        this.currentDrag = {
            originalEvent: ev.originalEvent,
            itemPosition: -1,
            clonedElement: null,
            itemElement: ev.originalEvent.target,
            sourceCollection: ko.dataFor($.fn.constructor(ev.target).parents(this.COLLECTION_SELECTOR)[0])
        };
        let sourceCollectionElement = $.fn.constructor(this.currentDrag.originalEvent.target).parents(this.COLLECTION_SELECTOR).get(0);
        this.state = 'dragging';
        this.rootElement.classList.add(this.CSS_DRAG_IN_PROGRESS);
        $.fn.constructor(this.rootElement).parents('.dx-overlay-content').addClass(this.CSS_DRAG_IN_PROGRESS);
        this.setDataItemsPositions(sourceCollectionElement);
        this.processHtmlDragEvent();
        this.currentDrag.itemElement.classList.add('dx-dashboard-drag-in-progress');
        events_1.on(this.rootElement, 'dragover' + this.EVENT_NAMESPACE, this.TARGET_SELECTOR, {}, (ev) => {
            var originalEvent = ev.originalEvent, targetItem = ko.dataFor(originalEvent.target), position = Number(ev.currentTarget.getAttribute('data-position'));
            if (originalEvent.target.parentNode['className'].indexOf('dx-state-active') !== -1) {
                ev.currentTarget.classList.add(this.CSS_HIGHLIGHT_PLACEHOLDER);
                originalEvent.dataTransfer.dropEffect = 'move';
            }
            else {
                originalEvent.dataTransfer.dropEffect = 'none';
            }
            return false;
        });
        events_1.on(this.rootElement, 'dragleave' + this.EVENT_NAMESPACE, this.TARGET_SELECTOR, {}, (ev) => {
            ev.currentTarget.classList.remove(this.CSS_HIGHLIGHT_PLACEHOLDER);
        });
        events_1.on(this.rootElement, 'drop' + this.EVENT_NAMESPACE, this.TARGET_SELECTOR, {}, (ev) => {
            var sourceCollection = this.currentDrag.sourceCollection, targetCollection = ko.dataFor($.fn.constructor(ev.target).parents(this.COLLECTION_SELECTOR)[0]), originalPosition = Number(this.currentDrag.itemElement.getAttribute('data-array-position')), newPosition = Number(ev.currentTarget.getAttribute('data-array-position')), groupSize = Number(this.currentDrag.itemElement.getAttribute('data-group-size'));
            this.interchange(sourceCollection.items, targetCollection !== sourceCollection ? targetCollection : null, originalPosition, newPosition, groupSize);
            this.finishDrag();
            return false;
        });
        events_1.on(document, 'dragend' + this.EVENT_NAMESPACE, () => {
            this.finishDrag();
        });
        return true;
    }
    checkItemIsDraggableToPosition(itemIndex, placeholderIndex) {
        return (placeholderIndex < itemIndex) || (placeholderIndex > itemIndex + 1);
    }
    interchange(items, newOwner, sourceIndex, placeholderIndex, groupSize) {
        if (!groupSize) {
            groupSize = 1;
        }
        if (null === newOwner) {
            if (placeholderIndex > sourceIndex) {
                placeholderIndex--;
                for (var i = 0; i < groupSize; i++) {
                    var item = items()[sourceIndex];
                    items.remove(item);
                    items.splice(placeholderIndex, 0, item);
                }
            }
            else {
                for (var i = 0; i < groupSize; i++) {
                    var item = items()[sourceIndex + i];
                    items.remove(item);
                    items.splice(placeholderIndex + i, 0, item);
                }
            }
        }
        else {
            for (var i = 0; i < groupSize; i++) {
                item = items()[sourceIndex];
                newOwner.relocateItem(item, placeholderIndex + i);
                items.remove(item);
            }
        }
    }
}
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DragProcessor.prototype, "interchange", null);
exports.DragProcessor = DragProcessor;
ko.bindingHandlers['dx-dashboard-container-draggable'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        let processor = new DragProcessor(element);
        events_1.on(element, 'dragstart', (ev) => {
            processor.startDrag(ev);
        });
    }
};


/***/ }),

/***/ 99429:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InteractivityPropertiesComposer = void 0;
const bound_image_item_1 = __webpack_require__(35999);
const _data_dashboard_item_1 = __webpack_require__(66302);
const _interactivity_options_1 = __webpack_require__(97492);
const pivot_item_1 = __webpack_require__(68920);
const text_box_item_1 = __webpack_require__(3892);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
class InteractivityPropertiesComposer {
    constructor(propertiesController) {
        this.propertiesController = propertiesController;
    }
    composeTabs(model) {
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Interactivity, 'DashboardWebStringId.InteractivityOptions')
        ];
        var properties = [{
                container: _interactivity_options_1.commonInteractivityOptions,
                properties: [
                    _interactivity_options_1.isMasterFilterDefaultFalse,
                    _interactivity_options_1.masterFilterMode,
                    _interactivity_options_1.isDrillDownEnabled,
                    _interactivity_options_1.targetDimensions,
                    _interactivity_options_1.ignoreMasterFiltersDefaultFalse
                ]
            }];
        if (!((model instanceof pivot_item_1.PivotItem) || (model instanceof bound_image_item_1.BoundImageItem) || (model instanceof text_box_item_1.TextBoxItem))) {
            properties.push(_data_dashboard_item_1.isMasterFilterCrossDataSource);
        }
        var disabledRules = {};
        disabledRules[_data_dashboard_item_1.isMasterFilterCrossDataSource.propertyName] = [_interactivity_options_1.masterFilterMode.propertyName, '=', 'None'];
        if (model.interactivityOptions.targetDimensions) {
            model.interactivityOptions.targetDimensions.subscribe((newTargetDimension) => {
                if (newTargetDimension === 'Points') {
                    model.interactivityOptions.isDrillDownEnabled(false);
                }
            });
            disabledRules[_interactivity_options_1.isDrillDownEnabled.propertyName] = [_interactivity_options_1.targetDimensions.propertyName, '=', 'Points'];
        }
        result[0].tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules
        }));
        return result;
    }
}
exports.InteractivityPropertiesComposer = InteractivityPropertiesComposer;


/***/ }),

/***/ 22871:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 70872:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ItemFilterPropertiesComposer = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const model_1 = __webpack_require__(14198);
const _knockout_utils_1 = __webpack_require__(4437);
const _data_dashboard_item_1 = __webpack_require__(66302);
const _filter_utils_1 = __webpack_require__(87524);
const _item_filter_display_name_provider_1 = __webpack_require__(45834);
const _item_filter_items_provider_1 = __webpack_require__(14716);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
class ItemFilterPropertiesComposer {
    constructor(dataSourceBrowser) {
        this.dataSourceBrowser = dataSourceBrowser;
    }
    composeTabs(item) {
        if (this.dataSourceBrowser.findDataSource(item.dataSource()) instanceof model_1.OlapDataSource) {
            var itemFilterTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ItemFilter, 'DashboardWebStringId.AccordionTab.ItemFilter');
            this._fillSimpleFilterTab(itemFilterTab, item, this.dataSourceBrowser);
            return [itemFilterTab];
        }
        else {
            var itemFilterTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ItemFilter, 'DashboardWebStringId.AccordionTab.ItemFilter');
            var visibleDataFilterTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.VisibleDataFilter, 'DashboardWebStringId.AccordionTab.VisibleDataFilter');
            this._fillFilterTab(itemFilterTab, item, item.filterString, this.dataSourceBrowser, _data_dashboard_item_1.filterString);
            this._fillFilterTab(visibleDataFilterTab, item, item.visibleDataFilterString, this.dataSourceBrowser, _data_dashboard_item_1.visibleDataFilterString);
            return [itemFilterTab, visibleDataFilterTab];
        }
    }
    _fillFilterTab(tab, dashboardItem, targetObservable, dataSourceBrowser, propertyDescriptor) {
        let wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: dashboardItem,
            properties: [
                Object.assign(Object.assign({}, propertyDescriptor), { formAdapterItem: _form_adapter_editors_1.filterEditor({
                        fieldListProvider: ko.observable(new _item_filter_items_provider_1.ItemFilterItemsProvider(dataSourceBrowser, dataSourceBrowser, dataSourceBrowser.parameters, dashboardItem, (di) => { return di instanceof model_1.Dimension; })),
                        options: _filter_utils_1.createItemFilterOptions(targetObservable, undefined, dataSourceBrowser),
                        displayNameProvider: new _item_filter_display_name_provider_1.ItemFilterDisplayNameProvider(dashboardItem, dataSourceBrowser)
                    }) })
            ],
            summary: _knockout_utils_1.safeComputed({ filterString: targetObservable }, (args) => { return !!args.filterString ? _default_1.getLocalizationById('DashboardWebStringId.ButtonOn') : ''; })
        });
        tab.tabModel(wrapper);
    }
    _fillSimpleFilterTab(tab, dashboardItem, dataSourceBrowser) {
        let wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: dashboardItem,
            properties: [
                Object.assign(Object.assign({}, _data_dashboard_item_1.filterString), { formAdapterItem: _form_adapter_editors_1.simpleFilterEditor({
                        dashboardItem, dataSourceBrowser
                    }) })
            ],
            summary: _knockout_utils_1.safeComputed({ filterString: dashboardItem.filterString }, (args) => { return !!args.filterString ? _default_1.getLocalizationById('DashboardWebStringId.ButtonOn') : ''; })
        });
        tab.tabModel(wrapper);
    }
}
exports.ItemFilterPropertiesComposer = ItemFilterPropertiesComposer;


/***/ }),

/***/ 70990:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.surfaceItemsFactory = exports.SurfaceItemsFactory = exports.SectionDescriptors = void 0;
const _filter_element_item_base_1 = __webpack_require__(48098);
const _chorolpeth_map_item_1 = __webpack_require__(54674);
const _geo_point_map_item_base_1 = __webpack_require__(13886);
const _map_item_1 = __webpack_require__(1035);
const _data_dashboard_item_1 = __webpack_require__(66302);
const _series_item_1 = __webpack_require__(77270);
const _scatter_chart_item_1 = __webpack_require__(60644);
const _base_metadata_1 = __webpack_require__(17916);
exports.SectionDescriptors = {
    HiddenDimensions: {
        title: 'DashboardWebStringId.Binding.HiddenDimensions',
        bindingProperty: {
            propertyName: _data_dashboard_item_1.hiddenDimensions.propertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddDimension',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureDimension'
        }
    },
    HiddenMeasures: {
        title: 'DashboardWebStringId.Binding.HiddenMeasures',
        bindingProperty: {
            propertyName: _data_dashboard_item_1.hiddenMeasures.propertyName,
            dataItemType: 'Measure',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddMeasure',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureMeasure'
        }
    },
    SeriesDimension: {
        title: _base_metadata_1.BindingSectionTitles.SeriesDimension,
        bindingProperty: {
            propertyName: _series_item_1.seriesDimensions.propertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddSeries',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureSeries'
        }
    },
    Arguments: {
        title: _base_metadata_1.BindingSectionTitles.Arguments,
        bindingProperty: {
            propertyName: _base_metadata_1.argumentsPropertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddArgument',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureArgument'
        }
    },
    Values: {
        title: 'DashboardStringId.DescriptionValues',
        bindingProperty: {
            propertyName: _base_metadata_1.valuesPropertyName,
            dataItemType: 'Measure',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddValue',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureValue'
        }
    },
    FilterDimensions: {
        title: 'DashboardStringId.DescriptionDimensions',
        bindingProperty: {
            propertyName: _filter_element_item_base_1.filterDimensions.propertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddDimension',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureDimension'
        }
    },
    SparklineArgument: {
        title: 'DashboardWebStringId.Binding.Sparkline',
        bindingProperty: {
            propertyName: _base_metadata_1.sparklineArgumentPropertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetArgument',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureArgument'
        }
    },
    SingleArgument: {
        title: _base_metadata_1.BindingSectionTitles.SingleArgument,
        bindingProperty: {
            propertyName: _base_metadata_1.argumentPropertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetArgument',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureArgument'
        }
    },
    Value: {
        title: 'DashboardStringId.ValueCaption',
        bindingProperty: {
            propertyName: _base_metadata_1.valuePropertyName,
            dataItemType: 'Measure',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetValue',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureValue'
        }
    },
    Latitude: {
        title: 'DashboardStringId.Latitude',
        bindingProperty: {
            propertyName: _geo_point_map_item_base_1.latitude.propertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetLatitude',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureLatitude'
        }
    },
    Longitude: {
        title: 'DashboardStringId.Longitude',
        bindingProperty: {
            propertyName: _geo_point_map_item_base_1.longitude.propertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetLongitude',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureLongitude'
        }
    },
    TooltipDimensions: {
        title: 'DashboardWebStringId.Binding.TooltipDimensions',
        bindingProperty: {
            propertyName: _geo_point_map_item_base_1.tooltipDimensions.propertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddDimension',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureDimension'
        }
    },
    TooltipMeasures: {
        title: 'DashboardWebStringId.Binding.TooltipMeasures',
        bindingProperty: {
            propertyName: _map_item_1.tooltipMeasures.propertyName,
            dataItemType: 'Measure',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddMeasure',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureMeasure'
        }
    },
    Columns: {
        title: 'DashboardStringId.DescriptionColumns',
        bindingProperty: {
            propertyName: _base_metadata_1.columnsPropertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddColumn',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureColumn'
        }
    },
    Rows: {
        title: 'DashboardStringId.DescriptionRows',
        bindingProperty: {
            propertyName: _base_metadata_1.rowsPropertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddRow',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureRow'
        }
    },
    Weight: {
        title: 'DashboardStringId.WeightCaption',
        bindingProperty: {
            propertyName: _base_metadata_1.weightPropertyName,
            dataItemType: 'Measure',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetWeight',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureWeight'
        }
    },
    Color: {
        title: 'DashboardStringId.DescriptionItemColor',
        bindingProperty: {
            propertyName: _base_metadata_1.colorPropertyName,
            dataItemType: 'Measure',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetColor',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureColor'
        }
    },
    AttributeDimension: {
        title: 'DashboardWebStringId.Binding.Attribute',
        bindingProperty: {
            propertyName: _chorolpeth_map_item_1.attributeDimension.propertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetAttribute',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureAttribute'
        }
    },
    Argument: {
        title: _base_metadata_1.BindingSectionTitles.SingleArgument,
        bindingProperty: {
            propertyName: _base_metadata_1.argumentPropertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetArgument',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureArgument'
        }
    },
    AxisXMeasure: {
        title: 'DashboardWebStringId.Binding.XAxis',
        bindingProperty: {
            propertyName: _scatter_chart_item_1.axisXMeasure.propertyName,
            dataItemType: 'Measure',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetValue',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureValue'
        }
    },
    AxisYMeasure: {
        title: 'DashboardWebStringId.Binding.YAxis',
        bindingProperty: {
            propertyName: _scatter_chart_item_1.axisYMeasure.propertyName,
            dataItemType: 'Measure',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetValue',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureValue'
        }
    }
};
class SurfaceItemsFactory {
    constructor() {
        this._itemsMap = {};
    }
    register(dashboardItemType, surfaceTypeConstructor) {
        this._itemsMap[dashboardItemType] = surfaceTypeConstructor;
    }
    createSurfaceItem(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        if (dashboardItem && dashboardItem.itemType && dashboardItem.itemType()) {
            var surfaceTypeConstructor = this._itemsMap[dashboardItem.itemType()];
            if (surfaceTypeConstructor) {
                return new surfaceTypeConstructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
            }
        }
        return null;
    }
}
exports.SurfaceItemsFactory = SurfaceItemsFactory;
exports.surfaceItemsFactory = new SurfaceItemsFactory();


/***/ }),

/***/ 76176:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataItemContainerSeed = void 0;
const ko = __webpack_require__(71032);
const model_1 = __webpack_require__(14198);
const _data_field_1 = __webpack_require__(68951);
const data_item_container_1 = __webpack_require__(76885);
const _base_metadata_1 = __webpack_require__(17916);
class DataItemContainerSeed extends data_item_container_1.DataItemContainer {
    constructor(dataItemProvider, dataItemType, _fieldConstraint) {
        super();
        this.dataItemType = dataItemType;
        this._fieldConstraint = _fieldConstraint;
        this.name = ko.observable('NewContainer');
        this.dataLink = new model_1.DataItemLink(dataItemProvider);
        this.dataLink.itemType('Seed');
    }
    _getDataId() {
        return null;
    }
    _getContainerType() {
        return 'Stub';
    }
    _getBindingModel() {
        return [{
                propertyName: 'dataLink',
                dataItemType: this.dataItemType,
                emptyPlaceholder: 'Data',
                selectedPlaceholder: 'Configure Data',
                fieldConstraint: this._fieldConstraint
            }];
    }
    grow(dataItemProvider, bindingProperty, dataField) {
        var containerModels = [];
        if (!_data_field_1.IsOlapHierarchyField(dataField)) {
            var cm = bindingProperty.creator(undefined, dataField);
            var dataItem = dataItemProvider._createDataItem(dataField, cm._getBindingModel()[0]);
            let newDataItemBinding = cm._getBindingModel()[0];
            cm[newDataItemBinding.propertyName].uniqueName(dataItem.uniqueName());
            containerModels.push(cm);
        }
        else {
            dataField.groupDataItems.forEach(groupItem => {
                var cm = bindingProperty.creator(undefined, groupItem);
                var dataItem = dataItemProvider._createDataItem(groupItem, cm._getBindingModel()[0]);
                dataItem.groupIndex(dataField.groupIndex());
                let newDataItemBinding = cm._getBindingModel()[0];
                cm[newDataItemBinding.propertyName].uniqueName(dataItem.uniqueName());
                containerModels.push(cm);
            });
        }
        return containerModels;
    }
    _getInfoCore() {
        return [_base_metadata_1.itemType, _base_metadata_1.name];
    }
    _getDefaultItemType() {
        return 'Stub';
    }
}
exports.DataItemContainerSeed = DataItemContainerSeed;


/***/ }),

/***/ 99032:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataItemContainerSurface = void 0;
const ko = __webpack_require__(71032);
const _data_source_browser_1 = __webpack_require__(9970);
const _jquery_helpers_1 = __webpack_require__(59384);
const _undo_engine_helper_1 = __webpack_require__(2908);
const _accordion_tab_1 = __webpack_require__(74885);
const _display_name_provider_1 = __webpack_require__(8464);
const _data_item_surface_1 = __webpack_require__(47298);
class DataItemContainerSurface {
    constructor(model, detailsPropertiesComposer, itemSurface, _removeDataItemContainer) {
        this.detailsPropertiesComposer = detailsPropertiesComposer;
        this.itemSurface = itemSurface;
        this._removeDataItemContainer = _removeDataItemContainer;
        this._disposables = [];
        this.propertiesTabs = ko.observableArray([]);
        this.selectItem = (model, binding) => {
            if (model[binding.propertyName]._specifics.isAttribute &&
                this.model()._getBindingModel().some(bindingProp => this.model()[bindingProp.propertyName] !== model[binding.propertyName] && !this.model()[bindingProp.propertyName].dataItem()))
                return;
            var dataItemSurface = new _data_item_surface_1.DataItemSurface(model[binding.propertyName], binding, this.itemSurface.dashboardItem, this.itemSurface._dataSourceBrowser, this.itemSurface.propertiesController, false, binding.fieldConstraint);
            dataItemSurface.newItemCreated.add((link, newField) => {
                if (!this.model()._getBindingModel().some(bindingProp => (this.model()[bindingProp.propertyName] !== link) && this.model()[bindingProp.propertyName].dataItem())) {
                    this.dataFieldChoosed.fire(newField, link);
                }
            });
            this.itemSurface.propertiesController.secondaryModel({
                displayText: binding.emptyPlaceholder,
                data: dataItemSurface
            });
        };
        this.model = ko.observable();
        this.containerType = ko.observable();
        this.singleItemSurface = ko.observable();
        this.dataFieldChoosed = _jquery_helpers_1.createJQueryCallbacks();
        this.removeDataItem = (dataItemLink) => {
            this._removeDataItem(dataItemLink);
        };
        this.dataItemDisplayNameProvider = (dataItem) => {
            return _display_name_provider_1.getDataItemDisplayName(this.itemSurface._dataSourceBrowser, this.itemSurface.dashboardItem, dataItem);
        };
        if (model.itemType) {
            this.containerType(model._getContainerType());
        }
        var updatePropertiesTabs = (otherTabs) => {
            var promises = [];
            promises.push(this.itemSurface._dataSourceBrowser.getDataFieldsArray(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), '', _data_source_browser_1.isNonCollectionDataField));
            this.model()._getBindingModel().forEach(b => {
                this.model()[b.propertyName].uniqueName() && promises.push(this.itemSurface._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), this.model()[b.propertyName].dataItem().dataMember()));
            });
            _jquery_helpers_1.jqueryWhenArray(promises).done((...fields) => {
                otherTabs = otherTabs.concat(this.detailsPropertiesComposer.composeTabs(this.model(), {
                    dashboardItem: this.itemSurface.dashboardItem,
                    containerType: this.containerType,
                    dataSourceBrowser: this.itemSurface._dataSourceBrowser
                }));
                this.propertiesTabs(otherTabs);
            });
        };
        this._disposables.push(this.model.subscribe(newModel => {
            if (!!this.singleItemSurface.peek()) {
                this.singleItemSurface.peek().dispose();
                this.singleItemSurface(null);
            }
            if (newModel._getBindingModel().length === 1) {
                var binding = newModel._getBindingModel()[0];
                var dataItemSurface = new _data_item_surface_1.DataItemSurface(newModel[binding.propertyName], binding, this.itemSurface.dashboardItem, this.itemSurface._dataSourceBrowser, this.itemSurface.propertiesController, false, binding.fieldConstraint);
                dataItemSurface.newItemCreated.add((link, newField) => {
                    this.dataFieldChoosed.fire(newField, link);
                });
                this.singleItemSurface(dataItemSurface);
                this._disposables.push(dataItemSurface.propertiesTabs.subscribe(newTabs => {
                    updatePropertiesTabs(dataItemSurface.propertiesTabs());
                }));
                updatePropertiesTabs(dataItemSurface.propertiesTabs());
            }
            else if (newModel._getBindingModel().length > 1) {
                updatePropertiesTabs([new _accordion_tab_1.ItemGroupAccordionTab(_accordion_tab_1.KnownTabs.DataItemsGroup, 'Data Items', this)]);
            }
            else {
                updatePropertiesTabs([]);
            }
        }));
        this.model(model);
        this._disposables.push({
            dispose: () => {
                this.dataFieldChoosed.empty();
            }
        });
    }
    _removeDataItem(dataItemLink) {
        var dataItem = dataItemLink.dataItem();
        if (!!dataItem) {
            dataItemLink.uniqueName(undefined);
            this.itemSurface.dashboardItem._removeDataItem(dataItem);
            if (!this.model()._getBindingModel().some(b => !!this.model()[b.propertyName].dataItem() && !this.model()[b.propertyName]._specifics.isAttribute)) {
                this.itemSurface.propertiesController.mainModel(null);
                this._removeDataItemContainer(this.model());
            }
        }
    }
    dataItemErrorFactory(dataItem) {
        var dataItemLinkErrorState = ko.observable(false);
        this._disposables.push(ko.computed(() => {
            if (!!dataItem && dataItem.dataMember()) {
                this.itemSurface._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), dataItem.dataMember()).done((result) => {
                    dataItemLinkErrorState(!result);
                });
            }
        }));
        return dataItemLinkErrorState;
    }
    dispose() {
        this._disposables.forEach((d) => {
            d.dispose();
        });
    }
}
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DataItemContainerSurface.prototype, "_removeDataItem", null);
exports.DataItemContainerSurface = DataItemContainerSurface;
ko.components.register('dx-dashboard-group-data-items', {
    viewModel: {
        createViewModel: (params) => {
            var model = ko.unwrap(params.model);
            var viewModel = {
                dataItems: model._getBindingModel().map(binding => {
                    return {
                        binding: binding,
                        item: model[binding.propertyName],
                        placeholder: binding.emptyPlaceholder,
                        removeDataItem: (item) => {
                            params.holder.removeDataItem && params.holder.removeDataItem(item);
                        },
                        dataItemDisplayNameProvider: (dataItem) => {
                            return params.holder.dataItemDisplayNameProvider && params.holder.dataItemDisplayNameProvider(dataItem) || '';
                        },
                        click: () => {
                            params.holder.selectItem && params.holder.selectItem(model, binding) || '';
                        }
                    };
                }),
                holder: params.holder
            };
            return viewModel;
        }
    },
    template: { element: 'dx-dashboard-group-data-items' }
});


/***/ }),

/***/ 47298:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataItemSurface = void 0;
const ko = __webpack_require__(71032);
const _data_source_browser_1 = __webpack_require__(9970);
const _jquery_helpers_1 = __webpack_require__(59384);
const data_item_1 = __webpack_require__(44650);
const measure_1 = __webpack_require__(17012);
const _data_field_1 = __webpack_require__(68951);
const _undo_engine_helper_1 = __webpack_require__(2908);
const _data_item_properties_composer_1 = __webpack_require__(16821);
class DataItemSurface {
    constructor(model, binding, container, dataSourceBrowser, propertiesController, unwrappedDataItem, fieldConstraint, extendTabsHandler) {
        this.model = model;
        this.binding = binding;
        this.propertiesController = propertiesController;
        this.unwrappedDataItem = unwrappedDataItem;
        this.fieldConstraint = fieldConstraint;
        this.extendTabsHandler = extendTabsHandler;
        this._disposables = [];
        this.propertiesTabs = ko.observableArray([]);
        this.choosenField = ko.observable();
        this.newItemCreated = _jquery_helpers_1.createJQueryCallbacks();
        this.itemSelected = _jquery_helpers_1.createJQueryCallbacks();
        var composer = new _data_item_properties_composer_1.DataItemsPropertiesComposer();
        var updatePropertiesTabs = () => {
            var result = composer.composeTabs(this.model, {
                dataDashboardItem: container,
                choosenField: this.choosenField,
                dataSourceBrowser: dataSourceBrowser,
                unwrappedDataItem: this.unwrappedDataItem,
                constraint: this.fullConstraint,
                propertiesController: this.propertiesController
            });
            this.extendTabsHandler && this.extendTabsHandler(result, this.model.dataItem());
            var promise = dataSourceBrowser.getDataFieldsArray(container.dataSource(), container.dataMember(), '', _data_source_browser_1.isNonCollectionDataField);
            promise.done(() => {
                let oldTabs = this.propertiesTabs.peek();
                oldTabs && oldTabs.forEach(tab => tab.dispose());
                this.propertiesTabs(result);
            });
        };
        var subscribeToFieldChanges = () => {
            this._disposables.push(this.choosenField.subscribe((newField) => {
                if (model.dataItem() && model.dataItem().dataMember()) {
                    this._changeExistingField(container, model, newField, updatePropertiesTabs);
                }
                else {
                    this._changeNewField(container, newField, updatePropertiesTabs);
                }
            }));
            updatePropertiesTabs();
        };
        if (!!model.dataItem()) {
            dataSourceBrowser
                .findDataField(container.dataSource(), container.dataMember(), model.dataItem().dataMember())
                .done((field) => {
                if (!!field && field !== this.choosenField()) {
                    this.choosenField(field);
                }
                subscribeToFieldChanges();
            });
        }
        else {
            subscribeToFieldChanges();
        }
        this._disposables.push({
            dispose: () => {
                this.newItemCreated.empty();
            }
        });
    }
    _changeNewField(container, newField, additionalFunc) {
        if (this.model.itemType() !== 'Seed') {
            if (!_data_field_1.IsOlapHierarchyField(newField)) {
                var dataItem = container._createDataItem(newField, this.binding);
                if (this.model._specifics.isAttribute && dataItem instanceof measure_1.Measure) {
                    dataItem.summaryType('Min');
                }
                this.model.uniqueName(dataItem.uniqueName());
                this.newItemCreated.fire(this.model, newField);
                this.itemSelected.fire(this.model, newField);
            }
            else {
                var groupIndex = newField.groupIndex();
                newField['groupDataItems'].forEach((groupItem, index) => {
                    var dataItem = container._createDataItem(groupItem, this.binding);
                    dataItem.groupIndex(groupIndex);
                    if (index === 0) {
                        this.model.uniqueName(dataItem.uniqueName());
                        this.newItemCreated.fire(this.model, groupItem);
                    }
                    else {
                        var model = new data_item_1.DataItemLink(container);
                        model.uniqueName(dataItem.uniqueName());
                        this.newItemCreated.fire(model, groupItem);
                    }
                });
                this.itemSelected.fire(this.model, newField['groupDataItems'][0]);
            }
        }
        else {
            this.newItemCreated.fire(this.model, newField);
            this.itemSelected.fire(this.model, newField);
        }
        additionalFunc();
    }
    _changeExistingField(container, model, newField, additionalFunc) {
        if (!_data_field_1.IsOlapHierarchyField(newField)) {
            container._updateDataItem(model.dataItem(), this.binding, newField, model._specifics.acceptableShapingType);
        }
        else {
            var groupIndex = newField.groupIndex();
            newField['groupDataItems'].forEach((groupItem, index) => {
                if (index === 0) {
                    container._updateDataItem(model.dataItem(), this.binding, groupItem, model._specifics.acceptableShapingType);
                    model.dataItem().groupIndex(groupIndex);
                }
                else {
                    var dataItem = container._createDataItem(groupItem, this.binding);
                    dataItem.groupIndex(groupIndex);
                    var dataItemLink = new data_item_1.DataItemLink(container);
                    dataItemLink.uniqueName(dataItem.uniqueName());
                    this.newItemCreated.fire(dataItemLink, groupItem);
                }
            });
        }
        additionalFunc();
    }
    get commonDataItemTypeConstraint() {
        if (this.binding.dataItemType === 'Dimension') {
            return (field) => _data_field_1.DataField.ifOlapThenOnlyDimension(field) && !(field.isAggregate && field.isAggregate());
        }
        if (this.binding.dataItemType === 'Measure') {
            return (field) => _data_field_1.DataField.ifOlapThenOnlyMeasure(field);
        }
        return () => true;
    }
    get fullConstraint() {
        return (field) => {
            if (!this.commonDataItemTypeConstraint(field))
                return false;
            if (field.isDataFieldNode()) {
                return !this.fieldConstraint || this.fieldConstraint(field);
            }
            else {
                return true;
            }
        };
    }
    dispose() {
        this._disposables.forEach((d) => {
            d.dispose();
        });
    }
}
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DataItemSurface.prototype, "_changeNewField", null);
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DataItemSurface.prototype, "_changeExistingField", null);
exports.DataItemSurface = DataItemSurface;


/***/ }),

/***/ 62509:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContainerTypeSelector = void 0;
const ko = __webpack_require__(71032);
const MAX_ICON_NUMBER = 7;
class ContainerTypeSelector {
    constructor(_containersMap, containerType, _containerGroupLocalization, _highlightedTypes) {
        this._containersMap = _containersMap;
        this.containerType = containerType;
        this._containerGroupLocalization = _containerGroupLocalization;
        this._highlightedTypes = _highlightedTypes;
        this.headerClick = (data, event) => {
            if (!this.hasFullList) {
                event.stopPropagation();
                return false;
            }
        };
        this.itemClick = (data, event) => {
            this.containerType(ko.unwrap(data.value));
            event.stopPropagation();
            event.originalEvent && event.originalEvent.stopPropagation();
            return false;
        };
    }
    get shortAvailableContainerTypes() {
        var iconNumber = MAX_ICON_NUMBER - (this.hasFullList ? 1 : 0);
        var highlightedTypes = this.availableContainerTypes
            .filter(type => {
            if (this._highlightedTypes) {
                return this._highlightedTypes.indexOf(type.value) !== -1;
            }
            else {
                return true;
            }
        })
            .slice(0, iconNumber);
        var selected = this.availableContainerTypes.filter(t => t.selected)[0];
        if (selected) {
            if (!highlightedTypes.filter(containerType => containerType.value === selected.value)[0]) {
                highlightedTypes.pop();
                highlightedTypes.unshift(selected);
            }
        }
        return highlightedTypes;
    }
    get hasFullList() {
        var length = Object.keys(this._containersMap).length;
        return (length > MAX_ICON_NUMBER);
    }
    get availableContainerTypes() {
        var containerTypes = Object.keys(this._containersMap || {}).map(name => {
            var info = this._containersMap[name];
            return {
                value: name,
                group: info.group,
                displayName: info.displayName,
                icon: info.icon,
                selected: name === this.containerType()
            };
        });
        return containerTypes;
    }
    get availableContainerTypeGroups() {
        return Object.keys(this._containersMap).reduce((groups, value) => {
            var info = this._containersMap[value];
            if (!groups.filter(group => group.name === info.group)[0]) {
                groups.push({
                    name: info.group,
                    displayName: this._containerGroupLocalization && this._containerGroupLocalization[info.group] || info.group
                });
            }
            return groups;
        }, []);
    }
}
exports.ContainerTypeSelector = ContainerTypeSelector;


/***/ }),

/***/ 20942:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardItemPropertiesComposer = exports.DataItemContainerPropertiesComposer = exports.PropertiesComposerBase = void 0;
class PropertiesComposerBase {
    constructor(_customizeTabs) {
        this._customizeTabs = _customizeTabs;
    }
    composeTabs(model, args) {
        var tabs = this._composeTabsCore(model, args);
        this._customizeTabs(tabs, model, args);
        return tabs;
    }
}
exports.PropertiesComposerBase = PropertiesComposerBase;
class DataItemContainerPropertiesComposer extends PropertiesComposerBase {
    constructor(_customizeTabs) {
        super(_customizeTabs);
    }
}
exports.DataItemContainerPropertiesComposer = DataItemContainerPropertiesComposer;
class DashboardItemPropertiesComposer extends PropertiesComposerBase {
    constructor(_customizeTabs) {
        super(_customizeTabs);
    }
}
exports.DashboardItemPropertiesComposer = DashboardItemPropertiesComposer;


/***/ }),

/***/ 53239:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BoundImageItemPropertiesComposer = void 0;
const _bound_image_item_1 = __webpack_require__(49320);
const _image_item_1 = __webpack_require__(67286);
const _accordion_tab_1 = __webpack_require__(74885);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class BoundImageItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler) {
        super(customizeHandler);
    }
    _composeTabsCore(model) {
        var specificDisabledRules = {};
        specificDisabledRules[_bound_image_item_1.uriPattern.propertyName] = [_bound_image_item_1.dataBindingMode.propertyName, '<>', 'Uri'];
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.ImageOptions', _shared_composers_1.SharedComposers.getCommonWrapper(model, [
                _bound_image_item_1.dataBindingMode,
                _bound_image_item_1.uriPattern,
                _image_item_1.sizeMode,
                _image_item_1.horizontalAlignment,
                _image_item_1.verticalAlignment,
            ], specificDisabledRules))
        ];
        return result;
    }
}
exports.BoundImageItemPropertiesComposer = BoundImageItemPropertiesComposer;


/***/ }),

/***/ 96390:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BubleMapItemPropertiesComposer = void 0;
const ko = __webpack_require__(71032);
const _geo_point_map_item_base_1 = __webpack_require__(13886);
const _map_item_1 = __webpack_require__(1035);
const _accordion_tab_1 = __webpack_require__(74885);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class BubleMapItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler) {
        super(customizeHandler);
    }
    _composeTabsCore(model, args) {
        var commonTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common');
        ko.computed(() => {
            commonTab.tabModel(_shared_composers_1.SharedComposers.getCommonMapWrapper(model, args.propertiesController, [
                _map_item_1.lockNavigation,
                _geo_point_map_item_base_1.enableClustering,
                _shared_composers_1.SharedComposers.getShapeTitleSerializationInfo(model)
            ]));
        });
        return [
            commonTab,
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ColorLegend, 'DashboardWebStringId.AccordionTab.MapLegend', _shared_composers_1.SharedComposers.getColorLegendWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.WeightedLegend, 'DashboardWebStringId.AccordionTab.WeightedLegend', _shared_composers_1.SharedComposers.getWeightedLegendWrapper(model))
        ];
    }
}
exports.BubleMapItemPropertiesComposer = BubleMapItemPropertiesComposer;


/***/ }),

/***/ 82992:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCalculationArgumentExpression = exports.CalculationPropertiesComposer = void 0;
const ko = __webpack_require__(71032);
const _helpers_1 = __webpack_require__(49105);
const _jquery_helpers_1 = __webpack_require__(59384);
const _measure_1 = __webpack_require__(72150);
const _helpers_2 = __webpack_require__(8661);
const _expression_utils_1 = __webpack_require__(79537);
const _window_definition_editor_1 = __webpack_require__(14104);
const _expression_editor_display_name_provider_1 = __webpack_require__(87953);
const _expression_editor_item_provider_1 = __webpack_require__(14531);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
class CalculationPropertiesComposer {
    composeTabs(model, args) {
        var commonTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common');
        this.fillCommonWrapper(commonTab, model, args.dashboardItem, args.dataSourceBrowser);
        return [commonTab];
    }
    fillCommonWrapper(tab, model, dashboardItem, dataSourceBrowser) {
        var p = [];
        var visibilityRules = {};
        p.push(Object.assign(Object.assign({}, _measure_1.windowDefinition), { formAdapterItem: _window_definition_editor_1.windowDefinitionEditor({ dataDashboardItem: dashboardItem, dataSourceBrowser: dataSourceBrowser }) }));
        if (!model.expression()) {
            p.push({
                container: _measure_1.calculation,
                properties: [{
                        container: (model.calculation.getInfo()[0]),
                        properties: (model.calculation.calculation().getInfo())
                    }]
            });
        }
        var wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: p,
            visibilityFilterRules: visibilityRules
        });
        let expressionArgument = ko.observable();
        var getExpression = () => {
            if (!!model.expression()) {
                return model.expression();
            }
            return !!model.calculation.calculation() ? model.calculation.calculation()._getExpression(expressionArgument()) : '';
        };
        getCalculationArgumentExpression(model, dashboardItem, dataSourceBrowser)
            .done(expr => {
            expressionArgument(expr);
        });
        var expression = ko.computed({
            read: getExpression,
            write: (val) => {
                if (val !== getExpression()) {
                    model.expression(val);
                }
            }
        });
        var expressionOptions = {
            value: expression,
            path: ko.observable(dashboardItem.dataMember() ? [dashboardItem.dataSource(), dashboardItem.dataMember()].join('.') : dashboardItem.dataSource()),
            patchFieldName: (fieldPath) => {
                if (fieldPath.indexOf('Parameters.Parameters.') === 0) {
                    return 'Parameters.' + fieldPath.split('.')[2];
                }
                return fieldPath;
            },
        };
        var itemsProvider = new _expression_editor_item_provider_1.ExpressionEditorItemsProvider(dataSourceBrowser, dataSourceBrowser, dataSourceBrowser.parameters && dataSourceBrowser.parameters(), dashboardItem.dataSource, dashboardItem.dataMember);
        let displayNameProvider = _expression_editor_display_name_provider_1.ExpressionEditorDisplayNameProvider.create(dataSourceBrowser, dataSourceBrowser, dashboardItem.dataSource(), dashboardItem.dataMember());
        const collectionEditorOptions = {
            options: ko.observable(expressionOptions),
            fieldListProvider: ko.observable(itemsProvider),
            displayNameProvider: displayNameProvider
        };
        wrapper.addProperty(ko.observable(), { propertyName: 'expressionOptions', displayName: 'DashboardStringId.CalculationTypeExpression', formAdapterItem: _form_adapter_editors_1.calculationExpressionEditor(collectionEditorOptions) });
        tab.tabModel(wrapper);
    }
}
exports.CalculationPropertiesComposer = CalculationPropertiesComposer;
function getCalculationArgumentExpression(measure, dashboardItem, dataFieldProvider) {
    let deferred = _jquery_helpers_1.createJQueryDeferred();
    let summaryExpression = _helpers_2.getSummaryExpression(measure.dataMember(), measure.summaryType());
    if (!measure.filterString())
        return deferred.resolve(summaryExpression).promise();
    _helpers_1.getDimensionsExpressions(dashboardItem, dataFieldProvider)
        .done(dimnensionsExpressions => {
        let patchedExpression = _expression_utils_1.insertDimensionsExpressionsIntoFilterExpression(measure.filterString(), dimnensionsExpressions);
        deferred.resolve(`filter(${summaryExpression}, ${patchedExpression})`);
    });
    return deferred.promise();
}
exports.getCalculationArgumentExpression = getCalculationArgumentExpression;


/***/ }),

/***/ 28439:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardElementPropertiesComposer = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const card_item_delta_format_rule_1 = __webpack_require__(50075);
const _dashboard_item_format_rule_1 = __webpack_require__(41938);
const _undo_engine_helper_1 = __webpack_require__(2908);
const card_1 = __webpack_require__(15942);
const card_layout_template_1 = __webpack_require__(47388);
const _card_1 = __webpack_require__(64958);
const _card_row_1 = __webpack_require__(24481);
const _data_dashboard_item_1 = __webpack_require__(66302);
const _sparkline_options_1 = __webpack_require__(73612);
const _base_metadata_1 = __webpack_require__(17916);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const _display_name_provider_1 = __webpack_require__(8464);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class CardElementPropertiesComposer extends _base_properties_composer_1.DataItemContainerPropertiesComposer {
    constructor(customizeHandler, editTemplateHandler = (model) => { }, editFormat = (model) => { }, applyTemplateToAllCards = (template) => { }, editRuleHandler = () => { }) {
        super(customizeHandler);
        this.editTemplateHandler = editTemplateHandler;
        this.editFormat = editFormat;
        this.applyTemplateToAllCards = applyTemplateToAllCards;
        this.editRuleHandler = editRuleHandler;
    }
    _composeTabsCore(model, args) {
        var commonTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.Options', this.getCommonWrapper(model, args.dashboardItem, args.dataSourceBrowser)), deltaTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DeltaOptions, 'DashboardWebStringId.Grid.DeltaOptions'), sparklineTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.SparklineOptions, 'DashboardWebStringId.Card.SparklineOptions', this.getSparklineWrapper(model)), templatesTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.CardTemplates, 'DashboardWebStringId.CardLayout.Editor.CardLayout'), deltaFormatsTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DeltaFormats, 'DashboardWebStringId.CardLayout.Editor.FormatOptions'), conditionalFormattingTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting'), result = [commonTab, templatesTab, deltaTab, sparklineTab, deltaFormatsTab, conditionalFormattingTab];
        if (model instanceof card_1.Card) {
            ko.computed(() => {
                deltaTab.tabModel(_shared_composers_1.SharedComposers.getDeltaOptionsWrapper(model._isTypeEmpty() ? model.deltaOptions : model.cardDeltaOptions));
            });
            conditionalFormattingTab.tabModel(this.getFormatRulesWrapper(model, args.dashboardItem));
            this.fillTemplatesTab(templatesTab, model);
            deltaFormatsTab.tabModel(_shared_composers_1.SharedComposers.getDeltaFormatsOptionsWrapper(model, this.editFormat));
        }
        return result;
    }
    getCommonWrapper(model, dashboardItem, dataSourceBrowser) {
        var properties = [
            Object.assign({ editorOptions: { placeholder: _display_name_provider_1.getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, model) } }, _base_metadata_1.name)
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: null
        });
    }
    getSparklineWrapper(model) {
        var properties = _shared_composers_1.SharedComposers.getSparklineOptionsProperties();
        var disabledRules = {};
        disabledRules[_sparkline_options_1.viewType.propertyName] = [_card_1.showSparkline.propertyName, '=', false];
        disabledRules[_sparkline_options_1.highlightMinMaxPoints.propertyName] = [_card_1.showSparkline.propertyName, '=', false];
        disabledRules[_sparkline_options_1.highlightStartEndPoints.propertyName] = [_card_1.showSparkline.propertyName, '=', false];
        var visibilityRules = {};
        visibilityRules[_card_1.showSparkline.propertyName] = () => model._isTypeEmpty();
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [
                _card_1.showSparkline,
                {
                    container: _card_row_1.cardSparklineRowOptions,
                    properties: properties
                }
            ],
            disabledFilterRules: disabledRules,
            visibilityFilterRules: visibilityRules
        });
    }
    fillTemplatesTab(tab, card) {
        var availableTemplates = ko.computed(() => this.getAvailableTemplates(card));
        var selectedTemplate = ko.computed({
            read: () => {
                return card.layoutTemplate();
            },
            write: (newTemplate) => {
                this.switchTemplate(card, newTemplate);
            }
        });
        const singleChoiceEditorOptions = {
            propertyName: 'title',
            dataSource: availableTemplates(),
            enableEditItem: (item) => !(item instanceof card_layout_template_1.CardEmptyLayoutTemplate),
            editItemHandler: this.editTemplateHandler,
            customToolbarItems: [{
                    name: _default_1.getLocalizationById('DashboardWebStringId.CardLayout.ApplyToAllCards'),
                    icon: '#dx-dashboard-template-to-all-cards',
                    action: () => { this.applyTemplateToAllCards(selectedTemplate()); }
                }],
        };
        tab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: { layoutTemplates: selectedTemplate },
            properties: [{
                    formAdapterItem: _form_adapter_editors_1.editableListEditor(singleChoiceEditorOptions),
                    propertyName: 'layoutTemplates'
                }]
        }));
    }
    switchTemplate(card, newTemplate) {
        var templateChanged = (newTemplate) => {
            return card.layoutTemplate().getType() !== newTemplate.getType();
        };
        if (templateChanged(newTemplate)) {
            card._setTemplateSwitchingOptions(newTemplate);
        }
    }
    getAvailableTemplates(card) {
        var result = [];
        var currentTemplateAdded = false;
        var currentTemplate = card.layoutTemplate();
        var addTemplate = (templateClass) => {
            var templateInstance = new templateClass();
            if (templateInstance.getType() === currentTemplate.getType()) {
                result.push(currentTemplate);
                currentTemplateAdded = true;
            }
            else {
                templateInstance._resetToDefaults();
                result.push(templateInstance);
            }
        };
        addTemplate(card_layout_template_1.CardStretchedLayoutTemplate);
        addTemplate(card_layout_template_1.CardCenteredLayoutTemplate);
        addTemplate(card_layout_template_1.CardCompactLayoutTemplate);
        addTemplate(card_layout_template_1.CardLightweightLayoutTemplate);
        if (!currentTemplateAdded) {
            result.push(currentTemplate);
        }
        return result;
    }
    getFormatRulesWrapper(model, dashboardItem) {
        var collectionEditorOptions = {
            propertyName: _dashboard_item_format_rule_1.classCaption.propertyName,
            createNewItemHandler: () => {
                var rule = new card_item_delta_format_rule_1.CardItemDeltaFormatRule();
                rule.cardId(model._getDataId());
                return rule;
            },
            editItemHandler: this.editRuleHandler,
            visibleItemsFilter: (rule) => (rule instanceof card_item_delta_format_rule_1.CardItemDeltaFormatRule) && rule.cardId() === model._getDataId(),
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: dashboardItem,
            properties: [Object.assign(Object.assign({}, _data_dashboard_item_1.formatRules), { formAdapterItem: _form_adapter_editors_1.collectionEditor(collectionEditorOptions) })]
        });
    }
}
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], CardElementPropertiesComposer.prototype, "switchTemplate", null);
exports.CardElementPropertiesComposer = CardElementPropertiesComposer;


/***/ }),

/***/ 31641:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardItemPropertiesComposer = void 0;
const card_item_delta_format_rule_1 = __webpack_require__(50075);
const card_item_format_rule_1 = __webpack_require__(22233);
const _card_item_format_rule_properties_composer_1 = __webpack_require__(67551);
const _accordion_tab_1 = __webpack_require__(74885);
const _base_properties_composer_1 = __webpack_require__(20942);
const _data_item_properties_composer_1 = __webpack_require__(16821);
const _shared_composers_1 = __webpack_require__(44726);
class CardItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler, editRuleHandler) {
        super(customizeHandler);
        this.editRuleHandler = editRuleHandler;
    }
    _composeTabsCore(model, args) {
        return [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ContentArrangement, 'DashboardWebStringId.AccordionTab.Layout', _shared_composers_1.SharedComposers.getContentArrangementWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', _data_item_properties_composer_1.DataItemsPropertiesComposer.getFormatRulesWrapper(model, () => !_card_item_format_rule_properties_composer_1.isDeltaFormatRuleAvaliable(model) ? new card_item_format_rule_1.CardItemFormatRule() : new card_item_delta_format_rule_1.CardItemDeltaFormatRule(), () => true, this.editRuleHandler))
        ];
    }
}
exports.CardItemPropertiesComposer = CardItemPropertiesComposer;


/***/ }),

/***/ 4677:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardTemplatePropertiesComposer = void 0;
const analytics_internal_1 = __webpack_require__(19745);
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _knockout_utils_1 = __webpack_require__(4437);
const _undo_engine_helper_1 = __webpack_require__(2908);
const _card_layout_1 = __webpack_require__(7667);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const _collection_editor_viewmodel_base_1 = __webpack_require__(37965);
class CardTemplatePropertiesComposer {
    composeTabs(model, args) {
        if (args.applyTemplateToAllCards === undefined)
            args.applyTemplateToAllCards = (template) => { };
        var layoutsTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.CardTemplateSettings, 'DashboardWebStringId.CardLayout.LayoutOptions');
        this.fillLayoutsTab(layoutsTab, model, args.dimensionNames, args.applyTemplateToAllCards);
        return [layoutsTab];
    }
    fillLayoutsTab(tab, template, dimensionNames, applyTemplateToAllCards) {
        const refreshCallback = new _collection_editor_viewmodel_base_1.CollectionEditorRefreshCallback();
        const propertiesList = template._collectProperties(dimensionNames);
        const subscriptions = propertiesList.map(item => _knockout_utils_1.safeSubscribe({ checked: item.checked, selectedItem: item.selectedItem || (() => { }) }, () => refreshCallback.refresh()));
        const collectionEditorOptions = {
            dataFields: ['checked', 'title', 'selectedItem', 'lookupDataSource'],
            isToolbarVisible: false,
            gridColumns: [{
                    dataField: 'checked',
                    dataType: 'boolean',
                    width: 40,
                }, {
                    dataField: 'selectedItem',
                    calculateDisplayValue: (rowData) => rowData.title,
                    lookup: {
                        displayExpr: 'displayText',
                        valueExpr: 'key',
                    },
                }],
            customizeInlineEditor: (e) => {
                e.editorOptions.dataSource = e.row.data.lookupDataSource;
                if (e.dataField === 'selectedItem') {
                    var oldValueChanged = e.editorOptions.onValueChanged;
                    e.editorOptions.onValueChanged = function (ee) {
                        oldValueChanged.call(ee.component, ee);
                        setTimeout(() => e.component.saveEditData());
                    };
                }
            },
            customizeCell: (e) => {
                if (!e.isEditing && e.column.dataField === 'selectedItem' && !!e.data.lookupDataSource) {
                    var icon = _utils_1.createSvgIconElement('dx-dashboard-ce-edit');
                    const div = document.createElement('div');
                    div.appendChild(icon);
                    div.classList.add('custom-edit-icon');
                    div.classList.add('dx-dashboard-editable-cell');
                    _jquery_helpers_1.$unwrap(e.cellElement).appendChild(div);
                }
            },
            enableEditItem: (selectedItem, e) => {
                if (e.column.dataField === 'selectedItem')
                    return !!e.data.lookupDataSource;
                return true;
            },
            forceRefreshCallback: refreshCallback,
        };
        tab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: {
                minWidth: template.minWidth,
                maxWidth: template.maxWidth,
                templateProperties: ko.observableArray(propertiesList),
                buttonsFakeProperty: {},
            },
            properties: [
                Object.assign(Object.assign({}, _card_layout_1.minWidth), { formAdapterItem: _form_adapter_editors_1.numberBoxEditor({ min: 1, format: '0#' }) }),
                Object.assign(Object.assign({}, _card_layout_1.maxWidth), { formAdapterItem: _form_adapter_editors_1.nullableNumberBoxEditor({ defaultValue: 200, editorOptions: { min: 1, format: '0#' } }) }),
                {
                    formAdapterItem: _form_adapter_editors_1.inlineEditCollectionEditor(collectionEditorOptions),
                    propertyName: 'templateProperties',
                }, {
                    propertyName: 'buttonsFakeProperty',
                    formAdapterItem: _form_adapter_editors_1.actionButtons([
                        {
                            text: analytics_internal_1.localize('DashboardWebStringId.CardLayout.ResetTemplate'),
                            onClick: () => this.resetTemplate(template),
                            elementAttr: { class: 'dx-dashboard-card-template-reset-button' }
                        },
                        {
                            text: analytics_internal_1.localize('DashboardWebStringId.CardLayout.ApplyToAllCards'),
                            onClick: () => applyTemplateToAllCards(template),
                            elementAttr: { class: 'dx-dashboard-card-template-apply-all-button' }
                        }
                    ]),
                }
            ],
            disposableModelSubscriptions: subscriptions,
        }));
    }
    resetTemplate(template) {
        template._resetToDefaults();
    }
}
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], CardTemplatePropertiesComposer.prototype, "resetTemplate", null);
exports.CardTemplatePropertiesComposer = CardTemplatePropertiesComposer;


/***/ }),

/***/ 20562:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChartItemPropertiesComposer = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _data_field_1 = __webpack_require__(68951);
const _chart_axis_1 = __webpack_require__(45308);
const _chart_item_1 = __webpack_require__(88370);
const _accordion_tab_1 = __webpack_require__(74885);
const _display_name_provider_1 = __webpack_require__(8464);
const _base_properties_composer_1 = __webpack_require__(20942);
const _data_item_properties_composer_1 = __webpack_require__(16821);
const _shared_composers_1 = __webpack_require__(44726);
class ChartItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler, editCFRuleHandler, createCFRuleDelegate) {
        super(customizeHandler);
        this.editCFRuleHandler = editCFRuleHandler;
        this.createCFRuleDelegate = createCFRuleDelegate;
    }
    _getAxisXTabModel(model, dataSourceBrowser, argumentDataField) {
        var groupInterval = model.arguments()[0] ? model.arguments()[0].dateTimeGroupInterval() : 'None';
        var isOlap = argumentDataField && _data_field_1.DataField.isOlap(argumentDataField.dataMember());
        return _shared_composers_1.SharedComposers.getAxisWrapper(model.axisX, ko.pureComputed(() => {
            var argumentsNumber = model.arguments().length;
            if (!argumentsNumber) {
                return '';
            }
            else if (argumentsNumber === 1) {
                return model.arguments()[0] && _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, model, model.arguments()[0]);
            }
            else
                return 'Arguments';
        }), null, _data_field_1.DataField.isDateTime(argumentDataField) && !isOlap, _data_field_1.DataField.isNumeric(argumentDataField) && !isOlap, groupInterval);
    }
    _composeTabsCore(model, args) {
        let argumentDataField = ko.observable();
        if (model.arguments().length == 1) {
            var dimension = model.arguments()[0];
            args.dataSourceBrowser.findDataField(model.dataSource(), model.dataMember(), dimension.dataMember()).done(dataField => {
                argumentDataField(dataField);
            });
        }
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model, [_chart_item_1.chartRotated])),
        ];
        var axisXTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.AxisX, 'DashboardWebStringId.Chart.AxisX');
        axisXTab.tabModel(this._getAxisXTabModel(model, args.dataSourceBrowser, argumentDataField()));
        argumentDataField.subscribe(dataField => { axisXTab.tabModel(this._getAxisXTabModel(model, args.dataSourceBrowser, dataField)); });
        result.push(axisXTab);
        if (model) {
            model.panes().forEach((pane) => {
                var numberPostfix = model.panes().length === 1 ? '' : ' (' + pane.name() + ')';
                result.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.AxisY + numberPostfix, _default_1.getLocalizationById('DashboardWebStringId.Chart.AxisY') + numberPostfix, _shared_composers_1.SharedComposers.getAxisWrapper(pane.primaryAxisY, ko.pureComputed(() => {
                    var series = pane.series().filter(s => !s.plotOnSecondaryAxis());
                    if (!series.length) {
                        return '';
                    }
                    var dataItems = series.reduce((array, singleSeries) => {
                        return array.concat(singleSeries
                            ._getBindingModel()
                            .map(b => singleSeries[b.propertyName])
                            .filter(dil => !!dil.dataItem())
                            .map(dil => dil.dataItem()));
                    }, []);
                    if (dataItems.length === 1) {
                        return _display_name_provider_1.getDataItemDisplayName(args.dataSourceBrowser, model, dataItems[0]);
                    }
                    else
                        return 'Values';
                }), _chart_axis_1.chartAlwaysShowZeroLevel)));
                if (pane.series().filter(s => s.plotOnSecondaryAxis()).length > 0) {
                    result.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.AxisY + 'secondary' + numberPostfix, _default_1.getLocalizationById('DashboardWebStringId.Chart.AxisYSecondary') + numberPostfix, _shared_composers_1.SharedComposers.getAxisWrapper(pane.secondaryAxisY, ko.pureComputed(() => {
                        var series = pane.series().filter(s => s.plotOnSecondaryAxis());
                        if (!series.length) {
                            return '';
                        }
                        else if (series.length === 1) {
                            return _display_name_provider_1.getDataItemContainerDisplayName(args.dataSourceBrowser, model, series[0]);
                        }
                        else
                            return 'Values';
                    }), _chart_axis_1.chartAlwaysShowZeroLevel)));
                }
            });
        }
        result.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Legend, 'DashboardWebStringId.AccordionTab.ChartLegend', _shared_composers_1.SharedComposers.getLegendWrapper(model)));
        result.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', _data_item_properties_composer_1.DataItemsPropertiesComposer.getFormatRulesWrapper(model, () => this.createCFRuleDelegate(), () => true, this.editCFRuleHandler)));
        return result;
    }
}
exports.ChartItemPropertiesComposer = ChartItemPropertiesComposer;


/***/ }),

/***/ 94766:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChartSeriesPropertiesComposer = void 0;
const _chart_data_controller_proto_1 = __webpack_require__(45709);
const chart_series_1 = __webpack_require__(34303);
const chart_series_creator_1 = __webpack_require__(52469);
const _chart_series_1 = __webpack_require__(86254);
const _dashboard_item_coloring_options_1 = __webpack_require__(9309);
const _base_metadata_1 = __webpack_require__(17916);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const _display_name_provider_1 = __webpack_require__(8464);
const _container_type_selector_1 = __webpack_require__(62509);
const _base_properties_composer_1 = __webpack_require__(20942);
const _data_item_properties_composer_1 = __webpack_require__(16821);
const _shared_composers_1 = __webpack_require__(44726);
class ChartSeriesPropertiesComposer extends _base_properties_composer_1.DataItemContainerPropertiesComposer {
    constructor(customizeHandler, _containerTypesMap = chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap, _allowConfigurePointLabels = true, _allowSecondaryAxis = true, _editCFRuleHandler, _createCFRuleDelegate) {
        super(customizeHandler);
        this._containerTypesMap = _containerTypesMap;
        this._allowConfigurePointLabels = _allowConfigurePointLabels;
        this._allowSecondaryAxis = _allowSecondaryAxis;
        this._editCFRuleHandler = _editCFRuleHandler;
        this._createCFRuleDelegate = _createCFRuleDelegate;
    }
    _composeTabsCore(model, args) {
        var typeTab = new _accordion_tab_1.TypeAccordionTab(_accordion_tab_1.KnownTabs.Type, 'DashboardWebStringId.Type'), commonTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.Options'), pointLabelsTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.PointLabels, 'DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions'), coloringTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ColoringOptions, 'DashboardWebStringId.ColoringOptions'), conditionalFormattingTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting'), result = [typeTab, commonTab, coloringTab, pointLabelsTab, conditionalFormattingTab];
        this._fillSeriesTypeWrapper(typeTab, model, args.containerType);
        this._fillSeriesGeneralTab(commonTab, model, args.dashboardItem, args.dataSourceBrowser);
        this._fillConditionalFormattingTab(conditionalFormattingTab, model, args.dashboardItem, args.dataSourceBrowser);
        if (model && model[_chart_series_1.plotOnSecondaryAxis.propertyName]) {
            coloringTab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
                model: args.dashboardItem.coloringOptions,
                properties: [_dashboard_item_coloring_options_1.measuresColoringMode]
            }));
        }
        if (this._allowConfigurePointLabels) {
            pointLabelsTab.tabModel(_shared_composers_1.SharedComposers.getLabelsWrapper(model));
        }
        return result;
    }
    _fillSeriesTypeWrapper(tab, model, containerType) {
        if (model) {
            var hightlightedTypes = [
                'Bar',
                'StackedBar',
                'Point',
                'Line',
                'Area',
                'RangeArea'
            ];
            tab.tabModel(new _container_type_selector_1.ContainerTypeSelector(this._containerTypesMap, containerType, chart_series_creator_1.ChartSeriesCreator.chartSeriesGroupLocalization, hightlightedTypes));
        }
    }
    _showPointMarkersVisible(model) {
        return (model instanceof chart_series_1.RangeSeries || model instanceof chart_series_1.SimpleSeries) && _chart_data_controller_proto_1.allowedTypesForShowPointMarkers.indexOf(model.seriesType()) !== -1;
    }
    _showIgnoreEmptyPointsVisible(model) {
        var stackedTypes = ['FullStackedLine', 'StackedSplineArea', 'FullStackedSplineArea', 'StackedArea', 'FullStackedArea'];
        if (model instanceof chart_series_1.SimpleSeries && stackedTypes.indexOf(model.seriesType()) !== -1)
            return true;
        else
            return this._showPointMarkersVisible(model);
    }
    _fillSeriesGeneralTab(tab, model, dashboardItem, dataSourceBrowser) {
        if (model) {
            var properties = [
                Object.assign({ editorOptions: { placeholder: _display_name_provider_1.getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, model) } }, _base_metadata_1.name),
                _chart_series_1.plotOnSecondaryAxis,
                _chart_series_1.ignoreEmptyPoints,
                _chart_series_1.showPointMarkers
            ];
            var visibilityFilterRules = {};
            visibilityFilterRules[_chart_series_1.ignoreEmptyPoints.propertyName] = (propertiesWrapper) => this._showIgnoreEmptyPointsVisible(propertiesWrapper.model);
            visibilityFilterRules[_chart_series_1.showPointMarkers.propertyName] = (propertiesWrapper) => this._showPointMarkersVisible(propertiesWrapper.model);
            visibilityFilterRules[_chart_series_1.plotOnSecondaryAxis.propertyName] = (propertiesWrapper) => this._allowSecondaryAxis;
            tab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
                model: model,
                properties: properties,
                visibilityFilterRules: visibilityFilterRules
            }));
        }
    }
    _fillConditionalFormattingTab(tab, series, dashboardItem, dataSourceBrowser) {
        if (!series._isConditionalFormattingSupported)
            return;
        const cfRuleCreator = () => {
            const cfRule = this._createCFRuleDelegate();
            cfRule.dataItemName(series._getDataId());
            cfRule.dataItemApplyToName(series._getDataId());
            return cfRule;
        };
        const cfRuleFilter = (cfRule) => {
            const seriesDataItemNames = series._measures
                .map(measure => measure.uniqueName())
                .filter(name => !!name);
            return seriesDataItemNames.indexOf(cfRule.dataItemName()) !== -1
                || seriesDataItemNames.indexOf(cfRule.dataItemApplyToName()) !== -1;
        };
        tab.tabModel(_data_item_properties_composer_1.DataItemsPropertiesComposer.getFormatRulesWrapper(dashboardItem, cfRuleCreator, cfRuleFilter, this._editCFRuleHandler));
    }
}
exports.ChartSeriesPropertiesComposer = ChartSeriesPropertiesComposer;


/***/ }),

/***/ 90592:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChoroplethMapElementPropertiesComposer = void 0;
const chorolpeth_map_1 = __webpack_require__(65032);
const chorolpeth_map_item_1 = __webpack_require__(61249);
const _chorolpeth_map_1 = __webpack_require__(60653);
const _base_metadata_1 = __webpack_require__(17916);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const _container_type_selector_1 = __webpack_require__(62509);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class ChoroplethMapElementPropertiesComposer extends _base_properties_composer_1.DataItemContainerPropertiesComposer {
    constructor(customizeHandler, editDeltaFormatHandler = (model) => { }) {
        super(customizeHandler);
        this.editDeltaFormatHandler = editDeltaFormatHandler;
    }
    _composeTabsCore(model, args) {
        var typeTab = new _accordion_tab_1.TypeAccordionTab(_accordion_tab_1.KnownTabs.Type, 'DashboardWebStringId.Map.WeightedLegendType', this.getMapTypeWrapper(model, args.containerType)), commonTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.Options', new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [
                _base_metadata_1.name,
                _chorolpeth_map_1.valueName,
                _chorolpeth_map_1.actualValueName,
                _chorolpeth_map_1.deltaName
            ]
        })), result = [typeTab, commonTab];
        if (model instanceof chorolpeth_map_1.DeltaMap) {
            result.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DeltaOptions, 'DashboardWebStringId.Grid.DeltaOptions', _shared_composers_1.SharedComposers.getDeltaOptionsWrapper(model.deltaOptions)));
            result.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DeltaFormats, 'DashboardWebStringId.CardLayout.Editor.FormatOptions', _shared_composers_1.SharedComposers.getDeltaFormatsOptionsWrapper(model, this.editDeltaFormatHandler)));
        }
        return result;
    }
    getMapTypeWrapper(model, containerType) {
        if (model) {
            return new _container_type_selector_1.ContainerTypeSelector(chorolpeth_map_item_1.ChoroplethMapItem.choroplethMapTypesMap, containerType);
        }
        return null;
    }
}
exports.ChoroplethMapElementPropertiesComposer = ChoroplethMapElementPropertiesComposer;


/***/ }),

/***/ 35434:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChoroplethMapItemPropertiesComposer = void 0;
const _chorolpeth_map_item_1 = __webpack_require__(54674);
const _map_item_1 = __webpack_require__(1035);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class ChoroplethMapItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler) {
        super(customizeHandler);
    }
    _composeTabsCore(model, args) {
        const commonTabWrapper = _shared_composers_1.SharedComposers.getCommonMapWrapper(model, args.propertiesController, [
            _shared_composers_1.SharedComposers.getAttributeNamesSerializationInfo(model, _chorolpeth_map_item_1.attributeName, false),
            _map_item_1.lockNavigation
        ]);
        return [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', commonTabWrapper),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ShapeLabels, 'DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute', this.getShapeLabelsWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ColorLegend, 'DashboardWebStringId.AccordionTab.MapLegend', _shared_composers_1.SharedComposers.getColorLegendWrapper(model))
        ];
    }
    getShapeLabelsWrapper(model) {
        var properties = [
            _shared_composers_1.SharedComposers.getShapeTitleSerializationInfo(model),
            _shared_composers_1.SharedComposers.getAttributeNamesSerializationInfo(model, _chorolpeth_map_item_1.tooltipAttributeName, true, 'DashboardWebStringId.Map.UseBindingAttribute'),
            _chorolpeth_map_item_1.includeSummaryValueToShapeTitle
        ];
        var disabledRules = {};
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules
        });
    }
}
exports.ChoroplethMapItemPropertiesComposer = ChoroplethMapItemPropertiesComposer;


/***/ }),

/***/ 78295:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomRangePropertiesComposer = void 0;
const analytics_internal_1 = __webpack_require__(19745);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _date_time_period_1 = __webpack_require__(98443);
const _limit_container_1 = __webpack_require__(11784);
const _period_limit_1 = __webpack_require__(74581);
const _base_metadata_1 = __webpack_require__(17916);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
class CustomRangePropertiesComposer {
    composeTabs(model, args) {
        var commonTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', this.getCommonWrapper(model, args.argument, args.rangeFilterItem));
        return [commonTab];
    }
    getCommonWrapper(model, argument, rangeFilterItem) {
        var p = [], visibilityRules = {}, dateOnly = ['Year', 'MonthYear', 'QuarterYear', 'DayMonthYear'].indexOf(argument.dateTimeGroupInterval()) !== -1;
        p.push(Object.assign(Object.assign({}, _base_metadata_1.name), { validateBeforeSet: true, validationRules: [
                {
                    type: 'custom',
                    validationCallback: (options) => { return !rangeFilterItem.dateTimePeriods().filter(period => period.name() === options.value)[0]; },
                    message: _default_1.getLocalizationById('DashboardStringId.UniqueNameValidationMessage')
                }
            ] }));
        p.push({
            container: _date_time_period_1.startLimit,
            properties: [Object.assign({ displayName: 'DashboardWebStringId.RangeFilter.StartMode', replacementPropertyName: 'start_mode' }, _date_time_period_1.mode), Object.assign(Object.assign({ displayName: 'DashboardWebStringId.RangeFilter.StartIntervalAndOffset', replacementPropertyName: 'start_flow_options' }, _limit_container_1.flowDateTimePeriodLimitProperty), { formAdapterItem: _form_adapter_editors_1.flowModeSettingsEditor() }), {
                    container: _limit_container_1.fixedDateTimePeriodLimitProperty,
                    properties: [Object.assign({ displayName: 'DashboardWebStringId.RangeFilter.StartDate', replacementPropertyName: 'start_date', editorOptions: {
                                type: dateOnly ? 'date' : 'datetime'
                            } }, _period_limit_1.date)]
                }]
        });
        visibilityRules['start_date'] = ['start_mode', '=', 'Fixed'];
        visibilityRules['start_flow_options'] = ['start_mode', '=', 'Flow'];
        p.push({
            container: _date_time_period_1.endLimit,
            properties: [Object.assign({ displayName: 'DashboardWebStringId.RangeFilter.EndMode', replacementPropertyName: 'end_mode' }, _date_time_period_1.mode), Object.assign(Object.assign({ displayName: 'DashboardWebStringId.RangeFilter.EndIntervalAndOffset', replacementPropertyName: 'end_flow_options' }, _limit_container_1.flowDateTimePeriodLimitProperty), { formAdapterItem: _form_adapter_editors_1.flowModeSettingsEditor() }), {
                    container: _limit_container_1.fixedDateTimePeriodLimitProperty,
                    properties: [Object.assign({ displayName: 'DashboardWebStringId.RangeFilter.EndDate', replacementPropertyName: 'end_date', editorOptions: {
                                type: dateOnly ? 'date' : 'datetime'
                            } }, _period_limit_1.date)]
                }]
        });
        visibilityRules['end_date'] = ['end_mode', '=', 'Fixed'];
        visibilityRules['end_flow_options'] = ['end_mode', '=', 'Flow'];
        p.push({
            propertyName: 'dateSampleFakeProperty',
            formAdapterItem: _form_adapter_editors_1.textPreviewEditor({ target: model._getPeriodTextValue }),
        });
        p.push({
            propertyName: 'buttonsFakeProperty',
            formAdapterItem: _form_adapter_editors_1.actionButtons([
                {
                    text: analytics_internal_1.localize('DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod'),
                    onClick: () => rangeFilterItem.defaultDateTimePeriodName(model.name()),
                    visible: ko.computed(() => rangeFilterItem.defaultDateTimePeriodName() !== model.name())
                },
                {
                    text: analytics_internal_1.localize('DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod'),
                    onClick: () => rangeFilterItem.defaultDateTimePeriodName(null),
                    visible: ko.computed(() => rangeFilterItem.defaultDateTimePeriodName() === model.name())
                }
            ]),
        });
        var wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: p,
            visibilityFilterRules: visibilityRules,
            modelExtention: { buttonsFakeProperty: {}, dateSampleFakeProperty: {} }
        });
        return wrapper;
    }
}
exports.CustomRangePropertiesComposer = CustomRangePropertiesComposer;


/***/ }),

/***/ 16821:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataItemsPropertiesComposer = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const difference_calculation_1 = __webpack_require__(37831);
const moving_calculation_1 = __webpack_require__(29588);
const percent_of_total_calculation_1 = __webpack_require__(85279);
const rank_calculation_1 = __webpack_require__(24150);
const running_total_calculation_1 = __webpack_require__(62747);
const data_item_1 = __webpack_require__(44650);
const dimension_1 = __webpack_require__(48336);
const measure_1 = __webpack_require__(17012);
const _data_item_1 = __webpack_require__(44010);
const _data_item_format_1 = __webpack_require__(7577);
const _dimension_1 = __webpack_require__(47557);
const _measure_1 = __webpack_require__(72150);
const _data_field_1 = __webpack_require__(68951);
const cells_item_format_rule_1 = __webpack_require__(56639);
const _dashboard_item_format_rule_1 = __webpack_require__(41938);
const _knockout_utils_1 = __webpack_require__(4437);
const _undo_engine_helper_1 = __webpack_require__(2908);
const data_dashboard_item_1 = __webpack_require__(70355);
const _data_dashboard_item_1 = __webpack_require__(66302);
const _base_metadata_1 = __webpack_require__(17916);
const _calculation_surface_1 = __webpack_require__(47160);
const _filter_utils_1 = __webpack_require__(87524);
const _item_filter_display_name_provider_1 = __webpack_require__(45834);
const _item_filter_items_provider_1 = __webpack_require__(14716);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const _properties_controller_1 = __webpack_require__(52993);
const _collection_editor_viewmodel_1 = __webpack_require__(66072);
const _display_name_provider_1 = __webpack_require__(8464);
const _calculation_properties_composer_1 = __webpack_require__(82992);
const _shared_composers_1 = __webpack_require__(44726);
class DataItemsPropertiesComposer {
    static _addConstraint(wrapper, condition, propertiesInCondition) {
        let rulesToAdd = {};
        wrapper.getInfo().map(propInfo => propInfo.propertyName).forEach(propName => rulesToAdd[propName] = condition);
        DataItemsPropertiesComposer._mergeRules(wrapper.visibilityFilterRules, rulesToAdd, 'and');
        propertiesInCondition.forEach(prop => {
            if (wrapper.getInfo().filter(p => p.propertyName === prop.info.propertyName).length === 0) {
                wrapper.addProperty(prop.value, prop.info);
                wrapper.visibilityFilterRules[prop.info.propertyName] = () => false;
            }
        });
    }
    static _mergeRules(into, rules, operator) {
        Object.keys(rules).forEach(propName => {
            let currentRule = into[propName];
            let ruleToAdd = rules[propName];
            let newRule = currentRule ? [currentRule, operator, ruleToAdd] :
                operator === 'and' ? ruleToAdd : [];
            into[propName] = newRule;
        });
    }
    composeTabs(model, args) {
        if (args.constraint === undefined)
            args.constraint = () => true;
        if (args.propertiesController === undefined)
            args.propertiesController = new _properties_controller_1.PropertiesController();
        var dataField = args.choosenField.peek(), bindingTab = new _accordion_tab_1.BindingAccordionTab(_accordion_tab_1.KnownTabs.Binding, 'DashboardWebStringId.Tabs.Binding'), optionsTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.UnwrappedDataItem, 'DashboardWebStringId.Options'), dataShapingTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DataShaping, 'DashboardWebStringId.Tabs.DataShaping'), numericFormatTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.NumericFormat, 'DashboardWebStringId.Tabs.Format'), dateTimeFormatTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DateTimeFormat, 'DashboardWebStringId.Tabs.Format'), topNTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.TopN, 'DashboardStringId.CommandFormatRuleTopN'), calculationsTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Calculations, 'DashboardWebStringId.Calculations'), filterTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.MeasureFilter, 'DashboardWebStringId.AccordionTab.MeasureFilter'), result = [bindingTab, optionsTab, dataShapingTab, numericFormatTab, dateTimeFormatTab, topNTab, calculationsTab, filterTab];
        optionsTab.orderNo = 90;
        calculationsTab.orderNo = 190;
        filterTab.orderNo = 195;
        numericFormatTab.orderNo = 200;
        dateTimeFormatTab.orderNo = 205;
        topNTab.orderNo = 210;
        this.fillBindingTab(bindingTab, model, args.choosenField, args.dataSourceBrowser, args.dataDashboardItem, args.constraint);
        var dataItem = model.dataItem();
        if (dataItem) {
            var fieldType = dataField && dataField.fieldType();
            if (args.unwrappedDataItem) {
                this.fillOptionsTab(optionsTab, dataItem, model, args.dataDashboardItem);
            }
            if (dataItem instanceof dimension_1.Dimension) {
                let measures = args.dataDashboardItem._measures.filter(measure => !measure._hasCalculation());
                this.fillDataShapingPropertiesTab(dataShapingTab, args.dataDashboardItem, model, dataField, measures, args.dataSourceBrowser);
                if (args.dataDashboardItem._isTopNEnabled(dataItem)) {
                    this.fillTopNTab(topNTab, args.dataDashboardItem, dataItem, dataField, measures, model._specifics.supportsTopNOther, args.dataSourceBrowser);
                }
                if (!model._specifics.skipFormatting && dataField && !_data_field_1.DataField.isOlap(dataField.dataMember())) {
                    if (_data_field_1.DataField.isNumeric(dataField)) {
                        numericFormatTab.tabModel(_shared_composers_1.SharedComposers.getNumericFormatWrapper(dataItem.numericFormat));
                    }
                    else if (fieldType === 'DateTime') {
                        this.fillDimensionDatetimeFormatTab(dateTimeFormatTab, dataItem);
                    }
                }
                else if (model._specifics.forceAddOlapExactDateFormat && dataField && fieldType === 'DateTime' && _data_field_1.DataField.isOlap(dataField.dataMember())) {
                    this.fillDataItemExactDatetimeFormatTab(dateTimeFormatTab, dataItem);
                }
            }
            if (dataItem instanceof measure_1.Measure && !model._specifics.isAttribute) {
                if (args.dataDashboardItem._isCalculationSupported() && !_data_field_1.DataField.isOlap(dataItem.dataMember())) {
                    this.fillCalculationsTab(calculationsTab, dataItem, args.dataDashboardItem, args.dataSourceBrowser, args.propertiesController);
                }
                if (!model._specifics.skipFormatting) {
                    let numericFormatWrapper = _shared_composers_1.SharedComposers.getNumericFormatWrapper(dataItem.numericFormat);
                    if (!_data_field_1.DataField.isNumeric(dataField)) {
                        DataItemsPropertiesComposer._addConstraint(numericFormatWrapper, [
                            [_measure_1.summaryTypeTemplate.propertyName, '<>', 'Min'], 'and',
                            [_measure_1.summaryTypeTemplate.propertyName, '<>', 'Max'], 'and',
                            [_measure_1.summaryTypeTemplate.propertyName, '<>', 'Mode']
                        ], [{ info: _measure_1.summaryTypeTemplate, value: dataItem.summaryType }]);
                    }
                    numericFormatTab.tabModel(numericFormatWrapper);
                    if (fieldType === 'DateTime') {
                        let exactDateWrapper = this._createExactDatePropertiesWrapper(dataItem);
                        DataItemsPropertiesComposer._addConstraint(exactDateWrapper, [
                            [_measure_1.summaryTypeTemplate.propertyName, '=', 'Min'], 'or',
                            [_measure_1.summaryTypeTemplate.propertyName, '=', 'Max'], 'or',
                            [_measure_1.summaryTypeTemplate.propertyName, '=', 'Mode']
                        ], [{ info: _measure_1.summaryTypeTemplate, value: dataItem.summaryType }]);
                        dateTimeFormatTab.tabModel(exactDateWrapper);
                    }
                }
                this._fillFilterTab(filterTab, dataItem, args.dataDashboardItem, args.dataSourceBrowser);
            }
        }
        return result;
    }
    fillBindingTab(bindingTab, model, choosenField, dataSourceBrowser, dataDashboardItem, constraint) {
        bindingTab.tabModel({
            choosenField: ko.observable(choosenField),
            dataItemLink: model,
            constraint: constraint,
            dataSourceBrowser: dataSourceBrowser,
            dataMemberPath: ko.observable(ko.computed(() => {
                if (dataDashboardItem.dataSource() && dataDashboardItem.dataMember()) {
                    return [dataDashboardItem.dataSource(), dataDashboardItem.dataMember()].join('.');
                }
                else if (dataDashboardItem.dataSource()) {
                    return dataDashboardItem.dataSource();
                }
                return '';
            })),
            additionalProperties: ko.observable(ko.pureComputed(() => {
                if (model._specifics.isAttribute || !choosenField())
                    return null;
                var properties = [];
                var dataItem = model.dataItem();
                if (dataItem instanceof measure_1.Measure) {
                    var summaryTypeMeta = data_dashboard_item_1.DataDashboardItem._getAvaliableSummaryTypeInfo(choosenField(), model._specifics.acceptableShapingType, dataItem);
                    if (summaryTypeMeta) {
                        properties.push(summaryTypeMeta);
                    }
                }
                if ((model.dataItem() instanceof dimension_1.Dimension)
                    && (!_data_field_1.DataField.isOlap(model.dataItem().dataMember()))
                    && (choosenField() && choosenField().fieldType() === 'DateTime')) {
                    if (model._specifics.acceptableShapingType !== data_item_1.AcceptableShapingType.RangeDate) {
                        properties.push(_dimension_1.dateTimeGroupInterval);
                    }
                    else {
                        properties.push(_dimension_1.rangeDateTimeGroupInterval);
                    }
                }
                if (properties.length) {
                    return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
                        model: model.dataItem(),
                        properties: properties
                    });
                }
                return null;
            })),
            summary: ko.pureComputed(() => {
                var dataItemLink = bindingTab.tabModel() && bindingTab.tabModel().dataItemLink;
                return dataItemLink.dataItem() && dataItemLink.dataItem().dataMember() || '';
            }),
            summaryHint: ko.pureComputed(() => {
                var dataItemLink = bindingTab.tabModel() && bindingTab.tabModel().dataItemLink;
                return dataItemLink.dataItem() && (dataItemLink.dataItem().dataMember() + ' (' + dataItemLink.uniqueName() + ')') || '';
            })
        });
    }
    fillOptionsTab(tab, dataItem, model, dataDashboardItem) {
        var properties = [];
        properties.push(_base_metadata_1.name);
        var newProperties = model
            ._specifics
            .customOptionsProperties
            .filter(p => !p.filter || p.filter(dataItem));
        properties = properties.concat(newProperties.map(p => p.serializationInfo));
        var disabledRules = {};
        newProperties
            .filter(x => !!x.disabledRule)
            .forEach((property) => {
            disabledRules[property.serializationInfo.propertyName] = (m) => { return property.disabledRule(dataItem); };
        });
        tab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: dataItem,
            properties: properties,
            disabledFilterRules: disabledRules
        }));
    }
    fillDataShapingPropertiesTab(tab, dataDashboardItem, model, dataField, measures, dataSourceBrowser) {
        var dataItem = model.dataItem();
        var disableRules = {};
        if (dataItem) {
            var fieldType = dataField && dataField.fieldType();
            ko.computed(() => {
                var properties = [];
                if (dataItem instanceof dimension_1.Dimension) {
                    var topNEnabledFunc = () => dataItem.topNOptionsEnabled();
                    if (dataDashboardItem._isSortingEnabled()) {
                        if (dataField && _data_field_1.DataField.isOlap(dataItem.dataMember())) {
                            properties.push(_dimension_1.sortOrderOlap);
                            disableRules[_dimension_1.sortOrderOlap.propertyName] = topNEnabledFunc;
                        }
                        else {
                            properties.push(_dimension_1.sortOrderNonOlap);
                            disableRules[_dimension_1.sortOrderNonOlap.propertyName] = topNEnabledFunc;
                        }
                        var values = [];
                        if (!_data_field_1.DataField.isOlap(dataItem.dataMember())) {
                            values.push({
                                value: 'DXValue',
                                displayValue: 'DashboardStringId.CommandDimensionSortModeValue'
                            });
                        }
                        else {
                            values.push({
                                value: 'DXDisplayText',
                                displayValue: 'DashboardStringId.CommandDimensionSortModeDisplayText'
                            });
                            values.push({
                                value: 'DXValue',
                                displayValue: 'DashboardStringId.CommandDimensionSortModeValue'
                            });
                            values.push({
                                value: 'DXID',
                                displayValue: 'DashboardStringId.CommandDimensionSortModeID'
                            });
                            values.push({
                                value: 'DXKey',
                                displayValue: 'DashboardStringId.CommandDimensionSortModeKey'
                            });
                        }
                        properties.push(Object.assign({ valuesArray: values.concat(measures.filter(m => m instanceof measure_1.Measure && !m.calculation.calculation() && !m.expression()).map(m => ({
                                value: m.uniqueName(),
                                displayValue: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dataDashboardItem, m)
                            }))) }, _dimension_1.realSortMode));
                        disableRules[_dimension_1.realSortMode.propertyName] = topNEnabledFunc;
                    }
                    switch (fieldType) {
                        case 'DateTime':
                            break;
                        case 'Text':
                            properties.push(_dimension_1.textGroupInterval);
                            break;
                    }
                }
                properties = properties.concat(model
                    ._specifics
                    .customDataShapingProperties
                    .filter(p => !p.filter || p.filter(dataField))
                    .map(p => p.serializationInfo));
                var tabModel = properties.length > 0 ?
                    new _object_properties_wrapper_1.ObjectPropertiesWrapper({
                        model: dataItem,
                        properties: properties,
                        disabledFilterRules: disableRules
                    })
                    : null;
                tab.tabModel(tabModel);
            });
        }
    }
    _createExactDateProperties() {
        let properties = [
            _data_item_format_1.namelessYearFormat,
            _data_item_format_1.namelessDateFormat,
            _data_item_format_1.namelessDateHourFormat,
            _data_item_format_1.namelessDateHourMinuteFormat,
            _data_item_format_1.namelessDateTimeWithSecondsFormat
        ];
        let visibilityRules = {};
        visibilityRules[_data_item_format_1.namelessYearFormat.propertyName] = [_data_item_format_1.namelessExactDateFormat.propertyName, '=', 'Year'];
        visibilityRules[_data_item_format_1.namelessDateFormat.propertyName] = [_data_item_format_1.namelessExactDateFormat.propertyName, '=', 'Day'];
        visibilityRules[_data_item_format_1.namelessDateHourFormat.propertyName] = [_data_item_format_1.namelessExactDateFormat.propertyName, '=', 'Hour'];
        visibilityRules[_data_item_format_1.namelessDateHourMinuteFormat.propertyName] = [_data_item_format_1.namelessExactDateFormat.propertyName, '=', 'Minute'];
        visibilityRules[_data_item_format_1.namelessDateTimeWithSecondsFormat.propertyName] = [_data_item_format_1.namelessExactDateFormat.propertyName, '=', 'Second'];
        return { properties, visibilityRules };
    }
    fillDataItemExactDatetimeFormatTab(tab, model) {
        tab.tabModel(this._createExactDatePropertiesWrapper(model));
    }
    _createExactDatePropertiesWrapper(model) {
        let exactDateProperties = this._createExactDateProperties();
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [
                {
                    container: _data_item_1.dateTimeFormat,
                    properties: [_data_item_format_1.namelessExactDateFormat]
                },
                {
                    container: _data_item_1.dateTimeFormat,
                    properties: exactDateProperties.properties
                }
            ],
            visibilityFilterRules: exactDateProperties.visibilityRules
        });
    }
    fillDimensionDatetimeFormatTab(tab, model) {
        var visibilityRules = {};
        var properties = [
            _data_item_format_1.namelessExactDateFormat,
            _data_item_format_1.namelessYearFormat,
            _data_item_format_1.namelessMonthFormat,
            _data_item_format_1.namelessQuarterFormat,
            _data_item_format_1.namelessDayOfWeekFormat,
            _data_item_format_1.namelessHourFormat,
            _data_item_format_1.namelessDateFormat,
            _data_item_format_1.namelessDateHourFormat,
            _data_item_format_1.namelessDateHourMinuteFormat,
            _data_item_format_1.namelessDateTimeWithSecondsFormat
        ];
        visibilityRules[_dimension_1.dateTimeGroupInterval.propertyName] = () => false;
        visibilityRules[_data_item_format_1.namelessYearFormat.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'Year'];
        visibilityRules[_data_item_format_1.namelessQuarterFormat.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'Quarter'];
        visibilityRules[_data_item_format_1.namelessMonthFormat.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'Month'];
        visibilityRules[_data_item_format_1.namelessHourFormat.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'Hour'];
        visibilityRules[_data_item_format_1.namelessDayOfWeekFormat.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'DayOfWeek'];
        visibilityRules[_data_item_format_1.namelessDateFormat.propertyName] = [
            [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'DayMonthYear'],
            'or',
            [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'WeekYear']
        ];
        visibilityRules[_data_item_format_1.namelessDateHourFormat.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'DateHour'];
        visibilityRules[_data_item_format_1.namelessDateHourMinuteFormat.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'DateHourMinute'];
        visibilityRules[_data_item_format_1.namelessDateTimeWithSecondsFormat.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'DateHourMinuteSecond'];
        visibilityRules[_data_item_format_1.namelessExactDateFormat.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'None'];
        let exactDateProperties = this._createExactDateProperties();
        let exactDateIntervalConstraints = {};
        exactDateProperties.properties.forEach(edProp => exactDateIntervalConstraints[edProp.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'None']);
        DataItemsPropertiesComposer._mergeRules(exactDateProperties.visibilityRules, exactDateIntervalConstraints, 'and');
        DataItemsPropertiesComposer._mergeRules(visibilityRules, exactDateProperties.visibilityRules, 'or');
        tab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [
                _dimension_1.dateTimeGroupInterval,
                {
                    container: _data_item_1.dateTimeFormat,
                    properties: properties
                }
            ],
            visibilityFilterRules: visibilityRules
        }));
    }
    fillTopNTab(tab, dataDashboardItem, dataItem, dataField, measures, supportsTopNOther, dataSourceBrowser) {
        var disabledRules = {};
        var isTopNUnavailable = () => measures.length === 0;
        var topNOptionsDisabled = () => !dataItem.topNOptionsEnabled() || isTopNUnavailable();
        disabledRules[_dimension_1.topNOptionsEnabled.propertyName] = isTopNUnavailable;
        disabledRules[_dimension_1.topNOptionsCount.propertyName] = topNOptionsDisabled;
        disabledRules[_dimension_1.topNOptionsMode.propertyName] = topNOptionsDisabled;
        disabledRules[_dimension_1.topNOptionsMeasure.propertyName] = topNOptionsDisabled;
        disabledRules[_dimension_1.topNOptionsShowOthers.propertyName] = topNOptionsDisabled;
        var visibilityRules = {};
        visibilityRules[_dimension_1.topNOptionsShowOthers.propertyName] = () => supportsTopNOther;
        var properties = [
            _dimension_1.topNOptionsEnabled,
            _dimension_1.topNOptionsMode,
            _dimension_1.topNOptionsCount,
            Object.assign({ valuesArray: measures.map((m) => { return { value: m.uniqueName(), displayValue: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dataDashboardItem, m) }; }) }, _dimension_1.topNOptionsMeasure)
        ];
        if (dataField && !_data_field_1.DataField.isOlap(dataField.dataMember())) {
            properties.push(_dimension_1.topNOptionsShowOthers);
        }
        tab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: dataItem,
            properties: properties,
            disabledFilterRules: disabledRules,
            visibilityFilterRules: visibilityRules,
            summary: ko.computed(() => {
                if (!topNOptionsDisabled()) {
                    if (!dataItem.topNOptionsMeasureName()) {
                        dataItem.topNOptionsMeasureName(measures[0] && measures[0].uniqueName());
                    }
                    var topNDataItem = measures.filter(di => di.uniqueName.peek() === dataItem.topNOptionsMeasureName())[0];
                    var modeDisplayValue = _default_1.getLocalizationById(_dimension_1.topNOptionsModeValues[dataItem.topNOptionsMode()]);
                    return modeDisplayValue + ' ' + dataItem.topNOptionsCount() + ' - ' + (!!topNDataItem ? topNDataItem.dataMember() : '');
                }
                return '';
            })
        }));
    }
    fillCalculationsTab(tab, measure, dataDashboardItem, dataSourceBrowser, propertiesController) {
        var noneCalculation = { title: 'DashboardStringId.CalculationTypeNone', data: { type: undefined } };
        var expressionCalculation = { title: 'DashboardStringId.CalculationTypeExpression', data: { type: undefined } };
        var calculationsInfo = Object.assign({}, _measure_1.calculations);
        var disabledRules = {};
        disabledRules[calculationsInfo.propertyName] = () => {
            return dataDashboardItem
                ._dimensions
                .some(dimension => {
                return (dimension.topNOptionsEnabled() && dimension.topNOptionsMeasureName() === measure.uniqueName()) || (dimension.sortMeasure() === measure.uniqueName());
            });
        };
        var availableCalculations = [
            noneCalculation,
            { title: 'DashboardStringId.CalculationTypePercentOfTotal', data: { type: percent_of_total_calculation_1.PercentOfTotalCalculation } },
            { title: 'DashboardStringId.CalculationTypeRunningTotal', data: { type: running_total_calculation_1.RunningTotalCalculation } },
            { title: 'DashboardStringId.CalculationTypeDifference', data: { type: difference_calculation_1.DifferenceCalculation, isEqual: (calc) => calc.differenceType() !== 'Percentage' } },
            { title: 'DashboardStringId.CalculationTypePercentageDifference', data: { type: difference_calculation_1.DifferenceCalculation, default: { '@DifferenceType': 'Percentage' }, isEqual: (calc) => calc.differenceType() === 'Percentage' } },
            { title: 'DashboardStringId.CalculationTypeMovingCalculation', data: { type: moving_calculation_1.MovingCalculation } },
            { title: 'DashboardStringId.CalculationTypeRank', data: { type: rank_calculation_1.RankCalculation } },
            expressionCalculation
        ];
        var isEqual = (definition) => {
            return !!definition.data.type && measure.calculation.calculation() instanceof definition.data.type && (!definition.data.isEqual || definition.data.isEqual(measure.calculation.calculation()));
        };
        var selectedPredefinedCalculation = ko.computed({
            read: () => {
                var result = !!measure.expression() ? expressionCalculation : undefined;
                if (!result) {
                    result = availableCalculations.filter(definition => isEqual(definition))[0] || noneCalculation;
                }
                return result;
            },
            write: _undo_engine_helper_1.wrapFuncWithUndoRedo((val) => {
                if (val !== noneCalculation) {
                    if (val === expressionCalculation) {
                        if (!measure.expression()) {
                            _calculation_properties_composer_1.getCalculationArgumentExpression(measure, dataDashboardItem, dataSourceBrowser).done(expr => {
                                measure.expression(expr);
                            });
                            measure.windowDefinition.windowDefinition(dataDashboardItem._getDefaultCalculationWindowDefinition());
                        }
                    }
                    else if (!isEqual(val)) {
                        measure.expression(undefined);
                        measure.calculation.calculation(new (val.data.type)(val.data.default));
                        measure.windowDefinition.windowDefinition(dataDashboardItem._getDefaultCalculationWindowDefinition());
                    }
                }
                else {
                    measure.expression(undefined);
                    measure.calculation.calculation(undefined);
                    measure.windowDefinition.windowDefinition(undefined);
                }
            })
        });
        const singleChoiceEditorOptions = {
            propertyName: 'title',
            dataSource: availableCalculations,
            enableEditItem: (calcDefinition) => calcDefinition !== noneCalculation,
            editItemHandler: (calcDefinition) => {
                if (calcDefinition !== noneCalculation) {
                    var surface = new _calculation_surface_1.CalculationSurface(calcDefinition, measure, dataDashboardItem, dataSourceBrowser, propertiesController);
                    surface.startEditing(new _collection_editor_viewmodel_1.CollectionEditorEditItemArguments());
                }
            },
        };
        tab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: {
                calculations: selectedPredefinedCalculation,
            },
            properties: [Object.assign(Object.assign({}, calculationsInfo), { formAdapterItem: _form_adapter_editors_1.editableListEditor(singleChoiceEditorOptions) })],
            disabledFilterRules: disabledRules,
            summary: ko.computed(() => selectedPredefinedCalculation().title !== noneCalculation.title ? selectedPredefinedCalculation().title : '')
        }));
    }
    _fillFilterTab(tab, model, dashboardItem, dataSourceBrowser) {
        if (!_data_field_1.DataField.isOlap(model.dataMember())) {
            let measureFilterEditorParams = {
                fieldListProvider: ko.observable(new _item_filter_items_provider_1.ItemFilterItemsProvider(dataSourceBrowser, dataSourceBrowser, dataSourceBrowser.parameters, dashboardItem, (di) => { return di instanceof dimension_1.Dimension; })),
                options: _filter_utils_1.createItemFilterOptions(model.filterString, undefined, dataSourceBrowser, { text: 'MeasureFilter', localizationId: 'DashboardWebStringId.AccordionTab.MeasureFilter' }),
                displayNameProvider: new _item_filter_display_name_provider_1.ItemFilterDisplayNameProvider(dashboardItem, dataSourceBrowser)
            };
            let wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
                model: model,
                properties: [
                    Object.assign(Object.assign({}, _measure_1.measureFilterString), { formAdapterItem: _form_adapter_editors_1.filterEditor(measureFilterEditorParams) })
                ],
                summary: _knockout_utils_1.safeComputed({ filterString: model.filterString }, (args) => { return !!args.filterString ? _default_1.getLocalizationById('DashboardWebStringId.ButtonOn') : ''; }),
                visibilityFilterRules: {
                    [_measure_1.measureFilterString.propertyName]: () => !model.expression(),
                }
            });
            tab.tabModel(wrapper);
        }
    }
    static getCellFormatRuleCreator(dataItem, dataItemApplyTo, formatRuleItemType) {
        return () => {
            return data_dashboard_item_1.DataDashboardItem._createFormatRule(null, {
                '@ItemType': formatRuleItemType,
                '@DataItem': dataItem.uniqueName(),
                '@DataItemApplyTo': dataItemApplyTo.uniqueName()
            });
        };
    }
    static getCellFormatRuleFilter(dataItem) {
        return (rule) => {
            if (rule instanceof cells_item_format_rule_1.CellsItemFormatRule) {
                let uniqueName = dataItem.uniqueName();
                return rule.dataItemName() === uniqueName || rule.dataItemApplyToName() === uniqueName;
            }
            return false;
        };
    }
    static getFormatRulesWrapper(model, createNewItemHandler, visibleItemsFilter, editHandler) {
        var collectionEditorOptions = Object.assign(Object.assign({ propertyName: _dashboard_item_format_rule_1.classCaption.propertyName, createNewItemHandler: createNewItemHandler }, _dashboard_item_format_rule_1.classCaption), { editItemHandler: editHandler, visibleItemsFilter: visibleItemsFilter });
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [Object.assign(Object.assign({}, _data_dashboard_item_1.formatRules), { formAdapterItem: _form_adapter_editors_1.collectionEditor(collectionEditorOptions) })]
        });
    }
}
exports.DataItemsPropertiesComposer = DataItemsPropertiesComposer;


/***/ }),

/***/ 96431:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DateFilterItemPropertiesComposer = void 0;
const _default_1 = __webpack_require__(65855);
const _date_filter_item_1 = __webpack_require__(82133);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class DateFilterItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler, editRuleHandler) {
        super(customizeHandler);
        this.editRuleHandler = editRuleHandler;
    }
    _composeTabsCore(model, args) {
        return [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model, [], {})),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Layout, 'Layout', this.getLayoutWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.CustomRanges, 'DashboardWebStringId.RangeFilter.CustomPeriods', _shared_composers_1.SharedComposers.getCustomRangesWrapper(model, this.editRuleHandler, args.dataSourceBrowser, model.dimension))
        ];
    }
    getLayoutWrapper(model) {
        var properties = [
            _date_filter_item_1.filterType,
            _date_filter_item_1.arrangementMode,
            _date_filter_item_1.datePickerLocation,
            _date_filter_item_1.displayTextPattern
        ];
        _date_filter_item_1.displayTextPattern.editorOptions['placeholder'] = _default_1.getLocalizationById(_date_filter_item_1.displayTextPattern.editorOptions['placeholder']);
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    }
}
exports.DateFilterItemPropertiesComposer = DateFilterItemPropertiesComposer;


/***/ }),

/***/ 74906:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FilterItemPropertiesComposer = void 0;
const combo_box_item_1 = __webpack_require__(13102);
const list_box_item_1 = __webpack_require__(16525);
const _combo_box_item_1 = __webpack_require__(58891);
const _filter_element_item_base_1 = __webpack_require__(48098);
const _list_box_item_1 = __webpack_require__(77032);
const _tree_view_item_1 = __webpack_require__(24865);
const _accordion_tab_1 = __webpack_require__(74885);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class FilterItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler) {
        super(customizeHandler);
    }
    _composeTabsCore(model) {
        var disabledRules = {};
        disabledRules[_filter_element_item_base_1.showAllValue.propertyName] = (args) => {
            var model = args.model;
            if (model instanceof list_box_item_1.ListBoxItem) {
                return model.listBoxType() === 'Checked';
            }
            if (model instanceof combo_box_item_1.ComboBoxItem) {
                return model.comboBoxType() === 'Checked';
            }
            return false;
        };
        var showAllValuePropertyInfo = _filter_element_item_base_1.showAllValue;
        if (model._useNeutralFilterMode()) {
            showAllValuePropertyInfo.displayName = 'DashboardWebStringId.FilterItem.AllowEmptyFilter';
        }
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model, [
                _combo_box_item_1.comboBoxType,
                _list_box_item_1.listBoxType,
                _filter_element_item_base_1.showAllValue,
                _tree_view_item_1.autoExpand,
                _filter_element_item_base_1.enableSearch
            ], disabledRules))
        ];
        return result;
    }
}
exports.FilterItemPropertiesComposer = FilterItemPropertiesComposer;


/***/ }),

/***/ 56549:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GaugeElementPropertiesComposer = void 0;
const _default_1 = __webpack_require__(65855);
const gauge_1 = __webpack_require__(29847);
const _gauge_1 = __webpack_require__(33623);
const _base_metadata_1 = __webpack_require__(17916);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const _display_name_provider_1 = __webpack_require__(8464);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class GaugeElementPropertiesComposer extends _base_properties_composer_1.DataItemContainerPropertiesComposer {
    constructor(customizeHandler, editFormatHandler = (model) => { }) {
        super(customizeHandler);
        this.editFormatHandler = editFormatHandler;
    }
    _composeTabsCore(model, args) {
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.Options', this.getCommonWrapper(model, args.dashboardItem, args.dataSourceBrowser)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ScaleOptions, 'DashboardWebStringId.Gauge.ScaleOptions', this.getScaleWrapper(model))
        ];
        if (model instanceof gauge_1.Gauge) {
            result.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DeltaOptions, 'DashboardWebStringId.Grid.DeltaOptions', _shared_composers_1.SharedComposers.getDeltaOptionsWrapper(model.deltaOptions)));
            var wrapper = _shared_composers_1.SharedComposers.getDeltaFormatsOptionsWrapper(model, this.editFormatHandler, { title: _default_1.getLocalizationById('DashboardStringId.GaugeScaleLabelFormatCaption'), numericFormat: model.scaleLabelNumericFormat });
            var formatsTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.NumericFormat, 'DashboardWebStringId.CardLayout.Editor.FormatOptions', wrapper);
            result.push(formatsTab);
        }
        return result;
    }
    getCommonWrapper(model, dashboardItem, dataSourceBrowser) {
        var properties = [
            Object.assign({ editorOptions: { placeholder: _display_name_provider_1.getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, model) } }, _base_metadata_1.name),
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: null
        });
    }
    getScaleWrapper(model) {
        var disabledRules = {};
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [
                Object.assign(Object.assign({}, _gauge_1.minimum), { formAdapterItem: _form_adapter_editors_1.nullableNumberBoxEditor({}) }),
                Object.assign(Object.assign({}, _gauge_1.maximum), { formAdapterItem: _form_adapter_editors_1.nullableNumberBoxEditor({}) })
            ],
            disabledFilterRules: disabledRules
        });
    }
}
exports.GaugeElementPropertiesComposer = GaugeElementPropertiesComposer;


/***/ }),

/***/ 74664:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GaugeItemPropertiesComposer = void 0;
const _gauge_item_1 = __webpack_require__(11433);
const _accordion_tab_1 = __webpack_require__(74885);
const _container_type_selector_1 = __webpack_require__(62509);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class GaugeItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler) {
        super(customizeHandler);
    }
    _composeTabsCore(model) {
        var result = [
            new _accordion_tab_1.StyleAccordionTab(_accordion_tab_1.KnownTabs.Type, 'DashboardWebStringId.Type', this.getTypeWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model, [
                _gauge_item_1.showGaugeCaptions
            ])),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Layout', _shared_composers_1.SharedComposers.getContentArrangementWrapper(model))
        ];
        return result;
    }
    getTypeWrapper(model) {
        return new _container_type_selector_1.ContainerTypeSelector({
            'CircularFull': { displayName: 'DashboardWebStringId.Gauge.Type.FullQuarterGauge', icon: 'dx-dashboard-gauge-circular-full', group: 'Circular' },
            'CircularHalf': { displayName: 'DashboardWebStringId.Gauge.Type.HalfCircular', icon: 'dx-dashboard-gauge-circular-half', group: 'Circular' },
            'CircularQuarterLeft': { displayName: 'DashboardWebStringId.Gauge.Type.LeftQuarterCircular', icon: 'dx-dashboard-gauge-circular-left-quarter', group: 'Circular' },
            'CircularQuarterRight': { displayName: 'DashboardWebStringId.Gauge.Type.RightQuarterCircular', icon: 'dx-dashboard-gauge-circular-right-quarter', group: 'Circular' },
            'CircularThreeFourth': { displayName: 'DashboardWebStringId.Gauge.Type.ThreeFourthCircular', icon: 'dx-dashboard-gauge-circular-three-fourth', group: 'Circular' },
            'LinearHorizontal': { displayName: 'DashboardWebStringId.Gauge.Type.LinearHorizontal', icon: 'dx-dashboard-gauge-linear-horizontal', group: 'Linear' },
            'LinearVertical': { displayName: 'DashboardWebStringId.Gauge.Type.LinearVertical', icon: 'dx-dashboard-gauge-linear-vertical', group: 'Linear' }
        }, model.viewType);
    }
}
exports.GaugeItemPropertiesComposer = GaugeItemPropertiesComposer;


/***/ }),

/***/ 76671:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GeoPointMapItemPropertiesComposer = void 0;
const _geo_point_map_item_base_1 = __webpack_require__(13886);
const _map_item_1 = __webpack_require__(1035);
const _accordion_tab_1 = __webpack_require__(74885);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class GeoPointMapItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler) {
        super(customizeHandler);
    }
    _composeTabsCore(model, args) {
        var tabModel = _shared_composers_1.SharedComposers.getCommonMapWrapper(model, args.propertiesController, [
            _map_item_1.lockNavigation,
            _geo_point_map_item_base_1.enableClustering,
            _shared_composers_1.SharedComposers.getShapeTitleSerializationInfo(model)
        ]);
        return [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', tabModel)
        ];
    }
}
exports.GeoPointMapItemPropertiesComposer = GeoPointMapItemPropertiesComposer;


/***/ }),

/***/ 827:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GridColumnPropertiesComposer = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _data_field_1 = __webpack_require__(68951);
const _dashboard_item_format_rule_1 = __webpack_require__(41938);
const _knockout_utils_1 = __webpack_require__(4437);
const data_dashboard_item_1 = __webpack_require__(70355);
const grid_column_total_1 = __webpack_require__(5697);
const grid_columns_1 = __webpack_require__(27233);
const grid_item_1 = __webpack_require__(74873);
const _grid_columns_1 = __webpack_require__(40789);
const _data_dashboard_item_1 = __webpack_require__(66302);
const _delta_options_1 = __webpack_require__(62800);
const _base_metadata_1 = __webpack_require__(17916);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const _display_name_provider_1 = __webpack_require__(8464);
const _container_type_selector_1 = __webpack_require__(62509);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class GridColumnPropertiesComposer extends _base_properties_composer_1.DataItemContainerPropertiesComposer {
    constructor(customizeHandler, editRuleHandler, editDeltaFormatHandler = (model) => { }) {
        super(customizeHandler);
        this.editRuleHandler = editRuleHandler;
        this.editDeltaFormatHandler = editDeltaFormatHandler;
    }
    _composeTabsCore(model, args) {
        var columnWidthTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.Grid.ColumnWidth'), deltaTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DeltaOptions, 'DashboardWebStringId.Grid.DeltaOptions'), deltaFormatsTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DeltaFormats, 'DashboardWebStringId.CardLayout.Editor.FormatOptions'), sparklineTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.SparklineOptions, 'DashboardWebStringId.Card.SparklineOptions'), conditionalFormattingTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting'), totalTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Totals, 'DashboardWebStringId.AccordionTab.ShowTotals');
        let gridItem = args.dashboardItem;
        let result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.Options', this.getColumnWrapper(model, args.dashboardItem, args.dataSourceBrowser)),
            columnWidthTab,
            deltaTab,
            sparklineTab,
            totalTab,
            conditionalFormattingTab,
            deltaFormatsTab
        ];
        let isOlap = model.actualDataItem ? _data_field_1.DataField.isOlap(model.actualDataItem.dataMember()) : false;
        if (!isOlap || args.containerType() !== 'GridDimensionColumn')
            result.unshift(new _accordion_tab_1.TypeAccordionTab(_accordion_tab_1.KnownTabs.Type, 'DashboardWebStringId.Type', this.getColumnTypeWrapper(model, args.containerType)));
        if (gridItem.gridOptions.columnWidthMode() === 'Manual') {
            columnWidthTab.tabModel(this.getWidthWrapper(model));
        }
        if (model instanceof grid_columns_1.GridDeltaColumn) {
            deltaTab.tabModel(this.getDeltaWrapper(model));
            deltaFormatsTab.tabModel(_shared_composers_1.SharedComposers.getDeltaFormatsOptionsWrapper(model, this.editDeltaFormatHandler));
        }
        if (model instanceof grid_columns_1.GridSparklineColumn) {
            sparklineTab.tabModel(this.getSparklineWrapper(model));
        }
        if ((model instanceof grid_columns_1.GridDimensionColumn) || (model instanceof grid_columns_1.GridMeasureColumn)) {
            conditionalFormattingTab.tabModel(this.getFormatRulesWrapper(model, gridItem));
        }
        if (model instanceof grid_columns_1.GridColumn) {
            totalTab.tabModel(this.getTotalsWrapper(model, args.dashboardItem));
        }
        return result;
    }
    getColumnTypeWrapper(model, containerType) {
        if (model) {
            var properties = [
                _grid_columns_1.columnType
            ];
            let isOlap = model.actualDataItem ? _data_field_1.DataField.isOlap(model.actualDataItem.dataMember()) : undefined;
            let buttonTypes;
            if (!isOlap)
                buttonTypes = grid_item_1.GridItem._gridColumnTypesMap;
            else {
                buttonTypes = Object.assign({}, grid_item_1.GridItem._gridColumnTypesMap);
                delete buttonTypes['GridDimensionColumn'];
            }
            return new _container_type_selector_1.ContainerTypeSelector(buttonTypes, containerType);
        }
        return null;
    }
    getColumnWrapper(model, dashboardItem, dataSourceBrowser) {
        var properties = [Object.assign({ editorOptions: { placeholder: _display_name_provider_1.getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, model) } }, _base_metadata_1.name)];
        var disabledRules = {};
        var visibilityRules = {};
        if (model instanceof grid_columns_1.GridDimensionColumn) {
            properties.push(_grid_columns_1.dimensionDisplayMode);
            visibilityRules[_grid_columns_1.dimensionDisplayMode.propertyName] = () => {
                var result = false;
                if (model.dimension()) {
                    dataSourceBrowser
                        .findDataField(dashboardItem.dataSource(), dashboardItem.dataMember(), model.dimension().dataMember())
                        .done(dataField => {
                        result = dataField && dataField.fieldType() === 'Custom';
                    });
                }
                return result;
            };
        }
        if (model instanceof grid_columns_1.GridMeasureColumn) {
            properties.push(_grid_columns_1.displayMode);
            properties.push(_grid_columns_1.alwaysShowZeroLevel);
            disabledRules[_grid_columns_1.alwaysShowZeroLevel.propertyName] = [_grid_columns_1.displayMode.propertyName, '<>', 'Bar'];
        }
        if (model instanceof grid_columns_1.GridHyperlinkColumn) {
            _grid_columns_1.gridColumnUriPattern.validationRules.forEach(rule => { if (rule.message) {
                rule.message = _default_1.getLocalizationById(rule.message);
            } });
            properties.push(_grid_columns_1.gridColumnUriPattern);
        }
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules,
            visibilityFilterRules: visibilityRules
        });
    }
    getWidthWrapper(model) {
        var properties = [
            _grid_columns_1.widthType,
            _grid_columns_1.fixedWidth,
            _grid_columns_1.columnWeight,
        ];
        var disabledRules = {};
        disabledRules[_grid_columns_1.fixedWidth.propertyName] = [_grid_columns_1.widthType.propertyName, '<>', 'FixedWidth'];
        disabledRules[_grid_columns_1.columnWeight.propertyName] = [_grid_columns_1.widthType.propertyName, '<>', 'Weight'];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules
        });
    }
    getTotalsWrapper(model, p) {
        var collectionEditorOptions = {
            dataFields: [grid_column_total_1._totalTypeTemplate.propertyName],
            noDataText: 'DashboardWebStringId.CollectionEditor.Totals.NoItems',
            gridColumns: [{
                    dataField: grid_column_total_1._totalTypeTemplate.propertyName,
                    lookup: {}
                }],
            customizeInlineEditor: (e) => {
                const totalTypes = ko.pureComputed(() => model._getAvailableTotalTypes(p));
                const { dataSource, dispose: dataSourceDispose } = _knockout_utils_1.createObservableDataSource({ totalTypes }, arg => arg.totalTypes);
                e.editorOptions.dataSource = dataSource;
                e.editorOptions.onDisposing = () => {
                    dataSourceDispose();
                    totalTypes.dispose();
                };
            },
            createNewItemHandler: () => new grid_column_total_1.GridColumnTotal({}),
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [Object.assign(Object.assign({}, _grid_columns_1.totalsTemplate), { formAdapterItem: _form_adapter_editors_1.inlineEditCollectionEditor(collectionEditorOptions) })],
            summary: ko.computed(() => model.totals().length ? 'DashboardWebStringId.ButtonOn' : '')
        });
    }
    getDeltaWrapper(model) {
        var properties = [
            _grid_columns_1.displayMode,
            _grid_columns_1.alwaysShowZeroLevel,
            {
                container: _grid_columns_1.gridColumnDeltaOptions,
                properties: _delta_options_1.deltaOptionsSerializationsInfo
            }
        ];
        var visibleRules = {};
        visibleRules[_grid_columns_1.alwaysShowZeroLevel.propertyName] = [_grid_columns_1.displayMode.propertyName, '=', 'Bar'];
        _delta_options_1.deltaOptionsSerializationsInfo.forEach(opt => {
            visibleRules[opt.propertyName] = [_grid_columns_1.displayMode.propertyName, '=', 'Value'];
        });
        var disabledRules = {};
        disabledRules[_delta_options_1.resultIndicationThresholdType.propertyName] = (deltaOptions) => deltaOptions.resultIndicationMode() === 'NoIndication';
        disabledRules[_delta_options_1.resultIndicationThreshold.propertyName] = (deltaOptions) => deltaOptions.resultIndicationMode() === 'NoIndication';
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules,
            visibilityFilterRules: visibleRules
        });
    }
    getSparklineWrapper(model) {
        var properties = [
            _grid_columns_1.showStartEndValues,
            {
                container: _grid_columns_1.sparklineOptions,
                properties: _shared_composers_1.SharedComposers.getSparklineOptionsProperties()
            }
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    }
    getFormatRulesWrapper(model, dashboardItem) {
        var collectionEditorOptions = {
            propertyName: _dashboard_item_format_rule_1.classCaption.propertyName,
            createNewItemHandler: () => data_dashboard_item_1.DataDashboardItem._createFormatRule(null, {
                '@ItemType': 'GridItemFormatRule',
                '@DataItem': model.actualDataItem && model.actualDataItem.uniqueName() || undefined,
                '@DataItemApplyTo': model.actualDataItem && model.actualDataItem.uniqueName() || undefined
            }),
            editItemHandler: this.editRuleHandler,
            visibleItemsFilter: (rule) => {
                let uniqueName = model.actualDataItem && model.actualDataItem.uniqueName() || undefined;
                return rule.dataItemName() === uniqueName || rule.dataItemApplyToName() === uniqueName;
            },
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: dashboardItem,
            properties: [Object.assign(Object.assign({}, _data_dashboard_item_1.formatRules), { formAdapterItem: _form_adapter_editors_1.collectionEditor(collectionEditorOptions) })]
        });
    }
}
exports.GridColumnPropertiesComposer = GridColumnPropertiesComposer;


/***/ }),

/***/ 11347:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GridItemPropertiesComposer = void 0;
const _dashboard_item_format_rule_1 = __webpack_require__(41938);
const data_dashboard_item_1 = __webpack_require__(70355);
const _grid_column_filter_options_1 = __webpack_require__(51480);
const _grid_options_1 = __webpack_require__(1962);
const _data_dashboard_item_1 = __webpack_require__(66302);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class GridItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler, editRuleHandler, dataSourceBrowser) {
        super(customizeHandler);
        this.editRuleHandler = editRuleHandler;
        this.dataSourceBrowser = dataSourceBrowser;
    }
    _composeTabsCore(model, args) {
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Layout, 'DashboardWebStringId.AccordionTab.Layout', this.getLayoutWrapper(model.gridOptions)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.GridColumnFilter, 'DashboardWebStringId.Grid.GridColumnFilter', this.getColumnFilterWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', this.getFormatRulesWrapper(model, args.dataSourceBrowser))
        ];
        return result;
    }
    getColumnFilterWrapper(model) {
        const disabledRules = {};
        const dataSource = this.dataSourceBrowser.findDataSource(model.dataSource());
        const isUpdateTotalsDisabled = () => !dataSource || dataSource.itemType() === 'OLAPDataSource';
        disabledRules[_grid_column_filter_options_1.updateTotals.propertyName] = isUpdateTotalsDisabled;
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model.columnFilterOptions,
            properties: [
                _grid_column_filter_options_1.showFilterRow,
                _grid_column_filter_options_1.updateTotals
            ],
            disabledFilterRules: disabledRules
        });
    }
    getLayoutWrapper(model) {
        var properties = [
            _grid_options_1.showHorizontalLines,
            _grid_options_1.showVerticalLines,
            _grid_options_1.enableBandedRows,
            _grid_options_1.showColumnHeaders,
            _grid_options_1.wordWrap,
            _grid_options_1.columnWidthMode
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    }
    getFormatRulesWrapper(model, dataSourceBrowser) {
        const collectionEditorOptions = {
            propertyName: _dashboard_item_format_rule_1.classCaption.propertyName,
            createNewItemHandler: () => data_dashboard_item_1.DataDashboardItem._createFormatRule(null, { '@ItemType': 'GridItemFormatRule' }),
            editItemHandler: this.editRuleHandler
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [Object.assign(Object.assign({}, _data_dashboard_item_1.formatRules), { formAdapterItem: _form_adapter_editors_1.collectionEditor(collectionEditorOptions) })]
        });
    }
}
exports.GridItemPropertiesComposer = GridItemPropertiesComposer;


/***/ }),

/***/ 33271:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImageItemPropertiesComposer = void 0;
const _image_item_1 = __webpack_require__(67286);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _accordion_tab_1 = __webpack_require__(74885);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class ImageItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    _composeTabsCore(model, args) {
        throw new Error('Method not implemented.');
    }
    constructor(customizeHandler) {
        super(customizeHandler);
    }
    composeTabs(model) {
        let visibilityRules = {};
        visibilityRules[_image_item_1.image64.propertyName] = (m) => m.imageType() == 'embedded';
        visibilityRules[_image_item_1.urlPath.propertyName] = (m) => m.imageType() == 'linked';
        let specificProperties = [
            _image_item_1.sizeMode,
            _image_item_1.horizontalAlignment,
            _image_item_1.verticalAlignment,
            _image_item_1.imageType,
            _image_item_1.urlPath,
            Object.assign(Object.assign({}, _image_item_1.image64), { formAdapterItem: _form_adapter_editors_1.filePickerEditor({ placeholderId: 'Image', accept: 'image/*', type: 'img' }) })
        ];
        return [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.ImageOptions', _shared_composers_1.SharedComposers.getCommonWrapper(model, specificProperties, {}, visibilityRules))
        ];
    }
}
exports.ImageItemPropertiesComposer = ImageItemPropertiesComposer;


/***/ }),

/***/ 21624:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MapCustomShapefilePropertiesComposer = void 0;
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const _custom_shape_file_1 = __webpack_require__(51692);
const _custom_shape_file_data_1 = __webpack_require__(16322);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
class MapCustomShapefilePropertiesComposer {
    composeTabs(model) {
        var layoutsTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.CustomMapOptions, 'DashboardWebStringId.Map.CustomMapOptions');
        this.fillLayoutsTab(layoutsTab, model);
        return [layoutsTab];
    }
    fillLayoutsTab(tab, model) {
        var switcherInfo = {
            propertyName: 'switcher', displayName: 'DashboardWebStringId.Map.CustomMapOptionsSource', defaultVal: !!model.data.shapeData() ? 'file' : 'url', simpleFormAdapterItem: 'buttonGroupEditor', valuesArray: [
                { value: 'url', displayValue: 'DashboardWebStringId.Map.CustomMapOptionsUrl' },
                { value: 'file', displayValue: 'DashboardWebStringId.Map.CustomMapOptionsFile' }
            ]
        };
        var visibilityRules = {};
        visibilityRules[_custom_shape_file_1.customShapefileUrl.propertyName] = [switcherInfo.propertyName, '=', 'url'];
        visibilityRules[_custom_shape_file_data_1.shapeData.propertyName] = visibilityRules[_custom_shape_file_data_1.attributeData.propertyName] = [switcherInfo.propertyName, '=', 'file'];
        var disabilityRules = {};
        disabilityRules[_custom_shape_file_data_1.attributeData.propertyName] = [[_custom_shape_file_data_1.shapeData.propertyName, '=', _custom_shape_file_data_1.shapeData.defaultVal], 'or', [_custom_shape_file_data_1.shapeData.propertyName, '=', '']];
        tab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: _jquery_helpers_1.extend(model, {
                switcher: ko.observable(switcherInfo.defaultVal)
            }),
            properties: [
                switcherInfo,
                _custom_shape_file_1.customShapefileUrl,
                {
                    container: _custom_shape_file_1.customShapefileData,
                    properties: [Object.assign(Object.assign({}, _custom_shape_file_data_1.shapeData), { formAdapterItem: _form_adapter_editors_1.filePickerEditor({
                                type: 'file',
                                accept: '.shp',
                                placeholderId: 'DashboardWebStringId.Map.ShapeFileLoaded',
                                showClearButton: true,
                                readMode: undefined
                            }) }), Object.assign(Object.assign({}, _custom_shape_file_data_1.attributeData), { formAdapterItem: _form_adapter_editors_1.filePickerEditor({
                                type: 'file',
                                accept: '.dbf',
                                placeholderId: 'DashboardWebStringId.Map.AttributeFileLoaded',
                                showClearButton: true,
                                readMode: undefined
                            }) })]
                }
            ],
            visibilityFilterRules: visibilityRules,
            disabledFilterRules: disabilityRules
        }));
    }
}
exports.MapCustomShapefilePropertiesComposer = MapCustomShapefilePropertiesComposer;


/***/ }),

/***/ 88653:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PieItemPropertiesComposer = void 0;
const _pie_item_1 = __webpack_require__(94396);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const _container_type_selector_1 = __webpack_require__(62509);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class PieItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler) {
        super(customizeHandler);
    }
    _composeTabsCore(model) {
        var result = [
            new _accordion_tab_1.StyleAccordionTab(_accordion_tab_1.KnownTabs.Type, 'DashboardWebStringId.Type', this.getTypeWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model, [_pie_item_1.showPieCaptions])),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ContentArrangement, 'DashboardWebStringId.AccordionTab.Layout', _shared_composers_1.SharedComposers.getContentArrangementWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Labels, 'DashboardWebStringId.AccordionTab.Labels', this.getLabelsWrapper(model))
        ];
        return result;
    }
    getTypeWrapper(model) {
        return new _container_type_selector_1.ContainerTypeSelector({
            'Pie': {
                displayName: 'DashboardWebStringId.Pie',
                icon: 'dx-dashboard-pie-pie',
                group: undefined
            },
            'Donut': {
                displayName: 'DashboardWebStringId.Pie.Donut',
                icon: 'dx-dashboard-pie-donut',
                group: undefined
            }
        }, model.pieType);
    }
    getLabelsWrapper(model) {
        var properties = [
            _pie_item_1.labelContentType,
            _pie_item_1.tooltipContentType,
            _pie_item_1.labelPosition,
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    }
}
exports.PieItemPropertiesComposer = PieItemPropertiesComposer;


/***/ }),

/***/ 41642:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PieMapItemPropertiesComposer = void 0;
const ko = __webpack_require__(71032);
const _geo_point_map_item_base_1 = __webpack_require__(13886);
const _map_item_1 = __webpack_require__(1035);
const _pie_map_item_1 = __webpack_require__(44988);
const _accordion_tab_1 = __webpack_require__(74885);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class PieMapItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler) {
        super(customizeHandler);
    }
    _composeTabsCore(model, args) {
        var commonTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common');
        ko.computed(() => {
            commonTab.tabModel(_shared_composers_1.SharedComposers.getCommonMapWrapper(model, args.propertiesController, [
                _map_item_1.lockNavigation,
                _geo_point_map_item_base_1.enableClustering,
                _shared_composers_1.SharedComposers.getShapeTitleSerializationInfo(model),
                _pie_map_item_1.isWeighted
            ]));
        });
        return [
            commonTab,
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ColorLegend, 'DashboardWebStringId.AccordionTab.MapLegend', _shared_composers_1.SharedComposers.getColorLegendWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.WeightedLegend, 'DashboardWebStringId.AccordionTab.WeightedLegend', _shared_composers_1.SharedComposers.getWeightedLegendWrapper(model))
        ];
    }
}
exports.PieMapItemPropertiesComposer = PieMapItemPropertiesComposer;


/***/ }),

/***/ 29423:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PivotItemPropertiesComposer = void 0;
const _dashboard_item_format_rule_1 = __webpack_require__(41938);
const data_dashboard_item_1 = __webpack_require__(70355);
const _data_dashboard_item_1 = __webpack_require__(66302);
const _pivot_item_1 = __webpack_require__(13785);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class PivotItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler, editRuleHandler) {
        super(customizeHandler);
        this.editRuleHandler = editRuleHandler;
    }
    _composeTabsCore(model, args) {
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DataLayout, 'DashboardWebStringId.AccordionTab.Layout', this.getLayoutDataWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DataLayout, 'DashboardWebStringId.AccordionTab.PivotInitialState', this.getInitialStateDataWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', PivotItemPropertiesComposer.getFormatRulesWrapper(model, args.dataSourceBrowser, this.editRuleHandler))
        ];
        return result;
    }
    static getFormatRulesWrapper(model, dataSourceBrowser, editHandler) {
        const collectionEditorOptions = {
            propertyName: _dashboard_item_format_rule_1.classCaption.propertyName,
            createNewItemHandler: () => data_dashboard_item_1.DataDashboardItem._createFormatRule(null, { '@ItemType': 'PivotItemFormatRule' }),
            editItemHandler: editHandler
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [Object.assign(Object.assign({}, _data_dashboard_item_1.formatRules), { formAdapterItem: _form_adapter_editors_1.collectionEditor(collectionEditorOptions) })]
        });
    }
    getLayoutDataWrapper(model) {
        var properties = [
            _pivot_item_1.layoutType,
            _pivot_item_1.showColumnTotals,
            _pivot_item_1.showRowTotals,
            _pivot_item_1.showColumnGrandTotals,
            _pivot_item_1.showRowGrandTotals,
            _pivot_item_1.columnTotalsPosition,
            _pivot_item_1.rowTotalsPosition,
            _pivot_item_1.valuesPosition
        ];
        var disabledRules = {};
        disabledRules[_pivot_item_1.rowTotalsPosition.propertyName] = (m) => { return model.layoutType() === 'Compact'; };
        disabledRules[_pivot_item_1.showRowTotals.propertyName] = (m) => { return model.layoutType() === 'Compact'; };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules
        });
    }
    getInitialStateDataWrapper(model) {
        var properties = [
            _pivot_item_1.autoExpandColumnGroups,
            _pivot_item_1.autoExpandRowGroups
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    }
}
exports.PivotItemPropertiesComposer = PivotItemPropertiesComposer;


/***/ }),

/***/ 25404:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RangeFilterItemPropertiesComposer = void 0;
const _accordion_tab_1 = __webpack_require__(74885);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class RangeFilterItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler, editRuleHandler) {
        super(customizeHandler);
        this.editRuleHandler = editRuleHandler;
    }
    _composeTabsCore(model, args) {
        return [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.CustomRanges, 'DashboardWebStringId.RangeFilter.CustomPeriods', _shared_composers_1.SharedComposers.getCustomRangesWrapper(model, this.editRuleHandler, args.dataSourceBrowser, model.argument))
        ];
    }
}
exports.RangeFilterItemPropertiesComposer = RangeFilterItemPropertiesComposer;


/***/ }),

/***/ 27089:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RangeSeriesPropertiesComposer = void 0;
const range_filter_item_1 = __webpack_require__(63716);
const _chart_series_properties_composer_1 = __webpack_require__(94766);
class RangeSeriesPropertiesComposer extends _chart_series_properties_composer_1.ChartSeriesPropertiesComposer {
    constructor(customizeHandler) {
        super(customizeHandler, range_filter_item_1.RangeFilterItem.rangeSeriesViewTypesMap, false, false);
    }
    _showIgnoreEmptyPointsVisible(model) {
        return false;
    }
    _fillConditionalFormattingTab() { }
}
exports.RangeSeriesPropertiesComposer = RangeSeriesPropertiesComposer;


/***/ }),

/***/ 59022:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ScatterChartItemPropertiesComposer = void 0;
const ko = __webpack_require__(71032);
const _chart_axis_1 = __webpack_require__(45308);
const _chart_item_1 = __webpack_require__(88370);
const _accordion_tab_1 = __webpack_require__(74885);
const _display_name_provider_1 = __webpack_require__(8464);
const _base_properties_composer_1 = __webpack_require__(20942);
const _data_item_properties_composer_1 = __webpack_require__(16821);
const _shared_composers_1 = __webpack_require__(44726);
class ScatterChartItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler, editCFRuleHandler, createCFRuleDelegate) {
        super(customizeHandler);
        this.editCFRuleHandler = editCFRuleHandler;
        this.createCFRuleDelegate = createCFRuleDelegate;
    }
    _composeTabsCore(model, args) {
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model, [_chart_item_1.chartRotated])),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.AxisX, 'DashboardWebStringId.Chart.AxisX', _shared_composers_1.SharedComposers.getAxisWrapper(model.axisX, ko.pureComputed(() => {
                return model.axisXMeasure() && _display_name_provider_1.getDataItemDisplayName(args.dataSourceBrowser, model, model.axisXMeasure());
            }), null)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.AxisY, 'DashboardWebStringId.Chart.AxisY', _shared_composers_1.SharedComposers.getAxisWrapper(model.axisY, ko.pureComputed(() => {
                return model.axisYMeasure() && _display_name_provider_1.getDataItemDisplayName(args.dataSourceBrowser, model, model.axisYMeasure());
            }), _chart_axis_1.alwaysShowZeroLevelScatter)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Labels, 'DashboardWebStringId.AccordionTab.Labels', _shared_composers_1.SharedComposers.getLabelsWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Legend, 'DashboardWebStringId.AccordionTab.ChartLegend', _shared_composers_1.SharedComposers.getLegendWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', _data_item_properties_composer_1.DataItemsPropertiesComposer.getFormatRulesWrapper(model, () => this.createCFRuleDelegate(), () => true, this.editCFRuleHandler))
        ];
        return result;
    }
}
exports.ScatterChartItemPropertiesComposer = ScatterChartItemPropertiesComposer;


/***/ }),

/***/ 44726:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SharedComposers = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const model_1 = __webpack_require__(14198);
const _data_item_1 = __webpack_require__(44010);
const _data_item_format_1 = __webpack_require__(7577);
const _helper_classes_1 = __webpack_require__(8384);
const _knockout_utils_1 = __webpack_require__(4437);
const chart_series_1 = __webpack_require__(34303);
const _chart_axis_1 = __webpack_require__(45308);
const _chart_item_1 = __webpack_require__(88370);
const _chart_legend_1 = __webpack_require__(27097);
const _chart_series_1 = __webpack_require__(86254);
const _point_label_options_1 = __webpack_require__(10054);
const _map_item_1 = __webpack_require__(1035);
const _map_legend_1 = __webpack_require__(99983);
const _dashboard_item_1 = __webpack_require__(37710);
const _delta_options_1 = __webpack_require__(62800);
const _sparkline_options_1 = __webpack_require__(73612);
const date_time_period_1 = __webpack_require__(78252);
const _range_filter_item_1 = __webpack_require__(30097);
const _scatter_point_label_options_1 = __webpack_require__(25298);
const scatter_chart_item_1 = __webpack_require__(91456);
const _base_metadata_1 = __webpack_require__(17916);
const legacy_settings_1 = __webpack_require__(42649);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const _collection_editor_viewmodel_1 = __webpack_require__(66072);
const _collection_editor_viewmodel_base_1 = __webpack_require__(37965);
const _map_custom_shapefile_surface_1 = __webpack_require__(77038);
class SharedComposers {
    static getCommonTab(model, properties = [], disabledRules = {}) {
        var wrapper = this.getCommonWrapper(model, properties, disabledRules);
        return new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', wrapper);
    }
    static getAllTab(model) {
        return new _accordion_tab_1.AccordionTab('ALL', 'All', new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: []
        }));
    }
    static getContentArrangementTab(model) {
        return new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ContentArrangement, 'DashboardWebStringId.AccordionTab.Layout', this.getContentArrangementWrapper(model));
    }
    static getCommonWrapper(model, specificProperties = [], specificDisabledRules = {}, specificVisibilityRules = {}) {
        var properties = [
            _dashboard_item_1.showCaption,
            _base_metadata_1.name
        ];
        properties = properties.concat(specificProperties);
        var disabledRules = {};
        Object.keys(specificDisabledRules).forEach((key) => {
            disabledRules[key] = specificDisabledRules[key];
        });
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            visibilityFilterRules: specificVisibilityRules,
            disabledFilterRules: disabledRules
        });
    }
    static getCommonMapWrapper(model, propertiesController, specificProperties = []) {
        const editHandler = () => {
            var surface = new _map_custom_shapefile_surface_1.MapCustomShapeFileSurface(model.customShapefile, propertiesController);
            surface.startEditing(new _collection_editor_viewmodel_1.CollectionEditorEditItemArguments());
        };
        const editorOptions = {
            dataSource: Object.keys(_map_item_1.area.values),
            getDisplayText: (item) => _default_1.getLocalizationById(_map_item_1.area.values[item]),
            enableEditItem: (item) => item === 'Custom',
            editItemHandler: editHandler,
            onSelectionChanged: (item) => {
                if (item === 'Custom' && !model.customShapefile.url() && !model.customShapefile.data.shapeData())
                    editHandler();
            },
        };
        var properties = [Object.assign(Object.assign({}, _map_item_1.area), { formAdapterItem: _form_adapter_editors_1.editableListEditor(editorOptions) })].concat(specificProperties);
        return SharedComposers.getCommonWrapper(model, properties);
    }
    static getAxisWrapper(model, axisComputedTitle, alwaysShowZeroLevelInfo, isDateField = false, isNumericField = true, groupInterval = 'None') {
        var disabledRules = {};
        var visibilityRules = {};
        disabledRules[_chart_axis_1.titleVisibleBaseInfo.propertyName] = [_chart_axis_1.axisVisible.propertyName, '=', false];
        disabledRules[_chart_axis_1.title.propertyName] = [[_chart_axis_1.titleVisibleBaseInfo.propertyName, '=', false], 'or', [_chart_axis_1.axisVisible.propertyName, '=', false]];
        disabledRules[_chart_axis_1.logarithmicBase.propertyName] = [_chart_axis_1.logarithmic.propertyName, '=', false];
        disabledRules[_chart_axis_1.limitVisiblePoints.propertyName] = [_chart_axis_1.axisVisible.propertyName, '=', false];
        disabledRules[_chart_axis_1.visiblePointsCount.propertyName] = [[_chart_axis_1.limitVisiblePoints.propertyName, '=', false], 'or', [_chart_axis_1.axisVisible.propertyName, '=', false]];
        disabledRules[_data_item_1.numericFormat.propertyName] = [_data_item_1.numericFormat.propertyName, '=', false];
        disabledRules[_data_item_1.dateTimeFormat.propertyName] = [_data_item_1.dateTimeFormat.propertyName, '=', false];
        var properties = alwaysShowZeroLevelInfo ? [alwaysShowZeroLevelInfo] : [];
        properties = properties.concat([
            _chart_axis_1.reverse,
            _chart_axis_1.showGridLinesBaseInfo,
            _chart_axis_1.axisVisible,
            _chart_axis_1.titleVisibleBaseInfo,
            Object.assign({ editorOptions: { placeholder: axisComputedTitle } }, _chart_axis_1.title),
            _chart_axis_1.logarithmic,
            _chart_axis_1.logarithmicBase,
            _chart_axis_1.enableZooming,
            _chart_axis_1.limitVisiblePoints,
            _chart_axis_1.visiblePointsCount,
        ]);
        if (isDateField) {
            properties.push({
                container: _data_item_1.dateTimeFormat,
                properties: [
                    _data_item_format_1.yearFormat,
                    _data_item_format_1.monthFormat,
                    _data_item_format_1.quarterFormat,
                    _data_item_format_1.dayOfWeekFormat,
                    _data_item_format_1.hourFormat,
                    _data_item_format_1.dateFormat,
                    _data_item_format_1.dateHourFormat,
                    _data_item_format_1.dateHourMinuteFormat,
                    _data_item_format_1.dateTimeWithSecondsFormat,
                    _data_item_format_1.exactDateFormat
                ]
            });
            visibilityRules[_data_item_format_1.yearFormat.propertyName] = () => groupInterval === 'Year';
            visibilityRules[_data_item_format_1.quarterFormat.propertyName] = () => groupInterval === 'Quarter';
            visibilityRules[_data_item_format_1.monthFormat.propertyName] = () => groupInterval === 'Month';
            visibilityRules[_data_item_format_1.hourFormat.propertyName] = () => groupInterval === 'Hour';
            visibilityRules[_data_item_format_1.dayOfWeekFormat.propertyName] = () => groupInterval === 'DayOfWeek';
            visibilityRules[_data_item_format_1.dateFormat.propertyName] = () => groupInterval === 'DayMonthYear';
            visibilityRules[_data_item_format_1.dateHourFormat.propertyName] = () => groupInterval === 'DateHour';
            visibilityRules[_data_item_format_1.dateHourMinuteFormat.propertyName] = () => groupInterval === 'DateHourMinute';
            visibilityRules[_data_item_format_1.dateTimeWithSecondsFormat.propertyName] = () => groupInterval === 'DateHourMinuteSecond';
            visibilityRules[_data_item_format_1.exactDateFormat.propertyName] = () => groupInterval === 'None';
        }
        if (isNumericField) {
            properties.push(Object.assign(Object.assign({ sourceObject: this.getNumericFormatWrapper(model.numericFormat) }, _data_item_1.numericFormat), { displayName: null, formAdapterItem: _form_adapter_editors_1.nestedPropertyGridEditor(_default_1.getLocalizationById(_data_item_1.numericFormat.displayName)) }));
        }
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules,
            visibilityFilterRules: visibilityRules
        });
    }
    static getLegendWrapper(model) {
        var properties = [
            _chart_legend_1.chartLegendVisible,
            _chart_legend_1.isInsideDiagram,
            _chart_legend_1.insidePosition,
            _chart_legend_1.outsidePosition,
        ];
        var disabledRules = {};
        disabledRules[_chart_legend_1.isInsideDiagram.propertyName] = [_chart_legend_1.chartLegendVisible.propertyName, '=', false];
        disabledRules[_chart_legend_1.insidePosition.propertyName] = [_chart_legend_1.chartLegendVisible.propertyName, '=', false];
        disabledRules[_chart_legend_1.outsidePosition.propertyName] = [_chart_legend_1.chartLegendVisible.propertyName, '=', false];
        var visibleRules = {};
        visibleRules[_chart_legend_1.insidePosition.propertyName] = [_chart_legend_1.isInsideDiagram.propertyName, '=', true];
        visibleRules[_chart_legend_1.outsidePosition.propertyName] = [_chart_legend_1.isInsideDiagram.propertyName, '=', false];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [{
                    container: _chart_item_1.chartLegend,
                    properties: properties
                }],
            disabledFilterRules: disabledRules,
            visibilityFilterRules: visibleRules
        });
    }
    static getContentArrangementWrapper(model) {
        var properties = [
            _base_metadata_1.contentArrangementMode,
            _base_metadata_1.contentLineCount
        ];
        var disabledRules = {};
        disabledRules[_base_metadata_1.contentLineCount.propertyName] = [_base_metadata_1.contentArrangementMode.propertyName, '=', 'Auto'];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules
        });
    }
    static getLabelsWrapper(model) {
        if (model) {
            let simpleSeries = model instanceof chart_series_1.SimpleSeries ? model : null;
            var properties = [];
            if (model instanceof scatter_chart_item_1.ScatterChartItem) {
                properties.push(_point_label_options_1.showPointLabels);
                properties.push(_scatter_point_label_options_1.content);
            }
            else {
                let isFullStackedSeries = simpleSeries && ['FullStackedBar', 'FullStackedLine', 'FullStackedArea', 'FullStackedSplineArea'].indexOf(simpleSeries.seriesType()) >= 0;
                var avaliablePointLabelContentTypes = isFullStackedSeries ?
                    [
                        { value: model_1.PointLabelContentType.Argument, displayValueId: 'DashboardStringId.PointLabelContentTypeArgument' },
                        { value: model_1.PointLabelContentType.SeriesName, displayValueId: 'DashboardStringId.PointLabelContentTypeSeriesName' },
                        { value: model_1.PointLabelContentType.Value, displayValueId: 'DashboardStringId.PointLabelContentTypeValue' },
                        { value: model_1.PointLabelContentType.Percent, displayValueId: 'DashboardStringId.PointLabelContentTypePercent' }
                    ]
                    :
                        [
                            { value: model_1.PointLabelContentType.Argument, displayValueId: 'DashboardStringId.PointLabelContentTypeArgument' },
                            { value: model_1.PointLabelContentType.SeriesName, displayValueId: 'DashboardStringId.PointLabelContentTypeSeriesName' },
                            { value: model_1.PointLabelContentType.Value, displayValueId: 'DashboardStringId.PointLabelContentTypeValue' }
                        ];
                properties.push(Object.assign(Object.assign({}, _point_label_options_1.contentType), { formAdapterItem: _form_adapter_editors_1.flagsEnumListEditor({
                        values: avaliablePointLabelContentTypes,
                        enumDeclaration: model_1.PointLabelContentType
                    }) }));
            }
            properties = properties.concat([
                _point_label_options_1.overlappingMode,
                _point_label_options_1.pointLabelOrientation
            ]);
            if (simpleSeries && simpleSeries.seriesType().indexOf('Bar') > -1) {
                properties.push(_point_label_options_1.showForZeroValues);
                properties.push(_point_label_options_1.position);
            }
            if (model instanceof scatter_chart_item_1.ScatterChartItem) {
                properties.push(_point_label_options_1.position);
            }
            return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
                model: model,
                properties: [{
                        container: _chart_series_1.chartSeriesPointLabelOptions,
                        properties: properties
                    }],
                summary: ko.computed(() => (model.pointLabelOptions && model.pointLabelOptions.showPointLabels()) ? 'DashboardWebStringId.ButtonOn' : '')
            });
        }
        return null;
    }
    static getAttributeNamesSerializationInfo(model, propertyInfo, includeNoneValue = true, noneValueCaption = 'DashboardStringId.MapShapeNoneAttribute') {
        var attributeNames = _knockout_utils_1.safeComputed({ attributeNames: model._shapeFilesAttributeNameList }, args => {
            var attributes = args.attributeNames.map(attr => { return { value: attr, displayValueId: attr }; });
            if (includeNoneValue) {
                attributes.splice(0, 0, {
                    value: '',
                    displayValueId: noneValueCaption
                });
            }
            return attributes;
        });
        var info = Object.assign(Object.assign({}, propertyInfo), { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor({ values: attributeNames }) });
        return info;
    }
    static getShapeTitleSerializationInfo(model) {
        return SharedComposers.getAttributeNamesSerializationInfo(model, _map_item_1.shapeTitleAttributeName);
    }
    static getColorLegendWrapper(model) {
        var properties = [
            _map_legend_1.legendVisible,
            _map_legend_1.legendPosition
        ];
        var disabledRules = {};
        disabledRules[_map_legend_1.legendPosition.propertyName] = [_map_legend_1.legendVisible.propertyName, '=', false];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [{
                    container: _map_item_1.colorLegend,
                    properties: properties
                }],
            disabledFilterRules: disabledRules
        });
    }
    static getWeightedLegendWrapper(model) {
        var properties = [
            _map_legend_1.weightedLegendVisible,
            _map_legend_1.legendType,
            _map_legend_1.legendPosition
        ];
        var disabledRules = {};
        disabledRules[_map_legend_1.legendType.propertyName] = [_map_legend_1.weightedLegendVisible.propertyName, '=', false];
        disabledRules[_map_legend_1.legendPosition.propertyName] = [_map_legend_1.weightedLegendVisible.propertyName, '=', false];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [{
                    container: _map_item_1.weightedLegend,
                    properties: properties
                }],
            disabledFilterRules: disabledRules
        });
    }
    static getNumericFormatWrapper(model) {
        var measuredInUnits = (numericFormat) => {
            return numericFormat.formatType() === 'Number' || numericFormat.formatType() === 'Currency';
        };
        var notCustomizedFormat = (numericFormat) => {
            return numericFormat.formatType() === 'Auto' || numericFormat.formatType() === 'General';
        };
        var isCustomFormat = (numericFormat) => {
            return numericFormat.formatType() === 'Custom';
        };
        var disabledRules = {};
        disabledRules[_data_item_format_1.unit.propertyName] = (numericFormat) => !measuredInUnits(numericFormat);
        disabledRules[_data_item_format_1.precision.propertyName] = (numericFormat) => {
            return notCustomizedFormat(numericFormat) || (measuredInUnits(numericFormat) && numericFormat.unit() === 'Auto');
        };
        disabledRules[_data_item_format_1.includeGroupSeparator.propertyName] = (numericFormat) => {
            return notCustomizedFormat(numericFormat) || numericFormat.formatType() === 'Scientific';
        };
        disabledRules[_data_item_format_1.dataItemCurrencyCultureName.propertyName] = (numericFormat) => numericFormat.formatType() !== 'Currency';
        const visibilityFilterRules = {};
        visibilityFilterRules[_data_item_format_1.unit.propertyName] = (model) => !isCustomFormat(model);
        visibilityFilterRules[_data_item_format_1.precision.propertyName] = (model) => !isCustomFormat(model);
        visibilityFilterRules[_data_item_format_1.includeGroupSeparator.propertyName] = (model) => !isCustomFormat(model);
        visibilityFilterRules[_data_item_format_1.dataItemCurrencyCultureName.propertyName] = (model) => !isCustomFormat(model);
        visibilityFilterRules[_data_item_format_1.customFormatString.propertyName] = (model) => isCustomFormat(model);
        var properties = [
            _data_item_format_1.formatType,
            _data_item_format_1.unit,
            _data_item_format_1.precision,
            _data_item_format_1.includeGroupSeparator,
            Object.assign(Object.assign({}, _data_item_format_1.dataItemCurrencyCultureName), { formAdapterItem: _form_adapter_editors_1.currencyEditor() }),
            _data_item_format_1.customFormatString
        ];
        if (legacy_settings_1.DashboardPrivateSettings.customNumericFormatMode !== 'Enabled') {
            var restrictedFormatTypeValues = (Object.assign({}, _data_item_format_1.formatTypeValues));
            delete restrictedFormatTypeValues['Custom'];
            properties = [
                Object.assign(Object.assign({}, _data_item_format_1.formatType), { values: Object.assign({}, restrictedFormatTypeValues) }),
                ...properties.filter(p => p.propertyName !== _data_item_format_1.formatType.propertyName && p.propertyName !== _data_item_format_1.customFormatString.propertyName)
            ];
        }
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules,
            visibilityFilterRules: visibilityFilterRules,
            summary: ko.pureComputed(() => notCustomizedFormat(model) ? '' : (_data_item_format_1.formatTypeValues[model.formatType()] || model.formatType()))
        });
    }
    static getDeltaOptionsWrapper(model) {
        var disabledRules = {};
        disabledRules[_delta_options_1.resultIndicationThresholdType.propertyName] = (deltaOptions) => deltaOptions.resultIndicationMode() === 'NoIndication';
        disabledRules[_delta_options_1.resultIndicationThreshold.propertyName] = (deltaOptions) => deltaOptions.resultIndicationMode() === 'NoIndication';
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [],
            disabledFilterRules: disabledRules
        });
    }
    static getDeltaFormatsOptionsWrapper(model, editFormat = (model) => { }, ...additionalFormats) {
        var formats = this.getDeltaFormats(model);
        additionalFormats.forEach(format => formats.push(format));
        const collectionEditorOptions = {
            propertyName: 'title',
            editItemHandler: editFormat,
            allowAddItem: false,
            allowReorderItem: false,
            allowRemoveItem: false
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: { deltaFormats: ko.observableArray(formats) },
            properties: [{
                    formAdapterItem: _form_adapter_editors_1.collectionEditor(collectionEditorOptions),
                    propertyName: 'deltaFormats'
                }]
        });
    }
    static getDeltaFormats(kpiElement) {
        var formats = [];
        var actualValueFormat = kpiElement.actualValue() ? kpiElement.actualValue().numericFormat : null;
        var targetValueFormat = kpiElement.targetValue() ? kpiElement.targetValue().numericFormat : null;
        actualValueFormat && formats.push({ title: _default_1.getLocalizationById('DashboardStringId.DeltaValueTypeActualValueCaption'), numericFormat: actualValueFormat });
        targetValueFormat && formats.push({ title: _default_1.getLocalizationById('DashboardStringId.CardRowDataElementTypeTargetValueCaption'), numericFormat: targetValueFormat });
        return formats.concat([
            { title: _default_1.getLocalizationById('DashboardStringId.DeltaValueTypeAbsoluteVariationCaption'), numericFormat: kpiElement.absoluteVariationNumericFormat },
            { title: _default_1.getLocalizationById('DashboardStringId.DeltaValueTypePercentVariationCaption'), numericFormat: kpiElement.percentVariationNumericFormat },
            { title: _default_1.getLocalizationById('DashboardStringId.DeltaValueTypePercentOfTargetCaption'), numericFormat: kpiElement.percentOfTargetNumericFormat }
        ]);
    }
    static getCustomRangesWrapper(model, editRuleHandler, dataSourceBrowser, dimension) {
        let namePrefix = _default_1.getLocalizationById('DashboardStringId.DefaultPeriodName') + ' ';
        let isDateTimePeriodsPropertyVisible = ko.observable(false);
        let visibilityRules = {};
        visibilityRules[_range_filter_item_1.dateTimePeriods.propertyName] = () => {
            return isDateTimePeriodsPropertyVisible();
        };
        ko.computed(() => {
            if (dimension()) {
                dataSourceBrowser.findDataField(model.dataSource(), model.dataMember(), dimension().dataMember()).done((dataField) => {
                    isDateTimePeriodsPropertyVisible(dataField && dataField.fieldType() === 'DateTime');
                });
            }
        });
        const customItemTemplate = (itemData, itemIndex, itemElement) => {
            const name = ko.unwrap(itemData.name);
            const div = document.createElement('div');
            div.innerText = name;
            div.style.fontWeight = model.defaultDateTimePeriodName() === name ? '800' : 'normal';
            itemElement.appendChild(div);
            return div;
        };
        const refreshCallback = new _collection_editor_viewmodel_base_1.CollectionEditorRefreshCallback();
        const subscriptions = [];
        subscriptions.push(_knockout_utils_1.safeSubscribe({ defaultPeriod: model.defaultDateTimePeriodName }, _ => refreshCallback.refresh()));
        subscriptions.push(_knockout_utils_1.subscribeToArrayItemProperties(model.dateTimePeriods, (period) => period.name.subscribe(() => refreshCallback.refresh())));
        const collectionEditorOptions = {
            propertyName: 'name',
            createNewItemHandler: () => new date_time_period_1.DateTimePeriod({ '@ItemType': 'DateTimePeriod', '@Name': _helper_classes_1.NameGenerator.generateName(namePrefix, model.dateTimePeriods(), 'name', 1) }),
            editItemHandler: editRuleHandler,
            customTemplate: customItemTemplate,
            forceRefreshCallback: refreshCallback,
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            visibilityFilterRules: visibilityRules,
            properties: [Object.assign(Object.assign({}, _range_filter_item_1.dateTimePeriods), { formAdapterItem: _form_adapter_editors_1.collectionEditor(collectionEditorOptions) })],
            disposableModelSubscriptions: subscriptions,
        });
    }
    static getSparklineOptionsProperties() {
        let viewTypesMap = {
            'Line': {
                icon: 'dx-dashboard-chart-series-line',
                displayName: 'DashboardStringId.SparklineIndicationModeLine'
            },
            'Area': {
                icon: 'dx-dashboard-chart-series-area',
                displayName: 'DashboardStringId.SparklineIndicationModeArea'
            },
            'Bar': {
                icon: 'dx-dashboard-chart-series-bar',
                displayName: 'DashboardStringId.SparklineIndicationModeBar'
            },
            'WinLoss': {
                icon: 'dx-dashboard-sparkline-win-loss',
                displayName: 'DashboardStringId.SparklineIndicationModeWinLoss'
            }
        };
        return [
            Object.assign(Object.assign({}, _sparkline_options_1.viewType), { formAdapterItem: _form_adapter_editors_1.iconTypeEditor({ containersMap: viewTypesMap }) }),
            _sparkline_options_1.highlightMinMaxPoints,
            _sparkline_options_1.highlightStartEndPoints
        ];
    }
}
exports.SharedComposers = SharedComposers;


/***/ }),

/***/ 65862:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SharedPropertiesComposer = void 0;
const _accordion_tab_1 = __webpack_require__(74885);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class SharedPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler) {
        super(customizeHandler);
    }
    _composeTabsCore(model, args) {
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model))
        ];
        return result;
    }
}
exports.SharedPropertiesComposer = SharedPropertiesComposer;


/***/ }),

/***/ 3734:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TabContainerItemPropertiesComposer = void 0;
const ko = __webpack_require__(71032);
const _knockout_utils_1 = __webpack_require__(4437);
const _dashboard_layout_node_1 = __webpack_require__(29636);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const _collection_editor_viewmodel_base_1 = __webpack_require__(37965);
const _base_properties_composer_1 = __webpack_require__(20942);
class TabContainerItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(editTabPageHandler) {
        super(() => { });
        this.editTabPageHandler = editTabPageHandler;
    }
    _composeTabsCore() { }
    composeTabs(tabContainer, args) {
        let tabContainerLayoutItem = args.dashboard.layout().findLayoutItem(tabContainer);
        if (!tabContainerLayoutItem) {
            return [];
        }
        const customItemTemplate = (itemData, itemIndex, itemElement) => {
            const item = ko.unwrap(itemData.item);
            const div = document.createElement('div');
            div.innerText = item && args.dashboard._getDisplayDashboardItem(item).name() || '';
            div.style.fontWeight = tabContainer._activeTabPage() === item ? '800' : 'normal';
            itemElement.appendChild(div);
            return div;
        };
        const refreshCallback = new _collection_editor_viewmodel_base_1.CollectionEditorRefreshCallback();
        const subscriptions = [];
        subscriptions.push(_knockout_utils_1.safeSubscribe({ activeTabPage: tabContainer._activeTabPage }, _ => refreshCallback.refresh()));
        subscriptions.push(_knockout_utils_1.subscribeToArrayItemProperties(tabContainerLayoutItem.childNodes, (node) => {
            const tabPage = node.item;
            return tabPage && [tabPage.showItemAsTabPage, tabPage.name].map(s => s.subscribe(() => refreshCallback.refresh()));
        }));
        const collectionEditorOptions = {
            createNewItemHandler: () => tabContainerLayoutItem._createTabPage(),
            editItemHandler: (layoutItem, args) => this.editTabPageHandler(layoutItem.item, args),
            removeItemHandler: (layoutItem) => layoutItem._createViewModel().delete(),
            enableRemoveItem: () => tabContainerLayoutItem.childNodes().length > 1,
            reorderItemsHandler: (layoutItem, direction) => {
                let prevActiveTab = tabContainer._activeTabPage();
                var index = tabContainerLayoutItem.childNodes().indexOf(layoutItem);
                tabContainerLayoutItem.childNodes.splice(index, 1);
                tabContainerLayoutItem.childNodes.splice(index + (direction === 'up' ? -1 : 1), 0, layoutItem);
                if (prevActiveTab !== tabContainer._activeTabPage()) {
                    tabContainer._activeTabPage(prevActiveTab);
                }
            },
            customTemplate: customItemTemplate,
            forceRefreshCallback: refreshCallback,
        };
        return [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.TabContainer, 'DashboardStringId.DefaultNameTabContainerItem', new _object_properties_wrapper_1.ObjectPropertiesWrapper({
                model: tabContainerLayoutItem,
                properties: [
                    Object.assign(Object.assign({}, _dashboard_layout_node_1.layoutItemsSerializable), { displayName: 'DashboardWebStringId.TabPages', formAdapterItem: _form_adapter_editors_1.collectionEditor(collectionEditorOptions) })
                ],
                disposableModelSubscriptions: subscriptions,
            }))
        ];
    }
}
exports.TabContainerItemPropertiesComposer = TabContainerItemPropertiesComposer;


/***/ }),

/***/ 86927:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardTabPagePropertiesComposer = void 0;
const model_1 = __webpack_require__(14198);
const _interactivity_options_1 = __webpack_require__(97492);
const _dashboard_tab_page_1 = __webpack_require__(18916);
const _base_metadata_1 = __webpack_require__(17916);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const _base_properties_composer_1 = __webpack_require__(20942);
class DashboardTabPagePropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler) {
        super(customizeHandler);
    }
    _composeTabsCore(tabPage, args) {
        const objectPropertiesWrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: tabPage,
            properties: [
                _base_metadata_1.name_ViewModel,
                _dashboard_tab_page_1.showItemAsTabPage,
                {
                    container: model_1._tabItemInteractivityOptions,
                    properties: [
                        _interactivity_options_1.isMasterFilterDefaultTrue,
                        _interactivity_options_1.ignoreMasterFiltersDefaultFalse
                    ]
                }
            ]
        });
        return [new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.Options', objectPropertiesWrapper)];
    }
}
exports.DashboardTabPagePropertiesComposer = DashboardTabPagePropertiesComposer;


/***/ }),

/***/ 5191:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextBoxItemPropertiesComposer = void 0;
const _text_box_item_1 = __webpack_require__(69642);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _accordion_tab_1 = __webpack_require__(74885);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class TextBoxItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler) {
        super(customizeHandler);
    }
    _composeTabsCore(model) {
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model, [Object.assign(Object.assign({}, _text_box_item_1.textBoxText), { formAdapterItem: _form_adapter_editors_1.filePickerEditor({ type: 'file', accept: '.rtf', readMode: 'text' }) })]))
        ];
        return result;
    }
}
exports.TextBoxItemPropertiesComposer = TextBoxItemPropertiesComposer;


/***/ }),

/***/ 51558:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreemapItemPropertiesComposer = void 0;
const _dimension_1 = __webpack_require__(47557);
const _treemap_item_1 = __webpack_require__(50853);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
class TreemapItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler) {
        super(customizeHandler);
    }
    _composeTabsCore(model) {
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Layout, 'DashboardWebStringId.AccordionTab.Layout', this.getLayoutWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Labels, 'DashboardWebStringId.AccordionTab.Labels', this.getLabelsWrapper(model))
        ];
        return result;
    }
    getLayoutWrapper(model) {
        var properties = [
            _treemap_item_1.layoutAlgorithm,
            _treemap_item_1.layoutDirection
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    }
    getLabelsWrapper(model) {
        var properties = [
            _treemap_item_1.tilesLabelContentType,
            _treemap_item_1.tilesTooltipContentType,
            _treemap_item_1.groupsLabelContentType,
            _treemap_item_1.groupsTooltipContentType
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    }
    static getTileOptionsTab(model, dataItem) {
        return new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.TileOptions, 'DashboardWebStringId.TileOptions', TreemapItemPropertiesComposer.getTileOptionsWrapper(model, dataItem));
    }
    static getTileOptionsWrapper(model, dataItem) {
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: dataItem,
            properties: [_dimension_1.groupChildValues]
        });
    }
}
exports.TreemapItemPropertiesComposer = TreemapItemPropertiesComposer;


/***/ }),

/***/ 52172:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataItemCollectionSurface = void 0;
const ko = __webpack_require__(71032);
const data_item_1 = __webpack_require__(44650);
const dimension_1 = __webpack_require__(48336);
const _data_field_1 = __webpack_require__(68951);
const _undo_engine_helper_1 = __webpack_require__(2908);
const _display_name_provider_1 = __webpack_require__(8464);
const _data_item_surface_1 = __webpack_require__(47298);
class DataItemCollectionSurface {
    constructor(itemSurface, sectionInfo, extendTabsHandler, warning) {
        this.itemSurface = itemSurface;
        this.sectionInfo = sectionInfo;
        this.extendTabsHandler = extendTabsHandler;
        this.warning = warning;
        this._disposables = [];
        this.supportGroups = true;
        this.addClick = () => {
            var dataLink = new data_item_1.DataItemLink(this.itemSurface.dashboardItem);
            this.newItemSample(dataLink);
            var surface = new _data_item_surface_1.DataItemSurface(dataLink, this.sectionInfo.bindingProperty, this.itemSurface.dashboardItem, this.itemSurface._dataSourceBrowser, this.itemSurface.propertiesController, true, null, this.extendTabsHandler);
            surface.newItemCreated.add(model => this._addDataItem(model));
            surface.itemSelected.add(model => {
                this.newItemSample(undefined);
                this.selectDataItem(model);
            });
            this.itemSurface.propertiesController.mainModel({
                data: surface,
                containingCollection: this.dataItems
            });
        };
        this.removeDataItem = (data) => {
            this._removeDataItem(data);
        };
        this.dataItemDisplayNameProvider = (dataItem) => {
            return _display_name_provider_1.getDataItemDisplayName(this.itemSurface._dataSourceBrowser, this.itemSurface.dashboardItem, dataItem);
        };
        this.selectDataItem = (data) => {
            var surface = new _data_item_surface_1.DataItemSurface(data, this.sectionInfo.bindingProperty, this.itemSurface.dashboardItem, this.itemSurface._dataSourceBrowser, this.itemSurface.propertiesController, true, null, this.extendTabsHandler);
            surface.newItemCreated.add(model => {
                this._addDataItem(model);
            });
            this.dataItemSurface(surface);
            this.itemSurface.propertiesController.mainModel({
                data: this.dataItemSurface(),
                containingCollection: this.dataItems
            });
        };
        this.dataItemSurface = ko.observable();
        this.newItemSample = ko.observable();
        this.template = 'dx-dashboard-data-item-collection';
        this.dataItems = itemSurface.dashboardItem[sectionInfo.bindingProperty.propertyName];
        this.groups = ko.computed(() => {
            var result = [], position = 0;
            this.dataItems().forEach(dataItemLink => {
                if (dataItemLink.dataItem() instanceof dimension_1.Dimension && _data_field_1.IsOlapHierarchyField(dataItemLink.dataItem())) {
                    var dimension = dataItemLink.dataItem();
                    var group = result.filter(group => group.groupIndex === dimension.groupIndex())[0];
                    if (!group) {
                        group = {
                            groupIndex: dimension.groupIndex(),
                            items: [],
                            position: position++
                        };
                        result.push(group);
                    }
                    group.items.push(dataItemLink);
                }
                else {
                    result.push({
                        groupIndex: undefined,
                        items: [dataItemLink],
                        position: position++
                    });
                }
            });
            return result;
        });
    }
    get items() {
        return this.dataItems;
    }
    _addDataItem(model) {
        this.dataItems.push(model);
    }
    _removeDataItem(link) {
        var dataItem = link.dataItem();
        this.dataItems.remove(link);
        this.itemSurface.dashboardItem._removeDataItem(dataItem, true);
        if (dataItem instanceof dimension_1.Dimension && _data_field_1.IsOlapHierarchyField(dataItem)) {
            for (var i = this.dataItems().length - 1; i >= 0; i--) {
                var groupItemLink = this.dataItems()[i];
                var groupItem = groupItemLink.dataItem();
                if (groupItem instanceof dimension_1.Dimension && groupItem.groupIndex() == dataItem.groupIndex()) {
                    this.dataItems.remove(groupItemLink);
                    this.itemSurface.dashboardItem._removeDataItem(groupItem, true);
                }
            }
        }
    }
    relocateItem(item, placeholderIndex) {
        var dataLink = new data_item_1.DataItemLink(this.itemSurface.dashboardItem);
        var dataItem;
        if (item instanceof data_item_1.DataItemLink) {
            dataItem = item.dataItem();
        }
        else if (item['_getBindingModel']) {
            var x = item;
            var filledBinding = x._getBindingModel().filter(b => !!item[b.propertyName].uniqueName())[0];
            dataItem = item[filledBinding.propertyName].dataItem();
        }
        this.itemSurface
            ._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), dataItem.dataMember())
            .done((dataField) => {
            this.itemSurface.dashboardItem._removeDataItem(dataItem);
            var newDataItem = this.itemSurface.dashboardItem._createDataItem(dataField, this.sectionInfo.bindingProperty);
            newDataItem.grabFrom(dataItem);
            newDataItem.uniqueName(dataItem.uniqueName());
            dataLink.dataItem(newDataItem);
            this.items.splice(placeholderIndex, 0, dataLink);
        });
    }
    isOlap() {
        var filledItem = this
            .items()
            .filter(item => item.dataItem())[0];
        return _data_field_1.DataField.isOlap(filledItem.dataItem().dataMember());
    }
    errorFactory(link) {
        var linkErrorState = ko.observable(false);
        if (link.dataItem()) {
            this.itemSurface._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), link.dataItem().dataMember()).done((result) => {
                linkErrorState(!result);
            });
        }
        return linkErrorState;
    }
    dispose() {
        this._disposables.forEach((d) => {
            d.dispose();
        });
    }
}
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DataItemCollectionSurface.prototype, "_addDataItem", null);
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DataItemCollectionSurface.prototype, "_removeDataItem", null);
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DataItemCollectionSurface.prototype, "relocateItem", null);
exports.DataItemCollectionSurface = DataItemCollectionSurface;


/***/ }),

/***/ 53379:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataItemContainerCollectionSurface = void 0;
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const data_item_1 = __webpack_require__(44650);
const dimension_1 = __webpack_require__(48336);
const _data_field_1 = __webpack_require__(68951);
const _undo_engine_helper_1 = __webpack_require__(2908);
const _binding_model_1 = __webpack_require__(13382);
const _display_name_provider_1 = __webpack_require__(8464);
const _data_item_container_seed_1 = __webpack_require__(76176);
const _data_item_container_surface_1 = __webpack_require__(99032);
class DataItemContainerCollectionSurface {
    constructor(itemSurface, holder, sectionInfo, warning) {
        this.itemSurface = itemSurface;
        this.holder = holder;
        this.sectionInfo = sectionInfo;
        this.warning = warning;
        this._disposables = [];
        this.supportGroups = true;
        this.addDataItemContainerClick = () => {
            var dataItemContainer = new _data_item_container_seed_1.DataItemContainerSeed(this.itemSurface.dashboardItem, this.sectionInfo.bindingProperty.dataItemType, this.sectionInfo.bindingProperty.fieldConstraint);
            this.selectContainerSample(dataItemContainer);
        };
        this.selectContainerSample = (dataItemContainer) => {
            this.newContainerSample(dataItemContainer);
            var newContainerSurface = new _data_item_container_surface_1.DataItemContainerSurface(dataItemContainer, this.sectionInfo.detailsPropertiesComposer, this.itemSurface, this.removeDataItem);
            newContainerSurface.dataFieldChoosed.add((dataField) => {
                this._chooseDataField(dataField, newContainerSurface);
            });
            this._disposables.push(newContainerSurface.containerType.subscribe(containerType => {
                var newContainer = this.sectionInfo.bindingProperty.creator(containerType);
                this.selectContainerSample(newContainer);
            }));
            this.itemSurface.propertiesController.mainModel({
                data: newContainerSurface,
                containingCollection: this.items
            });
        };
        this.removeDataItem = (container) => {
            this._removeDataItem(container);
        };
        this.dataItemDisplayNameProvider = (dataItem) => {
            return _display_name_provider_1.getDataItemDisplayName(this.itemSurface._dataSourceBrowser, this.itemSurface.dashboardItem, dataItem);
        };
        this.getDisplayName = (object) => {
            return _display_name_provider_1.getDataItemContainerDisplayName(this.itemSurface._dataSourceBrowser, this.itemSurface.dashboardItem, object);
        };
        this.selectDataItemContainer = (container) => {
            var surface = new _data_item_container_surface_1.DataItemContainerSurface(container, this.sectionInfo.detailsPropertiesComposer, this.itemSurface, this.removeDataItem);
            surface.dataFieldChoosed.add((dataField, link) => {
                if (link) {
                    var newContainer = this.sectionInfo.bindingProperty.creator('', dataField);
                    var binding = newContainer._getBindingModel()[0];
                    newContainer[binding.propertyName].uniqueName(link.uniqueName());
                    var prevContainers = this.items().filter(item => {
                        var bindingProperty = item[binding.propertyName];
                        if (!!bindingProperty) {
                            return bindingProperty.dataItem().groupIndex && bindingProperty.dataItem().groupIndex() === link.dataItem().groupIndex();
                        }
                        return false;
                    });
                    this.items.splice(this.items().indexOf(prevContainers[prevContainers.length - 1]) + 1, 0, newContainer);
                }
            });
            this._disposables.push(surface.containerType.subscribe(containerType => {
                this._processChangeContainerType(containerType, container, surface);
            }));
            this.itemSurface.propertiesController.mainModel({
                data: surface,
                containingCollection: this.items
            });
        };
        this.newContainerSample = ko.observable();
        this.template = 'dx-dashboard-data-item-container-collection';
        this.groups = ko.computed(() => {
            var result = [], position = 0;
            this.items().forEach(dataItemContainer => {
                var dataItem = dataItemContainer[dataItemContainer._getBindingModel()[0].propertyName].dataItem();
                if (dataItem instanceof dimension_1.Dimension && _data_field_1.IsOlapHierarchyField(dataItem)) {
                    var dimension = dataItem;
                    var group = result.filter(group => group.groupIndex === dimension.groupIndex())[0];
                    if (!group) {
                        group = {
                            groupIndex: dimension.groupIndex(),
                            items: [],
                            position: position++
                        };
                        result.push(group);
                    }
                    group.items.push(dataItemContainer);
                }
                else {
                    result.push({
                        groupIndex: undefined,
                        items: [dataItemContainer],
                        position: position++
                    });
                }
            });
            return result;
        });
        this._disposables.push(this.groups);
    }
    get items() {
        return this.holder[this.sectionInfo.bindingProperty.propertyName];
    }
    _chooseDataField(dataField, newContainerSurface) {
        var containerModel = [newContainerSurface.model()];
        if (containerModel[0] instanceof _data_item_container_seed_1.DataItemContainerSeed) {
            containerModel = containerModel[0].grow(this.itemSurface.dashboardItem, this.sectionInfo.bindingProperty, dataField);
        }
        this.items.push.apply(this.items, containerModel);
        this.newContainerSample(undefined);
        this.selectDataItemContainer(containerModel[0]);
    }
    _removeDataItem(container) {
        this.groups().forEach(group => {
            if (!!group.items.filter(item => item === container)[0]) {
                group.items.forEach((item) => {
                    this.items.remove(item);
                    item._getBindingModel().forEach(binding => {
                        var dataItem = item[binding.propertyName].dataItem();
                        if (!!dataItem) {
                            this.itemSurface.dashboardItem._removeDataItem(dataItem, true);
                        }
                    });
                });
            }
        });
    }
    _processChangeContainer(newContainer, transfers, container, surface) {
        var position = this.items().indexOf(surface.model());
        transfers.forEach(transfer => {
            let link = newContainer[transfer.newBinding.propertyName];
            this.itemSurface.dashboardItem._updateDataItem(transfer.dataItem, transfer.newBinding, transfer.dataField, link._specifics.acceptableShapingType);
            link.uniqueName(transfer.dataItem.uniqueName());
            this.items.splice(position, 1, newContainer);
            link.dataItem().grabFrom(transfer.dataItem);
        });
        this.selectDataItemContainer(newContainer);
    }
    getCompatibleTransfers(container, newContainer) {
        if (_binding_model_1._areTheSameBindingProviders(container, newContainer)) {
            return newContainer
                ._getBindingModel()
                .map(binding => {
                var filledBinding = container._getBindingModel().filter(b => b.propertyName === binding.propertyName)[0];
                if (!filledBinding)
                    return;
                if (!container[filledBinding.propertyName].uniqueName()) {
                    return;
                }
                var dataItem = container[filledBinding.propertyName].dataItem();
                var transferInfo = {
                    filledBinding: filledBinding,
                    dataItem: dataItem,
                    newBinding: binding,
                    dataField: null,
                    promise: this.itemSurface._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), dataItem.dataMember())
                };
                transferInfo.promise.done(field => {
                    transferInfo.dataField = field;
                });
                return transferInfo;
            })
                .filter(t => !!t);
        }
        return [];
    }
    _processChangeContainerType(containerType, container, surface) {
        var newContainer = this.sectionInfo.bindingProperty.creator(containerType);
        if (!!newContainer.grabFrom) {
            newContainer.grabFrom(container);
        }
        var transfers = this.getCompatibleTransfers(container, newContainer);
        if (transfers.length === 0) {
            let filledBinding = container._getBindingModel().filter(b => !!container[b.propertyName].uniqueName())[0];
            let dataItem = container[filledBinding.propertyName].dataItem();
            let binding = newContainer._getBindingModel()[0];
            let transferInfo = {
                filledBinding: filledBinding,
                dataItem: dataItem,
                newBinding: binding,
                dataField: null,
                promise: this.itemSurface._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), dataItem.dataMember())
            };
            transferInfo.promise.done(field => {
                transferInfo.dataField = field;
            });
            transfers.push(transferInfo);
        }
        _jquery_helpers_1.jqueryWhenArray(transfers.map(t => t.promise)).done(() => this._processChangeContainer(newContainer, transfers, container, surface));
    }
    relocateItem(item, placeholderIndex) {
        var dataItem;
        if (item instanceof data_item_1.DataItemLink) {
            dataItem = item.dataItem();
        }
        else if (item['_getBindingModel']) {
            this.items.splice(placeholderIndex, 0, item);
            return;
        }
        this.itemSurface
            ._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), dataItem.dataMember())
            .done((dataField) => {
            let newContainer = this.sectionInfo.bindingProperty.creator(undefined, dataField, dataItem);
            let binding = newContainer._getBindingModel()[0];
            let link = newContainer[binding.propertyName];
            this.itemSurface.dashboardItem._updateDataItem(dataItem, binding, dataField, link._specifics.acceptableShapingType);
            link.uniqueName(dataItem.uniqueName());
            link.dataItem().grabFrom(dataItem);
            this.items.splice(placeholderIndex, 0, newContainer);
        });
    }
    isOlap() {
        var filledLink = this
            .items()
            .reduce((links, container) => links.concat(container._getBindingModel().map(bm => container[bm.propertyName])), [])
            .filter(dil => dil.dataItem())[0];
        return _data_field_1.DataField.isOlap(filledLink.dataItem().dataMember());
    }
    errorFactory(container) {
        var errorState = ko.observable(false);
        var fieldPromises = [];
        container
            ._getBindingModel()
            .filter(binding => container[binding.propertyName].dataItem())
            .forEach(binding => {
            fieldPromises.push(this.itemSurface._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), container[binding.propertyName].dataItem().dataMember()));
        });
        let isCorruptedDataField = (field) => !field || field.isCorruptedCalcField && field.isCorruptedCalcField();
        _jquery_helpers_1.jqueryWhenArray(fieldPromises).done((...fields) => {
            errorState(fields.filter(f => isCorruptedDataField(f)).length > 0);
        });
        return errorState;
    }
    dispose() {
        this._disposables.forEach((d) => {
            d.dispose();
        });
    }
}
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DataItemContainerCollectionSurface.prototype, "_chooseDataField", null);
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DataItemContainerCollectionSurface.prototype, "_removeDataItem", null);
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DataItemContainerCollectionSurface.prototype, "_processChangeContainer", null);
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DataItemContainerCollectionSurface.prototype, "relocateItem", null);
exports.DataItemContainerCollectionSurface = DataItemContainerCollectionSurface;


/***/ }),

/***/ 14530:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataItemLinkComponent = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
class DataItemLinkComponent {
    constructor(surface, $element, propertiesController, surfaceItemsFactory) {
        this.surface = surface;
        this.$element = $element;
        this.propertiesController = propertiesController;
        this.surfaceItemsFactory = surfaceItemsFactory;
    }
}
exports.DataItemLinkComponent = DataItemLinkComponent;
ko.components.register('dx-dashboard-data-item-link', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            if (params.propertiesController) {
                params.selected = ko.computed(() => (params.propertiesController.mainModel() && params.propertiesController.mainModel().data && ko.unwrap(params.propertiesController.mainModel().data.model)) === (params.selectionTarget ? ko.unwrap(params.selectionTarget) : ko.unwrap(params.item)));
            }
            if (params.isEmpty === undefined) {
                params.isEmpty = ko.computed(() => {
                    return !(params.item && params.item.dataItem && params.item.dataItem() && params.item.dataItem().dataMember());
                });
            }
            params.placeholder = _default_1.getLocalizationById(params.placeholder);
            params.selectedPlaceholder = _default_1.getLocalizationById(params.selectedPlaceholder);
            return params;
        }
    },
    template: { element: 'dx-dashboard-data-item-link' }
});


/***/ }),

/***/ 95236:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SingleDataItemSurface = void 0;
const ko = __webpack_require__(71032);
const data_item_1 = __webpack_require__(44650);
const _data_field_1 = __webpack_require__(68951);
const _undo_engine_helper_1 = __webpack_require__(2908);
const _display_name_provider_1 = __webpack_require__(8464);
const _data_item_surface_1 = __webpack_require__(47298);
class SingleDataItemSurface {
    constructor(options) {
        this._disposables = [];
        this.supportGroups = false;
        this.removeDataItem = () => {
            this._removeDataItem();
        };
        this.dataItemDisplayNameProvider = (dataItem) => {
            return _display_name_provider_1.getDataItemDisplayName(this.itemSurface._dataSourceBrowser, this.itemSurface.dashboardItem, dataItem);
        };
        this.selectDataItem = () => {
            this.dataItemSurface(new _data_item_surface_1.DataItemSurface(this.dataItemLink, this.sectionInfo.bindingProperty, this.itemSurface.dashboardItem, this.itemSurface._dataSourceBrowser, this.itemSurface.propertiesController, true, this.fieldConstraint, this.extendTabsHandler));
            this.dataItemSurface().newItemCreated.add((model) => {
                this.selectDataItem();
            });
            this.itemSurface.propertiesController.mainModel({
                data: this.dataItemSurface()
            });
        };
        this.dataItemSurface = ko.observable();
        this.items = ko.observableArray([]);
        this.template = 'dx-dashboard-data-item-single';
        this.itemSurface = options.itemSurface;
        this.sectionInfo = options.sectionInfo;
        this.warning = options.warning;
        this.fieldConstraint = options.fieldConstraint;
        this.extendTabsHandler = options.extendTabsHandler;
        this.dataItemLink = this.itemSurface.dashboardItem[this.sectionInfo.bindingProperty.propertyName];
        this._disposables.push(ko.computed(() => {
            if (this.dataItemLink.uniqueName()) {
                this.items([this.dataItemLink]);
            }
        }));
        this._disposables.push(this.items.subscribe((newValue) => {
            if (!newValue.length) {
                this.dataItemLink.uniqueName(undefined);
            }
        }));
    }
    _removeDataItem() {
        if (!!this.dataItemLink.dataItem()) {
            this.itemSurface.propertiesController.mainModel(null);
            var dataItem = this.dataItemLink.dataItem();
            this.dataItemLink.uniqueName(undefined);
            this.itemSurface.dashboardItem._removeDataItem(dataItem);
        }
    }
    relocateItem(item, placeholderIndex) {
        var dataItem;
        if (item instanceof data_item_1.DataItemLink) {
            dataItem = item.dataItem();
        }
        else if (item['_getBindingModel']) {
            var x = item;
            var filledBinding = x._getBindingModel().filter(b => !!item[b.propertyName].uniqueName())[0];
            dataItem = item[filledBinding.propertyName].dataItem();
        }
        this.itemSurface
            ._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), dataItem.dataMember())
            .done((dataField) => {
            var newDataItem = this.itemSurface.dashboardItem._createDataItem(dataField, this.sectionInfo.bindingProperty);
            newDataItem.grabFrom(dataItem);
            this.itemSurface.dashboardItem._removeDataItem(dataItem);
            this.dataItemLink.dataItem(newDataItem);
        });
    }
    isOlap() {
        return _data_field_1.DataField.isOlap(this.dataItemLink.dataItem() && this.dataItemLink.dataItem().dataMember());
    }
    errorFactory(link) {
        var linkErrorState = ko.observable(false);
        if (link.dataItem()) {
            this.itemSurface._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), link.dataItem().dataMember()).done((result) => {
                linkErrorState(!result);
            });
        }
        return linkErrorState;
    }
    dispose() {
        this._disposables.forEach((d) => {
            d.dispose();
        });
    }
}
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], SingleDataItemSurface.prototype, "_removeDataItem", null);
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], SingleDataItemSurface.prototype, "relocateItem", null);
exports.SingleDataItemSurface = SingleDataItemSurface;


/***/ }),

/***/ 32498:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataDashboardItemSurface = exports.BaseItemSurface = void 0;
const string_1 = __webpack_require__(36306);
const ko = __webpack_require__(71032);
const _data_source_browser_1 = __webpack_require__(9970);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const disposable_object_1 = __webpack_require__(99253);
const _undo_engine_helper_1 = __webpack_require__(2908);
const accordion_tab_options_1 = __webpack_require__(1628);
const _confirm_dialog_1 = __webpack_require__(75110);
const _data_item_collection_surface_1 = __webpack_require__(52172);
const _section_descriptors_1 = __webpack_require__(70990);
class BaseItemSurface extends disposable_object_1.DisposableObject {
    constructor() {
        super(...arguments);
        this._dashboardItemCustomization = (tabs, model, args) => {
            if (this.customizeDashboardItemTabs) {
                this.customizeDashboardItemTabs({
                    dashboardItem: model,
                    addSection: (customTabOption) => {
                        accordion_tab_options_1._customizeTabs(tabs, customTabOption, model);
                    }
                });
            }
        };
    }
    getPropertiesComposer() {
        throw "'getPropertiesComposer' method is not implemented.";
    }
}
exports.BaseItemSurface = BaseItemSurface;
class DataDashboardItemSurface extends BaseItemSurface {
    constructor(dashboardItem, dashboardModel, _dataSourceBrowser, notificationController) {
        super();
        this.dashboardItem = dashboardItem;
        this.dashboardModel = dashboardModel;
        this._dataSourceBrowser = _dataSourceBrowser;
        this.notificationController = notificationController;
        this._dataItemContainerCustomization = (tabs, target, args) => {
            if (this.customizeDataItemContainerTabs) {
                this.customizeDataItemContainerTabs({
                    dashboardItem: args.dashboardItem,
                    dataItemContainer: target,
                    addSection: (customTabOption) => {
                        accordion_tab_options_1._customizeTabs(tabs, customTabOption, target);
                    }
                });
            }
        };
        this.dataSourceName = ko.observable();
        this.dataMemberName = ko.observable();
        this.dataSourceDisplayText = ko.computed(() => {
            var dsName = this.dashboardItem.dataSource();
            if (!!dsName) {
                var dataSource = this._dataSourceBrowser.findDataSource(dsName);
                if (!!dataSource) {
                    if (dataSource.supportDataMembers && this._dataSourceBrowser.isLoading()) {
                        return 'DashboardStringId.MessageLoading';
                    }
                    return this.dashboardItem.dataMember() ? dataSource.name() + '/' + this.dashboardItem.dataMember() : dataSource.name();
                }
            }
            return 'DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton';
        });
        this.needSetDataSource = ko.computed(() => {
            var dsName = this.dashboardItem.dataSource();
            if (!!dsName) {
                var dataSource = this._dataSourceBrowser.findDataSource(dsName);
                if (!!dataSource && dataSource.supportDataMembers) {
                    return !this.dashboardItem.dataMember();
                }
                return !dataSource;
            }
            return true;
        });
        this.changeDataSourcePanelVisible = ko.observable(false);
        this.template = 'dx-dashboard-base-item-surface';
        this.dataSections = ko.observableArray([]);
        this.fillSections();
        if (this.showDefaultSections) {
            this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.HiddenDimensions, this.extendHiddenDimensionsTabs.bind(this)));
            this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.HiddenMeasures, this.extendHiddenMeasuresTabs.bind(this)));
        }
        this.confirmDialogViewModel = new _confirm_dialog_1.ConfirmDialogViewModel();
        this.toDispose(this.dataSourceDisplayText);
        this.dataSections().forEach(section => this.toDispose(section));
    }
    get showDefaultSections() {
        return true;
    }
    fillSections() {
    }
    extendHiddenDimensionsTabs(tabs, model) {
    }
    extendHiddenMeasuresTabs(tabs, model) {
    }
    changeDataSource() {
        if (!this.changeDataSourcePanelVisible()) {
            this.dataSourceName(this.dashboardItem.dataSource());
            this.dataMemberName(this.dashboardItem.dataMember());
        }
        this.changeDataSourcePanelVisible(!this.changeDataSourcePanelVisible());
    }
    _changeDataSource() {
        this.dashboardItem.dataSource(this.dataSourceName());
        this.dashboardItem.dataMember(this.dataMemberName());
        let newDataSource = this._dataSourceBrowser.findDataSource(this.dataSourceName());
        let notificationStr = string_1.format(_default_1.getLocalizationById('DashboardWebStringId.DashboardItemMenu.Bindings.ChangedDataSourceMessage'), this.dashboardItem.name(), `${newDataSource.name()}${!!this.dataMemberName() ? ` (${this.dataMemberName()})` : ''}`);
        this.notificationController.showSuccess(notificationStr);
    }
    saveDataSourceChanges() {
        if (!!this.propertiesController) {
            this.propertiesController.mainModel(null);
        }
        this._changeDataSource();
        this.changeDataSourcePanelVisible(false);
    }
    get dataSourceBrowser() {
        return {
            getDataFieldsArray: (dataSourceName) => {
                var deferred = _jquery_helpers_1.createJQueryDeferred();
                if (!dataSourceName) {
                    return deferred.resolve(this.dashboardModel.dataSources().map(ds => {
                        return {
                            dataSourceName: ds.componentName(),
                            dataMemberName: '',
                            dataMember: ds.componentName,
                            name: ds.componentName,
                            displayName: ds.name,
                            fieldType: ko.observable('Unknown'),
                            nodeType: ko.observable('DataSource'),
                            isDataFieldNode: ko.observable(!ds.supportDataMembers)
                        };
                    })).promise();
                }
                this._dataSourceBrowser.getDataFieldsArray(dataSourceName, '', '', _data_source_browser_1.isNonCollectionDataField).done(dataMembers => {
                    deferred.resolve(dataMembers.map(dm => {
                        return {
                            dataSourceName: dataSourceName,
                            dataMemberName: dm.dataMember(),
                            dataMember: dm.dataMember,
                            name: dm.name,
                            displayName: dm.displayName,
                            fieldType: dm.fieldType,
                            nodeType: dm.nodeType,
                            isDataFieldNode: ko.observable(true)
                        };
                    }));
                });
                return deferred.promise();
            },
            splitFullPath: (...args) => this._dataSourceBrowser.splitFullPath.apply(this._dataSourceBrowser, args),
            findDataSource: (dataSourceName) => this._dataSourceBrowser.findDataSource(dataSourceName)
        };
    }
}
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DataDashboardItemSurface.prototype, "_changeDataSource", null);
exports.DataDashboardItemSurface = DataDashboardItemSurface;


/***/ }),

/***/ 93422:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BoundImageItemSurface = void 0;
const _bound_image_item_1 = __webpack_require__(49320);
const _bound_image_item_properties_composer_1 = __webpack_require__(53239);
const _single_data_item_surface_1 = __webpack_require__(95236);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
class BoundImageItemSurface extends _base_item_surface_1.DataDashboardItemSurface {
    fillSections() {
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: {
                title: 'DashboardWebStringId.Binding.Attribute',
                bindingProperty: {
                    propertyName: _bound_image_item_1.imageItem.propertyName,
                    dataItemType: 'Dimension',
                    emptyPlaceholder: 'DashboardWebStringId.Binding.SetAttribute',
                    selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureAttribute'
                }
            }
        }));
    }
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    getPropertiesComposer() {
        return new _bound_image_item_properties_composer_1.BoundImageItemPropertiesComposer(this._dashboardItemCustomization);
    }
}
exports.BoundImageItemSurface = BoundImageItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('BoundImage', BoundImageItemSurface);


/***/ }),

/***/ 52420:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BubbleMapItemSurface = void 0;
const ko = __webpack_require__(71032);
const _data_field_1 = __webpack_require__(68951);
const _bubble_map_item_properties_composer_1 = __webpack_require__(96390);
const _data_item_collection_surface_1 = __webpack_require__(52172);
const _single_data_item_surface_1 = __webpack_require__(95236);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
class BubbleMapItemSurface extends _base_item_surface_1.DataDashboardItemSurface {
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    fillSections() {
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Latitude,
            fieldConstraint: field => _data_field_1.DataField.isNumeric(field),
            warning: ko.computed(() => !this.dashboardItem.latitude() && !!(this.dashboardItem.longitude() || this.dashboardItem.weight() || this.dashboardItem.color() || this.dashboardItem.tooltipDimensions().length || this.dashboardItem.tooltipMeasures().length))
        }));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Longitude,
            fieldConstraint: field => _data_field_1.DataField.isNumeric(field),
            warning: ko.computed(() => !this.dashboardItem.longitude() && !!(this.dashboardItem.latitude() || this.dashboardItem.weight() || this.dashboardItem.color() || this.dashboardItem.tooltipDimensions().length || this.dashboardItem.tooltipMeasures().length))
        }));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({ itemSurface: this, sectionInfo: _section_descriptors_1.SectionDescriptors.Weight }));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Color,
            warning: ko.computed(() => !this.dashboardItem.color() && !!(this.dashboardItem.latitude() || this.dashboardItem.longitude() || this.dashboardItem.weight() || this.dashboardItem.tooltipDimensions().length || this.dashboardItem.tooltipMeasures().length))
        }));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.TooltipDimensions));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.TooltipMeasures));
    }
    getPropertiesComposer() {
        return new _bubble_map_item_properties_composer_1.BubleMapItemPropertiesComposer(this._dashboardItemCustomization);
    }
}
exports.BubbleMapItemSurface = BubbleMapItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('BubbleMap', BubbleMapItemSurface);


/***/ }),

/***/ 76330:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardItemSurface = void 0;
const ko = __webpack_require__(71032);
const _data_field_1 = __webpack_require__(68951);
const card_item_format_rule_1 = __webpack_require__(22233);
const _undo_engine_helper_1 = __webpack_require__(2908);
const card_1 = __webpack_require__(15942);
const card_layout_template_1 = __webpack_require__(47388);
const legacy_settings_1 = __webpack_require__(42649);
const _format_rule_surface_1 = __webpack_require__(25059);
const _accordion_tab_1 = __webpack_require__(74885);
const _collection_editor_viewmodel_1 = __webpack_require__(66072);
const _display_name_provider_1 = __webpack_require__(8464);
const _card_element_properties_composer_1 = __webpack_require__(28439);
const _card_item_properties_composer_1 = __webpack_require__(31641);
const _data_item_properties_composer_1 = __webpack_require__(16821);
const _data_item_collection_surface_1 = __webpack_require__(52172);
const _data_item_container_collection_surface_1 = __webpack_require__(53379);
const _single_data_item_surface_1 = __webpack_require__(95236);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
const _delta_numeric_format_surface_1 = __webpack_require__(85915);
const _edit_card_template_surface_1 = __webpack_require__(2029);
class CardItemSurface extends _base_item_surface_1.DataDashboardItemSurface {
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
        this._editRuleHandler = (selection, args, container) => {
            var surface = new _format_rule_surface_1.FormatRuleSurface(container, this.dashboardItem, this._dataSourceBrowser, this.propertiesController);
            surface.startEditing(args);
        };
    }
    addConditionalFormattingOptions(tabs, dataItem) {
        if (dataItem && dataItem.uniqueName()) {
            tabs.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', _data_item_properties_composer_1.DataItemsPropertiesComposer.getFormatRulesWrapper(this.dashboardItem, () => {
                let rule = new card_item_format_rule_1.CardItemFormatRule();
                rule.dataItemName(dataItem.uniqueName());
                return rule;
            }, (rule) => {
                if (rule instanceof card_item_format_rule_1.CardItemFormatRule) {
                    return rule.dataItemName() === dataItem.uniqueName();
                }
                return false;
            }, this._editRuleHandler)));
        }
    }
    extendHiddenMeasuresTabs(tabs, model) {
        this.addConditionalFormattingOptions(tabs, model);
    }
    fillSections() {
        var applyTemplateToAllCards = (template) => {
            this.applyLayoutTemplateToAllCards(template);
        };
        var sectionInfo = {
            title: 'DashboardWebStringId.Binding.Cards',
            bindingProperty: {
                propertyName: 'cards',
                groupName: 'Card',
                emptyPlaceholder: 'DashboardWebStringId.Binding.AddCard',
                selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureCard',
                creator: (itemType = 'Card') => {
                    var card = new card_1.Card(this.dashboardItem, { '@ItemType': itemType });
                    var defaultTemplate;
                    if (legacy_settings_1.LegacySettings._useCardLegacyLayout) {
                        defaultTemplate = new card_layout_template_1.CardEmptyLayoutTemplate();
                    }
                    else {
                        defaultTemplate = new card_layout_template_1.CardStretchedLayoutTemplate();
                        defaultTemplate._resetToDefaults();
                    }
                    card.layoutTemplate(defaultTemplate);
                    return card;
                },
                dataItemType: 'Measure',
                fieldConstraint: (dataField) => !_data_field_1.DataField.isMeasure(dataField) || _data_field_1.DataField.isNumeric(dataField)
            },
            detailsPropertiesComposer: new _card_element_properties_composer_1.CardElementPropertiesComposer(this._dataItemContainerCustomization, (model) => {
                var surface = new _edit_card_template_surface_1.EditCardTemplateSurface(model, this.propertiesController, this.dashboardItem.seriesDimensions().map(dim => _display_name_provider_1.getDataItemDisplayName(this._dataSourceBrowser, this.dashboardItem, dim)), applyTemplateToAllCards);
                surface.startEditing(new _collection_editor_viewmodel_1.CollectionEditorEditItemArguments());
            }, (model) => {
                var surface = new _delta_numeric_format_surface_1.DeltaNumericFormatSurface(model, this.propertiesController);
                surface.startEditing(new _collection_editor_viewmodel_1.CollectionEditorEditItemArguments());
            }, applyTemplateToAllCards, (selection, args, container) => {
                var surface = new _format_rule_surface_1.FormatRuleSurface(container, this.dashboardItem, this._dataSourceBrowser, this.propertiesController);
                surface.startEditing(args);
            })
        };
        this.dataSections.push(new _data_item_container_collection_surface_1.DataItemContainerCollectionSurface(this, this.dashboardItem, sectionInfo, ko.computed(() => !this.dashboardItem.cards().length && (!!this.dashboardItem.seriesDimensions().length || (!!this.dashboardItem.sparklineArgument() && !!this.dashboardItem.sparklineArgument().uniqueName())))));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.SeriesDimension, this.addConditionalFormattingOptions.bind(this)));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.SparklineArgument,
            fieldConstraint: (dataField) => {
                return _data_field_1.DataField.isContinous(dataField);
            }
        }));
    }
    getPropertiesComposer() {
        return new _card_item_properties_composer_1.CardItemPropertiesComposer(this._dashboardItemCustomization, this._editRuleHandler);
    }
    applyLayoutTemplateToAllCards(template) {
        this.dashboardItem.cards().forEach(card => {
            if (ko.unwrap(card.layoutTemplate) !== ko.unwrap(template)) {
                card.layoutTemplate(template.clone());
            }
        });
    }
}
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], CardItemSurface.prototype, "applyLayoutTemplateToAllCards", null);
exports.CardItemSurface = CardItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('Card', CardItemSurface);


/***/ }),

/***/ 9637:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChartItemSurface = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const chart_item_format_rule_1 = __webpack_require__(3267);
const _helper_classes_1 = __webpack_require__(8384);
const chart_pane_1 = __webpack_require__(28665);
const chart_series_creator_1 = __webpack_require__(52469);
const _chart_item_format_rule_properties_composer_1 = __webpack_require__(10651);
const _format_rule_surface_1 = __webpack_require__(25059);
const _accordion_tab_1 = __webpack_require__(74885);
const _chart_item_properties_composer_1 = __webpack_require__(20562);
const _chart_series_properties_composer_1 = __webpack_require__(94766);
const _data_item_properties_composer_1 = __webpack_require__(16821);
const _data_item_collection_surface_1 = __webpack_require__(52172);
const _data_item_container_collection_surface_1 = __webpack_require__(53379);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
class ChartItemSurface extends _base_item_surface_1.DataDashboardItemSurface {
    editCFRuleRuleHandler(item, args, container) {
        var surface = new _format_rule_surface_1.FormatRuleSurface(container, this.dashboardItem, this._dataSourceBrowser, this.propertiesController);
        surface.startEditing(args);
    }
    createCFRuleDelegate() {
        return new chart_item_format_rule_1.ChartItemFormatRule();
    }
    addConditionalFormattingOptions(tabs, dataItem) {
        const dataItemName = dataItem && dataItem.uniqueName();
        if (!dataItemName)
            return;
        const createRule = () => {
            const cfRule = this.createCFRuleDelegate();
            cfRule.dataItemName(dataItemName);
            const dataItemApplyTo = _chart_item_format_rule_properties_composer_1.getChartApplyToDataItems(this.dashboardItem, this._dataSourceBrowser)()[0];
            dataItemApplyTo && cfRule.dataItemApplyToName(ko.unwrap(dataItemApplyTo.uniqueName));
            return cfRule;
        };
        tabs.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', _data_item_properties_composer_1.DataItemsPropertiesComposer.getFormatRulesWrapper(this.dashboardItem, createRule, (cfRule) => cfRule.dataItemName() === dataItemName, this.editCFRuleRuleHandler.bind(this))));
    }
    extendHiddenMeasuresTabs(tabs, model) {
        this.addConditionalFormattingOptions(tabs, model);
    }
    fillSections() {
        var createPaneSection = (pane, index) => {
            var numberPostfix = this.dashboardItem.panes().length === 1 ? '' : ' (' + pane.name() + ')', sectionsBeforePanes = 1;
            var sectionInfo = {
                title: _default_1.formatLocalizable('DashboardWebStringId.Binding.ValuesPattern', numberPostfix),
                bindingProperty: {
                    propertyName: 'series',
                    groupName: 'Series',
                    dataItemType: 'Measure',
                    emptyPlaceholder: 'DashboardWebStringId.Binding.AddValues',
                    selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureValues',
                    creator: (itemType = 'Bar') => {
                        return pane.createSeriesByViewType(itemType);
                    },
                    containersMap: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap
                },
                actions: undefined,
                detailsPropertiesComposer: new _chart_series_properties_composer_1.ChartSeriesPropertiesComposer(this._dataItemContainerCustomization, chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap, true, true, this.editCFRuleRuleHandler.bind(this), this.createCFRuleDelegate)
            };
            if (index > 0) {
                sectionInfo.actions = [{
                        title: 'DashboardWebStringId.Binding.RemovePane',
                        icon: 'dx-dashboard-remove-small',
                        action: () => {
                            this.dashboardItem.panes.remove(pane);
                            return false;
                        }
                    }];
            }
            this.dataSections.splice(index + sectionsBeforePanes, 0, new _data_item_container_collection_surface_1.DataItemContainerCollectionSurface(this, pane, sectionInfo, ko.computed(() => (this.dashboardItem.arguments().length > 0 || this.dashboardItem.seriesDimensions().length > 0) && this.dashboardItem.panes().every(p => p.series().length === 0))));
        };
        this.dataSections.push({
            template: 'dx-dashboard-add-pane-section',
            addPane: () => {
                var pane = new chart_pane_1.ChartPane(this.dashboardItem, { '@Name': _helper_classes_1.NameGenerator.generateName(_default_1.getLocalizationById('DashboardStringId.DefaultNameChartPane') + ' ', this.dashboardItem.panes(), 'name', 1), '@ItemType': 'Pane' });
                this.dashboardItem.panes.push(pane);
            },
            dispose: () => { }
        });
        this._disposables.push(ko.computed(() => {
            var newPanes = this.dashboardItem.panes();
            let lastPaneSectionIndex = 1;
            for (; lastPaneSectionIndex < this.dataSections().length; lastPaneSectionIndex++) {
                if (!(this.dataSections()[lastPaneSectionIndex] instanceof _data_item_container_collection_surface_1.DataItemContainerCollectionSurface)) {
                    break;
                }
            }
            this.dataSections.splice(1, lastPaneSectionIndex - 1);
            this.dashboardItem.panes().forEach((pane, index) => {
                createPaneSection(pane, index);
            });
        }));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Arguments, this.addConditionalFormattingOptions.bind(this)));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.SeriesDimension, this.addConditionalFormattingOptions.bind(this)));
    }
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    getPropertiesComposer() {
        return new _chart_item_properties_composer_1.ChartItemPropertiesComposer(this._dashboardItemCustomization, this.editCFRuleRuleHandler.bind(this), this.createCFRuleDelegate);
    }
}
exports.ChartItemSurface = ChartItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('Chart', ChartItemSurface);


/***/ }),

/***/ 34238:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChoroplethMapItemSurface = void 0;
const ko = __webpack_require__(71032);
const _data_field_1 = __webpack_require__(68951);
const chorolpeth_map_item_1 = __webpack_require__(61249);
const _collection_editor_viewmodel_1 = __webpack_require__(66072);
const _choropleth_map_element_properties_composer_1 = __webpack_require__(90592);
const _choropleth_map_item_properties_composer_1 = __webpack_require__(35434);
const _data_item_collection_surface_1 = __webpack_require__(52172);
const _data_item_container_collection_surface_1 = __webpack_require__(53379);
const _single_data_item_surface_1 = __webpack_require__(95236);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
const _delta_numeric_format_surface_1 = __webpack_require__(85915);
class ChoroplethMapItemSurface extends _base_item_surface_1.DataDashboardItemSurface {
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    fillSections() {
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.AttributeDimension,
            fieldConstraint: (field) => _data_field_1.DataField.isNumeric(field) || field.fieldType() === 'Bool' || field.fieldType() === 'Text',
            warning: ko.computed(() => !this.dashboardItem.attributeDimension() && !!(this.dashboardItem.maps().length || this.dashboardItem.tooltipMeasures().length))
        }));
        var sectionInfo = {
            title: 'DashboardWebStringId.Binding.Maps',
            bindingProperty: {
                propertyName: 'maps',
                emptyPlaceholder: 'DashboardWebStringId.Binding.AddMap',
                selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureMap',
                creator: (itemType = 'ValueMap') => {
                    return this.dashboardItem._createMap({ '@ItemType': itemType });
                },
                containersMap: chorolpeth_map_item_1.ChoroplethMapItem.choroplethMapTypesMap,
                dataItemType: 'Measure'
            },
            detailsPropertiesComposer: new _choropleth_map_element_properties_composer_1.ChoroplethMapElementPropertiesComposer(this._dataItemContainerCustomization, (model) => {
                var surface = new _delta_numeric_format_surface_1.DeltaNumericFormatSurface(model, this.propertiesController);
                surface.startEditing(new _collection_editor_viewmodel_1.CollectionEditorEditItemArguments());
            })
        };
        this.dataSections.push(new _data_item_container_collection_surface_1.DataItemContainerCollectionSurface(this, this.dashboardItem, sectionInfo, ko.computed(() => !this.dashboardItem.maps().length && !!(this.dashboardItem.attributeDimension() || this.dashboardItem.tooltipMeasures().length))));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.TooltipMeasures));
    }
    getPropertiesComposer() {
        return new _choropleth_map_item_properties_composer_1.ChoroplethMapItemPropertiesComposer(this._dashboardItemCustomization);
    }
}
exports.ChoroplethMapItemSurface = ChoroplethMapItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('ChoroplethMap', ChoroplethMapItemSurface);


/***/ }),

/***/ 98820:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomItemPropertiesComposerHelper = void 0;
const analytics_widgets_1 = __webpack_require__(30010);
const analytics_widgets_internal_1 = __webpack_require__(86092);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _custom_item_metadata_1 = __webpack_require__(26011);
const _form_adapter_editors_1 = __webpack_require__(69949);
const imageEditor = () => {
    return {
        template: (args) => {
            var div = document.createElement('div');
            new analytics_widgets_internal_1.dxFileImagePicker(div, {
                placeholderId: 'Image',
                accept: 'image/*',
                type: 'img',
                value: _form_adapter_editors_1.getFieldValue(args),
                onValueChanged: (e) => {
                    args.component.updateData(args.dataField, e.value);
                }
            });
            return div;
        }
    };
};
const radioGroupEditor = (values) => ({
    editorType: 'dxRadioGroup',
    editorOptions: {
        dataSource: values,
        valueExpr: 'value',
        displayExpr: 'displayValueId',
    }
});
class CustomItemPropertiesComposerHelper {
    static _getEditorValues(serializableInfo) {
        if (serializableInfo.values) {
            let values = ko.unwrap(serializableInfo.values);
            return Object.keys(values).map(k => ({ value: k, displayValueId: values[k] }));
        }
        else if (serializableInfo.valuesArray)
            return serializableInfo.valuesArray.map((val) => ({ value: val.value, displayValueId: val.displayValue }));
        return undefined;
    }
    static _mapEditor(serializableInfo) {
        if (!serializableInfo.editor) {
            return null;
        }
        switch (serializableInfo.editor) {
            case _custom_item_metadata_1.editorTemplates.date:
                return _form_adapter_editors_1.dateBoxEditor();
            case _custom_item_metadata_1.editorTemplates.numeric:
                return _form_adapter_editors_1.numberBoxEditor();
            case _custom_item_metadata_1.editorTemplates.checkBox:
                return _form_adapter_editors_1.checkBoxEditor({ text: _default_1.getLocalizationById(serializableInfo.displayName) });
            case _custom_item_metadata_1.editorTemplates.text:
                return _form_adapter_editors_1.textBoxEditor();
            case _custom_item_metadata_1.editorTemplates.combobox:
                return _form_adapter_editors_1.selectBoxEditor(CustomItemPropertiesComposerHelper._getEditorValues(serializableInfo));
            case _custom_item_metadata_1.editorTemplates.bool:
                return _form_adapter_editors_1.buttonGroupEditor([{ value: true, displayValueId: 'DashboardWebStringId.ButtonOn' }, { value: false, displayValueId: 'DashboardWebStringId.ButtonOff' }]);
            case _custom_item_metadata_1.editorTemplates.boolYesNo:
                return _form_adapter_editors_1.buttonGroupEditor([{ value: true, displayValueId: 'DashboardWebStringId.ButtonYes' }, { value: false, displayValueId: 'DashboardWebStringId.ButtonNo' }]);
            case _custom_item_metadata_1.editorTemplates.buttonGroup:
                return _form_adapter_editors_1.buttonGroupEditor(CustomItemPropertiesComposerHelper._getEditorValues(serializableInfo));
            case _custom_item_metadata_1.editorTemplates.boolVisibleHidden:
                return _form_adapter_editors_1.buttonGroupEditor([{ value: true, displayValueId: 'DashboardWebStringId.ButtonVisible' }, { value: false, displayValueId: 'DashboardWebStringId.ButtonHidden' }]);
            case _custom_item_metadata_1.editorTemplates.list:
                return _form_adapter_editors_1.listEditor(CustomItemPropertiesComposerHelper._getEditorValues(serializableInfo));
            case _custom_item_metadata_1.editorTemplates.radioGroup:
                return radioGroupEditor(CustomItemPropertiesComposerHelper._getEditorValues(serializableInfo));
            case _custom_item_metadata_1.editorTemplates.image:
                return imageEditor();
            default:
                let template = serializableInfo.editor.header || serializableInfo.editor.custom;
                return (context) => ({
                    customEditorType: template,
                    template: (args, itemElement) => {
                        let element = itemElement;
                        let info = serializableInfo;
                        var editor = new analytics_widgets_1.Editor(info, 0);
                        editor._model(args.component.option('formData'));
                        ko.applyBindingsToNode(element, { template: { name: template, data: editor } }, context.bindingContext);
                    }
                });
        }
    }
    static convertToDashboardSerializationInfo(property) {
        return {
            propertyName: property.propertyName,
            formAdapterItem: Object.assign(Object.assign({}, CustomItemPropertiesComposerHelper._mapEditor(property)), { label: {
                    text: _default_1.getLocalizationById(property.displayName),
                    visible: !!property.displayName,
                }, validationRules: property.validationRules || [] }),
            editorOptions: property.editorOptions,
        };
    }
}
exports.CustomItemPropertiesComposerHelper = CustomItemPropertiesComposerHelper;


/***/ }),

/***/ 15583:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomItemSurface = exports.CustomItemPropertiesComposer = void 0;
const string_1 = __webpack_require__(36306);
const _default_1 = __webpack_require__(65855);
const custom_item_1 = __webpack_require__(91587);
const accordion_tab_options_1 = __webpack_require__(1628);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _accordion_tab_1 = __webpack_require__(74885);
const _base_properties_composer_1 = __webpack_require__(20942);
const _shared_composers_1 = __webpack_require__(44726);
const _data_item_collection_surface_1 = __webpack_require__(52172);
const _single_data_item_surface_1 = __webpack_require__(95236);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
const _custom_item_properties_composer_helper_1 = __webpack_require__(98820);
class CustomItemPropertiesComposer extends _base_properties_composer_1.DashboardItemPropertiesComposer {
    constructor(customizeHandler) {
        super(customizeHandler);
    }
    _mapLegacyPropertiesToTabs(model) {
        const propertiesByTabs = model.legacyCustomProperties && model.legacyCustomProperties.reduce((acc, property) => {
            const tabName = property.sectionName || _accordion_tab_1.KnownTabs.Common;
            acc[tabName] = acc[tabName] || [];
            acc[tabName].push(_custom_item_properties_composer_helper_1.CustomItemPropertiesComposerHelper.convertToDashboardSerializationInfo(property));
            return acc;
        }, {});
        const specificProperties = propertiesByTabs[_accordion_tab_1.KnownTabs.Common] ? [
            {
                container: { propertyName: 'customProperties' },
                properties: propertiesByTabs[_accordion_tab_1.KnownTabs.Common] || []
            }
        ] : [];
        return [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model, specificProperties)),
            ...Object.keys(propertiesByTabs)
                .filter(tabName => tabName !== _accordion_tab_1.KnownTabs.Common)
                .map(tabName => new _accordion_tab_1.AccordionTab(tabName, tabName, new _object_properties_wrapper_1.ObjectPropertiesWrapper({
                model: model.customProperties,
                properties: propertiesByTabs[tabName]
            })))
        ];
    }
    _composeTabsCore(model) {
        if (model._optionsPanelSections) {
            return [
                new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model)),
                ...model._optionsPanelSections.reduce((tabs, section) => {
                    accordion_tab_options_1._customizeTabs(tabs, section, model);
                    return tabs;
                }, [])
            ];
        }
        else {
            return this._mapLegacyPropertiesToTabs(model);
        }
    }
}
exports.CustomItemPropertiesComposer = CustomItemPropertiesComposer;
class CustomItemSurface extends _base_item_surface_1.DataDashboardItemSurface {
    get showDefaultSections() {
        return this.dashboardItem.customBindings.length > 0;
    }
    fillSections() {
        var format = (localizationId, arg1) => string_1.format(_default_1.getLocalizationById(localizationId), _default_1.getLocalizationById(arg1));
        this.dashboardItem.customBindings.forEach(binding => {
            var sectionInfo = {
                title: binding.displayName,
                bindingProperty: {
                    propertyName: custom_item_1.CustomItem._getBindingLinkName(binding.propertyName),
                    dataItemType: binding.dataItemType,
                    emptyPlaceholder: binding.emptyPlaceholder || format('DashboardWebStringId.Binding.DefaultEmptyPlaceholder', binding.displayName),
                    selectedPlaceholder: binding.selectedPlaceholder || format('DashboardWebStringId.Binding.DefaultSelectedPlaceholder', binding.displayName)
                }
            };
            if (binding.array) {
                this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, sectionInfo));
            }
            else {
                this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
                    itemSurface: this,
                    sectionInfo: sectionInfo,
                    fieldConstraint: (dataField) => {
                        return !binding.constraints || !binding.constraints.allowedTypes || binding.constraints.allowedTypes.indexOf(dataField.fieldType()) >= 0;
                    }
                }));
            }
        });
    }
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    getPropertiesComposer() {
        return new CustomItemPropertiesComposer(this._dashboardItemCustomization);
    }
}
exports.CustomItemSurface = CustomItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('CustomItem', CustomItemSurface);


/***/ }),

/***/ 93254:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DateFilterItemSurface = void 0;
const ko = __webpack_require__(71032);
const _data_field_1 = __webpack_require__(68951);
const _date_filter_item_1 = __webpack_require__(82133);
const _custom_range_properties_composer_1 = __webpack_require__(78295);
const _date_filter_item_properties_composer_1 = __webpack_require__(96431);
const _single_data_item_surface_1 = __webpack_require__(95236);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
class DateFilterItemSurface extends _base_item_surface_1.DataDashboardItemSurface {
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    fillSections() {
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: {
                title: 'DashboardStringId.DescriptionItemDimension',
                bindingProperty: {
                    propertyName: _date_filter_item_1.dateFilterDimension.propertyName,
                    dataItemType: 'Dimension',
                    emptyPlaceholder: 'DashboardStringId.DescriptionItemDimension',
                    selectedPlaceholder: 'DashboardStringId.DescriptionItemDimension'
                }
            },
            fieldConstraint: (dataField) => _data_field_1.DataField.isDateTime(dataField)
        }));
    }
    getPropertiesComposer() {
        return new _date_filter_item_properties_composer_1.DateFilterItemPropertiesComposer(this._dashboardItemCustomization, (model) => {
            var composer = new _custom_range_properties_composer_1.CustomRangePropertiesComposer();
            var tabs = composer.composeTabs(model, {
                argument: this.dashboardItem.dimension(),
                rangeFilterItem: this.dashboardItem
            });
            this.propertiesController.secondaryModel({
                displayText: model.name,
                data: {
                    model: model,
                    propertiesTabs: ko.observableArray(tabs)
                },
                containingCollection: this.dashboardItem.dateTimePeriods
            });
        });
    }
}
exports.DateFilterItemSurface = DateFilterItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('DateFilter', DateFilterItemSurface);


/***/ }),

/***/ 85915:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeltaNumericFormatSurface = void 0;
const ko = __webpack_require__(71032);
const _accordion_tab_1 = __webpack_require__(74885);
const _shared_composers_1 = __webpack_require__(44726);
class DeltaNumericFormatSurface {
    constructor(model, propertiesController) {
        this.model = model;
        this.propertiesController = propertiesController;
        this._disposables = [];
        this.propertiesTabs = ko.observableArray([]);
    }
    updatePropertiesTabs() {
        this.propertiesTabs([new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.NumericFormat, this.model.title, _shared_composers_1.SharedComposers.getNumericFormatWrapper(this.model.numericFormat))
        ]);
        this.propertiesController.secondaryModel({
            displayText: this.model.title,
            data: this
        });
    }
    startEditing(args) {
        args.createImmediately = false;
        this.updatePropertiesTabs();
    }
    dispose() {
        this._disposables.forEach((d) => {
            d.dispose();
        });
    }
}
exports.DeltaNumericFormatSurface = DeltaNumericFormatSurface;


/***/ }),

/***/ 2029:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditCardTemplateSurface = void 0;
const ko = __webpack_require__(71032);
const _card_layout_template_properties_composer_1 = __webpack_require__(4677);
class EditCardTemplateSurface {
    constructor(model, propertiesController, dimensionNames, applyTemplateToAllCards = (template) => { }) {
        this.model = model;
        this.propertiesController = propertiesController;
        this.dimensionNames = dimensionNames;
        this.applyTemplateToAllCards = applyTemplateToAllCards;
        this._disposables = [];
        this.propertiesTabs = ko.observableArray([]);
    }
    updatePropertiesTabs() {
        var composer = new _card_layout_template_properties_composer_1.CardTemplatePropertiesComposer();
        var tabs = composer.composeTabs(this.model, {
            dimensionNames: this.dimensionNames,
            applyTemplateToAllCards: this.applyTemplateToAllCards
        });
        this.propertiesTabs(tabs);
        this.propertiesController.secondaryModel({
            displayText: this.model.title,
            data: this
        });
    }
    startEditing(args) {
        args.createImmediately = false;
        this.updatePropertiesTabs();
    }
    dispose() {
        this._disposables.forEach((d) => {
            d.dispose();
        });
    }
}
exports.EditCardTemplateSurface = EditCardTemplateSurface;


/***/ }),

/***/ 71816:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FilterItemSurface = void 0;
const _filter_item_properties_composer_1 = __webpack_require__(74906);
const _data_item_collection_surface_1 = __webpack_require__(52172);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
class FilterItemSurface extends _base_item_surface_1.DataDashboardItemSurface {
    fillSections() {
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.FilterDimensions));
    }
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    getPropertiesComposer() {
        return new _filter_item_properties_composer_1.FilterItemPropertiesComposer(this._dashboardItemCustomization);
    }
}
exports.FilterItemSurface = FilterItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('ComboBox', FilterItemSurface);
_section_descriptors_1.surfaceItemsFactory.register('ListBox', FilterItemSurface);
_section_descriptors_1.surfaceItemsFactory.register('TreeView', FilterItemSurface);


/***/ }),

/***/ 12465:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GaugeItemSurface = void 0;
const ko = __webpack_require__(71032);
const gauge_1 = __webpack_require__(29847);
const _collection_editor_viewmodel_1 = __webpack_require__(66072);
const _gauge_element_properties_composer_1 = __webpack_require__(56549);
const _gauge_item_properties_composer_1 = __webpack_require__(74664);
const _data_item_collection_surface_1 = __webpack_require__(52172);
const _data_item_container_collection_surface_1 = __webpack_require__(53379);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
const _delta_numeric_format_surface_1 = __webpack_require__(85915);
class GaugeItemSurface extends _base_item_surface_1.DataDashboardItemSurface {
    fillSections() {
        var sectionInfo = {
            title: 'DashboardWebStringId.Binding.Gauges',
            bindingProperty: {
                propertyName: 'gauges',
                emptyPlaceholder: 'DashboardWebStringId.Binding.AddGauge',
                selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureGauge',
                creator: (itemType = 'GaugeElement') => {
                    return new gauge_1.Gauge(this.dashboardItem, { '@ItemType': itemType });
                },
                dataItemType: 'Measure'
            },
            detailsPropertiesComposer: new _gauge_element_properties_composer_1.GaugeElementPropertiesComposer(this._dataItemContainerCustomization, (model) => {
                var surface = new _delta_numeric_format_surface_1.DeltaNumericFormatSurface(model, this.propertiesController);
                surface.startEditing(new _collection_editor_viewmodel_1.CollectionEditorEditItemArguments());
            })
        };
        this.dataSections.push(new _data_item_container_collection_surface_1.DataItemContainerCollectionSurface(this, this.dashboardItem, sectionInfo, ko.computed(() => !this.dashboardItem.gauges().length && !!this.dashboardItem.seriesDimensions().length)));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.SeriesDimension));
    }
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    getPropertiesComposer() {
        return new _gauge_item_properties_composer_1.GaugeItemPropertiesComposer(this._dashboardItemCustomization);
    }
}
exports.GaugeItemSurface = GaugeItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('Gauge', GaugeItemSurface);


/***/ }),

/***/ 74890:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GeoPointItemSurface = void 0;
const ko = __webpack_require__(71032);
const _data_field_1 = __webpack_require__(68951);
const _geopoint_map_item_properties_composer_1 = __webpack_require__(76671);
const _data_item_collection_surface_1 = __webpack_require__(52172);
const _single_data_item_surface_1 = __webpack_require__(95236);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
class GeoPointItemSurface extends _base_item_surface_1.DataDashboardItemSurface {
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    fillSections() {
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Latitude,
            fieldConstraint: field => _data_field_1.DataField.isNumeric(field),
            warning: ko.computed(() => !this.dashboardItem.latitude() && !!(this.dashboardItem.longitude() || this.dashboardItem.value() || this.dashboardItem.tooltipDimensions().length || this.dashboardItem.tooltipMeasures().length))
        }));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Longitude,
            fieldConstraint: field => _data_field_1.DataField.isNumeric(field),
            warning: ko.computed(() => !this.dashboardItem.longitude() && !!(this.dashboardItem.latitude() || this.dashboardItem.value() || this.dashboardItem.tooltipDimensions().length || this.dashboardItem.tooltipMeasures().length))
        }));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Value,
            warning: ko.computed(() => !this.dashboardItem.value() && !!(this.dashboardItem.latitude() || this.dashboardItem.longitude() || this.dashboardItem.tooltipDimensions().length || this.dashboardItem.tooltipMeasures().length))
        }));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.TooltipDimensions));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.TooltipMeasures));
    }
    getPropertiesComposer() {
        return new _geopoint_map_item_properties_composer_1.GeoPointMapItemPropertiesComposer(this._dashboardItemCustomization);
    }
}
exports.GeoPointItemSurface = GeoPointItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('GeoPointMap', GeoPointItemSurface);


/***/ }),

/***/ 68378:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GridItemSurface = void 0;
const ko = __webpack_require__(71032);
const dimension_1 = __webpack_require__(48336);
const measure_1 = __webpack_require__(17012);
const _data_field_1 = __webpack_require__(68951);
const grid_columns_1 = __webpack_require__(27233);
const grid_item_1 = __webpack_require__(74873);
const _grid_item_1 = __webpack_require__(33801);
const _format_rule_surface_1 = __webpack_require__(25059);
const _accordion_tab_1 = __webpack_require__(74885);
const _collection_editor_viewmodel_1 = __webpack_require__(66072);
const _data_item_properties_composer_1 = __webpack_require__(16821);
const _grid_column_properties_composer_1 = __webpack_require__(827);
const _grid_item_properties_composer_1 = __webpack_require__(11347);
const _data_item_container_collection_surface_1 = __webpack_require__(53379);
const _single_data_item_surface_1 = __webpack_require__(95236);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
const _delta_numeric_format_surface_1 = __webpack_require__(85915);
class GridItemSurface extends _base_item_surface_1.DataDashboardItemSurface {
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    addConditionalFormattingOptions(tabs, dataItem) {
        if (dataItem && dataItem.uniqueName()) {
            var editRuleHandler = (selection, args, container) => {
                var surface = new _format_rule_surface_1.FormatRuleSurface(container, this.dashboardItem, this._dataSourceBrowser, this.propertiesController);
                surface.startEditing(args);
            };
            var dataItemApplyTo = dataItem;
            if (dataItemApplyTo instanceof measure_1.Measure && this.dashboardItem.hiddenMeasures().indexOf(dataItemApplyTo) !== -1) {
                var valueApplyTo = this.dashboardItem.columns().filter(column => !(column instanceof grid_columns_1.GridDeltaColumn))[0];
                dataItemApplyTo = valueApplyTo && valueApplyTo.actualDataItem;
            }
            tabs.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', _data_item_properties_composer_1.DataItemsPropertiesComposer.getFormatRulesWrapper(this.dashboardItem, _data_item_properties_composer_1.DataItemsPropertiesComposer.getCellFormatRuleCreator(dataItem, dataItemApplyTo, 'GridItemFormatRule'), _data_item_properties_composer_1.DataItemsPropertiesComposer.getCellFormatRuleFilter(dataItem), editRuleHandler)));
        }
    }
    extendHiddenMeasuresTabs(tabs, model) {
        this.addConditionalFormattingOptions(tabs, model);
    }
    fillSections() {
        var editRuleHandler = (selection, args, container) => {
            var surface = new _format_rule_surface_1.FormatRuleSurface(container, this.dashboardItem, this._dataSourceBrowser, this.propertiesController);
            surface.startEditing(args);
        };
        this.editRuleHandler = editRuleHandler;
        var editDeltaFormatHandler = (model) => {
            var surface = new _delta_numeric_format_surface_1.DeltaNumericFormatSurface(model, this.propertiesController);
            surface.startEditing(new _collection_editor_viewmodel_1.CollectionEditorEditItemArguments());
        };
        var sectionInfo = {
            title: 'DashboardWebStringId.Binding.Columns',
            bindingProperty: {
                propertyName: _grid_item_1.gridColumns.propertyName,
                emptyPlaceholder: 'DashboardWebStringId.Binding.AddColumn',
                selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureColumn',
                groupName: 'Column',
                creator: (itemType, dataField, existingDataItem) => {
                    if (!itemType) {
                        var dimensionDisplayMode = null;
                        if (existingDataItem) {
                            if (existingDataItem instanceof dimension_1.Dimension) {
                                itemType = 'GridDimensionColumn';
                            }
                            else if (existingDataItem instanceof measure_1.Measure) {
                                itemType = 'GridMeasureColumn';
                            }
                        }
                        else if (_data_field_1.DataField.isMeasure(dataField)) {
                            itemType = 'GridMeasureColumn';
                        }
                        else {
                            itemType = 'GridDimensionColumn';
                            if (dataField.fieldType() === 'Custom') {
                                dimensionDisplayMode = 'Image';
                            }
                        }
                    }
                    var columnJson = { '@ItemType': itemType };
                    if (dimensionDisplayMode) {
                        columnJson['@DisplayMode'] = dimensionDisplayMode;
                    }
                    return this.dashboardItem._createGridColumn(columnJson);
                },
                containersMap: grid_item_1.GridItem._gridColumnTypesMap,
                dataItemType: undefined
            },
            detailsPropertiesComposer: new _grid_column_properties_composer_1.GridColumnPropertiesComposer(this._dataItemContainerCustomization, editRuleHandler, editDeltaFormatHandler)
        };
        this.dataSections.push(new _data_item_container_collection_surface_1.DataItemContainerCollectionSurface(this, this.dashboardItem, sectionInfo, ko.computed(() => this.dashboardItem.columns().length === 0 && !!this.dashboardItem.sparklineArgument() && !!this.dashboardItem.sparklineArgument().uniqueName())));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.SparklineArgument,
            warning: ko.computed(() => {
                return !(this.dashboardItem.sparklineArgument() && this.dashboardItem.sparklineArgument().uniqueName())
                    && this.dashboardItem.columns().some((column) => column.itemType() === 'GridSparklineColumn');
            }),
            fieldConstraint: (dataField) => {
                return _data_field_1.DataField.isContinous(dataField);
            }
        }));
    }
    getPropertiesComposer() {
        return new _grid_item_properties_composer_1.GridItemPropertiesComposer(this._dashboardItemCustomization, this.editRuleHandler, this.dataSourceBrowser);
    }
}
exports.GridItemSurface = GridItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('Grid', GridItemSurface);


/***/ }),

/***/ 2596:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GroupItemSurface = void 0;
const _shared_properties_composer_1 = __webpack_require__(65862);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
class GroupItemSurface extends _base_item_surface_1.BaseItemSurface {
    constructor(dashboardItem, dashboardModel, dataSourceBrowser) {
        super();
    }
    getPropertiesComposer() {
        return new _shared_properties_composer_1.SharedPropertiesComposer(this._dashboardItemCustomization);
    }
}
exports.GroupItemSurface = GroupItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('Group', GroupItemSurface);


/***/ }),

/***/ 92111:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImageItemSurface = void 0;
const _image_item_properties_composer_1 = __webpack_require__(33271);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
class ImageItemSurface extends _base_item_surface_1.BaseItemSurface {
    constructor(dashboardItem, dashboardModel, dataSourceBrowser) {
        super();
    }
    getPropertiesComposer() {
        return new _image_item_properties_composer_1.ImageItemPropertiesComposer(this._dashboardItemCustomization);
    }
}
exports.ImageItemSurface = ImageItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('Image', ImageItemSurface);


/***/ }),

/***/ 77038:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MapCustomShapeFileSurface = void 0;
const ko = __webpack_require__(71032);
const _map_custom_shapefile_properties_composer_1 = __webpack_require__(21624);
class MapCustomShapeFileSurface {
    constructor(model, propertiesController) {
        this.model = model;
        this.propertiesController = propertiesController;
        this._disposables = [];
        this.propertiesTabs = ko.observableArray([]);
    }
    startEditing(args) {
        args.createImmediately = false;
        var composer = new _map_custom_shapefile_properties_composer_1.MapCustomShapefilePropertiesComposer();
        var tabs = composer.composeTabs(this.model);
        this.propertiesTabs(tabs);
        this.propertiesController.secondaryModel({
            displayText: 'DashboardWebStringId.Map.Area.Custom',
            data: this
        });
    }
    dispose() {
        this._disposables.forEach((d) => {
            d.dispose();
        });
    }
}
exports.MapCustomShapeFileSurface = MapCustomShapeFileSurface;


/***/ }),

/***/ 21054:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PieItemSurface = void 0;
const ko = __webpack_require__(71032);
const _pie_item_properties_composer_1 = __webpack_require__(88653);
const _data_item_collection_surface_1 = __webpack_require__(52172);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
class PieItemSurface extends _base_item_surface_1.DataDashboardItemSurface {
    fillSections() {
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Values, undefined, ko.computed(() => (this.dashboardItem.arguments().length > 0 || this.dashboardItem.seriesDimensions().length > 0) && this.dashboardItem.values().length === 0)));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Arguments));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.SeriesDimension));
    }
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    getPropertiesComposer() {
        return new _pie_item_properties_composer_1.PieItemPropertiesComposer(this._dashboardItemCustomization);
    }
}
exports.PieItemSurface = PieItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('Pie', PieItemSurface);


/***/ }),

/***/ 10297:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PieMapItemSurface = void 0;
const ko = __webpack_require__(71032);
const _data_field_1 = __webpack_require__(68951);
const _pie_map_item_properties_composer_1 = __webpack_require__(41642);
const _data_item_collection_surface_1 = __webpack_require__(52172);
const _single_data_item_surface_1 = __webpack_require__(95236);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
class PieMapItemSurface extends _base_item_surface_1.DataDashboardItemSurface {
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    fillSections() {
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Latitude,
            fieldConstraint: field => _data_field_1.DataField.isNumeric(field),
            warning: ko.computed(() => !this.dashboardItem.latitude() && !!(this.dashboardItem.longitude() || this.dashboardItem.values().length || this.dashboardItem.argument() || this.dashboardItem.tooltipDimensions().length || this.dashboardItem.tooltipMeasures().length))
        }));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Longitude,
            fieldConstraint: field => _data_field_1.DataField.isNumeric(field),
            warning: ko.computed(() => !this.dashboardItem.longitude() && !!(this.dashboardItem.latitude() || this.dashboardItem.values().length || this.dashboardItem.argument() || this.dashboardItem.tooltipDimensions().length || this.dashboardItem.tooltipMeasures().length))
        }));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Values));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Argument,
            warning: ko.computed(() => !this.dashboardItem.argument() && !!(this.dashboardItem.latitude() || this.dashboardItem.longitude() || this.dashboardItem.values().length || this.dashboardItem.tooltipDimensions().length || this.dashboardItem.tooltipMeasures().length))
        }));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.TooltipDimensions));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.TooltipMeasures));
    }
    getPropertiesComposer() {
        return new _pie_map_item_properties_composer_1.PieMapItemPropertiesComposer(this._dashboardItemCustomization);
    }
}
exports.PieMapItemSurface = PieMapItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('PieMap', PieMapItemSurface);


/***/ }),

/***/ 72657:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PivotItemSurface = void 0;
const measure_1 = __webpack_require__(17012);
const _format_rule_surface_1 = __webpack_require__(25059);
const _accordion_tab_1 = __webpack_require__(74885);
const _data_item_properties_composer_1 = __webpack_require__(16821);
const _pivot_item_properties_composer_1 = __webpack_require__(29423);
const _data_item_collection_surface_1 = __webpack_require__(52172);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
class PivotItemSurface extends _base_item_surface_1.DataDashboardItemSurface {
    addConditionalFormattingOptions(tabs, dataItem) {
        if (dataItem && dataItem.uniqueName()) {
            var editRuleHandler = (selection, args, container) => {
                var surface = new _format_rule_surface_1.FormatRuleSurface(container, this.dashboardItem, this._dataSourceBrowser, this.propertiesController);
                surface.startEditing(args);
            };
            var dataItemApplyTo = dataItem;
            if (dataItemApplyTo instanceof measure_1.Measure && this.dashboardItem.hiddenMeasures().indexOf(dataItemApplyTo) !== -1) {
                dataItemApplyTo = this.dashboardItem.values()[0];
            }
            tabs.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', _data_item_properties_composer_1.DataItemsPropertiesComposer.getFormatRulesWrapper(this.dashboardItem, _data_item_properties_composer_1.DataItemsPropertiesComposer.getCellFormatRuleCreator(dataItem, dataItemApplyTo, 'PivotItemFormatRule'), _data_item_properties_composer_1.DataItemsPropertiesComposer.getCellFormatRuleFilter(dataItem), editRuleHandler)));
        }
    }
    extendHiddenMeasuresTabs(tabs, model) {
        this.addConditionalFormattingOptions(tabs, model);
    }
    fillSections() {
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Values, this.addConditionalFormattingOptions.bind(this)));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Columns, this.addConditionalFormattingOptions.bind(this)));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Rows, this.addConditionalFormattingOptions.bind(this)));
    }
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    getPropertiesComposer() {
        var editRuleHandler = (selection, args, container) => {
            var surface = new _format_rule_surface_1.FormatRuleSurface(container, this.dashboardItem, this._dataSourceBrowser, this.propertiesController);
            surface.startEditing(args);
        };
        return new _pivot_item_properties_composer_1.PivotItemPropertiesComposer(this._dashboardItemCustomization, editRuleHandler);
    }
}
exports.PivotItemSurface = PivotItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('Pivot', PivotItemSurface);


/***/ }),

/***/ 51871:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RangeFilterItemSurface = void 0;
const ko = __webpack_require__(71032);
const _data_field_1 = __webpack_require__(68951);
const chart_series_creator_1 = __webpack_require__(52469);
const range_filter_item_1 = __webpack_require__(63716);
const _custom_range_properties_composer_1 = __webpack_require__(78295);
const _range_filter_item_properties_composer_1 = __webpack_require__(25404);
const _range_series_properties_composer_1 = __webpack_require__(27089);
const _data_item_collection_surface_1 = __webpack_require__(52172);
const _data_item_container_collection_surface_1 = __webpack_require__(53379);
const _single_data_item_surface_1 = __webpack_require__(95236);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
class RangeFilterItemSurface extends _base_item_surface_1.DataDashboardItemSurface {
    fillSections() {
        var creator = chart_series_creator_1.ChartSeriesCreator.getSeriesCreator(this.dashboardItem);
        var sectionInfo = {
            title: 'DashboardWebStringId.Binding.Values',
            bindingProperty: {
                propertyName: 'series',
                emptyPlaceholder: 'DashboardWebStringId.Binding.AddValue',
                selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureValue',
                creator: (itemType = 'Line') => {
                    return creator(itemType);
                },
                containersMap: range_filter_item_1.RangeFilterItem.rangeSeriesViewTypesMap,
                dataItemType: 'Measure'
            },
            detailsPropertiesComposer: new _range_series_properties_composer_1.RangeSeriesPropertiesComposer(this._dataItemContainerCustomization)
        };
        this.dataSections.push(new _data_item_container_collection_surface_1.DataItemContainerCollectionSurface(this, this.dashboardItem, sectionInfo, ko.computed(() => !this.dashboardItem.series().length && (!!this.dashboardItem.argument() || !!this.dashboardItem.seriesDimensions().length))));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.SingleArgument,
            fieldConstraint: (dataField) => _data_field_1.DataField.isContinous(dataField) && !_data_field_1.DataField.isOlapHierarchy(dataField),
            warning: ko.computed(() => (!!this.dashboardItem.series().length || !!this.dashboardItem.seriesDimensions().length) && !this.dashboardItem.argument())
        }));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.SeriesDimension));
    }
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    getPropertiesComposer() {
        return new _range_filter_item_properties_composer_1.RangeFilterItemPropertiesComposer(this._dashboardItemCustomization, (model) => {
            var composer = new _custom_range_properties_composer_1.CustomRangePropertiesComposer();
            var tabs = composer.composeTabs(model, {
                argument: this.dashboardItem.argument(),
                rangeFilterItem: this.dashboardItem
            });
            this.propertiesController.secondaryModel({
                displayText: model.name,
                data: {
                    model: model,
                    propertiesTabs: ko.observableArray(tabs)
                },
                containingCollection: this.dashboardItem.dateTimePeriods
            });
        });
    }
}
exports.RangeFilterItemSurface = RangeFilterItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('RangeFilter', RangeFilterItemSurface);


/***/ }),

/***/ 20662:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ScatterChartItemSurface = void 0;
const ko = __webpack_require__(71032);
const scatter_chart_item_format_rule_1 = __webpack_require__(22149);
const _format_rule_surface_1 = __webpack_require__(25059);
const _accordion_tab_1 = __webpack_require__(74885);
const _data_item_properties_composer_1 = __webpack_require__(16821);
const _scatter_chart_item_properties_composer_1 = __webpack_require__(59022);
const _data_item_collection_surface_1 = __webpack_require__(52172);
const _single_data_item_surface_1 = __webpack_require__(95236);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
class ScatterChartItemSurface extends _base_item_surface_1.DataDashboardItemSurface {
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    fillSections() {
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.AxisXMeasure,
            warning: ko.computed(() => !this.dashboardItem.axisXMeasure() && (!!this.dashboardItem.arguments().length || !!this.dashboardItem.weight() || !!this.dashboardItem.axisYMeasure())),
            extendTabsHandler: this.addConditionalFormattingOptions.bind(this),
        }));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.AxisYMeasure,
            warning: ko.computed(() => !this.dashboardItem.axisYMeasure() && (!!this.dashboardItem.arguments().length || !!this.dashboardItem.weight() || !!this.dashboardItem.axisXMeasure())),
            extendTabsHandler: this.addConditionalFormattingOptions.bind(this),
        }));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Weight,
            extendTabsHandler: this.addConditionalFormattingOptions.bind(this),
        }));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Arguments, this.addConditionalFormattingOptions.bind(this), ko.computed(() => !!this.dashboardItem.weight() && !this.dashboardItem.arguments().length)));
    }
    getPropertiesComposer() {
        return new _scatter_chart_item_properties_composer_1.ScatterChartItemPropertiesComposer(this._dashboardItemCustomization, this.editCFRuleRuleHandler.bind(this), this.createCFRuleDelegate.bind(this));
    }
    editCFRuleRuleHandler(item, args, container) {
        var surface = new _format_rule_surface_1.FormatRuleSurface(container, this.dashboardItem, this._dataSourceBrowser, this.propertiesController);
        surface.startEditing(args);
    }
    createCFRuleDelegate() {
        return new scatter_chart_item_format_rule_1.ScatterChartItemFormatRule();
    }
    addConditionalFormattingOptions(tabs, dataItem) {
        const dataItemName = dataItem && dataItem.uniqueName();
        if (!dataItemName)
            return;
        const createRule = () => {
            const cfRule = this.createCFRuleDelegate();
            cfRule.dataItemName(dataItemName);
            return cfRule;
        };
        tabs.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', _data_item_properties_composer_1.DataItemsPropertiesComposer.getFormatRulesWrapper(this.dashboardItem, createRule, (cfRule) => cfRule.dataItemName() === dataItemName, this.editCFRuleRuleHandler.bind(this))));
    }
    extendHiddenMeasuresTabs(tabs, model) {
        this.addConditionalFormattingOptions(tabs, model);
    }
}
exports.ScatterChartItemSurface = ScatterChartItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('ScatterChart', ScatterChartItemSurface);


/***/ }),

/***/ 92409:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TabContainerItemSurface = void 0;
const ko = __webpack_require__(71032);
const _tab_container_item_properties_composer_1 = __webpack_require__(3734);
const _tab_page_properties_composer_1 = __webpack_require__(86927);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
class TabContainerItemSurface extends _base_item_surface_1.BaseItemSurface {
    constructor(dashboardItem, _dashboardModel, dataSourceBrowser) {
        super();
        this.dashboardItem = dashboardItem;
        this._dashboardModel = _dashboardModel;
    }
    getPropertiesComposer() {
        const editTabPageHandler = (tabPage, args) => {
            const composer = new _tab_page_properties_composer_1.DashboardTabPagePropertiesComposer(this._dashboardItemCustomization);
            const tabs = composer.composeTabs(tabPage);
            this.propertiesController.secondaryModel({
                displayText: ko.pureComputed(() => this._dashboardModel._getDisplayDashboardItem(tabPage).name()),
                data: {
                    model: tabPage,
                    propertiesTabs: ko.observableArray(tabs)
                },
                containingCollection: this.dashboardItem.tabPages
            });
        };
        return new _tab_container_item_properties_composer_1.TabContainerItemPropertiesComposer(editTabPageHandler);
    }
    dispose() {
    }
}
exports.TabContainerItemSurface = TabContainerItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('TabContainer', TabContainerItemSurface);


/***/ }),

/***/ 65465:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextBoxItemSurface = void 0;
const _textbox_item_properties_composer_1 = __webpack_require__(5191);
const _data_item_collection_surface_1 = __webpack_require__(52172);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
class TextBoxItemSurface extends _base_item_surface_1.DataDashboardItemSurface {
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    fillSections() {
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Values, (tabs, model) => this.extendTabsHandler && this.extendTabsHandler(tabs, model, this.dashboardItem)));
    }
    getPropertiesComposer() {
        return new _textbox_item_properties_composer_1.TextBoxItemPropertiesComposer(this._dashboardItemCustomization);
    }
}
exports.TextBoxItemSurface = TextBoxItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('TextBox', TextBoxItemSurface);


/***/ }),

/***/ 64361:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreemapItemSurface = void 0;
const ko = __webpack_require__(71032);
const _treemap_item_properties_composer_1 = __webpack_require__(51558);
const _data_item_collection_surface_1 = __webpack_require__(52172);
const _section_descriptors_1 = __webpack_require__(70990);
const _base_item_surface_1 = __webpack_require__(32498);
class TreemapItemSurface extends _base_item_surface_1.DataDashboardItemSurface {
    fillSections() {
        var addTileOptions = (tabs, dataItem) => {
            if (dataItem && dataItem.uniqueName()) {
                let argument = this.dashboardItem.arguments().filter(d => d.uniqueName() === dataItem.uniqueName())[0];
                if (this.dashboardItem.arguments().indexOf(argument) !== this.dashboardItem.arguments().length - 1) {
                    tabs.push(_treemap_item_properties_composer_1.TreemapItemPropertiesComposer.getTileOptionsTab(this.dashboardItem, dataItem));
                }
            }
        };
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Values, undefined, ko.computed(() => !this.dashboardItem.values().length && !!this.dashboardItem.arguments().length)));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Arguments, addTileOptions));
    }
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    getPropertiesComposer() {
        return new _treemap_item_properties_composer_1.TreemapItemPropertiesComposer(this._dashboardItemCustomization);
    }
}
exports.TreemapItemSurface = TreemapItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('Treemap', TreemapItemSurface);


/***/ }),

/***/ 91867:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FieldListPicker = void 0;
const analytics_widgets_internal_1 = __webpack_require__(86092);
const ko = __webpack_require__(71032);
const _expression_editor_item_provider_1 = __webpack_require__(14531);
class FieldListPicker {
    constructor(dataSourceBrowser, _value, model, disabled) {
        this.disabled = disabled;
        var self = this;
        this.treeListController = new DashboardTreeListFieldController(_value);
        this.pathToMembers = ko.computed(() => [model.dataSource(), model.dataMember()].filter(item => !!item).join('.'));
        this.pathToMembers.subscribe(() => _value(null));
        this.displayValue = ko.computed(() => {
            return !!_value() ? _value() : '';
        });
        this.value = ko.computed({
            read: () => {
                return _value();
            },
            write: (val) => {
                if (!val) {
                    _value(null);
                }
            }
        });
        this.itemsProvider = new _expression_editor_item_provider_1.ExpressionEditorItemsProvider(dataSourceBrowser, dataSourceBrowser, dataSourceBrowser.parameters && dataSourceBrowser.parameters(), model.dataSource, model.dataMember);
    }
}
exports.FieldListPicker = FieldListPicker;
class DashboardTreeListFieldController extends analytics_widgets_internal_1.TreeListController {
    constructor(_value) {
        super();
        this._value = _value;
    }
    hasItems(item) {
        return item['hasItems'];
    }
    canSelect(value) {
        return !value.hasItems;
    }
    select(value) {
        this._value(value.data['field'].dataMember());
    }
}


/***/ }),

/***/ 31203:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.multipleLookupValueEditor = exports.singleLookupValueEditor = void 0;
const custom_store_1 = __webpack_require__(5773);
const data_source_1 = __webpack_require__(47545);
const tag_box_1 = __webpack_require__(8520);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const look_up_value_1 = __webpack_require__(21597);
const singleLookupValueEditor = options => context => {
    return {
        editorType: 'dxSelectBox',
        editorOptions: getLookupValueEditorOptions(options.parameter, options.dataSourceBrowser, context.widgetContainer)
    };
};
exports.singleLookupValueEditor = singleLookupValueEditor;
const multipleLookupValueEditor = options => context => {
    return {
        template: (args) => {
            var div = document.createElement('div');
            new tag_box_1.default(div, Object.assign(Object.assign({}, args.editorOptions), getLookupValuesEditorOptions(options.parameter, options.dataSourceBrowser, context.widgetContainer)));
            return div;
        }
    };
};
exports.multipleLookupValueEditor = multipleLookupValueEditor;
function getLookupValueEditorOptions(parameter, dataSourceBrowser, container) {
    let items = ko.observable([]);
    let dataSource = new data_source_1.default({
        store: getSortableCustomStorage(items, 'DisplayText'),
        paginate: true,
        pageSize: 100
    });
    const subscribeDataSource = (e) => {
        const disposables = e.component.__DX_DASHBOARD_DISPOSABLES = (e.component.__DX_DASHBOARD_DISPOSABLES || []);
        disposables.push(ko.computed(() => {
            if (!!parameter.staticListLookUpSettings()) {
                items(parameter.staticListLookUpSettings().values().filter(lookUpValue => !!lookUpValue.value()).map(lookUpValue => { return { Value: lookUpValue.value(), DisplayText: lookUpValue.value() }; }));
            }
            else if (!!parameter.dynamicListLookUpSettings()) {
                const parameterValues = dataSourceBrowser.getParameterValues(parameter.type(), parameter.dynamicListLookUpSettings());
                if (parameterValues().length === 0) {
                    parameterValues.subscribe(newValues => items(newValues));
                }
                else {
                    items(parameterValues());
                }
            }
        }));
        disposables.push(items.subscribe(newItems => {
            dataSource.reload();
        }));
    };
    return {
        dataSource: dataSource,
        searchEnabled: true,
        valueExpr: 'Value',
        searchExpr: ['Value', 'DisplayText'],
        displayExpr: 'DisplayText',
        noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),
        placeholder: _default_1.getLocalizationById('DashboardStringId.ParametersSelectorText'),
        encodeNoDataText: true,
        showClearButton: true,
        multiline: false,
        showSelectionControls: true,
        dropDownOptions: {
            container: container
        },
        onInitialized: subscribeDataSource,
        onDisposing: (e) => {
            (e.component.__DX_DASHBOARD_DISPOSABLES || []).forEach(d => d && d.dispose());
            e.component.__DX_DASHBOARD_DISPOSABLES = [];
        }
    };
}
function getLookupValuesEditorOptions(parameter, dataSourceBrowser, container) {
    return Object.assign(Object.assign({}, getLookupValueEditorOptions(parameter, dataSourceBrowser, container)), { value: parameter._valuesOfDefaultValues.peek(), onValueChanged: (e) => {
            parameter.defaultValues((e.value || []).map(val => {
                let lookUpValue = new look_up_value_1.LookUpValue();
                lookUpValue.value(val);
                return lookUpValue;
            }));
        } });
}
function getSortableCustomStorage(getItems, sortPropertyName) {
    return new custom_store_1.default({
        load: (options) => {
            var result = [].concat(_sortItems(getItems(), sortPropertyName));
            if (options.take)
                result = result.splice(options.skip, options.take);
            return _jquery_helpers_1.$promiseAdapter(_jquery_helpers_1.createJQueryDeferred().resolve(result).promise());
        },
        loadMode: 'raw'
    });
}
function _sortItems(items, sortPropertyName) {
    return items.sort((a, b) => {
        var propA = ko.unwrap(a[sortPropertyName]), propB = ko.unwrap(b[sortPropertyName]);
        if (propA && propB) {
            var diff = propA - propB;
            if (!isNaN(diff))
                return diff;
            propA = propA.toLowerCase ? propA.toLowerCase() : propA;
            propB = propB.toLowerCase ? propB.toLowerCase() : propB;
            return (propA < propB) ? -1 : (propA > propB) ? 1 : 0;
        }
    });
}


/***/ }),

/***/ 93969:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParameterEditorViewModel = void 0;
const ko = __webpack_require__(71032);
const _data_source_browser_1 = __webpack_require__(9970);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const disposable_object_1 = __webpack_require__(99253);
const _knockout_utils_1 = __webpack_require__(4437);
const look_up_value_1 = __webpack_require__(21597);
const _dynamic_list_lookup_settings_1 = __webpack_require__(54793);
const _parameter_1 = __webpack_require__(78840);
const _static_list_lookup_settings_1 = __webpack_require__(71739);
const _parameters_helper_1 = __webpack_require__(57914);
const _form_adapter_editors_1 = __webpack_require__(69949);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _field_picker_1 = __webpack_require__(91867);
const _lookup_values_editors_1 = __webpack_require__(31203);
class ParameterEditorViewModel extends disposable_object_1.DisposableObject {
    constructor(parameter, _dataSourceBrowserGetter, isNameValid) {
        super();
        this.parameter = parameter;
        this._dataSourceBrowserGetter = _dataSourceBrowserGetter;
        this.commonParameterSettings = this._getCommonParameterSettingsWrapper(parameter, isNameValid);
        this.lookUpParameterType = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: parameter,
            properties: [Object.assign(Object.assign({}, _parameter_1.lookUpSourceType), { simpleFormAdapterItem: 'selectBoxEditor' })]
        });
        this.staticListLookUpSettings = _knockout_utils_1.safeComputed({ staticListLookUpSettings: parameter.staticListLookUpSettings, type: this.parameter.type }, (args) => {
            if (args.staticListLookUpSettings) {
                return this._getStaticListLookUpSettingsWrapper(args.staticListLookUpSettings, args.type);
            }
            return null;
        });
        this.dynamicListLookUpSettings = _knockout_utils_1.safeComputed({ dynamicListLookUpSettings: parameter.dynamicListLookUpSettings }, (args) => {
            if (args.dynamicListLookUpSettings) {
                return this._getDynamicListLookUpSettingsWrapper(args.dynamicListLookUpSettings);
            }
            return null;
        });
    }
    get dataSourceBrowser() {
        return this._dataSourceBrowserGetter ? this._dataSourceBrowserGetter() : undefined;
    }
    _getStaticListLookUpSettingsWrapper(staticListLookUpSettings, parameterType) {
        const editorOptions = {
            dataFields: [_static_list_lookup_settings_1.lookUpValue.propertyName],
            noDataText: 'DashboardWebStringId.CollectionEditor.Parameters.NoItems',
            gridColumns: [Object.assign({ dataField: _static_list_lookup_settings_1.lookUpValue.propertyName }, getGridEditorSettings(parameterType))],
            createNewItemHandler: () => {
                var newLookUpValue = new look_up_value_1.LookUpValue({});
                newLookUpValue.valueType(parameterType);
                return newLookUpValue;
            },
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: staticListLookUpSettings,
            properties: [Object.assign(Object.assign({}, _static_list_lookup_settings_1.lookUpvalues), { formAdapterItem: _form_adapter_editors_1.inlineEditCollectionEditor(editorOptions) })]
        });
    }
    _getDynamicListLookUpSettingsWrapper(dynamicListLookUpSettings) {
        var isDataSourceAndDataMemberSet = (model) => {
            if (model) {
                let isDataSourceSet = !!model.dataSource();
                let dataMemberSupported = this.dataSourceBrowser.dataMembersSupported(model);
                let isDataMemberSet = true;
                if (dataMemberSupported) {
                    isDataMemberSet = !!model.dataMember();
                }
                return isDataSourceSet && isDataMemberSet;
            }
            return false;
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: dynamicListLookUpSettings,
            properties: [
                Object.assign(Object.assign({}, _dynamic_list_lookup_settings_1._dataSourceNameSerialization), { formAdapterItem: dataSourceChooserEditor(this.dataSourceBrowser) }),
                Object.assign(Object.assign({}, _dynamic_list_lookup_settings_1._dataMemberSerialization), { formAdapterItem: dataMemberChooserEditor({ dataSourceBrowser: this.dataSourceBrowser, dynamicListLookUpSettings }) }),
                Object.assign(Object.assign({}, _dynamic_list_lookup_settings_1.valueMemberSerialization), { formAdapterItem: fieldChooserEditor({ dataSourceBrowser: this.dataSourceBrowser, dynamicListLookUpSettings }) }),
                Object.assign(Object.assign({}, _dynamic_list_lookup_settings_1.displayMemberSerialization), { formAdapterItem: fieldChooserEditor({ dataSourceBrowser: this.dataSourceBrowser, dynamicListLookUpSettings }) }),
                Object.assign(Object.assign({}, _dynamic_list_lookup_settings_1.sortByMember), { formAdapterItem: fieldChooserEditor({ dataSourceBrowser: this.dataSourceBrowser, dynamicListLookUpSettings }) }),
                _dynamic_list_lookup_settings_1.sortOrder
            ],
            disabledFilterRules: {
                [_dynamic_list_lookup_settings_1._dataMemberSerialization.propertyName]: () => !this.dataSourceBrowser.dataMembersSupported(dynamicListLookUpSettings),
                [_dynamic_list_lookup_settings_1.valueMemberSerialization.propertyName]: () => !isDataSourceAndDataMemberSet(dynamicListLookUpSettings),
                [_dynamic_list_lookup_settings_1.displayMemberSerialization.propertyName]: () => !isDataSourceAndDataMemberSet(dynamicListLookUpSettings),
                [_dynamic_list_lookup_settings_1.sortByMember.propertyName]: () => !isDataSourceAndDataMemberSet(dynamicListLookUpSettings)
            }
        });
    }
    _getCommonParameterSettingsWrapper(parameter, isNameValid) {
        var propertyInfos = [
            Object.assign(Object.assign({}, _parameter_1.parameterName), { validateBeforeSet: true, validationRules: [
                    {
                        type: 'custom',
                        validationCallback: (options) => { return isNameValid(options.value); },
                        message: _default_1.getLocalizationById('DashboardWebStringId.Parameters.ParameterNameShouldBeUnique')
                    },
                    ..._parameter_1.parameterName.validationRules
                ] }),
            _parameter_1.description,
            _parameter_1.parameterVisible,
            _parameter_1.allowNull,
            _parameter_1.allowMultiselect,
            _parameter_1.parameterTypePropertyGrid,
            Object.assign(Object.assign({}, _parameter_1.defaultValue), { externalUpdateCallback: updateHandler => _knockout_utils_1.safeSubscribe({
                    lookupSourceType: parameter.lookUpSourceType,
                    allowMultiselect: parameter.allowMultiselect
                }, () => updateHandler({ forceValidate: false })) }),
            Object.assign(Object.assign({}, _parameter_1.defaultValues), { validateBeforeSet: true, formAdapterItem: _lookup_values_editors_1.multipleLookupValueEditor({ parameter, dataSourceBrowser: this.dataSourceBrowser }) }),
            _parameter_1.selectAllValues,
            _parameter_1.lookUpSourceType
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: parameter,
            properties: propertyInfos,
            visibilityFilterRules: {
                [_parameter_1.defaultValue.propertyName]: (model) => !model.allowMultiselect(),
                [_parameter_1.defaultValues.propertyName]: (model) => !!model.allowMultiselect(),
                [_parameter_1.selectAllValues.propertyName]: (model) => !!model.allowMultiselect()
            },
            disabledFilterRules: {
                [_parameter_1.allowMultiselect.propertyName]: ['lookUpSourceType', '=', 'None'],
                [_parameter_1.defaultValues.propertyName]: (model) => !!model.selectAllValues()
            },
            dynamicEditorRules: {
                [_parameter_1.defaultValue.propertyName]: (model) => {
                    if (model.lookUpSourceType() !== 'None') {
                        return { formAdapterItem: _lookup_values_editors_1.singleLookupValueEditor({ parameter, dataSourceBrowser: this.dataSourceBrowser }) };
                    }
                    else {
                        return { simpleFormAdapterItem: _parameters_helper_1.ParameterHelper.getEditorType(model.type()) };
                    }
                }
            }
        });
    }
}
exports.ParameterEditorViewModel = ParameterEditorViewModel;
const dataSourceChooserEditor = dataSourceBrowser => {
    return _form_adapter_editors_1.observableSelectBoxEditor({
        observables: {
            dashboardDataSources: dataSourceBrowser._dataSources
        },
        load: (args) => {
            return args.dashboardDataSources.map(ds => {
                return {
                    value: ds.componentName(),
                    displayValue: ds.name()
                };
            });
        },
        additionalOptions: () => {
            return {
                placeholder: _default_1.getLocalizationById('DashboardStringId.ParametersSelectorText'),
                noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay')
            };
        }
    });
};
const dataMemberChooserEditor = options => {
    return _form_adapter_editors_1.observableSelectBoxEditor({
        observables: {
            dashboardDataSources: options.dataSourceBrowser._dataSources,
            selectedDashboardDataSource: options.dynamicListLookUpSettings.dataSource,
        },
        load: (args) => {
            var dataSource = args.dashboardDataSources.filter(ds => ds.componentName() === args.selectedDashboardDataSource)[0];
            if (dataSource && dataSource.supportDataMembers) {
                return _jquery_helpers_1.$promiseAdapter(options.dataSourceBrowser.getDataFieldsArray(args.selectedDashboardDataSource, '', '', _data_source_browser_1.isNonCollectionDataField)
                    .then((members) => {
                    return members.map(member => { return { value: member.dataMember(), displayValue: member.dataMember() }; });
                }));
            }
            else {
                return [];
            }
        },
        additionalOptions: () => {
            return {
                placeholder: _default_1.getLocalizationById('DashboardStringId.ParametersSelectorText'),
                noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),
            };
        }
    });
};
const fieldChooserEditor = options => context => {
    return {
        template: (args, itemElement) => {
            const element = _jquery_helpers_1.$unwrap(itemElement);
            element.classList.add('dx-dashboard-field-picker');
            var value = ko.observable(_form_adapter_editors_1.getFieldValue(args));
            value.subscribe(newValue => {
                args.component.updateData(args.dataField, newValue);
            });
            let model = new _field_picker_1.FieldListPicker(options.dataSourceBrowser, value, options.dynamicListLookUpSettings, args.editorOptions.disabled);
            ko.applyBindingsToNode(element, { template: { name: 'dx-dashboard-field-picker', data: model } }, context.bindingContext);
        }
    };
};
function getGridEditorSettings(typeString) {
    switch (typeString) {
        case 'System.Guid':
            return {
                dataType: 'string',
                editorOptions: {
                    mask: 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxx',
                    maskRules: {
                        'x': /[0-9a-fA-F]/,
                    },
                    useMaskedValue: true,
                },
            };
        case 'System.SByte':
        case 'System.Int64':
        case 'System.Int32':
        case 'System.Int16':
        case 'System.Byte':
        case 'System.UInt16':
        case 'System.UInt32':
        case 'System.UInt64':
            return {
                dataType: 'number',
                editorOptions: {
                    showSpinButtons: true,
                    format: '0#',
                },
            };
        case 'System.Single':
        case 'System.Double':
        case 'System.Decimal':
            return {
                dataType: 'number',
                editorOptions: {
                    showSpinButtons: true,
                },
            };
        case 'System.DateTime':
            return {
                dataType: 'datetime'
            };
        case 'System.Boolean':
            return {
                dataType: 'boolean'
            };
        default:
        case 'System.String':
            return {
                dataType: 'string'
            };
    }
}


/***/ }),

/***/ 3816:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParameterListEditorViewModel = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const disposable_object_1 = __webpack_require__(99253);
const _helper_classes_1 = __webpack_require__(8384);
const parameter_1 = __webpack_require__(12052);
const _parameter_editor_viewmodel_1 = __webpack_require__(93969);
class ParameterListEditorViewModel extends disposable_object_1.DisposableObject {
    constructor(dashboard, _dataSourceBrowserGetter) {
        super();
        this.dashboard = dashboard;
        this._dataSourceBrowserGetter = _dataSourceBrowserGetter;
        this.selectedParameters = ko.observable([]);
        this.selectedParameter = ko.computed(() => {
            return this.selectedParameters()[0];
        });
        this.parameterEditorViewModel = ko.observable(null);
        this.allowReordering = ko.observable(false);
        this.toggleReordering = () => {
            this.allowReordering(!this.allowReordering());
        };
        this.addParameter = () => {
            var name = _helper_classes_1.NameGenerator.generateName(_default_1.getLocalizationById('DashboardStringId.NewParameterNamePrefix'), this.dashboard().parameters(), 'name', 1), param = new parameter_1.Parameter({ '@Name': name });
            this.dashboard().parameters.push(param);
            this.selectedParameters([param]);
        };
        this.removeParameter = () => {
            this.dashboard().parameters.remove(this.selectedParameter());
            this.selectedParameters([this.dashboard().parameters()[0]]);
        };
        this.reorderParameters = (e) => {
            let reorder = (array, from, to) => {
                var innerArray = array();
                innerArray.splice(to, 0, innerArray.splice(from, 1)[0]);
                array(innerArray);
            };
            reorder(this.dashboard().parameters, e.fromIndex, e.toIndex);
            this.selectedParameters([this.dashboard().parameters()[e.toIndex]]);
        };
        this.selectedParameter.subscribe((sp) => {
            if (sp) {
                let isNameValid = (name) => {
                    return this.dashboard().parameters().filter(p => p !== sp && p.name() === name).length === 0;
                };
                this.parameterEditorViewModel(new _parameter_editor_viewmodel_1.ParameterEditorViewModel(sp, _dataSourceBrowserGetter, isNameValid));
            }
            else {
                this.parameterEditorViewModel(undefined);
            }
        });
        this.toDispose(this.selectedParameter);
    }
    initialize() {
        var setDefaultSelectedParameter = dashboard => {
            if (dashboard && dashboard.parameters.peek().length > 0) {
                this.selectedParameters([dashboard.parameters.peek()[0]]);
            }
            else {
                this.selectedParameters([]);
            }
        };
        this.toDispose(this.dashboard.subscribe(setDefaultSelectedParameter));
        setDefaultSelectedParameter(this.dashboard.peek());
    }
}
exports.ParameterListEditorViewModel = ParameterListEditorViewModel;


/***/ }),

/***/ 25979:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardParameterEditorExtension = void 0;
const ko = __webpack_require__(71032);
const control_options_1 = __webpack_require__(82560);
const toolbox_items_1 = __webpack_require__(29608);
const _parameter_list_editor_viewmodel_1 = __webpack_require__(3816);
var name = 'dashboard-parameter-editor';
var nameAlias = 'dashboardParameterEditor';
class DashboardParameterEditorExtension {
    constructor(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this.dashboard = ko.computed(() => dashboardControl.dashboard());
        this._viewModel = new _parameter_list_editor_viewmodel_1.ParameterListEditorViewModel(this.dashboard, () => dashboardControl._dataSourceBrowser);
        this._menuItem = new toolbox_items_1.DashboardMenuItem(this.name, 'DashboardWebStringId.DashboardParameters', 240, 80);
        this._menuItem.template = 'dx-dashboard-form-parameters-settings';
        this._menuItem.data = this._viewModel;
        this._menuItem.disabled = ko.computed(() => !dashboardControl.dashboard());
    }
    start() {
        this._viewModel.initialize();
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.push(this._menuItem);
        }
    }
    stop() {
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.remove(this._menuItem);
        }
        this._viewModel.dispose();
    }
}
exports.DashboardParameterEditorExtension = DashboardParameterEditorExtension;
control_options_1.designerExtensions[name] = (dashboardControl, options) => new DashboardParameterEditorExtension(dashboardControl);
control_options_1.extensionNameMap[name] = nameAlias;


/***/ }),

/***/ 74885:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BindingAccordionTab = exports.ItemGroupAccordionTab = exports.StyleAccordionTab = exports.TypeAccordionTab = exports.ContentInHeaderAccordionTab = exports.AccordionTab = exports.KnownTabs = void 0;
const ko = __webpack_require__(71032);
exports.KnownTabs = {
    Binding: 'Binding',
    DataShaping: 'DataShaping',
    NumericFormat: 'NumericFormat',
    DateTimeFormat: 'DateTimeFormat',
    TopN: 'TopN',
    Interactivity: 'Interactivity',
    ItemFilter: 'ItemFilter',
    VisibleDataFilter: 'VisibleDataFilter',
    Common: 'Common',
    Totals: 'Totals',
    AxisX: 'AxisX',
    AxisY: 'AxisY',
    Legend: 'Legend',
    ColoringOptions: 'ColoringOptions',
    ColorLegend: 'ColorLegend',
    WeightedLegend: 'WeightedLegend',
    Layout: 'Layout',
    ConditionalFormatting: 'ConditionalFormatting',
    GridColumnFilter: 'GridColumnFilter',
    FormatRuleCommon: 'FormatRuleBinding',
    FormatRuleCondition: 'FormatRuleCondition',
    FormatRuleChartLegend: 'FormatRuleChartLegend',
    FormatRuleMisc: 'FormatRuleStyle',
    CustomRanges: 'CustomRanges',
    Type: 'Type',
    PointLabels: 'PointLabels',
    DeltaOptions: 'DeltaOptions',
    ScaleOptions: 'ScaleOptions',
    SparklineOptions: 'SparklineOptions',
    CardTemplates: 'CardTemplates',
    DeltaFormats: 'DeltaFormats',
    CardTemplateSettings: 'CardTemplateSettings',
    ContentArrangement: 'ContentArrangement',
    ShapeLabels: 'ShapeLabels',
    Labels: 'Labels',
    DataLayout: 'DataDesign',
    DataItemsGroup: 'DataItemsGroup',
    ColorScheme: 'ColorScheme',
    Calculations: 'Calculations',
    Expression: 'Expression',
    TileOptions: 'TileOptions',
    UnwrappedDataItem: 'UnwrappedDataItem',
    CustomMapOptions: 'CustomMapOptions',
    MeasureFilter: 'MeasureFilter',
    TabContainer: 'TabContainer'
};
class AccordionTab {
    constructor(name, category, tabModel) {
        this.name = name;
        this.category = category;
        this.tabModel = ko.observable();
        this.orderNo = undefined;
        this.visible = ko.computed(() => {
            let tabModel = this.tabModel();
            return !!(tabModel && ((tabModel.isEmpty === undefined) || !tabModel.isEmpty()));
        });
        if (tabModel) {
            this.tabModel(tabModel);
        }
    }
    grabData(tab) {
        const oldModel = this.tabModel(), newModel = tab.tabModel();
        if (oldModel === newModel) {
            return;
        }
        this.tabModel(tab.tabModel());
        this.disposeTabModel(oldModel);
    }
    get summary() {
        return this.tabModel() && this.tabModel().summary;
    }
    get buttons() {
        return this.tabModel() && this.tabModel().buttons;
    }
    unsubscribeTabModel(tabModel) {
        tabModel && tabModel.summary && tabModel.summary.dispose();
    }
    disposeTabModel(tabModel) {
        if (!tabModel) {
            return;
        }
        this.unsubscribeTabModel(tabModel);
        tabModel.unbindModel && tabModel.unbindModel();
    }
    dispose() {
        this.disposeTabModel(this.tabModel());
    }
}
exports.AccordionTab = AccordionTab;
class ContentInHeaderAccordionTab extends AccordionTab {
    constructor() {
        super(...arguments);
        this.orderNo = 50;
        this.style = 'dx-dashboard-item-type-selector';
        this.headerTemplate = 'dx-dashboard-content-in-tab-header-template';
        this.hasNoBorder = true;
        this.onTitleClick = (tabModel, data, event) => {
            event.stopPropagation();
            return false;
        };
    }
}
exports.ContentInHeaderAccordionTab = ContentInHeaderAccordionTab;
class TypeAccordionTab extends AccordionTab {
    constructor() {
        super(...arguments);
        this.orderNo = 50;
        this.style = 'dx-dashboard-item-type-selector';
        this.headerTemplate = 'dx-dashboard-container-type-selector-header';
        this.tabTemplate = 'dx-dashboard-container-type-selector-full';
        this.hasNoBorder = true;
        this.onTitleClick = (tabModel, data, event) => {
            var model = ko.unwrap(tabModel);
            if (model) {
                model.headerClick(data, event);
            }
        };
    }
}
exports.TypeAccordionTab = TypeAccordionTab;
class StyleAccordionTab extends AccordionTab {
    constructor() {
        super(...arguments);
        this.orderNo = 55;
        this.style = 'dx-dashboard-item-type-selector';
        this.headerTemplate = 'dx-dashboard-container-style-selector-header';
        this.hasNoBorder = true;
        this.onTitleClick = (tabModel, data, event) => {
            var model = ko.unwrap(tabModel);
            if (model) {
                model.headerClick(data, event);
            }
        };
    }
}
exports.StyleAccordionTab = StyleAccordionTab;
class ItemGroupAccordionTab extends AccordionTab {
    constructor() {
        super(...arguments);
        this.style = 'dx-dashboard-items-wrapper';
        this.orderNo = 60;
        this.headerTemplate = 'dx-dashboard-data-items-header';
        this.hasNoBorder = true;
    }
    get headerHeight() { return this.tabModel().model()._getBindingModel().length * 40 + 15; }
}
exports.ItemGroupAccordionTab = ItemGroupAccordionTab;
class BindingAccordionTab extends AccordionTab {
    constructor(name, category) {
        super(name, category);
        this.name = name;
        this.category = category;
        this.tabTemplate = 'dx-dashboard-data-item-general';
        this.orderNo = 70;
    }
    get summaryHint() {
        return this.tabModel() && this.tabModel().summaryHint;
    }
    unsubscribeTabModel(tabModel) {
        super.unsubscribeTabModel(tabModel);
        tabModel && tabModel.summaryHint && tabModel.summaryHint.dispose();
    }
    grabData(tab) {
        const oldModel = this.tabModel(), newModel = tab.tabModel();
        if (oldModel == newModel) {
            return;
        }
        if (oldModel.dataItemLink !== newModel.dataItemLink) {
            this.tabModel(tab.tabModel());
            this.disposeTabModel(oldModel);
        }
        else {
            this.unsubscribeTabModel(oldModel);
            oldModel.additionalProperties(newModel.additionalProperties());
            oldModel.dataMemberPath(newModel.dataMemberPath());
            oldModel.choosenField(newModel.choosenField());
            oldModel.dataItemLink = newModel.dataItemLink;
            oldModel.dataSourceBrowser = newModel.dataSourceBrowser;
            oldModel.summary = newModel.summary;
            oldModel.summaryHint = newModel.summaryHint;
        }
    }
}
exports.BindingAccordionTab = BindingAccordionTab;


/***/ }),

/***/ 52993:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PropertiesController = void 0;
const ko = __webpack_require__(71032);
const _accordion_tab_1 = __webpack_require__(74885);
class PropertiesController {
    constructor() {
        this._disposables = [];
        this.mainModel = ko.observable();
        this.secondaryModel = ko.observable();
        this.currentTab = ko.observable('');
        this.accordionDataSource = ko.observable([]);
        this.secondaryAccordionDataSource = ko.observable([]);
        this.computator = ko.computed(() => {
            let newTabs = [];
            let oldTabs = this.accordionDataSource;
            if (this.secondaryModel() && this.secondaryModel().data) {
                newTabs = newTabs.concat(ko.unwrap(this.secondaryModel().data.propertiesTabs));
                oldTabs = this.secondaryAccordionDataSource;
            }
            else if (this.mainModel() && this.mainModel().data) {
                newTabs = newTabs.concat(ko.unwrap(this.mainModel().data.propertiesTabs));
            }
            newTabs.forEach((tab, index) => { if (!tab.orderNo)
                tab.orderNo = 100 + index; });
            newTabs = newTabs
                .sort((a, b) => { return (a.orderNo) - (b.orderNo); });
            if ((newTabs.length === oldTabs().length)
                && newTabs.every(t => t instanceof _accordion_tab_1.AccordionTab)
                && oldTabs().every(t => t instanceof _accordion_tab_1.AccordionTab)) {
                var thesame = true;
                for (var i = 0; i < newTabs.length; i++) {
                    thesame = thesame && oldTabs()[i].name === newTabs[i].name;
                }
                if (thesame) {
                    for (var i = 0; i < newTabs.length; i++) {
                        oldTabs()[i].grabData(newTabs[i]);
                    }
                }
                else {
                    const tabsToDispose = oldTabs();
                    oldTabs(newTabs);
                    tabsToDispose.filter(tab => !newTabs.some(newTab => newTab === tab)).forEach(tab => tab && tab.dispose());
                }
            }
            else {
                const tabsToDispose = oldTabs();
                oldTabs(newTabs);
                tabsToDispose.filter(tab => !newTabs.some(newTab => newTab === tab)).forEach(tab => tab && tab.dispose());
            }
        });
        this.selectedIndex = ko.computed({
            read: () => {
                var newTabs = this.accordionDataSource();
                var theSameTab = newTabs.filter(tab => (tab.category === this.currentTab()) && tab.visible())[0];
                if (!theSameTab) {
                    theSameTab = newTabs.filter(tab => !tab.headerTemplate && tab.visible())[0];
                    theSameTab = theSameTab || newTabs[0];
                }
                return newTabs.indexOf(theSameTab);
            },
            write: (index) => {
                var newSelectedItem = this.accordionDataSource()[index];
                if (!!newSelectedItem) {
                    this.currentTab(newSelectedItem.category);
                }
                this.secondaryModel(undefined);
            }
        }).extend({ notify: 'always', deferred: true });
        this.secondarySelectedIndex = ko.observable(0);
        this.processDataItemClick = (data) => {
            var model = data.item;
            if (!this.mainModel() || !this.mainModel().data || ko.unwrap(this.mainModel().data.model) !== model) {
                data.click(model);
            }
            else {
                this.mainModel(null);
            }
        };
        this._disposables.push(this.mainModel.subscribe(() => this.secondaryModel(null), this, 'beforeChange'));
        this._disposables.push(this.mainModel.subscribe(() => {
            var newValue = this.mainModel.peek();
            if (newValue && newValue.data && newValue.containingCollection) {
                this._disposables.push(newValue.containingCollection.subscribe(changes => {
                    changes.forEach(arrayChange => {
                        var change = arrayChange;
                        if (change.status === 'deleted'
                            && this.mainModel()
                            && ko.unwrap(this.mainModel().data.model) === change.value) {
                            this.mainModel(null);
                        }
                    });
                }, null, 'arrayChange'));
            }
            this.secondaryModel(null);
        }));
        this._disposables.push(this.secondaryModel.subscribe(() => this.secondarySelectedIndex(0), this, 'beforeChange'));
        this._disposables.push(this.secondaryModel.subscribe(() => {
            var newValue = this.secondaryModel.peek();
            if (newValue && newValue.data && newValue.containingCollection) {
                this._disposables.push(newValue.containingCollection.subscribe(changes => {
                    changes.forEach(arrayChange => {
                        var change = arrayChange;
                        if (change.status === 'deleted'
                            && this.secondaryModel()
                            && ko.unwrap(this.secondaryModel().data.model) === change.value) {
                            this.secondaryModel(null);
                        }
                    });
                }, null, 'arrayChange'));
            }
        }));
        this._disposables.push(this.computator);
    }
    dispose() {
        this.accordionDataSource().forEach(tab => tab && tab.dispose());
        this._disposables.forEach((d) => {
            d.dispose();
        });
        this.selectedIndex.dispose();
    }
}
exports.PropertiesController = PropertiesController;


/***/ }),

/***/ 9978:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormItemTemplates = void 0;
const button_group_1 = __webpack_require__(11953);
const ko = __webpack_require__(71032);
class FormItemTemplates {
}
exports.FormItemTemplates = FormItemTemplates;
FormItemTemplates.buttonGroup = (args) => {
    var _a;
    var div = document.createElement('div');
    if (!!((_a = args === null || args === void 0 ? void 0 : args.editorOptions) === null || _a === void 0 ? void 0 : _a.items))
        args.editorOptions.items.forEach(x => x.hint = x.text);
    var options = Object.assign({ width: '100%', onSelectionChanged: e => args.component.updateData(args.dataField, e.component.option('selectedItemKeys')[0]), selectedItemKeys: [ko.unwrap(args.component.option('formData')[args.dataField])] }, args.editorOptions);
    new button_group_1.default(div, options);
    return div;
};


/***/ }),

/***/ 18258:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const devexpress_richedit_1 = __webpack_require__(17918);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
ko.bindingHandlers['dx-dashboard-rich-edit'] = {
    init: function (element, valueAccessor, _, __, bindingContext) {
        var options = ko.unwrap(valueAccessor());
        const richEditOptions = devexpress_richedit_1.createOptions();
        richEditOptions.width = '100%';
        richEditOptions.height = '100%';
        richEditOptions.view.viewType = devexpress_richedit_1.ViewType.Simple;
        richEditOptions.view.simpleViewSettings.paddings = { bottom: 7, left: 7, right: 7, top: 7 };
        if (options.dashboardItemWidth && options.dashboardItemWidth > 0) {
            richEditOptions.view.simpleViewSettings.fixedWidth = options.dashboardItemWidth;
        }
        richEditOptions.events.saving = (s, e) => {
            var document = atob(e.base64);
            options.onSaving(document);
            e.handled = true;
        };
        richEditOptions.events.documentLoaded = (s, e) => {
            var document = s.document;
            document.fields.updateAllFields();
            const charProps = document.getDefaultCharacterProperties();
            charProps.fontName = 'Segoe UI';
            document.setDefaultCharacterProperties(charProps);
            document.modified = false;
        };
        richEditOptions.events.calculateDocumentVariable = function (s, e) {
            var docVariable = options.docVariables.filter(v => v.id === e.variableName)[0];
            if (docVariable) {
                e.value = docVariable.displayName;
            }
        };
        const dashboardCmdPrefix = 'insertDashboardVariable';
        var fileTab = richEditOptions.ribbon.getTab(devexpress_richedit_1.RibbonTabType.File);
        fileTab.removeItem(devexpress_richedit_1.FileTabItemId.CreateNewDocument);
        fileTab.removeItem(devexpress_richedit_1.FileTabItemId.PrintDocument);
        var insertTab = richEditOptions.ribbon.getTab(devexpress_richedit_1.RibbonTabType.Insert);
        var mailMergeTab = richEditOptions.ribbon.getTab(devexpress_richedit_1.RibbonTabType.MailMerge);
        [devexpress_richedit_1.InsertTabItemId.ShowBookmarkDialog, devexpress_richedit_1.InsertTabItemId.InsertHeader, devexpress_richedit_1.InsertTabItemId.InsertFooter,
            devexpress_richedit_1.InsertTabItemId.InsertPageCountField, devexpress_richedit_1.InsertTabItemId.InsertPageNumberField, devexpress_richedit_1.InsertTabItemId.InsertFloatingTextBox].forEach(id => insertTab.removeItem(id));
        var dashboardFieldsMenuItems = options.docVariables.length ?
            options.docVariables.map(docVariable => { return new devexpress_richedit_1.RibbonSubMenuItem(dashboardCmdPrefix + docVariable.id, docVariable.displayName); })
            :
                [new devexpress_richedit_1.RibbonSubMenuItem('dummyCommand', _default_1.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.NoFields'))];
        [devexpress_richedit_1.MailMergeTabItemId.ShowAllFieldCodes, devexpress_richedit_1.MailMergeTabItemId.ShowAllFieldResults, devexpress_richedit_1.MailMergeTabItemId.UpdateAllFields]
            .map(id => mailMergeTab.getItem(id))
            .forEach((item, i) => insertTab.insertItem(item, i));
        insertTab.insertItem(new devexpress_richedit_1.RibbonMenuItem(dashboardCmdPrefix, _default_1.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.InsertField'), dashboardFieldsMenuItems, {
            icon: 'dxre-icon-InsertDataField',
            showText: true
        }), 0);
        insertTab.getItem(devexpress_richedit_1.InsertTabItemId.ShowInsertTableDialog).beginGroup = true;
        richEditOptions.ribbon.removeTab(devexpress_richedit_1.RibbonTabType.PageLayout);
        richEditOptions.ribbon.removeTab(devexpress_richedit_1.RibbonTabType.References);
        richEditOptions.ribbon.removeTab(devexpress_richedit_1.RibbonTabType.View);
        richEditOptions.ribbon.removeTab(devexpress_richedit_1.RibbonTabType.MailMerge);
        richEditOptions.events.customCommandExecuted = (richEdit, e) => {
            var docVariable = options.docVariables.filter(v => (dashboardCmdPrefix + v.id) === e.commandName)[0];
            if (docVariable) {
                var field = richEdit.document.fields.create(richEdit.selection.active, 'docvariable ' + docVariable.id);
                richEdit.document.insertText(field.resultInterval.start, docVariable.displayName);
                field.update();
            }
        };
        var richEdit = devexpress_richedit_1.create(element, richEditOptions);
        if (options.initialDocument) {
            richEdit.openDocument(btoa(unescape(encodeURIComponent(options.initialDocument))), '', devexpress_richedit_1.DocumentFormat.Rtf);
        }
        richEdit.documentSaveFormat = devexpress_richedit_1.DocumentFormat.Rtf;
        options.forceSave = () => {
            richEdit.hasUnsavedChanges = true;
            richEdit.saveDocument(devexpress_richedit_1.DocumentFormat.Rtf);
        };
        options.documentModified = () => richEdit.document.modified;
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            richEdit.dispose();
        });
        return { controlsDescendantBindings: true };
    }
};


/***/ }),

/***/ 46492:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RichEditExtensionViewModel = exports.ValueAccessor = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _confirm_dialog_1 = __webpack_require__(75110);
class ValueAccessor {
}
exports.ValueAccessor = ValueAccessor;
class RichEditExtensionViewModel {
    constructor() {
        this._isCloseConfirmed = false;
        this.richEditorOptions = ko.observable(null);
        this.close = () => {
            this.popup.hide();
        };
        this.saveAndClose = () => {
            var richEditorOptions = this.richEditorOptions();
            richEditorOptions && richEditorOptions.forceSave && richEditorOptions.forceSave();
            this.close();
        };
        this.onHidden = () => {
            this.richEditorOptions(null);
            this._isCloseConfirmed = false;
        };
        this.onHiding = (args) => {
            var richEditorOptions = this.richEditorOptions();
            var documentModified = richEditorOptions && richEditorOptions.documentModified && richEditorOptions.documentModified();
            if (documentModified && !this._isCloseConfirmed) {
                args.cancel = true;
                this.confirmDialogViewModel
                    .confirm(_default_1.getLocalizationById('DashboardWebStringId.Dialog.ConfirmSaving'), _default_1.getLocalizationById('DashboardWebStringId.SaveConfirmationDialogMessage') + '<br/>' + _default_1.getLocalizationById('DashboardWebStringId.SaveChangesDialogMessage'), _default_1.getLocalizationById('DashboardWebStringId.Dialog.Save'), _default_1.getLocalizationById('DashboardWebStringId.Dialog.DoNotSave'))
                    .done(result => {
                    this._isCloseConfirmed = true;
                    if (result) {
                        this.saveAndClose();
                    }
                    else {
                        this.close();
                    }
                });
            }
        };
        this.onInitialized = (args) => {
            this.popup = args.component;
        };
        this.confirmDialogViewModel = new _confirm_dialog_1.ConfirmDialogViewModel();
    }
    show(options, docVariables, dashboardItemWidth) {
        if (!this.richEditorOptions()) {
            this.popup.show().then(() => {
                this.richEditorOptions({
                    initialDocument: options.getValue(),
                    docVariables: docVariables,
                    onSaving: (document) => {
                        options.setValue(document);
                    },
                    dashboardItemWidth: dashboardItemWidth
                });
            });
        }
    }
}
exports.RichEditExtensionViewModel = RichEditExtensionViewModel;


/***/ }),

/***/ 99689:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(35600), exports);


/***/ }),

/***/ 35600:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextBoxItemEditorExtension = void 0;
const button_1 = __webpack_require__(68203);
const ko = __webpack_require__(71032);
const _layout_item_1 = __webpack_require__(85017);
const _default_1 = __webpack_require__(65855);
const model_1 = __webpack_require__(14198);
const disposable_object_1 = __webpack_require__(99253);
const _knockout_utils_1 = __webpack_require__(4437);
const _text_box_item_1 = __webpack_require__(69642);
const _object_properties_wrapper_1 = __webpack_require__(74970);
const _textbox_item_surface_1 = __webpack_require__(65465);
const _accordion_tab_1 = __webpack_require__(74885);
const _display_name_provider_1 = __webpack_require__(8464);
__webpack_require__(18258);
const _text_box_item_editor_view_model_1 = __webpack_require__(46492);
var name = 'text-box-item-editor';
class TextBoxItemEditorExtension extends disposable_object_1.DisposableObject {
    constructor(dashboardControl) {
        super();
        this.name = name;
        this._dashboardControl = dashboardControl;
        this._viewModel = new _text_box_item_editor_view_model_1.RichEditExtensionViewModel();
        this._customTemplate = {
            name: 'dx-dashboard-text-box-item-editor-extension',
            data: this._viewModel
        };
    }
    start() {
        this._dashboardControl.customTemplates.push(this._customTemplate);
        var contextMenuExtension = this._dashboardControl.findExtension('item-menu');
        var propertiesPanelExtension = this._dashboardControl.findExtension('item-options-panel');
        if (contextMenuExtension && propertiesPanelExtension) {
            this.toDispose(_knockout_utils_1.subscribeAndPerform(contextMenuExtension._itemContextMenu, (menu) => {
                if (menu) {
                    var customData = menu.contextMenuItems()[0].customData;
                    if (customData instanceof _textbox_item_surface_1.TextBoxItemSurface) {
                        customData.extendTabsHandler = (tabs, model, dashboardItem) => {
                            var textBoxTextProperty = Object.assign({}, _text_box_item_1.textBoxText);
                            this._extendTextBoxSerializationInfo(textBoxTextProperty, dashboardItem, this._dashboardControl._dataSourceBrowser);
                            tabs.push(new _accordion_tab_1.ContentInHeaderAccordionTab('text-box-item-rich-edit', _default_1.getLocalizationById('DashboardWebStringId.AccordionTab.Content'), new _object_properties_wrapper_1.ObjectPropertiesWrapper({
                                model: dashboardItem,
                                properties: [
                                    textBoxTextProperty
                                ]
                            })));
                        };
                    }
                }
            }));
            this.toDispose(propertiesPanelExtension._subscribeTabsChanged((tabs, item) => {
                var dataSourceBrowser = this._dashboardControl._dataSourceBrowser;
                if (item && item instanceof model_1.TextBoxItem) {
                    var textBoxDashoardItem = item;
                    var tab = tabs.filter(tab => tab.name === _accordion_tab_1.KnownTabs.Common)[0];
                    var tabModel = tab.tabModel();
                    if (tabModel) {
                        var textProperty = tabModel._serializationInfo.filter(info => info.propertyName === 'text')[0];
                        if (textProperty) {
                            this._extendTextBoxSerializationInfo(textProperty, textBoxDashoardItem, dataSourceBrowser);
                        }
                    }
                }
            }));
        }
    }
    _extendTextBoxSerializationInfo(textProperty, textBoxDashoardItem, dataSourceBrowser) {
        textProperty.displayName = _default_1.getLocalizationById('DashboardWebStringId.AccordionTab.Content');
        textProperty.formAdapterItem = {
            template: (args) => {
                var div = document.createElement('div');
                new button_1.default(div, {
                    text: _default_1.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.EditTextButton'),
                    width: '100%',
                    onClick: () => {
                        var docVariables = textBoxDashoardItem.dataItems().map(dataItem => {
                            return {
                                id: dataItem.uniqueName(),
                                displayName: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, textBoxDashoardItem, dataItem)
                            };
                        });
                        this._viewModel.show({
                            getValue: () => ko.unwrap(args.component.option('formData')[args.dataField]),
                            setValue: (v) => args.component.updateData(args.dataField, v)
                        }, docVariables, this._getDashboardItemWidth());
                    }
                });
                return div;
            }
        };
    }
    _getDashboardItemWidth() {
        var layoutController = this._dashboardControl._actualLayoutController();
        if (layoutController && layoutController.selectedLayoutItem()) {
            return layoutController.selectedLayoutItem().getWidth() - _layout_item_1.SplitterSize;
        }
        return null;
    }
    stop() {
        this._dashboardControl.customTemplates.remove(this._customTemplate);
        this.dispose();
    }
}
exports.TextBoxItemEditorExtension = TextBoxItemEditorExtension;


/***/ }),

/***/ 25822:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createToolbarSeparator = void 0;
function createToolbarSeparator() {
    return {
        cssClass: 'dx-dashboard-toolbar-separator'
    };
}
exports.createToolbarSeparator = createToolbarSeparator;


/***/ }),

/***/ 49431:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ToolbarKoViewModel = exports.toolbarAnimationTime = void 0;
const ko = __webpack_require__(71032);
const _toolbox_extension_1 = __webpack_require__(6402);
exports.toolbarAnimationTime = 500;
class ToolbarKoViewModel {
    constructor(getContainer, toolbarInitialized) {
        this._visible = ko.observable(false);
        this._popupDisposables = [];
        this.left = ko.observable(0);
        this.toolbarItems = ko.observableArray([]);
        this._getContainer = getContainer;
        this._toolbarInitialized = toolbarInitialized;
        this.koToolbarOptions = this._getKoToolbarOptions();
    }
    get height() { return this._visible() ? undefined : 0; }
    getKoPopupOptions() {
        let container = this._getContainer();
        let popupOptions = {
            container: container,
            position: {
                my: 'left top',
                at: 'left top',
                of: container,
                collision: 'flipfit',
                boundary: container,
                boundaryOffset: {
                    y: 0
                }
            },
            animation: {
                show: { type: 'slide', from: { top: -_toolbox_extension_1.toolboxConstants.menuTitleHeight }, to: { top: 0 }, duration: exports.toolbarAnimationTime },
                hide: { type: 'slide', from: { top: 0 }, to: { top: -_toolbox_extension_1.toolboxConstants.menuTitleHeight }, duration: exports.toolbarAnimationTime }
            },
            onShowing: (args) => {
                let setWidth = () => args.component.option('width', container.getBoundingClientRect().width - this.left());
                this._popupDisposables.push(this.left.subscribe(setWidth));
                let resizeObserver = new ResizeObserver(entries => entries[0] && setWidth());
                resizeObserver.observe(container);
                this._popupDisposables.push({ dispose: () => resizeObserver.unobserve(container) });
                setWidth();
            },
            onHidden: () => {
                this._popupDisposables.forEach(d => d.dispose());
                this._popupDisposables = [];
            },
            focusStateEnabled: false,
            showCloseButton: false,
            dragEnabled: false,
            height: 'auto',
            shading: false,
            wrapperAttr: {
                class: 'dx-dashboard-toolbar-extension'
            },
            showTitle: false
        };
        let koPopupOptions = Object.assign(Object.assign({}, popupOptions), { visible: this._visible });
        let position = koPopupOptions.position;
        let positionOffset = position.boundaryOffset;
        position.boundaryOffset = Object.assign(Object.assign({}, positionOffset), { x: this.left });
        return koPopupOptions;
    }
    _getKoToolbarOptions() {
        let toolbarOptions = {
            onInitialized: (args) => {
                this._toolbarInitialized();
            }
        };
        let koToolbarOptions = Object.assign(Object.assign({}, toolbarOptions), { items: this.toolbarItems });
        return koToolbarOptions;
    }
    setToolbarItems(items) {
        this.toolbarItems(items);
    }
    showPanel() {
        this._visible(true);
    }
    hidePanel() {
        this._visible(false);
    }
}
exports.ToolbarKoViewModel = ToolbarKoViewModel;


/***/ }),

/***/ 35323:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 65692:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DesignerToolbarExtension = void 0;
const control_options_1 = __webpack_require__(82560);
const _options_manager_1 = __webpack_require__(47337);
const _helpers_1 = __webpack_require__(49105);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const disposable_object_1 = __webpack_require__(99253);
const _toolbox_extension_1 = __webpack_require__(6402);
const _toolbar_extension_1 = __webpack_require__(25822);
const _toolbar_view_model_1 = __webpack_require__(49431);
let nameAlias = 'designerToolbar';
class DesignerToolbarExtension extends disposable_object_1.DisposableObject {
    constructor(dashboardControl, options = {}) {
        super();
        this._defaultItems = [];
        this._predefinedItems = [];
        this.name = 'designerToolbar';
        this._optionsManager = new _options_manager_1.OptionsManager();
        this._showPanelAsync = (options, cancellationToken) => {
            var def = _jquery_helpers_1.createJQueryDeferred();
            if (cancellationToken.canceled)
                def.reject();
            else {
                this._viewModel.showPanel();
                setTimeout(() => {
                    if (!cancellationToken.canceled) {
                        options.surfaceTop = this._viewModel.height;
                        def.resolve(options);
                    }
                    else {
                        def.reject();
                    }
                }, _toolbar_view_model_1.toolbarAnimationTime);
            }
            return def.promise();
        };
        this._hidePanelAsync = (options, cancellationToken) => {
            var def = _jquery_helpers_1.createJQueryDeferred();
            if (cancellationToken.canceled)
                def.reject();
            else {
                this._viewModel.hidePanel();
                setTimeout(() => {
                    if (!cancellationToken.canceled) {
                        options.surfaceTop = 0;
                        def.resolve(options);
                    }
                    else {
                        def.reject();
                    }
                }, _toolbar_view_model_1.toolbarAnimationTime);
            }
            return def.promise();
        };
        this._dashboardControl = dashboardControl;
        this._optionsManager.initialize({
            alias: nameAlias,
            dashboardControl: dashboardControl,
            defaultOptions: {},
            eventsHolder: this,
            initOptions: options,
            optionChanged: (args) => {
                switch (args.name) {
                    case 'items':
                    case 'onPreparing':
                        this._update();
                        break;
                }
                return 'noop';
            }
        });
        this._predefinedItems = [
            Object.assign(Object.assign({}, _toolbar_extension_1.createToolbarSeparator()), { name: 'separator' })
        ];
        let cancelableDesignerToViewerAction = {
            orderNo: 40,
            action: (options) => this._hidePanelAsync(options, _helpers_1.CancellationToken.None),
            cancelableAction: this._hidePanelAsync
        };
        this.designerToViewerAction = cancelableDesignerToViewerAction;
        let cancelableViewerToDesignerAction = {
            orderNo: 40,
            action: (options) => this._showPanelAsync(options, _helpers_1.CancellationToken.None),
            cancelableAction: this._showPanelAsync
        };
        this.viewerToDesignerAction = cancelableViewerToDesignerAction;
        this._viewModel = new _toolbar_view_model_1.ToolbarKoViewModel(() => this._dashboardControl.getWidgetContainer(), () => this._update());
        this.template = {
            data: this._viewModel,
            name: 'dx-dashboard-toolbar-extension'
        };
    }
    start() {
        let toolbox = this._dashboardControl.findExtension('toolbox');
        this._viewModel.left(toolbox ? _toolbox_extension_1.toolboxConstants.leftPanelWidth : 0);
        this._extensionChangeSubscription && this._extensionChangeSubscription.dispose();
        this._extensionChangeSubscription = this._dashboardControl.subscribeExtensionsChanged({
            added: (extension) => {
                if (extension.name === 'toolbox')
                    this._viewModel.left(_toolbox_extension_1.toolboxConstants.leftPanelWidth);
            },
            deleted: (extension) => {
                if (extension.name === 'toolbox')
                    this._viewModel.left(0);
            }
        });
        if (this._dashboardControl.isDesignMode())
            this._viewModel.showPanel();
        else
            this._viewModel.hidePanel();
        this._dashboardControl.surfaceTop(this._viewModel.height);
        this._update();
    }
    stop() {
        this._unsubscribe();
        this._viewModel.hidePanel();
        this._dashboardControl.surfaceTop(0);
    }
    _unsubscribe() {
        this._extensionChangeSubscription && this._extensionChangeSubscription.dispose();
    }
    _registerDefaultItems(defaultItems) {
        this._defaultItems.push(...defaultItems);
    }
    _unregisterDefaultItems(defaultItems) {
        this._defaultItems = this._defaultItems.filter(item => !defaultItems.some(n => n === item));
    }
    _registerPredefinedItems(predefinedItems) {
        this._predefinedItems.push(...predefinedItems);
    }
    _unregisterPredefinedItems(predefinedItems) {
        this._predefinedItems = this._predefinedItems.filter(item => !predefinedItems.some(n => n === item));
    }
    _update() {
        let args = {
            component: this._dashboardControl,
            dashboard: this._dashboardControl.dashboard(),
            items: []
        };
        let items = this._optionsManager.get('items');
        if (items) {
            args.items = items;
        }
        else {
            args.items = this._defaultItems
                .filter(defaultItem => _utils_1.type.isDefined(defaultItem.index))
                .sort((item1, item2) => item1.index - item2.index);
        }
        this._optionsManager.raiseEvent('preparing', args);
        let dxToolbarItems = args.items.reduce((acc, sourceItem) => {
            let item = typeof sourceItem === 'string' ? { name: sourceItem } : sourceItem;
            let defaultItem = this._predefinedItems.find(predefinedItem => predefinedItem.name === item.name);
            if (defaultItem) {
                let resultItem = {};
                _options_manager_1.mergeOptions(resultItem, defaultItem);
                _options_manager_1.mergeOptions(resultItem, item);
                resultItem.name = undefined;
                return acc.concat(resultItem);
            }
            return acc.concat([item]);
        }, []);
        this._viewModel.setToolbarItems(dxToolbarItems);
    }
    dispose() {
        this.stop();
        this._optionsManager.dispose();
        super.dispose();
    }
}
exports.DesignerToolbarExtension = DesignerToolbarExtension;
control_options_1.designerExtensions['designerToolbar'] = (dashboardControl, options) => new DesignerToolbarExtension(dashboardControl, options);
control_options_1.extensionNameMap['designerToolbar'] = nameAlias;


/***/ }),

/***/ 6402:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toolboxConstants = void 0;
exports.toolboxConstants = {
    menuTitleHeight: 51,
    leftPanelWidth: 81,
};


/***/ }),

/***/ 51350:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ToolboxViewModel = void 0;
const ko = __webpack_require__(71032);
const _drag_item_info_1 = __webpack_require__(24378);
const _interfaces_1 = __webpack_require__(60136);
const index_internal_1 = __webpack_require__(47350);
const _dashboard_item_helper_1 = __webpack_require__(57094);
const _toolbox_extension_1 = __webpack_require__(6402);
class ToolboxViewModel {
    constructor(menuVisible, _defaultMenuItemData, _menuItems, _toolboxGroups, _toolbarGroups, _layoutDragController) {
        this._defaultMenuItemData = _defaultMenuItemData;
        this._menuItems = _menuItems;
        this._toolboxGroups = _toolboxGroups;
        this._toolbarGroups = _toolbarGroups;
        this._layoutDragController = _layoutDragController;
        this.toolbarHeight = ko.observable(0);
        this.settingsForm = ko.observable();
        this.toggleMenu = () => {
            this.settingsFormVisible(false);
            this.settingsForm(null);
            this.menuVisible(!this.menuVisible());
        };
        this.closeMenu = () => {
            if (this.menuVisible()) {
                this.toggleMenu();
            }
        };
        this.showMenu = () => {
            if (!this.menuVisible()) {
                this.toggleMenu();
            }
        };
        this.menuItemClick = (menuItem) => {
            menuItem.click && menuItem.click();
            if (menuItem.template) {
                this.settingsForm({
                    title: menuItem.title.replace('…', ''),
                    template: menuItem.template,
                    data: !!menuItem.data ? menuItem.data : this._defaultMenuItemData
                });
                this._menuItems().forEach(item => item.selected(item === menuItem));
            }
        };
        this.menuVisible = ko.observable(false);
        this.designerPanelLeft = ko.observable(menuVisible ? 0 : -_toolbox_extension_1.toolboxConstants.leftPanelWidth);
        this.menuItemsSorted = ko.pureComputed(() => {
            return this._menuItems().sort((a, b) => (a.index || Number.MAX_VALUE) - (b.index || Number.MAX_VALUE));
        });
        this.toolboxGroupsSorted = ko.pureComputed(() => {
            return this._toolboxGroups().sort((a, b) => (a.index || Number.MAX_VALUE) - (b.index || Number.MAX_VALUE));
        });
        this.toolbarGroupsSorted = ko.pureComputed(() => {
            return this._toolbarGroups().sort((a, b) => (a.index || Number.MAX_VALUE) - (b.index || Number.MAX_VALUE));
        });
        this.settingsFormVisible = ko.computed({
            read: () => this.menuVisible() && this._menuItems().some(contextMenuItem => contextMenuItem.selected()),
            write: val => this._menuItems().forEach(item => item.selected(val))
        });
    }
    initDragEvents(itemType) {
        let subscription = null;
        return {
            onInitialize: (args) => {
                let controller = this._layoutDragController();
                controller && controller.initExternalElement(args.element, new ToolboxItemDragItemInfo(itemType));
                subscription = index_internal_1.subscribeWithPrev(this._layoutDragController, (prevValue, newValue) => {
                    prevValue && prevValue.cleanExternalElement(args.element);
                    newValue && newValue.initExternalElement(args.element, new ToolboxItemDragItemInfo(itemType));
                });
            },
            onDisposing: (args) => {
                let controller = this._layoutDragController();
                controller && controller.cleanExternalElement(args.element);
                subscription && subscription.dispose();
            }
        };
    }
    processKeyEvent(keyEventType, eventArgs) {
        if (keyEventType === 'keyup') {
            if (eventArgs.altKey) {
                var menuItem = this._menuItems().filter(item => item.hotKey === eventArgs.keyCode)[0];
                if (menuItem) {
                    setTimeout(() => {
                        setTimeout(() => this.menuItemClick(menuItem), this.menuVisible() ? 10 : 250);
                        this.menuVisible(true);
                    }, 1);
                    return true;
                }
            }
        }
        else if (keyEventType === 'keydown') {
            if (eventArgs.keyCode === _interfaces_1.KeyCodes.Esc && this.menuVisible()) {
                this.closeMenu();
                return true;
            }
            else if (eventArgs.altKey && this._menuItems().map(menuItem => menuItem.hotKey).indexOf(eventArgs.keyCode) !== -1) {
                eventArgs.preventDefault();
                return true;
            }
        }
        return false;
    }
    showDesignerPanel() {
        this.designerPanelLeft(0);
    }
    hideDesignerPanel() {
        this.designerPanelLeft(-_toolbox_extension_1.toolboxConstants.leftPanelWidth);
    }
}
exports.ToolboxViewModel = ToolboxViewModel;
class ToolboxItemDragItemInfo extends _drag_item_info_1.DashboardDragItemInfo {
    constructor(_itemType) {
        super();
        this._itemType = _itemType;
    }
    canDrop(layoutItem) {
        return layoutItem.canAttach(_dashboard_item_helper_1.getItemJson(this._itemType));
    }
    drop(dragOverState) {
        dragOverState.targetItem.create(_dashboard_item_helper_1.getItemJson(this._itemType), dragOverState.hoverLocation, dragOverState.targetItemBehavior);
    }
    dragStart() { }
    dragEnd() { }
}


/***/ }),

/***/ 96216:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ToolboxExtension = void 0;
const ko = __webpack_require__(71032);
const control_options_1 = __webpack_require__(82560);
const _docking_layout_controller_1 = __webpack_require__(82106);
const _helpers_1 = __webpack_require__(49105);
const _jquery_helpers_1 = __webpack_require__(59384);
const model_1 = __webpack_require__(14198);
const disposable_object_1 = __webpack_require__(99253);
const index_internal_1 = __webpack_require__(47350);
const _dashboard_item_helper_1 = __webpack_require__(57094);
const _obsolete_helper_1 = __webpack_require__(64060);
const serializable_model_1 = __webpack_require__(29591);
const toolbox_items_1 = __webpack_require__(29608);
const _toolbox_extension_1 = __webpack_require__(6402);
const _toolbox_view_model_1 = __webpack_require__(51350);
var nameAlias = 'toolbox';
class ToolboxExtension extends disposable_object_1.DisposableObject {
    constructor(dashboardControl) {
        super();
        this.dashboardControl = dashboardControl;
        this.name = 'toolbox';
        this.menuItems = ko.observableArray();
        this.addMenuItem = (menuItem) => {
            if (!!this._findMenuItem(menuItem.id)) {
                throw Error("The '" + menuItem.id + "' menu item already exists.");
            }
            this.menuItems.push(menuItem);
        };
        this.removeMenuItem = (menuItemId) => {
            var menuItem = this._findMenuItem(menuItemId);
            this.menuItems.remove(menuItem);
        };
        this.selectMenuItem = (menuItem) => {
            if (!!menuItem) {
                this._viewModel.menuVisible(true);
                this._viewModel.menuItemClick(menuItem);
            }
        };
        this.toolboxGroups = ko.observableArray();
        this.addToolboxItem = (groupName, toolboxItem) => {
            var group = this._findToolboxGroup(groupName);
            if (!!group) {
                group.items.push(toolboxItem);
            }
            else {
                throw Error("The '" + groupName + "' group does not exist.");
            }
        };
        this.removeToolboxItem = (groupName, toolboxItemName) => {
            var group = this._findToolboxGroup(groupName);
            if (group) {
                this._unregisterToolboxItem(group, toolboxItemName);
            }
            else {
                throw Error("The '" + groupName + "' group does not exist.");
            }
        };
        this.toolbarGroups = ko.observableArray();
        this.addToolbarItem = (groupName, toolbarItem) => {
            var group = this.toolbarGroups().filter(group => group.name === groupName)[0];
            if (!!group) {
                group.items.push(toolbarItem);
            }
            else {
                throw Error("The '" + groupName + "' group does not exist.");
            }
        };
        this.removeToolbarItem = (groupName, toolbarItemName) => {
            var group = this.toolbarGroups().filter(group => group.name === groupName)[0];
            if (!!group) {
                var toolbarItem = group.items().filter(item => item.name === toolbarItemName)[0];
                group.items.remove(toolbarItem);
            }
            else {
                throw Error("The '" + groupName + "' group does not exist.");
            }
        };
        this.showPanelAsync = (options) => {
            return this._showPanelAsync(options, _helpers_1.CancellationToken.None);
        };
        this._showPanelAsync = (options, cancellationToken) => {
            var def = _jquery_helpers_1.createJQueryDeferred();
            if (cancellationToken.canceled)
                def.reject();
            else {
                this._viewModel.showDesignerPanel();
                setTimeout(() => {
                    if (!cancellationToken.canceled) {
                        options.surfaceLeft = _toolbox_extension_1.toolboxConstants.leftPanelWidth;
                        def.resolve(options);
                    }
                    else {
                        def.reject();
                    }
                }, 500);
            }
            return def.promise();
        };
        this.hidePanelAsync = (options) => {
            return this._hidePanelAsync(options, _helpers_1.CancellationToken.None);
        };
        this._hidePanelAsync = (options, cancellationToken) => {
            var def = _jquery_helpers_1.createJQueryDeferred();
            if (cancellationToken.canceled)
                def.reject();
            else {
                this._viewModel.hideDesignerPanel();
                setTimeout(() => {
                    if (!cancellationToken.canceled) {
                        options.surfaceLeft = 0;
                        def.resolve(options);
                    }
                    else {
                        def.reject();
                    }
                }, 500);
            }
            return def.promise();
        };
        this._layoutItemPlaceholderService = (layoutItem) => {
            var currentDashboardItem = layoutItem._parent().viewModel.model;
            return {
                data: {
                    dashboardItems: ko.computed(() => {
                        var placeholderItems = [];
                        this._viewModel.toolboxGroupsSorted().forEach(group => {
                            group
                                .items()
                                .filter(toolboxItem => model_1.DashboardLayoutNode._canAttach(currentDashboardItem, { '@ItemType': toolboxItem.type }))
                                .forEach(toolboxItem => {
                                placeholderItems.push({
                                    type: toolboxItem.type,
                                    name: toolboxItem.name,
                                    iconName: toolboxItem.icon,
                                    title: toolboxItem.title
                                });
                            });
                        });
                        return placeholderItems;
                    }),
                    addDashboardItem: (data) => {
                        layoutItem.create(_dashboard_item_helper_1.getItemJson(data.type), 'left');
                    }
                },
                name: 'dx-toolbox-extension-layout-item-placeholder'
            };
        };
        let cancelableDesignerToViewerAction = {
            orderNo: 40,
            action: (options) => {
                this.closeMenu();
                return this.hidePanelAsync(options);
            },
            cancelableAction: (options, cancellationToken) => {
                this.closeMenu();
                return this._hidePanelAsync(options, cancellationToken);
            }
        };
        this.designerToViewerAction = cancelableDesignerToViewerAction;
        let cancelableViewerToDesignerAction = {
            orderNo: 40,
            action: this.showPanelAsync,
            cancelableAction: this._showPanelAsync
        };
        this.viewerToDesignerAction = cancelableViewerToDesignerAction;
        this._createDefaultGroups();
        let draggableController = index_internal_1.safeComputed({ dockingLayoutController: this.dashboardControl._dockingLayoutAdapter._dockingLayoutController }, (args) => {
            if (args.dockingLayoutController) {
                return args.dockingLayoutController.dragController;
            }
        });
        this.toDispose(draggableController);
        this._viewModel = new _toolbox_view_model_1.ToolboxViewModel(dashboardControl.isDesignMode(), this.dashboardControl, this.menuItems, this.toolboxGroups, this.toolbarGroups, draggableController);
        this.template = {
            data: this._viewModel,
            name: 'dx-dashboard-toolbox-extension'
        };
        if (dashboardControl.isDesignMode()) {
            dashboardControl.surfaceLeft(_toolbox_extension_1.toolboxConstants.leftPanelWidth);
        }
        dashboardControl.subscribeExtensionsChanged({
            added: (extension) => {
                if (extension.name === 'dashboard-panel') {
                    this._switchToViewerToolbar = new toolbox_items_1.DashboardToolbarGroup('viewer-button', '', 100);
                    var toViewerItem = new toolbox_items_1.DashboardToolbarItem('toviewer', () => dashboardControl.switchToViewer());
                    toViewerItem.template = 'dx-dashboard-working-mode-extension-viewer-button';
                    toViewerItem.disabled = ko.pureComputed(() => !!this.dashboardControl.dashboard());
                    this._switchToViewerToolbar.items.push(toViewerItem);
                    this.toolbarGroups.push(this._switchToViewerToolbar);
                }
            },
            deleted: (extension) => {
                if (extension.name === 'dashboard-panel') {
                    this.toolbarGroups.remove(this._switchToViewerToolbar);
                }
            }
        });
        _obsolete_helper_1.defineObsoleteProperty({
            target: this,
            memberName: 'settingsForm',
            oldMemberDisplayName: 'DevExpress.Dashboard.Designer.ToolboxExtension.settingsForm',
            newMemberDisplayName: 'DevExpress.Dasbhoard.Designer.DashboardMenuItem.template',
            action: () => { return this._viewModel.settingsForm; }
        });
        _obsolete_helper_1.defineObsoleteProperty({
            target: this,
            memberName: 'settingsFormVisible',
            oldMemberDisplayName: 'DevExpress.Dashboard.Designer.ToolboxExtension.settingsFormVisible',
            newMemberDisplayName: 'DevExpress.Dasbhoard.Designer.DashboardMenuItem.template',
            action: () => { return this._viewModel.settingsFormVisible; }
        });
        _obsolete_helper_1.defineObsoleteProperty({
            target: this,
            memberName: 'toggleMenu',
            oldMemberDisplayName: 'DevExpress.Dashboard.Designer.ToolboxExtension.toggleMenu',
            newMemberDisplayName: 'DevExpress.Dasbhoard.Designer.ToolboxExtension.openMenu/closeMenu',
            action: () => { return this._viewModel.toggleMenu; }
        });
        _obsolete_helper_1.defineObsoleteMethod({
            target: this,
            memberName: 'menuItemClick',
            oldMemberDisplayName: 'DevExpress.Dashboard.Designer.ToolboxExtension.menuItemClick',
            newMemberDisplayName: 'DevExpress.Dasbhoard.Designer.ToolboxExtension.selectMenuItem',
            action: (menuItem) => { return this._viewModel.menuItemClick(menuItem); }
        });
    }
    get menuVisible() { return this._viewModel.menuVisible; }
    openMenu() {
        this._viewModel.showMenu();
    }
    closeMenu() {
        this._viewModel.closeMenu();
    }
    processKeyEvent(keyEventType, eventArgs) {
        return this._viewModel.processKeyEvent(keyEventType, eventArgs);
    }
    start() {
        var standardItems = Object.keys(serializable_model_1.itemTypesMap).filter(key => !serializable_model_1.itemTypesMap[key].customItemType);
        var itemTypeNames = standardItems.sort((t1, t2) => serializable_model_1.itemTypesMap[t1].index - serializable_model_1.itemTypesMap[t2].index);
        itemTypeNames.forEach(itemTypeName => this._registerToolboxItem(itemTypeName, serializable_model_1.itemTypesMap[itemTypeName]));
        this.dashboardControl.extensions.forEach(extension => this._registerCustomItemToolbox(extension));
        this.toDispose(this.dashboardControl.subscribeExtensionsChanged({
            added: (extension) => {
                this._registerCustomItemToolbox(extension);
            },
            deleted: (extension) => {
                this.toolboxGroups().forEach(group => this._unregisterToolboxItem(group, extension.name));
            }
        }));
        index_internal_1.subscribeAndPerform(this.dashboardControl._actualLayoutController, (layout) => {
            if (layout && layout instanceof _docking_layout_controller_1.DockingLayoutController) {
                layout.layoutItemPlaceholderService = this._layoutItemPlaceholderService;
            }
        });
    }
    stop() {
        this.dashboardControl.surfaceLeft(0);
    }
    _registerCustomItemToolbox(extension) {
        var customItemExtension = extension;
        if (customItemExtension.metaData) {
            this._registerToolboxItem(customItemExtension.name, customItemExtension.metaData);
        }
    }
    _createDefaultGroups() {
        this.toolboxGroups.push(new toolbox_items_1.DashboardToolboxGroup('common', 'DashboardWebStringId.AccordionTab.Common', 100));
        this.toolboxGroups.push(new toolbox_items_1.DashboardToolboxGroup('maps', 'DashboardStringId.DescriptionMaps', 110));
        this.toolboxGroups.push(new toolbox_items_1.DashboardToolboxGroup('filter', 'DashboardWebStringId.DataSources.Filter', 120));
        this.toolboxGroups.push(new toolbox_items_1.DashboardToolboxGroup('layout', 'DashboardWebStringId.AccordionTab.Layout', 130));
    }
    _registerToolboxItem(itemTypeName, itemDescription) {
        var group = this._findToolboxGroup(itemDescription.groupName) || this._findToolboxGroup('custom');
        if (!group) {
            group = new toolbox_items_1.DashboardToolboxGroup('custom', 'DashboardStringId.CustomItems', 130);
            this.toolboxGroups.push(group);
        }
        var itemClickHandlerCreator = (type) => () => {
            var layout = this.dashboardControl._actualLayoutController();
            layout && layout instanceof _docking_layout_controller_1.DockingLayoutController && layout.addDashboardItem({ type: type });
        };
        var item = new toolbox_items_1.DashboardToolboxItem(itemTypeName, itemClickHandlerCreator(itemTypeName), _dashboard_item_helper_1.getIconName(itemTypeName, itemDescription.icon), itemDescription.title, itemTypeName);
        item.disabled = ko.computed(() => !this.dashboardControl.dashboard());
        group.items.push(item);
        return itemClickHandlerCreator;
    }
    _unregisterToolboxItem(group, toolboxItemName) {
        var toolboxItem = group.items().filter(item => item.name === toolboxItemName)[0];
        if (!!toolboxItem) {
            group.items.remove(toolboxItem);
        }
    }
    _findToolboxGroup(groupName) {
        return this.toolboxGroups().filter(gr => gr.name === groupName)[0];
    }
    _findMenuItem(menuItemId) {
        return this.menuItems().filter(mi => mi.id === menuItemId)[0];
    }
}
exports.ToolboxExtension = ToolboxExtension;
control_options_1.designerExtensions['toolbox'] = (dashboardControl, options) => new ToolboxExtension(dashboardControl);
control_options_1.extensionNameMap['toolbox'] = nameAlias;


/***/ }),

/***/ 29608:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardToolbarGroup = exports.DashboardToolboxGroup = exports.DashboardToolbarItem = exports.DashboardToolboxItem = exports.DashboardMenuItem = void 0;
const ko = __webpack_require__(71032);
var leftPanelWidth = 81;
class DashboardMenuItem {
    constructor(id, title, index, hotKey, click) {
        this.id = id;
        this.title = title;
        this.click = click;
        this.hotKey = hotKey;
        this.index = index;
        this.selected = ko.observable(false);
        this.disabled = ko.observable(false);
    }
}
exports.DashboardMenuItem = DashboardMenuItem;
class DashboardToolboxItem {
    constructor(name, click, icon, title, type) {
        this.name = name;
        this.click = click;
        this.icon = icon;
        this.title = title;
        this.type = type;
        this.disabled = ko.observable(false);
    }
}
exports.DashboardToolboxItem = DashboardToolboxItem;
class DashboardToolbarItem {
    constructor(name, click, icon, title) {
        this.name = name;
        this.click = click;
        this.icon = icon;
        this.title = title;
        this.disabled = ko.observable(false);
    }
}
exports.DashboardToolbarItem = DashboardToolbarItem;
class DashboardToolboxGroup {
    constructor(name, title, index, ...items) {
        this.name = name;
        this.title = title;
        this.index = index;
        this.items = ko.observableArray(items);
    }
}
exports.DashboardToolboxGroup = DashboardToolboxGroup;
class DashboardToolbarGroup {
    constructor(name, title, index, ...items) {
        this.name = name;
        this.title = title;
        this.index = index;
        this.items = ko.observableArray(items);
    }
}
exports.DashboardToolbarGroup = DashboardToolbarGroup;


/***/ }),

/***/ 68936:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 37965:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CollectionEditorRefreshCallback = exports.CollectionEditorViewModelBase = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
class CollectionEditorViewModelBase {
    constructor(params) {
        this.noDataText = params.noDataText || 'DashboardWebStringId.CollectionEditor.NoItems';
        this.customToolbarItems = params.customToolbarItems;
        this.isToolbarVisible = true;
        this.allowAddItem = false;
        this.allowEditItem = true;
        this.allowReorderItem = false;
        this.allowRemoveItem = false;
        this.addEnabled = ko.observable(false);
        this.editEnabled = ko.observable(false);
        this.upEnabled = ko.observable(false);
        this.downEnabled = ko.observable(false);
        this.removeEnabled = ko.observable(false);
    }
    getListOptions() {
        return {
            activeStateEnabled: false,
            itemTemplate: (itemData, itemIndex, itemElement) => this._itemTemplate(itemData, itemIndex, _jquery_helpers_1.$unwrap(itemElement)),
            noDataText: _default_1.getLocalizationById(this.noDataText),
            encodeNoDataText: true,
            onContentReady: () => this._updateActionsState(),
            onInitialized: (e) => this.listInstance = e.component,
            onItemClick: () => this._itemClickHandler(),
            selectionMode: 'single',
        };
    }
    get selectedValue() {
        return this.listInstance && this.listInstance.option('selectedItems')[0];
    }
    dispose() { }
    _itemTemplate(itemData, itemIndex, itemElement) {
        const div = document.createElement('div');
        div.innerText = this._getDisplayText(itemData);
        itemElement.appendChild(div);
    }
    _getDisplayText(itemData) {
        return '';
    }
    _itemClickHandler() {
        if (this._innerSelection !== this.selectedValue) {
            this._onSelectionChanged();
        }
        else {
            if (this.isToolbarVisible && this.allowEditItem && this.editEnabled()) {
                this.edit();
            }
        }
    }
    _listSelectionChanged() { }
    _updateActionsState() { }
    _onSelectionChanged() {
        this._innerSelection = this.selectedValue;
        this._listSelectionChanged();
        this._updateActionsState();
    }
    _setListSelection(selectedItem) {
        this.listInstance.option('selectedItems', selectedItem !== undefined ? [selectedItem] : []);
        this._onSelectionChanged();
    }
}
exports.CollectionEditorViewModelBase = CollectionEditorViewModelBase;
class CollectionEditorRefreshCallback {
    constructor() {
        this.callbacks = [];
        this.refresh = () => this.callbacks.forEach(fn => fn());
        this.subscribe = (fn) => this.callbacks.push(fn);
    }
}
exports.CollectionEditorRefreshCallback = CollectionEditorRefreshCallback;


/***/ }),

/***/ 66072:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CollectionEditorEditItemArguments = exports.CollectionEditorViewModel = void 0;
const data_source_1 = __webpack_require__(47545);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const _collection_editor_viewmodel_base_1 = __webpack_require__(37965);
class CollectionEditorViewModel extends _collection_editor_viewmodel_base_1.CollectionEditorViewModelBase {
    constructor(params, dataSource) {
        super(params);
        this.add = () => {
            const newItem = ko.observable(this.createNewItemHandler());
            if (!!newItem) {
                const addToDataSource = () => {
                    if (this.dataSource.indexOf(newItem()) === -1) {
                        this.dataSource.push(newItem());
                    }
                    this._setListSelection(newItem());
                };
                if (this.editItemHandler) {
                    const args = new CollectionEditorEditItemArguments();
                    this.editItemHandler(newItem(), args, newItem);
                    if (args.createImmediately) {
                        addToDataSource();
                    }
                    else {
                        args.requestRecalculation.add(addToDataSource);
                    }
                }
                else {
                    addToDataSource();
                }
            }
        };
        this.edit = () => this.editItemHandler && this.editItemHandler(this.selectedValue, new CollectionEditorEditItemArguments(), ko.observable(this.selectedValue));
        this.remove = () => this.removeEnabled() && this.removeItemHandler && this.removeItemHandler(this.selectedValue);
        this.up = () => {
            const selection = this.selectedValue;
            !!this.reorderItemsHandler ? this.reorderItemsHandler(selection, 'up') : this._moveSelectedGridRow('up');
            this._setListSelection(selection);
        };
        this.down = () => {
            const selection = this.selectedValue;
            !!this.reorderItemsHandler ? this.reorderItemsHandler(selection, 'down') : this._moveSelectedGridRow('down');
            this._setListSelection(selection);
        };
        this.dataField = params.propertyName;
        this.dataSource = dataSource;
        this.isToolbarVisible = params.isToolbarVisible === undefined || params.isToolbarVisible;
        this.allowAddItem = params.allowAddItem === undefined || params.allowAddItem;
        this.allowReorderItem = params.allowReorderItem === undefined || params.allowReorderItem;
        this.allowRemoveItem = params.allowRemoveItem === undefined || params.allowRemoveItem;
        this.createNewItemHandler = params.createNewItemHandler;
        this.editItemHandler = params.editItemHandler;
        this.reorderItemsHandler = params.reorderItemsHandler;
        this.customToolbarItems = params.customToolbarItems;
        this.visibleItemsFilter = params.visibleItemsFilter || (_ => true);
        this.customTemplate = params.customTemplate;
        this.removeItemHandler = params.removeItemHandler || ((item) => this.dataSource.remove(item));
        this.enableRemoveItem = params.enableRemoveItem || (_ => true);
        this.addEnabled = ko.observable(true);
        this.subscriptions = [this.dataSource.subscribe(() => this._safeReloadDataSource())];
        params.forceRefreshCallback && params.forceRefreshCallback.subscribe(() => this._safeReloadDataSource());
    }
    getListOptions() {
        return Object.assign(Object.assign({}, super.getListOptions()), { dataSource: new data_source_1.default({ load: () => ko.unwrap(this.dataSource).filter(this.visibleItemsFilter) }) });
    }
    _itemTemplate(itemData, itemIndex, itemElement) {
        this.customTemplate ? this.customTemplate(itemData, itemIndex, itemElement) : super._itemTemplate(itemData, itemIndex, itemElement);
    }
    _getDisplayText(itemData) {
        return _default_1.getLocalizationById(ko.unwrap(itemData[this.dataField]));
    }
    _moveSelectedGridRow(direction) {
        const selectedValue = this.selectedValue;
        if (!selectedValue)
            return;
        this.listInstance.beginUpdate();
        const index = this.dataSource().indexOf(selectedValue);
        this.dataSource.splice(index, 1);
        this.dataSource.splice(direction === 'up' ? index - 1 : index + 1, 0, selectedValue);
        this.listInstance.endUpdate();
    }
    _updateActionsState() {
        const selection = this.selectedValue;
        this.removeEnabled(!!selection && this.enableRemoveItem(selection));
        this.editEnabled(!!this.enableEditItem ? this.enableEditItem(selection) : !!selection);
        const selectedRowIndex = this.dataSource.indexOf(selection);
        this.upEnabled(!!selection && selectedRowIndex > 0);
        this.downEnabled(!!selection && selectedRowIndex < this.dataSource().length - 1);
    }
    _safeReloadDataSource() {
        const selection = this.dataSource().some(v => v === this.selectedValue) ? this.selectedValue : undefined;
        if (this.listInstance) {
            this.listInstance.reload();
            selection && this._setListSelection(selection);
        }
    }
    dispose() {
        this.subscriptions && this.subscriptions.forEach(s => s.dispose());
        super.dispose();
    }
}
exports.CollectionEditorViewModel = CollectionEditorViewModel;
class CollectionEditorEditItemArguments {
    constructor() {
        this.requestRecalculation = _jquery_helpers_1.createJQueryCallbacks();
        this.createImmediately = true;
    }
}
exports.CollectionEditorEditItemArguments = CollectionEditorEditItemArguments;


/***/ }),

/***/ 91675:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditableListEditorViewModel = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _collection_editor_viewmodel_base_1 = __webpack_require__(37965);
class EditableListEditorViewModel extends _collection_editor_viewmodel_base_1.CollectionEditorViewModelBase {
    constructor(params, selectedItem) {
        super(params);
        this.edit = () => this.editItemHandler && this.editItemHandler(this.selectedValue);
        this.dataField = params.propertyName;
        this.dataSource = params.dataSource;
        this.getDisplayText = params.getDisplayText;
        this.enableEditItem = params.enableEditItem;
        this.editItemHandler = params.editItemHandler;
        this.selectedItem = selectedItem;
        this.onSelectionChanged = params.onSelectionChanged;
        this.isToolbarVisible = true;
        this.allowEditItem = true;
    }
    getListOptions() {
        this._innerSelection = ko.unwrap(this.selectedItem);
        return Object.assign(Object.assign({}, super.getListOptions()), { dataSource: this.dataSource, selectedItems: [this._innerSelection] });
    }
    _getDisplayText(itemData) {
        return this.getDisplayText ? this.getDisplayText(itemData) : _default_1.getLocalizationById(ko.unwrap(itemData[this.dataField]));
    }
    _listSelectionChanged() {
        this.selectedItem && this.selectedItem(this.selectedValue);
        this.onSelectionChanged && this.onSelectionChanged(this.selectedValue);
    }
    _updateActionsState() {
        const selection = this.selectedValue;
        this.editEnabled(!!this.enableEditItem ? this.enableEditItem(selection) : !!selection);
    }
}
exports.EditableListEditorViewModel = EditableListEditorViewModel;


/***/ }),

/***/ 95145:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlineEditCollectionEditorViewModel = void 0;
const data_source_1 = __webpack_require__(47545);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
class GridDataSourceMapper {
    constructor(dataFields) {
        this.dataFields = dataFields;
        this.gridDataSourceKeyCache = [];
    }
    mapDataSource(srcData) {
        const updatedCache = [];
        let latestCacheItemKey = this.gridDataSourceKeyCache
            .reduce((acc, item) => {
            return item && item.key > acc ? item.key : acc;
        }, 0);
        const data = ko.unwrap(srcData)
            .map(dataSourceItem => {
            let cacheItem = this.gridDataSourceKeyCache
                .filter(cacheItem => cacheItem.objRef === dataSourceItem)[0];
            if (!cacheItem) {
                cacheItem = {
                    key: ++latestCacheItemKey,
                    objRef: dataSourceItem,
                };
            }
            updatedCache.push(cacheItem);
            return this.dataFields.reduce((acc, field) => {
                acc[field] = cacheItem.objRef && ko.unwrap(cacheItem.objRef[field]);
                return acc;
            }, { keyField: cacheItem.key });
        });
        this.gridDataSourceKeyCache = updatedCache;
        return data;
    }
    updateDataSourceItem(key, newValues) {
        const cacheItem = this.gridDataSourceKeyCache
            .filter(cacheItem => cacheItem.key === key)[0];
        const container = cacheItem && cacheItem.objRef;
        if (container) {
            this.dataFields.forEach(field => {
                newValues.hasOwnProperty(field) && ko.isWritableObservable(container[field]) && container[field](newValues[field]);
            });
        }
    }
    getObjectByKey(key) {
        const cacheItem = this.gridDataSourceKeyCache
            .filter(item => item.key === key)[0];
        return cacheItem && cacheItem.objRef;
    }
    getKeyByObject(obj) {
        const cacheItem = this.gridDataSourceKeyCache
            .filter(item => item.objRef === obj)[0];
        return cacheItem && cacheItem.key;
    }
}
class InlineEditCollectionEditorViewModel {
    constructor(params, dataSource) {
        this.add = () => this._addNewItemRow();
        this.remove = () => this.dataSource.remove(this.selectedValue);
        this.down = () => this.downEnabled() && this._moveSelectedGridRow('down');
        this.up = () => this.upEnabled() && this._moveSelectedGridRow('up');
        this.dataFields = params.dataFields;
        this.dataSource = dataSource;
        this.noDataText = _default_1.getLocalizationById(params.noDataText);
        this.gridColumns = params.gridColumns;
        this.createNewItemHandler = params.createNewItemHandler;
        this.customizeInlineEditor = params.customizeInlineEditor;
        this.customizeCell = params.customizeCell;
        this.enableAddItem = params.enableAddItem;
        this.enableRemoveItem = params.enableRemoveItem;
        this.enableEditItem = params.enableEditItem;
        this.isToolbarVisible = params.isToolbarVisible === undefined || params.isToolbarVisible;
        this.allowAddItem = params.allowAddItem === undefined || params.allowAddItem;
        this.allowRemoveItem = params.allowRemoveItem === undefined || params.allowRemoveItem;
        this.allowReorderItem = params.allowReorderItem === undefined || params.allowReorderItem;
        this.addEnabled = ko.observable(true);
        this.removeEnabled = ko.observable(false);
        this.upEnabled = ko.observable(false);
        this.downEnabled = ko.observable(false);
        this.dataSourceMapper = new GridDataSourceMapper(this.dataFields);
        params.forceRefreshCallback && params.forceRefreshCallback.subscribe(() => this.gridInstance && this.gridInstance.refresh());
    }
    getGridOptions() {
        const gridDataSource = new data_source_1.default({
            loadMode: 'raw',
            key: 'keyField',
            load: () => {
                return this.dataSourceMapper.mapDataSource(this.dataSource);
            },
            update: (key, values) => {
                this.dataSourceMapper.updateDataSourceItem(key, values);
                return _jquery_helpers_1.$promiseAdapter(_jquery_helpers_1.createJQueryDeferred().resolve().promise());
            },
            insert: (newRow) => {
                const newDataSourceItem = this.createNewItemHandler();
                if (newDataSourceItem) {
                    this.dataFields.forEach(field => newDataSourceItem[field](ko.unwrap(newRow[field])));
                    this.dataSource.push(newDataSourceItem);
                }
                return _jquery_helpers_1.$promiseAdapter(_jquery_helpers_1.createJQueryDeferred().resolve(newDataSourceItem).promise());
            },
        });
        this.dataSourceSubscription = this.dataSource.subscribe(() => this.gridInstance.refresh());
        const dataGridOptions = {
            onInitialized: (e) => this.gridInstance = e.component,
            dataSource: gridDataSource,
            remoteOperations: false,
            showColumnHeaders: false,
            noDataText: this.noDataText,
            showColumnLines: false,
            showRowLines: true,
            loadPanel: {
                enabled: false,
            },
            paging: {
                enabled: false
            },
            selection: {
                mode: 'single'
            },
            columns: !!this.gridColumns ? this.gridColumns : this.dataFields,
            editing: {
                allowUpdating: true,
                mode: 'cell',
                startEditAction: 'dblClick',
            },
            onCellClick: (e) => {
                if (e.row && e.row.isSelected) {
                    this.gridInstance.editCell(e.rowIndex, e.columnIndex);
                }
            },
            onCellPrepared: this.customizeCell,
            onEditingStart: (e) => e.cancel = this.enableEditItem && !this.enableEditItem(this.selectedValue, e),
            onSelectionChanged: (e) => this._updateActionsState(),
            onContentReady: (e) => this._updateActionsState(),
            onEditorPreparing: (e) => this.customizeInlineEditor && this.customizeInlineEditor(e),
        };
        return dataGridOptions;
    }
    get selectedValue() {
        const selectedKey = this.gridInstance && this.gridInstance.getSelectedRowKeys()[0];
        return this.dataSourceMapper.getObjectByKey(selectedKey);
    }
    dispose() {
        this.dataSourceSubscription && this.dataSourceSubscription.dispose();
    }
    _addNewItemRow() {
        let insertedObject;
        if (this.gridInstance.hasEditData())
            this.gridInstance.saveEditData();
        this.gridInstance.beginUpdate();
        const newObject = this.createNewItemHandler();
        this.gridInstance
            .getDataSource()
            .store()
            .insert(this.dataFields
            .reduce((acc, field) => {
            acc[field] = newObject[field];
            return acc;
        }, {}))
            .then(obj => insertedObject = obj);
        this.gridInstance.endUpdate();
        this.gridInstance.refresh().then(() => {
            setTimeout(() => {
                const rowKey = this.dataSourceMapper.getKeyByObject(insertedObject);
                if (rowKey) {
                    const rowIndex = this.gridInstance.getRowIndexByKey(rowKey);
                    this.gridInstance.focus(this.gridInstance.getCellElement(rowIndex, 0));
                    this.gridInstance.editCell(rowIndex, 0);
                }
            }, 1);
        });
    }
    _moveSelectedGridRow(direction) {
        const selectedValue = this.selectedValue;
        if (!selectedValue)
            return;
        this.gridInstance.beginUpdate();
        const index = this.dataSource().indexOf(selectedValue);
        this.dataSource.splice(index, 1);
        this.dataSource.splice(direction === 'up' ? index - 1 : index + 1, 0, selectedValue);
        this.gridInstance.endUpdate();
    }
    _updateActionsState() {
        this.addEnabled(!!this.enableAddItem ? this.enableAddItem(this.selectedValue) : true);
        this.removeEnabled(!!this.enableRemoveItem ? this.enableRemoveItem(this.selectedValue) : !!this.selectedValue);
        const selectedRowIndex = this.dataSource.indexOf(this.selectedValue);
        this.upEnabled(this.selectedValue && selectedRowIndex > 0);
        this.downEnabled(this.selectedValue && selectedRowIndex < this.gridInstance.getDataSource().totalCount() - 1);
    }
}
exports.InlineEditCollectionEditorViewModel = InlineEditCollectionEditorViewModel;


/***/ }),

/***/ 9995:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataSourceChooserController = void 0;
const ko = __webpack_require__(71032);
const _field_chooser_surface_1 = __webpack_require__(82911);
class DataSourceChooserController extends _field_chooser_surface_1.SliderController {
    constructor(params) {
        super({ startPath: ko.observable(''), dataSourceBrowser: params.dataSourceBrowser, selectedField: ko.observable(), filter: undefined });
        this.toDispose(this.selectedField.subscribe(field => {
            params.dataSource(field && field['dataSourceName']);
            params.dataMember(field && field['dataMemberName']);
        }));
        var updatingWrapper = (func) => {
            this.lists()[0].ready(false);
            func();
            setTimeout(() => {
                this.lists().forEach(list => list.ready(true));
            }, 1);
        };
        var updateSelection = () => {
            if (params.dataSource() && params.dataMember()) {
                updatingWrapper(() => {
                    var newList = new _field_chooser_surface_1.FieldChooserList(this, params.dataSource(), [params.dataSource()], this.selectedField);
                    newList.index(1);
                    this.lists.push(newList);
                    this.lists().forEach((list, index) => list.index(index - this.lists().length + 1));
                });
            }
            this.selectedField({ dataMember: ko.observable(params.dataMember() || params.dataSource()), dataSourceName: params.dataSource(), dataMemberName: params.dataMember() });
            if (params.dataSource() && !params.dataMember()) {
                this.lists()[0].scrollToSelectedItem();
            }
        };
        if (ko.isSubscribable(params.active)) {
            this.toDispose(params.active.subscribe(newVal => {
                if (newVal) {
                    updateSelection();
                }
                else {
                    this.selectedField(undefined);
                    updatingWrapper(() => {
                        this.lists([this.lists()[0]]);
                        this.lists()[0].index(0);
                    });
                }
            }));
        }
        updateSelection();
    }
}
exports.DataSourceChooserController = DataSourceChooserController;
ko.components.register('dx-datasource-chooser', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            var viewModel = new DataSourceChooserController(params);
            const disposeCallback = () => {
                viewModel.dispose();
                ko.utils.domNodeDisposal.removeDisposeCallback(componentInfo.element, disposeCallback);
            };
            ko.utils.domNodeDisposal.addDisposeCallback(componentInfo.element, disposeCallback);
            return viewModel;
        }
    },
    template: { element: 'dx-datasource-chooser-slider' }
});


/***/ }),

/***/ 82911:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FieldChooserController = exports.SliderController = exports.FieldChooserList = exports.TreeViewFieldChooserItem = exports.FieldChooserItem = void 0;
__webpack_require__(45664);
__webpack_require__(7559);
const text_box_1 = __webpack_require__(7559);
const ko = __webpack_require__(71032);
const _data_source_browser_1 = __webpack_require__(9970);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const model_1 = __webpack_require__(14198);
const _data_field_1 = __webpack_require__(68951);
const _calc_field_editor_1 = __webpack_require__(10571);
const _confirm_dialog_1 = __webpack_require__(75110);
var commonSelectedFieldName;
var isListMode = ko.observable(_utils_1.LocalStorageHelper.getItem('dx-dashboard-field-chooser-is-list-mode') === 'true');
class FieldChooserItem {
    constructor(data) {
        this.data = data;
    }
    static getName(data) {
        return data.nodeType && data.nodeType() && data.nodeType().toLowerCase().indexOf('olap') !== -1 ? data.dataMember() : data.name();
    }
    get displayName() {
        return this.data.displayName();
    }
    get name() {
        return FieldChooserItem.getName(this.data);
    }
    get isHierarchy() {
        return this.data.nodeType && this.data.nodeType() === 'OlapHierarchy';
    }
    get isLeaf() {
        return this.data.isDataFieldNode();
    }
    get isGroup() {
        return !this.isLeaf && !this.isList;
    }
    get type() {
        return this.data.isDataFieldNode() ? this.data.fieldType() : '';
    }
    get normalizedType() {
        if (this.isList)
            return 'list';
        if (!this.isLeaf || this.type === undefined || this.data.nodeType && this.data.nodeType() === 'DataSource') {
            return '';
        }
        switch (this.type) {
            case 'Text':
                return 'string';
            case 'Integer':
                return 'integer';
            case 'Float':
            case 'Double':
            case 'Decimal':
                return 'float';
            case 'DateTime':
                return 'datetime';
            case 'Bool':
            case 'Boolean':
                return 'boolean';
        }
        return 'custom';
    }
    get isCalcField() {
        return this.data.nodeType && this.data.nodeType() === 'CalculatedDataField';
    }
    get isCorruptedCalcField() {
        return this.isCalcField && this.data.isCorruptedCalcField();
    }
    get isOlap() {
        return _data_field_1.DataField.isOlap(this.data.dataMember());
    }
    get isOlapDimension() {
        return this.data.nodeType && this.data.nodeType() === 'OlapDimension';
    }
    get isOlapDimensionHierarchy() {
        return this.data.nodeType && this.data.nodeType() === 'OlapHierarchy';
    }
    get isOlapMeasure() {
        return this.data.nodeType && (this.data.nodeType() === 'OlapMeasure' || this.data.nodeType() === 'OlapMeasureFolder');
    }
    get isAggregate() {
        return this.data.isAggregate && this.data.isAggregate();
    }
    get isList() {
        return !_data_source_browser_1.isNonCollectionDataField(this.data);
    }
    get disabled() {
        return this.isList;
    }
    get typeTooltip() {
        if (this.isList)
            return _default_1.getLocalizationById('DashboardStringId.MessageCollectionTypesNotSupported');
        if (this.isCorruptedCalcField)
            return _default_1.getLocalizationById('DashboardWebStringId.DataSources.CalculatedField.Corrupted');
        return this.data.fieldType();
    }
}
exports.FieldChooserItem = FieldChooserItem;
class TreeViewFieldChooserItem extends FieldChooserItem {
    constructor(data, id, parentId) {
        super(data);
        this.data = data;
        this.id = id;
        this.parentId = parentId;
        this.selected = undefined;
    }
}
exports.TreeViewFieldChooserItem = TreeViewFieldChooserItem;
class FieldChooserList extends model_1.DisposableObject {
    constructor(owner, path = '', pathParts, _selectedField) {
        super();
        this.owner = owner;
        this.path = path;
        this.pathParts = pathParts;
        this._selectedField = _selectedField;
        this._scrollAfterInitialize = false;
        this.itemClick = (args) => {
            var item = args.itemData;
            if (!item.isLeaf) {
                this.owner.slide(this, item);
            }
            else {
                commonSelectedFieldName = item.data && item.data.dataMember();
                if (!this._selectedField() || (this._selectedField().dataMember() !== item.data.dataMember()) || ((item.data['dataSourceName']))) {
                    this._selectedField(item.data);
                }
            }
        };
        this.onInitialized = (e) => {
            this.component = e.component;
        };
        this.onContentReady = () => {
            if (this._scrollAfterInitialize) {
                this.scrollToSelectedItem();
            }
        };
        this.items = ko.observable();
        this.index = ko.observable(0);
        this.ready = ko.observable(false);
        this.selectedItemName = ko.observable([undefined]);
        this.loading = ko.observable(true);
        var fieldSelector = (field) => {
            if (field && ((field.dataMember() !== this.selectedItemName()[0]) || field['dataSourceName'])) {
                this.selectedItemName([field.dataMember()]);
            }
        };
        this.toDispose(_selectedField.subscribe(fieldSelector), {
            dispose: () => this.component = undefined
        });
        fieldSelector(_selectedField());
        this.reload();
        this.ancestors = pathParts && pathParts.length ? ['…'].concat(pathParts) : null;
    }
    reload() {
        this.items([]);
        var loadingTimeout = setTimeout(() => this.loading(true), 25);
        var { dataSource, dataMember, fieldPath } = this.owner.dataSourceBrowser.splitFullPath(this.path);
        this.owner.dataSourceBrowser.getDataFieldsArray(dataSource, dataMember, fieldPath, () => true).done(fields => {
            clearTimeout(loadingTimeout);
            this.items(fields
                .filter(field => !this.owner.filter || this.owner.filter(field))
                .map(field => new FieldChooserItem(field)));
            this.loading(false);
            this.scrollToSelectedItem();
        });
    }
    scrollToSelectedItem() {
        if (!this.component) {
            this._scrollAfterInitialize = true;
            return;
        }
        this._scrollAfterInitialize = false;
        var currentItemIndex = this.items().findIndex(x => x.name === this.selectedItemName()[0]);
        var pageIndex = Math.floor(currentItemIndex / 20);
        var _tryScrollToItem = () => {
            if (this.component['_dataSource'].pageIndex() >= pageIndex) {
                this.component.scrollToItem(currentItemIndex);
                return true;
            }
            return false;
        };
        if (_tryScrollToItem())
            return;
        for (var i = 0; i < pageIndex; i++) {
            this.component['_loadNextPage']().done(() => _tryScrollToItem());
        }
    }
}
exports.FieldChooserList = FieldChooserList;
class SliderController extends model_1.DisposableObject {
    constructor(params) {
        super();
        this.lists = ko.observableArray();
        this.isSliding = false;
        this.backClick = (pathItem, ancestors) => {
            if (!this.isSliding) {
                this.isSliding = true;
                var pathIndex = ancestors.length - 1 - ancestors.indexOf(pathItem);
                this.lists().forEach(list => list.index(list.index() + pathIndex));
                setTimeout(() => {
                    var removedLists = this.lists.splice(this.lists().length - pathIndex);
                    removedLists.forEach(x => x.dispose());
                    this.isSliding = false;
                }, FieldChooserController.TRANSITION_TIME);
            }
        };
        this.rootPath = params.startPath;
        this.dataSourceBrowser = params.dataSourceBrowser;
        this.filter = params.filter;
        this.selectedField = params.selectedField;
        this.lists([new FieldChooserList(this, this.rootPath(), [], this.selectedField)]);
        this.lists()[0].ready(true);
        this.toDispose({ dispose: () => this.lists().forEach(x => x.dispose()) });
    }
    slide(list, item) {
        if (!this.isSliding) {
            this.isSliding = true;
            var newList = new FieldChooserList(this, list.path === '' ? item.name : list.path + '.' + item.name, list.pathParts.concat([item.name]), this.selectedField);
            newList.index(1);
            this.lists.push(newList);
            setTimeout(() => {
                newList.ready(true);
                this.lists().forEach(list => list.index(list.index() - 1));
                setTimeout(() => {
                    this.isSliding = false;
                }, FieldChooserController.TRANSITION_TIME);
            }, 1);
        }
    }
}
exports.SliderController = SliderController;
SliderController.TRANSITION_TIME = 310;
class FieldChooserController extends SliderController {
    constructor(params) {
        super(params);
        this.addCalcField = () => {
            var { dataSource, dataMember, fieldPath } = this.dataSourceBrowser.splitFullPath(this.rootPath());
            this.calcFieldEditor
                .showAddDialog(dataSource, dataMember)
                .then(cf => this.onCalcFieldSaveHandler(cf));
        };
        this.editCalcField = () => {
            var { dataSource, dataMember, fieldPath } = this.dataSourceBrowser.splitFullPath(this.rootPath());
            var calcField = this.getCurrentCalcField();
            this.calcFieldEditor
                .showEditDialog(calcField, dataSource, dataMember)
                .then(cf => this.onCalcFieldSaveHandler(cf));
        };
        this.removeCalcField = () => {
            var { dataSource, dataMember, fieldPath } = this.dataSourceBrowser.splitFullPath(this.rootPath());
            var calcField = this.getCurrentCalcField();
            this.calcFieldEditor
                .removeCalcField(calcField, dataSource)
                .then(cf => this.onCalcFieldSaveHandler(cf));
        };
        this._inappropriateCalcFieldConfirmation = new _confirm_dialog_1.ConfirmDialogViewModel();
        this.onCalcFieldSaveHandler = (calcField) => {
            var { dataSource, dataMember, fieldPath } = this.dataSourceBrowser.splitFullPath(this.rootPath());
            let updateUI = () => {
                if (this.isListMode.peek()) {
                    let list = this.lists()[0];
                    list.reload();
                }
                else {
                    this.treeViewInstanceResolver.then(treeViewInstance => treeViewInstance.option('dataSource', treeViewInstance.option('dataSource')));
                }
            };
            updateUI();
            return this.dataSourceBrowser
                .findDataField(dataSource, dataMember, calcField.name())
                .then(field => {
                let deferred = _jquery_helpers_1.createJQueryDeferred();
                if (!this.filter || this.filter(field)) {
                    this.selectedField(field);
                    this._navigateToSelection(field.dataMember());
                    deferred.resolve();
                }
                else {
                    this._inappropriateCalcFieldConfirmation
                        .confirm(_default_1.getLocalizationById('DashboardWebStringId.Dialog.Warning'), _default_1.getLocalizationById('DashboardWebStringId.Dialog.UnsupportedCalculatedField'), _default_1.getLocalizationById('DashboardStringId.ButtonOK'))
                        .done(() => deferred.resolve({}))
                        .fail(() => deferred.reject());
                }
                return deferred.promise();
            })
                .then(updateUI);
        };
        this.getCurrentCalcField = () => {
            if (!this.selectedField())
                return null;
            var { dataSource, dataMember, fieldPath } = this.dataSourceBrowser.splitFullPath(this.rootPath());
            var dataSourceInstance = this.dataSourceBrowser.findDataSource(dataSource);
            if (!dataSourceInstance.hasCalculatedFields)
                return null;
            return dataSourceInstance.calculatedFields().filter(cf => cf.name() == this.selectedField().name())[0];
        };
        this.isCalcFieldSelected = ko.pureComputed(() => {
            return this.selectedField() && this.selectedField().nodeType && this.selectedField().nodeType() === 'CalculatedDataField';
        });
        this.isSearchMode = ko.observable(false);
        this.searchString = ko.observable().extend({ throttle: 300 });
        this.searchResults = ko.observableArray();
        this.hasSearchResults = ko.observable(false);
        this.searchButtonClick = (_, ev) => {
            var newValue = !this.isSearchMode();
            this.isSearchMode(newValue);
            if (newValue) {
                let textBoxContainer = ev.currentTarget.parentElement.parentElement.querySelector('.dx-textbox');
                let textBox = text_box_1.default.getInstance(textBoxContainer);
                setTimeout(() => {
                    textBox.focus();
                    textBox.reset();
                }, 100);
            }
            else {
                this.searchString(null);
            }
        };
        this.selectViaSearchResults = (data) => {
            var searchResultItem = data.itemData;
            if ((searchResultItem.item.data.dataMember != null) &&
                (!this.selectedField() || (searchResultItem.item.data.dataMember() !== this.selectedField().dataMember()))) {
                this.selectedField(searchResultItem.item.data);
            }
        };
        this.selectedSearchResult = ko.computed(() => {
            return this.searchResults().filter(res => res.item.data.dataMember && this.selectedField() && res.item.data.dataMember() === this.selectedField().dataMember())[0];
        });
        this.isListMode = isListMode;
        this.setListMode = () => {
            isListMode(true);
            _utils_1.LocalStorageHelper.setItem('dx-dashboard-field-chooser-is-list-mode', 'true');
            this.lists().forEach((list, index) => list.index.notifySubscribers());
        };
        this.setTreeMode = () => {
            isListMode(false);
            _utils_1.LocalStorageHelper.setItem('dx-dashboard-field-chooser-is-list-mode', 'false');
        };
        this.hasGroups = ko.computed(() => { return !this.lists()[0].items().every(item => item.isLeaf); });
        this.treeViewInstanceResolver = _jquery_helpers_1.createJQueryDeferred();
        var selectedFieldName = this.selectedField() && this.selectedField().dataMember() || commonSelectedFieldName;
        this._navigateToSelection(selectedFieldName);
        if (!this.selectedField()) {
            var navigationSubscription = this.selectedField.subscribe(newSelection => {
                if (newSelection) {
                    this._navigateToSelection(newSelection.dataMember());
                    navigationSubscription.dispose();
                }
            });
        }
        this.searchString.subscribe(searchFor => {
            this.searchResults([]);
            this.hasSearchResults(false);
            if (!!searchFor) {
                this.dataSourceBrowser.fuzzyFindFields(this.rootPath(), searchFor).done(res => {
                    this.searchResults(res
                        .filter(item => item.field.isDataFieldNode() && (!this.filter || this.filter(item.field)))
                        .map(item => ({
                        path: this.dataSourceBrowser.splitFullPath(item.path).fieldPath,
                        item: new FieldChooserItem(item.field)
                    })));
                    this.hasSearchResults(true);
                });
            }
        });
        ko.computed(() => {
            if (!this.hasGroups() && !this.isListMode.peek()) {
                this.isListMode(true);
            }
        });
        this.calcFieldEditor = new _calc_field_editor_1.CalcFieldEditor(this.dataSourceBrowser);
    }
    get dataSourceName() {
        var { dataSource, dataMember, fieldPath } = this.dataSourceBrowser.splitFullPath(this.rootPath());
        return dataSource;
    }
    get canAddCalculatedField() {
        return this.calcFieldEditor.canAddCalculatedField(this.dataSourceName);
    }
    _navigateToSelection(selectedFieldName) {
        if (!selectedFieldName) {
            return;
        }
        var pathComponents = (this.rootPath() || '').split('.');
        var fieldChooserConstraint = (field) => { return !this.filter || this.filter(field); };
        this.dataSourceBrowser.findPathToFieldInTree(pathComponents.shift(), pathComponents.join('.'), selectedFieldName, fieldChooserConstraint)
            .done(fieldPath => {
            if (this.isListMode()) {
                if (fieldPath) {
                    if (this.lists().length === 1) {
                        this.lists()[0].ready(false);
                        var selectionList = fieldPath.split('.');
                        var currentPath = this.rootPath(), currentPathParts = [];
                        selectionList.forEach((pathItem, index) => {
                            currentPath = currentPath + '.' + pathItem;
                            if (this.dataSourceBrowser.isFolder(currentPath)) {
                                currentPathParts = currentPathParts.concat(pathItem);
                                var newList = new FieldChooserList(this, currentPath, currentPathParts, this.selectedField);
                                newList.index(index + 1);
                                this.lists.push(newList);
                            }
                        });
                    }
                    this.isSliding = true;
                    this.lists().forEach((list, index) => list.index(index - this.lists().length + 1));
                    setTimeout(() => {
                        this.lists().forEach(list => list.ready(true));
                        this.isSliding = false;
                    }, 1);
                }
                else {
                    this.isSliding = true;
                    this.lists().forEach((list, index) => list.index(index));
                    setTimeout(() => {
                        this.isSliding = false;
                        this.lists([this.lists()[0]]);
                        this.lists().forEach(list => list.ready(true));
                    }, SliderController.TRANSITION_TIME);
                }
            }
            else {
                this.treeViewInstanceResolver.then(treeViewInstance => {
                    if (fieldPath) {
                        var keys = fieldPath.split('.');
                        var nextNodeKey = this.rootPath(), num = 1;
                        while (keys.length) {
                            var keyparts = keys.splice(0, num);
                            var key = keyparts.join('.');
                            num++;
                            nextNodeKey = nextNodeKey + '.' + key;
                            treeViewInstance.expandItem(nextNodeKey);
                        }
                    }
                });
            }
        });
    }
    get dataSourceTreeOptions() {
        return {
            dataSource: {
                load: (options) => {
                    var parentId = options.filter && options.filter[1] || this.rootPath();
                    var result = _jquery_helpers_1.createJQueryDeferred();
                    var { dataSource, dataMember, fieldPath } = this.dataSourceBrowser.splitFullPath(parentId);
                    this.dataSourceBrowser.getDataFieldsArray(dataSource, dataMember, fieldPath, () => true).done(fields => {
                        var data = fields
                            .filter(field => !this.filter || this.filter(field))
                            .map(field => {
                            var name = FieldChooserItem.getName(field);
                            var item = new TreeViewFieldChooserItem(field, parentId + '.' + name, parentId === this.rootPath ? undefined : parentId);
                            item.selected = this.selectedField() && (field.dataMember() === this.selectedField().dataMember());
                            return item;
                        });
                        result.resolve(data);
                    });
                    return result.promise();
                },
            },
            rootValue: this.rootPath(),
            dataStructure: 'plain',
            keyExpr: 'id',
            parentIdExpr: 'parentId',
            hasItemsExpr: 'isGroup',
            showCheckBoxesMode: 'none',
            selectNodesRecursive: false,
            selectionMode: 'single',
            onItemClick: (args) => {
                let fieldChooserItem = args.itemData;
                var field = fieldChooserItem.data;
                if (field.isDataFieldNode()) {
                    args.component.selectItem(args.itemData);
                }
            },
            onItemSelectionChanged: (args) => {
                let fieldChooserItem = args.itemData;
                var field = fieldChooserItem.data;
                commonSelectedFieldName = field && field.dataMember();
                if (!this.selectedField() || (this.selectedField().dataMember() !== field.dataMember())) {
                    this.selectedField(field);
                }
            },
            virtualModeEnabled: true,
            onInitialized: (e) => this.treeViewInstanceResolver.resolve(e.component)
        };
    }
}
exports.FieldChooserController = FieldChooserController;
ko.components.register('dx-field-chooser', {
    viewModel: {
        createViewModel: function (params) {
            return new FieldChooserController(params);
        }
    },
    template: { element: 'dx-field-chooser-slider' }
});


/***/ }),

/***/ 65590:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(27197);
__webpack_require__(46421);
__exportStar(__webpack_require__(50999), exports);


/***/ }),

/***/ 78224:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Color = void 0;
const color_1 = __webpack_require__(43150);
const ko = __webpack_require__(71032);
const _appearance_settings_provider_1 = __webpack_require__(55425);
class Color {
    constructor(colorValue) {
        let a = (colorValue >> 0x18) & 0xff, r = (colorValue >> 0x10) & 0xff, g = (colorValue >> 0x8) & 0xff, b = colorValue & 0xff;
        this._dxColor = new color_1.default(this._toRgbaString(r, g, b, a / 255));
    }
    static fromArgb(alpha, red, green, blue) {
        return new Color(Color.toNumber(alpha, red, green, blue));
    }
    static fromRgbaString(rgbaColor) {
        return Color.fromDxColor(new color_1.default(rgbaColor));
    }
    static fromJSON(jsonValue) {
        return new Color(parseInt(jsonValue, 10));
    }
    static fromAppearance(appearanceType) {
        var color = new Color(0);
        color._dxColor = new color_1.default(_appearance_settings_provider_1.appearanceSettingsProvider.backAndGradientColorGroupsToBackColor(appearanceType));
        return color;
    }
    static fromDxColor(dxColor) {
        var color = new Color(0);
        color._dxColor = dxColor;
        return color;
    }
    static toNumber(alpha, red, green, blue) {
        return ((((alpha * 255 << 0x18) | (red << 0x10) | (green << 0x8)) | blue)) & 0xffffffff;
    }
    static toJSON(color) {
        return Color.toNumber(color.A, color.R, color.G, color.B);
    }
    static contrastColor(baseColor) {
        var luminance = 1 - (0.299 * baseColor.R + 0.587 * baseColor.G + 0.114 * baseColor.B) / 255;
        var result = luminance < 0.5 ? 0 : 255;
        return Color.fromArgb(1, result, result, result);
    }
    static _colorFromModel(value) {
        return ko.observable(value ? Color.fromJSON(value) : null);
    }
    static _colorToModel(value) {
        return value ? Color.toJSON(value) : null;
    }
    toNumber() {
        return Color.toNumber(this.A, this.R, this.G, this.B);
    }
    static toHex(colorValue) {
        return new Color(colorValue).toHex();
    }
    static equals(color1, color2) {
        return (!color1 && !color2) || (color1 && color2 && color1.toNumber() === color2.toNumber());
    }
    get A() { return this._dxColor.a; }
    get R() { return this._dxColor.r; }
    get G() { return this._dxColor.g; }
    get B() { return this._dxColor.b; }
    get css() { return this._toRgbaString(this.R, this.G, this.B, this.A); }
    blend(blendColor, opacity) {
        return this._dxColor.blend(blendColor._dxColor, opacity);
    }
    toHex() {
        return this._dxColor.toHex();
    }
    _toRgbaString(r, g, b, a) {
        return 'rgba(' + [r, g, b, a].join(',') + ')';
    }
}
exports.Color = Color;


/***/ }),

/***/ 52817:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DimensionDefinition = void 0;
const serializable_model_1 = __webpack_require__(29591);
const _color_scheme_entry_1 = __webpack_require__(34881);
class DimensionDefinition extends serializable_model_1.SerializableModel {
    constructor(model, serializer, info) {
        super(model, serializer, _color_scheme_entry_1.definitionInfo);
    }
    getInfo() {
        return _color_scheme_entry_1.definitionInfo;
    }
}
exports.DimensionDefinition = DimensionDefinition;


/***/ }),

/***/ 938:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColorSchemeDefinition = void 0;
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
class ColorSchemeDefinition {
    constructor(dataSource, dataMember, dimensionDefinitions, colorByMeasures = false, componentName = '', name = '') {
        this.dataSource = dataSource;
        this.dataMember = dataMember;
        this.dimensionDefinitions = dimensionDefinitions;
        this.colorByMeasures = colorByMeasures;
        this.componentName = componentName;
        this.name = name;
        this.dataItems = ko.computed(() => {
            return this.dimensionDefinitions.map(definition => {
                return  false ? 0 : definition.dataMember();
            }).concat(this.colorByMeasures ? [_default_1.getLocalizationById('DashboardWebStringId.Colorization.MeasureNames')] : []);
        });
        this.typeText = ko.computed(() => {
            return !this.componentName ? _default_1.getLocalizationById('DashboardWebStringId.Coloring.Global') : (_default_1.getLocalizationById('DashboardWebStringId.Coloring.Local') + '(' + this.name + ')');
        });
        this.dataSourceText = ko.computed(() => {
            return this.dataMember || this.dataSource;
        });
        this.key = ko.computed(() => {
            return [this.componentName, this.dataMember, this.dataSource].concat(this.dimensionDefinitions.map(value => value.dataMember() + '(' + value.dateTimeGroupInterval() + ')').sort()).concat(this.colorByMeasures ? [_default_1.getLocalizationById('DashboardWebStringId.Colorization.MeasureNames')] : []).join('|');
        });
    }
    equals(definition) {
        return definition.key() === this.key();
    }
    _getDataSourceText(dataSourceName) {
        return this.dataMember || dataSourceName || this.dataSource;
    }
}
exports.ColorSchemeDefinition = ColorSchemeDefinition;


/***/ }),

/***/ 68800:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AutoColorSchemeEntry = exports.ColorSchemeEntry = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const serializable_model_1 = __webpack_require__(29591);
const color_scheme_definition_1 = __webpack_require__(938);
const dimension_key_1 = __webpack_require__(74425);
const measure_definition_1 = __webpack_require__(59958);
const _color_scheme_entry_1 = __webpack_require__(34881);
class ColorSchemeEntry extends serializable_model_1.TypedSerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer(), itemComponentName = '', name = '') {
        super(modelJson, serializer, _color_scheme_entry_1.colorSchemeEntrySerializationInfo);
        this.itemComponentName = itemComponentName;
        this.name = name;
        this.measureKeys = ko.observableArray();
        this.dimensionKeys = ko.observableArray();
        this.measureKeys = analytics_utils_1.deserializeArray(modelJson.MeasureKey, (item) => new measure_definition_1.MeasureDefinition(item, serializer));
        this.dimensionKeys = analytics_utils_1.deserializeArray(modelJson.DimensionKeys, (item) => new dimension_key_1.DimensionKey(item, serializer));
        this.displayText = ko.computed(() => {
            return this.dimensionKeys()
                .map(key => key.value.value())
                .concat(this.measureKeys().map(key => key.displayText()))
                .join(' | ');
        });
        this.colorText = ko.computed(() => {
            var result = '';
            if (!this.custom) {
                result = _default_1.getLocalizationById('DashboardStringId.ColorAutoAssigned');
            }
            else {
                if (this.paletteIndex() !== null)
                    result = _default_1.getLocalizationById('DashboardStringId.ColorPaletteIndex') + this.paletteIndex();
                else if (!!this.color()) {
                    result = _default_1.getLocalizationById('DashboardWebStringId.ColorScheme.Color') + ' [A=' + (this.color().A * 255).toFixed(0) + ', R=' + this.color().R + ', G=' + this.color().G + ', B=' + this.color().B + ']';
                }
            }
            return result;
        });
        this.componentName = ko.computed(() => {
            return this.displayText() + this.dataSource() + this.dataMember();
        });
    }
    get custom() {
        return true;
    }
    get definition() {
        if (!this._definition) {
            this._definition = new color_scheme_definition_1.ColorSchemeDefinition(this.dataSource(), this.dataMember(), this.dimensionKeys().map(key => { return key.definition; }), !!this.measureKeys().length, this.itemComponentName, this.name);
        }
        return this._definition;
    }
    getInfo() {
        return _color_scheme_entry_1.colorSchemeEntrySerializationInfo;
    }
    clone() {
        var clonedEntry = new ColorSchemeEntry();
        clonedEntry.itemComponentName = this.itemComponentName;
        clonedEntry.name = this.name;
        clonedEntry.dataMember(this.dataMember());
        clonedEntry.dataSource(this.dataSource());
        clonedEntry.dimensionKeys(this.dimensionKeys());
        clonedEntry.measureKeys(this.measureKeys());
        clonedEntry.paletteIndex(this.paletteIndex());
        clonedEntry.color(this.color());
        return clonedEntry;
    }
    equals(entry) {
        if (this.dimensionKeys().length !== entry.dimensionKeys().length)
            return false;
        for (var i = 0; i < this.dimensionKeys().length; i++) {
            if (this.dimensionKeys()[i].value.value() !== entry.dimensionKeys()[i].value.value()) {
                return false;
            }
        }
        if (this.definition.colorByMeasures) {
            if (this.measureKeys().length !== entry.measureKeys().length)
                return false;
            for (var i = 0; i < this.measureKeys().length; i++) {
                if (this.measureKeys()[i].dataMember() !== entry.measureKeys()[i].dataMember() || this.measureKeys()[i].summaryType() !== entry.measureKeys()[i].summaryType())
                    return false;
            }
        }
        return true;
    }
    getUniqueNamePrefix() {
        return super._getUniqueNamePrefix();
    }
    _getDefaultItemType() {
        return 'Entry';
    }
}
exports.ColorSchemeEntry = ColorSchemeEntry;
class AutoColorSchemeEntry extends ColorSchemeEntry {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer(), componentName, name) {
        super(modelJson, serializer, componentName, name);
    }
    get custom() {
        return false;
    }
}
exports.AutoColorSchemeEntry = AutoColorSchemeEntry;


/***/ }),

/***/ 74425:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DimensionKey = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _format_helper_1 = __webpack_require__(27893);
const _localizer_1 = __webpack_require__(88084);
const serializable_model_1 = __webpack_require__(29591);
const _color_scheme_entry_1 = __webpack_require__(34881);
class DimensionKey extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer, _color_scheme_entry_1.dimensionKeySerializationInfo);
        this.displayText = ko.pureComputed(() => {
            var displayText = null;
            if (!!this.value.value()) {
                if (this.value.type() === 'System.DateTime') {
                    var groupInterval = this.definition.dateTimeGroupInterval();
                    displayText = _format_helper_1.DashboardFormatHelper.format(new Date(this.value.value()), { dateType: 'short', format: groupInterval });
                }
                else {
                    displayText = this.value.value().toString();
                }
            }
            var predefinedDisplayText = _localizer_1.localizer.getPredefinedString(displayText);
            if (predefinedDisplayText) {
                return predefinedDisplayText;
            }
            else {
                return displayText;
            }
        });
    }
    getInfo() {
        return _color_scheme_entry_1.dimensionKeySerializationInfo;
    }
}
exports.DimensionKey = DimensionKey;


/***/ }),

/***/ 59958:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MeasureDefinition = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const string_1 = __webpack_require__(36306);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _measure_1 = __webpack_require__(72150);
const serializable_model_1 = __webpack_require__(29591);
const _color_scheme_entry_1 = __webpack_require__(34881);
const _dimension_definition_1 = __webpack_require__(52817);
class MeasureDefinition extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer, _color_scheme_entry_1.measureKeySerializationInfo);
        this.definitions = analytics_utils_1.deserializeArray(modelJson.Definitions, (item) => new _dimension_definition_1.DimensionDefinition(item, serializer));
        this.displayText = ko.computed(() => {
            if (!!this.expression())
                return _default_1.getLocalizationById('DashboardWebStringId.Calculations.Expression');
            let prefix = !!this.calculation.calculation() && _default_1.getLocalizationById(this.calculation.calculation().name);
            let postfix = ' (' + _default_1.getLocalizationById(_measure_1.summaryTypeDict[this.summaryType() || 'Sum']) + ')';
            let name = ((prefix && (prefix + ' ')) || '') + this.dataMember() + postfix;
            if (this.filterString())
                return MeasureDefinition._constructFilteredName(name);
            return name;
        });
    }
    static _constructFilteredName(baseName) {
        return string_1.format(_default_1.getLocalizationById('DashboardStringId.MeasureFilterCaptionFormatString'), baseName);
    }
    getInfo() {
        return _color_scheme_entry_1.measureKeySerializationInfo;
    }
    get _id() {
        let serializer = new analytics_utils_1.ModelSerializer({ useRefs: false });
        return JSON.stringify(serializer.serialize(this, _color_scheme_entry_1.measureKeySerializationInfo));
    }
}
exports.MeasureDefinition = MeasureDefinition;


/***/ }),

/***/ 34881:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dimensionKeySerializationInfo = exports.colorShemeValue = exports.definition = exports.valueInfo = exports.dimensionValue = exports.colorShemetype = exports.colorSchemeEntrySerializationInfo = exports.measureKey = exports.dimensionKeys = exports.measureKeySerializationInfo = exports.definitionsInMeasureDefinition = exports.definitionInfo = exports.dimensionInfoDateTimeGroupInterval = exports.colorSchemeSummaryType = exports.paletteIndex = exports.colorSchemeColor = exports.colorSchemeDataMember = exports.colorSchemeDataSource = void 0;
const color_1 = __webpack_require__(78224);
const _measure_1 = __webpack_require__(72150);
const _base_metadata_1 = __webpack_require__(17916);
exports.colorSchemeDataSource = { propertyName: 'dataSource', modelName: '@DataSource', displayName: 'DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource', defaultVal: '', simpleFormAdapterItem: 'textBoxEditor' };
exports.colorSchemeDataMember = { propertyName: 'dataMember', modelName: '@DataMember', displayName: 'DashboardStringId.DataSourceDataMember', defaultVal: '', simpleFormAdapterItem: 'textBoxEditor' };
exports.colorSchemeColor = { propertyName: 'color', modelName: '@Color', displayName: 'DashboardStringId.DescriptionItemColor', defaultVal: null, simpleFormAdapterItem: 'textBoxEditor', from: color_1.Color._colorFromModel, toJsonObject: color_1.Color._colorToModel };
exports.paletteIndex = { propertyName: 'paletteIndex', modelName: '@PaletteIndex', displayName: 'DashboardStringId.ColorPaletteIndex', defaultVal: null, simpleFormAdapterItem: 'numberBoxEditor' };
exports.colorSchemeSummaryType = { propertyName: 'summaryType', modelName: '@SummaryType', displayName: 'DashboardWebStringId.SummaryType', defaultVal: 'Sum', simpleFormAdapterItem: 'textBoxEditor' };
exports.dimensionInfoDateTimeGroupInterval = { propertyName: 'dateTimeGroupInterval', modelName: '@DateTimeGroupInterval', displayName: 'DashboardWebStringId.Colorization.GroupInterval', defaultVal: 'Year', simpleFormAdapterItem: 'textBoxEditor' };
exports.definitionInfo = [exports.colorSchemeDataMember, exports.dimensionInfoDateTimeGroupInterval];
exports.definitionsInMeasureDefinition = { propertyName: 'definitions', modelName: 'Definitions', array: true };
exports.measureKeySerializationInfo = [exports.colorSchemeDataMember, exports.colorSchemeSummaryType, _measure_1.calculation, _measure_1.windowDefinition, _measure_1.expression, _measure_1.measureFilterString, exports.definitionsInMeasureDefinition];
exports.dimensionKeys = { propertyName: 'dimensionKeys', modelName: 'DimensionKeys', displayName: 'DashboardStringId.DescriptionDimensions', array: true };
exports.measureKey = { propertyName: 'measureKeys', modelName: 'MeasureKey', displayName: 'DashboardStringId.DescriptionMeasures', array: true, info: exports.measureKeySerializationInfo };
exports.colorSchemeEntrySerializationInfo = [_base_metadata_1.itemType, exports.colorSchemeDataSource, exports.colorSchemeDataMember, exports.colorSchemeColor, exports.paletteIndex, exports.dimensionKeys, exports.measureKey];
exports.colorShemetype = { propertyName: 'type', modelName: '@Type', displayName: 'DashboardWebStringId.Type', simpleFormAdapterItem: 'textBoxEditor' };
exports.dimensionValue = { propertyName: 'value', modelName: '@Value', displayName: 'DashboardStringId.ValueCaption', simpleFormAdapterItem: 'textBoxEditor' };
exports.valueInfo = [exports.colorShemetype, exports.dimensionValue];
exports.definition = { propertyName: 'definition', modelName: 'Definition', info: exports.definitionInfo, defaultVal: '' };
exports.colorShemeValue = { propertyName: 'value', modelName: 'Value', displayName: 'DashboardStringId.ValueCaption', info: exports.valueInfo };
exports.dimensionKeySerializationInfo = [exports.definition, exports.colorShemeValue];


/***/ }),

/***/ 93629:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCustomPropertiesSerializationInfo = exports._getCustomPropertiesSerializationInfoCore = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const custom_properties_1 = __webpack_require__(83163);
const custom_properties_metadata_1 = __webpack_require__(16318);
function _convertCustomPropertiesMetadata(customPropertiesMeta) {
    return (customPropertiesMeta || [])
        .map(d => {
        var serializationInfo = {
            propertyName: d.propertyName,
            modelName: d.propertyName,
            category: _base_metadata_1.PropertyCategory.ViewModel,
            defaultVal: d.defaultValue,
        };
        if (d.valueType === 'boolean') {
            serializationInfo.from = _base_metadata_1.parseBool;
        }
        if (d.valueType === 'number') {
            serializationInfo.from = _base_metadata_1.floatFromModel;
        }
        return serializationInfo;
    });
}
function _getCustomPropertiesSerializationInfoCore(customPropertiesMeta) {
    return {
        propertyName: 'customProperties',
        modelName: 'CustomProperties',
        category: _base_metadata_1.PropertyCategory.ViewModel,
        type: custom_properties_1.CustomProperties,
        info: _convertCustomPropertiesMetadata(customPropertiesMeta)
    };
}
exports._getCustomPropertiesSerializationInfoCore = _getCustomPropertiesSerializationInfoCore;
function getCustomPropertiesSerializationInfo(owner) {
    const filteredCustomProperties = custom_properties_metadata_1._customPropertiesMeta
        .filter(metadata => owner instanceof metadata.ownerType);
    return _getCustomPropertiesSerializationInfoCore(filteredCustomProperties);
}
exports.getCustomPropertiesSerializationInfo = getCustomPropertiesSerializationInfo;


/***/ }),

/***/ 50448:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateCustomPropertyValueType = exports.validateCustomPropertyName = void 0;
const _helper_classes_1 = __webpack_require__(8384);
function validateCustomPropertyName(name) {
    if (!_helper_classes_1.isComponentNameValid(name))
        throw new Error(`The property name '${name}' is invalid. It should contain only letters, numbers, and the underscore symbol and cannot start with a number.`);
}
exports.validateCustomPropertyName = validateCustomPropertyName;
function validateCustomPropertyValueType(propertyName, value) {
    if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && value !== null && value !== undefined)
        throw new Error(`The '${propertyName}' custom property value has incorrect type.`);
}
exports.validateCustomPropertyValueType = validateCustomPropertyValueType;


/***/ }),

/***/ 16318:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._customMetadataContainsProperty = exports._customPropertiesMeta = exports._clearCustomPropertiesMeta = exports.registerCustomProperty = void 0;
const _custom_property_validation_1 = __webpack_require__(50448);
function registerCustomProperty(meta) {
    if (exports._customPropertiesMeta.filter(existingMeta => existingMeta.ownerType === meta.ownerType && existingMeta.propertyName === meta.propertyName)[0]) {
        throw new Error('Duplicated CustomPropertiesMeta');
    }
    _custom_property_validation_1.validateCustomPropertyName(meta.propertyName);
    exports._customPropertiesMeta.push(meta);
}
exports.registerCustomProperty = registerCustomProperty;
function _clearCustomPropertiesMeta() {
    exports._customPropertiesMeta = [];
}
exports._clearCustomPropertiesMeta = _clearCustomPropertiesMeta;
exports._customPropertiesMeta = [];
function _customMetadataContainsProperty(propertyName) {
    return !!(exports._customPropertiesMeta.filter(c => c.propertyName === propertyName)[0]);
}
exports._customMetadataContainsProperty = _customMetadataContainsProperty;


/***/ }),

/***/ 83163:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomProperties = void 0;
const serializable_model_1 = __webpack_require__(29591);
const _custom_property_validation_1 = __webpack_require__(50448);
class CustomProperties extends serializable_model_1.SerializableModel {
    constructor(json, serializer, info) {
        super(json, serializer, info);
        info.forEach(propertyInfo => {
            this[propertyInfo.propertyName].subscribe(value => {
                propertyInfo.alwaysSerialize = value !== null && value !== undefined;
            });
        });
        this.getInfo = () => info;
    }
    _isKnownProperty(propertyName) {
        return !!this.getInfo().filter(i => i.propertyName === propertyName)[0];
    }
    getValue(propertyName) {
        if (this._isKnownProperty(propertyName)) {
            return this[propertyName].peek();
        }
        else {
            return this._model[propertyName];
        }
    }
    setValue(propertyName, propertyValue) {
        _custom_property_validation_1.validateCustomPropertyName(propertyName);
        _custom_property_validation_1.validateCustomPropertyValueType(propertyName, propertyValue);
        if (this._isKnownProperty(propertyName)) {
            this[propertyName](propertyValue);
        }
        else {
            this._model[propertyName] = propertyValue;
        }
    }
}
exports.CustomProperties = CustomProperties;


/***/ }),

/***/ 51372:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ItemState = exports.RangeFilterState = exports.RangeFilterSelection = exports.DashboardState = void 0;
class DashboardState {
}
exports.DashboardState = DashboardState;
class RangeFilterSelection {
}
exports.RangeFilterSelection = RangeFilterSelection;
class RangeFilterState {
}
exports.RangeFilterState = RangeFilterState;
class ItemState {
}
exports.ItemState = ItemState;


/***/ }),

/***/ 15306:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Dashboard = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const color_scheme_entry_1 = __webpack_require__(68800);
const _custom_properties_utils_1 = __webpack_require__(93629);
const dashboard_state_1 = __webpack_require__(51372);
const ef_data_source_1 = __webpack_require__(69468);
const federation_data_source_1 = __webpack_require__(71010);
const mongodb_data_source_1 = __webpack_require__(62410);
const sql_data_source_1 = __webpack_require__(66265);
const _data_source_factory_base_1 = __webpack_require__(4620);
const _array_utils_1 = __webpack_require__(60618);
const _dashboard_component_name_generator_1 = __webpack_require__(9684);
const _dashboard_item_helper_1 = __webpack_require__(57094);
const _date_utils_1 = __webpack_require__(76900);
const _helper_classes_1 = __webpack_require__(8384);
const _knockout_utils_1 = __webpack_require__(4437);
const _undo_engine_helper_1 = __webpack_require__(2908);
const data_dashboard_item_1 = __webpack_require__(70355);
const group_item_1 = __webpack_require__(86961);
const tab_container_item_1 = __webpack_require__(99290);
const _dashboard_item_factory_1 = __webpack_require__(61650);
const dashboard_layout_group_1 = __webpack_require__(97805);
const dashboard_layout_item_1 = __webpack_require__(37021);
const _dashboard_layout_creator_1 = __webpack_require__(5279);
const _layout_utils_1 = __webpack_require__(22335);
const _dashboard_1 = __webpack_require__(30448);
const parameter_1 = __webpack_require__(12052);
const serializable_model_1 = __webpack_require__(29591);
class Dashboard extends serializable_model_1.SerializableModel {
    constructor(dashboardJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dashboardJSON, serializer);
        this.dashboardJSON = dashboardJSON;
        this._disposables = [];
        this.dataSources = analytics_utils_1.deserializeArray(dashboardJSON.DataSources, (item) => Dashboard._createDataSource(item, serializer));
        this.groups = analytics_utils_1.deserializeArray(dashboardJSON.Groups, (group) => _dashboard_item_factory_1.createDashboardItem(group, serializer));
        this.items = analytics_utils_1.deserializeArray(dashboardJSON.Items, (item) => _dashboard_item_factory_1.createDashboardItem(item, serializer));
        this._tabPages = ko.observableArray();
        this._componentNameGenerator = new _dashboard_component_name_generator_1.DashboardUniqueNameGenerator('componentName', 1, this.dataSources, this.items, this.groups, this._tabPages);
        this._allItems = ko.pureComputed(() => [...this.items(), ...this.groups(), ...this._tabPages()]);
        _knockout_utils_1.subscribeArrayChange(this.dataSources, {
            added: (newDataSource) => {
                if (newDataSource instanceof federation_data_source_1.FederationDataSource) {
                    newDataSource.context()
                        .forEach(contextItem => {
                        var dataSourceToAdd = contextItem.source();
                        if (dataSourceToAdd) {
                            if (!this.dataSources().includes(dataSourceToAdd)) {
                                if (!dataSourceToAdd.componentName() || this.dataSources().find(ds => ds.componentName() === dataSourceToAdd.componentName()) === undefined)
                                    this.dataSources.push(dataSourceToAdd);
                                else {
                                }
                            }
                            newDataSource.sources()
                                .filter(source => source.dataSource() === contextItem.id())
                                .forEach(source => source.dataSource(dataSourceToAdd.componentName()));
                        }
                    });
                    newDataSource.context.removeAll();
                }
                if (!newDataSource.name()) {
                    newDataSource.name(_helper_classes_1.NameGenerator.generateName(_default_1.getLocalizationById('DashboardStringId.DefaultDataSourceName') + ' ', ko.unwrap(this.dataSources), 'name', 1));
                }
            }
        });
        this._disposables.push(ko.computed(() => {
            var newTabPagesList = this.items()
                .filter(item => item instanceof tab_container_item_1.TabContainerItem)
                .reduce((acc, tabPage) => acc.concat(tabPage.tabPages()), []);
            this._tabPages()
                .filter(removedTabPage => newTabPagesList.indexOf(removedTabPage) === -1)
                .forEach(removedTabPage => this._tabPages.remove(removedTabPage));
            newTabPagesList
                .filter(newTabPage => this._tabPages().indexOf(newTabPage) === -1)
                .forEach(newTabPage => this._tabPages.push(newTabPage));
        }));
        this._disposables.push(this._componentNameGenerator);
        this.parameters = ko.observableArray();
        this.parameters(analytics_utils_1.deserializeArray(dashboardJSON.Parameters, (item) => new parameter_1.Parameter(item, serializer))());
        this.colorScheme = analytics_utils_1.deserializeArray(dashboardJSON.ColorScheme, (item) => new color_scheme_entry_1.ColorSchemeEntry(item, serializer));
        this._disposables.push(_knockout_utils_1.subscribeArrayChange(this.dataSources, {
            deleted: this._processDeleteDataSource.bind(this)
        }));
        this._queryParameters = ko.computed(() => {
            return parameter_1._getParametersQuery(this.parameters());
        });
        this._dataDashboardItems = ko.computed(() => {
            return this.items().filter(item => item instanceof data_dashboard_item_1.DataDashboardItem);
        });
        this._masterFilterItems = ko.computed(() => {
            return this._dataDashboardItems()
                .filter(item => item._isMasterFilter() && this._interactivityGroupPathToRoot(item).every(containerItem => containerItem.interactivityOptions.isMasterFilter()));
        });
        this._disposables.push(ko.computed(() => {
            this._dataDashboardItems().forEach(detailItem => {
                var masterItems = this._dataDashboardItems()
                    .filter(item => item !== detailItem && item._isMasterFilter())
                    .filter(item => {
                    if (item.isMasterFilterCrossDataSource())
                        return true;
                    return item.dataSource() == detailItem.dataSource() && item.dataMember() == detailItem.dataMember();
                })
                    .filter(item => {
                    let masterGroups = this._interactivityGroupPathToRoot(item).reverse();
                    let detailGroups = this._interactivityGroupPathToRoot(detailItem).reverse();
                    while (masterGroups.length && detailGroups.length && masterGroups[0] === detailGroups[0]) {
                        masterGroups.shift();
                        detailGroups.shift();
                    }
                    if (masterGroups.some(masterGroup => !masterGroup.interactivityOptions.isMasterFilter())) {
                        return false;
                    }
                    if (detailGroups.length === 0) {
                        return !detailItem._isIgnoreMasterFilter();
                    }
                    else {
                        return !detailGroups[0].interactivityOptions.ignoreMasterFilters();
                    }
                });
                if (!_array_utils_1.arrayEquals(detailItem._masterFilterItems.peek(), masterItems)) {
                    detailItem._masterFilterItems(masterItems);
                }
            });
        }));
        this._state = ko.computed({
            read: () => {
                var state = new dashboard_state_1.DashboardState();
                if (this.parameters().length > 0) {
                    var parametersState = {};
                    this.parameters().forEach(param => {
                        parametersState[param.name()] = _date_utils_1.toStringArray(param._actualValue());
                    });
                    if (Object.keys(parametersState).length) {
                        state.Parameters = parametersState;
                    }
                }
                if (this.items().length > 0) {
                    var itemsState = {};
                    this.items().forEach(item => {
                        var itemState = item._state();
                        if (itemState && Object.keys(itemState).length) {
                            itemsState[item.componentName()] = itemState;
                        }
                    });
                    if (Object.keys(itemsState).length) {
                        state.Items = itemsState;
                    }
                }
                return state;
            },
            write: (dashboardState) => {
                var obsoleteDashboardState = dashboardState;
                var parametersState = dashboardState.Parameters || obsoleteDashboardState.parameters;
                if (parametersState) {
                    this.parameters().forEach(parameter => {
                        if (parametersState[parameter.name()] !== undefined) {
                            var parameterValue = parametersState[parameter.name()];
                            if (Array.isArray(parameterValue)) {
                                parameterValue = parameterValue.map(_date_utils_1.tryConvertToDateTime);
                            }
                            else {
                                parameterValue = _date_utils_1.tryConvertToDateTime(parameterValue);
                            }
                            parameter._value(parameterValue);
                        }
                    });
                }
                var itemsState = dashboardState.Items || obsoleteDashboardState.items;
                if (itemsState) {
                    Object.keys(itemsState).forEach((name) => {
                        var dashboardItemModel = this.findItem(name);
                        if (dashboardItemModel) {
                            dashboardItemModel._setState(itemsState[name]);
                        }
                    });
                }
            }
        });
        var item = new dashboard_layout_group_1.DashboardLayoutRootGroup(this, dashboardJSON.LayoutTree || {}, serializer);
        this.layout(item);
        this._colorableItems = ko.pureComputed(() => this._dataDashboardItems().filter(dataDashboardItem => dataDashboardItem._isGloballyColored));
    }
    static _createDataSource(dataSourceJSON, serializer) {
        var itemTypeName = dataSourceJSON['@ItemType'];
        var itemType = Dashboard._dataSourceTypesMap[itemTypeName];
        return new itemType(dataSourceJSON, serializer);
    }
    get stateString() {
        var state = this._state();
        return Object.keys(state).length ? JSON.stringify(state) : '';
    }
    set stateString(stateVal) {
        if (!stateVal)
            return;
        this._state(JSON.parse(stateVal));
    }
    dispose() {
        this._disposables.map(disposable => disposable.dispose());
    }
    getInfo() {
        return _dashboard_1.dashboardSerializationsInfo.concat(_custom_properties_utils_1.getCustomPropertiesSerializationInfo(this));
    }
    getJSON() {
        return new analytics_utils_1.ModelSerializer({ useRefs: false, serializeDate: _date_utils_1.serializeDate }).serialize(this, this.getInfo());
    }
    findItem(itemId) {
        var item = this.items().filter(filterItem => filterItem.componentName() === itemId)[0];
        if (!item) {
            item = this.groups().filter(filterItem => filterItem.componentName() === itemId)[0];
        }
        if (!item) {
            item = this._tabPages().filter(filterItem => filterItem.componentName() === itemId)[0];
        }
        return item;
    }
    rebuildLayout(clientWidth = 1, clientHeight = 1) {
        new _dashboard_layout_creator_1.DashboardLayoutCreator(clientWidth, clientHeight, this).rebuildLayout();
    }
    _getDisplayDashboardItem(tabPage) {
        if (!tabPage || !tabPage.showItemAsTabPage())
            return tabPage;
        let itemsOnTabPage = this.items().concat(this.groups()).filter(item => item.parentContainer() === tabPage.componentName());
        return itemsOnTabPage.length === 1 && !(itemsOnTabPage[0] instanceof group_item_1.GroupItem) ? itemsOnTabPage[0] : tabPage;
    }
    _changeItem(oldItem, newItem) {
        var dashboardLayoutItem = this.layout().findLayoutItem(oldItem);
        this.items.replace(oldItem, newItem);
        if (dashboardLayoutItem) {
            dashboardLayoutItem.item = newItem;
        }
    }
    _duplicateItem(item) {
        var dashboardLayoutItem = this.layout().findLayoutItem(item);
        var serializer = new analytics_utils_1.ModelSerializer({ useRefs: false });
        var itemJSON = serializer.serialize(item);
        var itemCopy = _dashboard_item_factory_1.createDashboardItem(itemJSON, serializer);
        itemCopy.componentName(undefined);
        this.items.push(itemCopy);
        var newDashboardLayoutItem = new dashboard_layout_item_1.DashboardLayoutItem();
        newDashboardLayoutItem.item = itemCopy;
        newDashboardLayoutItem.weight(dashboardLayoutItem.weight());
        dashboardLayoutItem.insert(newDashboardLayoutItem, 'left');
    }
    _createDashboardLayoutItem(modelItemJson) {
        if (!!modelItemJson) {
            var newItemModel = _dashboard_item_factory_1.createDashboardItem(modelItemJson);
            newItemModel.name(_helper_classes_1.NameGenerator.generateName(_dashboard_item_helper_1.getItemTitle(newItemModel) + ' ', this.items().concat(this.groups()), 'name', 1));
            if (this.dataSources().length > 0 && newItemModel instanceof data_dashboard_item_1.DataDashboardItem) {
                newItemModel.dataSource(this.dataSources()[0].componentName());
                if (this.dataSources()[0] instanceof sql_data_source_1.SqlDataSource) {
                    var sqlDataSource = (this.dataSources()[0]);
                    sqlDataSource.queries().length > 0 && newItemModel.dataMember(sqlDataSource.queries()[0].name());
                }
                if (this.dataSources()[0] instanceof ef_data_source_1.EFDataSource) {
                    var efDataSource = (this.dataSources()[0]);
                    if (!efDataSource._tables().length) {
                        var subscription = efDataSource._tables.subscribe((tables) => {
                            let dataDashboardItem = newItemModel;
                            if (dataDashboardItem.dataSource() === efDataSource.componentName() && !dataDashboardItem.dataMember.peek()) {
                                newItemModel.dataMember(tables[0].dataMember());
                            }
                            subscription.dispose();
                        });
                    }
                    else {
                        newItemModel.dataMember(efDataSource._tables()[0].dataMember());
                    }
                }
                if (this.dataSources()[0] instanceof federation_data_source_1.FederationDataSource) {
                    var feredationDataSource = (this.dataSources()[0]);
                    feredationDataSource.queries().length > 0 && newItemModel.dataMember(feredationDataSource.queries()[0].alias());
                }
                if (this.dataSources()[0] instanceof mongodb_data_source_1.MongoDBDataSource) {
                    let mongoDBDataSource = (this.dataSources()[0]);
                    mongoDBDataSource.queries().length > 0 && newItemModel.dataMember(mongoDBDataSource.queries()[0]._actualName());
                }
            }
            if (newItemModel instanceof group_item_1.GroupItem) {
                this.groups.push(newItemModel);
            }
            else {
                this.items.push(newItemModel);
            }
            return this._createDashboardLayoutNode(newItemModel);
        }
        return new dashboard_layout_group_1.DashboardLayoutGroup();
    }
    _createDashboardLayoutNode(dashboardItem) {
        var itemType = null;
        if (dashboardItem instanceof group_item_1.GroupItem) {
            itemType = 'LayoutGroup';
        }
        else if (dashboardItem instanceof tab_container_item_1.TabContainerItem) {
            itemType = 'LayoutTabContainer';
        }
        else {
            itemType = 'LayoutItem';
        }
        var newLayoutItemModel = _layout_utils_1.deserializeDashboardLayoutNode({ '@ItemType': itemType });
        newLayoutItemModel.item = dashboardItem;
        return newLayoutItemModel;
    }
    _findDataItem(itemId) {
        return this._dataDashboardItems().filter(item => item.componentName() == itemId)[0];
    }
    _interactivityGroupPathToRoot(dashboardItem) {
        let getParentContainerItem = (item) => {
            return (!!item.parentContainer() && this.findItem(item.parentContainer()) || undefined);
        };
        let parentContainers = [];
        let parentContainerItem = dashboardItem;
        do {
            parentContainerItem = getParentContainerItem(parentContainerItem);
            if (parentContainerItem) {
                parentContainers.push(parentContainerItem);
            }
        } while (parentContainerItem);
        return parentContainers;
    }
    _processDeleteDataSource(dataSource) {
        this._dataDashboardItems()
            .filter(item => item.dataSource() == dataSource.componentName())
            .forEach(item => item._clearBindings());
    }
}
Dashboard._dataSourceTypesMap = Object.assign({ 'FederationDataSource': federation_data_source_1.FederationDataSource }, _data_source_factory_base_1._baseDataSourceTypesMap);
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], Dashboard.prototype, "_changeItem", null);
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], Dashboard.prototype, "_duplicateItem", null);
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], Dashboard.prototype, "_processDeleteDataSource", null);
exports.Dashboard = Dashboard;


/***/ }),

/***/ 66637:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DimensionFilterValues = void 0;
class DimensionFilterValues {
    constructor(name = '') {
        this.Name = name;
        this.Truncated = false;
        this.Values = [];
    }
}
exports.DimensionFilterValues = DimensionFilterValues;


/***/ }),

/***/ 8661:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getSummaryExpression = exports.getDimensionExpression = void 0;
function getDimensionExpression(dataMember, gateTimeGroupInterval, textGroupInterval, fieldType) {
    let operand = `[${dataMember}]`;
    switch (fieldType) {
        case 'DateTime':
            switch (gateTimeGroupInterval) {
                case 'None':
                    return operand;
                case 'DayMonthYear':
                    return `GetDate(${operand})`;
                case 'Day':
                    return `GetDay(${operand})`;
                case 'DayOfWeek':
                    return `GetDayOfWeek(${operand})`;
                case 'DayOfYear':
                    return `GetDayOfYear(${operand})`;
                case 'DateHour':
                    return `GetDateHour(${operand})`;
                case 'DateHourMinute':
                    return `GetDateHourMinute(${operand})`;
                case 'DateHourMinuteSecond':
                    return `GetDateHourMinuteSecond(${operand})`;
                case 'Month':
                    return `GetMonth(${operand})`;
                case 'MonthYear':
                    return `GetDateMonthYear(${operand})`;
                case 'Quarter':
                    return `GetQuarter(${operand})`;
                case 'QuarterYear':
                    return `GetDateQuarterYear(${operand})`;
                case 'WeekOfMonth':
                    return `GetWeekOfMonth(${operand})`;
                case 'WeekOfYear':
                    return `GetWeekOfYear(${operand})`;
                case 'WeekYear':
                    return `GetDateWeekYear(${operand})`;
                case 'Year':
                    return `GetYear(${operand})`;
                case 'Hour':
                    return `GetHour(${operand})`;
                case 'Minute':
                    return `GetMinute(${operand})`;
                case 'Second':
                    return `GetSecond(${operand})`;
            }
        case 'Text':
            switch (textGroupInterval) {
                case 'Alphabetical':
                    return `Substring(${operand}, 0, 1)`;
            }
    }
    return operand;
}
exports.getDimensionExpression = getDimensionExpression;
function getSummaryExpression(dataMember, summaryType) {
    var operand = `[${dataMember}]`;
    switch (summaryType) {
        case 'Average':
            return `Avg(${operand})`;
        case 'Count':
            return `CountNotNull(${operand})`;
        case 'CountDistinct':
            return `CountDistinct(${operand})`;
        case 'Max':
            return `Max(${operand})`;
        case 'Median':
            return `Median(${operand})`;
        case 'Mode':
            return `Mode(${operand})`;
        case 'Min':
            return `Min(${operand})`;
        case 'StdDev':
            return `StdDev(${operand})`;
        case 'StdDevp':
            return `StdDevp(${operand})`;
        case 'Sum':
            return `Sum(${operand})`;
        case 'Var':
            return `Var(${operand})`;
        case 'Varp':
            return `Varp(${operand})`;
    }
    throw new Error(`Summary expression cannot be determined for the ${summaryType} summary type.`);
}
exports.getSummaryExpression = getSummaryExpression;


/***/ }),

/***/ 9237:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Calculation = exports._currentCalculationInfo = void 0;
const analytics_internal_1 = __webpack_require__(19745);
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const serializable_model_1 = __webpack_require__(29591);
const measure_calculation_1 = __webpack_require__(71849);
const _calculation_1 = __webpack_require__(23888);
let _currentCalculationInfo = (model) => {
    if (!model.calculationType)
        return [];
    return [{
            propertyName: 'calculation',
            modelName: model.calculationType() || 'FakeCalculationForModelSubscriber',
            from: (json, serializer) => { return new measure_calculation_1.calculationsTypesMap[model.calculationType()](json, serializer); },
            toJsonObject: (value, serializer, refs) => {
                var result = serializer.serialize(value, null, refs);
                if (analytics_internal_1.isEmptyObject(result)) {
                    return null;
                }
                return result;
            }
        }];
};
exports._currentCalculationInfo = _currentCalculationInfo;
class Calculation extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.calculationType = ko.observable();
        this.calculation = ko.observable();
        this.calculationType(Object.keys(measure_calculation_1.calculationsTypesMap).filter(mapItem => !!modelJson && modelJson[mapItem] !== undefined)[0]);
        if (!!this.calculationType()) {
            this.calculation(new (measure_calculation_1.calculationsTypesMap[this.calculationType()])((modelJson || {})[this.calculationType()]));
            delete this['_model'][this.calculationType()];
        }
        this.calculation.subscribe(calculation => {
            this.calculationType(Object.keys(measure_calculation_1.calculationsTypesMap).filter(mapItem => calculation instanceof measure_calculation_1.calculationsTypesMap[mapItem])[0]);
        });
    }
    getInfo() {
        return _calculation_1.calculationSerializationsInfo.concat(exports._currentCalculationInfo(this));
    }
    isEmpty() {
        return !this.calculation();
    }
}
exports.Calculation = Calculation;


/***/ }),

/***/ 37831:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DifferenceCalculation = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const measure_calculation_1 = __webpack_require__(71849);
const _difference_calculation_1 = __webpack_require__(19913);
class DifferenceCalculation extends measure_calculation_1.MeasureCalculation {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    static getLookupShiftExpression(target) {
        switch (target) {
            case 'Previous':
                return '-1';
            case 'Next':
                return '1';
            case 'First':
                return 'First()';
            case 'Last':
                return 'First()';
            default:
                throw new Error('Unsupported Target');
        }
    }
    get name() {
        return 'DashboardWebStringId.Calculations.DifferenceCalculation';
    }
    get lookupShiftExpression() {
        return DifferenceCalculation.getLookupShiftExpression(this.target());
    }
    getInfo() {
        return _difference_calculation_1.differenceCalculationSerializationsInfo;
    }
    _createInstance() {
        return new DifferenceCalculation();
    }
    _getExpression(argument) {
        switch (this.differenceType()) {
            case 'Absolute':
                return `${argument} - Lookup(${argument}, ${this.lookupShiftExpression})`;
            case 'Percentage':
                return `ToDouble(${argument} - Lookup(${argument}, ${this.lookupShiftExpression})) / Lookup(${argument}, ${this.lookupShiftExpression})`;
            default:
                throw new Error('Unexpected DifferenceType');
        }
    }
}
exports.DifferenceCalculation = DifferenceCalculation;
measure_calculation_1.calculationsTypesMap['DifferenceCalculation'] = DifferenceCalculation;


/***/ }),

/***/ 71849:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.calculationsTypesMap = exports.MeasureCalculation = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _measure_calculation_1 = __webpack_require__(88978);
class MeasureCalculation extends serializable_model_1.SerializableModel {
    static _getWindowAggrFunction(summaryType) {
        switch (summaryType) {
            case 'Sum':
                return 'WindowSum';
            case 'Average':
                return 'WindowAvg';
            case 'Count':
                return 'WindowCount';
            case 'CountDistinct':
                return 'WindowCountDistinct';
            case 'Max':
                return 'WindowMax';
            case 'Median':
                return 'WindowMedian';
            case 'Mode':
                return 'WindowMode';
            case 'Min':
                return 'WindowMin';
            case 'StdDev':
                return 'WindowStdDev';
            case 'StdDevp':
                return 'WindowStdDevp';
            case 'Var':
                return 'WindowVar';
            case 'Varp':
                return 'WindowVarp';
            default:
                throw new Error('WindowAggrFunction: Unsupported SummaryType');
        }
    }
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson || {}, serializer);
    }
    getInfo() {
        return _measure_calculation_1.measureCalculationSerializationsInfo;
    }
    _getAggrName(summaryType) {
        return MeasureCalculation._getWindowAggrFunction(summaryType);
    }
}
exports.MeasureCalculation = MeasureCalculation;
exports.calculationsTypesMap = {};


/***/ }),

/***/ 23888:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.calculationSerializationsInfo = void 0;
exports.calculationSerializationsInfo = [];


/***/ }),

/***/ 19913:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.differenceCalculationSerializationsInfo = exports.differenceType = exports.target = void 0;
const _measure_calculation_1 = __webpack_require__(88978);
exports.target = {
    propertyName: 'target', modelName: '@Target', displayName: 'DashboardStringId.TargetValueCaption', defaultVal: 'Previous', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'Previous': 'DashboardStringId.DifferenceCalculationTargetPrevious',
        'Next': 'DashboardStringId.DifferenceCalculationTargetNext',
        'First': 'DashboardStringId.DifferenceCalculationTargetFirst',
        'Last': 'DashboardStringId.DifferenceCalculationTargetLast'
    }
};
exports.differenceType = {
    propertyName: 'differenceType', modelName: '@DifferenceType', displayName: 'DashboardWebStringId.Calculations.DifferenceType', defaultVal: 'Absolute', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Absolute': 'DashboardStringId.DeltaThresholdTypeAbsolute',
        'Percentage': 'DashboardStringId.DeltaThresholdTypePercent'
    }
};
exports.differenceCalculationSerializationsInfo = _measure_calculation_1.measureCalculationSerializationsInfo.concat([exports.target, exports.differenceType]);


/***/ }),

/***/ 88978:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.measureCalculationSerializationsInfo = void 0;
exports.measureCalculationSerializationsInfo = [];


/***/ }),

/***/ 37208:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.movingCalculationSerializationsInfo = exports.nextValuesCount = exports.previousValuesCount = exports.summaryType = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _measure_calculation_1 = __webpack_require__(88978);
exports.summaryType = {
    propertyName: 'summaryType', modelName: '@SummaryType', displayName: 'DashboardWebStringId.SummaryType', defaultVal: 'Sum', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'Count': 'DashboardStringId.SummaryTypeCount',
        'Sum': 'DashboardStringId.SummaryTypeSum',
        'Min': 'DashboardStringId.SummaryTypeMin',
        'Max': 'DashboardStringId.SummaryTypeMax',
        'Average': 'DashboardStringId.SummaryTypeAverage',
        'StdDev': 'DashboardStringId.SummaryTypeStdDev',
        'StdDevp': 'DashboardStringId.SummaryTypeStdDevp',
        'Var': 'DashboardStringId.SummaryTypeVar',
        'Varp': 'DashboardStringId.SummaryTypeVarp',
        'CountDistinct': 'DashboardStringId.SummaryTypeCountDistinct',
        'Median': 'DashboardStringId.SummaryTypeMedian',
        'Mode': 'DashboardStringId.SummaryTypeMode'
    }
};
exports.previousValuesCount = { propertyName: 'previousValuesCount', modelName: '@PreviousValuesCount', displayName: 'DashboardWebStringId.Calculations.PreviousValuesCount', defaultVal: 2, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel };
exports.nextValuesCount = { propertyName: 'nextValuesCount', modelName: '@NextValuesCount', displayName: 'DashboardWebStringId.Calculations.NextValuesCount', defaultVal: 0, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel };
exports.movingCalculationSerializationsInfo = _measure_calculation_1.measureCalculationSerializationsInfo.concat([exports.summaryType, exports.previousValuesCount, exports.nextValuesCount]);


/***/ }),

/***/ 19573:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.percentOfTotalCalculationSerializationsInfo = void 0;
const _measure_calculation_1 = __webpack_require__(88978);
exports.percentOfTotalCalculationSerializationsInfo = _measure_calculation_1.measureCalculationSerializationsInfo.concat([]);


/***/ }),

/***/ 61153:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.rankCalculationSerializationsInfo = exports.calculationRankOrder = exports.calculationRankType = void 0;
const _measure_calculation_1 = __webpack_require__(88978);
exports.calculationRankType = {
    propertyName: 'rankType', modelName: '@RankType', displayName: 'DashboardWebStringId.Calculations.RankType', defaultVal: 'Competition', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'Unique': 'DashboardStringId.RankTypeUnique',
        'Competition': 'DashboardStringId.RankTypeCompetition',
        'Dense': 'DashboardStringId.RankTypeDense',
        'Modified': 'DashboardStringId.RankTypeModified',
        'Percentile': 'DashboardStringId.RankTypePercentile'
    }
};
exports.calculationRankOrder = {
    propertyName: 'rankOrder', modelName: '@RankOrder', displayName: 'DashboardWebStringId.Calculations.RankOrder', defaultVal: 'Ascending', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Ascending': 'DashboardStringId.RankOrderAscending',
        'Descending': 'DashboardStringId.RankOrderDescending'
    }
};
exports.rankCalculationSerializationsInfo = _measure_calculation_1.measureCalculationSerializationsInfo.concat([exports.calculationRankType, exports.calculationRankOrder]);


/***/ }),

/***/ 13137:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.runningTotalCalculationSerializationsInfo = void 0;
const _measure_calculation_1 = __webpack_require__(88978);
const _moving_calculation_1 = __webpack_require__(37208);
exports.runningTotalCalculationSerializationsInfo = _measure_calculation_1.measureCalculationSerializationsInfo.concat([_moving_calculation_1.summaryType]);


/***/ }),

/***/ 29588:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MovingCalculation = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const measure_calculation_1 = __webpack_require__(71849);
const _moving_calculation_1 = __webpack_require__(37208);
class MovingCalculation extends measure_calculation_1.MeasureCalculation {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    get name() {
        return 'DashboardWebStringId.Calculations.Moving';
    }
    getInfo() {
        return _moving_calculation_1.movingCalculationSerializationsInfo;
    }
    _createInstance() {
        return new MovingCalculation();
    }
    _getExpression(argument) {
        return `${this._getAggrName(this.summaryType())}(${argument}, -${this.previousValuesCount()}, ${this.nextValuesCount()})`;
    }
}
exports.MovingCalculation = MovingCalculation;
measure_calculation_1.calculationsTypesMap['Moving'] = MovingCalculation;


/***/ }),

/***/ 85279:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PercentOfTotalCalculation = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const measure_calculation_1 = __webpack_require__(71849);
const _percent_of_total_calculation_1 = __webpack_require__(19573);
class PercentOfTotalCalculation extends measure_calculation_1.MeasureCalculation {
    get name() {
        return 'DashboardWebStringId.Calculations.PercentOfTotal';
    }
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _percent_of_total_calculation_1.percentOfTotalCalculationSerializationsInfo;
    }
    _createInstance() {
        return new PercentOfTotalCalculation();
    }
    _getExpression(argument) {
        return `ToDouble(${argument}) / Total(${argument})`;
    }
}
exports.PercentOfTotalCalculation = PercentOfTotalCalculation;
measure_calculation_1.calculationsTypesMap['PercentOfTotal'] = PercentOfTotalCalculation;


/***/ }),

/***/ 24150:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RankCalculation = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const measure_calculation_1 = __webpack_require__(71849);
const _rank_calculation_1 = __webpack_require__(61153);
class RankCalculation extends measure_calculation_1.MeasureCalculation {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    static _getRankFunction(rankType) {
        switch (rankType) {
            case 'Competition':
                return 'RankCompetition';
            case 'Unique':
                return 'RankUnique';
            case 'Dense':
                return 'RankDense';
            case 'Modified':
                return 'RankModified';
            case 'Percentile':
                return 'RankPercentile';
            default:
                throw new Error('Unsupported RankType');
        }
    }
    get name() {
        return 'DashboardWebStringId.Calculations.Rank';
    }
    getInfo() {
        return _rank_calculation_1.rankCalculationSerializationsInfo;
    }
    _createInstance() {
        return new RankCalculation();
    }
    _getExpression(argument) {
        var order = this.rankOrder() == 'Ascending' ? 'asc' : 'desc';
        return `${RankCalculation._getRankFunction(this.rankType())}(${argument}, '${order}')`;
    }
}
exports.RankCalculation = RankCalculation;
measure_calculation_1.calculationsTypesMap['Rank'] = RankCalculation;


/***/ }),

/***/ 62747:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RunningTotalCalculation = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const measure_calculation_1 = __webpack_require__(71849);
const _running_total_calculation_1 = __webpack_require__(13137);
class RunningTotalCalculation extends measure_calculation_1.MeasureCalculation {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    get name() {
        return 'DashboardWebStringId.Calculations.RunningTotal';
    }
    getInfo() {
        return _running_total_calculation_1.runningTotalCalculationSerializationsInfo;
    }
    _createInstance() {
        return new RunningTotalCalculation();
    }
    _getExpression(argument) {
        switch (this.summaryType()) {
            case 'Average':
                return `RunningAvg(${argument})`;
            case 'Count':
                return `RunningCount(${argument})`;
            case 'Max':
                return `RunningMax(${argument})`;
            case 'Min':
                return `RunningMin(${argument})`;
            case 'Sum':
                return `RunningSum(${argument})`;
            default:
                return `${this._getAggrName(this.summaryType())}(${argument}, First(), 0)`;
        }
    }
}
exports.RunningTotalCalculation = RunningTotalCalculation;
measure_calculation_1.calculationsTypesMap['RunningTotal'] = RunningTotalCalculation;


/***/ }),

/***/ 67695:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataItemDateTimeFormat = exports.PercentOfTargetNumericFormat = exports.PercentVariationNumericFormat = exports.AbsoluteVariationNumericFormat = exports.DataItemNumericFormat = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _data_item_format_1 = __webpack_require__(7577);
class DataItemNumericFormat extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _data_item_format_1.dataItemNumericFormatSerializationsInfo;
    }
    _getViewModel() {
        return {
            NumericFormat: {
                CurrencyCulture: this.currencyCultureName(),
                FormatType: this.formatType(),
                Precision: this.precision(),
                Unit: this.unit(),
                IncludeGroupSeparator: this.includeGroupSeparator()
            }
        };
    }
}
exports.DataItemNumericFormat = DataItemNumericFormat;
class AbsoluteVariationNumericFormat extends DataItemNumericFormat {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _data_item_format_1.absoluteVariationNumericFormatSerializationsInfo;
    }
}
exports.AbsoluteVariationNumericFormat = AbsoluteVariationNumericFormat;
class PercentVariationNumericFormat extends DataItemNumericFormat {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _data_item_format_1.percentVariationNumericFormatSerializationsInfo;
    }
}
exports.PercentVariationNumericFormat = PercentVariationNumericFormat;
class PercentOfTargetNumericFormat extends DataItemNumericFormat {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _data_item_format_1.percentOfTargetNumericFormatSerializationsInfo;
    }
}
exports.PercentOfTargetNumericFormat = PercentOfTargetNumericFormat;
class DataItemDateTimeFormat extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _data_item_format_1.dataItemDateTimeFormatSerializationsInfo;
    }
    _getViewModel(groupInterval) {
        return {
            DateTimeFormat: {
                GroupInterval: groupInterval || 'None',
                YearFormat: this.yearFormat(),
                QuarterFormat: this.quarterFormat(),
                MonthFormat: this.monthFormat(),
                DayOfWeekFormat: this.dayOfWeekFormat(),
                DateFormat: this.dateFormat(),
                DateHourFormat: this.dateHourFormat(),
                DateHourMinuteFormat: this.dateHourMinuteFormat(),
                DateTimeFormat: this.dateTimeFormat(),
                HourFormat: this.hourFormat(),
                ExactDateFormat: this.exactDateFormat()
            }
        };
    }
}
exports.DataItemDateTimeFormat = DataItemDateTimeFormat;


/***/ }),

/***/ 44650:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataItemLink = exports.AcceptableShapingType = exports.DataItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const serializable_model_1 = __webpack_require__(29591);
const _data_item_1 = __webpack_require__(44010);
class DataItem extends serializable_model_1.TypedSerializableModel {
    constructor(dataItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dataItemJSON, serializer);
    }
    getInfo() {
        return _data_item_1.dataItemSerializationsInfo;
    }
    grabFrom(dataItem) {
        this.name(dataItem.name());
        this.numericFormat.unit(dataItem.numericFormat.unit());
        this.numericFormat.precision(dataItem.numericFormat.precision());
        this.numericFormat.includeGroupSeparator(dataItem.numericFormat.includeGroupSeparator());
        this.numericFormat.formatType(dataItem.numericFormat.formatType());
        this.numericFormat.currencyCultureName(dataItem.numericFormat.currencyCultureName());
        this.dateTimeFormat.yearFormat(dataItem.dateTimeFormat.yearFormat());
        this.dateTimeFormat.quarterFormat(dataItem.dateTimeFormat.quarterFormat());
        this.dateTimeFormat.monthFormat(dataItem.dateTimeFormat.monthFormat());
        this.dateTimeFormat.dayOfWeekFormat(dataItem.dateTimeFormat.dayOfWeekFormat());
        this.dateTimeFormat.dateFormat(dataItem.dateTimeFormat.dateFormat());
        this.dateTimeFormat.dateHourFormat(dataItem.dateTimeFormat.dateHourFormat());
        this.dateTimeFormat.dateHourMinuteFormat(dataItem.dateTimeFormat.dateHourMinuteFormat());
        this.dateTimeFormat.dateTimeFormat(dataItem.dateTimeFormat.dateTimeFormat());
        this.dateTimeFormat.hourFormat(dataItem.dateTimeFormat.hourFormat());
        this.dateTimeFormat.exactDateFormat(dataItem.dateTimeFormat.exactDateFormat());
    }
    isDefinitionEquals(dataItem) {
        return !!dataItem && this.dataMember() === dataItem.dataMember();
    }
    getUniqueNamePrefix() {
        return 'DataItem';
    }
}
exports.DataItem = DataItem;
DataItem.typesMap = {
    Integer: 'integer',
    Float: 'double',
    Double: 'double',
    Decimal: 'double',
    DateTime: 'date',
    Text: 'string',
    String: 'string',
    Bool: 'Bool',
    Boolean: 'Bool'
};
var AcceptableShapingType;
(function (AcceptableShapingType) {
    AcceptableShapingType[AcceptableShapingType["Number"] = 0] = "Number";
    AcceptableShapingType[AcceptableShapingType["String"] = 1] = "String";
    AcceptableShapingType[AcceptableShapingType["RangeDate"] = 2] = "RangeDate";
    AcceptableShapingType[AcceptableShapingType["Attribute"] = 3] = "Attribute";
    AcceptableShapingType[AcceptableShapingType["Hidden"] = 4] = "Hidden";
})(AcceptableShapingType = exports.AcceptableShapingType || (exports.AcceptableShapingType = {}));
class DataItemLink extends serializable_model_1.TypedSerializableModel {
    constructor(dataItemProvider, dataItemLinkJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dataItemLinkJSON, serializer);
        this._dataItemProvider = ko.observable(null);
        this._specifics = {
            acceptableShapingType: AcceptableShapingType.Number,
            customOptionsProperties: [],
            customDataShapingProperties: [],
            isAttribute: false,
            skipFormatting: false,
            supportsTopNOther: true,
            forceAddOlapExactDateFormat: false
        };
        this._updateProvider(dataItemProvider);
        this.dataItem = ko.pureComputed({
            read: () => !!this._dataItemProvider() ? this._dataItemProvider()._getDataItem(this.uniqueName()) : undefined,
            write: (value) => this.uniqueName(value && value.uniqueName())
        });
    }
    static create(dataItemProvider, dataItemLink) {
        var link = new DataItemLink(dataItemProvider, { '@DefaultId': dataItemLink.uniqueName() }, undefined);
        return link;
    }
    getInfo() {
        return _data_item_1.dataItemLinkSerializationsInfo;
    }
    _getDefaultItemType() {
        return undefined;
    }
    _updateProvider(dataItemProvider) {
        this._dataItemProvider(dataItemProvider);
    }
}
exports.DataItemLink = DataItemLink;


/***/ }),

/***/ 48336:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Dimension = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _data_field_1 = __webpack_require__(68951);
const _knockout_utils_1 = __webpack_require__(4437);
const data_item_1 = __webpack_require__(44650);
const _dimension_1 = __webpack_require__(47557);
class Dimension extends data_item_1.DataItem {
    constructor(dataItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dataItemJSON, serializer);
        this.realSortMode = ko.computed({
            read: () => {
                if (this.sortMeasure())
                    return this.sortMeasure();
                var valueModes = ['DXDisplayText', 'DXValue', 'DXID', 'DXKey'];
                var actualModes = ['DisplayText', 'Value', 'ID', 'Key'];
                return valueModes[actualModes.indexOf(this.sortMode())];
            },
            write: (val) => {
                var valueModes = ['DXDisplayText', 'DXValue', 'DXID', 'DXKey'];
                var actualModes = ['DisplayText', 'Value', 'ID', 'Key'];
                if (valueModes.indexOf(val) !== -1) {
                    this.sortMode(actualModes[valueModes.indexOf(val)]);
                    this.sortMeasure(null);
                }
                else {
                    this.sortMode('Value');
                    this.sortMeasure(val);
                }
            }
        });
        this._actualDateTimeGroupInterval = _knockout_utils_1.safeComputed({ dateTimeGroupInterval: this.dateTimeGroupInterval, dataMember: this.dataMember }, (args) => {
            return _data_field_1.DataField.isOlap(args.dataMember) ? 'None' : args.dateTimeGroupInterval;
        });
    }
    getInfo() {
        return _dimension_1.dimensionItemSerializationsInfo;
    }
    grabFrom(dataItem) {
        super.grabFrom(dataItem);
        if (!(dataItem instanceof Dimension))
            return;
        this.sortOrder(dataItem.sortOrder());
        this.sortMeasure(dataItem.sortMeasure());
        this.sortMode(dataItem.sortMode());
        this.dateTimeGroupInterval(dataItem.dateTimeGroupInterval());
        this.textGroupInterval(dataItem.textGroupInterval());
        this.isDiscreteNumericScale(dataItem.isDiscreteNumericScale());
        this.groupChildValues(dataItem.groupChildValues());
        this.coloringMode(dataItem.coloringMode());
        this.topNOptionsEnabled(dataItem.topNOptionsEnabled());
        this.topNOptionsMode(dataItem.topNOptionsMode());
        this.topNOptionsCount(dataItem.topNOptionsCount());
        this.topNOptionsMeasureName(dataItem.topNOptionsMeasureName());
        this.topNOptionsShowOthers(dataItem.topNOptionsShowOthers());
        this.groupIndex(dataItem.groupIndex());
    }
    isDefinitionEquals(dataItem) {
        return super.isDefinitionEquals(dataItem) && (dataItem instanceof Dimension) &&
            this.dateTimeGroupInterval() === dataItem.dateTimeGroupInterval() && this.textGroupInterval() == dataItem.textGroupInterval();
    }
    _getDefaultItemType() {
        return 'Dimension';
    }
}
exports.Dimension = Dimension;


/***/ }),

/***/ 17012:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Measure = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const data_item_1 = __webpack_require__(44650);
const _measure_1 = __webpack_require__(72150);
class Measure extends data_item_1.DataItem {
    constructor(dataItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dataItemJSON, serializer);
        this.expression.subscribe(val => {
            if (val !== undefined) {
                this.calculation.calculation(undefined);
            }
        });
    }
    getInfo() {
        return _measure_1.measureItemSerializationsInfo;
    }
    grabFrom(dataItem) {
        super.grabFrom(dataItem);
        if (!(dataItem instanceof Measure))
            return;
        this.summaryType(dataItem.summaryType());
    }
    isDefinitionEquals(dataItem) {
        return super.isDefinitionEquals(dataItem) && (dataItem instanceof Measure) &&
            this.summaryType() === dataItem.summaryType() && this.expression() === dataItem.expression() &&
            this.calculation.calculationType() === dataItem.calculation.calculationType() &&
            this.windowDefinition.equals(dataItem.windowDefinition) &&
            this.filterString() === dataItem.filterString();
    }
    _hasCalculation() {
        return !this.calculation.isEmpty() || !!this.expression();
    }
    _getDefaultItemType() {
        return 'Measure';
    }
}
exports.Measure = Measure;


/***/ }),

/***/ 7577:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dataItemDateTimeFormatSerializationsInfo = exports.namelessExactDateFormat = exports.exactDateFormat = exports.namelessHourFormat = exports.hourFormat = exports.namelessDateTimeWithSecondsFormat = exports.dateTimeWithSecondsFormat = exports.namelessDateHourMinuteFormat = exports.dateHourMinuteFormat = exports.namelessDateHourFormat = exports.dateHourFormat = exports.namelessDateFormat = exports.dateFormat = exports.namelessDayOfWeekFormat = exports.dayOfWeekFormat = exports.namelessMonthFormat = exports.monthFormat = exports.namelessQuarterFormat = exports.quarterFormat = exports.namelessYearFormat = exports.yearFormat = exports.percentOfTargetNumericFormatSerializationsInfo = exports.percentVariationNumericFormatSerializationsInfo = exports.absoluteVariationNumericFormatSerializationsInfo = exports.dataItemNumericFormatSerializationsInfo = exports.dataItemCurrencyCultureName = exports.includeGroupSeparator = exports.precision = exports.unit = exports.formatType = exports.customFormatString = exports.formatTypeValues = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const _base_metadata_1 = __webpack_require__(17916);
exports.formatTypeValues = {
    'Auto': 'DashboardStringId.NumericFormatFormatTypeAutoCaption',
    'General': 'DashboardStringId.NumericFormatFormatTypeGeneralCaption',
    'Number': 'DashboardStringId.NumericFormatFormatTypeNumberCaption',
    'Currency': 'DashboardStringId.NumericFormatFormatTypeCurrencyCaption',
    'Scientific': 'DashboardStringId.NumericFormatFormatTypeScientificCaption',
    'Percent': 'DashboardStringId.NumericFormatFormatTypePercentCaption',
    'Custom': 'Custom'
};
exports.customFormatString = { propertyName: 'customFormatString', modelName: '@CustomFormatString', displayName: 'Custom Format String', simpleFormAdapterItem: 'textBoxEditor' };
exports.formatType = { propertyName: 'formatType', modelName: '@FormatType', displayName: 'DashboardWebStringId.FormatType', simpleFormAdapterItem: 'selectBoxEditor', values: exports.formatTypeValues };
exports.unit = {
    propertyName: 'unit', modelName: '@Unit', displayName: 'DashboardStringId.NumericFormatUnitCaption', defaultVal: 'Auto', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'Auto': 'DashboardStringId.NumericFormatUnitAutoCaption',
        'Ones': 'DashboardStringId.NumericFormatUnitOnesCaption',
        'Thousands': 'DashboardStringId.NumericFormatUnitThousandsCaption',
        'Millions': 'DashboardStringId.NumericFormatUnitMillionsCaption',
        'Billions': 'DashboardStringId.NumericFormatUnitBillionsCaption'
    }
};
exports.precision = { propertyName: 'precision', modelName: '@Precision', displayName: 'DashboardWebStringId.DataItem.Precision', simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, validationRules: [{ type: 'custom', validationCallback: (options) => { return options.value >= 0; }, message: "Precision shouldn't be negative." }] };
exports.includeGroupSeparator = { propertyName: 'includeGroupSeparator', modelName: '@IncludeGroupSeparator', displayName: 'DashboardWebStringId.DataItem.IncludeGroupSeparator', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.dataItemCurrencyCultureName = { propertyName: 'currencyCultureName', modelName: '@CurrencyCultureName', displayName: 'DashboardStringId.NumericFormatFormatTypeCurrencyCaption', defaultVal: null };
const getNumericFormat = (defaultFormatType, defaultPrecision) => ([Object.assign(Object.assign({}, exports.formatType), { defaultVal: defaultFormatType }), exports.unit, Object.assign(Object.assign({}, exports.precision), { defaultVal: defaultPrecision }), exports.includeGroupSeparator,
    exports.dataItemCurrencyCultureName,
    exports.customFormatString]);
exports.dataItemNumericFormatSerializationsInfo = getNumericFormat('Auto', 2);
exports.absoluteVariationNumericFormatSerializationsInfo = getNumericFormat('Number', 0);
exports.percentVariationNumericFormatSerializationsInfo = getNumericFormat('Percent', 2);
exports.percentOfTargetNumericFormatSerializationsInfo = getNumericFormat('Percent', 2);
exports.yearFormat = {
    propertyName: 'yearFormat', modelName: '@YearFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Default': 'DashboardStringId.DateTimeFormatYearFormatDefaultCaption',
        'Full': 'DashboardStringId.DateTimeFormatYearFormatFullCaption',
        'Abbreviated': 'DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption'
    }
};
exports.namelessYearFormat = _jquery_helpers_1.deepExtend({}, exports.yearFormat);
delete exports.namelessYearFormat.displayName;
exports.quarterFormat = {
    propertyName: 'quarterFormat', modelName: '@QuarterFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Default': 'DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption',
        'Numeric': 'DashboardStringId.DateTimeFormatQuarterFormatNumericCaption',
        'Full': 'DashboardStringId.DateTimeFormatQuarterFormatFullCaption'
    }
};
exports.namelessQuarterFormat = _jquery_helpers_1.deepExtend({}, exports.quarterFormat);
delete exports.namelessQuarterFormat.displayName;
exports.monthFormat = {
    propertyName: 'monthFormat', modelName: '@MonthFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Default': 'DashboardStringId.DateTimeFormatMonthFormatDefaultCaption',
        'Full': 'DashboardStringId.DateTimeFormatMonthFormatFullCaption',
        'Abbreviated': 'DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption',
        'Numeric': 'DashboardStringId.DateTimeFormatMonthFormatNumericCaption'
    }
};
exports.namelessMonthFormat = _jquery_helpers_1.deepExtend({}, exports.monthFormat);
delete exports.namelessMonthFormat.displayName;
exports.dayOfWeekFormat = {
    propertyName: 'dayOfWeekFormat', modelName: '@DayOfWeekFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Default', simpleFormAdapterItem: 'listEditor',
    values: {
        'Default': 'DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption',
        'Full': 'DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption',
        'Abbreviated': 'DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption',
        'Numeric': 'DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption'
    }
};
exports.namelessDayOfWeekFormat = _jquery_helpers_1.deepExtend({}, exports.dayOfWeekFormat);
delete exports.namelessDayOfWeekFormat.displayName;
exports.dateFormat = {
    propertyName: 'dateFormat', modelName: '@DateFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Default': 'DashboardStringId.DateTimeFormatDateFormatDefaultCaption',
        'Long': 'DashboardStringId.DateTimeFormatDateFormatLongCaption',
        'Short': 'DashboardStringId.DateTimeFormatDateFormatShortCaption'
    }
};
exports.namelessDateFormat = _jquery_helpers_1.deepExtend({}, exports.dateFormat);
delete exports.namelessDateFormat.displayName;
exports.dateHourFormat = {
    propertyName: 'dateHourFormat', modelName: '@DateHourFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Default': 'DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption',
        'Long': 'DashboardStringId.DateTimeFormatDateTimeFormatLongCaption',
        'Short': 'DashboardStringId.DateTimeFormatDateTimeFormatShortCaption',
        'TimeOnly': 'DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption'
    }
};
exports.namelessDateHourFormat = _jquery_helpers_1.deepExtend({}, exports.dateHourFormat);
delete exports.namelessDateHourFormat.displayName;
exports.dateHourMinuteFormat = {
    propertyName: 'dateHourMinuteFormat', modelName: '@DateHourMinuteFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Default': 'DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption',
        'Long': 'DashboardStringId.DateTimeFormatDateTimeFormatLongCaption',
        'Short': 'DashboardStringId.DateTimeFormatDateTimeFormatShortCaption',
        'TimeOnly': 'DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption'
    }
};
exports.namelessDateHourMinuteFormat = _jquery_helpers_1.deepExtend({}, exports.dateHourMinuteFormat);
delete exports.namelessDateHourMinuteFormat.displayName;
exports.dateTimeWithSecondsFormat = {
    propertyName: 'dateTimeFormat', modelName: '@DateTimeFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Default': 'DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption',
        'Long': 'DashboardStringId.DateTimeFormatDateTimeFormatLongCaption',
        'Short': 'DashboardStringId.DateTimeFormatDateTimeFormatShortCaption',
        'TimeOnly': 'DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption'
    }
};
exports.namelessDateTimeWithSecondsFormat = _jquery_helpers_1.deepExtend({}, exports.dateTimeWithSecondsFormat);
delete exports.namelessDateTimeWithSecondsFormat.displayName;
exports.hourFormat = {
    propertyName: 'hourFormat', modelName: '@HourFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Default': 'DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption',
        'Short': 'DashboardStringId.DateTimeFormatDateTimeFormatShortCaption',
        'Long': 'DashboardStringId.DateTimeFormatDateTimeFormatLongCaption'
    }
};
exports.namelessHourFormat = _jquery_helpers_1.deepExtend({}, exports.hourFormat);
delete exports.namelessHourFormat.displayName;
exports.exactDateFormat = {
    propertyName: 'exactDateFormat', modelName: '@ExactDateFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Day', simpleFormAdapterItem: 'listEditor',
    values: {
        'Year': 'DashboardStringId.ExactDateFormatYear',
        'Quarter': 'DashboardStringId.ExactDateFormatQuarter',
        'Month': 'DashboardStringId.ExactDateFormatMonth',
        'Day': 'DashboardStringId.ExactDateFormatDay',
        'Hour': 'DashboardStringId.ExactDateFormatHour',
        'Minute': 'DashboardStringId.ExactDateFormatMinute',
        'Second': 'DashboardStringId.ExactDateFormatSecond'
    }
};
exports.namelessExactDateFormat = _jquery_helpers_1.deepExtend({}, exports.exactDateFormat);
delete exports.namelessExactDateFormat.displayName;
exports.dataItemDateTimeFormatSerializationsInfo = [exports.yearFormat, exports.quarterFormat, exports.monthFormat, exports.dayOfWeekFormat, exports.dateFormat, exports.dateHourFormat, exports.dateHourMinuteFormat, exports.dateTimeWithSecondsFormat, exports.hourFormat, exports.exactDateFormat];


/***/ }),

/***/ 44010:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dataItemSerializationsInfo = exports.dataItemLinkSerializationsInfo = exports.showGrandTotals = exports.showTotals = exports.showValues = exports.percentOfTargetNumericFormat = exports.percentVariationNumericFormat = exports.absoluteVariationNumericFormat = exports.dateTimeFormat = exports.numericFormat = exports.dataItemDataMember = exports.uniqueName = exports.dataItem = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const data_item_format_1 = __webpack_require__(67695);
exports.dataItem = { propertyName: 'dataItem', displayName: 'DashboardWebStringId.DataItem' };
exports.uniqueName = { propertyName: 'uniqueName', modelName: '@DefaultId' };
exports.dataItemDataMember = { propertyName: 'dataMember', modelName: '@DataMember' };
exports.numericFormat = { propertyName: 'numericFormat', modelName: 'NumericFormat', displayName: 'DashboardWebStringId.TextBoxFormatText', type: data_item_format_1.DataItemNumericFormat };
exports.dateTimeFormat = { propertyName: 'dateTimeFormat', modelName: 'DateTimeFormat', displayName: 'DashboardWebStringId.TextBoxFormatText', type: data_item_format_1.DataItemDateTimeFormat };
exports.absoluteVariationNumericFormat = { propertyName: 'absoluteVariationNumericFormat', modelName: 'AbsoluteVariationNumericFormat', type: data_item_format_1.AbsoluteVariationNumericFormat };
exports.percentVariationNumericFormat = { propertyName: 'percentVariationNumericFormat', modelName: 'PercentVariationNumericFormat', type: data_item_format_1.PercentVariationNumericFormat };
exports.percentOfTargetNumericFormat = { propertyName: 'percentOfTargetNumericFormat', modelName: 'PercentOfTargetNumericFormat', type: data_item_format_1.PercentOfTargetNumericFormat };
exports.showValues = { propertyName: 'showValues', modelName: '@ShowValues', displayName: 'DashboardWebStringId.DataItem.ShowValues', defaultVal: true, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.showTotals = { propertyName: 'showTotals', modelName: '@ShowTotals', displayName: 'DashboardWebStringId.DataItem.ShowTotals', defaultVal: true, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.showGrandTotals = { propertyName: 'showGrandTotals', modelName: '@ShowGrandTotals', displayName: 'DashboardWebStringId.DataItem.ShowGrandTotals', defaultVal: true, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.dataItemLinkSerializationsInfo = [_base_metadata_1.itemType, exports.uniqueName, exports.dataItem];
exports.dataItemSerializationsInfo = [_base_metadata_1.itemType, exports.dataItemDataMember, _base_metadata_1.name, exports.uniqueName, exports.numericFormat, exports.dateTimeFormat, exports.showValues, exports.showTotals, exports.showGrandTotals];


/***/ }),

/***/ 47557:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dimensionItemSerializationsInfo = exports.topNOptionsSerializationsInfo = exports.topNOptionsShowOthers = exports.topNOptionsMeasure = exports.topNOptionsCount = exports.topNOptionsMode = exports.topNOptionsModeValues = exports.topNOptionsEnabled = exports.realSortMode = exports.sortMeasure = exports.coloringMode = exports.groupChildValues = exports.isDiscreteNumericScale = exports.textGroupInterval = exports.sortMode = exports.sortOrderNonOlap = exports.sortOrderOlap = exports.sortOrderBase = exports.rangeDateTimeGroupInterval = exports.dateTimeGroupInterval = exports.dimensionGroupIndex = exports.dateTimeGroupIntervalsDict = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _data_item_1 = __webpack_require__(44010);
exports.dateTimeGroupIntervalsDict = {
    'Year': 'DashboardStringId.DateTimeGroupIntervalYear',
    'Quarter': 'DashboardStringId.DateTimeGroupIntervalQuarter',
    'Month': 'DashboardStringId.DateTimeGroupIntervalMonth',
    'Day': 'DashboardStringId.DateTimeGroupIntervalDay',
    'Hour': 'DashboardStringId.DateTimeGroupIntervalHour',
    'Minute': 'DashboardStringId.DateTimeGroupIntervalMinute',
    'Second': 'DashboardStringId.DateTimeGroupIntervalSecond',
    'DayOfYear': 'DashboardStringId.DateTimeGroupIntervalDayOfYear',
    'DayOfWeek': 'DashboardStringId.DateTimeGroupIntervalDayOfWeek',
    'WeekOfYear': 'DashboardStringId.DateTimeGroupIntervalWeekOfYear',
    'WeekOfMonth': 'DashboardStringId.DateTimeGroupIntervalWeekOfMonth',
    'QuarterYear': 'DashboardStringId.DateTimeGroupIntervalQuarterYear',
    'MonthYear': 'DashboardStringId.DateTimeGroupIntervalMonthYear',
    'WeekYear': 'DashboardStringId.DateTimeGroupIntervalWeekYear',
    'DayMonthYear': 'DashboardStringId.DateTimeGroupIntervalDayMonthYear',
    'DateHour': 'DashboardStringId.DateTimeGroupIntervalDateHour',
    'DateHourMinute': 'DashboardStringId.DateTimeGroupIntervalDateHourMinute',
    'DateHourMinuteSecond': 'DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond',
    'None': 'DashboardStringId.DateTimeGroupIntervalExactDate'
};
exports.dimensionGroupIndex = { propertyName: 'groupIndex', modelName: '@GroupIndex' };
exports.dateTimeGroupInterval = {
    propertyName: 'dateTimeGroupInterval', modelName: '@DateTimeGroupInterval', displayName: 'DashboardWebStringId.Dimension.GroupInterval', defaultVal: 'Year', simpleFormAdapterItem: 'selectBoxEditor', values: exports.dateTimeGroupIntervalsDict
};
exports.rangeDateTimeGroupInterval = {
    propertyName: 'dateTimeGroupInterval', modelName: '@DateTimeGroupInterval', displayName: 'DashboardWebStringId.Dimension.GroupInterval', defaultVal: 'Year', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Year': 'DashboardStringId.DateTimeGroupIntervalYear',
        'QuarterYear': 'DashboardStringId.DateTimeGroupIntervalQuarterYear',
        'MonthYear': 'DashboardStringId.DateTimeGroupIntervalMonthYear',
        'DayMonthYear': 'DashboardStringId.DateTimeGroupIntervalDayMonthYear',
        'DateHour': 'DashboardStringId.DateTimeGroupIntervalDateHour',
        'DateHourMinute': 'DashboardStringId.DateTimeGroupIntervalDateHourMinute',
        'DateHourMinuteSecond': 'DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond',
        'None': 'DashboardStringId.DateTimeGroupIntervalExactDate'
    }
};
exports.sortOrderBase = {
    propertyName: 'sortOrder', modelName: '@SortOrder', displayName: 'DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder', defaultVal: 'Ascending', simpleFormAdapterItem: 'buttonGroupEditor'
};
exports.sortOrderOlap = Object.assign({ values: {
        'Ascending': 'DevExpress.DashboardCommon.DimensionSortOrder.Ascending',
        'Descending': 'DevExpress.DashboardCommon.DimensionSortOrder.Descending',
        'None': 'DevExpress.DashboardCommon.DimensionSortOrder.None'
    } }, exports.sortOrderBase);
exports.sortOrderNonOlap = Object.assign({ values: {
        'Ascending': 'DevExpress.DashboardCommon.DimensionSortOrder.Ascending',
        'Descending': 'DevExpress.DashboardCommon.DimensionSortOrder.Descending'
    } }, exports.sortOrderBase);
exports.sortMode = {
    propertyName: 'sortMode', modelName: '@SortMode', displayName: 'DashboardWebStringId.Dimension.SortMode', defaultVal: 'Value', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'DisplayText': 'DashboardStringId.CommandDimensionSortModeDisplayText',
        'Value': 'DashboardStringId.CommandDimensionSortModeValue',
        'ID': 'DashboardStringId.CommandDimensionSortModeID',
        'Key': 'DashboardStringId.CommandDimensionSortModeKey'
    }
};
exports.textGroupInterval = {
    propertyName: 'textGroupInterval', modelName: '@TextGroupInterval', displayName: 'DashboardWebStringId.Dimension.GroupInterval', defaultVal: 'None', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'None': 'DashboardStringId.GroupIntervalNone',
        'Alphabetical': 'DashboardStringId.TextGroupIntervalAlphabetical'
    }
};
exports.isDiscreteNumericScale = { propertyName: 'isDiscreteNumericScale', modelName: '@IsDiscreteScale', displayName: 'DashboardWebStringId.Dialog.ArgumentMode', defaultVal: false, simpleFormAdapterItem: 'discreteContinuousButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.groupChildValues = { propertyName: 'groupChildValues', modelName: '@GroupChildValues', displayName: 'DashboardStringId.CommandDimensionGroupChildValues', defaultVal: false, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.coloringMode = {
    propertyName: 'coloringMode', modelName: '@ColoringMode', displayName: 'DashboardWebStringId.ColoringOptions', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Default': 'DashboardWebStringId.ColoringModeAuto',
        'None': 'DashboardWebStringId.ColoringModeOff',
        'Hue': 'DashboardWebStringId.ColoringModeOn'
    }
};
exports.sortMeasure = { propertyName: 'sortMeasure', modelName: '@SortByMeasure', displayName: 'DashboardWebStringId.DimensionSortBy' };
exports.realSortMode = { propertyName: 'realSortMode', defaultVal: 'DXValue', displayName: 'DashboardWebStringId.DimensionSortBy', simpleFormAdapterItem: 'selectBoxEditor' };
exports.topNOptionsEnabled = { propertyName: 'topNOptionsEnabled', modelName: '@TopNEnabled', displayName: 'DashboardWebStringId.TopNEnabled', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.topNOptionsModeValues = {
    'Top': 'DashboardWebStringId.TopN.Top',
    'Bottom': 'DashboardWebStringId.TopN.Bottom'
};
exports.topNOptionsMode = {
    propertyName: 'topNOptionsMode', modelName: '@TopNMode', displayName: 'DashboardWebStringId.TopNMode', defaultVal: 'Top', simpleFormAdapterItem: 'buttonGroupEditor', values: exports.topNOptionsModeValues
};
exports.topNOptionsCount = { propertyName: 'topNOptionsCount', modelName: '@TopNCount', displayName: 'DashboardStringId.SummaryTypeCount', defaultVal: 5, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, editorOptions: { min: 1 }, validateBeforeSet: true, validationRules: [_base_metadata_1.integerValidationRule] };
exports.topNOptionsMeasure = { propertyName: 'topNOptionsMeasureName', modelName: '@TopNMeasure', displayName: 'DashboardStringId.DescriptionItemMeasure', simpleFormAdapterItem: 'selectBoxEditor' };
exports.topNOptionsShowOthers = { propertyName: 'topNOptionsShowOthers', modelName: '@TopNShowOthers', displayName: 'DashboardWebStringId.ShowOthersValue', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.topNOptionsSerializationsInfo = [exports.topNOptionsEnabled, exports.topNOptionsMode, exports.topNOptionsCount, exports.topNOptionsMeasure, exports.topNOptionsShowOthers];
exports.dimensionItemSerializationsInfo = _data_item_1.dataItemSerializationsInfo
    .concat(exports.dimensionGroupIndex, exports.dateTimeGroupInterval, exports.sortOrderBase, exports.sortMeasure, exports.sortMode, exports.textGroupInterval, exports.isDiscreteNumericScale, exports.groupChildValues, exports.coloringMode)
    .concat(exports.topNOptionsSerializationsInfo);


/***/ }),

/***/ 72150:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.measureItemSerializationsInfo = exports.measureFilterString = exports.calculations = exports.expression = exports.windowDefinition = exports.calculation = exports.summaryTypeNonNumericToString = exports.summaryTypeNonNumericToNumeric = exports.summaryTypeAttribute = exports.summaryTypeNumericToAny = exports.summaryTypeTemplate = exports.summaryTypeDict = void 0;
const calculation_1 = __webpack_require__(9237);
const window_definition_1 = __webpack_require__(23810);
const _data_item_1 = __webpack_require__(44010);
exports.summaryTypeDict = {
    'Count': 'DashboardStringId.SummaryTypeCount',
    'CountDistinct': 'DashboardStringId.SummaryTypeCountDistinct',
    'Sum': 'DashboardStringId.SummaryTypeSum',
    'Min': 'DashboardStringId.SummaryTypeMin',
    'Max': 'DashboardStringId.SummaryTypeMax',
    'Average': 'DashboardStringId.SummaryTypeAverage',
    'StdDev': 'DashboardStringId.SummaryTypeStdDev',
    'StdDevp': 'DashboardStringId.SummaryTypeStdDevp',
    'Var': 'DashboardStringId.SummaryTypeVar',
    'Varp': 'DashboardStringId.SummaryTypeVarp',
    'Median': 'DashboardStringId.SummaryTypeMedian',
    'Mode': 'DashboardStringId.SummaryTypeMode'
};
exports.summaryTypeTemplate = {
    propertyName: 'summaryType', modelName: '@SummaryType', displayName: 'DashboardWebStringId.SummaryType'
};
exports.summaryTypeNumericToAny = Object.assign({ defaultVal: 'Sum', simpleFormAdapterItem: 'selectBoxEditor', values: exports.summaryTypeDict }, exports.summaryTypeTemplate);
exports.summaryTypeAttribute = Object.assign({ defaultVal: 'Min', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Min': 'DashboardStringId.SummaryTypeMin'
    } }, exports.summaryTypeTemplate);
exports.summaryTypeNonNumericToNumeric = Object.assign({ defaultVal: 'Count', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Count': 'DashboardStringId.SummaryTypeCount',
        'CountDistinct': 'DashboardStringId.SummaryTypeCountDistinct'
    } }, exports.summaryTypeTemplate);
exports.summaryTypeNonNumericToString = Object.assign({ defaultVal: 'Count', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Count': 'DashboardStringId.SummaryTypeCount',
        'CountDistinct': 'DashboardStringId.SummaryTypeCountDistinct',
        'Min': 'DashboardStringId.SummaryTypeMin',
        'Max': 'DashboardStringId.SummaryTypeMax',
        'Mode': 'DashboardStringId.SummaryTypeMode'
    } }, exports.summaryTypeTemplate);
exports.calculation = { propertyName: 'calculation', modelName: 'Calculation', type: calculation_1.Calculation };
exports.windowDefinition = { propertyName: 'windowDefinition', modelName: 'WindowDefinition', type: window_definition_1.WindowDefinition, displayName: 'DashboardWebStringId.Calculations.WindowDefinition' };
exports.expression = { propertyName: 'expression', modelName: '@Expression' };
exports.calculations = { propertyName: 'calculations' };
exports.measureFilterString = { propertyName: 'filterString', modelName: '@FilterString' };
exports.measureItemSerializationsInfo = _data_item_1.dataItemSerializationsInfo.concat(exports.summaryTypeNumericToAny, exports.calculation, exports.windowDefinition, exports.expression, exports.measureFilterString);


/***/ }),

/***/ 8745:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardWindowDefinition = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const measure_calc_window_definition_1 = __webpack_require__(37906);
const _card_calc_window_definition_1 = __webpack_require__(41080);
class CardWindowDefinition extends measure_calc_window_definition_1.MeasureCalculationWindowDefinition {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _card_calc_window_definition_1.cardWindowDefinitionSerializationsInfo;
    }
    equals(def) {
        return (def instanceof CardWindowDefinition) && (this.definitionMode() === def.definitionMode());
    }
}
exports.CardWindowDefinition = CardWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['CardWindowDefinition'] = CardWindowDefinition;


/***/ }),

/***/ 84143:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChartWindowDefinition = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const measure_calc_window_definition_1 = __webpack_require__(37906);
const _chart_calc_window_definition_1 = __webpack_require__(82177);
class ChartWindowDefinition extends measure_calc_window_definition_1.MeasureCalculationWindowDefinition {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _chart_calc_window_definition_1.chartWindowDefinitionSerializationsInfo;
    }
    equals(def) {
        return (def instanceof ChartWindowDefinition) && (this.definitionMode() === def.definitionMode());
    }
}
exports.ChartWindowDefinition = ChartWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['ChartWindowDefinition'] = ChartWindowDefinition;


/***/ }),

/***/ 20258:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomItemWindowDefinition = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const measure_calc_window_definition_1 = __webpack_require__(37906);
const _custom_item_calc_window_definition_1 = __webpack_require__(9675);
class CustomItemWindowDefinition extends measure_calc_window_definition_1.MeasureCalculationWindowDefinition {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _custom_item_calc_window_definition_1.customItemWindowDefinitionSerializationsInfo;
    }
    equals(def) {
        return def instanceof CustomItemWindowDefinition;
    }
}
exports.CustomItemWindowDefinition = CustomItemWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['CustomItemWindowDefinition'] = CustomItemWindowDefinition;


/***/ }),

/***/ 5890:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GaugeWindowDefinition = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const measure_calc_window_definition_1 = __webpack_require__(37906);
const _gauge_calc_window_definition_1 = __webpack_require__(26712);
class GaugeWindowDefinition extends measure_calc_window_definition_1.MeasureCalculationWindowDefinition {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _gauge_calc_window_definition_1.gaugeWindowDefinitionSerializationsInfo;
    }
    equals(def) {
        return def instanceof GaugeWindowDefinition;
    }
}
exports.GaugeWindowDefinition = GaugeWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['GaugeWindowDefinition'] = GaugeWindowDefinition;


/***/ }),

/***/ 95912:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GridWindowDefinition = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const measure_calc_window_definition_1 = __webpack_require__(37906);
const _grid_calc_window_definition_1 = __webpack_require__(45372);
class GridWindowDefinition extends measure_calc_window_definition_1.MeasureCalculationWindowDefinition {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _grid_calc_window_definition_1.gridWindowDefinitionSerializationsInfo;
    }
    equals(def) {
        return (def instanceof GridWindowDefinition) && (this.definitionMode() === def.definitionMode());
    }
}
exports.GridWindowDefinition = GridWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['GridWindowDefinition'] = GridWindowDefinition;


/***/ }),

/***/ 37906:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.windowDefinitionsTypesMap = exports.MeasureCalculationWindowDefinition = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _measure_calc_window_definition_1 = __webpack_require__(55569);
class MeasureCalculationWindowDefinition extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson || {}, serializer);
    }
    getInfo() {
        return _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo;
    }
}
exports.MeasureCalculationWindowDefinition = MeasureCalculationWindowDefinition;
exports.windowDefinitionsTypesMap = {};


/***/ }),

/***/ 41080:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardWindowDefinitionSerializationsInfo = exports.cardDefinitionMode = void 0;
const _measure_calc_window_definition_1 = __webpack_require__(55569);
exports.cardDefinitionMode = {
    propertyName: 'definitionMode', modelName: '@DefinitionMode', defaultVal: 'Cards', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'Cards': 'DashboardStringId.CardCalculationAlongCards',
        'SparklineArgument': 'DashboardStringId.CardCalculationAlongSparklineArgument',
        'CardsAndSparklineArgument': 'DashboardStringId.CardCalculationAlongCardsAndSparklineArgument',
        'SparklineArgumentAndCards': 'DashboardStringId.CardCalculationAlongSparklineArgumentAndCards'
    }
};
exports.cardWindowDefinitionSerializationsInfo = _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo.concat([exports.cardDefinitionMode]);


/***/ }),

/***/ 82177:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.chartWindowDefinitionSerializationsInfo = exports.chartDefinitionMode = void 0;
const _measure_calc_window_definition_1 = __webpack_require__(55569);
exports.chartDefinitionMode = {
    propertyName: 'definitionMode', modelName: '@DefinitionMode', defaultVal: 'Arguments', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'Arguments': 'DashboardStringId.ChartCalculationAlongArguments',
        'Series': 'DashboardStringId.ChartCalculationAlongSeries',
        'ArgumentsAndSeries': 'DashboardStringId.ChartCalculationAlongArgumentsAndSeries',
        'SeriesAndArguments': 'DashboardStringId.ChartCalculationAlongSeriesAndArguments'
    }
};
exports.chartWindowDefinitionSerializationsInfo = _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo.concat([exports.chartDefinitionMode]);


/***/ }),

/***/ 9675:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.customItemWindowDefinitionSerializationsInfo = void 0;
const _measure_calc_window_definition_1 = __webpack_require__(55569);
exports.customItemWindowDefinitionSerializationsInfo = _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo.concat([]);


/***/ }),

/***/ 26712:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gaugeWindowDefinitionSerializationsInfo = void 0;
const _measure_calc_window_definition_1 = __webpack_require__(55569);
exports.gaugeWindowDefinitionSerializationsInfo = _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo.concat([]);


/***/ }),

/***/ 45372:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gridWindowDefinitionSerializationsInfo = exports.gridDefinitionMode = void 0;
const _measure_calc_window_definition_1 = __webpack_require__(55569);
exports.gridDefinitionMode = {
    propertyName: 'definitionMode', modelName: '@DefinitionMode', defaultVal: 'Rows', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'Rows': 'DashboardStringId.GridCalculationAlongRows',
        'SparklineArgument': 'DashboardStringId.GridCalculationAlongSparklineArgument',
        'RowsAndSparklineArgument': 'DashboardStringId.GridCalculationAlongRowsAndSparklineArgument',
        'SparklineArgumentAndRows': 'DashboardStringId.GridCalculationAlongSparklineArgumentAndRows'
    }
};
exports.gridWindowDefinitionSerializationsInfo = _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo.concat([exports.gridDefinitionMode]);


/***/ }),

/***/ 55569:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.measureCalculationWindowDefinitionSerializationsInfo = void 0;
exports.measureCalculationWindowDefinitionSerializationsInfo = [];


/***/ }),

/***/ 18532:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pieWindowDefinitionSerializationsInfo = exports.pieDefinitionMode = void 0;
const _measure_calc_window_definition_1 = __webpack_require__(55569);
exports.pieDefinitionMode = {
    propertyName: 'definitionMode', modelName: '@DefinitionMode', defaultVal: 'Series', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'Arguments': 'DashboardStringId.PieCalculationAlongArguments',
        'Series': 'DashboardStringId.PieCalculationAlongSeries',
        'ArgumentsAndSeries': 'DashboardStringId.PieCalculationAlongArgumentsAndSeries',
        'SeriesAndArguments': 'DashboardStringId.PieCalculationAlongSeriesAndArguments'
    }
};
exports.pieWindowDefinitionSerializationsInfo = _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo.concat([exports.pieDefinitionMode]);


/***/ }),

/***/ 27005:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pivotWindowDefinitionSerializationsInfo = exports.pivotDefinitionMode = void 0;
const _measure_calc_window_definition_1 = __webpack_require__(55569);
exports.pivotDefinitionMode = {
    propertyName: 'definitionMode', modelName: '@DefinitionMode', defaultVal: 'Columns', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'Columns': 'DashboardStringId.PivotCalculationAlongColumns',
        'Rows': 'DashboardStringId.PivotCalculationAlongRows',
        'ColumnsAndRows': 'DashboardStringId.PivotCalculationAlongColumnsAndRows',
        'RowsAndColumns': 'DashboardStringId.PivotCalculationAlongRowsAndColumns',
        'GroupsInColumns': 'DashboardStringId.PivotCalculationAlongGroupsInColumns',
        'GroupsInRows': 'DashboardStringId.PivotCalculationAlongGroupsInRows',
        'GroupsInColumnsAndRows': 'DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows',
        'GroupsInRowsAndColumns': 'DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns'
    }
};
exports.pivotWindowDefinitionSerializationsInfo = _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo.concat([exports.pivotDefinitionMode]);


/***/ }),

/***/ 99141:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.rangeFilterWindowDefinitionSerializationsInfo = exports.rangeFilterDefinitionMode = void 0;
const _measure_calc_window_definition_1 = __webpack_require__(55569);
exports.rangeFilterDefinitionMode = {
    propertyName: 'definitionMode', modelName: '@DefinitionMode', defaultVal: 'Argument', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'Argument': 'DashboardStringId.RangeFilterCalculationAlongArgument',
        'Series': 'DashboardStringId.RangeFilterCalculationAlongSeries',
        'ArgumentAndSeries': 'DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries',
        'SeriesAndArgument': 'DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument'
    }
};
exports.rangeFilterWindowDefinitionSerializationsInfo = _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo.concat([exports.rangeFilterDefinitionMode]);


/***/ }),

/***/ 1870:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scatterWindowDefinitionSerializationsInfo = void 0;
const _measure_calc_window_definition_1 = __webpack_require__(55569);
exports.scatterWindowDefinitionSerializationsInfo = _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo.concat([]);


/***/ }),

/***/ 68136:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sliceTableDimensions = void 0;
exports.sliceTableDimensions = { propertyName: 'dimensions', modelName: 'Dimensions', array: true };


/***/ }),

/***/ 21389:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.windowDefinitionSerializationsInfo = void 0;
exports.windowDefinitionSerializationsInfo = [];


/***/ }),

/***/ 74599:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PieWindowDefinition = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const measure_calc_window_definition_1 = __webpack_require__(37906);
const _pie_calc_window_definition_1 = __webpack_require__(18532);
class PieWindowDefinition extends measure_calc_window_definition_1.MeasureCalculationWindowDefinition {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _pie_calc_window_definition_1.pieWindowDefinitionSerializationsInfo;
    }
    equals(def) {
        return (def instanceof PieWindowDefinition) && (this.definitionMode() === def.definitionMode());
    }
}
exports.PieWindowDefinition = PieWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['PieWindowDefinition'] = PieWindowDefinition;


/***/ }),

/***/ 64069:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PivotWindowDefinition = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const measure_calc_window_definition_1 = __webpack_require__(37906);
const _pivot_calc_window_definition_1 = __webpack_require__(27005);
class PivotWindowDefinition extends measure_calc_window_definition_1.MeasureCalculationWindowDefinition {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _pivot_calc_window_definition_1.pivotWindowDefinitionSerializationsInfo;
    }
    equals(def) {
        return (def instanceof PivotWindowDefinition) && (this.definitionMode() === def.definitionMode());
    }
}
exports.PivotWindowDefinition = PivotWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['PivotWindowDefinition'] = PivotWindowDefinition;


/***/ }),

/***/ 58554:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RangeFilterWindowDefinition = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const measure_calc_window_definition_1 = __webpack_require__(37906);
const _range_filter_calc_window_definition_1 = __webpack_require__(99141);
class RangeFilterWindowDefinition extends measure_calc_window_definition_1.MeasureCalculationWindowDefinition {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _range_filter_calc_window_definition_1.rangeFilterWindowDefinitionSerializationsInfo;
    }
    equals(def) {
        return (def instanceof RangeFilterWindowDefinition) && (this.definitionMode() === def.definitionMode());
    }
}
exports.RangeFilterWindowDefinition = RangeFilterWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['RangeFilterWindowDefinition'] = RangeFilterWindowDefinition;


/***/ }),

/***/ 58720:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ScatterWindowDefinition = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const measure_calc_window_definition_1 = __webpack_require__(37906);
const _scatter_chart_calc_window_definition_1 = __webpack_require__(1870);
class ScatterWindowDefinition extends measure_calc_window_definition_1.MeasureCalculationWindowDefinition {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _scatter_chart_calc_window_definition_1.scatterWindowDefinitionSerializationsInfo;
    }
    equals(def) {
        return def instanceof ScatterWindowDefinition;
    }
}
exports.ScatterWindowDefinition = ScatterWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['ScatterWindowDefinition'] = ScatterWindowDefinition;


/***/ }),

/***/ 31615:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SpecificWindowDefinition = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const _array_utils_1 = __webpack_require__(60618);
const _utils_1 = __webpack_require__(66358);
const data_item_1 = __webpack_require__(44650);
const measure_calc_window_definition_1 = __webpack_require__(37906);
const _specific_calc_window_definition_1 = __webpack_require__(68136);
class SpecificWindowDefinition extends measure_calc_window_definition_1.MeasureCalculationWindowDefinition {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.dimensions = analytics_utils_1.deserializeArray(modelJson && modelJson.Dimensions, (item) => {
            return new data_item_1.DataItemLink(null, item, serializer);
        });
    }
    getInfo() {
        var dimensionsInfo = _specific_calc_window_definition_1.sliceTableDimensions;
        if (!!this._dimensionsInfoPatcher) {
            dimensionsInfo = this._dimensionsInfoPatcher(dimensionsInfo);
        }
        return super.getInfo().concat([dimensionsInfo]);
    }
    equals(def) {
        return (def instanceof SpecificWindowDefinition) &&
            _array_utils_1.compareNotOrderedArrays(this.dimensions(), def.dimensions(), (d1, d2) => d1.uniqueName() === d2.uniqueName());
    }
}
__decorate([
    _utils_1.collectionItemType('Dimension')
], SpecificWindowDefinition.prototype, "dimensions", void 0);
exports.SpecificWindowDefinition = SpecificWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['SpecificWindowDefinition'] = SpecificWindowDefinition;


/***/ }),

/***/ 23810:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WindowDefinition = void 0;
const analytics_internal_1 = __webpack_require__(19745);
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const serializable_model_1 = __webpack_require__(29591);
const measure_calc_window_definition_1 = __webpack_require__(37906);
const _window_definition_1 = __webpack_require__(21389);
var currentwindowDefinitionInfo = (model) => {
    if (!model.windowDefinitionType)
        return [];
    return [{
            propertyName: 'windowDefinition',
            modelName: model.windowDefinitionType() || 'FakeWindowDefinitionForModelSubscriber',
            from: (json, serializer) => { return new measure_calc_window_definition_1.windowDefinitionsTypesMap[model.windowDefinitionType()](json, serializer); },
            toJsonObject: (value, serializer, refs) => {
                var result = serializer.serialize(value, null, refs);
                if (analytics_internal_1.isEmptyObject(result)) {
                    return null;
                }
                return result;
            }
        }];
};
class WindowDefinition extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.windowDefinitionType = ko.observable();
        this.windowDefinition = ko.observable();
        this.windowDefinitionType(Object.keys(measure_calc_window_definition_1.windowDefinitionsTypesMap).filter(mapItem => !!modelJson && modelJson[mapItem] !== undefined)[0]);
        if (!!this.windowDefinitionType()) {
            let type = measure_calc_window_definition_1.windowDefinitionsTypesMap[this.windowDefinitionType()];
            this.windowDefinition(new type((modelJson || {})[this.windowDefinitionType()]));
            delete this['_model'][this.windowDefinitionType()];
        }
        this.windowDefinition.subscribe(windowDefinition => {
            this.windowDefinitionType(Object.keys(measure_calc_window_definition_1.windowDefinitionsTypesMap).filter(mapItem => windowDefinition instanceof measure_calc_window_definition_1.windowDefinitionsTypesMap[mapItem])[0]);
        });
    }
    getInfo() {
        return _window_definition_1.windowDefinitionSerializationsInfo.concat(currentwindowDefinitionInfo(this));
    }
    equals(def) {
        return (this.isEmpty() && def.isEmpty()) || this.windowDefinition().equals(def.windowDefinition());
    }
    isEmpty() {
        return !this.windowDefinition();
    }
}
exports.WindowDefinition = WindowDefinition;


/***/ }),

/***/ 68951:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataField = exports.IsOlapHierarchyField = exports.IsDateTime = exports.IsTextual = exports.IsNumeric = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const $ = __webpack_require__(65311);
const ko = __webpack_require__(71032);
const serializable_model_1 = __webpack_require__(29591);
const _data_field_1 = __webpack_require__(18577);
let IsNumeric = (dataType) => (['Decimal', 'Float', 'Double', 'Integer'].indexOf(dataType) > -1);
exports.IsNumeric = IsNumeric;
let IsTextual = (dataType) => (['Enum', 'Text'].indexOf(dataType) > -1);
exports.IsTextual = IsTextual;
let IsDateTime = (dataType) => (['DateTime'].indexOf(dataType) > -1);
exports.IsDateTime = IsDateTime;
let IsOlapHierarchyField = dataField => !!dataField.groupIndex && dataField.groupIndex() !== undefined;
exports.IsOlapHierarchyField = IsOlapHierarchyField;
class DataField extends serializable_model_1.SerializableModel {
    constructor(dataFieldJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dataFieldJSON, serializer);
        this.expanded = true;
        this.childNodes = analytics_utils_1.deserializeArray(dataFieldJSON.ChildNodes, (item) => new DataField(item, serializer));
        if (!this.isDataFieldNode() || this.childNodes().length > 0) {
            this.fieldType(undefined);
        }
        this.groupDataItems = $.map(dataFieldJSON.GroupFieldTypes || {}, (type, name) => {
            return {
                dataMember: ko.observable(name),
                fieldType: ko.observable(type),
                displayName: ko.observable(dataFieldJSON.GroupCaptions[dataFieldJSON.GroupDataMembers.indexOf(name)]),
                isConvertible: ko.observable(true),
                isDataFieldNode: ko.observable(true)
            };
        });
        this.defaultNumericFormat = dataFieldJSON.DefaultNumericFormat;
    }
    static isNumeric(dataField) {
        return dataField && (exports.IsNumeric(dataField.fieldType()) || (dataField.fieldType() == 'Custom' && DataField.isOlap(dataField.dataMember())));
    }
    static isDateTime(dataField) {
        return dataField && exports.IsDateTime(dataField.fieldType());
    }
    static olapMarker() {
        return '].[';
    }
    static isOlap(dataMember) {
        return dataMember && ((dataMember.indexOf(DataField.olapMarker()) !== -1)
            || ((dataMember[0] === '[') && (dataMember.indexOf(']') === dataMember.length - 1)));
    }
    static isMeasure(dataField) {
        if (dataField.isAggregate && dataField.isAggregate())
            return true;
        var isOlap = DataField.isOlap(dataField.dataMember());
        return (!isOlap && DataField.isNumeric(dataField)) || (isOlap && DataField.isOrContainMeasures(dataField.dataMember()));
    }
    static isOrContainMeasures(dataMember) {
        return dataMember === '[Measures]' || dataMember.indexOf('[Measures]') !== -1;
    }
    static ifOlapThenOnlyMeasure(dataField) {
        return !DataField.isOlap(dataField.dataMember()) || DataField.isOrContainMeasures(dataField.dataMember());
    }
    static ifOlapThenOnlyDimension(dataField) {
        return !DataField.isOlap(dataField.dataMember()) || !DataField.isOrContainMeasures(dataField.dataMember());
    }
    static isContinous(dataField) {
        return dataField && (DataField.isNumeric(dataField) || dataField.fieldType() === 'DateTime');
    }
    static isOlapHierarchy(dataField) {
        return dataField && !!dataField.nodeType && dataField.nodeType() === 'OlapHierarchy';
    }
    getInfo() {
        return _data_field_1.dataFieldSerializationsInfo;
    }
}
exports.DataField = DataField;


/***/ }),

/***/ 4620:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._baseDataSourceTypesMap = void 0;
const ef_data_source_1 = __webpack_require__(69468);
const excel_data_source_1 = __webpack_require__(94503);
const extract_data_source_1 = __webpack_require__(95130);
const json_data_source_1 = __webpack_require__(32988);
const mongodb_data_source_1 = __webpack_require__(62410);
const object_data_source_1 = __webpack_require__(43407);
const olap_data_source_1 = __webpack_require__(40755);
const sql_data_source_1 = __webpack_require__(66265);
const xpo_data_source_1 = __webpack_require__(86870);
exports._baseDataSourceTypesMap = {
    'ObjectDataSource': object_data_source_1.ObjectDataSource,
    'SqlDataSource': sql_data_source_1.SqlDataSource,
    'OLAPDataSource': olap_data_source_1.OlapDataSource,
    'EFDataSource': ef_data_source_1.EFDataSource,
    'ExcelDataSource': excel_data_source_1.ExcelDataSource,
    'ExtractFileDataSource': extract_data_source_1.ExtractDataSource,
    'JsonDataSource': json_data_source_1.JsonDataSource,
    'XPObjectSource': xpo_data_source_1.XpoDataSource,
    'MongoDBDataSource': mongodb_data_source_1.MongoDBDataSource
};


/***/ }),

/***/ 53955:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CalculatedField = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _calculated_field_1 = __webpack_require__(6070);
class CalculatedField extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _calculated_field_1.calculatedFieldSerializationsInfo;
    }
}
exports.CalculatedField = CalculatedField;


/***/ }),

/***/ 69595:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SqlConnection = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _connection_1 = __webpack_require__(87262);
class SqlConnection extends serializable_model_1.SerializableModel {
    constructor(connectionJSON, serializer = new analytics_utils_1.ModelSerializer()) {
        super(connectionJSON, serializer);
    }
    getInfo() {
        return _connection_1.connectionSerializationsInfo;
    }
}
exports.SqlConnection = SqlConnection;


/***/ }),

/***/ 4431:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataSource = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const calculated_field_1 = __webpack_require__(53955);
class DataSource extends serializable_model_1.TypedSerializableModel {
    constructor(dataSourceJSON = {}, serializer) {
        super(dataSourceJSON, serializer);
        this.hasCalculatedFields = false;
        this.supportDataMembers = false;
        this.hasFilter = false;
        this.calculatedFields = analytics_utils_1.deserializeArray(dataSourceJSON.CalculatedFields, (item) => new calculated_field_1.CalculatedField(item, serializer));
    }
    getJson() {
        return new analytics_utils_1.ModelSerializer({ useRefs: false }).serialize(this);
    }
    getUniqueNamePrefix() {
        return super._getUniqueNamePrefix();
    }
}
exports.DataSource = DataSource;


/***/ }),

/***/ 69468:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EFDataSource = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const data_source_1 = __webpack_require__(4431);
const _ef_data_source_1 = __webpack_require__(6474);
class EFDataSource extends data_source_1.DataSource {
    constructor(dataSourceJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dataSourceJSON, serializer);
        this._tables = ko.observableArray();
        this.hasCalculatedFields = true;
        this.supportDataMembers = true;
    }
    get _isFederationDataProvider() {
        return true;
    }
    getInfo() {
        return _ef_data_source_1.efDataSourceSerializationsInfo;
    }
    getDisplayNamePrefix() {
        return 'DashboardStringId.DefaultEFDataSourceName';
    }
    _getDefaultItemType() {
        return 'EFDataSource';
    }
}
exports.EFDataSource = EFDataSource;


/***/ }),

/***/ 94503:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExcelDataSource = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const data_source_1 = __webpack_require__(4431);
const _excel_data_source_1 = __webpack_require__(32454);
class ExcelDataSource extends data_source_1.DataSource {
    get _isFederationDataProvider() {
        return true;
    }
    constructor(dataSourceJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dataSourceJSON, serializer);
        this.hasCalculatedFields = true;
        this.hasFilter = true;
    }
    getInfo() {
        return _excel_data_source_1.excelDataSourceSerializationsInfo;
    }
    getDisplayNamePrefix() {
        return 'DashboardStringId.DefaultExcelDataSourceName';
    }
    _getDefaultItemType() {
        return 'ExcelDataSource';
    }
}
exports.ExcelDataSource = ExcelDataSource;


/***/ }),

/***/ 95130:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExtractDataSource = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const data_source_1 = __webpack_require__(4431);
const _extract_data_source_1 = __webpack_require__(81592);
class ExtractDataSource extends data_source_1.DataSource {
    get _isFederationDataProvider() {
        return true;
    }
    constructor(dataSourceJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dataSourceJSON, serializer);
        this.hasCalculatedFields = true;
        this.hasFilter = true;
    }
    getInfo() {
        return _extract_data_source_1.extractDataSourceSerializationsInfo;
    }
    getDisplayNamePrefix() {
        return 'DashboardStringId.DefaultFileExtractDataSourceName';
    }
    _getDefaultItemType() {
        return 'ExtractFileDataSource';
    }
}
exports.ExtractDataSource = ExtractDataSource;


/***/ }),

/***/ 71010:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Source = exports.ContextItem = exports.QueryNode = exports.FederationDataSource = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const serializable_model_1 = __webpack_require__(29591);
const data_source_1 = __webpack_require__(4431);
const _federation_data_source_1 = __webpack_require__(72439);
const _data_source_factory_base_1 = __webpack_require__(4620);
class FederationDataSource extends data_source_1.DataSource {
    constructor(dataSourceJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dataSourceJSON, serializer);
        this.queries = analytics_utils_1.deserializeArray(dataSourceJSON.Queries, json => new QueryNode(json, serializer));
        this.context = analytics_utils_1.deserializeArray(dataSourceJSON.Context, json => new ContextItem(json, serializer));
        this.sources = analytics_utils_1.deserializeArray(dataSourceJSON.Sources, json => new Source(json, serializer));
        this.hasCalculatedFields = true;
        this.supportDataMembers = true;
    }
    get _isFederationDataProvider() {
        return true;
    }
    getInfo() {
        return _federation_data_source_1.federationDataSourceSerializationsInfo;
    }
    getDisplayNamePrefix() {
        return 'DashboardStringId.DefaultFederationDataSourceName';
    }
    _getDefaultItemType() {
        return 'FederationDataSource';
    }
}
exports.FederationDataSource = FederationDataSource;
class QueryNode extends serializable_model_1.SerializableModel {
    constructor(json = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(json, serializer);
    }
    get queryType() { return this._queryType(); }
    getInfo() {
        return _federation_data_source_1.queryNodeSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'QueryNode';
    }
}
exports.QueryNode = QueryNode;
class ContextItem extends serializable_model_1.SerializableModel {
    constructor(json = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(json, serializer);
        this.source = ko.observable(null);
        for (let key in _data_source_factory_base_1._baseDataSourceTypesMap) {
            var dataSourceJson = json[key];
            if (dataSourceJson !== undefined) {
                this.source(new _data_source_factory_base_1._baseDataSourceTypesMap[key](dataSourceJson || {}));
                break;
            }
        }
    }
    getInfo() {
        return _federation_data_source_1.contextItemSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'ContextItem';
    }
}
exports.ContextItem = ContextItem;
class Source extends serializable_model_1.SerializableModel {
    constructor(json = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(json, serializer);
    }
    getInfo() {
        return _federation_data_source_1.sourceSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'Source';
    }
}
exports.Source = Source;


/***/ }),

/***/ 32988:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JsonDataSource = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const data_source_1 = __webpack_require__(4431);
const _json_data_source_1 = __webpack_require__(20314);
class JsonDataSource extends data_source_1.DataSource {
    constructor(dataSourceJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dataSourceJSON, serializer);
        this.hasCalculatedFields = true;
        this.hasFilter = true;
    }
    get _isFederationDataProvider() {
        return true;
    }
    getInfo() {
        return _json_data_source_1.jsonDataSourceSerializationsInfo;
    }
    getDisplayNamePrefix() {
        return 'DashboardStringId.DefaultJsonDataSourceName';
    }
    _getDefaultItemType() {
        return 'JsonDataSource';
    }
}
exports.JsonDataSource = JsonDataSource;


/***/ }),

/***/ 6070:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.calculatedFieldSerializationsInfo = exports.calculatedFieldType = exports.calcFieldExpressionEditable = exports.calcFieldExpression = exports.calcFieldDataMember = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.calcFieldDataMember = { propertyName: 'dataMember', modelName: '@DataMember' };
exports.calcFieldExpression = { propertyName: 'expression', modelName: '@Expression', defaultVal: '' };
exports.calcFieldExpressionEditable = { propertyName: 'expressionEditable', displayName: 'DashboardStringId.CalculationTypeExpression' };
exports.calculatedFieldType = {
    propertyName: 'fieldType', modelName: '@DataType', displayName: 'DevExpressWebStringId.CalculatedFieldDataType', defaultVal: 'String', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Auto': 'DashboardStringId.CalculatedFieldTypeAuto',
        'String': 'DashboardStringId.CalculatedFieldTypeString',
        'Integer': 'DashboardStringId.CalculatedFieldTypeLong',
        'Double': 'DashboardStringId.CalculatedFieldTypeDouble',
        'Decimal': 'DashboardStringId.CalculatedFieldTypeDecimal',
        'Boolean': 'DashboardStringId.CalculatedFieldTypeBoolean',
        'DateTime': 'DashboardStringId.CalculatedFieldTypeDateTime',
        'Object': 'DashboardStringId.CalculatedFieldTypeObject'
    }
};
exports.calculatedFieldSerializationsInfo = [_base_metadata_1.itemType, _base_metadata_1.name, exports.calcFieldExpression, exports.calculatedFieldType, exports.calcFieldDataMember];


/***/ }),

/***/ 87262:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.connectionSerializationsInfo = void 0;
const _base_metadata_1 = __webpack_require__(17916);
var fromAppConfig = { propertyName: 'fromAppConfig', modelName: '@FromAppConfig' };
exports.connectionSerializationsInfo = [_base_metadata_1.name, fromAppConfig];


/***/ }),

/***/ 18577:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dataFieldSerializationsInfo = exports.dataFieldIsExpressionsNode = exports.dataFieldIsDataTableNode = exports.dataFieldIsDataSourceNode = exports.dataFieldIsCorruptedCalcField = exports.dataFieldIsList = exports.dataFieldIsComparable = exports.dataFieldIsConvertible = exports.dataFieldIsDataMemberNode = exports.dataFieldIsAggregate = exports.dataFieldIsDataFieldNode = exports.dataFieldFieldType = exports.dataFieldDisplayName = exports.dataFieldChildNodes = exports.groupIndex = exports.nodeType = exports.dataFieldName = exports.dataFieldDataMember = void 0;
const ko = __webpack_require__(71032);
const _base_metadata_1 = __webpack_require__(17916);
exports.dataFieldDataMember = { propertyName: 'dataMember', modelName: 'DataMember' };
exports.dataFieldName = { propertyName: 'name', modelName: 'Name' };
exports.nodeType = { propertyName: 'nodeType', modelName: 'NodeType' };
exports.groupIndex = { propertyName: 'groupIndex', modelName: 'GroupIndex' };
exports.dataFieldChildNodes = { propertyName: 'childNodes', modelName: 'ChildNodes', array: true };
exports.dataFieldDisplayName = { propertyName: 'displayName', modelName: 'DisplayName' };
exports.dataFieldFieldType = {
    propertyName: 'fieldType', modelName: 'FieldType',
    defaultVal: 'Unknown',
    from: (value) => ko.observable(value === 'String' ? 'Text' : value)
};
exports.dataFieldIsDataFieldNode = { propertyName: 'isDataFieldNode', modelName: 'IsDataFieldNode', from: _base_metadata_1.parseBool };
exports.dataFieldIsAggregate = { propertyName: 'isAggregate', modelName: 'IsAggregateCalculatedField', from: _base_metadata_1.parseBool };
exports.dataFieldIsDataMemberNode = { propertyName: 'isDataMemberNode', modelName: 'IsDataMemberNode', from: _base_metadata_1.parseBool };
exports.dataFieldIsConvertible = { propertyName: 'isConvertible', modelName: 'IsConvertible', from: _base_metadata_1.parseBool };
exports.dataFieldIsComparable = { propertyName: 'isComparable', modelName: 'IsComparable', from: _base_metadata_1.parseBool };
exports.dataFieldIsList = { propertyName: 'isList', modelName: 'IsList', from: _base_metadata_1.parseBool };
exports.dataFieldIsCorruptedCalcField = { propertyName: 'isCorruptedCalcField', modelName: 'IsCorruptedCalculatedField', from: _base_metadata_1.parseBool };
exports.dataFieldIsDataSourceNode = { propertyName: 'isDataSourceNode', modelName: 'IsDataSourceNode', from: _base_metadata_1.parseBool };
exports.dataFieldIsDataTableNode = { propertyName: 'isDataTableNode', modelName: 'IsDataTableNode', from: _base_metadata_1.parseBool };
exports.dataFieldIsExpressionsNode = { propertyName: 'isExpressionsNode', modelName: 'IsExpressionsNode', from: _base_metadata_1.parseBool };
exports.dataFieldSerializationsInfo = [exports.dataFieldDataMember, exports.dataFieldName, exports.dataFieldChildNodes, exports.dataFieldDisplayName, exports.dataFieldFieldType, exports.dataFieldIsDataMemberNode, exports.dataFieldIsDataFieldNode, exports.dataFieldIsConvertible, exports.dataFieldIsComparable, exports.nodeType, exports.groupIndex, exports.dataFieldIsAggregate, exports.dataFieldIsList, exports.dataFieldIsCorruptedCalcField, exports.dataFieldIsDataSourceNode, exports.dataFieldIsDataTableNode, exports.dataFieldIsExpressionsNode];


/***/ }),

/***/ 53012:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dataSourceSerializationsInfo = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.dataSourceSerializationsInfo = [_base_metadata_1.itemType, _base_metadata_1.name, _base_metadata_1.componentName, { propertyName: 'calculatedFields', modelName: 'CalculatedFields', array: true }];


/***/ }),

/***/ 6474:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.efDataSourceSerializationsInfo = void 0;
const _data_source_1 = __webpack_require__(53012);
exports.efDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo;


/***/ }),

/***/ 32454:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.excelDataSourceSerializationsInfo = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _data_source_1 = __webpack_require__(53012);
exports.excelDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo.concat([_base_metadata_1.filter]);


/***/ }),

/***/ 81592:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.extractDataSourceSerializationsInfo = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _data_source_1 = __webpack_require__(53012);
exports.extractDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo.concat([_base_metadata_1.filter]);


/***/ }),

/***/ 72439:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.federationDataSourceSerializationsInfo = exports.sources = exports.sourceSerializationsInfo = exports.dataMemberProperty = exports.dataSourceProperty = exports.context = exports.contextItemSerializationsInfo = exports.idProperty = exports.queryNodes = exports.queryNodeSerializationsInfo = exports.queryTypeProperty = exports.aliasProperty = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _data_source_1 = __webpack_require__(53012);
exports.aliasProperty = { propertyName: 'alias', modelName: '@Alias' };
exports.queryTypeProperty = { propertyName: '_queryType', modelName: '@QueryType' };
exports.queryNodeSerializationsInfo = [_base_metadata_1.itemType, exports.aliasProperty, exports.queryTypeProperty];
exports.queryNodes = { propertyName: 'queries', modelName: 'Queries', array: true };
exports.idProperty = { propertyName: 'id', modelName: '@ID' };
exports.contextItemSerializationsInfo = [_base_metadata_1.itemType, exports.idProperty];
exports.context = { propertyName: 'context', modelName: 'Context', array: true };
exports.dataSourceProperty = { propertyName: 'dataSource', modelName: 'DataSource' };
exports.dataMemberProperty = { propertyName: 'dataMember', modelName: 'DataMember' };
exports.sourceSerializationsInfo = [_base_metadata_1.itemType, exports.dataSourceProperty, exports.dataMemberProperty, _base_metadata_1.name];
exports.sources = { propertyName: 'sources', modelName: 'Sources', array: true };
exports.federationDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo.concat([exports.queryNodes, exports.context, exports.sources]);


/***/ }),

/***/ 20314:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.jsonDataSourceSerializationsInfo = void 0;
const analytics_data_1 = __webpack_require__(14376);
const ko = __webpack_require__(71032);
const _base_metadata_1 = __webpack_require__(17916);
const _data_source_1 = __webpack_require__(53012);
exports.jsonDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo.concat([
    _base_metadata_1.filter,
    { propertyName: 'connectionName', modelName: '@ConnectionName' },
    { propertyName: 'rootElement', modelName: '@RootElement', defaultVal: 'root' },
    {
        propertyName: 'schema', modelName: 'Schema',
        from: (model, serializer) => ko.observable(analytics_data_1.JsonSchemaRootNode.from(model, serializer)),
        toJsonObject: analytics_data_1.JsonSchemaRootNode.toJson,
        category: _base_metadata_1.PropertyCategory.NoUpdateByObservableValue
    }
]);


/***/ }),

/***/ 53970:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mongoDBQuerySerializationsInfo = exports.collectionNameProperty = exports.mongoQueryAliasProperty = exports.mongoDBDataSourceSerializationsInfo = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _data_source_1 = __webpack_require__(53012);
exports.mongoDBDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo.concat([]);
exports.mongoQueryAliasProperty = { propertyName: 'alias', modelName: '@Alias' };
exports.collectionNameProperty = { propertyName: 'collectionName', modelName: '@CollectionName' };
exports.mongoDBQuerySerializationsInfo = [_base_metadata_1.itemType, exports.mongoQueryAliasProperty, exports.collectionNameProperty];


/***/ }),

/***/ 84625:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.objectDataSourceSerializationsInfo = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _data_source_1 = __webpack_require__(53012);
exports.objectDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo.concat([_base_metadata_1.filter]);


/***/ }),

/***/ 96211:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.olapDataSourceSerializationsInfo = exports.connectionName = void 0;
const _data_source_1 = __webpack_require__(53012);
exports.connectionName = { propertyName: 'connectionName', modelName: '@ConnectionName' };
exports.olapDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo.concat([exports.connectionName]);


/***/ }),

/***/ 80148:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sqlDataSourceSerializationsInfo = exports.connection = exports.selectedTables = exports.queries = void 0;
const connection_1 = __webpack_require__(69595);
const _data_source_1 = __webpack_require__(53012);
exports.queries = { propertyName: 'queries', modelName: 'Queries', array: true };
exports.selectedTables = { propertyName: 'selectedTables', modelName: 'SelectedTables', array: true };
exports.connection = { propertyName: 'connection', modelName: 'Connection', type: connection_1.SqlConnection };
exports.sqlDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo.concat([exports.queries, exports.connection]);


/***/ }),

/***/ 75833:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.xpoDataSourceSerializationsInfo = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _data_source_1 = __webpack_require__(53012);
exports.xpoDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo.concat([_base_metadata_1.filter, _base_metadata_1.nameTag]);


/***/ }),

/***/ 62410:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MongoDBQuery = exports.MongoDBDataSource = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const _knockout_utils_1 = __webpack_require__(4437);
const serializable_model_1 = __webpack_require__(29591);
const data_source_1 = __webpack_require__(4431);
const _mongodb_data_source_1 = __webpack_require__(53970);
class MongoDBDataSource extends data_source_1.DataSource {
    constructor(dataSourceJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dataSourceJSON, serializer);
        this.queries = analytics_utils_1.deserializeArray(dataSourceJSON.Queries, json => new MongoDBQuery(json, serializer));
        this.hasCalculatedFields = true;
        this.supportDataMembers = true;
    }
    get _isFederationDataProvider() {
        return true;
    }
    getInfo() {
        return _mongodb_data_source_1.mongoDBDataSourceSerializationsInfo;
    }
    getDisplayNamePrefix() {
        return 'DashboardStringId.DefaultMongoDBDataSourceName';
    }
    _getDefaultItemType() {
        return 'MongoDBDataSource';
    }
}
exports.MongoDBDataSource = MongoDBDataSource;
class MongoDBQuery extends serializable_model_1.SerializableModel {
    constructor(json = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(json, serializer);
        this._actualName = _knockout_utils_1.safeComputed({ alias: this.alias, collectionName: this.collectionName }, (args) => {
            return args.alias || args.collectionName;
        });
    }
    getInfo() {
        return _mongodb_data_source_1.mongoDBQuerySerializationsInfo;
    }
    _getDefaultItemType() {
        return 'Query';
    }
}
exports.MongoDBQuery = MongoDBQuery;


/***/ }),

/***/ 43407:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ObjectDataSource = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const data_source_1 = __webpack_require__(4431);
const _object_data_source_1 = __webpack_require__(84625);
class ObjectDataSource extends data_source_1.DataSource {
    get _isFederationDataProvider() {
        return true;
    }
    constructor(dataSourceJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dataSourceJSON, serializer);
        this.hasCalculatedFields = true;
        this.hasFilter = true;
    }
    getInfo() {
        return _object_data_source_1.objectDataSourceSerializationsInfo;
    }
    getDisplayNamePrefix() {
        return 'DashboardStringId.DefaultObjectDataSourceName';
    }
    _getDefaultItemType() {
        return 'ObjectDataSource';
    }
}
exports.ObjectDataSource = ObjectDataSource;


/***/ }),

/***/ 40755:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OlapDataSource = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const data_source_1 = __webpack_require__(4431);
const _olap_data_source_1 = __webpack_require__(96211);
class OlapDataSource extends data_source_1.DataSource {
    constructor(dataSourceJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dataSourceJSON, serializer);
    }
    get _isFederationDataProvider() {
        return false;
    }
    getInfo() {
        return _olap_data_source_1.olapDataSourceSerializationsInfo;
    }
    getDisplayNamePrefix() {
        return 'DashboardStringId.DefaultOlapDataSourceName';
    }
    _getDefaultItemType() {
        return 'OLAPDataSource';
    }
}
exports.OlapDataSource = OlapDataSource;


/***/ }),

/***/ 66265:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SqlDataSource = void 0;
const analytics_data_1 = __webpack_require__(14376);
const analytics_utils_1 = __webpack_require__(25733);
const utils_1 = __webpack_require__(31564);
const data_source_1 = __webpack_require__(4431);
const _sql_data_source_1 = __webpack_require__(80148);
class SqlDataSource extends data_source_1.DataSource {
    constructor(dataSourceJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dataSourceJSON, serializer);
        this.queries = analytics_utils_1.deserializeArray(dataSourceJSON.Queries, item => {
            if (item['@Type'] === utils_1.SqlQueryType.customSqlQuery) {
                return new analytics_data_1.CustomSqlQuery(item, null, serializer);
            }
            else if (item['@Type'] === utils_1.SqlQueryType.tableQuery) {
                return new analytics_data_1.TableQuery(item, null, serializer);
            }
            else if (item['@Type'] === utils_1.SqlQueryType.storedProcQuery) {
                return new analytics_data_1.StoredProcQuery(item, null, serializer);
            }
            else {
                throw new Error('Unknown sql query type.');
            }
        });
        this.hasCalculatedFields = true;
        this.supportDataMembers = true;
    }
    get _isFederationDataProvider() {
        return true;
    }
    getInfo() {
        return _sql_data_source_1.sqlDataSourceSerializationsInfo;
    }
    getDisplayNamePrefix() {
        return 'DashboardStringId.DefaultSqlDataSourceName';
    }
    _getDefaultItemType() {
        return 'SqlDataSource';
    }
}
exports.SqlDataSource = SqlDataSource;


/***/ }),

/***/ 86870:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.XpoDataSource = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const data_source_1 = __webpack_require__(4431);
const _xpo_data_source_1 = __webpack_require__(75833);
class XpoDataSource extends data_source_1.DataSource {
    get _isFederationDataProvider() {
        return true;
    }
    constructor(dataSourceJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dataSourceJSON, serializer);
        this.hasFilter = true;
        this.hasCalculatedFields = true;
    }
    getInfo() {
        return _xpo_data_source_1.xpoDataSourceSerializationsInfo;
    }
    getDisplayNamePrefix() {
        return 'DashboardStringId.DefaultXpoDataSourceName';
    }
    _getDefaultItemType() {
        return 'XPObjectSource';
    }
}
exports.XpoDataSource = XpoDataSource;


/***/ }),

/***/ 99253:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DisposableObject = void 0;
class DisposableObject {
    constructor() {
        this._disposables = [];
        this.disposed = false;
    }
    toDispose(...disposables) {
        this._disposables.push(...disposables);
    }
    dispose() {
        this._disposables.forEach(disposable => disposable.dispose());
        this._disposables = [];
        this.disposed = true;
    }
}
exports.DisposableObject = DisposableObject;


/***/ }),

/***/ 76114:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FilterDateType = exports.PointLabelContentTypeDictionary = exports.getPointLabelContentTypeValues = exports.serializePointLabelContentType = exports.parsePointLabelContentType = exports.PointLabelContentType = void 0;
const _common_1 = __webpack_require__(29009);
var PointLabelContentType;
(function (PointLabelContentType) {
    PointLabelContentType[PointLabelContentType["None"] = 0] = "None";
    PointLabelContentType[PointLabelContentType["Argument"] = 1] = "Argument";
    PointLabelContentType[PointLabelContentType["SeriesName"] = 2] = "SeriesName";
    PointLabelContentType[PointLabelContentType["Value"] = 4] = "Value";
    PointLabelContentType[PointLabelContentType["Percent"] = 8] = "Percent";
})(PointLabelContentType = exports.PointLabelContentType || (exports.PointLabelContentType = {}));
let parsePointLabelContentType = (typeModel) => {
    return _common_1.parseFlagsEnumType(typeModel, PointLabelContentType.None, exports.PointLabelContentTypeDictionary);
};
exports.parsePointLabelContentType = parsePointLabelContentType;
let serializePointLabelContentType = (val) => {
    return _common_1.serializeFlagsEnumType(val, 'None', exports.PointLabelContentTypeDictionary);
};
exports.serializePointLabelContentType = serializePointLabelContentType;
let getPointLabelContentTypeValues = (val) => {
    return _common_1.getFlagsEnumTypeValues(val, exports.PointLabelContentTypeDictionary, 'value');
};
exports.getPointLabelContentTypeValues = getPointLabelContentTypeValues;
exports.PointLabelContentTypeDictionary = {
    'Argument': PointLabelContentType.Argument,
    'SeriesName': PointLabelContentType.SeriesName,
    'Value': PointLabelContentType.Value,
    'Percent': PointLabelContentType.Percent
};
var FilterDateType;
(function (FilterDateType) {
    FilterDateType[FilterDateType["None"] = 0] = "None";
    FilterDateType[FilterDateType["BeyondThisYear"] = 2] = "BeyondThisYear";
    FilterDateType[FilterDateType["LaterThisYear"] = 4] = "LaterThisYear";
    FilterDateType[FilterDateType["LaterThisMonth"] = 8] = "LaterThisMonth";
    FilterDateType[FilterDateType["LaterThisWeek"] = 16] = "LaterThisWeek";
    FilterDateType[FilterDateType["NextWeek"] = 32] = "NextWeek";
    FilterDateType[FilterDateType["Tomorrow"] = 64] = "Tomorrow";
    FilterDateType[FilterDateType["Today"] = 128] = "Today";
    FilterDateType[FilterDateType["Yesterday"] = 256] = "Yesterday";
    FilterDateType[FilterDateType["EarlierThisWeek"] = 512] = "EarlierThisWeek";
    FilterDateType[FilterDateType["LastWeek"] = 1024] = "LastWeek";
    FilterDateType[FilterDateType["EarlierThisMonth"] = 2048] = "EarlierThisMonth";
    FilterDateType[FilterDateType["EarlierThisYear"] = 4096] = "EarlierThisYear";
    FilterDateType[FilterDateType["PriorThisYear"] = 8192] = "PriorThisYear";
    FilterDateType[FilterDateType["Empty"] = 16384] = "Empty";
    FilterDateType[FilterDateType["Beyond"] = 131072] = "Beyond";
    FilterDateType[FilterDateType["ThisWeek"] = 262144] = "ThisWeek";
    FilterDateType[FilterDateType["ThisMonth"] = 524288] = "ThisMonth";
    FilterDateType[FilterDateType["MonthAfter1"] = 1048576] = "MonthAfter1";
    FilterDateType[FilterDateType["MonthAfter2"] = 2097152] = "MonthAfter2";
    FilterDateType[FilterDateType["MonthAgo1"] = 4194304] = "MonthAgo1";
    FilterDateType[FilterDateType["MonthAgo2"] = 8388608] = "MonthAgo2";
    FilterDateType[FilterDateType["MonthAgo3"] = 16777216] = "MonthAgo3";
    FilterDateType[FilterDateType["MonthAgo4"] = 33554432] = "MonthAgo4";
    FilterDateType[FilterDateType["MonthAgo5"] = 67108864] = "MonthAgo5";
    FilterDateType[FilterDateType["MonthAgo6"] = 134217728] = "MonthAgo6";
    FilterDateType[FilterDateType["Earlier"] = 268435456] = "Earlier";
})(FilterDateType = exports.FilterDateType || (exports.FilterDateType = {}));


/***/ }),

/***/ 53398:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardFormatRuleRowElement = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _card_format_rule_row_element_1 = __webpack_require__(47976);
class CardFormatRuleRowElement extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _card_format_rule_row_element_1.cardFormatRuleRowElementSerializationsInfo;
    }
}
exports.CardFormatRuleRowElement = CardFormatRuleRowElement;


/***/ }),

/***/ 50075:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardItemDeltaFormatRule = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const card_item_format_rule_base_1 = __webpack_require__(89447);
const _card_item_delta_format_rule_1 = __webpack_require__(2357);
class CardItemDeltaFormatRule extends card_item_format_rule_base_1.CardItemFormatRuleBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _card_item_delta_format_rule_1.cardItemDeltaFormatRuleSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'CardItemDeltaFormatRule';
    }
}
exports.CardItemDeltaFormatRule = CardItemDeltaFormatRule;


/***/ }),

/***/ 89447:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardItemFormatRuleBase = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const dashboard_item_format_rule_1 = __webpack_require__(40923);
class CardItemFormatRuleBase extends dashboard_item_format_rule_1.DashboardItemFormatRule {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.layoutItemApplyTo = ko.pureComputed({
            read: () => {
                return this.cardLayoutElement.elementTypeApplyTo();
            },
            write: (newLayoutElement) => {
                if (!(newLayoutElement === 'Dimension' || newLayoutElement === 'Text'))
                    this.cardLayoutElement.elementTypeApplyTo(newLayoutElement);
            }
        });
    }
}
exports.CardItemFormatRuleBase = CardItemFormatRuleBase;


/***/ }),

/***/ 22233:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardItemFormatRule = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const card_item_format_rule_base_1 = __webpack_require__(89447);
const _card_item_format_rule_1 = __webpack_require__(47729);
class CardItemFormatRule extends card_item_format_rule_base_1.CardItemFormatRuleBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _card_item_format_rule_1.cardItemFormatRuleSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'CardItemFormatRule';
    }
}
exports.CardItemFormatRule = CardItemFormatRule;


/***/ }),

/***/ 56639:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CellsItemFormatRule = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const dashboard_item_format_rule_1 = __webpack_require__(40923);
const _cells_item_format_rule_1 = __webpack_require__(42079);
class CellsItemFormatRule extends dashboard_item_format_rule_1.DashboardItemFormatRule {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.dataItemApplyToName = ko.computed({
            read: () => this._dataItemApplyToName() || this.dataItemName(),
            write: (val) => this._dataItemApplyToName(val)
        });
    }
    getInfo() {
        return _cells_item_format_rule_1.cellsItemFormatRuleSerializationsInfo;
    }
}
exports.CellsItemFormatRule = CellsItemFormatRule;


/***/ }),

/***/ 49269:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChartItemFormatRuleBase = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const dashboard_item_format_rule_1 = __webpack_require__(40923);
const _dashboard_item_format_rule_1 = __webpack_require__(41938);
const color_style_settings_1 = __webpack_require__(28872);
class ChartItemFormatRuleBase extends dashboard_item_format_rule_1.DashboardItemFormatRule {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        if (!this.condition()) {
            _dashboard_item_format_rule_1.conditionTypes
                .map(type => type.propertyName)
                .forEach(propertyName => this[propertyName] && this[propertyName].styleSettings && this[propertyName].styleSettings(new color_style_settings_1.ColorStyleSettings({})));
        }
    }
}
exports.ChartItemFormatRuleBase = ChartItemFormatRuleBase;


/***/ }),

/***/ 3267:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChartItemFormatRule = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const chart_item_format_rule_base_1 = __webpack_require__(49269);
const _chart_item_format_rule_1 = __webpack_require__(78320);
class ChartItemFormatRule extends chart_item_format_rule_base_1.ChartItemFormatRuleBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    _getDefaultItemType() {
        return 'ChartItemFormatRule';
    }
    getInfo() {
        return _chart_item_format_rule_1.chartItemFormatRuleSerializationsInfo;
    }
}
exports.ChartItemFormatRule = ChartItemFormatRule;


/***/ }),

/***/ 92610:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatConditionAverage = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const format_condition_style_base_1 = __webpack_require__(99872);
const _format_condition_average_1 = __webpack_require__(97952);
class FormatConditionAverage extends format_condition_style_base_1.FormatConditionStyleBase {
    constructor(modelJson, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.getSpecificType = () => this.averageType();
        this.setSpecificType = (type) => {
            this.averageType(type);
        };
    }
    _getInfoButStyleSettings() {
        return _format_condition_average_1.formatConditionAverageSerializationsInfo;
    }
}
exports.FormatConditionAverage = FormatConditionAverage;


/***/ }),

/***/ 71697:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatConditionBarOptions = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _format_condition_bar_options_1 = __webpack_require__(98602);
class FormatConditionBarOptions extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _format_condition_bar_options_1.formatConditionBarOptionsSerializationsInfo;
    }
}
exports.FormatConditionBarOptions = FormatConditionBarOptions;


/***/ }),

/***/ 62270:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatConditionBar = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _format_rules_common_1 = __webpack_require__(94102);
const bar_style_settings_1 = __webpack_require__(9661);
const format_condition_min_max_base_1 = __webpack_require__(65661);
const _format_condition_bar_1 = __webpack_require__(93881);
class FormatConditionBar extends format_condition_min_max_base_1.FormatConditionMinMaxBase {
    constructor(modelJson, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.currentStyleSettingsType = ko.observable('Positive');
        this.getSpecificType = () => null;
        this.setSpecificType = (type) => { };
        this.negativeStyleSettings(new bar_style_settings_1.BarStyleSettings(modelJson && modelJson[_format_condition_bar_1.barNegativeStyleSettings.modelName] || {}));
        if (modelJson) {
            delete modelJson[_format_condition_bar_1.barNegativeStyleSettings.modelName];
        }
        this.currentStyleSettings = ko.computed({
            read: () => this.currentStyleSettingsType() == 'Positive' ? this.styleSettings() : this.negativeStyleSettings(),
            write: value => this.currentStyleSettingsType() == 'Positive' ? this.styleSettings(value) : this.negativeStyleSettings(value)
        });
    }
    get _isApplyToRowColumnRestricted() { return true; }
    _getInfoButStyleSettings() {
        return _format_condition_bar_1.formatConditionBarSerializationsInfo;
    }
    _getStyleSettingsInfo() {
        return Object.assign(Object.assign({}, _format_rules_common_1.styleSettings), { modelName: 'StyleSettings', type: bar_style_settings_1.BarStyleSettings });
    }
    _getDefaultStyleSettingsType() {
        return 'BarStyleSettings';
    }
    init() {
        super.init();
        if (this.negativeStyleSettings()) {
            this.negativeStyleSettings().init();
        }
        this.isEmpty(false);
    }
}
exports.FormatConditionBar = FormatConditionBar;


/***/ }),

/***/ 51251:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatConditionBase = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const serializable_model_1 = __webpack_require__(29591);
const _format_condition_base_1 = __webpack_require__(84400);
class FormatConditionBase extends serializable_model_1.SerializableModel {
    constructor(modelJson, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson || {}, serializer);
        this.dataType = ko.observable();
        this.dateTimeGroupInterval = ko.observable();
        this._empty = true;
        this.isEmpty = ko.observable();
        this.isEmpty(!modelJson);
    }
    get _isApplyToRowColumnRestricted() { return false; }
    getInfo() {
        return _format_condition_base_1.formatConditionBaseSerializationsInfo;
    }
    isValid() {
        return true;
    }
    isRange() {
        return false;
    }
    isGradient() {
        return false;
    }
    init() {
        this.isEmpty(false);
    }
}
exports.FormatConditionBase = FormatConditionBase;


/***/ }),

/***/ 9426:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatConditionDateOccurring = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const format_condition_style_base_1 = __webpack_require__(99872);
const _format_condition_date_occuring_1 = __webpack_require__(30692);
class FormatConditionDateOccurring extends format_condition_style_base_1.FormatConditionStyleBase {
    constructor(modelJson, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.getSpecificType = () => null;
        this.setSpecificType = (type) => { };
    }
    _getInfoButStyleSettings() {
        return _format_condition_date_occuring_1.formatConditionDateOccurringSerializationsInfo;
    }
}
exports.FormatConditionDateOccurring = FormatConditionDateOccurring;


/***/ }),

/***/ 92267:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatConditionExpression = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const format_condition_style_base_1 = __webpack_require__(99872);
const _format_condition_expression_1 = __webpack_require__(29786);
class FormatConditionExpression extends format_condition_style_base_1.FormatConditionStyleBase {
    constructor(modelJson, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.getSpecificType = () => null;
        this.setSpecificType = (type) => { };
    }
    _getInfoButStyleSettings() {
        return _format_condition_expression_1.formatConditionExpressionSerializationsInfo;
    }
}
exports.FormatConditionExpression = FormatConditionExpression;


/***/ }),

/***/ 65661:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatConditionMinMaxBase = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const format_condition_style_base_1 = __webpack_require__(99872);
const _format_condition_min_max_base_1 = __webpack_require__(58053);
class FormatConditionMinMaxBase extends format_condition_style_base_1.FormatConditionStyleBase {
    constructor(modelJson, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    _getInfoButStyleSettings() {
        return _format_condition_min_max_base_1.formatConditionMinMaxBaseSerializationsInfo;
    }
}
exports.FormatConditionMinMaxBase = FormatConditionMinMaxBase;


/***/ }),

/***/ 99872:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatConditionStyleBase = exports.currentStyleSettingsInfo = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _format_rules_common_1 = __webpack_require__(94102);
const _style_settings_utils_1 = __webpack_require__(67172);
const format_condition_base_1 = __webpack_require__(51251);
let currentStyleSettingsInfo = (styleSettingsType) => {
    return !styleSettingsType ? undefined : Object.assign(Object.assign({}, _format_rules_common_1.styleSettings), { modelName: styleSettingsType(), type: _style_settings_utils_1.styleSettingsTypesMap[styleSettingsType()] });
};
exports.currentStyleSettingsInfo = currentStyleSettingsInfo;
class FormatConditionStyleBase extends format_condition_base_1.FormatConditionBase {
    constructor(modelJson, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.styleSettings = ko.observable();
        this._styleSettingsType = ko.observable();
        this._styleSettingsType(_style_settings_utils_1.styleSettingsTypes.filter(mapItem => !!modelJson && modelJson[mapItem])[0] || this._getDefaultStyleSettingsType());
        let styleSettingsModelName = this._getStyleSettingsInfo().modelName;
        let styleSettingsJson = (modelJson || {})[styleSettingsModelName];
        this.styleSettings(new _style_settings_utils_1.styleSettingsTypesMap[this._styleSettingsType()](styleSettingsJson));
        delete this['_model'][styleSettingsModelName];
        this.styleSettings.subscribe(styleSettings => {
            this._styleSettingsType(_style_settings_utils_1.styleSettingsTypes.filter(mapItem => styleSettings instanceof _style_settings_utils_1.styleSettingsTypesMap[mapItem])[0]);
        });
    }
    getInfo() {
        let styleSettingsInfo = this._getStyleSettingsInfo();
        return this._getInfoButStyleSettings().concat(!styleSettingsInfo ? [] : [styleSettingsInfo]);
    }
    _getStyleSettingsInfo() {
        return exports.currentStyleSettingsInfo(this._styleSettingsType);
    }
    _getDefaultStyleSettingsType() {
        return 'AppearanceSettings';
    }
    getDefaultStyleSettingsType() {
        return this._getDefaultStyleSettingsType();
    }
    isValid() {
        return super.isValid();
    }
    init() {
        if (this.styleSettings()) {
            this.styleSettings().init();
        }
        this.isEmpty(false);
    }
}
exports.FormatConditionStyleBase = FormatConditionStyleBase;


/***/ }),

/***/ 2407:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatConditionTopBottom = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const format_condition_style_base_1 = __webpack_require__(99872);
const _format_condition_top_bottom_1 = __webpack_require__(79380);
class FormatConditionTopBottom extends format_condition_style_base_1.FormatConditionStyleBase {
    constructor(modelJson, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.getSpecificType = () => this.topBottom();
        this.setSpecificType = (type) => {
            this.topBottom(type);
        };
        this._actualRankType = ko.pureComputed({
            read: () => this.rankType() === 'Automatic' ? 'Number' : this.rankType(),
            write: value => this.rankType(value)
        });
    }
    _getInfoButStyleSettings() {
        return _format_condition_top_bottom_1.formatConditionTopBottomSerializationsInfo;
    }
}
exports.FormatConditionTopBottom = FormatConditionTopBottom;


/***/ }),

/***/ 32420:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatConditionValue = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const _parameters_helper_1 = __webpack_require__(57914);
const _format_rules_common_1 = __webpack_require__(94102);
const format_condition_style_base_1 = __webpack_require__(99872);
const _format_condition_value_1 = __webpack_require__(57912);
class FormatConditionValue extends format_condition_style_base_1.FormatConditionStyleBase {
    constructor(modelJson, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.getSpecificType = () => this.condition();
        this.setSpecificType = (type) => {
            this.condition(type);
            if (!this.value1.type()) {
                this.value1.type(_format_rules_common_1.fieldTypes[this.dataType()]);
                var defaultValue = _parameters_helper_1.ParameterHelper.convertSingleValue(null, this.value1.type());
                if (this.value1.type() === 'System.String' && defaultValue === undefined) {
                    defaultValue = '';
                }
                this.value1.value(defaultValue);
            }
            if (type.toLowerCase().indexOf('between') !== -1) {
                if (!this.value2.type()) {
                    this.value2.value(this.value1.value());
                    this.value2.type(this.value1.type());
                }
            }
            else {
                this.value2.type(null);
            }
        };
    }
    _getInfoButStyleSettings() {
        return _format_condition_value_1.formatConditionValueSerializationsInfo;
    }
}
exports.FormatConditionValue = FormatConditionValue;


/***/ }),

/***/ 97952:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatConditionAverageSerializationsInfo = exports.averageType = void 0;
const _format_condition_style_base_1 = __webpack_require__(87456);
exports.averageType = {
    propertyName: 'averageType', modelName: '@AverageType', displayName: 'DashboardWebStringId.ConditionalFormatting.AverageType', defaultVal: 'Above', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'Above': 'DashboardWebStringId.ConditionalFormatting.Above',
        'AboveOrEqual': 'DashboardWebStringId.ConditionalFormatting.AboveOrEqual',
        'Below': 'DashboardWebStringId.ConditionalFormatting.Below',
        'BelowOrEqual': 'DashboardWebStringId.ConditionalFormatting.BelowOrEqual'
    }
};
exports.formatConditionAverageSerializationsInfo = _format_condition_style_base_1.formatConditionStyleBaseSerializationsInfo.concat([exports.averageType]);


/***/ }),

/***/ 98602:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatConditionBarOptionsSerializationsInfo = exports.drawAxis = exports.allowNegativeAxis = exports.showBarOnly = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.showBarOnly = { propertyName: 'showBarOnly', modelName: '@ShowBarOnly', displayName: 'DashboardStringId.FormatRuleShowBarOnly', defaultVal: false, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.allowNegativeAxis = { propertyName: 'allowNegativeAxis', modelName: '@AllowNegativeAxis', displayName: 'DashboardStringId.FormatRuleAllowNegativeAxis', defaultVal: true, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.drawAxis = { propertyName: 'drawAxis', modelName: '@DrawAxis', displayName: 'DashboardStringId.FormatRuleDrawAxis', defaultVal: false, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.formatConditionBarOptionsSerializationsInfo = [exports.showBarOnly, exports.allowNegativeAxis, exports.drawAxis];


/***/ }),

/***/ 93881:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatConditionBarSerializationsInfo = exports.barCurrentStyleSettings = exports.barCurrentStyleSettingsType = exports.barNegativeStyleSettings = void 0;
const _format_rules_common_1 = __webpack_require__(94102);
const bar_style_settings_1 = __webpack_require__(9661);
const _format_condition_min_max_base_1 = __webpack_require__(58053);
exports.barNegativeStyleSettings = { propertyName: 'negativeStyleSettings', modelName: 'NegativeStyleSettings', displayName: 'DashboardStringId.FormatRuleNegativeStyle' };
exports.barCurrentStyleSettingsType = {
    propertyName: 'currentStyleSettingsType', displayName: 'DashboardWebStringId.ConditionalFormatting.StyleSettingsType', defaultVal: 'Positive', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Positive': 'DashboardWebStringId.ConditionalFormatting.Positive',
        'Negative': 'DashboardWebStringId.ConditionalFormatting.Negative'
    }
};
exports.barCurrentStyleSettings = { propertyName: 'currentStyleSettings', type: bar_style_settings_1.BarStyleSettings };
exports.formatConditionBarSerializationsInfo = _format_condition_min_max_base_1.formatConditionMinMaxBaseSerializationsInfo.concat([exports.barNegativeStyleSettings, _format_rules_common_1.barOptions]);


/***/ }),

/***/ 84400:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatConditionBaseSerializationsInfo = void 0;
exports.formatConditionBaseSerializationsInfo = [];


/***/ }),

/***/ 30692:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatConditionDateOccurringSerializationsInfo = exports.dateType = exports.extendedDateTypeValues = exports.baseDateTypeValues = void 0;
const ko = __webpack_require__(71032);
const _common_1 = __webpack_require__(29009);
const enums_1 = __webpack_require__(76114);
const _format_condition_style_base_1 = __webpack_require__(87456);
let parseFilterDateType = (typeModel) => {
    return _common_1.parseFlagsEnumType(typeModel, enums_1.FilterDateType.None, FilterDateTypeDictionary);
};
let serializeFilterDateType = (val) => {
    return _common_1.serializeFlagsEnumType(val, 'None', FilterDateTypeDictionary);
};
let getFilterDateTypeValues = (val) => {
    return _common_1.getFlagsEnumTypeValues(val, FilterDateTypeDictionary, 'key');
};
let FilterDateTypeDictionary = {
    'BeyondThisYear': enums_1.FilterDateType.BeyondThisYear,
    'LaterThisYear': enums_1.FilterDateType.LaterThisYear,
    'LaterThisMonth': enums_1.FilterDateType.LaterThisMonth,
    'LaterThisWeek': enums_1.FilterDateType.LaterThisWeek,
    'NextWeek': enums_1.FilterDateType.NextWeek,
    'Tomorrow': enums_1.FilterDateType.Tomorrow,
    'Today': enums_1.FilterDateType.Today,
    'Yesterday': enums_1.FilterDateType.Yesterday,
    'EarlierThisWeek': enums_1.FilterDateType.EarlierThisWeek,
    'LastWeek': enums_1.FilterDateType.LastWeek,
    'EarlierThisMonth': enums_1.FilterDateType.EarlierThisMonth,
    'EarlierThisYear': enums_1.FilterDateType.EarlierThisYear,
    'PriorThisYear': enums_1.FilterDateType.PriorThisYear,
    'Empty': enums_1.FilterDateType.Empty,
    'Beyond': enums_1.FilterDateType.Beyond,
    'ThisWeek': enums_1.FilterDateType.ThisWeek,
    'ThisMonth': enums_1.FilterDateType.ThisMonth,
    'MonthAfter1': enums_1.FilterDateType.MonthAfter1,
    'MonthAfter2': enums_1.FilterDateType.MonthAfter2,
    'MonthAgo1': enums_1.FilterDateType.MonthAgo1,
    'MonthAgo2': enums_1.FilterDateType.MonthAgo2,
    'MonthAgo3': enums_1.FilterDateType.MonthAgo3,
    'MonthAgo4': enums_1.FilterDateType.MonthAgo4,
    'MonthAgo5': enums_1.FilterDateType.MonthAgo5,
    'MonthAgo6': enums_1.FilterDateType.MonthAgo6,
    'Earlier': enums_1.FilterDateType.Earlier
};
exports.baseDateTypeValues = [
    { value: enums_1.FilterDateType.Yesterday, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringYesterday' },
    { value: enums_1.FilterDateType.Today, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringToday' },
    { value: enums_1.FilterDateType.Tomorrow, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringTomorrow' },
    { value: enums_1.FilterDateType.LastWeek, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringLastWeek' },
    { value: enums_1.FilterDateType.ThisWeek, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringThisWeek' },
    { value: enums_1.FilterDateType.NextWeek, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringNextWeek' },
    { value: enums_1.FilterDateType.MonthAgo1, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo1' },
    { value: enums_1.FilterDateType.ThisMonth, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringThisMonth' },
    { value: enums_1.FilterDateType.MonthAfter1, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter1' }
];
exports.extendedDateTypeValues = [
    { value: enums_1.FilterDateType.BeyondThisYear, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyondThisYear' },
    { value: enums_1.FilterDateType.LaterThisYear, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisYear' },
    { value: enums_1.FilterDateType.LaterThisMonth, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisMonth' },
    { value: enums_1.FilterDateType.LaterThisWeek, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisWeek' },
    { value: enums_1.FilterDateType.EarlierThisWeek, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisWeek' },
    { value: enums_1.FilterDateType.EarlierThisMonth, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisMonth' },
    { value: enums_1.FilterDateType.EarlierThisYear, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisYear' },
    { value: enums_1.FilterDateType.PriorThisYear, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringPriorThisYear' },
    { value: enums_1.FilterDateType.Empty, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringEmpty' },
    { value: enums_1.FilterDateType.Beyond, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyond' },
    { value: enums_1.FilterDateType.MonthAfter2, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter2' },
    { value: enums_1.FilterDateType.MonthAgo2, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo2' },
    { value: enums_1.FilterDateType.MonthAgo3, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo3' },
    { value: enums_1.FilterDateType.MonthAgo4, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo4' },
    { value: enums_1.FilterDateType.MonthAgo5, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo5' },
    { value: enums_1.FilterDateType.MonthAgo6, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo6' },
    { value: enums_1.FilterDateType.Earlier, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlier' }
];
exports.dateType = {
    propertyName: 'dateType', modelName: '@DateType', defaultVal: 'Yesterday',
    from: d => ko.observable(parseFilterDateType(d)), toJsonObject: serializeFilterDateType,
};
exports.formatConditionDateOccurringSerializationsInfo = _format_condition_style_base_1.formatConditionStyleBaseSerializationsInfo.concat([exports.dateType]);


/***/ }),

/***/ 29786:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatConditionExpressionSerializationsInfo = exports.formatConditionFilter = exports.formatConditionExpression = void 0;
const _format_condition_style_base_1 = __webpack_require__(87456);
exports.formatConditionExpression = { propertyName: 'expression', modelName: '@Expression' };
exports.formatConditionFilter = { propertyName: 'expression' };
exports.formatConditionExpressionSerializationsInfo = _format_condition_style_base_1.formatConditionStyleBaseSerializationsInfo.concat([exports.formatConditionExpression]);


/***/ }),

/***/ 58053:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatConditionMinMaxBaseSerializationsInfo = exports.formatConditionMaximum = exports.formatConditionMinimum = exports.maximumType = exports.minimumType = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _format_condition_style_base_1 = __webpack_require__(87456);
exports.minimumType = {
    propertyName: 'minimumType', modelName: '@MinimumType', displayName: 'DashboardWebStringId.ConditionalFormatting.MinimumType', defaultVal: 'Automatic', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Automatic': 'DashboardStringId.FormatConditionAutomaticValueType',
        'Number': 'DashboardStringId.FormatConditionNumberValueType',
        'Percent': 'DashboardStringId.FormatConditionPercentValueType'
    }
};
exports.maximumType = {
    propertyName: 'maximumType', modelName: '@MaximumType', displayName: 'DashboardWebStringId.ConditionalFormatting.MaximumType', defaultVal: 'Automatic', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Automatic': 'DashboardStringId.FormatConditionAutomaticValueType',
        'Number': 'DashboardStringId.FormatConditionNumberValueType',
        'Percent': 'DashboardStringId.FormatConditionPercentValueType'
    }
};
exports.formatConditionMinimum = { propertyName: 'minimum', modelName: '@Minimum', displayName: 'DashboardWebStringId.ConditionalFormatting.ConditionMinimum', defaultVal: 0, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel };
exports.formatConditionMaximum = { propertyName: 'maximum', modelName: '@Maximum', displayName: 'DashboardWebStringId.ConditionalFormatting.ConditionMaximum', defaultVal: 0, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel };
exports.formatConditionMinMaxBaseSerializationsInfo = _format_condition_style_base_1.formatConditionStyleBaseSerializationsInfo.concat([exports.minimumType, exports.maximumType, exports.formatConditionMinimum, exports.formatConditionMaximum]);


/***/ }),

/***/ 87456:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatConditionStyleBaseSerializationsInfo = void 0;
const _format_condition_base_1 = __webpack_require__(84400);
exports.formatConditionStyleBaseSerializationsInfo = _format_condition_base_1.formatConditionBaseSerializationsInfo;


/***/ }),

/***/ 79380:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatConditionTopBottomSerializationsInfo = exports.topBottom = exports._actualRankType = exports.rank = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _format_condition_style_base_1 = __webpack_require__(87456);
exports.rank = { propertyName: 'rank', modelName: '@Rank', displayName: 'DashboardStringId.SummaryTypeCount', defaultVal: 5, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, editorOptions: { min: 1 }, validationRules: [_base_metadata_1.integerValidationRule] };
let rankType = { propertyName: 'rankType', modelName: '@RankType', defaultVal: 'Automatic' };
exports._actualRankType = { propertyName: '_actualRankType', displayName: 'DashboardWebStringId.Calculations.RankType', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Number': 'DashboardStringId.FormatConditionNumberValueType',
        'Percent': 'DashboardStringId.FormatConditionPercentValueType'
    }
};
exports.topBottom = {
    propertyName: 'topBottom', modelName: '@TopBottomType', displayName: 'DashboardWebStringId.TopNMode', defaultVal: 'Top', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Top': 'DashboardStringId.CommandFormatRuleTopN',
        'Bottom': 'DashboardStringId.CommandFormatRuleBottomN'
    }
};
exports.formatConditionTopBottomSerializationsInfo = _format_condition_style_base_1.formatConditionStyleBaseSerializationsInfo.concat([exports.rank, rankType, exports.topBottom]);


/***/ }),

/***/ 57912:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatConditionValueSerializationsInfo = exports.formatConditionValue2 = exports.formatConditionValue1 = exports.conditionInCondition = void 0;
const format_rules_common_1 = __webpack_require__(70666);
const _format_condition_style_base_1 = __webpack_require__(87456);
exports.conditionInCondition = {
    propertyName: 'condition', modelName: '@Condition', defaultVal: 'Equal', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'Greater': 'DashboardStringId.CommandFormatRuleGreaterThan',
        'GreaterOrEqual': 'DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo',
        'Less': 'DashboardStringId.CommandFormatRuleLessThan',
        'LessOrEqual': 'DashboardStringId.CommandFormatRuleLessThanOrEqualTo',
        'Equal': 'DashboardStringId.CommandFormatRuleEqualTo',
        'NotEqual': 'DashboardStringId.CommandFormatRuleNotEqualTo',
        'Between': 'DashboardStringId.CommandFormatRuleBetween',
        'NotBetween': 'DashboardStringId.CommandFormatRuleNotBetween',
        'BetweenOrEqual': 'DashboardStringId.CommandFormatRuleBetweenOrEqual',
        'NotBetweenOrEqual': 'DashboardStringId.CommandFormatRuleNotBetweenOrEqual',
        'ContainsText': 'DashboardStringId.CommandFormatRuleContains'
    }
};
exports.formatConditionValue1 = { propertyName: 'value1', modelName: 'Value1', displayName: 'DashboardStringId.Value1Caption', type: format_rules_common_1.ComplexValue };
exports.formatConditionValue2 = { propertyName: 'value2', modelName: 'Value2', displayName: 'DashboardStringId.Value2Caption', type: format_rules_common_1.ComplexValue };
exports.formatConditionValueSerializationsInfo = _format_condition_style_base_1.formatConditionStyleBaseSerializationsInfo.concat([exports.conditionInCondition, exports.formatConditionValue1, exports.formatConditionValue2]);


/***/ }),

/***/ 80161:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatConditionRangeBase = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const _format_rules_common_1 = __webpack_require__(94102);
const appearance_settings_1 = __webpack_require__(93722);
const format_condition_base_1 = __webpack_require__(51251);
const _format_condition_range_base_1 = __webpack_require__(98827);
class FormatConditionRangeBase extends format_condition_base_1.FormatConditionBase {
    constructor(modelJson, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.getSpecificType = () => this.getActualPredefinedType();
        this.setSpecificType = (specificType) => this.setActualPredefinedType(specificType);
    }
    get actualStyles() {
        var ranges = this._getSortedRanges();
        return ranges.map((range, index) => {
            var style = range.styleSettings();
            if (!style) {
                style = this._getRangeIndexSettings(index);
            }
            return style;
        });
    }
    get stopStyles() {
        return this._getSortedRanges().filter(range => !!range.styleSettings()).map(range => range.styleSettings());
    }
    getInfo() {
        return _format_condition_range_base_1.formatConditionRangeBaseSerializationsInfo;
    }
    isValid() {
        return super.isValid();
    }
    isRange() {
        return true;
    }
    setValues(values) {
        if (values.length > this.rangeSet.ranges().length)
            throw new Error('The number of values exceeds the number of ranges.');
        var index = 0;
        const valueType = this.valueType() === 'Percent' ? 'System.Double' : _format_rules_common_1.fieldTypes[this.dataType()];
        values.forEach(value => this.rangeSet.ranges()[index++].value.setValue(value, valueType));
    }
    createStyleSettings(styleListItem) {
        return new appearance_settings_1.AppearanceSettings({ '@AppearanceType': styleListItem });
    }
    _getSortedRanges() {
        return this.rangeSet.ranges();
    }
    _getRangeIndexSettings(index) {
        return null;
    }
}
exports.FormatConditionRangeBase = FormatConditionRangeBase;


/***/ }),

/***/ 14780:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatConditionColorRangeBar = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const bar_style_settings_1 = __webpack_require__(9661);
const format_condition_range_set_1 = __webpack_require__(54057);
const _format_condition_range_color_bar_1 = __webpack_require__(40938);
const range_generator_1 = __webpack_require__(25496);
class FormatConditionColorRangeBar extends format_condition_range_set_1.FormatConditionRangeSet {
    constructor(modelJson, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    get _isApplyToRowColumnRestricted() { return true; }
    getInfo() {
        return _format_condition_range_color_bar_1.formatConditionColorRangeBarSerializationsInfo;
    }
    getActualPredefinedType() {
        return range_generator_1.FormatConditionRangeGenerator.getPredefinedType(this.actualStyles, (type) => {
            var c = new FormatConditionColorRangeBar();
            range_generator_1.FormatConditionRangeGenerator.generateRangeSet(c, type);
            return c;
        });
    }
    setActualPredefinedType(type) {
        super.setActualPredefinedType(type);
    }
    createStyleSettings(styleListItem) {
        return new bar_style_settings_1.BarStyleSettings({ '@PredefinedColor': styleListItem });
    }
}
exports.FormatConditionColorRangeBar = FormatConditionColorRangeBar;


/***/ }),

/***/ 37578:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatConditionGradientRangeBar = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const bar_style_settings_1 = __webpack_require__(9661);
const format_condition_range_gradient_1 = __webpack_require__(95768);
const _format_condition_range_gradient_bar_1 = __webpack_require__(45363);
const range_generator_1 = __webpack_require__(25496);
class FormatConditionGradientRangeBar extends format_condition_range_gradient_1.FormatConditionRangeGradient {
    constructor(modelJson, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    get _isApplyToRowColumnRestricted() { return true; }
    getInfo() {
        return _format_condition_range_gradient_bar_1.formatConditionGradientRangeBarSerializationsInfo;
    }
    getActualPredefinedType() {
        return range_generator_1.FormatConditionRangeGenerator.getGradientPredefinedType(this.actualStyles, (type) => {
            var c = new FormatConditionGradientRangeBar();
            range_generator_1.FormatConditionRangeGenerator.generateGradientByType(c, type, 5, true);
            return c;
        });
    }
    setActualPredefinedType(type) {
        range_generator_1.FormatConditionRangeGenerator.generateGradientByType(this, type, 5, true);
    }
    _isGradientStop(style) {
        if (style instanceof bar_style_settings_1.BarStyleSettings) {
            return format_condition_range_gradient_1.FormatConditionRangeGradient.isGradientStop(style.predefinedColor(), style.color());
        }
        else {
            return false;
        }
    }
    _generateByDefault(segmentNumber) {
        range_generator_1.FormatConditionRangeGenerator.generateGradientByStyles(this, this.stopStyles, segmentNumber);
    }
}
exports.FormatConditionGradientRangeBar = FormatConditionGradientRangeBar;


/***/ }),

/***/ 95768:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatConditionRangeGradient = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const appearance_settings_1 = __webpack_require__(93722);
const range_index_settings_1 = __webpack_require__(28823);
const format_condition_range_base_1 = __webpack_require__(80161);
const _format_condition_range_gradient_1 = __webpack_require__(30634);
const range_generator_1 = __webpack_require__(25496);
const range_info_1 = __webpack_require__(38039);
class FormatConditionRangeGradient extends format_condition_range_base_1.FormatConditionRangeBase {
    constructor(modelJson, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.getSpecificType = () => this.getActualPredefinedType();
        this.setSpecificType = (specificType) => this.setActualPredefinedType(specificType);
        this.segmentNumber = ko.computed({
            read: () => this.rangeSet.ranges().length,
            write: (value) => {
                this._generateByDefault(value);
            }
        });
    }
    static isGradientStop(predefined, color) {
        return predefined == 'Custom' && !!color || predefined != 'None' && predefined.indexOf('Gradient') != -1;
    }
    isGradient() {
        return true;
    }
    getInfo() {
        return _format_condition_range_gradient_1.formatConditionRangeGradientSerializationsInfo;
    }
    getActualPredefinedType() {
        return range_generator_1.FormatConditionRangeGenerator.getGradientPredefinedType(this.actualStyles, (type) => {
            var c = new FormatConditionRangeGradient();
            range_generator_1.FormatConditionRangeGenerator.generateGradientByType(c, type, 10);
            return c;
        });
    }
    setActualPredefinedType(type) {
        range_generator_1.FormatConditionRangeGenerator.generateGradientByType(this, type, 10);
    }
    _generateByDefault(segmentNumber) {
        range_generator_1.FormatConditionRangeGenerator.generateGradientByStyles(this, this.stopStyles, segmentNumber);
    }
    generateAsPercent(startStyle, endStyle, segmentNumber) {
        if (segmentNumber >= this.stopStyles.length) {
            this.valueType('Percent');
            this._generate(startStyle, endStyle, segmentNumber);
            this.setValues(range_generator_1.FormatConditionRangeGenerator.calculateRangePercentValues(segmentNumber));
        }
    }
    generateAsNumber(startStyle, endStyle, values) {
        var segmentNumber = values.length;
        if (segmentNumber >= this.stopStyles.length) {
            this.valueType('Number');
            this._generate(startStyle, endStyle, segmentNumber);
            this.setValues(values);
        }
    }
    _getRangeIndexSettings(index) {
        return new range_index_settings_1.RangeIndexSettings(index);
    }
    _getSortedRanges() {
        var ranges = this.rangeSet.ranges();
        ranges.sort((a, b) => {
            var aValue = a.value.value(), bValue = b.value.value();
            var c = range_generator_1.FormatConditionRangeGenerator.compareValues(aValue, bValue, true);
            if (c != 0)
                return c;
            if (a.valueComparison() == b.valueComparison())
                return 0;
            if (a.valueComparison() == 'Greater')
                return 1;
            return -1;
        });
        return ranges;
    }
    _generate(startStyle, endStyle, rangeCount) {
        var ranges = [];
        for (var i = 0; i < rangeCount; i++) {
            ranges.push(new range_info_1.RangeInfo());
        }
        ranges[0].styleSettings(this._validateStyle(startStyle));
        ranges[ranges.length - 1].styleSettings(this._validateStyle(endStyle));
        this.rangeSet.ranges(ranges);
    }
    _isGradientStop(style) {
        if (style instanceof appearance_settings_1.AppearanceSettings) {
            return FormatConditionRangeGradient.isGradientStop(style.appearanceType(), style.backColor());
        }
        else {
            return false;
        }
    }
    _validateStyle(style) {
        if (!this._isGradientStop(style))
            throw new Error("Use colors with the 'Gradient' prefix from the FormatConditionAppearanceType enumeration to initialize the AppearanceSettings.appearanceType property or set the AppearanceSettings.appearanceType property to 'Custom' and specify the AppearanceSettings.backColor property.");
        return style;
    }
}
exports.FormatConditionRangeGradient = FormatConditionRangeGradient;


/***/ }),

/***/ 54057:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatConditionRangeSet = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const format_condition_range_base_1 = __webpack_require__(80161);
const _format_condition_range_set_1 = __webpack_require__(30135);
const range_generator_1 = __webpack_require__(25496);
class FormatConditionRangeSet extends format_condition_range_base_1.FormatConditionRangeBase {
    constructor(modelJson, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _format_condition_range_set_1.formatConditionRangeSetSerializationsInfo;
    }
    getActualPredefinedType() {
        return range_generator_1.FormatConditionRangeGenerator.getPredefinedType(this.actualStyles, (type) => {
            var c = new FormatConditionRangeSet();
            range_generator_1.FormatConditionRangeGenerator.generateRangeSet(c, type);
            return c;
        });
    }
    setActualPredefinedType(type) {
        range_generator_1.FormatConditionRangeGenerator.generateRangeSet(this, type);
    }
}
exports.FormatConditionRangeSet = FormatConditionRangeSet;


/***/ }),

/***/ 98827:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatConditionRangeBaseSerializationsInfo = exports.rangeSet = exports.rangeValueType = void 0;
const _format_condition_base_1 = __webpack_require__(84400);
const range_set_1 = __webpack_require__(10839);
exports.rangeValueType = {
    propertyName: 'valueType', modelName: '@ValueType', displayName: 'DashboardWebStringId.Delta.ValueType', defaultVal: 'Automatic', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'Number': 'DashboardStringId.FormatConditionNumberValueType',
        'Percent': 'DashboardStringId.FormatConditionPercentValueType',
        'Automatic': 'DashboardStringId.FormatConditionAutomaticValueType'
    }
};
exports.rangeSet = { propertyName: 'rangeSet', modelName: 'RangeSet', type: range_set_1.RangeSet };
exports.formatConditionRangeBaseSerializationsInfo = _format_condition_base_1.formatConditionBaseSerializationsInfo.concat([exports.rangeValueType, exports.rangeSet]);


/***/ }),

/***/ 40938:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatConditionColorRangeBarSerializationsInfo = void 0;
const _format_rules_common_1 = __webpack_require__(94102);
const _format_condition_range_set_1 = __webpack_require__(30135);
exports.formatConditionColorRangeBarSerializationsInfo = _format_condition_range_set_1.formatConditionRangeSetSerializationsInfo.concat([_format_rules_common_1.barOptions]);


/***/ }),

/***/ 45363:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatConditionGradientRangeBarSerializationsInfo = void 0;
const _format_rules_common_1 = __webpack_require__(94102);
const _format_condition_range_gradient_1 = __webpack_require__(30634);
exports.formatConditionGradientRangeBarSerializationsInfo = _format_condition_range_gradient_1.formatConditionRangeGradientSerializationsInfo.concat([_format_rules_common_1.barOptions]);


/***/ }),

/***/ 30634:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatConditionRangeGradientSerializationsInfo = exports.segmentNumber = void 0;
const _format_condition_range_base_1 = __webpack_require__(98827);
exports.segmentNumber = { propertyName: 'segmentNumber', displayName: 'DashboardWebStringId.ConditionalFormatting.SegmentNumber', defaultVal: 10, simpleFormAdapterItem: 'numberBoxEditor' };
exports.formatConditionRangeGradientSerializationsInfo = _format_condition_range_base_1.formatConditionRangeBaseSerializationsInfo.concat([]);


/***/ }),

/***/ 30135:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatConditionRangeSetSerializationsInfo = void 0;
const _format_condition_range_base_1 = __webpack_require__(98827);
exports.formatConditionRangeSetSerializationsInfo = _format_condition_range_base_1.formatConditionRangeBaseSerializationsInfo.concat([]);


/***/ }),

/***/ 74133:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.rangeInfoSerializationsInfo = exports.rangeValueComparison = exports.rangeValue = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const format_rules_common_1 = __webpack_require__(70666);
exports.rangeValue = { propertyName: 'value', modelName: 'Value', displayName: 'DashboardStringId.CommandFormatRuleValue', type: format_rules_common_1.ComplexValue };
exports.rangeValueComparison = {
    propertyName: 'valueComparison', modelName: '@ValueComparison', displayName: 'DashboardWebStringId.ConditionalFormatting.ValueComparison', defaultVal: 'GreaterOrEqual', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'Greater': '>',
        'GreaterOrEqual': '≥'
    }
};
exports.rangeInfoSerializationsInfo = [_base_metadata_1.itemType, exports.rangeValue, exports.rangeValueComparison];


/***/ }),

/***/ 97272:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.rangeSetSerializationsInfo = exports.ranges = void 0;
exports.ranges = { propertyName: 'ranges', modelName: 'Ranges', displayName: 'DashboardWebStringId.ConditionalFormatting.Ranges', array: true };
exports.rangeSetSerializationsInfo = [exports.ranges];


/***/ }),

/***/ 96463:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatConditionConverter = exports.FormatConditionIconGroups = exports.FormatConditionRangeGradientPredefinedType = exports.FormatConditionRangeSetPredefinedType = void 0;
var FormatConditionRangeSetPredefinedType;
(function (FormatConditionRangeSetPredefinedType) {
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["None"] = 0] = "None";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Custom"] = 1] = "Custom";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Arrows2"] = 2] = "Arrows2";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Arrows3"] = 3] = "Arrows3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Arrows4"] = 4] = "Arrows4";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Arrows5"] = 5] = "Arrows5";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ArrowsGray2"] = 6] = "ArrowsGray2";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ArrowsGray3"] = 7] = "ArrowsGray3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ArrowsGray4"] = 8] = "ArrowsGray4";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ArrowsGray5"] = 9] = "ArrowsGray5";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["PositiveNegative3"] = 10] = "PositiveNegative3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Stars3"] = 11] = "Stars3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Quarters5"] = 12] = "Quarters5";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Bars4"] = 13] = "Bars4";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Bars5"] = 14] = "Bars5";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Boxes5"] = 15] = "Boxes5";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["TrafficLights3"] = 16] = "TrafficLights3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Circles2"] = 17] = "Circles2";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Circles3"] = 18] = "Circles3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Circles4"] = 19] = "Circles4";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["CirclesRedToBlack4"] = 20] = "CirclesRedToBlack4";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Signs3"] = 21] = "Signs3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Symbols2"] = 22] = "Symbols2";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Symbols3"] = 23] = "Symbols3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["SymbolsCircled2"] = 24] = "SymbolsCircled2";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["SymbolsCircled3"] = 25] = "SymbolsCircled3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Flags3"] = 26] = "Flags3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ColorsPaleRedGreen"] = 27] = "ColorsPaleRedGreen";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ColorsPaleRedGreenBlue"] = 28] = "ColorsPaleRedGreenBlue";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ColorsPaleRedYellowGreenBlue"] = 29] = "ColorsPaleRedYellowGreenBlue";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ColorsPaleRedOrangeYellowGreenBlue"] = 30] = "ColorsPaleRedOrangeYellowGreenBlue";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ColorsRedGreen"] = 31] = "ColorsRedGreen";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ColorsRedGreenBlue"] = 32] = "ColorsRedGreenBlue";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ColorsRedYellowGreenBlue"] = 33] = "ColorsRedYellowGreenBlue";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ColorsRedOrangeYellowGreenBlue"] = 34] = "ColorsRedOrangeYellowGreenBlue";
})(FormatConditionRangeSetPredefinedType = exports.FormatConditionRangeSetPredefinedType || (exports.FormatConditionRangeSetPredefinedType = {}));
var FormatConditionRangeGradientPredefinedType;
(function (FormatConditionRangeGradientPredefinedType) {
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["None"] = 0] = "None";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["Custom"] = 1] = "Custom";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["GreenWhite"] = 2] = "GreenWhite";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["WhiteGreen"] = 3] = "WhiteGreen";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["RedWhite"] = 4] = "RedWhite";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["WhiteRed"] = 5] = "WhiteRed";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["YellowGreen"] = 6] = "YellowGreen";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["GreenYellow"] = 7] = "GreenYellow";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["YellowRed"] = 8] = "YellowRed";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["RedYellow"] = 9] = "RedYellow";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["BlueWhite"] = 10] = "BlueWhite";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["WhiteBlue"] = 11] = "WhiteBlue";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["BlueRed"] = 12] = "BlueRed";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["RedBlue"] = 13] = "RedBlue";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["YellowBlue"] = 14] = "YellowBlue";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["BlueYellow"] = 15] = "BlueYellow";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["GreenBlue"] = 16] = "GreenBlue";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["BlueGreen"] = 17] = "BlueGreen";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["GreenWhiteBlue"] = 18] = "GreenWhiteBlue";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["BlueWhiteGreen"] = 19] = "BlueWhiteGreen";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["BlueWhiteRed"] = 20] = "BlueWhiteRed";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["RedWhiteBlue"] = 21] = "RedWhiteBlue";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["GreenWhiteRed"] = 22] = "GreenWhiteRed";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["RedWhiteGreen"] = 23] = "RedWhiteGreen";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["GreenYellowRed"] = 24] = "GreenYellowRed";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["RedYellowGreen"] = 25] = "RedYellowGreen";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["BlueYellowRed"] = 26] = "BlueYellowRed";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["RedYellowBlue"] = 27] = "RedYellowBlue";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["GreenYellowBlue"] = 28] = "GreenYellowBlue";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["BlueYellowGreen"] = 29] = "BlueYellowGreen";
})(FormatConditionRangeGradientPredefinedType = exports.FormatConditionRangeGradientPredefinedType || (exports.FormatConditionRangeGradientPredefinedType = {}));
var FormatConditionIconGroups;
(function (FormatConditionIconGroups) {
    FormatConditionIconGroups[FormatConditionIconGroups["Directional"] = 0] = "Directional";
    FormatConditionIconGroups[FormatConditionIconGroups["Indicators"] = 1] = "Indicators";
    FormatConditionIconGroups[FormatConditionIconGroups["Flags"] = 2] = "Flags";
    FormatConditionIconGroups[FormatConditionIconGroups["Shapes"] = 3] = "Shapes";
    FormatConditionIconGroups[FormatConditionIconGroups["RatingsMonochrome"] = 4] = "RatingsMonochrome";
    FormatConditionIconGroups[FormatConditionIconGroups["RatingsColor"] = 5] = "RatingsColor";
})(FormatConditionIconGroups = exports.FormatConditionIconGroups || (exports.FormatConditionIconGroups = {}));
var FormatConditionRangeSetTypeGroups;
(function (FormatConditionRangeSetTypeGroups) {
    FormatConditionRangeSetTypeGroups[FormatConditionRangeSetTypeGroups["Ranges2"] = 0] = "Ranges2";
    FormatConditionRangeSetTypeGroups[FormatConditionRangeSetTypeGroups["Ranges3"] = 1] = "Ranges3";
    FormatConditionRangeSetTypeGroups[FormatConditionRangeSetTypeGroups["Ranges4"] = 2] = "Ranges4";
    FormatConditionRangeSetTypeGroups[FormatConditionRangeSetTypeGroups["Ranges5"] = 3] = "Ranges5";
})(FormatConditionRangeSetTypeGroups || (FormatConditionRangeSetTypeGroups = {}));
var FormatConditionRangeGradientTypeGroups;
(function (FormatConditionRangeGradientTypeGroups) {
    FormatConditionRangeGradientTypeGroups[FormatConditionRangeGradientTypeGroups["TwoColors"] = 0] = "TwoColors";
    FormatConditionRangeGradientTypeGroups[FormatConditionRangeGradientTypeGroups["ThreeColors"] = 1] = "ThreeColors";
})(FormatConditionRangeGradientTypeGroups || (FormatConditionRangeGradientTypeGroups = {}));
class FormatConditionConverter {
    static getStyleList(type) {
        var styleList = {};
        var iconTypes = FormatConditionConverter.toIconTypes(type);
        if (iconTypes) {
            styleList.list = iconTypes;
            styleList.isIcon = true;
        }
        else {
            styleList.list = FormatConditionConverter.toColorTypes(type);
            styleList.isIcon = false;
        }
        return styleList;
    }
    static toColorTypes(colorRangeSetType) {
        switch (colorRangeSetType) {
            case FormatConditionRangeSetPredefinedType.ColorsPaleRedGreen:
                return ['PaleRed', 'PaleGreen'];
            case FormatConditionRangeSetPredefinedType.ColorsPaleRedGreenBlue:
                return ['PaleRed', 'PaleGreen', 'PaleBlue'];
            case FormatConditionRangeSetPredefinedType.ColorsPaleRedYellowGreenBlue:
                return ['PaleRed', 'PaleYellow', 'PaleGreen', 'PaleBlue'];
            case FormatConditionRangeSetPredefinedType.ColorsPaleRedOrangeYellowGreenBlue:
                return ['PaleRed', 'PaleOrange', 'PaleYellow', 'PaleGreen', 'PaleBlue'];
            case FormatConditionRangeSetPredefinedType.ColorsRedGreen:
                return ['Red', 'Green'];
            case FormatConditionRangeSetPredefinedType.ColorsRedGreenBlue:
                return ['Red', 'Green', 'Blue'];
            case FormatConditionRangeSetPredefinedType.ColorsRedYellowGreenBlue:
                return ['Red', 'Yellow', 'Green', 'Blue'];
            case FormatConditionRangeSetPredefinedType.ColorsRedOrangeYellowGreenBlue:
                return ['Red', 'Orange', 'Yellow', 'Green', 'Blue'];
            default:
                return null;
        }
    }
    static toIconTypes(iconRangeSetType) {
        switch (iconRangeSetType) {
            case FormatConditionRangeSetPredefinedType.Arrows2:
                return ['DirectionalRedDownArrow', 'DirectionalGreenArrowUp'];
            case FormatConditionRangeSetPredefinedType.Arrows3:
                return ['DirectionalRedDownArrow', 'DirectionalYellowSideArrow', 'DirectionalGreenArrowUp'];
            case FormatConditionRangeSetPredefinedType.Arrows4:
                return ['DirectionalRedDownArrow', 'DirectionalYellowDownInclineArrow', 'DirectionalYellowUpInclineArrow', 'DirectionalGreenArrowUp'];
            case FormatConditionRangeSetPredefinedType.Arrows5:
                return ['DirectionalRedDownArrow', 'DirectionalYellowDownInclineArrow', 'DirectionalYellowSideArrow', 'DirectionalYellowUpInclineArrow', 'DirectionalGreenArrowUp'];
            case FormatConditionRangeSetPredefinedType.ArrowsGray2:
                return ['DirectionalGrayDownArrow', 'DirectionalGrayArrowUp'];
            case FormatConditionRangeSetPredefinedType.ArrowsGray3:
                return ['DirectionalGrayDownArrow', 'DirectionalGraySideArrow', 'DirectionalGrayArrowUp'];
            case FormatConditionRangeSetPredefinedType.ArrowsGray4:
                return ['DirectionalGrayDownArrow', 'DirectionalGrayDownInclineArrow', 'DirectionalGrayUpInclineArrow', 'DirectionalGrayArrowUp'];
            case FormatConditionRangeSetPredefinedType.ArrowsGray5:
                return ['DirectionalGrayDownArrow', 'DirectionalGrayDownInclineArrow', 'DirectionalGraySideArrow', 'DirectionalGrayUpInclineArrow', 'DirectionalGrayArrowUp'];
            case FormatConditionRangeSetPredefinedType.PositiveNegative3:
                return ['DirectionalRedTriangleDown', 'DirectionalYellowDash', 'DirectionalGreenTriangleUp'];
            case FormatConditionRangeSetPredefinedType.Stars3:
                return ['RatingEmptyGrayStar', 'RatingHalfGrayStar', 'RatingFullGrayStar'];
            case FormatConditionRangeSetPredefinedType.Quarters5:
                return ['RatingEmptyGrayCircle', 'Rating3QuartersGrayCircle', 'Rating2QuartersGrayCircle', 'Rating1QuarterGrayCircle', 'RatingFullGrayCircle'];
            case FormatConditionRangeSetPredefinedType.Bars4:
                return ['Rating1Bar', 'Rating2Bars', 'Rating3Bars', 'Rating4Bars'];
            case FormatConditionRangeSetPredefinedType.Bars5:
                return ['Rating0Bars', 'Rating1Bar', 'Rating2Bars', 'Rating3Bars', 'Rating4Bars'];
            case FormatConditionRangeSetPredefinedType.Boxes5:
                return ['Rating0FilledBoxes', 'Rating1FilledBox', 'Rating2FilledBoxes', 'Rating3FilledBoxes', 'Rating4FilledBoxes'];
            case FormatConditionRangeSetPredefinedType.TrafficLights3:
                return ['ShapeRedTrafficLight', 'ShapeYellowTrafficLight', 'ShapeGreenTrafficLight'];
            case FormatConditionRangeSetPredefinedType.Circles2:
                return ['ShapeRedCircle', 'ShapeGreenCircle'];
            case FormatConditionRangeSetPredefinedType.Circles3:
                return ['ShapeRedCircle', 'ShapeYellowCircle', 'ShapeGreenCircle'];
            case FormatConditionRangeSetPredefinedType.Circles4:
                return ['RatingFullGrayCircle', 'ShapeRedCircle', 'ShapeYellowCircle', 'ShapeGreenCircle'];
            case FormatConditionRangeSetPredefinedType.CirclesRedToBlack4:
                return ['RatingFullGrayCircle', 'ShapeLightGrayCircle', 'ShapeLightRedCircle', 'ShapeRedCircle'];
            case FormatConditionRangeSetPredefinedType.Signs3:
                return ['ShapeRedDiamond', 'ShapeYellowTriangle', 'ShapeGreenCircle'];
            case FormatConditionRangeSetPredefinedType.Symbols2:
                return ['IndicatorRedCross', 'IndicatorGreenCheck'];
            case FormatConditionRangeSetPredefinedType.Symbols3:
                return ['IndicatorRedCross', 'IndicatorYellowExclamation', 'IndicatorGreenCheck'];
            case FormatConditionRangeSetPredefinedType.SymbolsCircled2:
                return ['IndicatorCircledRedCross', 'IndicatorCircledGreenCheck'];
            case FormatConditionRangeSetPredefinedType.SymbolsCircled3:
                return ['IndicatorCircledRedCross', 'IndicatorCircledYellowExclamation', 'IndicatorCircledGreenCheck'];
            case FormatConditionRangeSetPredefinedType.Flags3:
                return ['IndicatorRedFlag', 'IndicatorYellowFlag', 'IndicatorGreenFlag'];
            default:
                return null;
        }
    }
    static toAppearanceTypes(gradientType) {
        switch (gradientType) {
            case FormatConditionRangeGradientPredefinedType.GreenWhite:
                return ['GradientGreen', 'GradientTransparent'];
            case FormatConditionRangeGradientPredefinedType.WhiteGreen:
                return ['GradientTransparent', 'GradientGreen'];
            case FormatConditionRangeGradientPredefinedType.RedWhite:
                return ['GradientRed', 'GradientTransparent'];
            case FormatConditionRangeGradientPredefinedType.WhiteRed:
                return ['GradientTransparent', 'GradientRed'];
            case FormatConditionRangeGradientPredefinedType.GreenYellow:
                return ['GradientGreen', 'GradientYellow'];
            case FormatConditionRangeGradientPredefinedType.YellowGreen:
                return ['GradientYellow', 'GradientGreen'];
            case FormatConditionRangeGradientPredefinedType.RedYellow:
                return ['GradientRed', 'GradientYellow'];
            case FormatConditionRangeGradientPredefinedType.YellowRed:
                return ['GradientYellow', 'GradientRed'];
            case FormatConditionRangeGradientPredefinedType.BlueWhite:
                return ['GradientBlue', 'GradientTransparent'];
            case FormatConditionRangeGradientPredefinedType.WhiteBlue:
                return ['GradientTransparent', 'GradientBlue'];
            case FormatConditionRangeGradientPredefinedType.BlueRed:
                return ['GradientBlue', 'GradientRed'];
            case FormatConditionRangeGradientPredefinedType.RedBlue:
                return ['GradientRed', 'GradientBlue'];
            case FormatConditionRangeGradientPredefinedType.BlueYellow:
                return ['GradientBlue', 'GradientYellow'];
            case FormatConditionRangeGradientPredefinedType.YellowBlue:
                return ['GradientYellow', 'GradientBlue'];
            case FormatConditionRangeGradientPredefinedType.BlueGreen:
                return ['GradientBlue', 'GradientGreen'];
            case FormatConditionRangeGradientPredefinedType.GreenBlue:
                return ['GradientGreen', 'GradientBlue'];
            case FormatConditionRangeGradientPredefinedType.GreenWhiteBlue:
                return ['GradientGreen', 'GradientTransparent', 'GradientBlue'];
            case FormatConditionRangeGradientPredefinedType.BlueWhiteGreen:
                return ['GradientBlue', 'GradientTransparent', 'GradientGreen'];
            case FormatConditionRangeGradientPredefinedType.RedWhiteBlue:
                return ['GradientRed', 'GradientTransparent', 'GradientBlue'];
            case FormatConditionRangeGradientPredefinedType.BlueWhiteRed:
                return ['GradientBlue', 'GradientTransparent', 'GradientRed'];
            case FormatConditionRangeGradientPredefinedType.GreenWhiteRed:
                return ['GradientGreen', 'GradientTransparent', 'GradientRed'];
            case FormatConditionRangeGradientPredefinedType.RedWhiteGreen:
                return ['GradientRed', 'GradientTransparent', 'GradientGreen'];
            case FormatConditionRangeGradientPredefinedType.GreenYellowRed:
                return ['GradientGreen', 'GradientYellow', 'GradientRed'];
            case FormatConditionRangeGradientPredefinedType.RedYellowGreen:
                return ['GradientRed', 'GradientYellow', 'GradientGreen'];
            case FormatConditionRangeGradientPredefinedType.BlueYellowRed:
                return ['GradientBlue', 'GradientYellow', 'GradientRed'];
            case FormatConditionRangeGradientPredefinedType.RedYellowBlue:
                return ['GradientRed', 'GradientYellow', 'GradientBlue'];
            case FormatConditionRangeGradientPredefinedType.GreenYellowBlue:
                return ['GradientGreen', 'GradientYellow', 'GradientBlue'];
            case FormatConditionRangeGradientPredefinedType.BlueYellowGreen:
                return ['GradientBlue', 'GradientYellow', 'GradientGreen'];
            default:
                return null;
        }
    }
    static toGroupIconTypes(iconsGroup) {
        switch (iconsGroup) {
            case FormatConditionIconGroups.Directional:
                return ['DirectionalGreenArrowUp',
                    'DirectionalYellowUpInclineArrow',
                    'DirectionalYellowSideArrow',
                    'DirectionalYellowDownInclineArrow',
                    'DirectionalRedDownArrow',
                    'DirectionalGrayArrowUp',
                    'DirectionalGrayUpInclineArrow',
                    'DirectionalGraySideArrow',
                    'DirectionalGrayDownInclineArrow',
                    'DirectionalGrayDownArrow',
                    'DirectionalYellowDash',
                    'DirectionalRedTriangleDown',
                    'DirectionalGreenTriangleUp'];
            case FormatConditionIconGroups.RatingsMonochrome:
                return ['RatingFullGrayCircle',
                    'Rating1QuarterGrayCircle',
                    'Rating2QuartersGrayCircle',
                    'Rating3QuartersGrayCircle',
                    'RatingEmptyGrayCircle',
                    'RatingFullGrayStar',
                    'RatingHalfGrayStar',
                    'RatingEmptyGrayStar'];
            case FormatConditionIconGroups.RatingsColor:
                return ['Rating4Bars',
                    'Rating3Bars',
                    'Rating2Bars',
                    'Rating1Bar',
                    'Rating0Bars',
                    'Rating4FilledBoxes',
                    'Rating3FilledBoxes',
                    'Rating2FilledBoxes',
                    'Rating1FilledBox',
                    'Rating0FilledBoxes'];
            case FormatConditionIconGroups.Indicators:
                return ['IndicatorGreenCheck',
                    'IndicatorYellowExclamation',
                    'IndicatorRedCross',
                    'IndicatorCircledGreenCheck',
                    'IndicatorCircledYellowExclamation',
                    'IndicatorCircledRedCross',
                    'ShapeYellowTriangle',
                    'ShapeRedDiamond'];
            case FormatConditionIconGroups.Flags:
                return ['IndicatorGreenFlag',
                    'IndicatorYellowFlag',
                    'IndicatorRedFlag'];
            case FormatConditionIconGroups.Shapes:
                return ['ShapeGreenTrafficLight',
                    'ShapeYellowTrafficLight',
                    'ShapeRedTrafficLight',
                    'ShapeGreenCircle',
                    'ShapeYellowCircle',
                    'ShapeRedCircle',
                    'ShapeLightRedCircle',
                    'ShapeLightGrayCircle'];
            default:
                throw new Error('Undefined icon group type');
        }
    }
}
exports.FormatConditionConverter = FormatConditionConverter;


/***/ }),

/***/ 25496:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormatConditionRangeGenerator = void 0;
const color_1 = __webpack_require__(78224);
const _helper_classes_1 = __webpack_require__(8384);
const _format_rules_common_1 = __webpack_require__(94102);
const appearance_settings_1 = __webpack_require__(93722);
const bar_style_settings_1 = __webpack_require__(9661);
const icon_settings_1 = __webpack_require__(15958);
const range_converter_1 = __webpack_require__(96463);
const range_info_1 = __webpack_require__(38039);
class FormatConditionRangeGenerator {
    static generateRangeSet(condition, type) {
        if (type === range_converter_1.FormatConditionRangeSetPredefinedType.None || type === range_converter_1.FormatConditionRangeSetPredefinedType.Custom)
            return;
        condition.valueType(!!condition.dateTimeGroupInterval() ? 'Number' : 'Percent');
        var ranges = [];
        var styleList = range_converter_1.FormatConditionConverter.getStyleList(type);
        if (styleList.isIcon) {
            ranges = FormatConditionRangeGenerator._generateRangeSet(styleList.list.length, condition.dataType(), condition.dateTimeGroupInterval(), i => new icon_settings_1.IconSettings({
                '@IconType': styleList.list[i]
            }));
        }
        else {
            ranges = FormatConditionRangeGenerator._generateRangeSet(styleList.list.length, condition.dataType(), condition.dateTimeGroupInterval(), i => {
                return condition.createStyleSettings(styleList.list[i]);
            });
        }
        condition.rangeSet.ranges(ranges);
    }
    static generateGradientByType(condition, type, segmentNumber, isBar = false) {
        if (type === range_converter_1.FormatConditionRangeGradientPredefinedType.None || type === range_converter_1.FormatConditionRangeGradientPredefinedType.Custom)
            return;
        var styles = range_converter_1.FormatConditionConverter
            .toAppearanceTypes(type)
            .map(t => isBar ? new bar_style_settings_1.BarStyleSettings({ '@PredefinedColor': t }) : new appearance_settings_1.AppearanceSettings({ '@AppearanceType': t }));
        FormatConditionRangeGenerator.generateGradientByStyles(condition, styles, segmentNumber);
    }
    static generateGradientByStyles(condition, styles, segmentNumber) {
        var colorsCount = styles.length;
        if (segmentNumber >= colorsCount) {
            condition.generateAsPercent(styles[0], styles[colorsCount - 1], segmentNumber);
            if (colorsCount == 3)
                condition.rangeSet.ranges()[Math.floor(segmentNumber / 2)].styleSettings(styles[1]);
            if (colorsCount == 4) {
                condition.rangeSet.ranges()[Math.floor(segmentNumber / 3)].styleSettings(styles[1]);
                condition.rangeSet.ranges()[Math.floor(2 * segmentNumber / 3)].styleSettings(styles[2]);
            }
        }
    }
    static generateGradientColors(gradientType, count) {
        var gradientColors = [];
        var appearanceTypes = range_converter_1.FormatConditionConverter.toAppearanceTypes(gradientType);
        var prevIndex = 0, nextIndex = count - 1;
        gradientColors[prevIndex] = color_1.Color.fromAppearance(appearanceTypes[0]);
        gradientColors[nextIndex] = color_1.Color.fromAppearance(appearanceTypes[appearanceTypes.length - 1]);
        if (appearanceTypes.length == 3) {
            nextIndex = count / 2;
            gradientColors[nextIndex] = color_1.Color.fromAppearance(appearanceTypes[1]);
        }
        for (var i = 1; i < count - 1; i++) {
            if (appearanceTypes.length == 3 && (i === count / 2)) {
                nextIndex = count - 1;
            }
            gradientColors[i] = color_1.Color.fromDxColor(gradientColors[nextIndex].blend(gradientColors[prevIndex], (i - nextIndex) / (prevIndex - nextIndex)));
        }
        return gradientColors;
    }
    static getPredefinedType(actualStyles, func) {
        var enumValues = _helper_classes_1.EnumManager.getValues(range_converter_1.FormatConditionRangeSetPredefinedType);
        for (var i = 0; i < enumValues.length; i++) {
            var rangePredefinedType = enumValues[i];
            if (rangePredefinedType != range_converter_1.FormatConditionRangeSetPredefinedType.None && rangePredefinedType != range_converter_1.FormatConditionRangeSetPredefinedType.Custom
                && FormatConditionRangeGenerator._isStylesEqual(actualStyles, func(rangePredefinedType).actualStyles))
                return rangePredefinedType;
        }
        return range_converter_1.FormatConditionRangeSetPredefinedType.Custom;
    }
    static getGradientPredefinedType(actualStyles, func) {
        var enumValues = _helper_classes_1.EnumManager.getValues(range_converter_1.FormatConditionRangeGradientPredefinedType);
        for (var i = 0; i < enumValues.length; i++) {
            var rangePredefinedType = enumValues[i];
            if (rangePredefinedType != range_converter_1.FormatConditionRangeGradientPredefinedType.None && rangePredefinedType != range_converter_1.FormatConditionRangeGradientPredefinedType.Custom
                && FormatConditionRangeGenerator._isStylesEqual(actualStyles, func(rangePredefinedType).actualStyles))
                return rangePredefinedType;
        }
        return range_converter_1.FormatConditionRangeGradientPredefinedType.Custom;
    }
    static calculateRangePercentValues(segmentCount) {
        var values = [];
        for (var i = 0; i < segmentCount; i++) {
            values.push(FormatConditionRangeGenerator._calculateRangePercent(i, segmentCount));
        }
        return values;
    }
    static compareValues(val1, val2, changeType) {
        var negativeInfinity = negativeInfinity;
        var compare = (a, b) => {
            if (a == b) {
                return 0;
            }
            if (!a) {
                return -1;
            }
            if (!b) {
                return 1;
            }
            return a > b ? 1 : -1;
        };
        if (changeType && !!val1 && !!val2) {
            var firstNegativeInfinity = (val1 == negativeInfinity), secondNegativeInfinity = (val2 == negativeInfinity);
            if (firstNegativeInfinity && secondNegativeInfinity) {
                return 0;
            }
            if (firstNegativeInfinity) {
                return -1;
            }
            if (secondNegativeInfinity) {
                return 1;
            }
        }
        return compare(val1, val2);
    }
    static _isStylesEqual(actual, predefined) {
        if (actual.length != predefined.length)
            return false;
        for (var i = 0; i < actual.length; i++) {
            if ((actual[i] != null && predefined[i] == null) ||
                (actual[i] == null && predefined[i] != null) ||
                !actual[i].equals(predefined[i]))
                return false;
        }
        return true;
    }
    static _getPercentRangeStops(rangeStopsCount) {
        var marks = new Array(rangeStopsCount);
        for (var i = 0; i < rangeStopsCount; i++) {
            marks.push(i * 100 / rangeStopsCount);
        }
        return marks;
    }
    static _calculateRangePercent(index, count, decimals = 0) {
        return Math.round(100 * (index / count));
    }
    static _generateRangeSet(segmentCount, dataType, dateTimeGroupInterval, createStyleProc) {
        var ranges = [];
        for (var i = 0; i < segmentCount; i++) {
            let rangeInfo = new range_info_1.RangeInfo();
            let value = !dateTimeGroupInterval ? FormatConditionRangeGenerator._calculateRangePercent(i, segmentCount) : FormatConditionRangeGenerator._calculateRangeDate(dateTimeGroupInterval, i, segmentCount);
            rangeInfo.value.setValue(value, _format_rules_common_1.fieldTypes[dataType]);
            rangeInfo.styleSettings(createStyleProc(i));
            ranges.push(rangeInfo);
        }
        return ranges;
    }
    static _calculateRangeDate(groupInterval, i, segmentCount) {
        let dateIndex = segmentCount - i - 1;
        switch (groupInterval) {
            case 'DateHour':
                return DateTime.addHours(-dateIndex);
            case 'DateHourMinute':
                return DateTime.addMinutes(-dateIndex);
            case 'DateHourMinuteSecond':
                return DateTime.addSeconds(-dateIndex);
            case 'DayMonthYear':
            case 'None':
                return DateTime.addDays(-dateIndex);
            case 'WeekYear':
                return DateTime.addWeeks(-dateIndex);
            case 'MonthYear':
                return DateTime.addMonths(-dateIndex);
            case 'QuarterYear':
                return DateTime.addMonths(-dateIndex * 3);
            case 'Year':
                return DateTime.addYears(-dateIndex).getFullYear();
            case 'WeekOfMonth':
            case 'WeekOfYear':
            case 'Second':
            case 'Quarter':
            case 'Hour':
            case 'Minute':
            case 'Month':
            case 'DayOfWeek':
            case 'DayOfYear':
            case 'Day':
            default:
                return i;
        }
    }
}
exports.FormatConditionRangeGenerator = FormatConditionRangeGenerator;
class DateTime {
}
DateTime.addHours = function (v) {
    var date = new Date();
    date.setTime(date.getTime() + (v * 60 * 60 * 1000));
    return date;
};
DateTime.addMinutes = function (v) {
    var date = new Date();
    date.setTime(date.getTime() + (v * 60 * 1000));
    return date;
};
DateTime.addSeconds = function (v) {
    var date = new Date();
    date.setTime(date.getTime() + (v * 1000));
    return date;
};
DateTime.addDays = function (v) {
    var date = new Date();
    date.setTime(date.getTime() + (v * 24 * 60 * 60 * 1000));
    return date;
};
DateTime.addMonths = function (v) {
    var date = new Date();
    var year = date.getFullYear();
    var newMonth = date.getMonth() + v;
    var month = newMonth % 12;
    if (month < 0) {
        month += 12;
    }
    date.setMonth(month);
    date.setFullYear(year + (newMonth - month) / 12);
    return date;
};
DateTime.addYears = function (v) {
    var date = new Date();
    date.setFullYear(date.getFullYear() + v);
    return date;
};
DateTime.addWeeks = function (v) {
    return DateTime.addDays(7 * v);
};


/***/ }),

/***/ 38039:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RangeInfo = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const serializable_model_1 = __webpack_require__(29591);
const _style_settings_utils_1 = __webpack_require__(67172);
const format_condition_style_base_1 = __webpack_require__(99872);
const _range_info_1 = __webpack_require__(74133);
class RangeInfo extends serializable_model_1.TypedSerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.styleSettings = ko.observable();
        this._styleSettingsType = ko.observable();
        this._styleSettingsType(_style_settings_utils_1.styleSettingsTypes.filter(mapItem => !!modelJson && modelJson[mapItem])[0]);
        if (this._styleSettingsType()) {
            this.styleSettings(new _style_settings_utils_1.styleSettingsTypesMap[this._styleSettingsType()]((modelJson || {})[this._styleSettingsType()]));
            delete this['_model'][this._styleSettingsType()];
        }
        this.styleSettings.subscribe(styleSettings => {
            this._styleSettingsType(_style_settings_utils_1.styleSettingsTypes.filter(mapItem => styleSettings instanceof _style_settings_utils_1.styleSettingsTypesMap[mapItem])[0]);
        });
    }
    getInfo() {
        let styleSettingsInfo = format_condition_style_base_1.currentStyleSettingsInfo(this._styleSettingsType);
        if (!styleSettingsInfo || !styleSettingsInfo.modelName) {
            styleSettingsInfo = {
                propertyName: 'styleSettings',
                modelName: 'FakeSettingsForModelSubscriber',
                from: (json, serializer) => undefined,
                toJsonObject: (value, serializer, refs) => null
            };
        }
        return _range_info_1.rangeInfoSerializationsInfo.concat([styleSettingsInfo]);
    }
    clone() {
        var rangeInfo = new RangeInfo();
        rangeInfo.value.setValue(this.value.value(), this.value.type());
        rangeInfo.styleSettings(this.styleSettings().clone());
        return rangeInfo;
    }
    _getDefaultItemType() {
        return 'RangeInfo';
    }
}
exports.RangeInfo = RangeInfo;


/***/ }),

/***/ 10839:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RangeSet = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const _utils_1 = __webpack_require__(66358);
const serializable_model_1 = __webpack_require__(29591);
const _range_set_1 = __webpack_require__(97272);
const range_info_1 = __webpack_require__(38039);
class RangeSet extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.ranges = analytics_utils_1.deserializeArray(modelJson.Ranges, (range) => new range_info_1.RangeInfo(range, serializer));
    }
    getInfo() {
        return _range_set_1.rangeSetSerializationsInfo;
    }
}
__decorate([
    _utils_1.collectionItemType('RangeInfo')
], RangeSet.prototype, "ranges", void 0);
exports.RangeSet = RangeSet;


/***/ }),

/***/ 40923:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardItemFormatRule = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const serializable_model_1 = __webpack_require__(29591);
const _dashboard_item_format_rule_1 = __webpack_require__(41938);
const icon_settings_1 = __webpack_require__(15958);
class DashboardItemFormatRule extends serializable_model_1.TypedSerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.condition = ko.computed({
            read: () => {
                var info = _dashboard_item_format_rule_1.conditionTypes.filter(ct => this[ct.propertyName] && !this[ct.propertyName].isEmpty())[0];
                if (info) {
                    return this[info.propertyName];
                }
            },
            write: (newCondition) => {
                var info = _dashboard_item_format_rule_1.conditionTypes.filter(ct => newCondition instanceof ct.type)[0];
            }
        });
    }
    get _classCaption() {
        var info = _dashboard_item_format_rule_1.conditionTypes.filter(t => this.condition() instanceof t.type)[0];
        return info && (this.name() + ': ' + _default_1.getLocalizationById(info.displayName));
    }
    get _classId() {
        var info = _dashboard_item_format_rule_1.conditionTypes.filter(t => this.condition() instanceof t.type)[0];
        var id = info && info.propertyName;
        if (id === 'conditionRangeSet') {
            if (this.condition().actualStyles.filter(style => style instanceof icon_settings_1.IconSettings).length > 0) {
                id += '_icons';
            }
            else {
                id += '_colors';
            }
        }
        return id;
    }
    getInfo() {
        return _dashboard_item_format_rule_1.dashboardItemFormatRuleSerializationsInfo;
    }
    _changeConditionType(propertyName) {
        var condition = this[propertyName];
        var oldCondition = this.condition();
        condition.init();
        oldCondition && oldCondition.isEmpty(true);
    }
}
exports.DashboardItemFormatRule = DashboardItemFormatRule;


/***/ }),

/***/ 70666:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ComplexValue = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _parameters_helper_1 = __webpack_require__(57914);
const serializable_model_1 = __webpack_require__(29591);
const _format_rules_common_1 = __webpack_require__(94102);
class ComplexValue extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        if (!this.isEmpty() && !this.isInfinity) {
            this._persistedValue(_parameters_helper_1.ParameterHelper.convertSingleValue(this._persistedValue(), this.type()));
        }
        this.value = ko.pureComputed({
            read: () => this._persistedValue(),
            write: (val) => {
                if (val === _format_rules_common_1.negativeInfinity) {
                    this.type('System.Double');
                }
                this._persistedValue(val);
            }
        });
    }
    isEmpty() {
        return !this._persistedValue || !this.type || !this.type();
    }
    get isInfinity() {
        return this._persistedValue() == _format_rules_common_1.negativeInfinity;
    }
    getInfo() {
        return _format_rules_common_1.complexValueInfo;
    }
    setValue(value, type) {
        this.value(value);
        this.type(type);
    }
}
exports.ComplexValue = ComplexValue;


/***/ }),

/***/ 39430:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GridItemFormatRule = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const cells_item_format_rule_1 = __webpack_require__(56639);
const _grid_item_format_rule_1 = __webpack_require__(77172);
class GridItemFormatRule extends cells_item_format_rule_1.CellsItemFormatRule {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _grid_item_format_rule_1.gridItemFormatRuleSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'GridItemFormatRule';
    }
}
exports.GridItemFormatRule = GridItemFormatRule;


/***/ }),

/***/ 47976:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardFormatRuleRowElementSerializationsInfo = exports.textId = exports.dimensionId = exports.elementTypeApplyTo = void 0;
exports.elementTypeApplyTo = { propertyName: 'elementTypeApplyTo', modelName: '@LayoutItemApplyTo', displayName: 'DashboardStringId.FormatRuleApplyTo', defaultVal: 'Title', simpleFormAdapterItem: 'selectBoxEditor' };
exports.dimensionId = { propertyName: 'dimensionId', modelName: '@DimensionId', displayName: 'DashboardWebStringId.FormatRuleApplyToDimensionElement', defaultVal: '', simpleFormAdapterItem: 'selectBoxEditor' };
exports.textId = { propertyName: 'textId', modelName: '@Text', displayName: 'DashboardWebStringId.FormatRuleApplyToTextElement', defaultVal: '', simpleFormAdapterItem: 'selectBoxEditor' };
exports.cardFormatRuleRowElementSerializationsInfo = [exports.elementTypeApplyTo, exports.dimensionId, exports.textId];


/***/ }),

/***/ 2357:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardItemDeltaFormatRuleSerializationsInfo = exports.cardId = exports.deltaValueType = void 0;
const _card_item_format_rule_base_1 = __webpack_require__(8943);
exports.deltaValueType = { propertyName: 'deltaValueType', modelName: '@DeltaValueType', defaultVal: 'AbsoluteVariation', displayName: 'DashboardWebStringId.Delta.ValueType' };
exports.cardId = { propertyName: 'cardId', modelName: '@CardId' };
exports.cardItemDeltaFormatRuleSerializationsInfo = _card_item_format_rule_base_1.cardItemFormatRuleSerializationsInfoBase.concat([exports.deltaValueType, exports.cardId]);


/***/ }),

/***/ 8943:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardItemFormatRuleSerializationsInfoBase = exports.cardLayoutElement = exports.layoutItemApplyTo = void 0;
const card_format_rule_row_element_1 = __webpack_require__(53398);
const _card_format_rule_row_element_1 = __webpack_require__(47976);
const _dashboard_item_format_rule_1 = __webpack_require__(41938);
exports.layoutItemApplyTo = { propertyName: 'layoutItemApplyTo', modelName: '@LayoutItemApplyTo', displayName: 'DashboardStringId.FormatRuleApplyTo', defaultVal: 'Title' };
exports.cardLayoutElement = { propertyName: 'cardLayoutElement', modelName: 'CardFormatRuleLayoutElement', displayName: 'DashboardStringId.FormatRuleApplyTo', type: card_format_rule_row_element_1.CardFormatRuleRowElement, info: _card_format_rule_row_element_1.cardFormatRuleRowElementSerializationsInfo };
exports.cardItemFormatRuleSerializationsInfoBase = _dashboard_item_format_rule_1.dashboardItemFormatRuleSerializationsInfo.concat([exports.cardLayoutElement, exports.layoutItemApplyTo]);


/***/ }),

/***/ 47729:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardItemFormatRuleSerializationsInfo = exports.cardItemformatRuleDataItem = void 0;
const _card_item_format_rule_base_1 = __webpack_require__(8943);
exports.cardItemformatRuleDataItem = { propertyName: 'dataItemName', modelName: '@DataItem' };
exports.cardItemFormatRuleSerializationsInfo = _card_item_format_rule_base_1.cardItemFormatRuleSerializationsInfoBase.concat([exports.cardItemformatRuleDataItem]);


/***/ }),

/***/ 42079:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cellsItemFormatRuleSerializationsInfo = exports.dataItemApplyTo = exports.formatRuleDataItem = exports.applyToRow = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _dashboard_item_format_rule_1 = __webpack_require__(41938);
exports.applyToRow = { propertyName: 'applyToRow', modelName: '@ApplyToRow', displayName: 'DashboardStringId.FormatRuleApplyToRow', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.formatRuleDataItem = { propertyName: 'dataItemName', modelName: '@DataItem', displayName: 'DashboardWebStringId.ConditionalFormatting.CalculatedBy', simpleFormAdapterItem: 'selectBoxEditor' };
exports.dataItemApplyTo = { propertyName: '_dataItemApplyToName', modelName: '@DataItemApplyTo', displayName: 'DashboardStringId.FormatRuleApplyTo', simpleFormAdapterItem: 'selectBoxEditor' };
exports.cellsItemFormatRuleSerializationsInfo = _dashboard_item_format_rule_1.dashboardItemFormatRuleSerializationsInfo.concat([exports.applyToRow, exports.formatRuleDataItem, exports.dataItemApplyTo]);


/***/ }),

/***/ 38980:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.chartItemFormatRuleSerializationsInfoBase = exports.dataItemName = exports.displayName = exports.showInLegend = void 0;
const _dashboard_item_format_rule_1 = __webpack_require__(41938);
exports.showInLegend = { propertyName: 'showInLegend', modelName: '@ShowInLegend', displayName: 'DashboardStringId.FormatRuleDisplayInLegend', defaultVal: true, simpleFormAdapterItem: 'yesNoButtonGroupEditor' };
exports.displayName = { propertyName: 'displayName', modelName: '@DisplayName', displayName: 'DashboardStringId.FormatRuleDisplayName', simpleFormAdapterItem: 'textBoxEditor' };
exports.dataItemName = { propertyName: 'dataItemName', modelName: '@DataItem', displayName: 'DashboardWebStringId.ConditionalFormatting.CalculatedBy', simpleFormAdapterItem: 'selectBoxEditor' };
exports.chartItemFormatRuleSerializationsInfoBase = _dashboard_item_format_rule_1.dashboardItemFormatRuleSerializationsInfo.concat([exports.showInLegend, exports.displayName, exports.dataItemName]);


/***/ }),

/***/ 78320:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.chartItemFormatRuleSerializationsInfo = exports.applyToChartElement = exports.dataItemApplyToName = void 0;
const _chart_item_format_rule_base_1 = __webpack_require__(38980);
exports.dataItemApplyToName = { propertyName: 'dataItemApplyToName', modelName: '@SeriesId', displayName: 'DashboardStringId.FormatRuleApplyTo', simpleFormAdapterItem: 'selectBoxEditor' };
exports.applyToChartElement = { propertyName: 'applyToChartElement', modelName: '@ApplyToChartElement', displayName: 'DashboardStringId.FormatRuleApplyToChartElement', defaultVal: 'Point',
    simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Point': 'DashboardStringId.ChartElementPointCaption',
        'LineOrArea': 'DashboardStringId.ChartElementLineOrAreaCaption'
    }
};
exports.chartItemFormatRuleSerializationsInfo = _chart_item_format_rule_base_1.chartItemFormatRuleSerializationsInfoBase.concat([exports.dataItemApplyToName, exports.applyToChartElement]);


/***/ }),

/***/ 41938:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dashboardItemFormatRuleSerializationsInfo = exports.condition = exports.conditionTypes = exports.enabled = exports.classCaption = exports.formatRuleName = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const format_condition_average_1 = __webpack_require__(92610);
const format_condition_bar_1 = __webpack_require__(62270);
const format_condition_date_occuring_1 = __webpack_require__(9426);
const format_condition_expression_1 = __webpack_require__(92267);
const format_condition_top_bottom_1 = __webpack_require__(2407);
const format_condition_value_1 = __webpack_require__(32420);
const format_condition_range_color_bar_1 = __webpack_require__(14780);
const format_condition_range_gradient_1 = __webpack_require__(95768);
const format_condition_range_gradient_bar_1 = __webpack_require__(37578);
const format_condition_range_set_1 = __webpack_require__(54057);
exports.formatRuleName = {
    propertyName: 'name', modelName: '@Name', displayName: 'DashboardWebStringId.Options.Caption', simpleFormAdapterItem: 'textBoxEditor'
};
exports.classCaption = {
    propertyName: '_classCaption', displayName: 'DashboardWebStringId.Options.Caption', simpleFormAdapterItem: 'textBoxEditor'
};
exports.enabled = { propertyName: 'enabled', modelName: '@Enabled', displayName: 'DashboardWebStringId.TopNEnabled', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.conditionTypes = [
    { propertyName: 'conditionValue', displayName: 'DashboardStringId.CommandFormatRuleValue', modelName: 'FormatConditionValue', type: format_condition_value_1.FormatConditionValue },
    { propertyName: 'conditionTopBottom', displayName: 'DashboardStringId.CommandFormatRuleTopBottom', modelName: 'FormatConditionTopBottom', type: format_condition_top_bottom_1.FormatConditionTopBottom },
    { propertyName: 'conditionAverage', displayName: 'DashboardStringId.CommandFormatRuleAboveBelowAverage', modelName: 'FormatConditionAverage', type: format_condition_average_1.FormatConditionAverage },
    { propertyName: 'conditionDateOccuring', displayName: 'DashboardStringId.CommandFormatRuleDateOccurring', modelName: 'FormatConditionDateOccurring', type: format_condition_date_occuring_1.FormatConditionDateOccurring },
    { propertyName: 'conditionExpression', displayName: 'DashboardStringId.CommandFormatRuleExpression', modelName: 'FormatConditionExpression', type: format_condition_expression_1.FormatConditionExpression },
    { propertyName: 'conditionBar', displayName: 'DashboardStringId.CommandFormatRuleBar', modelName: 'FormatConditionBar', type: format_condition_bar_1.FormatConditionBar },
    { propertyName: 'conditionColorRangeBar', displayName: 'DashboardStringId.CommandFormatRuleColorRangeBar', modelName: 'FormatConditionColorRangeBar', type: format_condition_range_color_bar_1.FormatConditionColorRangeBar },
    { propertyName: 'conditionGradientRangeBar', displayName: 'DashboardWebStringId.ConditionalFormatting.GradientRangeBar', modelName: 'FormatConditionGradientRangeBar', type: format_condition_range_gradient_bar_1.FormatConditionGradientRangeBar },
    { propertyName: 'conditionRangeGradient', displayName: 'DashboardWebStringId.ConditionalFormatting.RangeGradient', modelName: 'FormatConditionRangeGradient', type: format_condition_range_gradient_1.FormatConditionRangeGradient },
    { propertyName: 'conditionRangeSet', displayName: 'DashboardStringId.CommandFormatRuleRangeSet', modelName: 'FormatConditionRangeSet', type: format_condition_range_set_1.FormatConditionRangeSet }
];
exports.condition = { propertyName: 'condition' };
exports.dashboardItemFormatRuleSerializationsInfo = [_base_metadata_1.itemType, exports.formatRuleName, exports.enabled, exports.condition].concat(exports.conditionTypes);


/***/ }),

/***/ 94102:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.barOptions = exports.styleSettings = exports.complexValueInfo = exports.complexValueValue = exports.complexValuePersistedValue = exports.complexValueType = exports.fieldTypes = exports.negativeInfinity = void 0;
const format_condition_bar_options_1 = __webpack_require__(71697);
exports.negativeInfinity = '-Infinity';
exports.fieldTypes = {
    Text: 'System.String',
    DateTime: 'System.DateTime',
    Bool: 'System.Boolean',
    Integer: 'System.Int32',
    Float: 'System.Single',
    Double: 'System.Double',
    Decimal: 'System.Decimal',
    Enum: 'Enum',
    Custom: 'Custom',
    Unknown: 'Unknown'
};
exports.complexValueType = { propertyName: 'type', modelName: '@Type', defaultVal: null };
exports.complexValuePersistedValue = { propertyName: '_persistedValue', modelName: '@Value', defaultVal: null };
exports.complexValueValue = { propertyName: 'value' };
exports.complexValueInfo = [exports.complexValueType, exports.complexValueValue, exports.complexValuePersistedValue];
exports.styleSettings = { propertyName: 'styleSettings', displayName: 'DashboardWebStringId.StyleSettings' };
exports.barOptions = { propertyName: 'barOptions', modelName: 'BarOptions', displayName: 'DashboardWebStringId.ConditionalFormatting.BarOptions', type: format_condition_bar_options_1.FormatConditionBarOptions };


/***/ }),

/***/ 77172:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gridItemFormatRuleSerializationsInfo = void 0;
const _cells_item_format_rule_1 = __webpack_require__(42079);
exports.gridItemFormatRuleSerializationsInfo = _cells_item_format_rule_1.cellsItemFormatRuleSerializationsInfo.concat([]);


/***/ }),

/***/ 40649:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pivotItemFormatRuleLevelSerializationsInfo = exports.pivotLevelRow = exports.pivotLevelColumn = void 0;
exports.pivotLevelColumn = { propertyName: 'column', modelName: '@Column', displayName: 'DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension', simpleFormAdapterItem: 'selectBoxEditor' };
exports.pivotLevelRow = { propertyName: 'row', modelName: '@Row', displayName: 'DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension', simpleFormAdapterItem: 'selectBoxEditor' };
exports.pivotItemFormatRuleLevelSerializationsInfo = [exports.pivotLevelColumn, exports.pivotLevelRow];


/***/ }),

/***/ 36503:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pivotItemFormatRuleSerializationsInfo = exports.pivotLevel = exports.intersectionLevelMode = exports.restrictedIntersectionLevelModeValues = exports.intersectionLevelModeValues = exports.applyToColumn = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const pivot_item_format_rule_level_1 = __webpack_require__(97488);
const _cells_item_format_rule_1 = __webpack_require__(42079);
exports.applyToColumn = { propertyName: 'applyToColumn', modelName: '@ApplyToColumn', displayName: 'DashboardStringId.FormatRuleApplyToColumn', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.intersectionLevelModeValues = {
    'Auto': 'DashboardStringId.IntersectionLevelModeAuto',
    'FirstLevel': 'DashboardStringId.IntersectionLevelModeFirst',
    'LastLevel': 'DashboardStringId.IntersectionLevelModeLast',
    'AllLevels': 'DashboardStringId.IntersectionLevelModeAll',
    'SpecificLevel': 'DashboardStringId.IntersectionLevelModeSpecific'
};
exports.restrictedIntersectionLevelModeValues = Object.assign({}, exports.intersectionLevelModeValues);
delete exports.restrictedIntersectionLevelModeValues['AllLevels'];
exports.intersectionLevelMode = {
    propertyName: 'intersectionLevelMode', modelName: '@IntersectionLevelMode', displayName: 'DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode', defaultVal: 'Auto'
};
exports.pivotLevel = { propertyName: 'level', modelName: 'PivotItemFormatRuleLevel', type: pivot_item_format_rule_level_1.PivotItemFormatRuleLevel };
exports.pivotItemFormatRuleSerializationsInfo = _cells_item_format_rule_1.cellsItemFormatRuleSerializationsInfo.concat([exports.applyToColumn, exports.intersectionLevelMode, exports.pivotLevel]);


/***/ }),

/***/ 97488:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PivotItemFormatRuleLevel = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _pivot_item_format_rule_level_1 = __webpack_require__(40649);
class PivotItemFormatRuleLevel extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _pivot_item_format_rule_level_1.pivotItemFormatRuleLevelSerializationsInfo;
    }
}
exports.PivotItemFormatRuleLevel = PivotItemFormatRuleLevel;


/***/ }),

/***/ 40014:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PivotItemFormatRule = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const cells_item_format_rule_1 = __webpack_require__(56639);
const _pivot_item_format_rule_1 = __webpack_require__(36503);
class PivotItemFormatRule extends cells_item_format_rule_1.CellsItemFormatRule {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _pivot_item_format_rule_1.pivotItemFormatRuleSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'PivotItemFormatRule';
    }
}
exports.PivotItemFormatRule = PivotItemFormatRule;


/***/ }),

/***/ 22149:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ScatterChartItemFormatRule = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const chart_item_format_rule_base_1 = __webpack_require__(49269);
const _chart_item_format_rule_base_1 = __webpack_require__(38980);
class ScatterChartItemFormatRule extends chart_item_format_rule_base_1.ChartItemFormatRuleBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    _getDefaultItemType() {
        return 'ScatterChartItemFormatRule';
    }
    getInfo() {
        return _chart_item_format_rule_base_1.chartItemFormatRuleSerializationsInfoBase;
    }
}
exports.ScatterChartItemFormatRule = ScatterChartItemFormatRule;


/***/ }),

/***/ 67172:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.styleSettingsTypes = exports.styleSettingsTypesMap = void 0;
const appearance_settings_1 = __webpack_require__(93722);
const bar_style_settings_1 = __webpack_require__(9661);
const color_style_settings_1 = __webpack_require__(28872);
const icon_settings_1 = __webpack_require__(15958);
exports.styleSettingsTypesMap = {
    'AppearanceSettings': appearance_settings_1.AppearanceSettings,
    'IconSettings': icon_settings_1.IconSettings,
    'BarStyleSettings': bar_style_settings_1.BarStyleSettings,
    'ColorStyleSettings': color_style_settings_1.ColorStyleSettings,
};
exports.styleSettingsTypes = Object.keys(exports.styleSettingsTypesMap);


/***/ }),

/***/ 93722:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppearanceSettings = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const color_1 = __webpack_require__(78224);
const _appearance_settings_1 = __webpack_require__(91566);
const style_settings_base_1 = __webpack_require__(94818);
class AppearanceSettings extends style_settings_base_1.StyleSettingsBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _appearance_settings_1.appearanceSettingsSerializationsInfo;
    }
    equals(style) {
        return (style instanceof AppearanceSettings) &&
            this.appearanceType() === style.appearanceType() &&
            this.fontFamily() == style.fontFamily() &&
            this.fontStyle() == style.fontStyle() &&
            color_1.Color.equals(this.backColor(), style.backColor()) &&
            color_1.Color.equals(this.foreColor(), style.foreColor());
    }
    clone() {
        var style = new AppearanceSettings({});
        style.appearanceType(this.appearanceType());
        style.fontFamily(this.fontFamily());
        style.fontStyle(this.fontStyle());
        style.backColor(this.backColor());
        style.foreColor(this.foreColor());
        return style;
    }
    setSpecificType(type) {
        this.appearanceType(type);
    }
    init() {
        this.appearanceType('PaleRed');
    }
}
exports.AppearanceSettings = AppearanceSettings;


/***/ }),

/***/ 9661:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BarStyleSettings = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const color_style_settings_1 = __webpack_require__(28872);
class BarStyleSettings extends color_style_settings_1.ColorStyleSettings {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    clone() {
        var style = new BarStyleSettings({});
        style.predefinedColor(this.predefinedColor());
        style.color(this.color());
        return style;
    }
    init() {
        this.predefinedColor('PaleRed');
    }
}
exports.BarStyleSettings = BarStyleSettings;


/***/ }),

/***/ 28872:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColorStyleSettings = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const color_1 = __webpack_require__(78224);
const _color_style_settings_1 = __webpack_require__(80793);
const style_settings_base_1 = __webpack_require__(94818);
class ColorStyleSettings extends style_settings_base_1.StyleSettingsBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _color_style_settings_1.colorStyleSettingsSerializationsInfo;
    }
    equals(style) {
        return (style instanceof ColorStyleSettings) &&
            this.predefinedColor() === style.predefinedColor() &&
            color_1.Color.equals(this.color(), style.color());
    }
    clone() {
        var style = new ColorStyleSettings({});
        style.predefinedColor(this.predefinedColor());
        style.color(this.color());
        return style;
    }
    setSpecificType(type) {
        this.predefinedColor(type);
    }
    init() {
        this.predefinedColor('Red');
    }
}
exports.ColorStyleSettings = ColorStyleSettings;


/***/ }),

/***/ 15958:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IconSettings = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const _icon_settings_1 = __webpack_require__(25681);
const style_settings_base_1 = __webpack_require__(94818);
class IconSettings extends style_settings_base_1.StyleSettingsBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _icon_settings_1.iconSettingsSerializationsInfo;
    }
    equals(style) {
        return (style instanceof IconSettings) && this.iconType() === style.iconType();
    }
    clone() {
        var style = new IconSettings({});
        style.iconType(this.iconType());
        return style;
    }
    setSpecificType(type) {
        this.iconType(type);
    }
    init() {
        this.iconType('DirectionalGreenArrowUp');
    }
}
exports.IconSettings = IconSettings;


/***/ }),

/***/ 91566:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.appearanceSettingsSerializationsInfo = exports.foreColor = exports.backColor = exports.fontFamily = exports.fontStyle = exports.appearanceType = void 0;
const color_1 = __webpack_require__(78224);
const _style_settings_base_1 = __webpack_require__(86347);
exports.appearanceType = {
    propertyName: 'appearanceType', modelName: '@AppearanceType', displayName: 'DashboardWebStringId.ConditionalFormatting.AppearanceType', defaultVal: _style_settings_base_1.emptyStyleType, simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'None': 'DashboardStringId.FormatConditionAppearanceNone',
        'Custom': 'DashboardStringId.FormatConditionAppearanceCustom',
        'PaleRed': 'DashboardStringId.FormatConditionAppearancePaleRed',
        'PaleYellow': 'DashboardStringId.FormatConditionAppearancePaleYellow',
        'PaleGreen': 'DashboardStringId.FormatConditionAppearancePaleGreen',
        'PaleBlue': 'DashboardStringId.FormatConditionAppearancePaleBlue',
        'PalePurple': 'DashboardStringId.FormatConditionAppearancePalePurple',
        'PaleCyan': 'DashboardStringId.FormatConditionAppearancePaleCyan',
        'PaleOrange': 'DashboardStringId.FormatConditionAppearancePaleOrange',
        'PaleGray': 'DashboardStringId.FormatConditionAppearancePaleGray',
        'Red': 'DashboardStringId.FormatConditionAppearanceRed',
        'Yellow': 'DashboardStringId.FormatConditionAppearanceYellow',
        'Green': 'DashboardStringId.FormatConditionAppearanceGreen',
        'Blue': 'DashboardStringId.FormatConditionAppearanceBlue',
        'Purple': 'DashboardStringId.FormatConditionAppearancePurple',
        'Cyan': 'DashboardStringId.FormatConditionAppearanceCyan',
        'Orange': 'DashboardStringId.FormatConditionAppearanceOrange',
        'Gray': 'DashboardStringId.FormatConditionAppearanceGray',
        'GradientRed': 'DashboardStringId.FormatConditionAppearanceGradientRed',
        'GradientYellow': 'DashboardStringId.FormatConditionAppearanceGradientYellow',
        'GradientGreen': 'DashboardStringId.FormatConditionAppearanceGradientGreen',
        'GradientBlue': 'DashboardStringId.FormatConditionAppearanceGradientBlue',
        'GradientPurple': 'DashboardStringId.FormatConditionAppearanceGradientPurple',
        'GradientCyan': 'DashboardStringId.FormatConditionAppearanceGradientCyan',
        'GradientOrange': 'DashboardStringId.FormatConditionAppearanceGradientOrange',
        'GradientTransparent': 'DashboardStringId.FormatConditionAppearanceGradientTransparent',
        'FontBold': 'DashboardStringId.FormatConditionAppearanceFontBold',
        'FontItalic': 'DashboardStringId.FormatConditionAppearanceFontItalic',
        'FontUnderline': 'DashboardStringId.FormatConditionAppearanceFontUnderline',
        'FontGrayed': 'DashboardStringId.FormatConditionAppearanceFontGrayed',
        'FontRed': 'DashboardStringId.FormatConditionAppearanceFontRed',
        'FontYellow': 'DashboardStringId.FormatConditionAppearanceFontYellow',
        'FontGreen': 'DashboardStringId.FormatConditionAppearanceFontGreen',
        'FontBlue': 'DashboardStringId.FormatConditionAppearanceFontBlue'
    }
};
exports.fontStyle = {
    propertyName: 'fontStyle', modelName: '@FontStyle', displayName: 'DashboardWebStringId.ConditionalFormatting.FontStyle', defaultVal: null, simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'Regular': 'DashboardWebStringId.ConditionalFormatting.FontRegular',
        'Bold': 'DashboardStringId.FormatConditionAppearanceFontBold',
        'Italic': 'DashboardStringId.FormatConditionAppearanceFontItalic',
        'Underline': 'DashboardStringId.FormatConditionAppearanceFontUnderline',
        'Strikeout': 'DashboardStringId.FormatConditionAppearanceFontStrikeout'
    }
};
exports.fontFamily = { propertyName: 'fontFamily', modelName: '@FontFamily', displayName: 'DashboardWebStringId.ConditionalFormatting.FontFamily', defaultVal: 'Segoe UI', simpleFormAdapterItem: 'textBoxEditor' };
exports.backColor = { propertyName: 'backColor', modelName: '@BackColor', displayName: 'DashboardWebStringId.ConditionalFormatting.Appearance.BackColor', defaultVal: null, from: color_1.Color._colorFromModel, toJsonObject: color_1.Color._colorToModel, simpleFormAdapterItem: 'numberBoxEditor' };
exports.foreColor = { propertyName: 'foreColor', modelName: '@ForeColor', displayName: 'DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor', defaultVal: null, from: color_1.Color._colorFromModel, toJsonObject: color_1.Color._colorToModel, simpleFormAdapterItem: 'numberBoxEditor' };
exports.appearanceSettingsSerializationsInfo = _style_settings_base_1.styleSettingsBaseSerializationsInfo.concat([exports.appearanceType, exports.backColor, exports.foreColor, exports.fontFamily, exports.fontStyle]);


/***/ }),

/***/ 80793:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.colorStyleSettingsSerializationsInfo = exports.color = exports.predefinedColor = void 0;
const color_1 = __webpack_require__(78224);
const _appearance_settings_1 = __webpack_require__(91566);
const _style_settings_base_1 = __webpack_require__(86347);
exports.predefinedColor = {
    propertyName: 'predefinedColor', modelName: '@PredefinedColor', displayName: 'DashboardStringId.FormatRulePredefinedColor', defaultVal: _appearance_settings_1.appearanceType.defaultVal, simpleFormAdapterItem: _appearance_settings_1.appearanceType.simpleFormAdapterItem, values: _appearance_settings_1.appearanceType.values
};
exports.color = { propertyName: 'color', modelName: '@Color', displayName: 'DashboardStringId.DescriptionItemColor', defaultVal: null, from: color_1.Color._colorFromModel, toJsonObject: color_1.Color._colorToModel, simpleFormAdapterItem: 'numberBoxEditor' };
exports.colorStyleSettingsSerializationsInfo = _style_settings_base_1.styleSettingsBaseSerializationsInfo.concat([exports.color, exports.predefinedColor]);


/***/ }),

/***/ 25681:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.iconSettingsSerializationsInfo = exports.iconType = void 0;
const _style_settings_base_1 = __webpack_require__(86347);
exports.iconType = {
    propertyName: 'iconType', modelName: '@IconType', displayName: 'DashboardWebStringId.ConditionalFormatting.IconType', defaultVal: 'None', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'None': 'DashboardWebStringId.ConditionalFormatting.IconType.None',
        'DirectionalGreenArrowUp': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp',
        'DirectionalYellowUpInclineArrow': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow',
        'DirectionalYellowSideArrow': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow',
        'DirectionalYellowDownInclineArrow': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow',
        'DirectionalRedDownArrow': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow',
        'DirectionalGrayArrowUp': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp',
        'DirectionalGrayUpInclineArrow': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow',
        'DirectionalGraySideArrow': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow',
        'DirectionalGrayDownInclineArrow': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow',
        'DirectionalGrayDownArrow': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow',
        'DirectionalYellowDash': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash',
        'DirectionalRedTriangleDown': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown',
        'DirectionalGreenTriangleUp': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp',
        'RatingFullGrayStar': 'DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar',
        'RatingHalfGrayStar': 'DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar',
        'RatingEmptyGrayStar': 'DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar',
        'RatingFullGrayCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle',
        'Rating1QuarterGrayCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle',
        'Rating2QuartersGrayCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle',
        'Rating3QuartersGrayCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle',
        'RatingEmptyGrayCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle',
        'Rating4Bars': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars',
        'Rating3Bars': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars',
        'Rating2Bars': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars',
        'Rating1Bar': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar',
        'Rating0Bars': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars',
        'Rating4FilledBoxes': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes',
        'Rating3FilledBoxes': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes',
        'Rating2FilledBoxes': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes',
        'Rating1FilledBox': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox',
        'Rating0FilledBoxes': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes',
        'ShapeGreenTrafficLight': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight',
        'ShapeYellowTrafficLight': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight',
        'ShapeRedTrafficLight': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight',
        'ShapeGreenCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle',
        'ShapeYellowCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle',
        'ShapeRedCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle',
        'ShapeLightRedCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle',
        'ShapeLightGrayCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle',
        'ShapeYellowTriangle': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle',
        'ShapeRedDiamond': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond',
        'IndicatorGreenCheck': 'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck',
        'IndicatorYellowExclamation': 'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation',
        'IndicatorRedCross': 'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross',
        'IndicatorCircledGreenCheck': 'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck',
        'IndicatorCircledYellowExclamation': 'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation',
        'IndicatorCircledRedCross': 'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross',
        'IndicatorGreenFlag': 'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag',
        'IndicatorYellowFlag': 'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag',
        'IndicatorRedFlag': 'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag'
    }
};
exports.iconSettingsSerializationsInfo = _style_settings_base_1.styleSettingsBaseSerializationsInfo.concat([exports.iconType]);


/***/ }),

/***/ 86347:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.styleSettingsBaseSerializationsInfo = exports.emptyStyleType = void 0;
exports.emptyStyleType = 'None';
exports.styleSettingsBaseSerializationsInfo = [];


/***/ }),

/***/ 28823:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RangeIndexSettings = void 0;
const ko = __webpack_require__(71032);
const style_settings_base_1 = __webpack_require__(94818);
class RangeIndexSettings extends style_settings_base_1.StyleSettingsBase {
    constructor(index) {
        super(null);
        this.index = ko.observable(-1);
        this.isBarStyle = ko.observable(false);
        this.index(index);
    }
    equals(style) {
        return (style instanceof RangeIndexSettings) && this.index() === style.index();
    }
    clone() {
        var style = new RangeIndexSettings(this.index());
        style.isBarStyle(this.isBarStyle());
        return style;
    }
}
exports.RangeIndexSettings = RangeIndexSettings;


/***/ }),

/***/ 94818:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StyleSettingsBase = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _style_settings_base_1 = __webpack_require__(86347);
class StyleSettingsBase extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _style_settings_base_1.styleSettingsBaseSerializationsInfo;
    }
    init() { }
    setSpecificType(type) {
    }
}
exports.StyleSettingsBase = StyleSettingsBase;


/***/ }),

/***/ 61442:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(76114);
__webpack_require__(47350);
__webpack_require__(97749);
__webpack_require__(9627);
__webpack_require__(53151);
__webpack_require__(8748);
__webpack_require__(30945);
__webpack_require__(95545);
__exportStar(__webpack_require__(78224), exports);
__exportStar(__webpack_require__(938), exports);
__exportStar(__webpack_require__(68800), exports);
__exportStar(__webpack_require__(74425), exports);
__exportStar(__webpack_require__(59958), exports);
__exportStar(__webpack_require__(83163), exports);
__exportStar(__webpack_require__(16318), exports);
__exportStar(__webpack_require__(15306), exports);
__exportStar(__webpack_require__(51372), exports);
__exportStar(__webpack_require__(9237), exports);
__exportStar(__webpack_require__(37831), exports);
__exportStar(__webpack_require__(71849), exports);
__exportStar(__webpack_require__(29588), exports);
__exportStar(__webpack_require__(85279), exports);
__exportStar(__webpack_require__(24150), exports);
__exportStar(__webpack_require__(62747), exports);
__exportStar(__webpack_require__(44650), exports);
__exportStar(__webpack_require__(67695), exports);
__exportStar(__webpack_require__(48336), exports);
__exportStar(__webpack_require__(17012), exports);
__exportStar(__webpack_require__(8745), exports);
__exportStar(__webpack_require__(84143), exports);
__exportStar(__webpack_require__(20258), exports);
__exportStar(__webpack_require__(5890), exports);
__exportStar(__webpack_require__(95912), exports);
__exportStar(__webpack_require__(37906), exports);
__exportStar(__webpack_require__(74599), exports);
__exportStar(__webpack_require__(64069), exports);
__exportStar(__webpack_require__(58554), exports);
__exportStar(__webpack_require__(58720), exports);
__exportStar(__webpack_require__(31615), exports);
__exportStar(__webpack_require__(23810), exports);
__exportStar(__webpack_require__(53955), exports);
__exportStar(__webpack_require__(69595), exports);
__exportStar(__webpack_require__(4431), exports);
__exportStar(__webpack_require__(69468), exports);
__exportStar(__webpack_require__(94503), exports);
__exportStar(__webpack_require__(95130), exports);
__exportStar(__webpack_require__(71010), exports);
__exportStar(__webpack_require__(43407), exports);
__exportStar(__webpack_require__(40755), exports);
__exportStar(__webpack_require__(66265), exports);
__exportStar(__webpack_require__(99253), exports);
__exportStar(__webpack_require__(76114), exports);
__exportStar(__webpack_require__(56639), exports);
__exportStar(__webpack_require__(3267), exports);
__exportStar(__webpack_require__(92610), exports);
__exportStar(__webpack_require__(62270), exports);
__exportStar(__webpack_require__(71697), exports);
__exportStar(__webpack_require__(51251), exports);
__exportStar(__webpack_require__(9426), exports);
__exportStar(__webpack_require__(92267), exports);
__exportStar(__webpack_require__(65661), exports);
__exportStar(__webpack_require__(99872), exports);
__exportStar(__webpack_require__(2407), exports);
__exportStar(__webpack_require__(32420), exports);
__exportStar(__webpack_require__(80161), exports);
__exportStar(__webpack_require__(14780), exports);
__exportStar(__webpack_require__(95768), exports);
__exportStar(__webpack_require__(37578), exports);
__exportStar(__webpack_require__(54057), exports);
__exportStar(__webpack_require__(96463), exports);
__exportStar(__webpack_require__(25496), exports);
__exportStar(__webpack_require__(38039), exports);
__exportStar(__webpack_require__(10839), exports);
__exportStar(__webpack_require__(40923), exports);
__exportStar(__webpack_require__(70666), exports);
__exportStar(__webpack_require__(39430), exports);
__exportStar(__webpack_require__(40014), exports);
__exportStar(__webpack_require__(97488), exports);
__exportStar(__webpack_require__(22149), exports);
__exportStar(__webpack_require__(93722), exports);
__exportStar(__webpack_require__(9661), exports);
__exportStar(__webpack_require__(28872), exports);
__exportStar(__webpack_require__(15958), exports);
__exportStar(__webpack_require__(28823), exports);
__exportStar(__webpack_require__(94818), exports);
__exportStar(__webpack_require__(9627), exports);
__exportStar(__webpack_require__(35999), exports);
__exportStar(__webpack_require__(15942), exports);
__exportStar(__webpack_require__(95044), exports);
__exportStar(__webpack_require__(91084), exports);
__exportStar(__webpack_require__(47388), exports);
__exportStar(__webpack_require__(15193), exports);
__exportStar(__webpack_require__(86858), exports);
__exportStar(__webpack_require__(62567), exports);
__exportStar(__webpack_require__(74380), exports);
__exportStar(__webpack_require__(97851), exports);
__exportStar(__webpack_require__(99237), exports);
__exportStar(__webpack_require__(33166), exports);
__exportStar(__webpack_require__(28665), exports);
__exportStar(__webpack_require__(34303), exports);
__exportStar(__webpack_require__(52469), exports);
__exportStar(__webpack_require__(41435), exports);
__exportStar(__webpack_require__(53151), exports);
__exportStar(__webpack_require__(91587), exports);
__exportStar(__webpack_require__(8748), exports);
__exportStar(__webpack_require__(30945), exports);
__exportStar(__webpack_require__(95545), exports);
__exportStar(__webpack_require__(79400), exports);
__exportStar(__webpack_require__(5815), exports);
__exportStar(__webpack_require__(70355), exports);
__exportStar(__webpack_require__(76885), exports);
__exportStar(__webpack_require__(13102), exports);
__exportStar(__webpack_require__(78588), exports);
__exportStar(__webpack_require__(7103), exports);
__exportStar(__webpack_require__(16525), exports);
__exportStar(__webpack_require__(65392), exports);
__exportStar(__webpack_require__(29847), exports);
__exportStar(__webpack_require__(19851), exports);
__exportStar(__webpack_require__(5697), exports);
__exportStar(__webpack_require__(27233), exports);
__exportStar(__webpack_require__(74873), exports);
__exportStar(__webpack_require__(59547), exports);
__exportStar(__webpack_require__(86961), exports);
__exportStar(__webpack_require__(1975), exports);
__exportStar(__webpack_require__(28093), exports);
__exportStar(__webpack_require__(5442), exports);
__exportStar(__webpack_require__(54081), exports);
__exportStar(__webpack_require__(65032), exports);
__exportStar(__webpack_require__(61249), exports);
__exportStar(__webpack_require__(37797), exports);
__exportStar(__webpack_require__(57615), exports);
__exportStar(__webpack_require__(10102), exports);
__exportStar(__webpack_require__(85596), exports);
__exportStar(__webpack_require__(65422), exports);
__exportStar(__webpack_require__(26114), exports);
__exportStar(__webpack_require__(73505), exports);
__exportStar(__webpack_require__(80638), exports);
__exportStar(__webpack_require__(27526), exports);
__exportStar(__webpack_require__(86785), exports);
__exportStar(__webpack_require__(50045), exports);
__exportStar(__webpack_require__(1103), exports);
__exportStar(__webpack_require__(19013), exports);
__exportStar(__webpack_require__(68920), exports);
__exportStar(__webpack_require__(78252), exports);
__exportStar(__webpack_require__(90300), exports);
__exportStar(__webpack_require__(73531), exports);
__exportStar(__webpack_require__(63716), exports);
__exportStar(__webpack_require__(58015), exports);
__exportStar(__webpack_require__(91456), exports);
__exportStar(__webpack_require__(43383), exports);
__exportStar(__webpack_require__(21741), exports);
__exportStar(__webpack_require__(12319), exports);
__exportStar(__webpack_require__(99290), exports);
__exportStar(__webpack_require__(3892), exports);
__exportStar(__webpack_require__(78717), exports);
__exportStar(__webpack_require__(97805), exports);
__exportStar(__webpack_require__(37021), exports);
__exportStar(__webpack_require__(48033), exports);
__exportStar(__webpack_require__(70091), exports);
__exportStar(__webpack_require__(60209), exports);
__exportStar(__webpack_require__(93096), exports);
__exportStar(__webpack_require__(43236), exports);
__exportStar(__webpack_require__(48438), exports);
__exportStar(__webpack_require__(21597), exports);
__exportStar(__webpack_require__(12052), exports);
__exportStar(__webpack_require__(31346), exports);
__exportStar(__webpack_require__(29591), exports);
__exportStar(__webpack_require__(21048), exports);


/***/ }),

/***/ 47350:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(78584);
__exportStar(__webpack_require__(66637), exports);
__exportStar(__webpack_require__(60618), exports);
__exportStar(__webpack_require__(9684), exports);
__exportStar(__webpack_require__(57094), exports);
__exportStar(__webpack_require__(76900), exports);
__exportStar(__webpack_require__(81638), exports);
__exportStar(__webpack_require__(8384), exports);
__exportStar(__webpack_require__(78584), exports);
__exportStar(__webpack_require__(4437), exports);
__exportStar(__webpack_require__(12784), exports);
__exportStar(__webpack_require__(64060), exports);
__exportStar(__webpack_require__(2908), exports);
__exportStar(__webpack_require__(66358), exports);
__exportStar(__webpack_require__(62248), exports);
__exportStar(__webpack_require__(61650), exports);
__exportStar(__webpack_require__(54159), exports);
__exportStar(__webpack_require__(2803), exports);
__exportStar(__webpack_require__(5279), exports);
__exportStar(__webpack_require__(74265), exports);
__exportStar(__webpack_require__(22335), exports);
__exportStar(__webpack_require__(57914), exports);


/***/ }),

/***/ 14198:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(61442);
__exportStar(__webpack_require__(61442), exports);


/***/ }),

/***/ 97749:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(34881), exports);
__exportStar(__webpack_require__(23888), exports);
__exportStar(__webpack_require__(19913), exports);
__exportStar(__webpack_require__(88978), exports);
__exportStar(__webpack_require__(37208), exports);
__exportStar(__webpack_require__(19573), exports);
__exportStar(__webpack_require__(61153), exports);
__exportStar(__webpack_require__(13137), exports);
__exportStar(__webpack_require__(44010), exports);
__exportStar(__webpack_require__(7577), exports);
__exportStar(__webpack_require__(47557), exports);
__exportStar(__webpack_require__(72150), exports);
__exportStar(__webpack_require__(41080), exports);
__exportStar(__webpack_require__(82177), exports);
__exportStar(__webpack_require__(9675), exports);
__exportStar(__webpack_require__(26712), exports);
__exportStar(__webpack_require__(45372), exports);
__exportStar(__webpack_require__(55569), exports);
__exportStar(__webpack_require__(18532), exports);
__exportStar(__webpack_require__(27005), exports);
__exportStar(__webpack_require__(99141), exports);
__exportStar(__webpack_require__(1870), exports);
__exportStar(__webpack_require__(68136), exports);
__exportStar(__webpack_require__(21389), exports);
__exportStar(__webpack_require__(6070), exports);
__exportStar(__webpack_require__(87262), exports);
__exportStar(__webpack_require__(18577), exports);
__exportStar(__webpack_require__(53012), exports);
__exportStar(__webpack_require__(6474), exports);
__exportStar(__webpack_require__(32454), exports);
__exportStar(__webpack_require__(81592), exports);
__exportStar(__webpack_require__(72439), exports);
__exportStar(__webpack_require__(84625), exports);
__exportStar(__webpack_require__(96211), exports);
__exportStar(__webpack_require__(80148), exports);
__exportStar(__webpack_require__(97952), exports);
__exportStar(__webpack_require__(93881), exports);
__exportStar(__webpack_require__(98602), exports);
__exportStar(__webpack_require__(84400), exports);
__exportStar(__webpack_require__(30692), exports);
__exportStar(__webpack_require__(29786), exports);
__exportStar(__webpack_require__(58053), exports);
__exportStar(__webpack_require__(87456), exports);
__exportStar(__webpack_require__(79380), exports);
__exportStar(__webpack_require__(57912), exports);
__exportStar(__webpack_require__(98827), exports);
__exportStar(__webpack_require__(40938), exports);
__exportStar(__webpack_require__(30634), exports);
__exportStar(__webpack_require__(45363), exports);
__exportStar(__webpack_require__(30135), exports);
__exportStar(__webpack_require__(74133), exports);
__exportStar(__webpack_require__(97272), exports);
__exportStar(__webpack_require__(42079), exports);
__exportStar(__webpack_require__(78320), exports);
__exportStar(__webpack_require__(38980), exports);
__exportStar(__webpack_require__(41938), exports);
__exportStar(__webpack_require__(94102), exports);
__exportStar(__webpack_require__(77172), exports);
__exportStar(__webpack_require__(36503), exports);
__exportStar(__webpack_require__(40649), exports);
__exportStar(__webpack_require__(91566), exports);
__exportStar(__webpack_require__(80793), exports);
__exportStar(__webpack_require__(25681), exports);
__exportStar(__webpack_require__(86347), exports);
__exportStar(__webpack_require__(64958), exports);
__exportStar(__webpack_require__(477), exports);
__exportStar(__webpack_require__(7667), exports);
__exportStar(__webpack_require__(40936), exports);
__exportStar(__webpack_require__(5691), exports);
__exportStar(__webpack_require__(24481), exports);
__exportStar(__webpack_require__(14521), exports);
__exportStar(__webpack_require__(45308), exports);
__exportStar(__webpack_require__(88370), exports);
__exportStar(__webpack_require__(27097), exports);
__exportStar(__webpack_require__(28078), exports);
__exportStar(__webpack_require__(86254), exports);
__exportStar(__webpack_require__(10054), exports);
__exportStar(__webpack_require__(96245), exports);
__exportStar(__webpack_require__(31132), exports);
__exportStar(__webpack_require__(58891), exports);
__exportStar(__webpack_require__(82133), exports);
__exportStar(__webpack_require__(48098), exports);
__exportStar(__webpack_require__(77032), exports);
__exportStar(__webpack_require__(24865), exports);
__exportStar(__webpack_require__(33623), exports);
__exportStar(__webpack_require__(11433), exports);
__exportStar(__webpack_require__(13139), exports);
__exportStar(__webpack_require__(40789), exports);
__exportStar(__webpack_require__(33801), exports);
__exportStar(__webpack_require__(1962), exports);
__exportStar(__webpack_require__(57216), exports);
__exportStar(__webpack_require__(42209), exports);
__exportStar(__webpack_require__(73236), exports);
__exportStar(__webpack_require__(7240), exports);
__exportStar(__webpack_require__(60653), exports);
__exportStar(__webpack_require__(54674), exports);
__exportStar(__webpack_require__(51692), exports);
__exportStar(__webpack_require__(16322), exports);
__exportStar(__webpack_require__(55313), exports);
__exportStar(__webpack_require__(13886), exports);
__exportStar(__webpack_require__(1035), exports);
__exportStar(__webpack_require__(99983), exports);
__exportStar(__webpack_require__(22081), exports);
__exportStar(__webpack_require__(44988), exports);
__exportStar(__webpack_require__(49320), exports);
__exportStar(__webpack_require__(913), exports);
__exportStar(__webpack_require__(37710), exports);
__exportStar(__webpack_require__(66302), exports);
__exportStar(__webpack_require__(67286), exports);
__exportStar(__webpack_require__(77270), exports);
__exportStar(__webpack_require__(69642), exports);
__exportStar(__webpack_require__(73498), exports);
__exportStar(__webpack_require__(9309), exports);
__exportStar(__webpack_require__(62800), exports);
__exportStar(__webpack_require__(97492), exports);
__exportStar(__webpack_require__(73612), exports);
__exportStar(__webpack_require__(94396), exports);
__exportStar(__webpack_require__(13785), exports);
__exportStar(__webpack_require__(98443), exports);
__exportStar(__webpack_require__(11784), exports);
__exportStar(__webpack_require__(74581), exports);
__exportStar(__webpack_require__(30097), exports);
__exportStar(__webpack_require__(60644), exports);
__exportStar(__webpack_require__(25298), exports);
__exportStar(__webpack_require__(18916), exports);
__exportStar(__webpack_require__(42657), exports);
__exportStar(__webpack_require__(50853), exports);
__exportStar(__webpack_require__(29636), exports);
__exportStar(__webpack_require__(17916), exports);
__exportStar(__webpack_require__(26011), exports);
__exportStar(__webpack_require__(30448), exports);
__exportStar(__webpack_require__(20994), exports);
__exportStar(__webpack_require__(54793), exports);
__exportStar(__webpack_require__(78840), exports);
__exportStar(__webpack_require__(71739), exports);


/***/ }),

/***/ 60618:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.compareNotOrderedArrays = exports.compareArrays = exports.areArraysEqual = exports.arrayInsert = exports.arrayEquals = void 0;
const _utils_1 = __webpack_require__(7590);
function arrayEquals(array1, array2) {
    return _utils_1.arrayEquals(array1, array2);
}
exports.arrayEquals = arrayEquals;
function arrayInsert(a, insertion, position) {
    return a.slice(0, position).concat(insertion, a.slice(position, a.length));
}
exports.arrayInsert = arrayInsert;
function areArraysEqual(arr1 = [], arr2 = []) {
    return arr1.length === arr2.length && arr1.every((val, index) => val === arr2[index]);
}
exports.areArraysEqual = areArraysEqual;
function compareArrays(array1, array2, predicate = (a, b) => a === b) {
    if (array1.length !== array2.length)
        return false;
    for (var i = 0; i < array1.length; i++) {
        if (!predicate(array1[i], array2[i]))
            return false;
    }
    return true;
}
exports.compareArrays = compareArrays;
function compareNotOrderedArrays(array1, array2, predicate = (a, b) => a === b) {
    if (array1.length !== array2.length)
        return false;
    for (var i = 0; i < array1.length; i++) {
        if (!array2.some(array => predicate(array1[i], array)))
            return false;
    }
    return true;
}
exports.compareNotOrderedArrays = compareNotOrderedArrays;


/***/ }),

/***/ 80964:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClientFilterManager = void 0;
class ClientFilterManager {
    constructor(_updateTotals) {
        this._updateTotals = _updateTotals;
        _updateTotals.subscribe(value => {
            if (!value)
                this.clearFilterParams();
        });
    }
    getFilterParams() {
        return this._filterParams;
    }
    setFilterParams(clientFilter) {
        if (this._updateTotals()) {
            this._filterParams = clientFilter;
        }
    }
    clearFilterParams() {
        this._filterParams = undefined;
    }
    setFilterState(filterValue) {
        this._filterState = filterValue;
    }
    getFilterState() {
        return this._filterState;
    }
}
exports.ClientFilterManager = ClientFilterManager;


/***/ }),

/***/ 9684:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardUniqueNameGenerator = void 0;
const _helper_classes_1 = __webpack_require__(8384);
const _knockout_utils_1 = __webpack_require__(4437);
class DashboardUniqueNameGenerator {
    constructor(_propertyName, _startIndex, ...collections) {
        this._propertyName = _propertyName;
        this._startIndex = _startIndex;
        this._disposables = [];
        this._componentsCollections = collections;
        this._componentsCollections.map(collection => {
            collection().forEach(item => this._ensureUniqueName(item));
            this._disposables.push(_knockout_utils_1.subscribeArrayChangeWithCancel(collection, changes => {
                for (const itemChange of changes) {
                    var change = itemChange;
                    if (change.status === 'added') {
                        if (!this._ensureUniqueName(change.value))
                            return false;
                    }
                }
                return true;
            }));
        });
    }
    _ensureUniqueName(item) {
        var affectedItems = this._componentsCollections.reduce((result, collection) => result.concat(collection()), []), itemIndex = affectedItems.indexOf(item), uniqueName = item[this._propertyName]();
        affectedItems.splice(itemIndex, 1);
        if (!!uniqueName && !_helper_classes_1.NameGenerator.isValidName(uniqueName, affectedItems, this._propertyName))
            throw new Error(`Invalid Name "${uniqueName}": An item with the same name already exists. Check the name or set it to 'undefined' to generate a unique name automatically.`);
        if (!uniqueName) {
            item[this._propertyName](_helper_classes_1.NameGenerator.generateName(item.getUniqueNamePrefix(), affectedItems, this._propertyName, this._startIndex));
        }
        return true;
    }
    dispose() {
        this._disposables.map(disposable => disposable.dispose());
    }
}
exports.DashboardUniqueNameGenerator = DashboardUniqueNameGenerator;


/***/ }),

/***/ 57094:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getItemJson = exports.getItemTitle = exports.getItemIconName = exports.getIconName = void 0;
const _default_1 = __webpack_require__(65855);
const custom_item_1 = __webpack_require__(91587);
const serializable_model_1 = __webpack_require__(29591);
function getIconName(typeName, icon) {
    var getCamelType = s => s[0].toLowerCase() + s.substr(1, s.length);
    return icon || 'dx-dashboard-toolbox-' + getCamelType(typeName);
}
exports.getIconName = getIconName;
function getItemIconName(item) {
    var icon = item instanceof custom_item_1.CustomItem ? serializable_model_1.itemTypesMap[item.customItemType()].icon : undefined;
    return getIconName(item.itemType(), icon);
}
exports.getItemIconName = getItemIconName;
function getItemTitle(item) {
    var itemType = item instanceof custom_item_1.CustomItem ? item.customItemType() : item.itemType();
    var info = serializable_model_1.itemTypesMap[itemType];
    return !!info.title ? _default_1.getLocalizationById(info.title) : itemType;
}
exports.getItemTitle = getItemTitle;
function getItemJson(itemType) {
    var itemTypeDescription = serializable_model_1.itemTypesMap[itemType];
    return {
        '@ItemType': !!itemTypeDescription.customItemType ? custom_item_1.CustomItem.ItemType : itemType,
        '@CustomItemType': !!itemTypeDescription.customItemType ? itemType : undefined
    };
}
exports.getItemJson = getItemJson;


/***/ }),

/***/ 76900:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getStartOfFirstWeek = exports.divideIntoWeeks = exports.getIsStartOfFirstWeek = exports.addDays = exports.clone = exports.serializeDate = exports.fromUtcDateToString = exports.toUtcDate = exports.toStringArray = exports.patchDateTime = exports.tryConvertToDateTime = void 0;
const isoDataTimePattern = /^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d/;
function tryConvertToDateTime(value) {
    if (typeof (value) === 'string' && isoDataTimePattern.test(value)) {
        return toUtcDate(value);
    }
    return value;
}
exports.tryConvertToDateTime = tryConvertToDateTime;
function patchDateTime(storageDTO) {
    var _tryPatchDateTime = (obj, property) => {
        obj[property] = tryConvertToDateTime(obj[property]);
    };
    for (var sliceId in storageDTO.Slices) {
        var slice = storageDTO.Slices[sliceId];
        for (var keyIds in slice.Data) {
            var dataPoint = slice.Data[keyIds];
            for (var valueId in dataPoint) {
                _tryPatchDateTime(dataPoint, valueId);
            }
        }
    }
    for (var dataItemName in storageDTO.EncodeMaps) {
        var uniqueValues = storageDTO.EncodeMaps[dataItemName];
        var len = uniqueValues.length;
        if (len > 0) {
            for (var i = 0; i < len; i++) {
                _tryPatchDateTime(uniqueValues, i);
            }
        }
    }
}
exports.patchDateTime = patchDateTime;
function toStringArray(value) {
    if (!value) {
        return value;
    }
    if (Array.isArray(value)) {
        return value.map(v => toStringArray(v));
    }
    else if (value instanceof Date) {
        return fromUtcDateToString(value);
    }
    else if (value instanceof Object) {
        for (var key in value) {
            value[key] = toStringArray(value[key]);
        }
    }
    return value;
}
exports.toStringArray = toStringArray;
function toUtcDate(value) {
    var hasDateZone = value[value.length - 3] == ':' && ['+', '-'].indexOf(value[value.length - 6]) !== -1;
    if (value[value.length - 1] !== 'Z' && !hasDateZone) {
        value += 'Z';
    }
    var date = new Date(value);
    return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
}
exports.toUtcDate = toUtcDate;
function fromUtcDateToString(date) {
    var toString = (n, useThreeDigits = false) => {
        var s = n.toString();
        if (useThreeDigits) {
            return s.length == 2 ? '0' + s : (s.length == 1 ? '00' + s : s);
        }
        else {
            return s.length == 1 ? '0' + s : s;
        }
    };
    return date.getFullYear() + '-' +
        toString(date.getMonth() + 1) + '-' +
        toString(date.getDate()) + 'T' +
        toString(date.getHours()) + ':' +
        toString(date.getMinutes()) + ':' +
        toString(date.getSeconds()) + '.' +
        toString(date.getMilliseconds(), true);
}
exports.fromUtcDateToString = fromUtcDateToString;
function serializeDate(date) {
    return date instanceof Date ? fromUtcDateToString(date) : String(date);
}
exports.serializeDate = serializeDate;
function clone(date) {
    return new Date(date.valueOf());
}
exports.clone = clone;
function addDays(date, days) {
    date.setDate(date.getDate() + days);
}
exports.addDays = addDays;
function getIsStartOfFirstWeek(calendarWeekRule) {
    switch (calendarWeekRule) {
        case 'FirstDay':
            return (date) => isStartOfFirstWeek(date, 1);
        case 'FirstFourDayWeek':
            return (date) => isStartOfFirstWeek(date, 4);
        case 'FirstFullWeek':
            return (date) => isStartOfFirstWeek(date, 7);
    }
}
exports.getIsStartOfFirstWeek = getIsStartOfFirstWeek;
function isStartOfFirstWeek(weekStart, numberOfWeekDaysNeededInYear) {
    let month = weekStart.getMonth();
    let day = weekStart.getDate();
    return month === 11 && day >= 25 + numberOfWeekDaysNeededInYear ||
        month === 0 && day <= numberOfWeekDaysNeededInYear;
}
function divideIntoWeeks(start, end, firstDayOfWeek, calendarWeekRule, add) {
    if (start > end)
        throw new Error("'start' must be less or equal to 'end'.");
    if (start.getMonth() === 0 && start.getDate() === 1) {
        let firstWeekStart = getStartOfFirstWeek(start.getFullYear(), firstDayOfWeek, calendarWeekRule);
        let secondWeekStart = clone(firstWeekStart);
        addDays(secondWeekStart, 7);
        if (firstWeekStart < start && secondWeekStart > start) {
            add(clone(start));
            start = secondWeekStart;
        }
        else if (firstWeekStart > start) {
            add(clone(start));
            start = firstWeekStart;
        }
        if (start > end)
            return;
    }
    let current = clone(start);
    let isInFirstWeek = getIsStartOfFirstWeek(calendarWeekRule);
    while (current < end) {
        add(clone(current));
        if (current.getMonth() === 11 &&
            current.getDate() !== 25 &&
            isInFirstWeek(current))
            add(new Date(current.getFullYear() + 1, 0, 1));
        addDays(current, 7);
    }
    add(clone(end));
}
exports.divideIntoWeeks = divideIntoWeeks;
function getStartOfFirstWeek(year, firstDayOfWeek, calendarWeekRule) {
    let current = new Date(year, 0, 1);
    addDays(current, -7);
    while (current.getDay() !== firstDayOfWeek)
        addDays(current, 1);
    let isStartOfFirstWeek = getIsStartOfFirstWeek(calendarWeekRule);
    while (!isStartOfFirstWeek(current))
        addDays(current, 7);
    return current;
}
exports.getStartOfFirstWeek = getStartOfFirstWeek;


/***/ }),

/***/ 81638:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExpandingManager = void 0;
const _date_utils_1 = __webpack_require__(76900);
class ExpandingManager {
    constructor() {
        this._expandingParams = undefined;
        this._expandingState = undefined;
    }
    getPivotExpandViewState() {
        return this._dxPivotState;
    }
    setExpandingParams(expandingParams) {
        this._expandingParams = expandingParams;
    }
    onViewStateChanged(expandingState, dxPivotState) {
        this._expandingState = expandingState;
        this._dxPivotState = dxPivotState;
    }
    canProvideExpandingState() {
        return this._expandingParams || this._expandingState;
    }
    calculateExpandingState() {
        var params = this._expandingParams;
        var state = this._expandingState;
        return {
            rows: state && _date_utils_1.toStringArray(state.rows) || [],
            columns: state && _date_utils_1.toStringArray(state.columns) || [],
            values: !!params ? _date_utils_1.toStringArray(params.values) : undefined,
            isColumn: !!params && params.isColumn
        };
    }
    resetExpandingParams() {
        this._expandingParams = undefined;
    }
    resetColumnViewState(autoExpand) {
        this._expandingState = { rows: this._expandingState.rows, columns: [] };
        if (this._dxPivotState) {
            this._dxPivotState.fields && this._dxPivotState.fields.filter(f => f.area === 'column').forEach(f => { f.expanded = autoExpand; });
            this._dxPivotState.columnExpandedPaths = [];
        }
    }
    resetRowViewState(autoExpand) {
        this._expandingState = { rows: [], columns: this._expandingState.columns };
        if (this._dxPivotState) {
            this._dxPivotState.fields && this._dxPivotState.fields.filter(f => f.area === 'row').forEach(f => { f.expanded = autoExpand; });
            this._dxPivotState.rowExpandedPaths = [];
        }
    }
}
exports.ExpandingManager = ExpandingManager;


/***/ }),

/***/ 79537:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DimensionExpressionInserter = exports.insertDimensionsExpressionsIntoFilterExpression = exports.getFilterCriteria = void 0;
const analytics_criteria_utils_1 = __webpack_require__(26484);
const analytics_widgets_internal_1 = __webpack_require__(86092);
function getFilterCriteria(filterString) {
    let criteriaSerializer = new analytics_widgets_internal_1.FilterEditorSerializer();
    return criteriaSerializer.deserialize(filterString);
}
exports.getFilterCriteria = getFilterCriteria;
function insertDimensionsExpressionsIntoFilterExpression(filterString, dimensionsExpressions) {
    let criteriaSerializer = new analytics_widgets_internal_1.FilterEditorSerializer();
    let filterCriteria = criteriaSerializer.deserialize(filterString);
    let dimensionsCriteria = {};
    for (let dimensionName in dimensionsExpressions)
        dimensionsCriteria[dimensionName] = analytics_criteria_utils_1.CriteriaOperatorStateMachine.parse(dimensionsExpressions[dimensionName]);
    let patched = DimensionExpressionInserter.patch(filterCriteria, dimensionsCriteria);
    return criteriaSerializer.serialize(patched);
}
exports.insertDimensionsExpressionsIntoFilterExpression = insertDimensionsExpressionsIntoFilterExpression;
class DimensionExpressionInserter {
    constructor(dimensionsCriteria) {
        this._dimensionsCriteria = dimensionsCriteria;
    }
    static patch(criteria, dimensionsCriteria) {
        let patcher = new DimensionExpressionInserter(dimensionsCriteria);
        return criteria.accept(patcher);
    }
    visitOperandProperty(element) {
        return this._dimensionsCriteria[element.propertyName];
    }
}
exports.DimensionExpressionInserter = DimensionExpressionInserter;


/***/ }),

/***/ 8384:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnumManager = exports.Guard = exports.isComponentNameValid = exports.NameGenerator = void 0;
const ko = __webpack_require__(71032);
class NameGenerator {
    static validateName(object, nameCollection, propertyName, startIndex, addWhiteSpace = false) {
        var currentName = ko.unwrap(object[propertyName]);
        if (!NameGenerator.isValidName(currentName, nameCollection, propertyName)) {
            object[propertyName](NameGenerator.generateName(currentName, nameCollection, propertyName, startIndex, addWhiteSpace));
        }
    }
    static isValidName(name, nameCollection, propertyName) {
        return nameCollection.map((value) => ko.unwrap(value[propertyName])).filter((value) => value === name).length === 0;
    }
    static generateName(namePrefix, nameCollection, propertyName, startIndex, addWhiteSpace = false) {
        var getNewName = (index) => {
            return namePrefix + (addWhiteSpace ? ' ' : '') + index;
        };
        var i = startIndex ? startIndex : 0, name = getNewName(i);
        while (!NameGenerator.isValidName(name, nameCollection, propertyName)) {
            name = getNewName(++i);
        }
        return name;
    }
}
exports.NameGenerator = NameGenerator;
function isComponentNameValid(name) {
    return !!(name && (typeof name === 'string') && name.length && name.match(/^[A-Za-z][A-Za-z0-9]*(?:_[A-Za-z0-9]+)*$/));
}
exports.isComponentNameValid = isComponentNameValid;
class Guard {
    static isNotFalsy(object, name) {
        if (!object) {
            throw new Error(name + ' should not be falsy.');
        }
    }
    static requires(condition, message) {
        if (!condition)
            throw new Error(message || 'Required code contract condition is not met.');
    }
}
exports.Guard = Guard;
class EnumManager {
    static getNamesAndValues(enumType) {
        return this.getNames(enumType).map(name => {
            return {
                name: name,
                value: enumType[name]
            };
        });
    }
    static getNames(enumType) {
        return EnumManager._getObjectValues(enumType).filter(value => typeof value === 'string');
    }
    static getValues(enumType) {
        return EnumManager._getObjectValues(enumType).filter(value => typeof value === 'number');
    }
    static _getObjectValues(enumType) {
        return Object.keys(enumType).map(key => enumType[key]);
    }
}
exports.EnumManager = EnumManager;


/***/ }),

/***/ 78584:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 4437:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createObservableDataSource = exports.safeComputed = exports.safeSubscribe = exports.subscribeAndPerform = exports.subscribeToArrayItemProperties = exports.syncArrayHelper = exports.subscribeArrayChangeWithCancel = exports.subscribeWithPrev = exports.subscribeArrayChange = void 0;
const custom_store_1 = __webpack_require__(5773);
const data_source_1 = __webpack_require__(47545);
const ko = __webpack_require__(71032);
function subscribeArrayChange(array, handlers) {
    return array.subscribe(changes => {
        changes.forEach(arrayChange => {
            var change = arrayChange;
            if (change.status === 'added' && handlers.added) {
                handlers.added(change.value, change.index);
            }
            if (change.status === 'deleted' && handlers.deleted) {
                handlers.deleted(change.value);
            }
        });
    }, null, 'arrayChange');
}
exports.subscribeArrayChange = subscribeArrayChange;
function subscribeWithPrev(target, callback) {
    var prevValue;
    var disposables = [];
    disposables.push(target.subscribe(value => {
        prevValue = value;
    }, null, 'beforeChange'));
    disposables.push(target.subscribe(value => {
        callback(prevValue, value);
        prevValue = undefined;
    }));
    return {
        dispose: () => {
            disposables.forEach(disposable => disposable.dispose());
            disposables = [];
        }
    };
}
exports.subscribeWithPrev = subscribeWithPrev;
function subscribeArrayChangeWithCancel(target, callback) {
    let prevValue;
    let disposables = [];
    disposables.push(target.subscribe(value => {
        prevValue = value && value.slice();
    }, null, 'beforeChange'));
    disposables.push(target.subscribe(changes => {
        let ok = true;
        try {
            ok = callback(changes);
        }
        catch (error) {
            target(prevValue);
            prevValue = undefined;
            throw error;
        }
        if (!ok)
            target(prevValue);
        prevValue = undefined;
    }, null, 'arrayChange'));
    return {
        dispose: () => { disposables.forEach(element => element.dispose()); }
    };
}
exports.subscribeArrayChangeWithCancel = subscribeArrayChangeWithCancel;
function syncArrayHelper(sourceArray, destArray, addHandler) {
    destArray(sourceArray.peek().map(item => addHandler(item)));
    return sourceArray.subscribe((changes) => {
        changes.forEach((arrayChange) => {
            var change = arrayChange;
            if (change.status === 'added') {
                destArray.splice(change.index, 0, addHandler(change.value));
            }
            else if (change.status === 'deleted') {
                destArray.splice(change.index, 1);
            }
        });
    }, null, 'arrayChange');
}
exports.syncArrayHelper = syncArrayHelper;
function subscribeToArrayItemProperties(array, handler) {
    let subscriptionInfoList = [];
    let subscribe = (item) => {
        subscriptionInfoList.push({ object: item, subscriptions: [].concat(handler(item) || []) });
    };
    let unsubscribe = (item) => {
        var info = subscriptionInfoList.filter(info => info.object === item)[0];
        if (info) {
            info.subscriptions.forEach(subscription => subscription.dispose());
            subscriptionInfoList.splice(subscriptionInfoList.indexOf(info), 1);
        }
    };
    array().forEach(subscribe);
    let arrayChangeSubscribtion = subscribeArrayChange(array, {
        added: subscribe,
        deleted: unsubscribe
    });
    return {
        dispose: () => {
            arrayChangeSubscribtion.dispose();
            arrayChangeSubscribtion = null;
            subscriptionInfoList.forEach(info => info.subscriptions.forEach(subscription => subscription.dispose()));
            subscriptionInfoList.splice(0, subscriptionInfoList.length);
        }
    };
}
exports.subscribeToArrayItemProperties = subscribeToArrayItemProperties;
function subscribeAndPerform(subscribable, action) {
    action(subscribable());
    return subscribable.subscribe(action);
}
exports.subscribeAndPerform = subscribeAndPerform;
function safeSubscribe(observables, handler) {
    let computed = ko.pureComputed(() => Object.keys(observables).reduce((acc, key) => { acc[key] = observables[key](); return acc; }, {}));
    let prevDisposable = handler(computed());
    let subscription = computed.subscribe(args => {
        prevDisposable && prevDisposable.dispose();
        prevDisposable = handler(args);
    });
    return {
        dispose: () => {
            subscription.dispose();
            computed.dispose();
            prevDisposable && prevDisposable.dispose();
        }
    };
}
exports.safeSubscribe = safeSubscribe;
function safeComputed(observables, handler) {
    var observable = ko.observable();
    var subscription = safeSubscribe(observables, (args) => {
        observable(handler(args));
    });
    var computed = ko.pureComputed(() => observable());
    var oldDispose = computed.dispose;
    computed.dispose = () => {
        subscription.dispose();
        oldDispose.call(computed);
    };
    return computed;
}
exports.safeComputed = safeComputed;
function createObservableDataSource(observables, load) {
    let computed = ko.pureComputed(() => Object.keys(observables).reduce((acc, key) => { acc[key] = observables[key](); return acc; }, {}));
    let dataSource = new data_source_1.default({
        store: new custom_store_1.default({
            loadMode: 'raw',
            load: () => load(computed())
        })
    });
    var subscription = computed.subscribe(_ => {
        dataSource.reload();
    });
    return {
        dataSource: dataSource,
        dispose: () => {
            subscription.dispose();
            if (dataSource['_disposed'] !== true)
                dataSource.dispose();
            computed.dispose();
        }
    };
}
exports.createObservableDataSource = createObservableDataSource;


/***/ }),

/***/ 12784:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ObsoleteItemState = exports.ObsoleteDashboardState = void 0;
class ObsoleteDashboardState {
}
exports.ObsoleteDashboardState = ObsoleteDashboardState;
class ObsoleteItemState {
    static unwrapDilldownValues(values) {
        if (!values) {
            return null;
        }
        return values.map(value => value[0][0]);
    }
}
exports.ObsoleteItemState = ObsoleteItemState;


/***/ }),

/***/ 64060:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defineObsoleteMethod = exports.defineClassMoved = exports.defineObsoleteProperty = exports.ClassMemberType = void 0;
exports.ClassMemberType = {
    method: 'method',
    property: 'property'
};
function obsoleteWarn(memberType, oldMemberName, newMemberName) {
    return `The ${oldMemberName} ${memberType} is obsolete.` + (newMemberName ? ` Use the ${newMemberName} ${memberType} instead.` : '');
}
function defineObsoleteProperty(info) {
    Object.defineProperty(info.target, info.memberName, {
        get: () => {
            if (!info.ignoreWarmMessage) {
                let message = info.warmMessage ? info.warmMessage : obsoleteWarn(exports.ClassMemberType.property, info.oldMemberDisplayName, info.newMemberDisplayName);
                console.warn(message);
            }
            return info.action();
        },
        enumerable: false,
        configurable: true
    });
}
exports.defineObsoleteProperty = defineObsoleteProperty;
function defineClassMoved(className, sourceNamespace, destNamespace, sourceNamespaceName, destNamespaceName, additionalInfo) {
    defineObsoleteProperty({
        target: sourceNamespace,
        memberName: className,
        warmMessage: 'The ' + className + ' class was moved from the ' + sourceNamespaceName + ' to the ' + destNamespaceName + '. ' + additionalInfo,
        action: () => destNamespace[className]
    });
}
exports.defineClassMoved = defineClassMoved;
function defineObsoleteMethod(info) {
    info.target[info.memberName] = function (...args) {
        if (!info.ignoreWarmMessage) {
            let message = info.warmMessage ? info.warmMessage : obsoleteWarn(exports.ClassMemberType.method, info.oldMemberDisplayName, info.newMemberDisplayName);
            console.warn(message);
        }
        return info.action.apply(info.target, args);
    };
}
exports.defineObsoleteMethod = defineObsoleteMethod;


/***/ }),

/***/ 2908:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.wrapWithUndoRedo = exports.wrapFuncWithUndoRedo = exports.UndoEngineContainer = void 0;
class UndoEngineContainer {
}
exports.UndoEngineContainer = UndoEngineContainer;
function wrapFuncWithUndoRedo(func) {
    return function (...args) {
        try {
            UndoEngineContainer.undoEngine && UndoEngineContainer.undoEngine.start();
            var result = func.apply(this, args);
            return result;
        }
        finally {
            UndoEngineContainer.undoEngine && UndoEngineContainer.undoEngine.end();
        }
    };
}
exports.wrapFuncWithUndoRedo = wrapFuncWithUndoRedo;
function wrapWithUndoRedo(target, key, value) {
    return {
        value: wrapFuncWithUndoRedo(value.value)
    };
}
exports.wrapWithUndoRedo = wrapWithUndoRedo;


/***/ }),

/***/ 66358:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.collectionItemType = void 0;
const ko = __webpack_require__(71032);
const _knockout_utils_1 = __webpack_require__(4437);
function collectionItemType(itemType) {
    return (target, key) => {
        var createObjectPropertyDescriptor = () => {
            var _subscription;
            var _val = this[key];
            var getter = function () {
                return _val;
            };
            var setter = function (newVal) {
                if (!!_subscription) {
                    _subscription.dispose();
                    _subscription = null;
                }
                if (ko.isObservable(newVal) && Array.isArray(ko.unwrap(newVal))) {
                    _subscription = _knockout_utils_1.subscribeArrayChange(newVal, {
                        added: (item) => {
                            item.itemType(itemType);
                        }
                    });
                }
                _val = newVal;
            };
            return {
                get: getter,
                set: setter,
                enumerable: true,
                configurable: true
            };
        };
        var prototypePropertyDescriptor = {
            get: null,
            set: null,
            enumerable: true,
            configurable: true
        };
        var getter = function () {
            var descriptor = Object.getOwnPropertyDescriptor(this, key);
            if (descriptor === void 0) {
                Object.defineProperty(this, key, createObjectPropertyDescriptor());
            }
            return this[key];
        };
        var setter = function (newVal) {
            var descriptor = Object.getOwnPropertyDescriptor(this, key);
            if (descriptor === void 0) {
                Object.defineProperty(this, key, createObjectPropertyDescriptor());
            }
            this[key] = newVal;
        };
        prototypePropertyDescriptor.get = getter;
        prototypePropertyDescriptor.set = setter;
        if (delete this[key]) {
            Object.defineProperty(target, key, prototypePropertyDescriptor);
        }
    };
}
exports.collectionItemType = collectionItemType;


/***/ }),

/***/ 13382:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._areTheSameBindingProviders = void 0;
exports._areTheSameBindingProviders = ((a, b) => {
    var bindingsA = a._getBindingModel(), bindingsB = b._getBindingModel();
    if (!bindingsA || !bindingsB)
        return false;
    return (bindingsA
        .filter((binding, index) => bindingsB.some(anotherBinding => anotherBinding.propertyName === binding.propertyName))[1]);
});


/***/ }),

/***/ 61650:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createDashboardItem = void 0;
const serializable_model_1 = __webpack_require__(29591);
const custom_item_1 = __webpack_require__(91587);
function createDashboardItem(dashboardItemJSON, serializer) {
    var customItemTypeName = dashboardItemJSON['@CustomItemType'];
    if (!customItemTypeName) {
        var itemTypeName = dashboardItemJSON['@ItemType'];
        var itemType = serializable_model_1.itemTypesMap[itemTypeName].type;
        return new itemType(dashboardItemJSON, serializer);
    }
    else {
        var customItemType = !!serializable_model_1.itemTypesMap[customItemTypeName] ? serializable_model_1.itemTypesMap[customItemTypeName].type : custom_item_1.CustomItem;
        return new customItemType(serializable_model_1.itemTypesMap[customItemTypeName], dashboardItemJSON, serializer);
    }
}
exports.createDashboardItem = createDashboardItem;


/***/ }),

/***/ 54159:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LimitDataState = void 0;
class LimitDataState {
    constructor() {
        this._visible = false;
        this._enabled = true;
    }
    get enabled() {
        return this._enabled;
    }
    setReduced() {
        this._visible = true;
        this._enabled = true;
    }
    getViewModel() {
        return {
            isReduceMode: this._visible,
            isReduced: this._enabled,
        };
    }
    toggle() {
        this._enabled = !this._enabled;
    }
    reset() {
        this._visible = false;
        this._enabled = true;
    }
}
exports.LimitDataState = LimitDataState;


/***/ }),

/***/ 2803:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaneContentHolder = exports.getCategoryContentName = void 0;
const ko = __webpack_require__(71032);
const _base_metadata_1 = __webpack_require__(17916);
var categoriesCompatibilityInfo = {};
categoriesCompatibilityInfo[_base_metadata_1.PropertyCategory.Initialize] = [_base_metadata_1.PropertyCategory.Data, _base_metadata_1.PropertyCategory.Initialize, _base_metadata_1.PropertyCategory.Interactivity, _base_metadata_1.PropertyCategory.ClientState, _base_metadata_1.PropertyCategory.Coloring];
categoriesCompatibilityInfo[_base_metadata_1.PropertyCategory.Data] = [_base_metadata_1.PropertyCategory.Data, _base_metadata_1.PropertyCategory.Initialize, _base_metadata_1.PropertyCategory.Interactivity, _base_metadata_1.PropertyCategory.ClientState, _base_metadata_1.PropertyCategory.Coloring];
categoriesCompatibilityInfo[_base_metadata_1.PropertyCategory.Interactivity] = [_base_metadata_1.PropertyCategory.Data, _base_metadata_1.PropertyCategory.Initialize, _base_metadata_1.PropertyCategory.Interactivity, _base_metadata_1.PropertyCategory.ClientState, _base_metadata_1.PropertyCategory.Coloring];
categoriesCompatibilityInfo[_base_metadata_1.PropertyCategory.ClientState] = [_base_metadata_1.PropertyCategory.Data, _base_metadata_1.PropertyCategory.Initialize, _base_metadata_1.PropertyCategory.Interactivity, _base_metadata_1.PropertyCategory.ClientState, _base_metadata_1.PropertyCategory.Coloring];
categoriesCompatibilityInfo[_base_metadata_1.PropertyCategory.Coloring] = [_base_metadata_1.PropertyCategory.Data, _base_metadata_1.PropertyCategory.Initialize, _base_metadata_1.PropertyCategory.Interactivity, _base_metadata_1.PropertyCategory.ClientState, _base_metadata_1.PropertyCategory.Coloring];
var localProcessedCategories = [_base_metadata_1.PropertyCategory.ViewModel];
var categoryContentNames = {
    Data: 'data',
    Initialize: 'data',
    Interactivity: 'data',
    ClientState: 'data',
    Map: 'map',
    ViewModel: 'viewModel',
};
function getCategoryContentName(category) {
    var catName = _base_metadata_1.PropertyCategory[category];
    return categoryContentNames[catName] || 'data';
}
exports.getCategoryContentName = getCategoryContentName;
class PaneContentHolder {
    constructor() {
        this._content = ko.observableArray();
        this.valid = ko.computed(() => {
            return this._content().length && this._content().filter(content => content.requestsInProgress() !== 0 || !content.content()).length === 0;
        });
    }
    get lastChangeReason() {
        return this._lastChangeReason;
    }
    _getContentInfo(category) {
        var compatibleCategories = this.getCompatibleCategories(category);
        var catName = getCategoryContentName(compatibleCategories[0]);
        var content = this._content().filter(contentItem => contentItem.category === catName)[0];
        if (!content) {
            content = {
                category: catName,
                content: ko.observable(),
                requestsInProgress: ko.observable(0),
                needAnotherRequest: false
            };
            this._content.push(content);
        }
        return content;
    }
    getContent(category) {
        return this._getContentInfo(category).content();
    }
    isValid(category) {
        var content = this._getContentInfo(category);
        return content.requestsInProgress() === 0 && !!content.content();
    }
    isWaitingForContent(category) {
        var contents = category ? [this._getContentInfo(category)] : this._content();
        return contents.some(content => content.requestsInProgress() !== 0);
    }
    getCompatibleCategories(category) {
        return categoriesCompatibilityInfo[category] || [category];
    }
    needRequestContentFromServer(category) {
        return localProcessedCategories.indexOf(category) === -1;
    }
    itemChanged(category) {
        var content = this._getContentInfo(category);
        content.needAnotherRequest = this.isWaitingForContent(category);
        content.content(undefined);
    }
    beginRequest(category) {
        var content = this._getContentInfo(category);
        content.requestsInProgress(content.requestsInProgress() + 1);
    }
    endRequest(args) {
        this._lastChangeReason = args.category;
        var content = this._getContentInfo(args.category);
        if (!content.needAnotherRequest) {
            content.content(args.response);
        }
        content.needAnotherRequest = false;
        content.requestsInProgress(content.requestsInProgress() - 1);
    }
}
exports.PaneContentHolder = PaneContentHolder;


/***/ }),

/***/ 9627:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 35999:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BoundImageItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const data_dashboard_item_1 = __webpack_require__(70355);
const _bound_image_item_1 = __webpack_require__(49320);
class BoundImageItem extends data_dashboard_item_1.DataDashboardItem {
    constructor(dashboardItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this._attachDataItem(this, _bound_image_item_1.imageItem.propertyName);
    }
    _getInfoCore() {
        return _bound_image_item_1.boundImageDashboardItemSerializationsInfo;
    }
    _isCalculationSupported() {
        return false;
    }
    _isSortingEnabled() {
        return false;
    }
    _isTopNEnabled(dataItem) {
        return false;
    }
    _getDefaultItemType() {
        return 'BoundImage';
    }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
    _getIsVisualInteractivitySupported() { return false; }
    _updateContentViewModel(content) {
        super._updateContentViewModel(content);
        content.ViewModel.SizeMode = this.sizeMode();
        content.ViewModel.HorizontalAlignment = this.horizontalAlignment();
        content.ViewModel.VerticalAlignment = this.verticalAlignment();
    }
}
exports.BoundImageItem = BoundImageItem;
serializable_model_1.itemTypesMap['BoundImage'] = { type: BoundImageItem, groupName: 'common', title: 'DashboardStringId.DefaultNameBoundImageItem', index: 100 };


/***/ }),

/***/ 95044:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const card_calc_window_definition_1 = __webpack_require__(8745);
const _utils_1 = __webpack_require__(66358);
const serializable_model_1 = __webpack_require__(29591);
const kpi_item_1 = __webpack_require__(5442);
const card_1 = __webpack_require__(15942);
const _card_item_1 = __webpack_require__(477);
class CardItem extends kpi_item_1.KpiItem {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.cards = analytics_utils_1.deserializeArray(modelJson.Cards, (item) => new card_1.Card(this, item, serializer));
        this._attachDataItem(this, _card_item_1.cardSparklineArgument.propertyName);
    }
    _getInfoCore() {
        return _card_item_1.cardDashboardItemSerializationsInfo;
    }
    _clearBindings() {
        super._clearBindings();
        this.cards.removeAll();
    }
    _getDefaultItemType() {
        return 'Card';
    }
    _getLayersCount() {
        return !!this.__seriesDimensions && this.__seriesDimensions().length > 0 ? this.cards().length : 0;
    }
    _getLayerName() {
        return this._getDataItemContainerDisplayName(this.cards()[this._selectedElementIndex() || 0]);
    }
    _getDefaultCalculationWindowDefinition() {
        return new card_calc_window_definition_1.CardWindowDefinition();
    }
    _itemInteractivityByColumnAxis() {
        return false;
    }
    _getInteractivityAxisDimensionCount() {
        return this.seriesDimensions().length;
    }
    _conditionFormattingExpressionEditorFilter(dataItem) {
        let isHiddenMeasure = this.hiddenMeasures().filter(hm => hm.uniqueName() === dataItem.uniqueName()).length > 0;
        let isSeriesDimension = this.seriesDimensions().filter(sd => sd.uniqueName() === dataItem.uniqueName()).length > 0;
        return isHiddenMeasure || isSeriesDimension;
    }
}
__decorate([
    _utils_1.collectionItemType('Card')
], CardItem.prototype, "cards", void 0);
exports.CardItem = CardItem;
serializable_model_1.itemTypesMap['Card'] = { type: CardItem, groupName: 'common', title: 'DashboardStringId.DefaultNameCardItem', index: 60 };


/***/ }),

/***/ 15193:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardLayoutTemplateDataElement = exports.CardLayoutTemplateSparklineElement = exports.CardLayoutTemplateDeltaElement = exports.CardLayoutTemplateElementBase = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const serializable_model_1 = __webpack_require__(29591);
const _card_layout_template_element_1 = __webpack_require__(5691);
class CardLayoutTemplateElementBase extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    _createEditorModel(dimensionNames) {
        return {
            title: this._getTitle(dimensionNames),
            checked: this.visible
        };
    }
    getInfo() {
        return _card_layout_template_element_1.cardLayoutTemplateElementBaseSerializationInfo;
    }
    _initDefault(visible = true, valueType = null, dimenstionIndex = 0) {
        this.visible(visible);
    }
}
exports.CardLayoutTemplateElementBase = CardLayoutTemplateElementBase;
class CardLayoutTemplateDeltaElement extends CardLayoutTemplateElementBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    _getTitle() {
        return ko.computed(() => _default_1.getLocalizationById(_card_layout_template_element_1.cardRowDataElementTypeValuesMapEx.DeltaIndicator));
    }
}
exports.CardLayoutTemplateDeltaElement = CardLayoutTemplateDeltaElement;
class CardLayoutTemplateSparklineElement extends CardLayoutTemplateElementBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    _getTitle() {
        return ko.computed(() => _default_1.getLocalizationById(_card_layout_template_element_1.cardRowDataElementTypeValuesMapEx.Sparkline));
    }
}
exports.CardLayoutTemplateSparklineElement = CardLayoutTemplateSparklineElement;
class CardLayoutTemplateDataElement extends CardLayoutTemplateElementBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    _getTitle(dimensionNames) {
        return ko.computed(() => {
            var res = _default_1.getLocalizationById(_card_layout_template_element_1.cardRowDataElementTypeValuesMapEx[this.valueType()]);
            if (this.valueType() === 'DimensionValue') {
                res += ' ' + (dimensionNames[this.dimensionIndex()] || ('[' + this.dimensionIndex() + ']'));
            }
            return res;
        });
    }
    getInfo() {
        return _card_layout_template_element_1.cardLayoutTemplateDataElementSerializationInfo;
    }
    _initDefault(visible, valueType, dimenstionIndex = 0) {
        super._initDefault(visible);
        this.valueType(valueType);
        this.dimensionIndex(dimenstionIndex);
    }
    _getEditorProperty(valueType, dimensionIndex = 0, dimensionNames) {
        var displayText = _default_1.getLocalizationById(_card_layout_template_element_1.cardRowDataElementTypeValuesMapEx[valueType]);
        if (valueType === 'DimensionValue')
            displayText += ' ' + dimensionNames[dimensionIndex];
        return { value: valueType, displayText: displayText, dimensionIndex: dimensionIndex, key: valueType + dimensionIndex };
    }
    _createEditorModel(dimensionNames) {
        var items = ['Title', 'Subtitle', 'ActualValue', 'TargetValue', 'AbsoluteVariation', 'PercentVariation', 'PercentOfTarget', 'CardName']
            .map((valueType) => this._getEditorProperty(valueType))
            .concat(dimensionNames.map((name, index) => this._getEditorProperty('DimensionValue', index, dimensionNames)));
        return Object.assign(Object.assign({}, super._createEditorModel(dimensionNames)), { lookupDataSource: items, selectedItem: ko.pureComputed({
                read: () => {
                    const selectedItem = items.filter(i => i.value === this.valueType() && i.dimensionIndex === this.dimensionIndex())[0];
                    return selectedItem && selectedItem.key;
                },
                write: (val) => {
                    const newValue = items.filter(i => i.key === val)[0];
                    this.valueType(newValue.value);
                    this.dimensionIndex(newValue.dimensionIndex);
                }
            }) });
    }
}
exports.CardLayoutTemplateDataElement = CardLayoutTemplateDataElement;


/***/ }),

/***/ 47388:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardCompactLayoutTemplate = exports.CardLightweightLayoutTemplate = exports.CardStretchedLayoutTemplate = exports.CardCenteredLayoutTemplate = exports.CardCustomLayoutTemplate = exports.CardEmptyLayoutTemplate = exports.CardLayoutTemplate = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const serializable_model_1 = __webpack_require__(29591);
const _card_layout_template_1 = __webpack_require__(40936);
var cardLayoutTypes = {
    Stretched: 'Stretched',
    Centered: 'Centered',
    Compact: 'Compact',
    Lightweight: 'Lightweight',
    Custom: 'Custom',
    None: 'None'
};
var cardLayoutTemplateNames = {
    Stretched: 'DashboardStringId.CardLayoutTemplateStretchedCaption',
    Centered: 'DashboardStringId.CardLayoutTemplateCenteredCaption',
    Compact: 'DashboardStringId.CardLayoutTemplateCompactCaption',
    Lightweight: 'DashboardStringId.CardLayoutTemplateLightweightCaption',
    Custom: 'DashboardStringId.CardLayoutTemplateCustomCaption',
    None: 'DashboardStringId.CardLayoutTemplateNoneCaption'
};
class CardLayoutTemplate extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _card_layout_template_1.templateSerializationInfo;
    }
    _resetToDefaults() { }
    clone() {
        var clonedTemplate = this._createInstance();
        this._clone(this, clonedTemplate);
        return clonedTemplate;
    }
    _clone(target, source) {
        var serializer = new analytics_utils_1.ModelSerializer();
        serializer.deserialize(source, serializer.serialize(target));
    }
}
exports.CardLayoutTemplate = CardLayoutTemplate;
class CardEmptyLayoutTemplate extends CardLayoutTemplate {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.isEmpty = ko.observable(true);
        this.title = cardLayoutTemplateNames[this.getType()];
    }
    _collectProperties(dimensionNames) {
        return [];
    }
    getType() {
        return cardLayoutTypes.None;
    }
    getInfo() {
        return [];
    }
    _createInstance() {
        return this;
    }
}
exports.CardEmptyLayoutTemplate = CardEmptyLayoutTemplate;
class CardCustomLayoutTemplate extends CardLayoutTemplate {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        !this.type() && this.type(cardLayoutTypes.Custom);
        this.title = cardLayoutTemplateNames[this.type()];
    }
    getInfo() {
        return _card_layout_template_1.customTemplateSerializationInfo;
    }
    _collectProperties(dimensionNames) {
        return [];
    }
    _resetToDefaults() { }
    getType() {
        return this.type();
    }
    _createInstance() {
        return new CardCustomLayoutTemplate();
    }
}
exports.CardCustomLayoutTemplate = CardCustomLayoutTemplate;
class CardCenteredLayoutTemplate extends CardLayoutTemplate {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        !this.type() && this.type(cardLayoutTypes.Centered);
        this.title = cardLayoutTemplateNames[this.type()];
    }
    getInfo() {
        return _card_layout_template_1.deltaCompactTemplateSerializationInfo;
    }
    _collectProperties(dimensionNames) {
        return [
            this.mainValue._createEditorModel(dimensionNames),
            this.subValue._createEditorModel(dimensionNames),
            this.bottomValue._createEditorModel(dimensionNames),
            this.bottomSubValue1._createEditorModel(dimensionNames),
            this.bottomSubValue2._createEditorModel(dimensionNames),
            this.deltaIndicator._createEditorModel(dimensionNames),
            this.sparkline._createEditorModel(dimensionNames)
        ];
    }
    _resetToDefaults() {
        this.mainValue._initDefault(true, 'Title');
        this.subValue._initDefault(true, 'Subtitle');
        this.bottomValue._initDefault(true, 'ActualValue');
        this.bottomSubValue1._initDefault(true, 'AbsoluteVariation');
        this.bottomSubValue2._initDefault(true, 'PercentVariation');
        this.deltaIndicator._initDefault(true);
        this.sparkline._initDefault(true);
        this.maxWidth(270);
    }
    getType() {
        return this.type();
    }
    _createInstance() {
        return new CardCenteredLayoutTemplate();
    }
}
exports.CardCenteredLayoutTemplate = CardCenteredLayoutTemplate;
class CardStretchedLayoutTemplate extends CardLayoutTemplate {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        !this.type() && this.type(cardLayoutTypes.Stretched);
        this.title = cardLayoutTemplateNames[this.type()];
    }
    getInfo() {
        return _card_layout_template_1.autofitTemplateSerializationInfo;
    }
    _collectProperties(dimensionNames) {
        return [
            this.topValue._createEditorModel(dimensionNames),
            this.mainValue._createEditorModel(dimensionNames),
            this.subValue._createEditorModel(dimensionNames),
            this.bottomValue1._createEditorModel(dimensionNames),
            this.bottomValue2._createEditorModel(dimensionNames),
            this.deltaIndicator._createEditorModel(dimensionNames),
            this.sparkline._createEditorModel(dimensionNames)
        ];
    }
    _resetToDefaults() {
        this.topValue._initDefault(true, 'ActualValue');
        this.mainValue._initDefault(true, 'Title');
        this.subValue._initDefault(true, 'Subtitle');
        this.bottomValue1._initDefault(true, 'PercentVariation');
        this.bottomValue2._initDefault(true, 'AbsoluteVariation');
        this.deltaIndicator._initDefault(true);
        this.sparkline._initDefault(true);
    }
    getType() {
        return this.type();
    }
    _createInstance() {
        return new CardStretchedLayoutTemplate();
    }
}
exports.CardStretchedLayoutTemplate = CardStretchedLayoutTemplate;
class CardLightweightLayoutTemplate extends CardLayoutTemplate {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        !this.type() && this.type(cardLayoutTypes.Lightweight);
        this.title = cardLayoutTemplateNames[this.type()];
    }
    getInfo() {
        return _card_layout_template_1.nameValueTemplateSerializationInfo;
    }
    _collectProperties(dimensionNames) {
        return [
            this.mainValue._createEditorModel(dimensionNames),
            this.subValue._createEditorModel(dimensionNames),
            this.bottomValue._createEditorModel(dimensionNames),
            this.deltaIndicator._createEditorModel(dimensionNames),
            this.sparkline._createEditorModel(dimensionNames)
        ];
    }
    _resetToDefaults() {
        this.mainValue._initDefault(true, 'ActualValue');
        this.subValue._initDefault(true, 'Title');
        this.bottomValue._initDefault(true, 'Subtitle');
        this.deltaIndicator._initDefault(false);
        this.sparkline._initDefault(false);
    }
    getType() {
        return this.type();
    }
    _createInstance() {
        return new CardLightweightLayoutTemplate();
    }
}
exports.CardLightweightLayoutTemplate = CardLightweightLayoutTemplate;
class CardCompactLayoutTemplate extends CardLayoutTemplate {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        !this.type() && this.type(cardLayoutTypes.Compact);
        this.title = cardLayoutTemplateNames[this.type()];
    }
    getInfo() {
        return _card_layout_template_1.deltaCompactTemplateSerializationInfo;
    }
    _collectProperties(dimensionNames) {
        return [
            this.mainValue._createEditorModel(dimensionNames),
            this.subValue._createEditorModel(dimensionNames),
            this.bottomValue._createEditorModel(dimensionNames),
            this.bottomSubValue1._createEditorModel(dimensionNames),
            this.bottomSubValue2._createEditorModel(dimensionNames),
            this.deltaIndicator._createEditorModel(dimensionNames),
            this.sparkline._createEditorModel(dimensionNames)
        ];
    }
    _resetToDefaults() {
        this.mainValue._initDefault(true, 'Title');
        this.subValue._initDefault(true, 'Subtitle');
        this.bottomValue._initDefault(true, 'ActualValue');
        this.bottomSubValue1._initDefault(true, 'AbsoluteVariation');
        this.bottomSubValue2._initDefault(true, 'PercentVariation');
        this.deltaIndicator._initDefault(true);
        this.sparkline._initDefault(true);
        this.maxWidth(270);
    }
    getType() {
        return this.type();
    }
    _createInstance() {
        return new CardCompactLayoutTemplate();
    }
}
exports.CardCompactLayoutTemplate = CardCompactLayoutTemplate;


/***/ }),

/***/ 91084:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardLayout = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const serializable_model_1 = __webpack_require__(29591);
const card_row_1 = __webpack_require__(86858);
const _card_layout_1 = __webpack_require__(7667);
class CardLayout extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.templateID = ko.observable(-1);
        this.rows = analytics_utils_1.deserializeArray(modelJson.CardRows, (item) => { return this.createRow(item, serializer); });
    }
    createRow(elementJSON, serializer) {
        var itemType = elementJSON['@ItemType'];
        return new CardLayout.rowTypes[itemType].constructor(elementJSON, serializer);
    }
    getInfo() {
        return _card_layout_1.cardLayoutSerializationInfo;
    }
    grabFrom(newLayout) {
        this.minWidth = newLayout.minWidth;
        this.maxWidth = newLayout.maxWidth;
        this.rows(newLayout.rows());
    }
}
exports.CardLayout = CardLayout;
CardLayout.rowTypes = {
    'CardRow': {
        constructor: card_row_1.CardRow
    },
    'CardSparklineRow': {
        constructor: card_row_1.CardSparklineRow
    }
};


/***/ }),

/***/ 62567:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardRowIndicatorElement = exports.CardRowTextElement = exports.CardRowDataElement = exports.CardRowTextElementBase = exports.CardRowElement = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const serializable_model_1 = __webpack_require__(29591);
const _card_row_element_1 = __webpack_require__(14521);
class CardRowElement extends serializable_model_1.TypedSerializableModel {
    constructor(modelJson, serializer) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _card_row_element_1.cardRowElementSerializationsInfo;
    }
}
exports.CardRowElement = CardRowElement;
class CardRowTextElementBase extends CardRowElement {
    constructor(modelJson, serializer) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _card_row_element_1.cardRowTextElementBaseSerializationInfo;
    }
}
exports.CardRowTextElementBase = CardRowTextElementBase;
class CardRowDataElement extends CardRowTextElementBase {
    constructor(modelJson, serializer) {
        super(modelJson, serializer);
        this.title = ko.computed(() => this.valueType());
    }
    getInfo() {
        return _card_row_element_1.cardRowDataElementSerializationInfo;
    }
    _getDefaultItemType() {
        return 'CardRowDataElement';
    }
}
exports.CardRowDataElement = CardRowDataElement;
class CardRowTextElement extends CardRowTextElementBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _card_row_element_1.cardRowTextElementSerializationInfo;
    }
    _getDefaultItemType() {
        return 'CardRowTextElement';
    }
}
exports.CardRowTextElement = CardRowTextElement;
class CardRowIndicatorElement extends CardRowElement {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _card_row_element_1.cardRowIndicatorElementSerializationInfo;
    }
    _getDefaultItemType() {
        return 'CardRowIndicatorElement';
    }
}
exports.CardRowIndicatorElement = CardRowIndicatorElement;


/***/ }),

/***/ 86858:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardSparklineRow = exports.CardRow = exports.CardRowBase = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const card_row_element_1 = __webpack_require__(62567);
const _card_row_1 = __webpack_require__(24481);
class CardRowBase extends serializable_model_1.TypedSerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _card_row_1.cardRowBaseSerializationInfo;
    }
}
exports.CardRowBase = CardRowBase;
class CardRow extends CardRowBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.elements = analytics_utils_1.deserializeArray(modelJson.CardRowElements, (item) => this.createRowElement(item, serializer));
    }
    createRowElement(elementJSON, serializer) {
        var itemType = elementJSON['@ItemType'];
        return new CardRow.elementItemTypes[itemType].constructor(elementJSON, serializer);
    }
    getInfo() {
        return _card_row_1.cardRowSerializationInfo;
    }
    _getDefaultItemType() {
        return 'CardRow';
    }
}
exports.CardRow = CardRow;
CardRow.elementItemTypes = {
    'CardRowDataElement': {
        constructor: card_row_element_1.CardRowDataElement
    },
    'CardRowIndicatorElement': {
        constructor: card_row_element_1.CardRowIndicatorElement
    },
    'CardRowTextElement': {
        constructor: card_row_element_1.CardRowTextElement
    }
};
class CardSparklineRow extends CardRowBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _card_row_1.cardSparklineRowSerializationInfo;
    }
    _getDefaultItemType() {
        return 'CardSparklineRow';
    }
}
exports.CardSparklineRow = CardSparklineRow;


/***/ }),

/***/ 15942:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Card = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _data_field_1 = __webpack_require__(68951);
const kpi_element_1 = __webpack_require__(28093);
const card_layout_template_1 = __webpack_require__(47388);
const _card_1 = __webpack_require__(64958);
var emptyCardTemplate = new card_layout_template_1.CardEmptyLayoutTemplate();
class Card extends kpi_element_1.KpiElement {
    constructor(dataItemProvider, modelJson = {}, serializer) {
        super(dataItemProvider, modelJson, serializer);
        this.layoutTemplate = ko.observable();
        ko.computed(() => {
            this.__targetValue._specifics.skipFormatting = !!this.__actualValue.uniqueName();
        });
        this.layoutTemplate(Card._createTemplate(modelJson.LayoutTemplate, serializer));
    }
    static _createTemplate(jsonModel, serializer = new analytics_utils_1.ModelSerializer()) {
        return jsonModel ? new Card.templateTypes[jsonModel['@Type']](jsonModel, serializer) : emptyCardTemplate;
    }
    _getInfoCore() {
        return _card_1.cardSerializationsInfo;
    }
    _isTypeEmpty() {
        return this.layoutTemplate().getType() === emptyCardTemplate.getType();
    }
    _setTemplateSwitchingOptions(newTemplate) {
        if (this._isTypeEmpty()) {
            this._switchToCardDeltaOptions();
        }
        else if (newTemplate.getType() === emptyCardTemplate.getType()) {
            this._switchToKpiDeltaOptions();
        }
        this.layoutTemplate(newTemplate);
    }
    _switchToCardDeltaOptions() {
        this.cardDeltaOptions.resultIndicationMode(this.deltaOptions.resultIndicationMode());
        this.cardDeltaOptions.resultIndicationThreshold(this.deltaOptions.resultIndicationThreshold());
        this.cardDeltaOptions.resultIndicationThresholdType(this.deltaOptions.resultIndicationThresholdType());
    }
    _switchToKpiDeltaOptions() {
        this.deltaOptions.resultIndicationMode(this.cardDeltaOptions.resultIndicationMode());
        this.deltaOptions.resultIndicationThreshold(this.cardDeltaOptions.resultIndicationThreshold());
        this.deltaOptions.resultIndicationThresholdType(this.cardDeltaOptions.resultIndicationThresholdType());
    }
    _getDefaultItemType() { return 'Card'; }
    _getBindingModel() {
        let baseModel = super._getBindingModel();
        baseModel.forEach(property => property.fieldConstraint = (dataField) => !_data_field_1.DataField.isMeasure(dataField) || _data_field_1.DataField.isNumeric(dataField));
        return baseModel;
    }
}
exports.Card = Card;
Card.templateTypes = {
    Stretched: card_layout_template_1.CardStretchedLayoutTemplate,
    Centered: card_layout_template_1.CardCenteredLayoutTemplate,
    Compact: card_layout_template_1.CardCompactLayoutTemplate,
    Lightweight: card_layout_template_1.CardLightweightLayoutTemplate,
    Custom: card_layout_template_1.CardCustomLayoutTemplate
};


/***/ }),

/***/ 477:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardDashboardItemSerializationsInfo = exports.cardSparklineArgument = exports.cards = void 0;
const _data_item_1 = __webpack_require__(44010);
const _base_metadata_1 = __webpack_require__(17916);
const _kpi_item_1 = __webpack_require__(73236);
exports.cards = { propertyName: 'cards', modelName: 'Cards', displayName: 'DashboardStringId.DefaultNameCardItem', array: true };
exports.cardSparklineArgument = { propertyName: _base_metadata_1.sparklineArgumentPropertyName, modelName: 'SparklineArgument', displayName: 'DashboardStringId.CardCalculationAlongSparklineArgument', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.cardDashboardItemSerializationsInfo = _kpi_item_1.kpiDashboardItemSerializationsInfo.concat([exports.cards, exports.cardSparklineArgument]);


/***/ }),

/***/ 5691:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardLayoutTemplateDataElementSerializationInfo = exports.cardLayoutTemplateElementBaseSerializationInfo = exports.cardLayoutValueType = exports.dimensionIndex = exports.cardLayoutVisible = exports.cardRowDataElementTypeValuesMapEx = exports.cardFormatRuleLayoutElementValuesMap = exports.cardRowDataElementTypeValuesMap = exports.cardRowElementTypeValuesMapBase = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.cardRowElementTypeValuesMapBase = {
    'Title': 'DashboardStringId.CardRowDataElementTypeTitleCaption',
    'Subtitle': 'DashboardStringId.CardRowDataElementTypeSubtitleCaption',
    'ActualValue': 'DashboardStringId.CardRowDataElementTypeActualValueCaption',
    'TargetValue': 'DashboardStringId.CardRowDataElementTypeTargetValueCaption',
    'AbsoluteVariation': 'DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption',
    'PercentVariation': 'DashboardStringId.CardRowDataElementTypePercentVariationCaption',
    'PercentOfTarget': 'DashboardStringId.CardRowDataElementTypePercentOfTargetCaption',
    'CardName': 'DashboardStringId.CardRowDataElementTypeCardNameCaption',
};
exports.cardRowDataElementTypeValuesMap = Object.assign(Object.assign({}, exports.cardRowElementTypeValuesMapBase), { 'DimensionValue': 'DashboardStringId.CardRowDataElementTypeDimensionValueCaption' });
exports.cardFormatRuleLayoutElementValuesMap = Object.assign(Object.assign({ 'AllElements': 'DashboardStringId.FormatRuleApplyToAllElements' }, exports.cardRowElementTypeValuesMapBase), { 'Indicator': 'DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption' });
exports.cardRowDataElementTypeValuesMapEx = Object.assign(Object.assign({}, exports.cardRowDataElementTypeValuesMap), { 'DeltaIndicator': 'DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption', 'Sparkline': 'DashboardStringId.CardRowDataElementTypeSparklineCaption' });
exports.cardLayoutVisible = { propertyName: 'visible', modelName: '@Visible', from: _base_metadata_1.parseBool };
exports.dimensionIndex = { propertyName: 'dimensionIndex', modelName: '@DimensionIndex', from: _base_metadata_1.floatFromModel };
exports.cardLayoutValueType = { propertyName: 'valueType', modelName: '@ValueType', simpleFormAdapterItem: 'listEditor' };
exports.cardLayoutTemplateElementBaseSerializationInfo = [exports.cardLayoutVisible];
exports.cardLayoutTemplateDataElementSerializationInfo = exports.cardLayoutTemplateElementBaseSerializationInfo.concat([exports.cardLayoutValueType, exports.dimensionIndex]);


/***/ }),

/***/ 40936:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ultraCompactTemplateSerializationInfo = exports.nameValueTemplateSerializationInfo = exports.autofitTemplateSerializationInfo = exports.bottomValue2 = exports.bottomValue1 = exports.topValue = exports.deltaCompactTemplateSerializationInfo = exports.bottomSubValue2 = exports.bottomSubValue1 = exports.bottomValue = exports.cardLayoutSparkline = exports.deltaIndicator = exports.subValue = exports.mainValue = exports.customTemplateSerializationInfo = exports.cardLayout = exports.templateSerializationInfo = exports.type = void 0;
const card_layout_1 = __webpack_require__(91084);
const card_layout_template_element_1 = __webpack_require__(15193);
const _card_layout_1 = __webpack_require__(7667);
exports.type = { propertyName: 'type', modelName: '@Type' };
exports.templateSerializationInfo = [_card_layout_1.minWidth, _card_layout_1.maxWidth, exports.type];
exports.cardLayout = { propertyName: 'layout', modelName: 'Layout', type: card_layout_1.CardLayout };
exports.customTemplateSerializationInfo = exports.templateSerializationInfo.concat([exports.cardLayout]);
exports.mainValue = { propertyName: 'mainValue', modelName: 'MainValue', type: card_layout_template_element_1.CardLayoutTemplateDataElement };
exports.subValue = { propertyName: 'subValue', modelName: 'SubValue', type: card_layout_template_element_1.CardLayoutTemplateDataElement };
exports.deltaIndicator = { propertyName: 'deltaIndicator', modelName: 'DeltaIndicator', type: card_layout_template_element_1.CardLayoutTemplateDeltaElement };
exports.cardLayoutSparkline = { propertyName: 'sparkline', modelName: 'Sparkline', type: card_layout_template_element_1.CardLayoutTemplateSparklineElement };
exports.bottomValue = { propertyName: 'bottomValue', modelName: 'BottomValue', type: card_layout_template_element_1.CardLayoutTemplateDataElement };
exports.bottomSubValue1 = { propertyName: 'bottomSubValue1', modelName: 'BottomSubValue1', type: card_layout_template_element_1.CardLayoutTemplateDataElement };
exports.bottomSubValue2 = { propertyName: 'bottomSubValue2', modelName: 'BottomSubValue2', type: card_layout_template_element_1.CardLayoutTemplateDataElement };
exports.deltaCompactTemplateSerializationInfo = exports.templateSerializationInfo.concat([exports.mainValue, exports.subValue, exports.bottomValue, exports.bottomSubValue1, exports.bottomSubValue2, exports.deltaIndicator, exports.cardLayoutSparkline]);
exports.topValue = { propertyName: 'topValue', modelName: 'TopValue', type: card_layout_template_element_1.CardLayoutTemplateDataElement };
exports.bottomValue1 = { propertyName: 'bottomValue1', modelName: 'BottomValue1', type: card_layout_template_element_1.CardLayoutTemplateDataElement };
exports.bottomValue2 = { propertyName: 'bottomValue2', modelName: 'BottomValue2', type: card_layout_template_element_1.CardLayoutTemplateDataElement };
exports.autofitTemplateSerializationInfo = exports.templateSerializationInfo.concat([exports.topValue, exports.mainValue, exports.subValue, exports.bottomValue1, exports.bottomValue2, exports.deltaIndicator, exports.cardLayoutSparkline]);
exports.nameValueTemplateSerializationInfo = exports.templateSerializationInfo.concat([exports.mainValue, exports.subValue, exports.bottomValue, exports.deltaIndicator, exports.cardLayoutSparkline]);
exports.ultraCompactTemplateSerializationInfo = exports.templateSerializationInfo.concat([exports.mainValue, exports.subValue, exports.bottomValue, exports.bottomSubValue1, exports.bottomSubValue2, exports.deltaIndicator, exports.cardLayoutSparkline]);


/***/ }),

/***/ 7667:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardLayoutSerializationInfo = exports.cardRows = exports.maxWidth = exports.minWidth = exports.templateId = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.templateId = { propertyName: 'templateID', modelName: '@TemplateID' };
exports.minWidth = { propertyName: 'minWidth', modelName: '@MinWidth', displayName: 'DashboardWebStringId.CardLayout.MinWidth', defaultVal: 200, from: _base_metadata_1.floatFromModel };
exports.maxWidth = { propertyName: 'maxWidth', modelName: '@MaxWidth', displayName: 'DashboardWebStringId.CardLayout.MaxWidth', defaultVal: NaN, from: _base_metadata_1.floatFromModel, toJsonObject: _base_metadata_1.nullableFloatToModel };
exports.cardRows = { propertyName: 'rows', modelName: 'CardRows', array: true };
exports.cardLayoutSerializationInfo = [_base_metadata_1.itemType, exports.minWidth, exports.maxWidth, exports.cardRows];


/***/ }),

/***/ 14521:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardRowIndicatorElementSerializationInfo = exports.size = exports.cardRowTextElementSerializationInfo = exports.text = exports.cardRowDataElementSerializationInfo = exports.cardRowDataElementDimensionIndex = exports.cardRowDataElementValueType = exports.cardRowTextElementBaseSerializationInfo = exports.predefinedForeColor = exports.cardRowFontSize = exports.cardRowFontFamily = exports.cardRowElementColor = exports.cardRowElementSerializationsInfo = exports.hAlignment = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.hAlignment = { propertyName: 'hAlignment', modelName: '@HAlignment' };
exports.cardRowElementSerializationsInfo = [_base_metadata_1.itemType, exports.hAlignment];
exports.cardRowElementColor = { propertyName: 'color', modelName: '@ForeColor' };
exports.cardRowFontFamily = { propertyName: 'fontFamily', modelName: '@FontFamily' };
exports.cardRowFontSize = { propertyName: 'fontSize', modelName: '@FontSize' };
exports.predefinedForeColor = { propertyName: 'predefinedForeColor', modelName: '@PredefinedForeColor' };
exports.cardRowTextElementBaseSerializationInfo = exports.cardRowElementSerializationsInfo.concat([exports.cardRowElementColor, exports.cardRowFontFamily, exports.cardRowFontSize, exports.predefinedForeColor]);
exports.cardRowDataElementValueType = { propertyName: 'valueType', modelName: '@ValueType', defaultVal: 'DimensionValue' };
exports.cardRowDataElementDimensionIndex = { propertyName: 'dimensionIndex', modelName: '@DimensionIndex', defaultVal: 0 };
exports.cardRowDataElementSerializationInfo = exports.cardRowTextElementBaseSerializationInfo.concat([exports.cardRowDataElementValueType, exports.cardRowDataElementDimensionIndex]);
exports.text = { propertyName: 'text', modelName: '@Text' };
exports.cardRowTextElementSerializationInfo = exports.cardRowTextElementBaseSerializationInfo.concat([exports.text]);
exports.size = { propertyName: 'size', modelName: '@Size', defaultVal: 16 };
exports.cardRowIndicatorElementSerializationInfo = exports.cardRowElementSerializationsInfo.concat([exports.size]);


/***/ }),

/***/ 24481:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardSparklineRowSerializationInfo = exports.cardSparklineRowOptions = exports.height = exports.cardRowSerializationInfo = exports.elements = exports.cardRowBaseSerializationInfo = exports.indent = exports.vAlignment = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.vAlignment = { propertyName: 'vAlignment', modelName: '@VAlignment' };
exports.indent = { propertyName: 'indent', modelName: '@Indent' };
exports.cardRowBaseSerializationInfo = [exports.vAlignment, exports.indent, _base_metadata_1.itemType];
exports.elements = { propertyName: 'elements', modelName: 'CardRowElements', array: true };
exports.cardRowSerializationInfo = exports.cardRowBaseSerializationInfo.concat([exports.elements]);
exports.height = { propertyName: 'height', modelName: '@Height' };
exports.cardSparklineRowOptions = { propertyName: 'sparklineOptions', modelName: 'sparklineOptions' };
exports.cardSparklineRowSerializationInfo = exports.cardRowBaseSerializationInfo.concat([exports.height, exports.cardSparklineRowOptions]);


/***/ }),

/***/ 64958:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardSerializationsInfo = exports.layoutTemplate = exports.showSparkline = exports.cardSparklineOptions = exports.cardDeltaOptions = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _kpi_element_1 = __webpack_require__(42209);
const delta_options_1 = __webpack_require__(86785);
const sparkline_options_1 = __webpack_require__(1103);
exports.cardDeltaOptions = { propertyName: 'cardDeltaOptions', modelName: 'CardDeltaOptions', displayName: 'DashboardWebStringId.Grid.DeltaOptions', type: delta_options_1.CardDeltaOptions };
exports.cardSparklineOptions = { propertyName: 'sparklineOptions', modelName: 'SparklineOptions', displayName: 'DashboardWebStringId.Card.SparklineOptions', type: sparkline_options_1.SparklineOptions };
exports.showSparkline = { propertyName: 'showSparkline', modelName: '@ShowStartEndValues', displayName: 'DashboardWebStringId.Card.SparklineVisible', defaultVal: true, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.layoutTemplate = { propertyName: 'layoutTemplate', modelName: 'LayoutTemplate' };
exports.cardSerializationsInfo = _kpi_element_1.kpiElementSerializationsInfo.concat([exports.cardDeltaOptions, exports.cardSparklineOptions, exports.showSparkline, exports.layoutTemplate]);


/***/ }),

/***/ 74380:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChartItemBase = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const item_data_axis_names_1 = __webpack_require__(51101);
const _item_data_tuple_1 = __webpack_require__(60367);
const data_item_1 = __webpack_require__(44650);
const _knockout_utils_1 = __webpack_require__(4437);
const _utils_1 = __webpack_require__(66358);
const _base_metadata_1 = __webpack_require__(17916);
const data_dashboard_item_1 = __webpack_require__(70355);
const _chart_item_base_1 = __webpack_require__(913);
const series_item_1 = __webpack_require__(21741);
class ChartItemBase extends series_item_1.SeriesItem {
    constructor(dashboardItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this.__arguments = ko.observableArray([]);
        this.arguments = ko.observableArray([]);
        this.__arguments(analytics_utils_1.deserializeArray(dashboardItemJSON.Arguments, (item) => new data_item_1.DataItemLink(this, item, serializer))());
        this._subscribeDataItemLinkArrays(_chart_item_base_1.chartArgumentsMeta);
        _knockout_utils_1.subscribeAndPerform(this.__seriesDimensions, newValue => {
            data_dashboard_item_1.DataDashboardItem._addColoringMeta(newValue);
        });
        _knockout_utils_1.subscribeAndPerform(this.__arguments, newValue => {
            data_dashboard_item_1.DataDashboardItem._addColoringMeta(newValue);
        });
    }
    _getInfoCore() {
        return _chart_item_base_1.chartItemBaseSerializationsInfo;
    }
    _clearBindings() {
        super._clearBindings();
        this.__arguments.removeAll();
    }
    _getInteractivityDimensionLinks() {
        var targetDimensions = this._getTargetDimensions();
        if (targetDimensions) {
            if (targetDimensions === 'Arguments') {
                return this.__arguments();
            }
            else if (targetDimensions === 'Points') {
                return this.__arguments().concat(this.__seriesDimensions());
            }
        }
        return super._getInteractivityDimensionLinks();
    }
    _getTargetDimensions() {
        return 'Arguments';
    }
    _getItemDataAxis() {
        if (this.interactivityOptions.targetDimensions() === 'Series') {
            return item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis;
        }
        else if (this.interactivityOptions.targetDimensions() === 'Arguments') {
            return item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis;
        }
        else if (this.interactivityOptions.targetDimensions() === 'Points') {
            return item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis;
        }
        else {
            throw Error('Unsupported interactivity type');
        }
    }
    _getCurrentFilterValues() {
        var that = this, data = that._getItemData(), argumentNames = that.arguments().map(dim => dim.uniqueName()), seriesNames = that.seriesDimensions().map(dim => dim.uniqueName()), selectedValues = that._getSelectedValuesByItemName();
        if (!data)
            return;
        if (this.interactivityOptions.targetDimensions() === 'Arguments') {
            return data && data.getCurrentFilterValues(argumentNames, item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis, selectedValues);
        }
        else if (this.interactivityOptions.targetDimensions() === 'Series') {
            return data.getCurrentFilterValues(seriesNames, item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis, selectedValues);
        }
        else if (this.interactivityOptions.targetDimensions() === 'Points') {
            var argumentPoints = data.getCurrentFilterValues(that.arguments().map(dim => dim.uniqueName()), item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis, selectedValues.map(val => [val[0]]));
            var seriesPoints = data.getCurrentFilterValues(that.seriesDimensions().map(dim => dim.uniqueName()), item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis, selectedValues.map(val => [val[1]]));
            var tuples = [];
            argumentPoints.forEach(function (arg, index) {
                tuples.push(new _item_data_tuple_1.itemDataTuple([arg.getAxisPoint(item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis), seriesPoints[index].getAxisPoint(item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis)]));
            });
            return tuples;
        }
    }
    _itemInteractivityByColumnAxis() {
        return this.interactivityOptions.targetDimensions() === 'Arguments';
    }
    _getInteractivityAxisDimensionCount() {
        return this._itemInteractivityByColumnAxis() ? this.arguments().length : this.seriesDimensions().length;
    }
    _getCanColorByMeasures() { return true; }
    _getCanColorByDimensions() { return true; }
    _getColorizableDataItemsInfo() {
        return [{
                items: this.__arguments(),
                prefixId: _base_metadata_1.BindingSectionTitles.Arguments
            }, {
                items: this.__seriesDimensions(),
                prefixId: _base_metadata_1.BindingSectionTitles.SeriesDimension
            }];
    }
}
__decorate([
    _utils_1.collectionItemType('Argument')
], ChartItemBase.prototype, "__arguments", void 0);
exports.ChartItemBase = ChartItemBase;


/***/ }),

/***/ 97851:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChartSecondaryAxisY = exports.ScatterChartAxisY = exports.ChartAxisY = exports.ChartAxisX = exports.ChartAxis = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _chart_axis_1 = __webpack_require__(45308);
class ChartAxis extends serializable_model_1.SerializableModel {
    constructor(JSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(JSON, serializer);
    }
    getInfo() {
        return _chart_axis_1.chartAxisSerializationsInfo;
    }
}
exports.ChartAxis = ChartAxis;
class ChartAxisX extends ChartAxis {
    constructor(JSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(JSON, serializer);
    }
    getInfo() {
        return _chart_axis_1.chartAxisXSerializationsInfo;
    }
}
exports.ChartAxisX = ChartAxisX;
class ChartAxisY extends ChartAxis {
    constructor(JSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(JSON, serializer);
    }
    getInfo() {
        return _chart_axis_1.chartAxisYSerializationsInfo;
    }
}
exports.ChartAxisY = ChartAxisY;
class ScatterChartAxisY extends ChartAxisY {
    constructor(JSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(JSON, serializer);
    }
    getInfo() {
        return _chart_axis_1.scatterChartAxisYSerializationsInfo;
    }
}
exports.ScatterChartAxisY = ScatterChartAxisY;
class ChartSecondaryAxisY extends ChartAxisY {
    constructor(JSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(JSON, serializer);
    }
    getInfo() {
        return _chart_axis_1.chartSecondaryAxisYSerializationsInfo;
    }
}
exports.ChartSecondaryAxisY = ChartSecondaryAxisY;


/***/ }),

/***/ 99237:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChartItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const _default_1 = __webpack_require__(65855);
const _dimension_1 = __webpack_require__(47557);
const chart_calc_window_definition_1 = __webpack_require__(84143);
const _data_field_1 = __webpack_require__(68951);
const _helper_classes_1 = __webpack_require__(8384);
const _knockout_utils_1 = __webpack_require__(4437);
const serializable_model_1 = __webpack_require__(29591);
const chart_item_base_1 = __webpack_require__(74380);
const chart_pane_1 = __webpack_require__(28665);
const chart_series_1 = __webpack_require__(34303);
const _chart_item_1 = __webpack_require__(88370);
class ChartItem extends chart_item_base_1.ChartItemBase {
    constructor(dashboardItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this.panes = analytics_utils_1.deserializeArray(dashboardItemJSON.Panes || {}, (item) => new chart_pane_1.ChartPane(this, item, serializer));
        if (this.panes().length === 0) {
            this._addNewPane();
        }
        _knockout_utils_1.subscribeAndPerform(this.__arguments, newValue => {
            newValue.forEach((argument) => {
                argument._specifics.customDataShapingProperties = [{
                        serializationInfo: _dimension_1.isDiscreteNumericScale,
                        filter: dataField => _data_field_1.DataField.isNumeric(dataField)
                    }];
            });
        });
    }
    _clearBindings() {
        super._clearBindings();
        this.panes.removeAll();
        this.panes.push(new chart_pane_1.ChartPane(this, {}));
    }
    _getInfoCore() {
        return _chart_item_1.chartItemSerializationInfo;
    }
    _getDefaultItemType() {
        return 'Chart';
    }
    _updateContentViewModel(content) {
        super._updateContentViewModel(content);
        content.ViewModel.Rotated = this.rotated();
    }
    _getTargetDimensions() { return this.interactivityOptions.targetDimensions(); }
    _getMasterFilterMode() { return this.interactivityOptions.masterFilterMode(); }
    _getDrillDownEnabled() { return this.interactivityOptions.isDrillDownEnabled(); }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
    _getCanColorByDimensions() { return this._coloredSeries().length > 0; }
    _getAreMeasuresColoredByDefault() {
        return this._coloredSeries().length > 1;
    }
    _getIsDimensionColoredByDefault(dimension) {
        return !!this.__seriesDimensions().filter(link => link.dataItem() === dimension)[0];
    }
    _addNewPane() {
        var pane = new chart_pane_1.ChartPane(this, { '@ItemType': 'Pane' });
        pane.name(_helper_classes_1.NameGenerator.generateName(_default_1.getLocalizationById('DashboardStringId.DefaultNameChartPane') + ' ', this.panes(), 'name', 1));
        this.panes.push(pane);
    }
    _coloredSeries() {
        return [].concat.apply([], this.panes().map(pane => pane.series())).filter(series => !(series instanceof chart_series_1.HighLowCloseSeries) && !(series instanceof chart_series_1.OpenHighLowCloseSeries));
    }
    _getDefaultCalculationWindowDefinition() {
        return new chart_calc_window_definition_1.ChartWindowDefinition();
    }
}
exports.ChartItem = ChartItem;
serializable_model_1.itemTypesMap['Chart'] = { type: ChartItem, groupName: 'common', title: 'DashboardStringId.DefaultNameChartItem', index: 30 };


/***/ }),

/***/ 33166:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChartLegend = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _chart_legend_1 = __webpack_require__(27097);
class ChartLegend extends serializable_model_1.SerializableModel {
    constructor(JSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(JSON, serializer);
    }
    getInfo() {
        return _chart_legend_1.chartLegendSerializationsInfo;
    }
}
exports.ChartLegend = ChartLegend;


/***/ }),

/***/ 28665:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChartPane = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const chart_series_creator_1 = __webpack_require__(52469);
const _chart_pane_1 = __webpack_require__(28078);
class ChartPane extends serializable_model_1.SerializableModel {
    constructor(dataItemProvider, dashboardItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this.createSeriesByViewType = chart_series_creator_1.ChartSeriesCreator.getSeriesCreator(dataItemProvider);
        this.series = analytics_utils_1.deserializeArray(dashboardItemJSON.Series, (item) => chart_series_creator_1.ChartSeriesCreator.createSeries(dataItemProvider, item, serializer));
    }
    getInfo() {
        return _chart_pane_1.chartPaneSerializationsInfo;
    }
}
exports.ChartPane = ChartPane;


/***/ }),

/***/ 52469:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChartSeriesCreator = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const chart_series_1 = __webpack_require__(34303);
class ChartSeriesCreator {
    static getSeriesCreator(dataItemProvider) {
        return (seriesViewType) => {
            var seriesType = ChartSeriesCreator.chartSeriesViewTypesMap[seriesViewType].seriesType, series = ChartSeriesCreator.createSeries(dataItemProvider, { '@ItemType': seriesType });
            if (series instanceof chart_series_1.SimpleSeries) {
                series.seriesType(seriesViewType);
            }
            else if (series instanceof chart_series_1.RangeSeries) {
                series.seriesType(seriesViewType);
            }
            else if (series instanceof chart_series_1.OpenHighLowCloseSeries) {
                series.seriesType(seriesViewType);
            }
            return series;
        };
    }
    static createSeries(dataItemProvider, seriesJSON, serializer = new analytics_utils_1.ModelSerializer()) {
        var itemType = seriesJSON['@ItemType'];
        return new ChartSeriesCreator.chartSeriesTypesMap[itemType](dataItemProvider, seriesJSON, serializer);
    }
}
exports.ChartSeriesCreator = ChartSeriesCreator;
ChartSeriesCreator.chartSeriesTypesMap = {
    'Simple': chart_series_1.SimpleSeries,
    'Range': chart_series_1.RangeSeries,
    'Weighted': chart_series_1.WeightedSeries,
    'OpenHighLowClose': chart_series_1.OpenHighLowCloseSeries,
    'HighLowClose': chart_series_1.HighLowCloseSeries
};
ChartSeriesCreator.chartSeriesViewTypesMap = {
    'Bar': {
        seriesType: 'Simple',
        displayName: 'DashboardStringId.SeriesTypeBar',
        group: 'Bar',
        icon: 'dx-dashboard-chart-series-bar'
    },
    'StackedBar': {
        seriesType: 'Simple',
        displayName: 'DashboardStringId.SeriesTypeStackedBar',
        group: 'Bar',
        icon: 'dx-dashboard-chart-series-stacked-bar'
    },
    'FullStackedBar': {
        seriesType: 'Simple',
        displayName: 'DashboardStringId.SeriesTypeFullStackedBar',
        group: 'Bar',
        icon: 'dx-dashboard-chart-series-full-stacked-bar'
    },
    'Point': {
        seriesType: 'Simple',
        displayName: 'DashboardStringId.SeriesTypePoint',
        group: 'Point / Line',
        icon: 'dx-dashboard-chart-series-points'
    },
    'Line': {
        seriesType: 'Simple',
        displayName: 'DashboardStringId.SeriesTypeLine',
        group: 'Point / Line',
        icon: 'dx-dashboard-chart-series-line'
    },
    'StackedLine': {
        seriesType: 'Simple',
        displayName: 'DashboardStringId.SeriesTypeStackedLine',
        group: 'Point / Line',
        icon: 'dx-dashboard-chart-series-stacked-line'
    },
    'FullStackedLine': {
        seriesType: 'Simple',
        displayName: 'DashboardStringId.SeriesTypeFullStackedLine',
        group: 'Point / Line',
        icon: 'dx-dashboard-chart-series-full-stacked-line'
    },
    'StepLine': {
        seriesType: 'Simple',
        displayName: 'DashboardStringId.SeriesTypeStepLine',
        group: 'Point / Line',
        icon: 'dx-dashboard-chart-series-step-line'
    },
    'Spline': {
        seriesType: 'Simple',
        displayName: 'DashboardStringId.SeriesTypeSpline',
        group: 'Point / Line',
        icon: 'dx-dashboard-chart-series-spline'
    },
    'Area': {
        seriesType: 'Simple',
        displayName: 'DashboardStringId.SeriesTypeArea',
        group: 'Area',
        icon: 'dx-dashboard-chart-series-area'
    },
    'StackedArea': {
        seriesType: 'Simple',
        displayName: 'DashboardStringId.SeriesTypeStackedArea',
        group: 'Area',
        icon: 'dx-dashboard-chart-series-stacked-area'
    },
    'FullStackedArea': {
        seriesType: 'Simple',
        displayName: 'DashboardStringId.SeriesTypeFullStackedArea',
        group: 'Area',
        icon: 'dx-dashboard-chart-series-full-stacked-area'
    },
    'StepArea': {
        seriesType: 'Simple',
        displayName: 'DashboardStringId.SeriesTypeStepArea',
        group: 'Area',
        icon: 'dx-dashboard-chart-series-step-area'
    },
    'SplineArea': {
        seriesType: 'Simple',
        displayName: 'DashboardStringId.SeriesTypeSplineArea',
        group: 'Area',
        icon: 'dx-dashboard-chart-series-spline-area'
    },
    'StackedSplineArea': {
        seriesType: 'Simple',
        displayName: 'DashboardStringId.SeriesTypeStackedSplineArea',
        group: 'Area',
        icon: 'dx-dashboard-chart-series-stacked-spline-area'
    },
    'FullStackedSplineArea': {
        seriesType: 'Simple',
        displayName: 'DashboardStringId.SeriesTypeFullStackedSplineArea',
        group: 'Area',
        icon: 'dx-dashboard-chart-series-full-stacked-spline-area'
    },
    'SideBySideRangeBar': {
        seriesType: 'Range',
        displayName: 'DashboardStringId.SeriesTypeSideBySideRangeBar',
        group: 'Range',
        icon: 'dx-dashboard-chart-series-range-bar'
    },
    'RangeArea': {
        seriesType: 'Range',
        displayName: 'DashboardStringId.SeriesTypeRangeArea',
        group: 'Range',
        icon: 'dx-dashboard-chart-series-range-area'
    },
    'Weighted': {
        seriesType: 'Weighted',
        displayName: 'DashboardWebStringId.Chart.SeriesType.Weighted',
        group: 'Bubble',
        icon: 'dx-dashboard-chart-series-weighted'
    },
    'HighLowClose': {
        seriesType: 'HighLowClose',
        displayName: 'DashboardStringId.SeriesTypeHighLowClose',
        group: 'Financial',
        icon: 'dx-dashboard-chart-series-high-low-close'
    },
    'CandleStick': {
        seriesType: 'OpenHighLowClose',
        displayName: 'DashboardStringId.SeriesTypeCandleStick',
        group: 'Financial',
        icon: 'dx-dashboard-chart-series-candle-stick'
    },
    'Stock': {
        seriesType: 'OpenHighLowClose',
        displayName: 'DashboardStringId.SeriesTypeStock',
        group: 'Financial',
        icon: 'dx-dashboard-chart-series-stock'
    }
};
ChartSeriesCreator.chartSeriesGroupLocalization = {
    'Area': 'DashboardStringId.SeriesTypeGroupArea',
    'Bar': 'DashboardStringId.SeriesTypeGroupBar',
    'Bubble': 'DashboardStringId.SeriesTypeGroupBubble',
    'Financial': 'DashboardStringId.SeriesTypeGroupFinancial',
    'Point / Line': 'DashboardStringId.SeriesTypeGroupPointLine',
    'Range': 'DashboardStringId.SeriesTypeGroupRange'
};


/***/ }),

/***/ 34303:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OpenHighLowCloseSeries = exports.HighLowCloseSeries = exports.WeightedSeries = exports.RangeSeries = exports.SimpleSeries = exports.ChartSeries = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const data_item_container_1 = __webpack_require__(76885);
const _chart_series_1 = __webpack_require__(86254);
class ChartSeries extends data_item_container_1.DataItemContainer {
    constructor(seriesJSON, serializer) {
        super(seriesJSON, serializer);
    }
    _getInfoCore() {
        throw new Error("Method 'getInfo' is not implemented.");
    }
    grabFrom(series) {
        super.grabFrom(series);
        this.plotOnSecondaryAxis(series.plotOnSecondaryAxis());
        this.ignoreEmptyPoints(series.ignoreEmptyPoints());
        this.showPointMarkers(series.showPointMarkers());
        this.ignoreEmptyPoints(series.ignoreEmptyPoints());
        this.pointLabelOptions.grabFrom(series.pointLabelOptions);
    }
    _getDataId() {
        const defaultMeasure = this._measures[0];
        return defaultMeasure && defaultMeasure.uniqueName() || null;
    }
}
exports.ChartSeries = ChartSeries;
class SimpleSeries extends ChartSeries {
    constructor(dataItemProvider, seriesJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(seriesJSON, serializer);
        dataItemProvider._attachDataItem(this, _chart_series_1.chartSeriesValue.propertyName);
    }
    _getBindingModel() {
        return [{
                propertyName: _chart_series_1.chartSeriesValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.ValueCaption'
            }];
    }
    _getContainerType() {
        return this.seriesType();
    }
    _getInfoCore() {
        return _chart_series_1.simpleSeriesSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'Simple';
    }
    get _measures() { return [this.value()].filter(m => !!m); }
    get _isConditionalFormattingSupported() { return true; }
}
exports.SimpleSeries = SimpleSeries;
class RangeSeries extends ChartSeries {
    constructor(dataItemProvider, seriesJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(seriesJSON, serializer);
        dataItemProvider._attachDataItem(this, _chart_series_1.value1.propertyName);
        dataItemProvider._attachDataItem(this, _chart_series_1.value2.propertyName);
    }
    _getInfoCore() {
        return _chart_series_1.rangeSeriesSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'Range';
    }
    _getBindingModel() {
        return [{
                propertyName: _chart_series_1.value1.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.Value1Caption'
            }, {
                propertyName: _chart_series_1.value2.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.Value2Caption'
            }];
    }
    _getContainerType() {
        return this.seriesType();
    }
    get _measures() { return [this.value1(), this.value2()].filter(m => !!m); }
    get _isConditionalFormattingSupported() { return true; }
}
exports.RangeSeries = RangeSeries;
class WeightedSeries extends ChartSeries {
    constructor(dataItemProvider, seriesJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(seriesJSON, serializer);
        dataItemProvider._attachDataItem(this, _chart_series_1.chartSeriesWeight.propertyName);
        dataItemProvider._attachDataItem(this, _chart_series_1.chartSeriesValue.propertyName);
    }
    _getInfoCore() {
        return _chart_series_1.weightedSeriesSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'Weighted';
    }
    _getBindingModel() {
        return [{
                propertyName: _chart_series_1.chartSeriesValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardWebStringId.Chart.Value'
            }, {
                propertyName: _chart_series_1.chartSeriesWeight.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.WeightCaption'
            }];
    }
    get _measures() { return [this.value(), this.weight()].filter(m => !!m); }
    get _isConditionalFormattingSupported() { return true; }
}
exports.WeightedSeries = WeightedSeries;
class HighLowCloseSeries extends ChartSeries {
    constructor(dataItemProvider, seriesJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(seriesJSON, serializer);
        dataItemProvider._attachDataItem(this, _chart_series_1.high.propertyName);
        dataItemProvider._attachDataItem(this, _chart_series_1.low.propertyName);
        dataItemProvider._attachDataItem(this, _chart_series_1.close.propertyName);
    }
    _getInfoCore() {
        return _chart_series_1.highLowCloseSeriesSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'HighLowClose';
    }
    _getBindingModel() {
        return [{
                propertyName: _chart_series_1.high.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.HighCaption'
            }, {
                propertyName: _chart_series_1.low.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.LowCaption'
            }, {
                propertyName: _chart_series_1.close.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.CloseCaption'
            }];
    }
    get _measures() { return [this.high(), this.low(), this.close()].filter(m => !!m); }
    get _isConditionalFormattingSupported() { return false; }
}
exports.HighLowCloseSeries = HighLowCloseSeries;
class OpenHighLowCloseSeries extends HighLowCloseSeries {
    constructor(dataItemProvider, seriesJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dataItemProvider, seriesJSON, serializer);
        dataItemProvider._attachDataItem(this, _chart_series_1.open.propertyName);
    }
    _getInfoCore() {
        return _chart_series_1.openHighLowCloseSeriesSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'OpenHighLowClose';
    }
    _getBindingModel() {
        return [{
                propertyName: _chart_series_1.open.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.OpenCaption'
            }].concat(super._getBindingModel());
    }
    _getContainerType() {
        return this.seriesType();
    }
    get _measures() { return [this.open(), this.high(), this.low(), this.close()].filter(m => !!m); }
    get _isConditionalFormattingSupported() { return false; }
}
exports.OpenHighLowCloseSeries = OpenHighLowCloseSeries;


/***/ }),

/***/ 45308:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scatterChartAxisYSerializationsInfo = exports.chartSecondaryAxisYSerializationsInfo = exports.chartAxisYSerializationsInfo = exports.chartAxisYBaseSerializationsInfo = exports.logarithmicBase = exports.logarithmic = exports.showGridLinesBaseInfo = exports.alwaysShowZeroLevelScatter = exports.chartAlwaysShowZeroLevel = exports.alwaysShowZeroLevelTemplate = exports.chartAxisXSerializationsInfo = exports.visiblePointsCount = exports.limitVisiblePoints = exports.enableZooming = exports.chartAxisSerializationsInfo = exports.title = exports.titleVisibleBaseInfo = exports.axisVisible = exports.reverse = void 0;
const _data_item_1 = __webpack_require__(44010);
const _base_metadata_1 = __webpack_require__(17916);
exports.reverse = { propertyName: 'reverse', modelName: '@Reverse', displayName: 'DashboardWebStringId.Chart.Reverse', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.axisVisible = { propertyName: 'visible', modelName: '@Visible', displayName: 'DashboardWebStringId.Chart.Visible', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.titleVisibleBaseInfo = { propertyName: 'titleVisible', modelName: '@TitleVisible', displayName: 'DashboardWebStringId.Chart.Title', simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
function getInfoTitleVisible(defaultVal) { return Object.assign({ defaultVal: defaultVal }, exports.titleVisibleBaseInfo); }
exports.title = { propertyName: 'title', modelName: '@Title', displayName: 'DashboardWebStringId.Chart.TitleText', simpleFormAdapterItem: 'textBoxEditor' };
exports.chartAxisSerializationsInfo = [exports.axisVisible, exports.reverse, exports.title, _data_item_1.numericFormat];
exports.enableZooming = { propertyName: 'enableZooming', modelName: '@EnableZooming', displayName: 'DashboardWebStringId.Chart.EnableZooming', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.limitVisiblePoints = { propertyName: 'limitVisiblePoints', modelName: '@LimitVisiblePoints', displayName: 'DashboardWebStringId.Chart.LimitVisiblePoints', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.visiblePointsCount = { propertyName: 'visiblePointsCount', modelName: '@VisiblePointsCount', displayName: 'DashboardWebStringId.Chart.VisiblePointsCount', defaultVal: 10, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, validationRules: [{ type: 'range', min: 1 }, _base_metadata_1.integerValidationRule] };
exports.chartAxisXSerializationsInfo = exports.chartAxisSerializationsInfo.concat([getInfoTitleVisible(false), exports.enableZooming, exports.limitVisiblePoints, exports.visiblePointsCount, _data_item_1.dateTimeFormat]);
exports.alwaysShowZeroLevelTemplate = { propertyName: 'alwaysShowZeroLevel', modelName: '@AlwaysShowZeroLevel', displayName: 'DashboardWebStringId.Chart.AlwaysShowZeroLevel', simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.chartAlwaysShowZeroLevel = Object.assign({ defaultVal: true }, exports.alwaysShowZeroLevelTemplate);
exports.alwaysShowZeroLevelScatter = Object.assign({ defaultVal: false }, exports.alwaysShowZeroLevelTemplate);
exports.showGridLinesBaseInfo = { propertyName: 'showGridLines', modelName: '@ShowGridLines', displayName: 'DashboardWebStringId.Chart.GridLines', simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
function getInfoShowGridLines(defaultVal) { return Object.assign({ defaultVal: defaultVal }, exports.showGridLinesBaseInfo); }
exports.logarithmic = { propertyName: 'logarithmic', modelName: '@Logarithmic', displayName: 'DashboardWebStringId.Chart.LogarithmicScale', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.logarithmicBase = {
    propertyName: 'logarithmicBase', modelName: '@LogarithmicBase', displayName: 'DashboardWebStringId.Chart.LogarithmicScaleBase', defaultVal: 'Base10', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'Base2': 'DashboardWebStringId.Chart.LogarithmicScaleBase2',
        'Base5': 'DashboardWebStringId.Chart.LogarithmicScaleBase5',
        'Base10': 'DashboardWebStringId.Chart.LogarithmicScaleBase10'
    }
};
exports.chartAxisYBaseSerializationsInfo = exports.chartAxisSerializationsInfo.concat([exports.logarithmic, exports.logarithmicBase]);
exports.chartAxisYSerializationsInfo = exports.chartAxisYBaseSerializationsInfo.concat([exports.chartAlwaysShowZeroLevel, getInfoTitleVisible(true), getInfoShowGridLines(true)]);
exports.chartSecondaryAxisYSerializationsInfo = exports.chartAxisYBaseSerializationsInfo.concat([exports.chartAlwaysShowZeroLevel, getInfoTitleVisible(true), getInfoShowGridLines(false)]);
exports.scatterChartAxisYSerializationsInfo = exports.chartAxisYBaseSerializationsInfo.concat([exports.alwaysShowZeroLevelScatter, getInfoTitleVisible(true), getInfoShowGridLines(true)]);


/***/ }),

/***/ 88370:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.chartItemSerializationInfo = exports.chartAxisX = exports.chartLegend = exports.panes = exports.chartRotated = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _chart_item_base_1 = __webpack_require__(913);
const interactivity_options_1 = __webpack_require__(50045);
const chart_axis_1 = __webpack_require__(97851);
const chart_legend_1 = __webpack_require__(33166);
exports.chartRotated = { propertyName: 'rotated', modelName: '@Rotated', displayName: 'DashboardWebStringId.Chart.Rotated', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.panes = { propertyName: 'panes', modelName: 'Panes', displayName: 'DashboardWebStringId.Chart.Panes', array: true };
exports.chartLegend = { propertyName: 'legend', modelName: 'ChartLegend', displayName: 'DashboardWebStringId.Chart.Legend', type: chart_legend_1.ChartLegend };
exports.chartAxisX = { propertyName: 'axisX', modelName: 'AxisX', displayName: 'DashboardWebStringId.Chart.AxisX', type: chart_axis_1.ChartAxisX };
exports.chartItemSerializationInfo = _chart_item_base_1.chartItemBaseSerializationsInfo.concat([exports.panes, exports.chartRotated, exports.chartLegend, exports.chartAxisX, interactivity_options_1._chartItemInteractivityOptionsMeta]);


/***/ }),

/***/ 27097:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.chartLegendSerializationsInfo = exports.chartLegendVisible = exports.isInsideDiagram = exports.insidePosition = exports.outsidePosition = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.outsidePosition = {
    propertyName: 'outsidePosition', modelName: '@OutsidePosition', displayName: 'DashboardWebStringId.Chart.Position', defaultVal: 'TopRightHorizontal', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'TopLeftVertical': 'DashboardWebStringId.Chart.Position.TopLeftVertical',
        'TopLeftHorizontal': 'DashboardWebStringId.Chart.Position.TopLeftHorizontal',
        'TopCenterHorizontal': 'DashboardWebStringId.Chart.Position.TopCenterHorizontal',
        'TopRightVertical': 'DashboardWebStringId.Chart.Position.TopRightVertical',
        'TopRightHorizontal': 'DashboardWebStringId.Chart.Position.TopRightHorizontal',
        'BottomLeftVertical': 'DashboardWebStringId.Chart.Position.BottomLeftVertical',
        'BottomLeftHorizontal': 'DashboardWebStringId.Chart.Position.BottomLeftHorizontal',
        'BottomCenterHorizontal': 'DashboardWebStringId.Chart.Position.BottomCenterHorizontal',
        'BottomRightVertical': 'DashboardWebStringId.Chart.Position.BottomRightVertical',
        'BottomRightHorizontal': 'DashboardWebStringId.Chart.Position.BottomRightHorizontal'
    }
};
exports.insidePosition = {
    propertyName: 'insidePosition', modelName: '@InsidePosition', displayName: 'DashboardWebStringId.Chart.Position', defaultVal: 'TopRightHorizontal', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'TopLeftVertical': 'DashboardWebStringId.Chart.Position.TopLeftVertical',
        'TopLeftHorizontal': 'DashboardWebStringId.Chart.Position.TopLeftHorizontal',
        'TopCenterHorizontal': 'DashboardWebStringId.Chart.Position.TopCenterHorizontal',
        'TopCenterVertical': 'DashboardWebStringId.Chart.Position.TopCenterVertical',
        'TopRightVertical': 'DashboardWebStringId.Chart.Position.TopRightVertical',
        'TopRightHorizontal': 'DashboardWebStringId.Chart.Position.TopRightHorizontal',
        'BottomLeftVertical': 'DashboardWebStringId.Chart.Position.BottomLeftVertical',
        'BottomLeftHorizontal': 'DashboardWebStringId.Chart.Position.BottomLeftHorizontal',
        'BottomCenterHorizontal': 'DashboardWebStringId.Chart.Position.BottomCenterHorizontal',
        'BottomCenterVertical': 'DashboardWebStringId.Chart.Position.BottomCenterVertical',
        'BottomRightVertical': 'DashboardWebStringId.Chart.Position.BottomRightVertical',
        'BottomRightHorizontal': 'DashboardWebStringId.Chart.Position.BottomRightHorizontal'
    }
};
exports.isInsideDiagram = { propertyName: 'isInsideDiagram', modelName: '@IsInsidePosition', displayName: 'DashboardWebStringId.Chart.IsInsideOfDiagram', defaultVal: false, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.chartLegendVisible = { propertyName: 'visible', modelName: '@Visible', displayName: 'DashboardWebStringId.Chart.ShowLegend', defaultVal: true, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.chartLegendSerializationsInfo = [exports.outsidePosition, exports.insidePosition, exports.isInsideDiagram, exports.chartLegendVisible];


/***/ }),

/***/ 28078:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.chartPaneSerializationsInfo = exports.chartPaneName = exports.secondaryAxisY = exports.primaryAxisY = exports.chartSeries = void 0;
const chart_axis_1 = __webpack_require__(97851);
exports.chartSeries = { propertyName: 'series', modelName: 'Series', displayName: 'DashboardStringId.DescriptionItemSeries', array: true };
exports.primaryAxisY = { propertyName: 'primaryAxisY', modelName: 'AxisY', displayName: 'DashboardWebStringId.Chart.PrimaryAxisY', type: chart_axis_1.ChartAxisY };
exports.secondaryAxisY = { propertyName: 'secondaryAxisY', modelName: 'SecondaryAxisY', displayName: 'DashboardWebStringId.Chart.SecondaryAxisY', type: chart_axis_1.ChartSecondaryAxisY };
exports.chartPaneName = { propertyName: 'name', modelName: '@Name', displayName: 'DashboardWebStringId.Chart.Name', simpleFormAdapterItem: 'textBoxEditor' };
exports.chartPaneSerializationsInfo = [exports.chartSeries, exports.primaryAxisY, exports.secondaryAxisY, exports.chartPaneName];


/***/ }),

/***/ 86254:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.openHighLowCloseSeriesSerializationsInfo = exports.highLowCloseSeriesSerializationsInfo = exports.weightedSeriesSerializationsInfo = exports.rangeSeriesSerializationsInfo = exports.simpleSeriesSerializationsInfo = exports.close = exports.low = exports.high = exports.open = exports.chartSeriesWeight = exports.value2 = exports.value1 = exports.chartSeriesValue = exports.openHighLowCloseSeriesType = exports.rangeSeriesType = exports.simpleSeriesType = exports.chartSeriesType = exports.chartSeriesSerializationsInfo = exports.chartSeriesPointLabelOptions = exports.showPointMarkers = exports.ignoreEmptyPoints = exports.plotOnSecondaryAxis = void 0;
const _data_item_1 = __webpack_require__(44010);
const _base_metadata_1 = __webpack_require__(17916);
const point_label_options_1 = __webpack_require__(41435);
exports.plotOnSecondaryAxis = { propertyName: 'plotOnSecondaryAxis', modelName: '@PlotOnSecondaryAxis', displayName: 'DashboardWebStringId.Chart.PlotOnSecondaryAxis', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.ignoreEmptyPoints = { propertyName: 'ignoreEmptyPoints', modelName: '@IgnoreEmptyPoints', displayName: 'DashboardWebStringId.Chart.IgnoreEmptyPoints', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.showPointMarkers = { propertyName: 'showPointMarkers', modelName: '@ShowPointMarkers', displayName: 'DashboardWebStringId.Chart.ShowPointMarkers', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.chartSeriesPointLabelOptions = { propertyName: 'pointLabelOptions', modelName: 'PointLabelOptions', displayName: 'DashboardWebStringId.Chart.PointLabelOptions', type: point_label_options_1.PointLabelOptions };
exports.chartSeriesSerializationsInfo = [_base_metadata_1.itemType, _base_metadata_1.name, exports.plotOnSecondaryAxis, exports.ignoreEmptyPoints, exports.showPointMarkers, exports.chartSeriesPointLabelOptions];
exports.chartSeriesType = { propertyName: 'containerType', displayName: 'DashboardWebStringId.Chart.SeriesType' };
exports.simpleSeriesType = {
    propertyName: 'seriesType', modelName: '@SeriesType', defaultVal: 'Bar',
    values: {
        'Bar': 'DashboardStringId.SeriesTypeBar',
        'StackedBar': 'DashboardStringId.SeriesTypeStackedBar',
        'FullStackedBar': 'DashboardStringId.SeriesTypeFullStackedBar',
        'Point': 'DashboardStringId.SeriesTypePoint',
        'Line': 'DashboardStringId.SeriesTypeLine',
        'StackedLine': 'DashboardStringId.SeriesTypeStackedLine',
        'FullStackedLine': 'DashboardStringId.SeriesTypeFullStackedLine',
        'StepLine': 'DashboardStringId.SeriesTypeStepLine',
        'Spline': 'DashboardStringId.SeriesTypeSpline',
        'Area': 'DashboardStringId.SeriesTypeArea',
        'StackedArea': 'DashboardStringId.SeriesTypeStackedArea',
        'FullStackedArea': 'DashboardStringId.SeriesTypeFullStackedArea',
        'StepArea': 'DashboardStringId.SeriesTypeStepArea',
        'SplineArea': 'DashboardStringId.SeriesTypeSplineArea',
        'StackedSplineArea': 'DashboardStringId.SeriesTypeStackedSplineArea',
        'FullStackedSplineArea': 'DashboardStringId.SeriesTypeFullStackedSplineArea'
    }
};
exports.rangeSeriesType = {
    propertyName: 'seriesType', modelName: '@SeriesType', defaultVal: 'SideBySideRangeBar',
    values: {
        'SideBySideRangeBar': 'DashboardStringId.SeriesTypeSideBySideRangeBar',
        'RangeArea': 'DashboardStringId.SeriesTypeRangeArea'
    }
};
exports.openHighLowCloseSeriesType = {
    propertyName: 'seriesType', modelName: '@SeriesType', defaultVal: 'CandleStick',
    values: {
        'CandleStick': 'DashboardStringId.SeriesTypeCandleStick',
        'Stock': 'DashboardStringId.SeriesTypeStock'
    }
};
exports.chartSeriesValue = { propertyName: _base_metadata_1.valuePropertyName, modelName: 'Value', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardWebStringId.Chart.Value' };
exports.value1 = { propertyName: '__value1', modelName: 'Value1', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.Value1Caption' };
exports.value2 = { propertyName: '__value2', modelName: 'Value2', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.Value2Caption' };
exports.chartSeriesWeight = { propertyName: _base_metadata_1.weightPropertyName, modelName: 'Weight', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.WeightCaption' };
exports.open = { propertyName: '__open', modelName: 'Open', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.OpenCaption' };
exports.high = { propertyName: '__high', modelName: 'High', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.HighCaption' };
exports.low = { propertyName: '__low', modelName: 'Low', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.LowCaption' };
exports.close = { propertyName: '__close', modelName: 'Close', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.CloseCaption' };
exports.simpleSeriesSerializationsInfo = exports.chartSeriesSerializationsInfo.concat([exports.simpleSeriesType, exports.chartSeriesValue]);
exports.rangeSeriesSerializationsInfo = exports.chartSeriesSerializationsInfo.concat([exports.rangeSeriesType, exports.value1, exports.value2]);
exports.weightedSeriesSerializationsInfo = exports.chartSeriesSerializationsInfo.concat([exports.chartSeriesWeight, exports.chartSeriesValue]);
exports.highLowCloseSeriesSerializationsInfo = exports.chartSeriesSerializationsInfo.concat([exports.high, exports.low, exports.close]);
exports.openHighLowCloseSeriesSerializationsInfo = exports.chartSeriesSerializationsInfo.concat([exports.openHighLowCloseSeriesType, exports.open, exports.high, exports.low, exports.close]);


/***/ }),

/***/ 10054:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pointLabelOptionsSerializationsInfo = exports.contentType = exports.position = exports.showForZeroValues = exports.pointLabelOptionsBaseSerializationsInfo = exports.overlappingMode = exports.pointLabelOrientation = exports.showPointLabels = void 0;
const ko = __webpack_require__(71032);
const enums_1 = __webpack_require__(76114);
const _base_metadata_1 = __webpack_require__(17916);
exports.showPointLabels = { propertyName: 'showPointLabels', modelName: '@Visible', displayName: 'DashboardWebStringId.Chart.ShowPointLablels', defaultVal: false, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.pointLabelOrientation = {
    propertyName: 'orientation', modelName: '@Orientation', displayName: 'DashboardWebStringId.Chart.Orientation', defaultVal: 'Default', simpleFormAdapterItem: 'listEditor',
    values: {
        'Default': 'DashboardWebStringId.Chart.Orientation.Default',
        'RotateRight': 'DashboardWebStringId.Chart.Orientation.RotateRight',
        'RotateLeft': 'DashboardWebStringId.Chart.Orientation.RotateLeft'
    }
};
exports.overlappingMode = {
    propertyName: 'overlappingMode', modelName: '@OverlappingMode', displayName: 'DashboardWebStringId.Chart.OverlappingMode', defaultVal: 'Hide', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Hide': 'DashboardWebStringId.Chart.OverlappingMode.Hide',
        'None': 'DashboardWebStringId.Chart.OverlappingMode.None'
    }
};
exports.pointLabelOptionsBaseSerializationsInfo = [exports.showPointLabels, exports.pointLabelOrientation, exports.overlappingMode];
exports.showForZeroValues = { propertyName: 'showForZeroValues', modelName: '@ShowForZeroValues', displayName: 'DashboardWebStringId.Chart.ShowZeroValues', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.position = {
    propertyName: 'position', modelName: '@Position', displayName: 'DashboardWebStringId.Chart.Position', defaultVal: 'Outside', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Outside': 'DashboardWebStringId.Chart.Position.Outside',
        'Inside': 'DashboardWebStringId.Chart.Position.Inside'
    }
};
exports.contentType = {
    propertyName: 'contentType', modelName: '@ContentType', displayName: 'DashboardWebStringId.Chart.Content', defaultVal: 'None',
    from: st => ko.observable(enums_1.parsePointLabelContentType(st)), toJsonObject: enums_1.serializePointLabelContentType
};
exports.pointLabelOptionsSerializationsInfo = exports.pointLabelOptionsBaseSerializationsInfo.concat([exports.showForZeroValues, exports.position, exports.contentType]);


/***/ }),

/***/ 41435:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PointLabelOptions = exports.PointLabelOptionsBase = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _point_label_options_1 = __webpack_require__(10054);
class PointLabelOptionsBase extends serializable_model_1.SerializableModel {
    constructor(JSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(JSON, serializer);
    }
    getInfo() {
        return _point_label_options_1.pointLabelOptionsBaseSerializationsInfo;
    }
    grabFrom(options) {
        this.showPointLabels(options.showPointLabels());
        this.orientation(options.orientation());
        this.overlappingMode(options.overlappingMode());
    }
}
exports.PointLabelOptionsBase = PointLabelOptionsBase;
class PointLabelOptions extends PointLabelOptionsBase {
    constructor(JSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(JSON, serializer);
    }
    getInfo() {
        return _point_label_options_1.pointLabelOptionsSerializationsInfo;
    }
    grabFrom(options) {
        super.grabFrom(options);
        this.showForZeroValues(options.showForZeroValues());
        this.position(options.position());
        this.contentType(options.contentType());
    }
}
exports.PointLabelOptions = PointLabelOptions;


/***/ }),

/***/ 53151:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 91587:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _item_data_axis_point_1 = __webpack_require__(3503);
const special_values_1 = __webpack_require__(91571);
const _formatter_1 = __webpack_require__(93687);
const _jquery_helpers_1 = __webpack_require__(59384);
const color_1 = __webpack_require__(78224);
const custom_properties_metadata_1 = __webpack_require__(16318);
const _custom_properties_utils_1 = __webpack_require__(93629);
const data_item_1 = __webpack_require__(44650);
const _data_item_1 = __webpack_require__(44010);
const custom_item_calc_window_definition_1 = __webpack_require__(20258);
const _knockout_utils_1 = __webpack_require__(4437);
const _utils_1 = __webpack_require__(66358);
const _base_metadata_1 = __webpack_require__(17916);
const data_dashboard_item_1 = __webpack_require__(70355);
const interactivity_options_1 = __webpack_require__(50045);
const _coloring_options_1 = __webpack_require__(73498);
const _custom_item_1 = __webpack_require__(96245);
const slice_table_1 = __webpack_require__(79400);
var COLOR_MEASURE_ID = 'ColorMeasure';
class CustomItem extends data_dashboard_item_1.DataDashboardItem {
    constructor(_meta, modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer, CustomItem._getInfo(_meta, modelJson['@CustomItemType']));
        this._meta = _meta;
        this.sliceTables = ko.observableArray();
        this.interactivityTargets = ko.observableArray();
        this.coloringDimensions = ko.observableArray();
        this.coloringMeasures = ko.observableArray();
        this.customMetadata = {};
        this._getMeasureValue = (dataRow, dataItemUniqueName) => {
            return this._getStorage().getValue(dataRow, dataItemUniqueName);
        };
        this._getMeasureDisplayText = (dataRow, dataItemUniqueName) => {
            var value = this._getMeasureValue(dataRow, dataItemUniqueName);
            if (value === null || value === undefined) {
                return null;
            }
            var metaData = this._dataManager().getMetaData(), formatViewModel = metaData.getMeasureFormat(dataItemUniqueName);
            return this._format(value, formatViewModel);
        };
        this._getDimensionUniqueValue = (dataRow, dataItemUniqueName) => {
            return this._getStorage().getKeyValue(dataRow, dataItemUniqueName);
        };
        this._getDimensionValue = (dataRow, dataItemUniqueName) => {
            var value = this._getSpecialValue(dataRow, dataItemUniqueName, _item_data_axis_point_1.dataStorageSpecialIds.Value);
            if (value === null || value === undefined)
                value = this._getDimensionUniqueValue(dataRow, dataItemUniqueName);
            if (value === special_values_1.specialValues.nullValueGuid)
                value = null;
            return value;
        };
        this._getDimensionDisplayText = (dataRow, dataItemUniqueName) => {
            var displayText = this._getServerText(dataRow, dataItemUniqueName), uniqueValue = this._getDimensionUniqueValue(dataRow, dataItemUniqueName);
            if (uniqueValue === special_values_1.specialValues.olapNullValueGuid)
                return undefined;
            if (displayText == null) {
                var metaData = this._dataManager().getMetaData(), formatViewModel = metaData.getDimensionFormat(dataItemUniqueName);
                displayText = this._format(this._getDimensionValue(dataRow, dataItemUniqueName), formatViewModel);
            }
            return displayText;
        };
        this._isExcludingAllFilter = ko.computed(() => {
            if (this._isMasterFilter() && !!this.customInteractivity && !!this.customInteractivity.applyEmptyFilter) {
                var selectionValues = this._selectionValues();
                return !selectionValues || selectionValues.length === 0;
            }
            return false;
        });
        var modelCustomMetadata = modelJson.CustomMetadata || {};
        this.customBindings.forEach((binding) => {
            let linkPropertyName = CustomItem._getBindingLinkName(binding.propertyName);
            if (binding.array) {
                this[linkPropertyName] = analytics_utils_1.deserializeArray(modelCustomMetadata[binding.propertyName], (item) => new data_item_1.DataItemLink(this, item, serializer));
                this[binding.propertyName] = ko.observableArray([]);
                this._subscribeDataItemLinkArrays({ propertyName: linkPropertyName, modelName: binding.propertyName });
                _knockout_utils_1.subscribeArrayChange(this[linkPropertyName], {
                    added: item => item.itemType(binding.dataItemType)
                });
            }
            else {
                this[binding.propertyName] = ko.observable();
                this._attachDataItem(this, linkPropertyName, new data_item_1.DataItemLink(this, modelCustomMetadata[binding.propertyName], serializer));
            }
            this.customMetadata[linkPropertyName] = this[linkPropertyName];
        });
        this.legacyCustomProperties.forEach(p => {
            this.customMetadata[p.propertyName] = this[p.propertyName] = ko.pureComputed({
                read: () => this.customProperties[p.propertyName](),
                write: (value) => this.customProperties.setValue(p.propertyName, value),
            });
        });
        ko.computed(() => {
            var sliceTables = [];
            var interactivityTargets = [];
            var coloringDimensions = [];
            var coloringMeasures = [];
            this.customBindings.forEach(binding => {
                var prop = this[CustomItem._getBindingLinkName(binding.propertyName)];
                var bindings = (binding.array ? prop() : [prop]).filter(link => !!link.dataItem());
                var sliceTable = sliceTables.filter(sliceTable => sliceTable.name() === binding.slice)[0];
                if (!sliceTable) {
                    sliceTable = new slice_table_1.SliceTable(this, { '@ItemType': 'SliceTable', '@Name': binding.slice });
                    sliceTables.push(sliceTable);
                }
                sliceTable.push(bindings, binding.dataItemType);
                if (binding.enableInteractivity) {
                    interactivityTargets = interactivityTargets.concat(bindings);
                }
                if (binding.enableColoring) {
                    if (binding.dataItemType === 'Dimension') {
                        bindings.forEach(link => data_dashboard_item_1.DataDashboardItem._addColoringMeta([link]));
                        if (binding.array) {
                            prop.subscribe(links => data_dashboard_item_1.DataDashboardItem._addColoringMeta(links));
                        }
                        coloringDimensions = coloringDimensions.concat(bindings);
                    }
                    if (binding.dataItemType === 'Measure') {
                        coloringMeasures = coloringMeasures.concat(bindings);
                    }
                }
            });
            this.sliceTables(sliceTables);
            this.interactivityTargets(interactivityTargets);
            this.coloringDimensions(coloringDimensions);
            this.coloringMeasures(coloringMeasures);
        });
        if (!this.customBindings.length) {
            this._supportedUIStates(['error']);
        }
    }
    static getPropertyInfo(p) {
        return _jquery_helpers_1.deepExtend({ modelName: '@' + p.propertyName, category: _base_metadata_1.PropertyCategory.ViewModel }, p);
    }
    static _getBindingLinkName(propertyName) {
        return '__' + propertyName;
    }
    static _getSerializationsInfo(bindings) {
        return (bindings || []).map(binding => {
            return {
                propertyName: CustomItem._getBindingLinkName(binding.propertyName),
                modelName: binding.propertyName,
                array: binding.array,
                info: !binding.array ? _data_item_1.dataItemLinkSerializationsInfo : undefined
            };
        });
    }
    static _hasInteractivityTargets(meta) {
        var bindings = (meta && meta['bindings']) || [];
        return bindings.some(binding => binding.enableInteractivity);
    }
    static _hasColoringDimensions(bindings) {
        return bindings.some(binding => binding.enableColoring && binding.dataItemType === 'Dimension');
    }
    static _hasColoringMeasures(bindings) {
        return bindings.some(binding => binding.enableColoring && binding.dataItemType === 'Measure');
    }
    static _isFilterAllowed(meta) {
        var interactivity = !!meta && meta['interactivity'];
        return !!interactivity && interactivity.filter && CustomItem._hasInteractivityTargets(meta);
    }
    static _isDrillDownAllowed(meta) {
        var interactivity = !!meta && meta['interactivity'];
        return !!interactivity && interactivity.drillDown && CustomItem._hasInteractivityTargets(meta);
    }
    static _getInfo(meta, customItemType) {
        if (!meta) {
            const staticCustomPropertiesInfo = CustomItem._getCustomPropertiesSerializationInfo(customItemType, []);
            return _custom_item_1.customDashboardItemSerializationsInfo.concat([staticCustomPropertiesInfo]);
        }
        const dynamicInfo = [];
        const bindings = (meta && meta.bindings) || [];
        const isFilterAllowed = CustomItem._isFilterAllowed(meta);
        const isDrillDownAllowed = CustomItem._isDrillDownAllowed(meta);
        const bindingsInfo = CustomItem._getSerializationsInfo(bindings);
        const propertiesMetadata = ((meta && meta.properties) || [])
            .map(p => ({
            ownerType: CustomItem,
            customItemType: customItemType,
            propertyName: p.propertyName,
            defaultValue: p.defaultVal,
        }))
            .concat((meta && meta.customProperties))
            .filter(cp => !!cp);
        const customProperties = CustomItem._getCustomPropertiesSerializationInfo(customItemType, propertiesMetadata);
        if (isFilterAllowed && isDrillDownAllowed) {
            dynamicInfo.push(interactivity_options_1._dashboardItemInteractivityOptionsMeta);
        }
        else if (isFilterAllowed) {
            dynamicInfo.push(interactivity_options_1._masterFilterInteractivityOptionsMeta);
        }
        else if (isDrillDownAllowed) {
            dynamicInfo.push(interactivity_options_1._drillDownInteractivityOptionsMeta);
        }
        else {
            dynamicInfo.push(interactivity_options_1._baseInteractivityOptionsMeta);
        }
        var hasColoringDimensions = CustomItem._hasColoringDimensions(bindings);
        if (hasColoringDimensions) {
            dynamicInfo.push(_custom_item_1.coloringDimensions);
        }
        var hasColoringMeasures = CustomItem._hasColoringMeasures(bindings);
        if (hasColoringMeasures) {
            dynamicInfo.push(_custom_item_1.coloringMeasures);
        }
        if (hasColoringDimensions || hasColoringMeasures) {
            dynamicInfo.push(_coloring_options_1.coloringOptions);
        }
        return _custom_item_1.customDashboardItemSerializationsInfo
            .concat([{ propertyName: 'customMetadata', modelName: 'CustomMetadata', info: bindingsInfo }])
            .concat(dynamicInfo)
            .concat(customProperties);
    }
    _clearBindings() {
        super._clearBindings();
        this.customBindings.forEach(binding => {
            if (binding.array) {
                this[CustomItem._getBindingLinkName(binding.propertyName)].removeAll();
            }
        });
    }
    getBindingValue(propertyName, index) {
        var binding = ko.unwrap(this[CustomItem._getBindingLinkName(propertyName)]);
        var bindingValues = undefined;
        var wrapBindingValue = (binding) => {
            return !binding.dataItem() ? undefined : {
                displayName: () => this._getDataItemDisplayName(binding.dataItem()),
                uniqueName: () => binding.uniqueName()
            };
        };
        if (Array.isArray(binding)) {
            bindingValues = index != undefined ? [wrapBindingValue(binding[index])] : binding.map(b => wrapBindingValue(b));
        }
        else {
            bindingValues = [wrapBindingValue(binding)];
        }
        return bindingValues.filter(b => b !== undefined);
    }
    iterateData(action, sliceTableName = null) {
        var slice = this.getSlice(sliceTableName);
        if (!slice)
            return;
        var keyIds = slice.getKeyIds() || [], valueIds = slice.getValueIds() || [], processDataRow = (dataRow, propertyName, measureAction, dimensionAction) => {
            var binding = this.customBindings.filter(b => b.propertyName === propertyName)[0], result = [];
            if (!!binding) {
                let property = this[CustomItem._getBindingLinkName(propertyName)];
                (binding.array ? property() : [property]).forEach(item => {
                    var uniqueName = item.uniqueName();
                    if (keyIds.indexOf(uniqueName) != -1)
                        result.push(dimensionAction(dataRow, uniqueName));
                    if (valueIds.indexOf(uniqueName) != -1)
                        result.push(measureAction(dataRow, uniqueName));
                });
            }
            return result;
        };
        slice.forEach(dataRow => {
            action({
                getColor: (measureBindingName) => {
                    if (!measureBindingName) {
                        return [this._getColor(dataRow, keyIds, COLOR_MEASURE_ID)];
                    }
                    else {
                        return processDataRow(dataRow, measureBindingName, (dataRow, uniqueName) => this._getColor(dataRow, keyIds, this._getColorMeasureId(uniqueName)), (dataRow, uniqueName) => this._getColor(dataRow, keyIds, COLOR_MEASURE_ID));
                    }
                },
                getDisplayText: (property) => {
                    return processDataRow(dataRow, property, this._getMeasureDisplayText, this._getDimensionDisplayText);
                },
                getValue: (property) => {
                    return processDataRow(dataRow, property, this._getMeasureValue, this._getDimensionValue);
                },
                getUniqueValue: (property) => {
                    return processDataRow(dataRow, property, this._getMeasureValue, this._getDimensionUniqueValue);
                }
            });
        });
    }
    _getDefaultItemType() {
        return CustomItem.ItemType;
    }
    _getSliceTable(name) {
        var sliceTables = this.sliceTables();
        if (!!name) {
            return sliceTables.filter(slice => slice.name() === name)[0];
        }
        else {
            return sliceTables.length > 0 ? sliceTables[0] : undefined;
        }
    }
    _getAllSelectionValues(activeDimensions) {
        var sliceTables = this.sliceTables().filter(slice => activeDimensions.every(id => slice.dimensions().map(dim => dim.uniqueName()).indexOf(id) !== -1)), values = [];
        if (sliceTables.length > 0) {
            var slice = this.getSlice(sliceTables[0].name());
            if (!!slice) {
                var keyIds = slice.getKeyIds().filter(id => activeDimensions.indexOf(id) !== -1);
                slice.forEach(dataRow => values.push(keyIds.map(id => slice.getKeyValue(dataRow.rowKey, id))));
            }
        }
        return values;
    }
    getSlice(sliceTableName = null) {
        var dimensions = this._getSliceTable(sliceTableName).dimensions();
        var storage = this._getStorage();
        return storage && storage.getSliceByIds && storage.getSliceByIds(this._getValidIds(dimensions));
    }
    _getStorage() {
        return this._dataManager() && this._dataManager().getDataStorage();
    }
    _getValidIds(dimensionLinks) {
        var excluded = [];
        if (this.isDrillDownAllowed() && this._isDrillDownEnabled() && this.interactivityTargets().every(d => dimensionLinks.filter(dd => d.uniqueName() === dd.uniqueName()).length > 0)) {
            excluded = this.interactivityTargets().slice(this._drillDownValues().length + 1);
        }
        return dimensionLinks.filter(d => excluded.filter(dd => d.uniqueName() === dd.uniqueName()).length == 0).map(d => d.uniqueName());
    }
    _getColor(dataRow, keyIds, colorMeasureId) {
        var coloredDimensionIds = this._coloredDimensions().map(dim => dim.uniqueName()).filter(id => keyIds.indexOf(id) != -1), sliceKey = [];
        if (coloredDimensionIds.length > 0) {
            var lastColored = coloredDimensionIds[coloredDimensionIds.length - 1];
            for (var i = 0; i < keyIds.length; i++) {
                var currentId = keyIds[i];
                sliceKey.push(currentId);
                if (currentId == lastColored)
                    break;
            }
        }
        var colorValue = this._getValueBySliceKey(dataRow, sliceKey, colorMeasureId);
        if (colorValue)
            return color_1.Color.toHex(colorValue);
        return null;
    }
    _getColorMeasureId(uniqueName) {
        if (this.coloringOptions && this._coloredByMeasures()) {
            let metaData = this._dataManager().getMetaData();
            let colorMeasureDescriptors = metaData.getColorMeasures().filter(mi => mi.dataItemId === uniqueName);
            if (colorMeasureDescriptors && colorMeasureDescriptors.length > 0)
                return colorMeasureDescriptors[0].id;
        }
        return COLOR_MEASURE_ID;
    }
    _format(value, formatViewModel) {
        return !!formatViewModel ? _formatter_1.format(value, formatViewModel) : value.toString();
    }
    _getServerText(dataRow, dataItemUniqueName) {
        return this._getSpecialValue(dataRow, dataItemUniqueName, _item_data_axis_point_1.dataStorageSpecialIds.DisplayText);
    }
    _getSpecialValue(dataRow, dataItemUniqueName, specialId) {
        return this._getValueBySliceKey(dataRow, [dataItemUniqueName], specialId);
    }
    _getValueBySliceKey(dataRow, sliceKey, valueId) {
        var storage = this._getStorage(), metaDataSliceKey = storage.getSliceKey(sliceKey);
        if (metaDataSliceKey < 0)
            return null;
        var metaDataRowKey = storage.findDataRowKey(metaDataSliceKey, dataRow);
        return storage.getValue(metaDataRowKey, valueId);
    }
    get customBindings() {
        return (this._meta && this._meta.bindings) || [];
    }
    get legacyCustomProperties() {
        return (this._meta && this._meta.properties) || [];
    }
    get customInteractivity() {
        return !!this._meta && this._meta.interactivity;
    }
    get _optionsPanelSections() {
        return !!this._meta && this._meta.optionsPanelSections;
    }
    _getMasterFilterMode() {
        return this.interactivityOptions instanceof interactivity_options_1.DashboardItemMasterFilterInteractivityOptions ? this.interactivityOptions.masterFilterMode() : 'None';
    }
    _getDrillDownEnabled() {
        return this.interactivityOptions instanceof interactivity_options_1.DashboardItemInteractivityOptions && this.interactivityOptions.isDrillDownEnabled();
    }
    _getIgnoreMasterFilter() { return !!this.interactivityOptions && this.interactivityOptions.ignoreMasterFilters(); }
    _getInteractivityDimensionLinks() { return this.interactivityTargets(); }
    _getIsVisualInteractivitySupported() { return this.isDrillDownAllowed() || this.isFilterAllowed(); }
    isDrillDownAllowed() {
        return CustomItem._isDrillDownAllowed(this._meta);
    }
    isFilterAllowed() {
        return CustomItem._isFilterAllowed(this._meta);
    }
    _isInteractivityAllowed() {
        return this.isDrillDownAllowed() || this.isFilterAllowed();
    }
    _getCanColorByMeasures() { return CustomItem._hasColoringMeasures(this.customBindings); }
    _getCanColorByDimensions() { return CustomItem._hasColoringDimensions(this.customBindings); }
    _getColorizableDataItemsInfo() {
        return this.customBindings.filter(binding => binding.enableColoring && binding.dataItemType === 'Dimension').map(binding => {
            var prop = this[CustomItem._getBindingLinkName(binding.propertyName)];
            return {
                items: binding.array ? prop() : [prop],
                prefixId: binding.displayName
            };
        });
    }
    _getDefaultCalculationWindowDefinition() {
        return new custom_item_calc_window_definition_1.CustomItemWindowDefinition();
    }
    getInfo() {
        return CustomItem._getInfo(this._meta, this.customItemType());
    }
    _getInfoCore() {
        return null;
    }
    static _getCustomPropertiesSerializationInfo(customItemType, dynamicCustomPropertiesMetadata) {
        const filterPredicate = cp => cp.ownerType === CustomItem && cp.customItemType === customItemType || CustomItem.prototype instanceof cp.ownerType;
        const filteredCustomProperties = custom_properties_metadata_1._customPropertiesMeta
            .filter(filterPredicate)
            .concat(dynamicCustomPropertiesMetadata);
        return _custom_properties_utils_1._getCustomPropertiesSerializationInfoCore(filteredCustomProperties);
    }
}
CustomItem.ItemType = 'CustomItem';
__decorate([
    _utils_1.collectionItemType('Dimension')
], CustomItem.prototype, "interactivityTargets", void 0);
__decorate([
    _utils_1.collectionItemType('Dimension')
], CustomItem.prototype, "coloringDimensions", void 0);
__decorate([
    _utils_1.collectionItemType('Measure')
], CustomItem.prototype, "coloringMeasures", void 0);
exports.CustomItem = CustomItem;


/***/ }),

/***/ 8748:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 30945:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 96245:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.customDashboardItemSerializationsInfo = exports.coloringMeasures = exports.coloringDimensions = exports.interactivityTargets = exports.sliceTables = exports.customItemType = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _data_dashboard_item_1 = __webpack_require__(66302);
exports.customItemType = { propertyName: 'customItemType', modelName: '@CustomItemType' };
exports.sliceTables = { propertyName: 'sliceTables', modelName: 'SliceTables', array: true, category: _base_metadata_1.PropertyCategory.Data };
exports.interactivityTargets = { propertyName: 'interactivityTargets', modelName: 'InteractivityTargets', array: true };
exports.coloringDimensions = { propertyName: 'coloringDimensions', modelName: 'ColoringDimensions', array: true };
exports.coloringMeasures = { propertyName: 'coloringMeasures', modelName: 'ColoringMeasures', array: true };
exports.customDashboardItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([exports.customItemType, exports.sliceTables, exports.interactivityTargets]);


/***/ }),

/***/ 31132:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sliceTableSerializationsInfo = exports.sliceTableName = exports.measures = exports.dimensions = void 0;
exports.dimensions = { propertyName: 'dimensions', modelName: 'Dimensions', displayName: 'DashboardStringId.DescriptionDimensions', array: true };
exports.measures = { propertyName: 'measures', modelName: 'Measures', array: true };
exports.sliceTableName = { propertyName: 'name', modelName: '@Name', simpleFormAdapterItem: 'textBoxEditor' };
exports.sliceTableSerializationsInfo = [exports.dimensions, exports.measures, exports.sliceTableName];


/***/ }),

/***/ 95545:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 79400:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SliceTable = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const data_item_1 = __webpack_require__(44650);
const _utils_1 = __webpack_require__(66358);
const serializable_model_1 = __webpack_require__(29591);
const _slice_table_1 = __webpack_require__(31132);
class SliceTable extends serializable_model_1.SerializableModel {
    constructor(_dataItemProvider, modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this._dataItemProvider = _dataItemProvider;
        this.dimensions = analytics_utils_1.deserializeArray(modelJson.Dimensions, (item) => new data_item_1.DataItemLink(_dataItemProvider, item, serializer));
        this.measures = analytics_utils_1.deserializeArray(modelJson.Measures, (item) => new data_item_1.DataItemLink(_dataItemProvider, item, serializer));
    }
    getInfo() {
        return _slice_table_1.sliceTableSerializationsInfo;
    }
    push(bindings, dataItemType) {
        var targetArray = dataItemType === 'Dimension' ? this.dimensions : this.measures;
        targetArray.push.apply(targetArray, bindings.map(link => data_item_1.DataItemLink.create(this._dataItemProvider, link)));
    }
}
__decorate([
    _utils_1.collectionItemType('Dimension')
], SliceTable.prototype, "dimensions", void 0);
__decorate([
    _utils_1.collectionItemType('Measure')
], SliceTable.prototype, "measures", void 0);
exports.SliceTable = SliceTable;


/***/ }),

/***/ 5815:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _common_1 = __webpack_require__(29009);
const _jquery_helpers_1 = __webpack_require__(59384);
const _custom_properties_utils_1 = __webpack_require__(93629);
const _base_metadata_1 = __webpack_require__(17916);
const serializable_model_1 = __webpack_require__(29591);
const _interactivity_options_1 = __webpack_require__(97492);
const _pane_content_holder_1 = __webpack_require__(2803);
class DashboardItem extends serializable_model_1.TypedSerializableModel {
    constructor(dashboardItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer(), info = undefined) {
        super(dashboardItemJSON, serializer, info);
        this._useNeutralFilterMode = ko.observable(false);
        this._uiState = ko.observable('live');
        this._errorState = ko.observable(null);
        this._viewerItemCreated = ko.observable(false);
        this._paneContentHolder = new _pane_content_holder_1.PaneContentHolder();
        this._allowMultiselection = ko.observable(false);
        this._serverContent = ko.observable(null);
        this._actions = ko.computed(() => []);
        this._state = ko.computed(() => null);
        this._dataQueryParams = ko.computed(() => null);
        ko.computed(() => {
            var errorState = this._errorState(), valid = this._paneContentHolder.valid();
            return valid && !errorState;
        }).subscribe(valid => {
            if (valid) {
                var content = _jquery_helpers_1.deepExtend({}, this._paneContentHolder.getContent(_base_metadata_1.PropertyCategory.Data) || {});
                this._updateContentViewModel(content);
                this._updateContentData(content);
                this._extendContentState(content);
                this._serverContent(content);
            }
            else {
                this._serverContent(null);
            }
        });
    }
    static _getCommonItemType(itemType) {
        var commonItemType = itemType.toUpperCase();
        if (commonItemType === 'TEXTBOX') {
            return 'TEXT';
        }
        return commonItemType;
    }
    getUniqueNamePrefix() {
        return super._getUniqueNamePrefix() + 'DashboardItem';
    }
    get _caption() {
        var name = this.name(), layerName = '';
        if (this._getLayersCount() > 0) {
            layerName = this._getLayerName();
            name += !!name && !!layerName ? ' - ' : '';
        }
        return name + layerName;
    }
    _isInteractivityAllowed() {
        return !!this[_interactivity_options_1.commonInteractivityOptions.propertyName];
    }
    _getLayersCount() {
        return 0;
    }
    _getLayerName() {
        return '';
    }
    _updateContentViewModel(content) {
        content.CaptionViewModel = content.CaptionViewModel || {};
        content.CaptionViewModel.Caption = this.name();
        content.CaptionViewModel.Text = this.name();
        content.CaptionViewModel.ShowCaption = this.showCaption();
        content.ViewModel = content.ViewModel || {};
        content.ViewModel.Caption = this.name();
        content.ViewModel.ShowCaption = this.showCaption();
        content.ParentContainer = this.parentContainer();
        content.forceUpdateViewModel = this._paneContentHolder.lastChangeReason === _base_metadata_1.PropertyCategory.ViewModel;
    }
    _updateContentData(content) {
    }
    _updateDataQueryParams(params) {
    }
    _validateSelectionByData(selection) {
    }
    _extendContentState(content) {
    }
    _getDisplayFilterValues(limitCount) {
        return undefined;
    }
    _getDisplayFilterValuesExternal() {
    }
    _getServerContent() {
        let content = this._serverContent();
        var contentCopy = content ? _jquery_helpers_1.deepExtend({}, content) : undefined;
        if (contentCopy) {
            this._extendContentState(contentCopy);
        }
        return contentCopy;
    }
    _getFullServerContent() {
        let serverContent = this._getServerContent();
        return !!serverContent ? Object.assign(Object.assign({}, serverContent), { ContentType: _common_1.contentType.fullContent }) : serverContent;
    }
    _subcribeServerContent(handler) {
        return this._serverContent.subscribe(() => {
            handler(this._getServerContent());
        });
    }
    _getContentCategories() {
        return [_base_metadata_1.PropertyCategory.Initialize];
    }
    _getDataQueryParams() {
        var params = this._dataQueryParams.peek();
        this._updateDataQueryParams(params);
        return params || {};
    }
    _subcribeDataQueryParams(handler) {
        return this._dataQueryParams.subscribe(() => handler(this._getDataQueryParams()));
    }
    _getExportingSelection() {
    }
    _setState(parameter) {
    }
    getInfo() {
        return this._getInfoCore().concat(_custom_properties_utils_1.getCustomPropertiesSerializationInfo(this));
    }
}
exports.DashboardItem = DashboardItem;


/***/ }),

/***/ 70355:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataDashboardItem = void 0;
const analytics_criteria_1 = __webpack_require__(16835);
const analytics_utils_1 = __webpack_require__(25733);
const analytics_widgets_internal_1 = __webpack_require__(86092);
const ko = __webpack_require__(71032);
const _item_data_axis_builder_1 = __webpack_require__(78074);
const _item_data_axis_helper_1 = __webpack_require__(59385);
const _item_data_manager_1 = __webpack_require__(40552);
const item_data_axis_names_1 = __webpack_require__(51101);
const _item_data_tuple_1 = __webpack_require__(60367);
const _default_1 = __webpack_require__(65855);
const special_values_1 = __webpack_require__(91571);
const _common_1 = __webpack_require__(29009);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const color_scheme_definition_1 = __webpack_require__(938);
const color_scheme_entry_1 = __webpack_require__(68800);
const dashboard_state_1 = __webpack_require__(51372);
const data_item_1 = __webpack_require__(44650);
const dimension_1 = __webpack_require__(48336);
const measure_1 = __webpack_require__(17012);
const _dimension_1 = __webpack_require__(47557);
const _measure_1 = __webpack_require__(72150);
const specific_calc_window_definition_1 = __webpack_require__(31615);
const _dimension_filter_values_1 = __webpack_require__(66637);
const _data_field_1 = __webpack_require__(68951);
const card_item_delta_format_rule_1 = __webpack_require__(50075);
const card_item_format_rule_1 = __webpack_require__(22233);
const chart_item_format_rule_1 = __webpack_require__(3267);
const grid_item_format_rule_1 = __webpack_require__(39430);
const pivot_item_format_rule_1 = __webpack_require__(40014);
const scatter_chart_item_format_rule_1 = __webpack_require__(22149);
const _array_utils_1 = __webpack_require__(60618);
const _dashboard_component_name_generator_1 = __webpack_require__(9684);
const _date_utils_1 = __webpack_require__(76900);
const _expanding_manager_1 = __webpack_require__(81638);
const _helper_classes_1 = __webpack_require__(8384);
const _knockout_utils_1 = __webpack_require__(4437);
const _obsolete_dashboard_state_1 = __webpack_require__(12784);
const _utils_2 = __webpack_require__(66358);
const dashboard_item_1 = __webpack_require__(5815);
const _data_dashboard_item_1 = __webpack_require__(66302);
const _limit_data_state_1 = __webpack_require__(54159);
class DataDashboardItem extends dashboard_item_1.DashboardItem {
    constructor(dashboardItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer(), info = undefined) {
        super(dashboardItemJSON, serializer, info);
        this.hiddenDimensions = ko.observableArray([]);
        this.hiddenMeasures = ko.observableArray([]);
        this.colorScheme = ko.observableArray();
        this._masterFilterMode = ko.computed(() => { return this._getMasterFilterMode(); });
        this._isSingleMasterFilter = ko.computed(() => { return this._masterFilterMode() === 'Single'; });
        this._isMultipleMasterFilter = ko.computed(() => { return this._masterFilterMode() === 'Multiple'; });
        this._isDrillDownEnabled = ko.computed(() => { return this._getDrillDownEnabled(); });
        this._isIgnoreMasterFilter = ko.computed(() => { return this._getIgnoreMasterFilter(); });
        this._isMasterFilter = ko.computed(() => { return this._getIsMasterFilter(); });
        this._isVisualInteractivitySupported = ko.computed(() => { return this._getIsVisualInteractivitySupported(); });
        this._clearMasterFilterSupported = ko.computed(() => { return this._getClearMasterFilterSupported(); });
        this._fullRange = ko.observable();
        this._selectedElementIndex = ko.observable();
        this._beforeMasterFilterSetByUserInteraction = null;
        this._afterMasterFilterSetByUserInteraction = null;
        this._drillDownChangedByUserInteraction = null;
        this._masterFilterItems = ko.observable([]);
        this._dataManager = ko.observable();
        this._drillDownValues = ko.observableArray([]);
        this._clientState = ko.observable();
        this._dataRequestArgs = ko.observable();
        this._expandingManager = new _expanding_manager_1.ExpandingManager();
        this._selectionValues = ko.observable();
        this._supportedUIStates = ko.observable(['error', 'empty', 'loading']);
        this._limitDataState = new _limit_data_state_1.LimitDataState();
        this._isExcludingAllFilter = ko.computed(() => false);
        this._processItemSelectionChange = (itemElement, mode, selection) => {
            if (mode === _common_1.viewerActions.setMasterFilter || mode === _common_1.viewerActions.setMultipleValuesMasterFilter) {
                this._beforeMasterFilterSetByUserInteraction && this._beforeMasterFilterSetByUserInteraction();
                var itemState = _jquery_helpers_1.deepExtend({}, this._state());
                itemState = this._removeSelectionFromState(itemState);
                itemState = this._setSelectionToState(itemState, selection);
                this._setState(itemState);
                this._afterMasterFilterSetByUserInteraction && this._afterMasterFilterSetByUserInteraction();
            }
            else if (mode === _common_1.viewerActions.drillDown) {
                this._drillDownChangedByUserInteraction && this._drillDownChangedByUserInteraction();
                this._drillDownValues.push(selection[0]);
                this._setSelectionData(null);
            }
        };
        this._processItemDrillUp = () => {
            this._drillDownChangedByUserInteraction && this._drillDownChangedByUserInteraction();
            var drillValue = this._drillDownValues.pop();
            this._selectionValues(this._isMasterFilter() ? [[drillValue]] : null);
        };
        this._processItemClearMasterFilter = (itemElement) => {
            this._beforeMasterFilterSetByUserInteraction && this._beforeMasterFilterSetByUserInteraction();
            var itemState = _jquery_helpers_1.deepExtend({}, this._state());
            itemState = this._removeSelectionFromState(itemState);
            this._setState(itemState);
            this._afterMasterFilterSetByUserInteraction && this._afterMasterFilterSetByUserInteraction();
        };
        this._processItemSetPredefinedPeriod = (periodName) => {
            var itemState = _jquery_helpers_1.deepExtend({}, this._state());
            itemState = this._removeSelectionFromState(itemState);
            itemState = this._setPredefinedPeriodToState(itemState, periodName);
            this._setState(itemState);
        };
        this._processContentElementSelection = (itemName, args) => {
            this._selectedElementIndex(args.index);
        };
        this._processDataRequest = () => { };
        this._processItemClientStateUpdate = (itemName, clientState) => {
            this._setClientState(clientState);
        };
        this._processExpandingStateChanged = (expandingParams, dxPivotState) => {
            this._expandingManager.onViewStateChanged(expandingParams, dxPivotState);
        };
        this._processItemExpandingChange = (expandingParams) => {
            this._expandingManager.setExpandingParams(expandingParams);
            this._dataQueryParams.notifySubscribers();
        };
        this.dataItems = analytics_utils_1.deserializeArray(dashboardItemJSON.DataItems, dataItemJSON => DataDashboardItem._createDataItem(dataItemJSON['@ItemType'], dataItemJSON, serializer));
        this.formatRules = analytics_utils_1.deserializeArray(dashboardItemJSON.FormatRules, (rule) => DataDashboardItem._createFormatRule(this, rule, serializer));
        this.__hiddenDimensions = analytics_utils_1.deserializeArray(dashboardItemJSON.HiddenDimensions, (item) => new data_item_1.DataItemLink(this, item, serializer));
        this.__hiddenMeasures = analytics_utils_1.deserializeArray(dashboardItemJSON.HiddenMeasures, (item) => new data_item_1.DataItemLink(this, item, serializer));
        this._subscribeDataItemLinkArrays(_data_dashboard_item_1.hiddenDimensions, _data_dashboard_item_1.hiddenMeasures);
        this.colorScheme(analytics_utils_1.deserializeArray(dashboardItemJSON.ColorScheme, (item) => new color_scheme_entry_1.ColorSchemeEntry(item, serializer, this.componentName(), this.name()))());
        this.__hiddenMeasures.subscribe((links) => {
            this._setLinkCollectionAcceptableShapingType(links, data_item_1.AcceptableShapingType.Hidden);
        });
        this._setLinkCollectionAcceptableShapingType(this.__hiddenMeasures(), data_item_1.AcceptableShapingType.Hidden);
        this._componentNameGenerator = new _dashboard_component_name_generator_1.DashboardUniqueNameGenerator('uniqueName', 0, this.dataItems);
        this._state = ko.computed(() => {
            var state = new dashboard_state_1.ItemState();
            if (this._drillDownValues().length) {
                state.DrillDownValues = _date_utils_1.toStringArray(this._drillDownValues());
            }
            if (this._selectionValues()) {
                state.MasterFilterValues = _date_utils_1.toStringArray(this._selectionValues());
            }
            if (this._selectedElementIndex()) {
                state.SelectedLayerIndex = this._selectedElementIndex();
            }
            return state;
        });
        this._actions = ko.computed({
            read: () => {
                var newValue = [];
                var interactivityDimensionCount = this._interactivityDimensions.length;
                var drillDownValuesCount = this._drillDownValues().length;
                if (this._isMasterFilter() && interactivityDimensionCount > 0) {
                    newValue.push(_common_1.viewerActions.setMasterFilter);
                }
                if (this._isMultipleMasterFilter() && interactivityDimensionCount > 0) {
                    newValue.push(_common_1.viewerActions.setMultipleValuesMasterFilter);
                }
                if (this._isDrillDownEnabled() && (drillDownValuesCount < (interactivityDimensionCount - 1))) {
                    newValue.push(_common_1.viewerActions.drillDown);
                }
                var isPreviousLevelSelection = false;
                if (drillDownValuesCount > 0) {
                    newValue.push(_common_1.viewerActions.drillUp);
                    if (this._selectionValues() && this._selectionValues()[0] && this._selectionValues()[0][0] === this._drillDownValues()[drillDownValuesCount - 1]) {
                        isPreviousLevelSelection = true;
                    }
                }
                if (this._hasSelection() && !isPreviousLevelSelection) {
                    newValue.push(_common_1.viewerActions.clearMasterFilter);
                }
                return newValue;
            },
            deferEvaluation: true
        });
        this._outputFilter = ko.computed(() => {
            if (!this._isMasterFilter())
                return undefined;
            var result = undefined, serializer = new analytics_utils_1.ModelSerializer(), selectionValues = this._selectionValues(), selectionValuesCount = selectionValues ? selectionValues.length : 0, drillDownValuesCount = this._drillDownValues.peek().length, dimensionality = selectionValuesCount > 0 ? selectionValues[0].length : 0, fullRange = this._fullRange();
            if (selectionValuesCount > 0 || drillDownValuesCount > 0) {
                result = {
                    dimensions: this._interactivityDimensions.slice(0, drillDownValuesCount + dimensionality).map(dimension => serializer.serialize(dimension))
                };
                if (result.dimensions.length === 1 && selectionValuesCount === 1 && dimensionality === 2) {
                    result.range = selectionValues[0];
                }
                else {
                    result.values = selectionValuesCount > 0 ? selectionValues.map(arr => this._drillDownValues.peek().concat(arr)) : [this._drillDownValues.peek()];
                }
            }
            if (!result) {
                if (fullRange && fullRange.length && this._interactivityDimensions.length) {
                    result = {
                        dimensions: this._interactivityDimensions.map(dim => serializer.serialize(dim)),
                        range: fullRange
                    };
                }
            }
            if (this._isExcludingAllFilter()) {
                result = result || {};
                result.isExcludingAllFilter = true;
            }
            result = this._performOutputFilterOptimization(result);
            return result;
        });
        this._dataQueryParams = ko.computed(() => {
            var result = {};
            if (this.dataItems().length > 0) {
                var externalFilter = this._masterFilterItems().filter(item => !!item._outputFilter()).map(item => item._outputFilter());
                if (externalFilter.length) {
                    result.Filter = externalFilter.map((f) => {
                        var v = {};
                        if (!!f.dimensions) {
                            v.dimensions = f.dimensions;
                        }
                        if (!!f.values) {
                            v.values = _date_utils_1.toStringArray(f.values);
                        }
                        if (!!f.range) {
                            v.range = _date_utils_1.toStringArray(f.range);
                        }
                        if (f.isExcludingAllFilter != undefined) {
                            v.isExcludingAllFilter = f.isExcludingAllFilter;
                        }
                        return v;
                    });
                }
                if (this._drillDownValues().length) {
                    result.DrillDown = _date_utils_1.toStringArray(this._drillDownValues());
                }
                if (this._dataRequestArgs()) {
                    result.ClientState = this._dataRequestArgs();
                }
                if (this._selectedElementIndex()) {
                    result.SelectedElementIndex = this._selectedElementIndex();
                }
            }
            return result;
        });
        this._colorableItems = ko.observable([this]);
        this._uiState && this._uiState['dispose'] && this._uiState['dispose']();
        this._uiState = ko.computed({
            read: () => {
                var result = 'live', errorState = this._errorState(), previousState = this._uiState(), paneValid = this._paneContentHolder.valid(), viewerItemCreated = this._viewerItemCreated(), hasDataItems = !!this.dataSource.peek() && !!this.dataItems.peek().length;
                if (this._stateSupported('error') && errorState) {
                    result = 'error';
                }
                else if (this._stateSupported('empty') && !hasDataItems) {
                    result = 'empty';
                }
                else if (this._stateSupported('loading') && !paneValid && (!viewerItemCreated || 'empty' === previousState || 'error' === previousState)) {
                    result = 'loading';
                }
                else {
                    result = 'live';
                }
                return result;
            },
            deferEvaluation: true
        });
        ko.computed(() => {
            if (this._selectedElementIndex() >= this._getLayersCount()) {
                this._selectedElementIndex(null);
            }
        });
        ko.computed(() => {
            this.dataItems()
                .map(d => d instanceof measure_1.Measure ? d.windowDefinition.windowDefinition() : null)
                .filter(def => def != null)
                .forEach(def => {
                if (def instanceof specific_calc_window_definition_1.SpecificWindowDefinition) {
                    def.dimensions().forEach(link => link._updateProvider(this));
                }
            });
        });
        ko.computed(() => {
            if (!this.dataSource() || this.dataItems().length === 0) {
                this._dataManager(null);
            }
        });
        _knockout_utils_1.subscribeToArrayItemProperties(this.dataItems, dataItem => {
            if (dataItem instanceof dimension_1.Dimension) {
                return dataItem.dateTimeGroupInterval.subscribe(() => {
                    this._removeFromFilters(dataItem);
                });
            }
            return null;
        });
    }
    static _createDataItem(itemTypeName, dataItemJSON, serializer) {
        var itemType = DataDashboardItem._itemTypesMap[itemTypeName];
        return new itemType(dataItemJSON, serializer);
    }
    static _updateDataItemByField(dataField, newDataItem, summaryInfo) {
        newDataItem.dataMember(dataField.dataMember());
        if (newDataItem instanceof measure_1.Measure) {
            if (!_data_field_1.DataField.isOlap(dataField.dataMember())) {
                if (!!summaryInfo && summaryInfo.oldDataItem instanceof measure_1.Measure) {
                    var avaliableSummaryTypes = DataDashboardItem._getAvaliableSummaryTypeInfo(dataField, summaryInfo.acceptableShapingType, newDataItem);
                    if (avaliableSummaryTypes) {
                        if (Object.keys(avaliableSummaryTypes.values).indexOf(summaryInfo.oldDataItem.summaryType()) !== -1) {
                            newDataItem.summaryType(summaryInfo.oldDataItem.summaryType());
                        }
                        else {
                            newDataItem.summaryType(avaliableSummaryTypes.defaultVal);
                        }
                    }
                }
                else {
                    newDataItem.summaryType(getSummaryType(dataField));
                }
            }
            else if (!!dataField['defaultNumericFormat']) {
                var defaultNumericFormat = dataField['defaultNumericFormat'];
                newDataItem.numericFormat.currencyCultureName(defaultNumericFormat.CurrencyCultureName);
                newDataItem.numericFormat.formatType(defaultNumericFormat.FormatType);
                newDataItem.numericFormat.includeGroupSeparator(defaultNumericFormat.IncludeGroupSeparator);
                newDataItem.numericFormat.precision(defaultNumericFormat.Precision);
                newDataItem.numericFormat.unit(defaultNumericFormat.Unit);
            }
        }
    }
    static _createFormatRule(item, formatRuleJSON, serializer) {
        var typeName = formatRuleJSON['@ItemType'];
        var type = DataDashboardItem._formatRuleTypesMap[typeName];
        return new type(formatRuleJSON, serializer);
    }
    static _getAvaliableSummaryTypeInfo(dataField, acceptableShapingType, dataItem) {
        if (!!dataItem && dataItem instanceof measure_1.Measure && !!dataItem.expression())
            return null;
        if (!_data_field_1.DataField.isOlap(dataField.dataMember()) && !(dataField.isAggregate && dataField.isAggregate())) {
            if (_data_field_1.DataField.isNumeric(dataField)) {
                return _measure_1.summaryTypeNumericToAny;
            }
            else {
                switch (acceptableShapingType) {
                    case data_item_1.AcceptableShapingType.Number:
                        return _measure_1.summaryTypeNonNumericToNumeric;
                    case data_item_1.AcceptableShapingType.Attribute:
                        return _measure_1.summaryTypeAttribute;
                    case data_item_1.AcceptableShapingType.String:
                    case data_item_1.AcceptableShapingType.Hidden:
                        return _measure_1.summaryTypeNonNumericToString;
                }
            }
        }
        return null;
    }
    get _actualSelectionValues() {
        return this._selectionValues;
    }
    get _canColorByMeasures() { return this._getCanColorByMeasures(); }
    get _canColorByDimensions() { return this._getCanColorByDimensions(); }
    get _isLocallyColored() {
        return (this._getAreMeasuresColoredByDefault() || this._getCanColorByDimensions()) && !this._getUseGlobalColors();
    }
    get _isGloballyColored() {
        return (this._getAreMeasuresColoredByDefault() || this._getCanColorByDimensions()) && this._getUseGlobalColors();
    }
    get _interactivityDimensions() {
        return this._getInteractivityDimensionLinks().map(link => link.dataItem()).filter(item => !!item);
    }
    get _dimensions() {
        return this.dataItems && this.dataItems().filter(item => item instanceof dimension_1.Dimension);
    }
    get _measures() {
        return this.dataItems && this.dataItems().filter(item => item instanceof measure_1.Measure);
    }
    get _uniqueDataItems() {
        var uniqueDataItems = [];
        this.dataItems.peek().forEach(dataItem => {
            if (uniqueDataItems.filter(item => item.isDefinitionEquals(dataItem)).length === 0) {
                uniqueDataItems.push(dataItem);
            }
        });
        return uniqueDataItems;
    }
    get _multiData() {
        var dataManager = this._dataManager.peek();
        return dataManager && dataManager.getItemData();
    }
    _removeFromFilters(dataItem) {
        this.filterString(removeDataItemFromCriteria(this.filterString(), dataItem.uniqueName()));
        this.visibleDataFilterString((removeDataItemFromCriteria(this.visibleDataFilterString(), dataItem.uniqueName())));
        this._measures.forEach(measure => {
            measure.filterString(removeDataItemFromCriteria(measure.filterString(), dataItem.uniqueName()));
        });
    }
    _clearBindings() {
        this.dataSource(null);
        this.dataMember(null);
        this.dataItems.removeAll();
        this.__hiddenDimensions.removeAll();
        this.__hiddenMeasures.removeAll();
        this.colorScheme.removeAll();
    }
    _clearInteractivityState() {
        this._selectionValues(null);
        this._drillDownValues([]);
    }
    _isCalculationSupported() {
        return true;
    }
    _isSortingEnabled() {
        return true;
    }
    _isTopNEnabled(dataItem) {
        return this.hiddenDimensions().indexOf(dataItem) == -1;
    }
    _isColoringEnabled(dataItem) {
        if (dataItem instanceof dimension_1.Dimension) {
            if (this._canColorByDimensions) {
                if (this._isHiddenDimension(dataItem) || dataItem.coloringMode() === 'None') {
                    return false;
                }
                if (dataItem.coloringMode() === 'Hue') {
                    return true;
                }
                return this._getIsDimensionColoredByDefault(dataItem);
            }
        }
        else if (dataItem instanceof measure_1.Measure) {
            if (this._canColorByMeasures) {
                if (this._isHiddenMeasure(dataItem)) {
                    return false;
                }
                return this._coloredByMeasures();
            }
            return false;
        }
    }
    _getDataItem(uniqueName) {
        return this.dataItems().filter(item => item.uniqueName() === uniqueName)[0];
    }
    _getFinalDataType(dataItemId) {
        var metaData = this._dataManager() ? this._dataManager().getMetaData() : undefined;
        return !!metaData ? metaData.getFinalDataType(dataItemId) : 'Unknown';
    }
    _createDataItem(dataField, binding) {
        var itemTypeName = binding.dataItemType;
        if (!itemTypeName) {
            itemTypeName = _data_field_1.DataField.isMeasure(dataField) ? 'Measure' : 'Dimension';
        }
        var newDataItem = DataDashboardItem._createDataItem(itemTypeName);
        DataDashboardItem._updateDataItemByField(dataField, newDataItem);
        this.dataItems.push(newDataItem);
        return newDataItem;
    }
    _updateDataItem(dataItem, binding, dataField, acceptableShapingType) {
        _helper_classes_1.Guard.isNotFalsy(dataItem, 'dataItem');
        var itemTypeName = binding.dataItemType || dataItem.itemType();
        var newDataItem = (binding.dataItemType === dataItem.itemType()) ? dataItem : DataDashboardItem._createDataItem(itemTypeName);
        DataDashboardItem._updateDataItemByField(dataField, newDataItem, { oldDataItem: dataItem, acceptableShapingType: acceptableShapingType });
        this._unassignDataItem(dataItem, false);
        if (newDataItem !== dataItem) {
            this._removeDataItemCore(dataItem);
            newDataItem.uniqueName(dataItem.uniqueName());
            this.dataItems.push(newDataItem);
        }
    }
    _removeDataItem(dataItem, skipGroups) {
        this._removeDataItemCore(dataItem);
        this._unassignDataItem(dataItem, skipGroups);
    }
    _attachDataItem(target, propertyName, link) {
        var dataItemLink = !!link ? link : new data_item_1.DataItemLink(this, { '@DefaultId': target[propertyName].uniqueName() });
        target[propertyName] = dataItemLink;
        target[propertyName.substring(2)] = ko.computed({
            read: () => dataItemLink.dataItem(),
            write: (value) => {
                if (!!value) {
                    if (this._getDataItem(value.uniqueName())) {
                        throw Error(`DataItemLink: DataItem ${value.uniqueName()} already exists`);
                    }
                    else {
                        this.dataItems.push(value);
                        dataItemLink.dataItem(value);
                    }
                }
                else {
                    if (dataItemLink.dataItem()) {
                        this._removeDataItem(dataItemLink.dataItem());
                        dataItemLink.dataItem(null);
                    }
                }
            }
        });
    }
    _subscribeDataItemLinkArrays(...propertyInfos) {
        propertyInfos.forEach(propertyInfo => {
            var property = this[propertyInfo.propertyName];
            var realProperty = this[propertyInfo.propertyName.substring(2)];
            ko.computed(() => {
                property().filter(value => !value.dataItem())
                    .forEach(value => property.remove(value));
            });
            ko.computed(() => {
                var linkedDataItems = property().map(link => link.dataItem()).filter(dataItem => !!dataItem);
                realProperty.peek().filter(dataItem => linkedDataItems.indexOf(dataItem) === -1)
                    .forEach(itemToRemove => realProperty.remove(itemToRemove));
                linkedDataItems.filter(dataItem => realProperty.peek().indexOf(dataItem) === -1)
                    .forEach(itemToAdd => realProperty.splice(linkedDataItems.indexOf(itemToAdd), 0, itemToAdd));
            });
            _knockout_utils_1.subscribeArrayChange(realProperty, {
                added: (dimension, index) => {
                    if (!property().some(link => link.dataItem() === dimension)) {
                        this.dataItems.push(dimension);
                        var link = new data_item_1.DataItemLink(this);
                        link.dataItem(dimension);
                        property.splice(index, 0, link);
                    }
                },
                deleted: (dimension) => {
                    if (property().some(link => link.dataItem() === dimension)) {
                        this.dataItems.remove(dimension);
                        property.remove(link => link.dataItem() === dimension);
                    }
                }
            });
        });
    }
    _getMasterFilterMode() { return 'None'; }
    _getDrillDownEnabled() { return false; }
    _getIgnoreMasterFilter() { return false; }
    _getClearMasterFilterSupported() { return this._isMultipleMasterFilter(); }
    _getIsMasterFilter() { return this._isSingleMasterFilter() || this._isMultipleMasterFilter(); }
    _getInteractivityDimensionLinks() { return []; }
    _getIsVisualInteractivitySupported() { return true; }
    _getCanColorByMeasures() { return false; }
    _getCanColorByDimensions() { return false; }
    _getAreMeasuresColoredByDefault() { return false; }
    _getIsDimensionColoredByDefault(dimension) { return false; }
    _coloredDimensions() {
        return this._dimensions.filter(item => this._isColoringEnabled(item));
    }
    _coloredByMeasures() {
        if (this.coloringOptions.measuresColoringMode() === 'Hue') {
            return true;
        }
        if (this.coloringOptions.measuresColoringMode() === 'None') {
            return false;
        }
        return this._getAreMeasuresColoredByDefault();
    }
    _getUseGlobalColors() { return this.coloringOptions && this.coloringOptions.useGlobalColors(); }
    _getValidatedSelection(selectionValues) {
        return selectionValues ? selectionValues.map(value => { return value.map(_date_utils_1.tryConvertToDateTime); }) : selectionValues;
    }
    _getClearMasterFilterState() {
        if (this._clearMasterFilterSupported()) {
            if (this._useNeutralFilterMode() && this._isSingleMasterFilter() && !this._allowAllValue()) {
                return 'Disabled';
            }
            return this._actions().indexOf(_common_1.viewerActions.clearMasterFilter) !== -1 ? 'Enabled' : 'Hidden';
        }
        return 'Hidden';
    }
    _allowAllValue() { return false; }
    _validateSelectionByData(selection) {
        var activeDimensions = this._interactivityDimensions.slice(this._drillDownValues().length).map(d => d.uniqueName());
        if (this._isSingleMasterFilter() && activeDimensions.length > 0) {
            var allSelection = this._getAllSelectionValues(activeDimensions);
            if (!selection || (!this._useNeutralFilterMode() && !_utils_1.arrayContains(allSelection, selection[0]))) {
                this._setSelectionData(allSelection.length > 0 ? [allSelection[0]] : null);
            }
        }
    }
    _updateContentData(content) {
        super._updateContentData(content);
        if (this.dataItems().length > 0 || !this._stateSupported('empty')) {
            this._updateDataManager(content);
        }
        if (content.ItemData && content.ItemData.Reduced) {
            this._limitDataState.setReduced();
        }
        this._validateSelectionByData(this._actualSelectionValues());
        let drillDownValues = this._getDisplayDrillDownValues();
        _jquery_helpers_1.deepExtend(content, {
            multiData: this._multiData,
            DrillDownValues: !!drillDownValues ? drillDownValues.map(fv => fv.Values).reduce((v1, v2) => v1.concat(v2)) : undefined,
            DrillDownUniqueValues: this._drillDownValues.peek().length > 0 ? this._drillDownValues.peek() : undefined,
            LimitDataState: this._limitDataState.getViewModel()
        });
    }
    _extendContentState(content) {
        super._extendContentState(content);
        content.SelectedValues = this._actualSelectionValues.peek();
    }
    _updateDataManager(content) {
        let itemDataDTO = content.ItemData, contentType = content.ContentType;
        if (itemDataDTO) {
            _date_utils_1.patchDateTime(itemDataDTO.DataStorageDTO);
        }
        if (contentType === _common_1.contentType.partialDataSource && this._dataManager() && itemDataDTO) {
            this._updateDataManagerByPartialDataSource(content, itemDataDTO);
        }
        else {
            if ((contentType === _common_1.contentType.fullContent || contentType === _common_1.contentType.completeDataSource) && itemDataDTO && itemDataDTO.MetaData) {
                var dataManager = new _item_data_manager_1.itemDataManager();
                dataManager.initialize(itemDataDTO);
                this._dataManager(dataManager);
            }
            if (contentType !== _common_1.contentType.completeDataSource) {
            }
        }
        this._expandingManager.resetExpandingParams();
    }
    _updateDataManagerByPartialDataSource(content, itemDataDTO) {
        content.Parameters[0] = !!content.Parameters[0] && content.Parameters[0].map(value => _date_utils_1.tryConvertToDateTime(value));
        this._dataManager().updateExpandedData(itemDataDTO, {
            values: content.Parameters[0],
            pivotArea: content.Parameters[1] ? _item_data_axis_builder_1.pivotAreaNames.columns : _item_data_axis_builder_1.pivotAreaNames.rows
        });
    }
    _getAllSelectionValues(activeDimensions) {
        return !!this._multiData ? this._multiData.getAllSelectionValues(activeDimensions) : [];
    }
    _getPointsByDimension(dimensionId, axisName) {
        if (this._multiData) {
            var axis = this._multiData.getAxis(axisName);
            return axis ? axis.getPointsByDimension(dimensionId) : [];
        }
    }
    _getColorizableDataItemsInfo() {
        return [];
    }
    _getDefaultCalculationWindowDefinition() {
        return undefined;
    }
    _getExportingSelection() {
        return this._selectionValues();
    }
    _getDisplayFilterValues(limitCount) {
        let selection = this._outputFilter(), outFilterValues = [];
        if (selection && selection.dimensions) {
            selection.dimensions.forEach((dimensionDefinition, dimensionIndex) => {
                var dimension = this._dimensions.filter(d => d.uniqueName() === dimensionDefinition['@DefaultId'])[0];
                var filterValues = new _dimension_filter_values_1.DimensionFilterValues(this._getDimensionDisplayName(dimension.uniqueName()));
                var uniqueValues = {};
                for (var valueIndex = 0, valueCount = 0; valueIndex < selection.values.length; valueIndex++) {
                    if (!!limitCount && valueCount >= limitCount) {
                        filterValues.Truncated = true;
                        break;
                    }
                    var value = selection.values[valueIndex][dimensionIndex];
                    if (!uniqueValues[value]) {
                        uniqueValues[value] = value;
                        valueCount++;
                    }
                }
                filterValues.Values = Object.keys(uniqueValues).map(v => this._createFormattableValue(dimension, uniqueValues[v]));
                outFilterValues.push(filterValues);
            });
        }
        return outFilterValues;
    }
    _createFormattableValue(dimension, value) {
        var isOlap = _data_field_1.DataField.isOlap(dimension.dataMember());
        var dimensionId = dimension.uniqueName();
        if (isOlap) {
            return {
                Type: 'Value',
                Value: this._getOlapDimensionDisplayText(value, dimensionId),
                Format: undefined
            };
        }
        else {
            var metaData = this._dataManager() ? this._dataManager().getMetaData() : undefined;
            return {
                Type: 'Value',
                Value: value,
                Format: metaData ? metaData.getDimensionFormat(dimensionId) : undefined
            };
        }
    }
    _getDisplayFilterValuesExternal() {
        var externalFilter = this._masterFilterItems().filter(item => !!item._outputFilter());
        return externalFilter
            .map(item => item._getDisplayFilterValues())
            .filter(arr => arr.length > 0)
            .reduce((acc, items) => acc.concat(items), []);
    }
    _getDisplayDrillDownValues() {
        var drillDownUniqueValues = this._drillDownValues.peek();
        if (!drillDownUniqueValues || drillDownUniqueValues.length == 0)
            return undefined;
        var values = new Array(), metaData = this._dataManager() ? this._dataManager().getMetaData() : undefined;
        drillDownUniqueValues.forEach((value, valueIndex) => {
            var dimension = this._interactivityDimensions[valueIndex];
            var filterValues = new _dimension_filter_values_1.DimensionFilterValues(this._getDimensionDisplayName(dimension.uniqueName()));
            var isOlap = _data_field_1.DataField.isOlap(dimension.dataMember());
            filterValues.Values.push(this._createFormattableValue(dimension, value));
            values.push(filterValues);
        });
        return values;
    }
    _getColoringSignature() {
        return this._getColoringSignatureBase(this._coloredDimensions());
    }
    _getColoringSignatureOnCurrentDrillDownLevel() {
        if (this._isDrillDownEnabled()) {
            var coloredDimensions = [];
            var currentDrillDownDimension = this._interactivityDimensions[this._drillDownValues().length];
            var currentColored = null;
            for (var i = 0; i < this._dimensions.length; i++) {
                var dimension = this._dimensions[i];
                if (this._isColoringEnabled(dimension))
                    currentColored = dimension;
                if (dimension === currentDrillDownDimension && currentColored !== null) {
                    coloredDimensions = [currentColored];
                    break;
                }
            }
            return this._getColoringSignatureBase(coloredDimensions);
        }
        else {
            return this._getColoringSignature();
        }
    }
    _getColoringSignatureBase(coloredDimension) {
        return new color_scheme_definition_1.ColorSchemeDefinition(this.dataSource(), this.dataMember(), coloredDimension.map(dimension => {
            return {
                dataMember: ko.observable(dimension.dataMember()),
                dateTimeGroupInterval: ko.observable(dimension.dateTimeGroupInterval())
            };
        }), this._coloredByMeasures(), this._isGloballyColored ? '' : this.componentName(), this._isGloballyColored ? '' : this.name());
    }
    _isAttribute(dataItem) {
        return false;
    }
    _getItemDataAxis() {
        return item_data_axis_names_1.itemDataAxisNames.defaultAxis;
    }
    _getDataItemContainerDisplayName(dataItemContainer, dataItemDisplayNameGetter = null) {
        var name = dataItemContainer.name && dataItemContainer.name() || null;
        if (name) {
            return name;
        }
        var bindingModel = dataItemContainer._getBindingModel(), separator = ' ' + (dataItemContainer._displayNameSeparator || '-') + ' ';
        name = '';
        bindingModel.forEach((binding) => {
            var dataItemLink = dataItemContainer[binding.propertyName];
            var dataItem = dataItemLink.dataItem && dataItemLink.dataItem();
            if (dataItem && dataItem.dataMember()) {
                if (name) {
                    name = name + separator;
                }
                name = name + (!!dataItemDisplayNameGetter ? dataItemDisplayNameGetter(dataItem) : this._getDataItemDisplayName(dataItem));
            }
        });
        return name;
    }
    _getDataItemDisplayName(dataItem) {
        var uniqueName = dataItem.uniqueName();
        return dataItem instanceof dimension_1.Dimension ? this._getDimensionDisplayName(uniqueName) : this._getMeasureDisplayName(uniqueName);
    }
    _getMeasureDisplayName(uniqueName) {
        var metaData = this._dataManager() ? this._dataManager().getMetaData() : undefined;
        var measure = metaData.getMeasures().filter(m => m.id == uniqueName)[0];
        return !!measure ? measure.name : uniqueName;
    }
    _getDimensionDisplayName(uniqueName) {
        var dimension = undefined;
        var metaData = this._dataManager() ? this._dataManager().getMetaData() : undefined;
        var axes = !!metaData && metaData.getAxisNames() || [];
        axes.every(axisName => {
            var dimensions = metaData.getDimensions(axisName) || [];
            dimension = dimensions.filter(d => d.id == uniqueName)[0];
            return !dimension;
        });
        return !!dimension ? dimension.name : uniqueName;
    }
    _getOlapDimensionDisplayText(uniqueValue, dimensionId) {
        var itemData = this._dataManager() ? this._dataManager().getItemData() : undefined;
        var axes = !!itemData ? itemData.getAxisNames() : [];
        var pt = undefined;
        axes.every(axisName => {
            var axis = itemData.getAxis(axisName);
            pt = axis.getPointByUniqueValueAndDimension(uniqueValue, dimensionId);
            return !pt;
        });
        if (!!pt) {
            return pt.getUniqueValue() === special_values_1.specialValues.olapNullValueGuid ? _default_1.getLocalizationById('DashboardStringId.OlapRaggedHierarchyNoneItemCaption') : pt.getDisplayText();
        }
        else {
            return uniqueValue;
        }
    }
    _cleanDataItemDependencies() {
    }
    _setLinkCollectionAcceptableShapingType(links, type) {
        links.forEach(l => { l._specifics.acceptableShapingType = type; });
    }
    _updateDataQueryParams(params) {
        super._updateDataQueryParams(params);
        if (this._expandingManager.canProvideExpandingState()) {
            params.ExpandingState = this._expandingManager.calculateExpandingState();
        }
    }
    _stateSupported(state) {
        return this._supportedUIStates().indexOf(state) !== -1;
    }
    _isHiddenDimension(dimension) {
        return !!this.__hiddenDimensions().filter(link => link.dataItem() === dimension)[0];
    }
    _isHiddenMeasure(measure) {
        return !!this.__hiddenMeasures().filter(link => link.dataItem() === measure)[0];
    }
    _setSelection(stateSelection) {
        let validatedSelection = this._getValidatedSelection(stateSelection);
        if (this._isSingleMasterFilter()) {
            if ((!validatedSelection || validatedSelection.length === 0) && !this._clearMasterFilterSupported())
                return;
            if (validatedSelection && validatedSelection.length > 1)
                validatedSelection = [validatedSelection[0]];
        }
        this._setSelectionData(validatedSelection);
    }
    _hasSelection() {
        return !!this._selectionValues() && !!this._selectionValues()[0];
    }
    _performOutputFilterOptimization(filter) {
        return filter;
    }
    _setState(parameter) {
        super._setState(parameter);
        var itemState = parameter;
        var obsoleteItemState = parameter;
        let drillDownState = itemState.DrillDownValues || _obsolete_dashboard_state_1.ObsoleteItemState.unwrapDilldownValues(obsoleteItemState.DrillLevels) || [];
        drillDownState = drillDownState.map(value => _date_utils_1.tryConvertToDateTime(value));
        if (!_array_utils_1.arrayEquals(this._drillDownValues(), drillDownState))
            this._drillDownValues(drillDownState);
        let selectionState = itemState.MasterFilterValues || obsoleteItemState.Selection;
        this._setSelection(selectionState);
        let selectedElementIndexState = itemState.SelectedLayerIndex || obsoleteItemState.SelectedElementIndex;
        if (this._selectedElementIndex() !== selectedElementIndexState)
            this._selectedElementIndex(selectedElementIndexState);
    }
    _setClientState(clientState) {
        this._clientState(clientState);
    }
    _setSelectionData(selection, forceSetSelection = false) {
        if (!_array_utils_1.arrayEquals(this._selectionValues(), selection) || forceSetSelection) {
            this._selectionValues(selection);
        }
    }
    _itemInteractivityByColumnAxis() {
        return true;
    }
    _getInteractivityAxisDimensionCount() {
        return this._dimensions.length - this.hiddenDimensions().length;
    }
    _removeSelectionFromState(state) {
        var itemState = _jquery_helpers_1.deepExtend({}, state);
        itemState.MasterFilterValues = undefined;
        return itemState;
    }
    _setSelectionToState(state, selection) {
        var itemState = _jquery_helpers_1.deepExtend({}, state);
        itemState.MasterFilterValues = selection;
        return itemState;
    }
    _setPredefinedPeriodToState(itemState, periodName) {
        return itemState;
    }
    _unassignDataItem(dataItem, skipGroups) {
        this._clearInteractivityState();
        this._removeFromFilters(dataItem);
        if (!skipGroups && dataItem instanceof dimension_1.Dimension && _data_field_1.IsOlapHierarchyField(dataItem)) {
            for (var i = this.dataItems().length - 1; i >= 0; i--) {
                var item = this.dataItems()[i];
                if (item instanceof dimension_1.Dimension && item.groupIndex() == dataItem.groupIndex() && item != dataItem) {
                    this.dataItems.remove(item);
                }
            }
            this._cleanDataItemDependencies();
        }
    }
    _removeDataItemCore(dataItem) {
        if (dataItem instanceof measure_1.Measure) {
            this._dimensions.forEach(dimensionDataItem => {
                var dimension = dimensionDataItem;
                if (dimension.sortMeasure() === dataItem.uniqueName()) {
                    dimension.sortMeasure(undefined);
                }
                if (dimension.topNOptionsMeasureName() === dataItem.uniqueName()) {
                    dimension.topNOptionsMeasureName(undefined);
                }
            });
        }
        this.dataItems.remove(dataItem);
    }
    _getActiveDimensions() {
        var drillDownValuesCount = this._drillDownValues().length;
        if (this._getDrillDownEnabled()) {
            return [this._interactivityDimensions[drillDownValuesCount]];
        }
        else {
            return this._interactivityDimensions;
        }
    }
    _getDimensionIdsByItemName() {
        return this._getActiveDimensions().map(dim => dim.uniqueName());
    }
    _getValues(tuples) {
        return _item_data_axis_helper_1.itemDataAxisHelper.getValuesByTuples(tuples, this._getDimensionIdsByItemName());
    }
    _getAvailableTuples() {
        var that = this, data = that._getItemData(), dimensionIds = that._getDimensionIdsByItemName(), axisName = that._getCurrentAxisNameByItemName();
        return data && data.getAvailableTuples(dimensionIds, axisName);
    }
    _getCurrentAxisNameByItemName() {
        return this._getItemDataAxis();
    }
    _getSelectedValuesByItemName() {
        return this._selectionValues();
    }
    _performSetMasterFilter(values) {
        if (values) {
            if (!Array.isArray(values) || (!(values[0] instanceof _item_data_tuple_1.itemDataTuple) && !Array.isArray(values[0]))) {
                throw new Error('The type of the values parameter is not supported.');
            }
            let arrayValues = values[0] instanceof _item_data_tuple_1.itemDataTuple ? this._getValues(values) : values;
            if (this._isSingleMasterFilter() && arrayValues.length !== 1) {
                throw new Error('Only one filter value is allowed when the Master Filter mode is set to Single.');
            }
            this._processItemSelectionChange('', _common_1.viewerActions.setMasterFilter, arrayValues.map(selectionRow => selectionRow.map(_utils_1.unwrapSpecialNullValue)));
        }
        else {
            throw Error();
        }
    }
    _performClearMasterFilter() {
        this._processItemClearMasterFilter();
    }
    _performDrillDown(values) {
        var realValues = values instanceof _item_data_tuple_1.itemDataTuple ? this._getValues([values]) : [[_utils_1.unwrapSpecialNullValue(values)]];
        this._processItemSelectionChange('', _common_1.viewerActions.drillDown, realValues[0]);
    }
    _performDrillUp() {
        this._processItemDrillUp();
    }
    _getAvailableDrillDownValues(itemName) {
        return (this._getAvailableActions().indexOf(_common_1.viewerActions.drillDown) !== -1) ? this._getAvailableTuples() : null;
    }
    _getCurrentDrillDownValues() {
        var data = this._getItemData(), dimensionIds = this._getDimensionIdsByItemName(), axisName = this._getCurrentAxisNameByItemName();
        return data && data.getCurrentDrillDownValues(dimensionIds, axisName);
    }
    _getAvailableFilterValues(itemName) {
        return (this._getAvailableActions().indexOf(_common_1.viewerActions.setMasterFilter) !== -1 ||
            this._getAvailableActions().indexOf(_common_1.viewerActions.setMultipleValuesMasterFilter) !== -1) ? this._getAvailableTuples() : null;
    }
    _getAvailableActions() {
        return this._actions();
    }
    _getItemData() {
        var dataManager = this._dataManager();
        return dataManager && dataManager.getItemData();
    }
    _getCurrentFilterValues() {
        var that = this, data = that._getItemData(), dimensionIds = that._getDimensionIdsByItemName(), axisName = that._getCurrentAxisNameByItemName(), selectedValues = that._getSelectedValuesByItemName();
        return data && data.getCurrentFilterValues(dimensionIds, axisName, selectedValues);
    }
    _conditionFormattingExpressionEditorFilter(dataItem) {
        return !this.hiddenDimensions().filter(hd => hd.uniqueName() === dataItem.uniqueName())[0];
    }
}
DataDashboardItem._itemTypesMap = {
    Measure: measure_1.Measure,
    Dimension: dimension_1.Dimension
};
DataDashboardItem._formatRuleTypesMap = {
    GridItemFormatRule: grid_item_format_rule_1.GridItemFormatRule,
    PivotItemFormatRule: pivot_item_format_rule_1.PivotItemFormatRule,
    CardItemFormatRule: card_item_format_rule_1.CardItemFormatRule,
    CardItemDeltaFormatRule: card_item_delta_format_rule_1.CardItemDeltaFormatRule,
    ChartItemFormatRule: chart_item_format_rule_1.ChartItemFormatRule,
    ScatterChartItemFormatRule: scatter_chart_item_format_rule_1.ScatterChartItemFormatRule
};
DataDashboardItem._addColoringMeta = (links) => {
    links.forEach((link) => {
        if (!link._specifics.customDataShapingProperties.some(prop => prop.serializationInfo.propertyName === _dimension_1.coloringMode.propertyName)) {
            link._specifics.customDataShapingProperties = link._specifics.customDataShapingProperties.concat([{
                    serializationInfo: _dimension_1.coloringMode
                }]);
        }
    });
};
__decorate([
    _utils_2.collectionItemType('Dimension')
], DataDashboardItem.prototype, "__hiddenDimensions", void 0);
__decorate([
    _utils_2.collectionItemType('Measure')
], DataDashboardItem.prototype, "__hiddenMeasures", void 0);
__decorate([
    _utils_2.collectionItemType('Entry')
], DataDashboardItem.prototype, "colorScheme", void 0);
exports.DataDashboardItem = DataDashboardItem;
function getSummaryType(dataField) {
    if (dataField) {
        switch (dataField.fieldType()) {
            case 'Bool':
            case 'Text':
            case 'DateTime':
                return 'Count';
            case 'Custom':
                if (!dataField.isConvertible()) {
                    return 'Count';
                }
        }
    }
    return _measure_1.summaryTypeNumericToAny.defaultVal;
}
function removePropertyFromCriteriaOperator(sourceCriteriaOperator, propertyName) {
    if (sourceCriteriaOperator instanceof analytics_criteria_1.GroupOperator) {
        sourceCriteriaOperator.operands = sourceCriteriaOperator.operands.map(operand => removePropertyFromCriteriaOperator(operand, propertyName));
        return sourceCriteriaOperator;
    }
    else if (sourceCriteriaOperator instanceof analytics_criteria_1.UnaryOperator) {
        sourceCriteriaOperator.operand = removePropertyFromCriteriaOperator(sourceCriteriaOperator.operand, propertyName);
        return sourceCriteriaOperator;
    }
    else if (!sourceCriteriaOperator.children().some(operand => operand instanceof analytics_criteria_1.OperandProperty && operand.propertyName === propertyName)) {
        return sourceCriteriaOperator;
    }
    return new analytics_criteria_1.GroupOperator(analytics_criteria_1.GroupOperatorType.And, []);
}
function removeDataItemFromCriteria(criteria, dataItemName) {
    try {
        if (!!criteria) {
            var criteriaSerializer = new analytics_widgets_internal_1.FilterEditorSerializer();
            var criteriaOperator = criteriaSerializer.deserialize(criteria);
            var cleanedOperator = removePropertyFromCriteriaOperator(criteriaOperator, dataItemName);
            return criteriaSerializer.serialize(cleanedOperator);
        }
        else {
            return criteria;
        }
    }
    catch (e) {
        return '';
    }
}


/***/ }),

/***/ 76885:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataItemContainer = void 0;
const _custom_properties_utils_1 = __webpack_require__(93629);
const serializable_model_1 = __webpack_require__(29591);
class DataItemContainer extends serializable_model_1.TypedSerializableModel {
    getInfo() {
        return this._getInfoCore().concat(_custom_properties_utils_1.getCustomPropertiesSerializationInfo(this));
    }
    grabFrom(dataItemContainer) {
        this.name(dataItemContainer.name());
    }
    _getContainerType() {
        return this.itemType();
    }
}
exports.DataItemContainer = DataItemContainer;


/***/ }),

/***/ 13102:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ComboBoxItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const filter_element_item_base_1 = __webpack_require__(7103);
const _combo_box_item_1 = __webpack_require__(58891);
class ComboBoxItem extends filter_element_item_base_1.FilterElementItemBase {
    constructor(dashboardItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dashboardItemJSON, serializer);
    }
    _getInfoCore() {
        return _combo_box_item_1.comboBoxDashboardItemSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'ComboBox';
    }
    _allowAllValue() { return this._isMultiselectable() || this.showAllValue(); }
    _isMultiselectable() { return this.comboBoxType() === 'Checked'; }
}
exports.ComboBoxItem = ComboBoxItem;
serializable_model_1.itemTypesMap['ComboBox'] = { type: ComboBoxItem, groupName: 'filter', title: 'DashboardStringId.DefaultNameComboBoxItem', index: 320 };


/***/ }),

/***/ 78588:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DateFilterItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const _range_filter_selection_validator_1 = __webpack_require__(82748);
const data_item_1 = __webpack_require__(44650);
const _utils_1 = __webpack_require__(66358);
const serializable_model_1 = __webpack_require__(29591);
const data_dashboard_item_1 = __webpack_require__(70355);
const date_time_period_1 = __webpack_require__(78252);
const _range_filter_item_helper_1 = __webpack_require__(62248);
const _range_state_controller_1 = __webpack_require__(58015);
const _date_filter_item_1 = __webpack_require__(82133);
class DateFilterItem extends data_dashboard_item_1.DataDashboardItem {
    constructor(dashboardItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this._defaultDateTimePeriodIndexSubscription = null;
        this.currentSelectedDateTimePeriodName = ko.observable();
        this._attachDataItem(this, _date_filter_item_1.dateFilterDimension.propertyName);
        this.__dimension._specifics.acceptableShapingType = data_item_1.AcceptableShapingType.RangeDate;
        this.dateTimePeriods = analytics_utils_1.deserializeArray(dashboardItemJSON.DateTimePeriods, (item) => new date_time_period_1.DateTimePeriod(item, serializer));
        this._stateController = new _range_state_controller_1.RangeStateController(this);
        this._stateController.initialize();
        _range_filter_item_helper_1._subscribeToDimension(this.dimension, this.dateTimePeriods, this._dataManager);
    }
    _getSelectionByPeriod(period) {
        let range = period.getDateTimeValue();
        return [[range.startValue, range.endValue]];
    }
    _clearBindings() {
        super._clearBindings();
        this.dateTimePeriods.removeAll();
    }
    _getInfoCore() {
        return _date_filter_item_1.dateFilterDashboardItemSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'DateFilter';
    }
    _getClearMasterFilterSupported() { return true; }
    _getIsMasterFilter() { return true; }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
    _getIsVisualInteractivitySupported() { return false; }
    _getInteractivityDimensionLinks() {
        return [this.__dimension];
    }
    _getDisplayFilterValues(limitCount) {
        return this._stateController._getDisplayFilterValues(limitCount);
    }
    _updateContentViewModel(content) {
        super._updateContentViewModel(content);
        (content.ViewModel.DateTimePeriods || []).forEach(p => {
            p.Start && p.Start.Date && (p.Start.Date = new Date(p.Start.Date));
            p.End && p.End.Date && (p.End.Date = new Date(p.End.Date));
        });
    }
    _setState(itemState) {
        this._stateController.setState(itemState);
    }
    _removeSelectionFromState(state) {
        let itemState = super._removeSelectionFromState(_jquery_helpers_1.deepExtend({}, state));
        return this._stateController.removeSelectionFromState(itemState);
    }
    _setPredefinedPeriodToState(state, periodName) {
        let itemState = super._setPredefinedPeriodToState(_jquery_helpers_1.deepExtend({}, state), periodName);
        return this._stateController.setPredefinedPeriodToState(itemState, periodName);
    }
    _setSelectionToState(state, selection) {
        return this._stateController.setSelectionToState(state, selection);
    }
    _getValidatedSelection(selectionValues) {
        let validatedValues = super._getValidatedSelection(selectionValues);
        if (validatedValues && this.dimension()) {
            let validatedRange = _range_filter_selection_validator_1.RangeFilterSelectionValidator.validate({
                startValue: validatedValues[0][0],
                endValue: validatedValues[0][1]
            }, this.dimension()._actualDateTimeGroupInterval() === 'Year');
            validatedValues[0] = [validatedRange.startValue, validatedRange.endValue];
        }
        return validatedValues;
    }
    _extendContentState(content) {
        super._extendContentState(content);
        this._stateController.extendContentState(content);
    }
    _hasSelection() {
        if (!!this.currentSelectedDateTimePeriodName())
            return true;
        else if (super._hasSelection()) {
            if (!!this._selectionValues()[0][0] || !!this._selectionValues()[0][1])
                return true;
        }
        return false;
    }
    _isSortingEnabled() {
        return false;
    }
    _isTopNEnabled(dataItem) {
        return false;
    }
    _getEntireRange() {
        if (this._multiData) {
            var measures = this._multiData.getMeasures();
            var values = [];
            for (var i = 0; i < measures.length; i++)
                values.push(this._multiData.getMeasureValue(measures[i].id).getValue());
            values.sort((a, b) => a > b ? 1 : -1);
            return values;
        }
        return [];
    }
}
__decorate([
    _utils_1.collectionItemType('DateTimePeriod')
], DateFilterItem.prototype, "dateTimePeriods", void 0);
exports.DateFilterItem = DateFilterItem;
serializable_model_1.itemTypesMap['DateFilter'] = { type: DateFilterItem, groupName: 'filter', title: 'DashboardStringId.DefaultNameDateFilterItem', index: 350 };


/***/ }),

/***/ 7103:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FilterElementItemBase = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _hashset_wrapper_1 = __webpack_require__(77931);
const _utils_1 = __webpack_require__(7590);
const data_item_1 = __webpack_require__(44650);
const _knockout_utils_1 = __webpack_require__(4437);
const _utils_2 = __webpack_require__(66358);
const data_dashboard_item_1 = __webpack_require__(70355);
const _filter_element_item_base_1 = __webpack_require__(48098);
class FilterElementItemBase extends data_dashboard_item_1.DataDashboardItem {
    constructor(dashboardItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this.__filterDimensions = ko.observableArray([]);
        this.filterDimensions = ko.observableArray([]);
        this._unselectedValues = ko.observable();
        this._isExcludingAllFilter = ko.computed(() => {
            if (!!this._useNeutralFilterMode())
                return false;
            var selectionValues = this._selectionValues();
            return this._dataManager() && selectionValues && selectionValues.length === 0;
        });
        _knockout_utils_1.subscribeArrayChange(this.__filterDimensions, {
            added: link => link._specifics.supportsTopNOther = false,
            deleted: link => link._specifics.supportsTopNOther = true
        });
        this.__filterDimensions(analytics_utils_1.deserializeArray(dashboardItemJSON.FilterDimensions, (item) => {
            var link = new data_item_1.DataItemLink(this, item, serializer);
            link._specifics.supportsTopNOther = false;
            return link;
        })());
        this._subscribeDataItemLinkArrays(_filter_element_item_base_1.filterDimensions);
    }
    get _supportParallelRequests() {
        return false;
    }
    get _useCriteriaOptimization() {
        return !this.filterString()
            && this.interactivityOptions.ignoreMasterFilters()
            && !this.isMasterFilterCrossDataSource()
            && !this._interactivityDimensions.some(d => d.topNOptionsEnabled());
    }
    _clearBindings() {
        super._clearBindings();
        this.__filterDimensions.removeAll();
    }
    _getInfoCore() {
        return _filter_element_item_base_1.filterElementItemBaseSerializationInfo;
    }
    _isCalculationSupported() {
        return false;
    }
    _getInteractivityDimensionLinks() { return this.__filterDimensions(); }
    _getMasterFilterMode() { return !this._useNeutralFilterMode() || (!!this._useNeutralFilterMode() && this._isMultiselectable()) ? 'Multiple' : 'Single'; }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
    _getClearMasterFilterSupported() { return !!this._useNeutralFilterMode(); }
    _getIsMasterFilter() { return true; }
    _getIsVisualInteractivitySupported() { return false; }
    _isMultiselectable() { return false; }
    _updateContentViewModel(content) {
        super._updateContentViewModel(content);
        content.ViewModel.EnableSearch = this.enableSearch();
    }
    _performOutputFilterOptimization(filter) {
        if (this.__filterDimensions && filter && !!filter.values && this._useCriteriaOptimization) {
            var allselectionValues = this._getAllSelectionValues(this._interactivityDimensions.map(d => d.uniqueName()));
            if (filter.values.length === allselectionValues.length) {
                return undefined;
            }
        }
        if (!!this._dataQueryParams.peek()
            && !!this._dataQueryParams.peek().Filter
            && this._dataQueryParams.peek().Filter.some(externalFilter => externalFilter.isExcludingAllFilter)) {
            return undefined;
        }
        return filter;
    }
    _validateSelectionByData(origSelection) {
        let selection = origSelection;
        if (!this._interactivityDimensions.length)
            return;
        var allValues = this._getAllSelectionValues(this._interactivityDimensions.map(d => d.uniqueName()));
        if (this._isMultiselectable() && !this._useNeutralFilterMode() && !Array.isArray(this._unselectedValues())) {
            this._unselectedValues([]);
            if (Array.isArray(selection)) {
                this._updateUnselectedValues(selection, allValues);
            }
        }
        if (this._isMultipleMasterFilter() && this._useNeutralFilterMode() && selection && this._useCriteriaOptimization) {
            const hashSet = new _hashset_wrapper_1.HashsetWrapper(allValues);
            selection = [];
            origSelection.forEach(val => hashSet.contains(val) && selection.push(val));
        }
        this._setSelectionData(this._correctSelectionValues(allValues, selection || []), this._useCriteriaOptimization && this._useNeutralFilterMode());
    }
    _setSelectionData(selection, forceSetSelection = false) {
        if (!this._useNeutralFilterMode() && this._multiData) {
            var currentSelection = this._selectionValues();
            if (this._isMultiselectable() && !!currentSelection && this._unselectedValues()) {
                this._updateUnselectedValues(selection, currentSelection);
            }
            if (!!selection) {
                var hashset = new _hashset_wrapper_1.HashsetWrapper(selection);
                var allValues = this._getAllSelectionValues(this._interactivityDimensions.map(d => d.uniqueName()));
                selection = hashset.getIntersection(allValues);
            }
        }
        super._setSelectionData(selection, forceSetSelection);
    }
    _correctSelectionValues(allValues, currentSelection) {
        if (this._isMultiselectable() && !this._useNeutralFilterMode()) {
            var unknownSelection = allValues
                .filter(x => !this._arrayContains(currentSelection, x) && !this._arrayContains(this._unselectedValues(), x));
            return currentSelection.concat(unknownSelection);
        }
        else if (!this._isMultiselectable()) {
            if (!!this._useNeutralFilterMode()) {
                if (currentSelection.length !== 1) {
                    return this._allowAllValue() || allValues.length == 0 ? null : [allValues[0]];
                }
            }
            else {
                if (currentSelection.length !== 1 || !this._arrayContains(allValues, currentSelection[0])) {
                    return this._allowAllValue() ? allValues : [allValues[0]];
                }
            }
        }
        return currentSelection;
    }
    _updateUnselectedValues(newSelection, currentSelection) {
        if (!newSelection || newSelection.length === 0) {
            currentSelection.forEach(x => this._unselectedValues().push(x.slice()));
        }
        else {
            let hashset = new _hashset_wrapper_1.HashsetWrapper(newSelection);
            let unselectedCount = this._unselectedValues().length;
            for (let i = unselectedCount - 1; i >= 0; i--) {
                if (hashset.contains(this._unselectedValues()[i])) {
                    this._unselectedValues().splice(i, 1);
                }
            }
            currentSelection.forEach(x => {
                if (!hashset.contains(x)) {
                    this._unselectedValues().push(x.slice());
                }
            });
        }
    }
    _arrayContains(container, part) {
        return _utils_1.arrayContains(container, part);
    }
}
__decorate([
    _utils_2.collectionItemType('Dimension')
], FilterElementItemBase.prototype, "__filterDimensions", void 0);
exports.FilterElementItemBase = FilterElementItemBase;


/***/ }),

/***/ 16525:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListBoxItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const filter_element_item_base_1 = __webpack_require__(7103);
const _list_box_item_1 = __webpack_require__(77032);
class ListBoxItem extends filter_element_item_base_1.FilterElementItemBase {
    constructor(dashboardItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dashboardItemJSON, serializer);
    }
    _getInfoCore() {
        return _list_box_item_1.listBoxDashboardItemSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'ListBox';
    }
    _allowAllValue() { return this._isMultiselectable() || this.showAllValue(); }
    _isMultiselectable() { return this.listBoxType() === 'Checked'; }
}
exports.ListBoxItem = ListBoxItem;
serializable_model_1.itemTypesMap['ListBox'] = { type: ListBoxItem, groupName: 'filter', title: 'DashboardStringId.DefaultNameListBoxItem', index: 330 };


/***/ }),

/***/ 58891:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.comboBoxDashboardItemSerializationsInfo = exports.comboBoxType = void 0;
const _filter_element_item_base_1 = __webpack_require__(48098);
exports.comboBoxType = {
    propertyName: 'comboBoxType', modelName: '@ComboBoxType', displayName: 'DashboardWebStringId.FilterItem.Type', defaultVal: 'Standard', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Standard': 'DashboardWebStringId.FilterItem.Type.Standard',
        'Checked': 'DashboardWebStringId.FilterItem.Type.Checked'
    }
};
exports.comboBoxDashboardItemSerializationsInfo = _filter_element_item_base_1.filterElementItemBaseSerializationInfo.concat([exports.comboBoxType, _filter_element_item_base_1.showAllValue]);


/***/ }),

/***/ 82133:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dateFilterDashboardItemSerializationsInfo = exports.dateFilterDimension = exports.displayTextPattern = exports.datePickerLocation = exports.arrangementMode = exports.filterType = void 0;
const _data_item_1 = __webpack_require__(44010);
const _data_dashboard_item_1 = __webpack_require__(66302);
const interactivity_options_1 = __webpack_require__(50045);
const _range_filter_item_1 = __webpack_require__(30097);
exports.filterType = {
    propertyName: 'filterType', modelName: '@FilterType', displayName: 'DashboardWebStringId.DateFilter.FilterType', defaultVal: 'Between', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'After': 'DashboardWebStringId.DateFilter.FilterTypeAfter',
        'Before': 'DashboardWebStringId.DateFilter.FilterTypeBefore',
        'Exact': 'DashboardWebStringId.DateFilter.FilterTypeExact',
        'Between': 'DashboardWebStringId.DateFilter.FilterTypeBetween'
    }
};
exports.arrangementMode = {
    propertyName: 'arrangementMode', modelName: '@ArrangementMode', displayName: 'DashboardWebStringId.DateFilter.ArrangementMode', defaultVal: 'AutoHeight', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'AutoHeight': 'DashboardWebStringId.DateFilter.ArrangementModeAutoHeight',
        'Horizontal': 'DashboardWebStringId.DateFilter.ArrangementModeHorizontal',
        'Vertical': 'DashboardWebStringId.DateFilter.ArrangementModeVertical'
    }
};
exports.datePickerLocation = {
    propertyName: 'datePickerLocation', modelName: '@DatePickerLocation', displayName: 'DashboardWebStringId.DateFilter.DatePickerLocation', defaultVal: 'Far', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Far': 'DashboardWebStringId.DateFilter.DatePickerLocationFar',
        'Near': 'DashboardWebStringId.DateFilter.DatePickerLocationNear',
        'Hidden': 'DashboardWebStringId.DateFilter.DatePickerLocationHidden'
    }
};
exports.displayTextPattern = { propertyName: 'displayTextPattern', modelName: '@DisplayTextPattern', displayName: 'DashboardStringId.DateFilterDisplayTextPattern', defaultVal: '', simpleFormAdapterItem: 'textBoxEditor', editorOptions: { placeholder: 'DashboardStringId.FromToDatePeriodCaption' } };
exports.dateFilterDimension = { propertyName: '__dimension', modelName: 'Dimension', displayName: 'DashboardStringId.DescriptionItemDimension', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.dateFilterDashboardItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([exports.dateFilterDimension, _range_filter_item_1.dateTimePeriods, exports.filterType, exports.arrangementMode, exports.datePickerLocation, exports.displayTextPattern, _range_filter_item_1.defaultDateTimePeriodName, interactivity_options_1._filterItemInteractivityOptionsMeta]);


/***/ }),

/***/ 48098:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.filterElementItemBaseSerializationInfo = exports.enableSearch = exports.showAllValue = exports.filterDimensions = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _data_dashboard_item_1 = __webpack_require__(66302);
const interactivity_options_1 = __webpack_require__(50045);
exports.filterDimensions = { propertyName: '__filterDimensions', modelName: 'FilterDimensions', displayName: 'DashboardStringId.DescriptionDimensions', array: true };
exports.showAllValue = { propertyName: 'showAllValue', modelName: '@ShowAllValue', displayName: 'DashboardWebStringId.FilterItem.ShowAllValue', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.enableSearch = { propertyName: 'enableSearch', modelName: '@EnableSearch', displayName: 'DashboardWebStringId.FilterItem.EnableSearch', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.filterElementItemBaseSerializationInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([exports.filterDimensions, interactivity_options_1._filterItemInteractivityOptionsMeta, exports.enableSearch]);


/***/ }),

/***/ 77032:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.listBoxDashboardItemSerializationsInfo = exports.listBoxType = void 0;
const _filter_element_item_base_1 = __webpack_require__(48098);
exports.listBoxType = {
    propertyName: 'listBoxType', modelName: '@ListBoxType', displayName: 'DashboardWebStringId.FilterItem.Type', defaultVal: 'Checked', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Checked': 'DashboardWebStringId.FilterItem.Type.Checked',
        'Radio': 'DashboardWebStringId.FilterItem.Type.Radio'
    }
};
exports.listBoxDashboardItemSerializationsInfo = _filter_element_item_base_1.filterElementItemBaseSerializationInfo.concat([exports.listBoxType, _filter_element_item_base_1.showAllValue]);


/***/ }),

/***/ 24865:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.treeViewDashboardItemSerializationsInfo = exports.autoExpand = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _filter_element_item_base_1 = __webpack_require__(48098);
exports.autoExpand = { propertyName: 'autoExpand', modelName: '@AutoExpand', displayName: 'DashboardWebStringId.TreeView.AutoExpand', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.treeViewDashboardItemSerializationsInfo = _filter_element_item_base_1.filterElementItemBaseSerializationInfo.concat([exports.autoExpand]);


/***/ }),

/***/ 65392:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreeViewItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const filter_element_item_base_1 = __webpack_require__(7103);
const _tree_view_item_1 = __webpack_require__(24865);
class TreeViewItem extends filter_element_item_base_1.FilterElementItemBase {
    constructor(dashboardItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dashboardItemJSON, serializer);
    }
    _getInfoCore() {
        return _tree_view_item_1.treeViewDashboardItemSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'TreeView';
    }
    _allowAllValue() { return true; }
    _isMultiselectable() { return true; }
}
exports.TreeViewItem = TreeViewItem;
serializable_model_1.itemTypesMap['TreeView'] = { type: TreeViewItem, groupName: 'filter', title: 'DashboardStringId.DefaultNameTreeViewItem', index: 340 };


/***/ }),

/***/ 19851:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GaugeItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const gauge_calc_window_definition_1 = __webpack_require__(5890);
const _utils_1 = __webpack_require__(66358);
const serializable_model_1 = __webpack_require__(29591);
const kpi_item_1 = __webpack_require__(5442);
const gauge_1 = __webpack_require__(29847);
const _gauge_item_1 = __webpack_require__(11433);
class GaugeItem extends kpi_item_1.KpiItem {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.gauges = analytics_utils_1.deserializeArray(modelJson.Gauges, (item) => new gauge_1.Gauge(this, item, serializer));
    }
    _clearBindings() {
        super._clearBindings();
        this.gauges.removeAll();
    }
    _itemInteractivityByColumnAxis() {
        return false;
    }
    _getInteractivityAxisDimensionCount() {
        return this.seriesDimensions().length;
    }
    _getInfoCore() {
        return _gauge_item_1.gaugeDashboardItemSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'Gauge';
    }
    _getLayersCount() {
        return !!this.__seriesDimensions && this.__seriesDimensions().length > 0 ? this.gauges().length : 0;
    }
    _getLayerName() {
        return this._getDataItemContainerDisplayName(this.gauges()[this._selectedElementIndex() || 0]);
    }
    _getDefaultCalculationWindowDefinition() {
        return new gauge_calc_window_definition_1.GaugeWindowDefinition();
    }
}
__decorate([
    _utils_1.collectionItemType('GaugeElement')
], GaugeItem.prototype, "gauges", void 0);
exports.GaugeItem = GaugeItem;
serializable_model_1.itemTypesMap['Gauge'] = { type: GaugeItem, groupName: 'common', title: 'DashboardStringId.DefaultNameGaugeItem', index: 70 };


/***/ }),

/***/ 29847:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Gauge = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const kpi_element_1 = __webpack_require__(28093);
const _gauge_1 = __webpack_require__(33623);
class Gauge extends kpi_element_1.KpiElement {
    constructor(dataItemProvider, modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dataItemProvider, modelJson, serializer);
        this.__targetValue._specifics.skipFormatting = true;
    }
    _getInfoCore() {
        return _gauge_1.gaugeSerializationsInfo;
    }
    _getDefaultItemType() { return 'Gauge'; }
}
exports.Gauge = Gauge;


/***/ }),

/***/ 11433:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gaugeDashboardItemSerializationsInfo = exports.showGaugeCaptions = exports.gaugeViewType = exports.gauges = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _kpi_item_1 = __webpack_require__(73236);
exports.gauges = { propertyName: 'gauges', modelName: 'Gauges', displayName: 'DashboardStringId.DefaultNameGaugeItem', array: true };
exports.gaugeViewType = {
    propertyName: 'viewType', modelName: '@ViewType', displayName: 'DashboardWebStringId.Gauge.Type', defaultVal: 'CircularFull', valuesArray: [
        { value: 'CircularFull', displayValue: 'DashboardWebStringId.Gauge.Type.FullQuarterGauge' },
        { value: 'CircularHalf', displayValue: 'DashboardWebStringId.Gauge.Type.HalfCircular' },
        { value: 'CircularQuarterLeft', displayValue: 'DashboardWebStringId.Gauge.Type.LeftQuarterCircular' },
        { value: 'CircularQuarterRight', displayValue: 'DashboardWebStringId.Gauge.Type.RightQuarterCircular' },
        { value: 'CircularThreeFourth', displayValue: 'DashboardWebStringId.Gauge.Type.ThreeFourthCircular' },
        { value: 'LinearHorizontal', displayValue: 'DashboardWebStringId.Gauge.Type.LinearHorizontal' },
        { value: 'LinearVertical', displayValue: 'DashboardWebStringId.Gauge.Type.LinearVertical' }
    ]
};
exports.showGaugeCaptions = { propertyName: 'showGaugeCaptions', modelName: '@ShowGaugeCaptions', displayName: 'DashboardWebStringId.Gauge.Captions', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.gaugeDashboardItemSerializationsInfo = _kpi_item_1.kpiDashboardItemSerializationsInfo.concat([exports.gauges, exports.gaugeViewType, exports.showGaugeCaptions]);


/***/ }),

/***/ 33623:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gaugeSerializationsInfo = exports.scaleLabelNumericFormat = exports.maximum = exports.minimum = void 0;
const data_item_format_1 = __webpack_require__(67695);
const _base_metadata_1 = __webpack_require__(17916);
const _kpi_element_1 = __webpack_require__(42209);
exports.minimum = { propertyName: 'minimum', modelName: '@Minimum', displayName: 'DashboardWebStringId.Gauge.Min', defaultVal: NaN, from: _base_metadata_1.floatFromModel, toJsonObject: _base_metadata_1.nullableFloatToModel };
exports.maximum = { propertyName: 'maximum', modelName: '@Maximum', displayName: 'DashboardWebStringId.Gauge.Max', defaultVal: NaN, from: _base_metadata_1.floatFromModel, toJsonObject: _base_metadata_1.nullableFloatToModel };
exports.scaleLabelNumericFormat = { propertyName: 'scaleLabelNumericFormat', modelName: 'ScaleLabelNumericFormat', displayName: 'DashboardWebStringId.TextBoxFormatText', type: data_item_format_1.DataItemNumericFormat };
exports.gaugeSerializationsInfo = _kpi_element_1.kpiElementSerializationsInfo.concat([exports.minimum, exports.maximum, exports.scaleLabelNumericFormat]);


/***/ }),

/***/ 30516:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GridColumnFilterOptions = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _grid_column_filter_options_1 = __webpack_require__(51480);
class GridColumnFilterOptions extends serializable_model_1.SerializableModel {
    constructor(JSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(JSON, serializer);
    }
    getInfo() {
        return _grid_column_filter_options_1.gridColumnFilterOptionsSerializationsInfo;
    }
    _getViewModel() {
        return {
            ShowFilterRow: this.showFilterRow(),
            UpdateTotalsOnColumnFilterChanged: this.updateTotals(),
        };
    }
}
exports.GridColumnFilterOptions = GridColumnFilterOptions;


/***/ }),

/***/ 5697:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._gridColumnTotalSerializationsInfo = exports._totalTypeTemplate = exports.GridColumnTotal = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const serializable_model_1 = __webpack_require__(29591);
class GridColumnTotal extends serializable_model_1.TypedSerializableModel {
    constructor(modelJson, serializer) {
        super(modelJson, serializer);
    }
    getInfo() {
        return exports._gridColumnTotalSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'Total';
    }
}
exports.GridColumnTotal = GridColumnTotal;
exports._totalTypeTemplate = {
    propertyName: 'totalType', modelName: '@Type', displayName: 'DashboardWebStringId.Grid.TotalType', defaultVal: 'Count', simpleFormAdapterItem: 'selectBoxEditor',
};
exports._gridColumnTotalSerializationsInfo = [_base_metadata_1.itemType, exports._totalTypeTemplate];


/***/ }),

/***/ 27233:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GridHyperlinkColumn = exports.GridSparklineColumn = exports.GridDeltaColumn = exports.GridMeasureColumn = exports.GridDimensionColumn = exports.GridColumn = exports.GridColumnType = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const data_item_1 = __webpack_require__(44650);
const measure_1 = __webpack_require__(17012);
const _data_field_1 = __webpack_require__(68951);
const _utils_1 = __webpack_require__(66358);
const data_item_container_1 = __webpack_require__(76885);
const grid_column_total_1 = __webpack_require__(5697);
const _grid_column_total_1 = __webpack_require__(13139);
const _grid_columns_1 = __webpack_require__(40789);
var GridColumnType;
(function (GridColumnType) {
    GridColumnType[GridColumnType["Dimension"] = 0] = "Dimension";
    GridColumnType[GridColumnType["Measure"] = 1] = "Measure";
    GridColumnType[GridColumnType["Delta"] = 2] = "Delta";
    GridColumnType[GridColumnType["Sparkline"] = 3] = "Sparkline";
    GridColumnType[GridColumnType["Hyperlink"] = 4] = "Hyperlink";
})(GridColumnType = exports.GridColumnType || (exports.GridColumnType = {}));
class GridColumn extends data_item_container_1.DataItemContainer {
    constructor(dataItemProvider, dashboardItemJSON = {}, serializer) {
        super(dashboardItemJSON, serializer);
        this._displayNameSeparator = 'vs';
        this.totals = analytics_utils_1.deserializeArray(dashboardItemJSON.Totals, (item) => new grid_column_total_1.GridColumnTotal(item, serializer));
    }
    get actualDataItem() {
        var dataItemLink = this._getActualDataItemLink();
        return !!dataItemLink ? dataItemLink.dataItem() : undefined;
    }
    get _actualDataItemLink() {
        return this._getActualDataItemLink();
    }
    grabFrom(column) {
        super.grabFrom(column);
        this.weight(column.weight());
        this.fixedWidth(column.fixedWidth());
        this.widthType(column.widthType());
    }
    _getInfoCore() {
        return _grid_columns_1.gridColumnBaseSerializationsInfo;
    }
    _getColumnType() {
        return undefined;
    }
    _getDataId() {
        return this.actualDataItem && this.actualDataItem.uniqueName() || null;
    }
    _isAttribute(dataItem) {
        return false;
    }
    _getViewModel() {
        return {
            Weight: this.weight(),
            FixedWidth: this.fixedWidth(),
            WidthType: this.widthType()
        };
    }
    _getAvailableTotalTypes(dataItemProvider) {
        return _grid_column_total_1.totalTypeValues.commonCountTypes;
    }
    _getTotalTypes(dataType) {
        var possibleTypes = _grid_column_total_1.totalTypeValues.commonCountTypes;
        if (_data_field_1.IsNumeric(dataType)) {
            return _grid_column_total_1.totalTypeValues.commonMinMaxTypes.concat(_grid_column_total_1.totalTypeValues.numericTypes).concat(possibleTypes);
        }
        else if (_data_field_1.IsTextual(dataType) || _data_field_1.IsDateTime(dataType)) {
            return _grid_column_total_1.totalTypeValues.commonMinMaxTypes.concat(possibleTypes);
        }
        else {
            return possibleTypes;
        }
    }
}
__decorate([
    _utils_1.collectionItemType('Total')
], GridColumn.prototype, "totals", void 0);
exports.GridColumn = GridColumn;
class GridDimensionColumn extends GridColumn {
    constructor(dataItemProvider, dashboardItemJSON = {}, serializer) {
        super(dataItemProvider, dashboardItemJSON, serializer);
        dataItemProvider._attachDataItem(this, _grid_columns_1.dimension.propertyName);
    }
    _getInfoCore() {
        return _grid_columns_1.gridDimensionColumnSerializationsInfo;
    }
    _getColumnType() {
        return GridColumnType.Dimension;
    }
    _getActualDataItemLink() {
        return this.__dimension;
    }
    _getAvailableTotalTypes(dataItemProvider) {
        var dataItem = this.actualDataItem;
        if (dataItem) {
            return this._getTotalTypes(dataItemProvider._getFinalDataType(dataItem.uniqueName()));
        }
        else {
            return super._getAvailableTotalTypes(dataItemProvider);
        }
    }
    _getDefaultItemType() {
        return 'GridDimensionColumn';
    }
    _getBindingModel() {
        return [{
                propertyName: _grid_columns_1.dimension.propertyName,
                dataItemType: 'Dimension',
                emptyPlaceholder: 'DashboardStringId.DescriptionItemDimension'
            }];
    }
}
exports.GridDimensionColumn = GridDimensionColumn;
class GridMeasureColumn extends GridColumn {
    constructor(dataItemProvider, dashboardItemJSON = {}, serializer) {
        super(dataItemProvider, dashboardItemJSON, serializer);
        dataItemProvider._attachDataItem(this, _grid_columns_1.measure.propertyName);
        this.__measure._specifics.acceptableShapingType = data_item_1.AcceptableShapingType.String;
    }
    _getInfoCore() {
        return _grid_columns_1.gridMeasureColumnSerializationsInfo;
    }
    _getColumnType() {
        return GridColumnType.Measure;
    }
    _getActualDataItemLink() {
        return this.__measure;
    }
    _getAvailableTotalTypes(dataItemProvider) {
        var dataItem = this.actualDataItem;
        if (dataItem instanceof measure_1.Measure) {
            var totalTypes = this._getTotalTypes(dataItemProvider._getFinalDataType(dataItem.uniqueName()));
            if (dataItem.expression() == null && dataItem.calculation.calculation() == null)
                totalTypes = totalTypes.concat(_grid_column_total_1.totalTypeValues.autoTypes);
            return totalTypes;
        }
        else {
            return super._getAvailableTotalTypes(dataItemProvider);
        }
    }
    _getDefaultItemType() {
        return 'GridMeasureColumn';
    }
    _getBindingModel() {
        return [{
                propertyName: _grid_columns_1.measure.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.DescriptionItemMeasure'
            }];
    }
}
exports.GridMeasureColumn = GridMeasureColumn;
class GridDeltaColumn extends GridColumn {
    constructor(dataItemProvider, dashboardItemJSON = {}, serializer) {
        super(dataItemProvider, dashboardItemJSON, serializer);
        dataItemProvider._attachDataItem(this, _grid_columns_1.gridColumnActualValue.propertyName);
        dataItemProvider._attachDataItem(this, _grid_columns_1.gridColumnTargetValue.propertyName);
        ko.computed(() => {
            this.__actualValue._specifics.skipFormatting = true;
            this.__targetValue._specifics.skipFormatting = true;
            if (!this.__actualValue.dataItem() && this.__targetValue.dataItem()) {
                this.__targetValue._specifics.skipFormatting = false;
            }
            if (this.__actualValue.dataItem() && !this.__targetValue.dataItem()) {
                this.__actualValue._specifics.skipFormatting = false;
            }
            else if (this.__actualValue.dataItem() && this.__targetValue.dataItem() && this.deltaOptions.valueType() === 'ActualValue') {
                this.__actualValue._specifics.skipFormatting = false;
            }
        });
    }
    _getInfoCore() {
        return _grid_columns_1.gridDeltaColumnSerializationsInfo;
    }
    _getColumnType() {
        return GridColumnType.Delta;
    }
    _getActualDataItemLink() {
        return !!this.__actualValue.dataItem() ? this.__actualValue : this.__targetValue;
    }
    _getDefaultItemType() {
        return 'GridDeltaColumn';
    }
    _getBindingModel() {
        return [{
                propertyName: _grid_columns_1.gridColumnActualValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.ActualValueCaption'
            }, {
                propertyName: _grid_columns_1.gridColumnTargetValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.TargetValueCaption'
            }];
    }
}
exports.GridDeltaColumn = GridDeltaColumn;
class GridSparklineColumn extends GridColumn {
    constructor(dataItemProvider, dashboardItemJSON = {}, serializer) {
        super(dataItemProvider, dashboardItemJSON, serializer);
        dataItemProvider._attachDataItem(this, _grid_columns_1.sparkline.propertyName);
    }
    _getInfoCore() {
        return _grid_columns_1.gridSparklineColumnSerializationsInfo;
    }
    _getColumnType() {
        return GridColumnType.Sparkline;
    }
    _getActualDataItemLink() {
        return this.__measure;
    }
    _getDefaultItemType() {
        return 'GridSparklineColumn';
    }
    _getBindingModel() {
        return [{
                propertyName: _grid_columns_1.sparkline.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardWebStringId.Grid.Sparkline'
            }];
    }
}
exports.GridSparklineColumn = GridSparklineColumn;
class GridHyperlinkColumn extends GridColumn {
    constructor(dataItemProvider, dashboardItemJSON = {}, serializer) {
        super(dataItemProvider, dashboardItemJSON, serializer);
        dataItemProvider._attachDataItem(this, _grid_columns_1.displayValue.propertyName);
        this.__uriAttribute = data_item_1.DataItemLink.create(dataItemProvider, this.__uriAttribute);
        this.__uriAttribute._specifics.isAttribute = true;
        this.__uriAttribute._specifics.acceptableShapingType = data_item_1.AcceptableShapingType.Attribute;
        this._displayNameSeparator = '/';
        var isUriPatternChangedCallback = (value) => {
            this.uriPattern(_grid_columns_1.checkGridUriPattern(value));
        };
        this.uriPattern.subscribe(isUriPatternChangedCallback);
    }
    _getInfoCore() {
        return _grid_columns_1.gridHyperlinkColumnSerializationsInfo;
    }
    _getColumnType() {
        return GridColumnType.Hyperlink;
    }
    _getActualDataItemLink() {
        return this.__displayValue;
    }
    _getDefaultItemType() {
        return 'GridHyperlinkColumn';
    }
    _isAttribute(dataItem) {
        return dataItem === this.__uriAttribute.dataItem();
    }
    _getBindingModel() {
        return [{
                propertyName: _grid_columns_1.displayValue.propertyName,
                dataItemType: 'Dimension',
                emptyPlaceholder: 'DashboardStringId.DisplayValueCaption'
            }, {
                propertyName: _grid_columns_1.uri.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.UriCaption'
            }];
    }
    _getAvailableTotalTypes(dataItemProvider) {
        if (this.actualDataItem) {
            return this._getTotalTypes(dataItemProvider._getFinalDataType(this.actualDataItem.uniqueName()));
        }
        else {
            return super._getAvailableTotalTypes(dataItemProvider);
        }
    }
}
exports.GridHyperlinkColumn = GridHyperlinkColumn;


/***/ }),

/***/ 74873:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GridItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const _model_subscriber_1 = __webpack_require__(45736);
const _jquery_helpers_1 = __webpack_require__(59384);
const grid_calc_window_definition_1 = __webpack_require__(95912);
const _data_field_1 = __webpack_require__(68951);
const _undo_engine_helper_1 = __webpack_require__(2908);
const _client_filter_manager_1 = __webpack_require__(80964);
const serializable_model_1 = __webpack_require__(29591);
const data_dashboard_item_1 = __webpack_require__(70355);
const grid_columns_1 = __webpack_require__(27233);
const _grid_item_1 = __webpack_require__(33801);
class GridItem extends data_dashboard_item_1.DataDashboardItem {
    constructor(dashboardItemJSON = {}, serializer) {
        super(dashboardItemJSON, serializer);
        this._processClientFilterChanged = (clientFilter) => {
            if (this._canUpdateTotals()) {
                this._gridClientFilterManager.setFilterParams(clientFilter);
                this._dataQueryParams.notifySubscribers();
            }
        };
        this._processClientFilterStateChanged = (clientFilterState) => {
            this._gridClientFilterManager.setFilterState(clientFilterState);
        };
        this.columns = analytics_utils_1.deserializeArray(dashboardItemJSON.GridColumns, (item) => this._createGridColumn(item, serializer));
        this._attachDataItem(this, _grid_item_1.sparklineArgument.propertyName);
        this.interactivityOptions.masterFilterMode.subscribe(newMode => {
            if (newMode !== 'None') {
                this.gridOptions.allowCellMerge(false);
            }
        });
        this._gridClientFilterManager = new _client_filter_manager_1.ClientFilterManager(this.columnFilterOptions.updateTotals);
    }
    _canUpdateTotals() {
        return this.columnFilterOptions.updateTotals()
            && this.columns().length > 0
            && !_data_field_1.DataField.isOlap(this.columns()[0].actualDataItem.dataMember())
            && this.columns().some(c => c.totals().length > 0);
    }
    _clearBindings() {
        super._clearBindings();
        this.columns.removeAll();
    }
    _createGridColumn(columnJSON, serializer = new analytics_utils_1.ModelSerializer()) {
        var itemType = columnJSON['@ItemType'];
        return new GridItem._gridColumnTypesMap[itemType].constructor(this, columnJSON, serializer);
    }
    _getInfoCore() {
        return _grid_item_1.dashboardGridItemSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'Grid';
    }
    _getMasterFilterMode() { return this.interactivityOptions.masterFilterMode(); }
    _getDrillDownEnabled() { return this.interactivityOptions.isDrillDownEnabled(); }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
    _getInteractivityDimensionLinks() {
        if (this.columns().length > 0) {
            var dimensionsMap = this.columns().map(col => col instanceof grid_columns_1.GridDimensionColumn || col instanceof grid_columns_1.GridHyperlinkColumn);
            var startIndex = dimensionsMap.indexOf(true);
            startIndex = startIndex == -1 ? dimensionsMap.length : startIndex;
            var endIndex = dimensionsMap.indexOf(false, startIndex);
            endIndex = endIndex == -1 ? dimensionsMap.length : endIndex;
            return this.columns().slice(startIndex, endIndex)
                .filter(col => col instanceof grid_columns_1.GridHyperlinkColumn || col.displayMode() !== 'Image')
                .map(col => col._actualDataItemLink);
        }
        else {
            return super._getInteractivityDimensionLinks();
        }
    }
    _cleanDataItemDependencies() {
        super._cleanDataItemDependencies();
        var columnsToRemove = this.columns().filter(column => {
            var bindings = column._getBindingModel();
            return bindings.every(binding => !column[binding.propertyName].dataItem());
        });
        columnsToRemove.forEach(column => this.columns.remove(column));
    }
    _updateContentViewModel(content) {
        super._updateContentViewModel(content);
        content.ViewModel = _jquery_helpers_1.deepExtend(content.ViewModel || {}, this.gridOptions._getViewModel(), this.columnFilterOptions._getViewModel());
        if (!!content.ViewModel.Columns) {
            content.ViewModel.Columns.forEach(columnModel => {
                var column = this.columns().filter(column => {
                    var actualDataItem = column.actualDataItem;
                    return actualDataItem ? columnModel.DataId == actualDataItem.uniqueName() : false;
                })[0];
                _jquery_helpers_1.deepExtend(columnModel, !!column ? column._getViewModel() : {});
            });
        }
    }
    _updateDataQueryParams(params) {
        super._updateDataQueryParams(params);
        params.ClientFilter = this._gridClientFilterManager.getFilterParams();
    }
    _updateDataManagerByPartialDataSource(content, itemDataDTO) {
        this._dataManager().updateTotals(itemDataDTO);
        this._gridClientFilterManager.clearFilterParams();
    }
    _extendContentState(content) {
        super._extendContentState(content);
        content.GridClientFilterState = this._gridClientFilterManager.getFilterState();
    }
    _isAttribute(dataItem) {
        return this.columns().some(c => c._isAttribute(dataItem));
    }
    _setColumnWidthOptions(clientState) {
        if (clientState.widthOptions) {
            _model_subscriber_1.ModelSubscriber.changePropertyQuietly(this.gridOptions.columnWidthMode, () => this.gridOptions.columnWidthMode(clientState.widthOptions.mode));
            clientState.widthOptions.columnsOptions.forEach((columnOptions, index) => {
                let column = this.columns()[columnOptions.actualIndex];
                _model_subscriber_1.ModelSubscriber.changePropertyQuietly(column.widthType, () => column.widthType(columnOptions.widthType));
                _model_subscriber_1.ModelSubscriber.changePropertyQuietly(column.weight, () => column.weight(columnOptions.weight));
            });
        }
    }
    _getDefaultCalculationWindowDefinition() {
        return new grid_calc_window_definition_1.GridWindowDefinition();
    }
    _setClientState(clientState) {
        super._setClientState(clientState);
        this._setColumnWidthOptions(clientState);
    }
    _getInteractivityAxisDimensionCount() {
        return this.columns().reduce((n, col) => {
            return (col instanceof grid_columns_1.GridDimensionColumn) || (col instanceof grid_columns_1.GridHyperlinkColumn) ? n + 1 : n;
        }, 0);
    }
}
GridItem._gridColumnTypesMap = {
    'GridDimensionColumn': {
        constructor: grid_columns_1.GridDimensionColumn,
        displayName: 'DashboardWebStringId.Grid.Dimension',
        icon: 'dx-dashboard-grid-column-dimension'
    },
    'GridMeasureColumn': {
        constructor: grid_columns_1.GridMeasureColumn,
        displayName: 'DashboardWebStringId.Grid.Measure',
        icon: 'dx-dashboard-grid-column-measure'
    },
    'GridDeltaColumn': {
        constructor: grid_columns_1.GridDeltaColumn,
        displayName: 'DashboardWebStringId.Grid.Delta',
        icon: 'dx-dashboard-grid-column-delta'
    },
    'GridSparklineColumn': {
        constructor: grid_columns_1.GridSparklineColumn,
        displayName: 'DashboardWebStringId.Grid.Sparkline',
        icon: 'dx-dashboard-grid-column-sparkline'
    },
    'GridHyperlinkColumn': {
        constructor: grid_columns_1.GridHyperlinkColumn,
        displayName: 'DashboardWebStringId.Grid.Hyperlink',
        icon: 'dx-dashboard-grid-column-hyperlink'
    }
};
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], GridItem.prototype, "_setColumnWidthOptions", null);
exports.GridItem = GridItem;
serializable_model_1.itemTypesMap['Grid'] = { type: GridItem, groupName: 'common', title: 'DashboardStringId.DefaultNameGridItem', index: 10 };


/***/ }),

/***/ 59547:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GridOptions = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _grid_options_1 = __webpack_require__(1962);
class GridOptions extends serializable_model_1.SerializableModel {
    constructor(JSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(JSON, serializer);
    }
    getInfo() {
        return _grid_options_1.gridOptionsSerializationsInfo;
    }
    _getViewModel() {
        return {
            AllowCellMerge: this.allowCellMerge(),
            ColumnWidthMode: this.columnWidthMode(),
            EnableBandedRows: this.enableBandedRows(),
            ShowHorizontalLines: this.showHorizontalLines(),
            ShowVerticalLines: this.showVerticalLines(),
            ShowColumnHeaders: this.showColumnHeaders(),
            WordWrap: this.wordWrap()
        };
    }
}
exports.GridOptions = GridOptions;


/***/ }),

/***/ 51480:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gridColumnFilterOptionsSerializationsInfo = exports.updateTotals = exports.showFilterRow = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.showFilterRow = { propertyName: 'showFilterRow', modelName: '@ShowFilterRow', displayName: 'DashboardWebStringId.Grid.ShowFilterRow', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.updateTotals = { propertyName: 'updateTotals', modelName: '@UpdateTotals', displayName: 'DashboardWebStringId.Grid.UpdateTotals', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.gridColumnFilterOptionsSerializationsInfo = [exports.showFilterRow, exports.updateTotals];


/***/ }),

/***/ 13139:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.totalTypeValues = void 0;
exports.totalTypeValues = {
    commonCountTypes: ['Count'],
    commonMinMaxTypes: ['Min', 'Max'],
    numericTypes: ['Avg', 'Sum'],
    autoTypes: ['Auto']
};


/***/ }),

/***/ 40789:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gridHyperlinkColumnSerializationsInfo = exports.gridColumnUriPattern = exports.uriPatternValidationRules = exports.gridValidateUriPattern = exports.validateGridUriPattern = exports.checkGridUriPattern = exports.displayValue = exports.uri = exports.gridSparklineColumnSerializationsInfo = exports.sparklineOptions = exports.sparkline = exports.showStartEndValues = exports.gridDeltaColumnSerializationsInfo = exports.gridColumnTargetValue = exports.gridColumnActualValue = exports.gridColumnDeltaOptions = exports.gridMeasureColumnSerializationsInfo = exports.measure = exports.alwaysShowZeroLevel = exports.gridDimensionColumnSerializationsInfo = exports.dimensionDisplayMode = exports.dimension = exports.gridColumnBaseSerializationsInfo = exports.totalsTemplate = exports.widthType = exports.fixedWidth = exports.columnWeight = exports.displayMode = exports.columnType = void 0;
const _data_item_1 = __webpack_require__(44010);
const _base_metadata_1 = __webpack_require__(17916);
const delta_options_1 = __webpack_require__(86785);
const sparkline_options_1 = __webpack_require__(1103);
exports.columnType = { propertyName: 'containerType', displayName: 'DashboardWebStringId.Grid.ColumnType' };
exports.displayMode = {
    propertyName: 'displayMode', modelName: '@DisplayMode', displayName: 'DashboardWebStringId.Grid.DisplayMode', defaultVal: 'Value', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Value': 'DashboardWebStringId.Grid.DisplayMode.Value',
        'Bar': 'DashboardWebStringId.Grid.DisplayMode.Bar'
    }
};
exports.columnWeight = { propertyName: 'weight', modelName: '@Weight', displayName: 'DashboardStringId.WeightCaption', defaultVal: 75, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, category: _base_metadata_1.PropertyCategory.ViewModel,
    isTwoWay: true
};
exports.fixedWidth = { propertyName: 'fixedWidth', modelName: '@FixedWidth', displayName: 'DashboardWebStringId.Grid.FixedWidth', defaultVal: 0, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.widthType = {
    propertyName: 'widthType', modelName: '@WidthType', displayName: 'DashboardWebStringId.Grid.WidthType', defaultVal: 'Weight', simpleFormAdapterItem: 'listEditor', category: _base_metadata_1.PropertyCategory.ViewModel,
    values: {
        'Weight': 'DashboardWebStringId.Grid.WidthType.Weight',
        'FitToContent': 'DashboardWebStringId.Grid.WidthType.FitToContent',
        'FixedWidth': 'DashboardWebStringId.Grid.FixedWidth'
    },
    isTwoWay: true
};
exports.totalsTemplate = { propertyName: 'totals', modelName: 'Totals', array: true };
exports.gridColumnBaseSerializationsInfo = [_base_metadata_1.itemType, _base_metadata_1.name, exports.columnWeight, exports.fixedWidth, exports.widthType, exports.totalsTemplate];
exports.dimension = { propertyName: '__dimension', modelName: 'Dimension', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.DescriptionItemDimension' };
exports.dimensionDisplayMode = {
    propertyName: 'displayMode', modelName: '@DisplayMode', displayName: 'DashboardWebStringId.Grid.DisplayMode', defaultVal: 'Text', simpleFormAdapterItem: 'selectBoxEditor',
    values: {
        'Text': 'DashboardWebStringId.Grid.DisplayMode.Text',
        'Image': 'DashboardWebStringId.Grid.DisplayMode.Image'
    }
};
exports.gridDimensionColumnSerializationsInfo = exports.gridColumnBaseSerializationsInfo.concat([exports.dimensionDisplayMode, exports.dimension]);
exports.alwaysShowZeroLevel = { propertyName: 'alwaysShowZeroLevel', modelName: '@AlwaysShowZeroLevel', displayName: 'DashboardWebStringId.Chart.AlwaysShowZeroLevel', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.measure = { propertyName: '__measure', modelName: 'Measure', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.DescriptionItemMeasure' };
exports.gridMeasureColumnSerializationsInfo = exports.gridColumnBaseSerializationsInfo.concat([exports.displayMode, exports.alwaysShowZeroLevel, exports.measure]);
exports.gridColumnDeltaOptions = { propertyName: 'deltaOptions', modelName: 'DeltaOptions', displayName: 'DashboardWebStringId.Grid.DeltaOptions', type: delta_options_1.DeltaOptions };
exports.gridColumnActualValue = { propertyName: _base_metadata_1.actualValuePropertyName, modelName: 'ActualValue', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.ActualValueCaption' };
exports.gridColumnTargetValue = { propertyName: _base_metadata_1.targetValuePropertyName, modelName: 'TargetValue', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.TargetValueCaption' };
exports.gridDeltaColumnSerializationsInfo = exports.gridColumnBaseSerializationsInfo.concat([exports.gridColumnDeltaOptions, exports.displayMode, exports.alwaysShowZeroLevel, exports.gridColumnActualValue, exports.gridColumnTargetValue, _data_item_1.absoluteVariationNumericFormat, _data_item_1.percentVariationNumericFormat, _data_item_1.percentOfTargetNumericFormat]);
exports.showStartEndValues = { propertyName: 'showStartEndValues', modelName: '@ShowStartEndValues', displayName: 'DashboardWebStringId.Grid.ShowStartEndValues', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.sparkline = { propertyName: '__measure', modelName: 'SparklineValue', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardWebStringId.Binding.Sparkline' };
exports.sparklineOptions = { propertyName: 'sparklineOptions', modelName: 'SparklineOptions', displayName: 'DashboardWebStringId.Card.SparklineOptions', type: sparkline_options_1.SparklineOptions };
exports.gridSparklineColumnSerializationsInfo = exports.gridColumnBaseSerializationsInfo.concat([exports.showStartEndValues, exports.sparkline, exports.sparklineOptions]);
exports.uri = { propertyName: '__uriAttribute', modelName: 'UriAttribute', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.UriCaption' };
exports.displayValue = { propertyName: '__displayValue', modelName: 'DisplayValue', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.DisplayValueCaption' };
function checkGridUriPattern(value) {
    var removes = [];
    var result = '';
    for (var i = 0; i < value.length; i++) {
        if (value[i] == '{') {
            if (value.length < i + 2 || value[i + 1] != '0' || value[i + 2] != '}')
                removes.push(i);
        }
        if (value[i] == '}') {
            if (i < 2 || value[i - 1] != '0' || value[i - 2] != '{')
                removes.push(i);
        }
    }
    for (var i = 0; i < value.length; i++) {
        if (removes.indexOf(i) == -1)
            result = result + value[i];
    }
    return result;
}
exports.checkGridUriPattern = checkGridUriPattern;
function validateGridUriPattern(value) {
    var newValue = checkGridUriPattern(value);
    return newValue.length == value.length;
}
exports.validateGridUriPattern = validateGridUriPattern;
function gridValidateUriPattern(uriPattern) {
    return validateGridUriPattern(uriPattern);
}
exports.gridValidateUriPattern = gridValidateUriPattern;
exports.uriPatternValidationRules = [{ type: 'custom', validationCallback: (options) => { return gridValidateUriPattern(options.value); }, message: 'DashboardStringId.GridHyperlinkUriPatternErrorMessage' }];
exports.gridColumnUriPattern = { propertyName: 'uriPattern', modelName: '@UriPattern', displayName: 'DashboardStringId.UriPatternCaption', simpleFormAdapterItem: 'textBoxEditor', validateBeforeSet: true, editorOptions: { placeholder: '{0}' }, validationRules: exports.uriPatternValidationRules };
exports.gridHyperlinkColumnSerializationsInfo = exports.gridColumnBaseSerializationsInfo.concat([exports.uri, exports.displayValue, exports.gridColumnUriPattern]);


/***/ }),

/***/ 33801:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dashboardGridItemSerializationsInfo = exports.sparklineArgument = exports.gridColumns = exports.gridColumnFilter = exports.gridOptions = void 0;
const _data_item_1 = __webpack_require__(44010);
const _base_metadata_1 = __webpack_require__(17916);
const _data_dashboard_item_1 = __webpack_require__(66302);
const interactivity_options_1 = __webpack_require__(50045);
const grid_column_filter_options_1 = __webpack_require__(30516);
const grid_options_1 = __webpack_require__(59547);
exports.gridOptions = { propertyName: 'gridOptions', modelName: 'GridOptions', displayName: 'DashboardWebStringId.Grid.Options', type: grid_options_1.GridOptions };
exports.gridColumnFilter = { propertyName: 'columnFilterOptions', modelName: 'ColumnFilterOptions', displayName: 'DashboardWebStringId.Grid.GridColumnFilter', type: grid_column_filter_options_1.GridColumnFilterOptions };
exports.gridColumns = { propertyName: 'columns', modelName: 'GridColumns', displayName: 'DashboardStringId.PivotCalculationAlongColumns', array: true };
exports.sparklineArgument = { propertyName: _base_metadata_1.sparklineArgumentPropertyName, modelName: 'SparklineArgument', displayName: 'DashboardStringId.GridCalculationAlongSparklineArgument', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.dashboardGridItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat(exports.gridColumns, exports.sparklineArgument, exports.gridOptions, interactivity_options_1._dashboardItemInteractivityOptionsMeta, exports.gridColumnFilter);


/***/ }),

/***/ 1962:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gridOptionsSerializationsInfo = exports.wordWrap = exports.showColumnHeaders = exports.showHorizontalLines = exports.showVerticalLines = exports.enableBandedRows = exports.columnWidthMode = exports.allowCellMerge = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.allowCellMerge = { propertyName: 'allowCellMerge', modelName: '@AllowGridCellMerge', displayName: 'DashboardWebStringId.Grid.MergeCells', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.columnWidthMode = {
    propertyName: 'columnWidthMode', modelName: '@ColumnWidthMode', displayName: 'DashboardWebStringId.Grid.ColumnWidthMode', defaultVal: 'AutoFitToGrid', simpleFormAdapterItem: 'listEditor', category: _base_metadata_1.PropertyCategory.ViewModel,
    values: {
        'AutoFitToContents': 'DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode',
        'AutoFitToGrid': 'DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode',
        'Manual': 'DashboardWebStringId.Grid.ManualGridColumnWidthMode'
    }
};
exports.enableBandedRows = { propertyName: 'enableBandedRows', modelName: '@EnableBandedRows', displayName: 'DashboardWebStringId.Grid.BandedRows', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.showVerticalLines = { propertyName: 'showVerticalLines', modelName: '@ShowVerticalLines', displayName: 'DashboardWebStringId.Grid.VerticalLines', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.showHorizontalLines = { propertyName: 'showHorizontalLines', modelName: '@ShowHorizontalLines', displayName: 'DashboardWebStringId.Grid.HorizontalLines', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.showColumnHeaders = { propertyName: 'showColumnHeaders', modelName: '@ShowColumnHeaders', displayName: 'DashboardWebStringId.Grid.ColumnHeaders', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.wordWrap = { propertyName: 'wordWrap', modelName: '@WordWrap', displayName: 'DashboardWebStringId.Grid.WordWrap', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.gridOptionsSerializationsInfo = [exports.enableBandedRows, exports.showVerticalLines, exports.showHorizontalLines, exports.allowCellMerge, exports.showColumnHeaders, exports.columnWidthMode, exports.wordWrap];


/***/ }),

/***/ 86961:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GroupItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const dashboard_item_1 = __webpack_require__(5815);
const _group_item_1 = __webpack_require__(57216);
class GroupItem extends dashboard_item_1.DashboardItem {
    constructor(dashboardItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dashboardItemJSON, serializer);
    }
    _getInfoCore() {
        return _group_item_1.groupItemSerializationInfo;
    }
    _getDefaultItemType() {
        return 'Group';
    }
}
exports.GroupItem = GroupItem;
serializable_model_1.itemTypesMap['Group'] = { type: GroupItem, groupName: 'layout', title: 'DashboardStringId.DefaultNameItemGroup', index: 25 };


/***/ }),

/***/ 57216:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.groupItemSerializationInfo = void 0;
const _dashboard_item_1 = __webpack_require__(37710);
const interactivity_options_1 = __webpack_require__(50045);
exports.groupItemSerializationInfo = _dashboard_item_1.dashboardItemSerializationsInfo.concat([interactivity_options_1._groupItemInteractivityOptionsMeta]);


/***/ }),

/***/ 1975:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImageItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const serializable_model_1 = __webpack_require__(29591);
const dashboard_item_1 = __webpack_require__(5815);
const _image_item_1 = __webpack_require__(67286);
class ImageItem extends dashboard_item_1.DashboardItem {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.imageType = ko.observable('linked');
        if (this.image64()) {
            this.imageType('embedded');
        }
        else {
            this.imageType('linked');
        }
        this.imageType.subscribe(imageType => {
            switch (imageType) {
                case 'embedded':
                    this.urlPath(null);
                    break;
                default:
                    this.image64(null);
                    break;
            }
        });
    }
    _getInfoCore() {
        return _image_item_1.imageDashboardItemSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'Image';
    }
    _updateContentViewModel(content) {
        super._updateContentViewModel(content);
        content.ViewModel.SizeMode = this.sizeMode();
        content.ViewModel.HorizontalAlignment = this.horizontalAlignment();
        content.ViewModel.VerticalAlignment = this.verticalAlignment();
    }
}
exports.ImageItem = ImageItem;
serializable_model_1.itemTypesMap['Image'] = { type: ImageItem, groupName: 'common', title: 'DashboardStringId.DefaultNameImageItem', index: 90 };


/***/ }),

/***/ 28093:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KpiElement = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const data_item_container_1 = __webpack_require__(76885);
const _kpi_element_1 = __webpack_require__(42209);
class KpiElement extends data_item_container_1.DataItemContainer {
    constructor(dataItemProvider, modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this._displayNameSeparator = 'vs';
        dataItemProvider._attachDataItem(this, _kpi_element_1.kpiItemActualValue.propertyName);
        dataItemProvider._attachDataItem(this, _kpi_element_1.kpiItemTargetValue.propertyName);
    }
    _getDataId() {
        var dataItem = this.actualValue() || this.targetValue();
        return dataItem && dataItem.uniqueName() || null;
    }
    _getInfoCore() {
        return _kpi_element_1.kpiElementSerializationsInfo;
    }
    _getBindingModel() {
        return [
            {
                propertyName: _kpi_element_1.kpiItemActualValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.ActualValueCaption'
            },
            {
                propertyName: _kpi_element_1.kpiItemTargetValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.TargetValueCaption'
            }
        ];
    }
}
exports.KpiElement = KpiElement;


/***/ }),

/***/ 5442:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KpiItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const series_item_1 = __webpack_require__(21741);
const _kpi_item_1 = __webpack_require__(73236);
class KpiItem extends series_item_1.SeriesItem {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    _getInfoCore() {
        return _kpi_item_1.kpiDashboardItemSerializationsInfo;
    }
    _getMasterFilterMode() { return this.interactivityOptions.masterFilterMode(); }
    _getDrillDownEnabled() { return this.interactivityOptions.isDrillDownEnabled(); }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
}
exports.KpiItem = KpiItem;


/***/ }),

/***/ 42209:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.kpiElementSerializationsInfo = exports.kpiItemTargetValue = exports.kpiItemActualValue = exports.kpiItemdeltaOptions = void 0;
const _data_item_1 = __webpack_require__(44010);
const _base_metadata_1 = __webpack_require__(17916);
const delta_options_1 = __webpack_require__(86785);
exports.kpiItemdeltaOptions = { propertyName: 'deltaOptions', modelName: 'DeltaOptions', displayName: 'DashboardWebStringId.Grid.DeltaOptions', type: delta_options_1.DeltaOptions };
exports.kpiItemActualValue = { propertyName: _base_metadata_1.actualValuePropertyName, modelName: 'ActualValue', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.ActualValueCaption' };
exports.kpiItemTargetValue = { propertyName: _base_metadata_1.targetValuePropertyName, modelName: 'TargetValue', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.TargetValueCaption' };
exports.kpiElementSerializationsInfo = [_base_metadata_1.itemType, _base_metadata_1.name, exports.kpiItemdeltaOptions, exports.kpiItemActualValue, exports.kpiItemTargetValue, _data_item_1.absoluteVariationNumericFormat, _data_item_1.percentVariationNumericFormat, _data_item_1.percentOfTargetNumericFormat];


/***/ }),

/***/ 73236:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.kpiDashboardItemSerializationsInfo = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _series_item_1 = __webpack_require__(77270);
const interactivity_options_1 = __webpack_require__(50045);
exports.kpiDashboardItemSerializationsInfo = _series_item_1.seriesDashboardItemSerializationsInfo.concat([_base_metadata_1.contentArrangementMode, _base_metadata_1.contentLineCount, interactivity_options_1._dashboardItemInteractivityOptionsMeta]);


/***/ }),

/***/ 54081:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BubbleMapItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const geo_point_map_item_base_1 = __webpack_require__(85596);
const _bubble_map_item_1 = __webpack_require__(7240);
class BubbleMapItem extends geo_point_map_item_base_1.GeoPointMapItemBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this._attachDataItem(this, _bubble_map_item_1.bubbleMapWeight.propertyName);
        this._attachDataItem(this, _bubble_map_item_1.bubbleMapColor.propertyName);
    }
    _getInfoCore() {
        return _bubble_map_item_1.bubbleMapDashboardItemSerializationsInfo;
    }
    _clearBindings() {
        super._clearBindings();
        this.__weight.uniqueName(null);
        this.__color.uniqueName(null);
    }
    _getDefaultItemType() {
        return 'BubbleMap';
    }
}
exports.BubbleMapItem = BubbleMapItem;
serializable_model_1.itemTypesMap['BubbleMap'] = { type: BubbleMapItem, groupName: 'maps', title: 'DashboardWebStringId.DefaultNameBubbleMapItem', index: 230 };


/***/ }),

/***/ 61249:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChoroplethMapItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const _base_metadata_1 = __webpack_require__(17916);
const serializable_model_1 = __webpack_require__(29591);
const chorolpeth_map_1 = __webpack_require__(65032);
const map_item_1 = __webpack_require__(65422);
const _chorolpeth_map_item_1 = __webpack_require__(54674);
class ChoroplethMapItem extends map_item_1.MapItem {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.maps = analytics_utils_1.deserializeArray(modelJson.Maps, (item) => this._createMap(item, serializer));
        this._attachDataItem(this, _chorolpeth_map_item_1.attributeDimension.propertyName);
        this._shapeFilesAttributeNameList.subscribe(list => {
            if ((!this.attributeName() && list && list.length > 0) || list.indexOf(this.attributeName()) === -1) {
                this.attributeName(list[0]);
            }
        });
    }
    _getInteractivityDimensionLinks() {
        return [this.__attributeDimension];
    }
    _clearBindings() {
        super._clearBindings();
        this.maps.removeAll();
    }
    _createMap(mapJSON, serializer = new analytics_utils_1.ModelSerializer()) {
        var itemType = mapJSON['@ItemType'];
        return new ChoroplethMapItem.choroplethMapTypesMap[itemType].constructor(this, mapJSON, serializer);
    }
    _getInfoCore() {
        return _chorolpeth_map_item_1.choroplethMapDashboardItemSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'ChoroplethMap';
    }
    _getLayersCount() {
        return !!this.maps ? this.maps().length : 0;
    }
    _getLayerName() {
        return this._getDataItemContainerDisplayName(this.maps()[this._selectedElementIndex() || 0]);
    }
    _updateContentViewModel(content) {
        super._updateContentViewModel(content);
        var mapContent = this._paneContentHolder.getContent(_base_metadata_1.PropertyCategory.Map);
        if (mapContent && mapContent.ViewModel) {
            content.ViewModel.ToolTipAttributeName = mapContent.ViewModel.ToolTipAttributeName;
            if (mapContent.ViewModel.ChoroplethColorizer) {
                if (!content.ViewModel.ChoroplethColorizer)
                    content.ViewModel.ChoroplethColorizer = {};
                content.ViewModel.ChoroplethColorizer.AttributeName = mapContent.ViewModel.ChoroplethColorizer.AttributeName;
            }
        }
    }
}
exports.ChoroplethMapItem = ChoroplethMapItem;
ChoroplethMapItem.choroplethMapTypesMap = {
    'ValueMap': {
        constructor: chorolpeth_map_1.ValueMap,
        displayName: 'DashboardWebStringId.Map.ValueMap',
        icon: 'dx-dashboard-grid-column-measure'
    },
    'DeltaMap': {
        constructor: chorolpeth_map_1.DeltaMap,
        displayName: 'DashboardWebStringId.Map.DeltaMap',
        icon: 'dx-dashboard-grid-column-delta'
    }
};
serializable_model_1.itemTypesMap['ChoroplethMap'] = { type: ChoroplethMapItem, groupName: 'maps', title: 'DashboardWebStringId.DefaultNameChoroplethMapItem', index: 220 };


/***/ }),

/***/ 65032:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeltaMap = exports.ValueMap = exports.ChoroplethMap = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const data_item_container_1 = __webpack_require__(76885);
const _chorolpeth_map_1 = __webpack_require__(60653);
class ChoroplethMap extends data_item_container_1.DataItemContainer {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this._displayNameSeparator = 'vs';
    }
}
exports.ChoroplethMap = ChoroplethMap;
class ValueMap extends ChoroplethMap {
    constructor(dataItemProvider, modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        dataItemProvider._attachDataItem(this, _chorolpeth_map_1.chorolpethMapValue.propertyName);
    }
    _getInfoCore() {
        return _chorolpeth_map_1.valueMapSerializationsInfo;
    }
    _getDataId() {
        return this.value() && this.value().uniqueName() || null;
    }
    _getBindingModel() {
        return [
            {
                propertyName: _chorolpeth_map_1.chorolpethMapValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardWebStringId.Binding.SetValue'
            }
        ];
    }
    _getDefaultItemType() { return 'ValueMap'; }
}
exports.ValueMap = ValueMap;
class DeltaMap extends ChoroplethMap {
    constructor(dataItemProvider, modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        dataItemProvider._attachDataItem(this, _chorolpeth_map_1.deltaMapActualValue.propertyName);
        dataItemProvider._attachDataItem(this, _chorolpeth_map_1.deltaMapTargetValue.propertyName);
    }
    _getInfoCore() {
        return _chorolpeth_map_1.deltaMapSerializationsInfo;
    }
    _getDataId() {
        var dataItem = this.actualValue() && this.targetValue();
        return dataItem && dataItem.uniqueName() || null;
    }
    _getBindingModel() {
        return [
            {
                propertyName: _chorolpeth_map_1.deltaMapActualValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.ActualValueCaption'
            },
            {
                propertyName: _chorolpeth_map_1.deltaMapTargetValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.TargetValueCaption'
            }
        ];
    }
    _getDefaultItemType() { return 'DeltaMap'; }
}
exports.DeltaMap = DeltaMap;


/***/ }),

/***/ 57615:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomShapefileData = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _custom_shape_file_data_1 = __webpack_require__(16322);
class CustomShapefileData extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.shapeData.subscribe(newData => !newData && this.attributeData(_custom_shape_file_data_1.attributeData.defaultVal));
    }
    getInfo() {
        return _custom_shape_file_data_1.customShapefileDataSerializationsInfo;
    }
}
exports.CustomShapefileData = CustomShapefileData;


/***/ }),

/***/ 37797:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomShapefile = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _custom_shape_file_1 = __webpack_require__(51692);
const _custom_shape_file_data_1 = __webpack_require__(16322);
class CustomShapefile extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.url.subscribe(newUrl => !!newUrl && this.data.shapeData(_custom_shape_file_data_1.shapeData.defaultVal));
        this.data.shapeData.subscribe(newData => !!newData && this.url(undefined));
    }
    getInfo() {
        return _custom_shape_file_1.customShapefileSerializationsInfo;
    }
}
exports.CustomShapefile = CustomShapefile;


/***/ }),

/***/ 85596:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GeoPointMapItemBase = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const data_item_1 = __webpack_require__(44650);
const _dimension_filter_values_1 = __webpack_require__(66637);
const _data_field_1 = __webpack_require__(68951);
const _array_utils_1 = __webpack_require__(60618);
const _utils_1 = __webpack_require__(66358);
const _base_metadata_1 = __webpack_require__(17916);
const map_item_1 = __webpack_require__(65422);
const _geo_point_map_item_base_1 = __webpack_require__(13886);
class GeoPointMapItemBase extends map_item_1.MapItem {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.tooltipDimensions = ko.observableArray([]);
        this._selectedClusters = ko.observable();
        this._clustersContent = ko.observable();
        this._processDataRequest = () => {
            var clientState = this._clientState();
            if (clientState) {
                this._dataRequestArgs(Object.assign({ unclusteredSelection: this._selectionValues.peek() }, clientState.clusterizationInfo));
            }
        };
        this._actualSelectedValues = ko.computed(() => {
            return this.enableClustering() && this._selectedClusters() || this._selectionValues();
        });
        this.__tooltipDimensions = analytics_utils_1.deserializeArray(modelJson.TooltipDimensions, (item) => new data_item_1.DataItemLink(this, item, serializer));
        this._subscribeDataItemLinkArrays(_geo_point_map_item_base_1.tooltipDimensions);
        this._attachDataItem(this, _geo_point_map_item_base_1.latitude.propertyName);
        this._attachDataItem(this, _geo_point_map_item_base_1.longitude.propertyName);
        this.enableClustering.subscribe(newValue => {
            if (newValue) {
                this._processDataRequest();
            }
        });
    }
    get _actualSelectionValues() {
        return this._actualSelectedValues;
    }
    _clearBindings() {
        super._clearBindings();
        this.__tooltipDimensions.removeAll();
        this.__latitude.uniqueName(null);
        this.__longitude.uniqueName(null);
    }
    _getInfoCore() {
        return _geo_point_map_item_base_1.geoPointMapDashboardItemBaseSerializationsInfo;
    }
    _getInteractivityDimensionLinks() {
        return [this.__latitude, this.__longitude];
    }
    _getExportingSelection() {
        return this._selectedClusters() || (this._outputFilter() && this._outputFilter().values);
    }
    _getDisplayFilterValues(limitCount) {
        var metaData = this._dataManager() ? this._dataManager().getMetaData() : undefined, selection = this._getExportingSelection(), outFilterValues = [], latName = this.__latitude.uniqueName(), lonName = this.__longitude.uniqueName();
        var dataStorage = this._dataManager() ? this._dataManager().getDataStorage() : undefined;
        if (dataStorage && selection && this.__tooltipDimensions().length) {
            var slice = dataStorage.getSliceByIds(this._getSliceDimensions()
                .map(dataItemLink => dataItemLink.uniqueName())
                .filter(uniqueName => !!uniqueName));
            this.__tooltipDimensions().forEach((tooltipDimension) => {
                var uniqueValues = {}, valueCount = 0, filterValues = new _dimension_filter_values_1.DimensionFilterValues(this._getDimensionDisplayName(tooltipDimension.dataItem().uniqueName())), format = metaData ? metaData.getDimensionFormat(tooltipDimension.uniqueName()) : undefined, isOlap = _data_field_1.DataField.isOlap(tooltipDimension.dataItem().dataMember());
                slice.forEach((dataKey) => {
                    var rowKey = dataKey.rowKey, latitudeValue = slice.getKeyValue(rowKey, latName), longitudeValue = slice.getKeyValue(rowKey, lonName);
                    selection.every((selectionValue) => {
                        if (latitudeValue === selectionValue[0] && longitudeValue === selectionValue[1]) {
                            if (!!limitCount && valueCount >= limitCount) {
                                filterValues.Truncated = true;
                                return false;
                            }
                            var value = slice.getKeyValue(rowKey, tooltipDimension.uniqueName());
                            if (!uniqueValues[value]) {
                                uniqueValues[value] = value;
                                valueCount++;
                            }
                        }
                        return true;
                    });
                });
                filterValues.Values = Object.keys(uniqueValues).map(v => this._createFormattableValue(tooltipDimension.dataItem(), v));
                outFilterValues.push(filterValues);
            });
        }
        return outFilterValues;
    }
    _getSliceDimensions() {
        return [this.__latitude, this.__longitude].concat(this.__tooltipDimensions());
    }
    _updateContentViewModel(content) {
        super._updateContentViewModel(content);
        var mapContent = this._paneContentHolder.getContent(_base_metadata_1.PropertyCategory.Data);
        this._clustersContent(mapContent.ClustersContent);
        if (content && content.SelectedValues) {
            this._setSelectionData(content.SelectedValues);
        }
    }
    _setSelectionData(selection) {
        if (this._clustersContent()) {
            let realSelectionPoints = [];
            this._clustersContent().forEach(clusterDto => {
                var x = clusterDto.Cluster.Latitude, y = clusterDto.Cluster.Longitude;
                if ((selection || []).filter((s) => {
                    return s[0] === x && s[1] === y;
                })[0]) {
                    clusterDto.Points.forEach(pointInCluster => realSelectionPoints.push(pointInCluster));
                }
            });
            this._selectedClusters(selection);
            selection = realSelectionPoints;
        }
        if (!_array_utils_1.arrayEquals(this._selectionValues(), selection)) {
            this._selectionValues(selection);
            if (this.enableClustering()) {
                this._processDataRequest();
            }
        }
    }
    _isTopNEnabled(dataItem) {
        return this.tooltipDimensions.indexOf(dataItem) == -1 && this.hiddenDimensions().indexOf(dataItem) == -1;
    }
}
__decorate([
    _utils_1.collectionItemType('TooltipDimension')
], GeoPointMapItemBase.prototype, "__tooltipDimensions", void 0);
exports.GeoPointMapItemBase = GeoPointMapItemBase;


/***/ }),

/***/ 10102:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GeoPointMapItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const data_item_1 = __webpack_require__(44650);
const serializable_model_1 = __webpack_require__(29591);
const geo_point_map_item_base_1 = __webpack_require__(85596);
const _geo_point_map_item_1 = __webpack_require__(55313);
class GeoPointMapItem extends geo_point_map_item_base_1.GeoPointMapItemBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this._attachDataItem(this, _geo_point_map_item_1.value.propertyName);
        this.__value._specifics.acceptableShapingType = data_item_1.AcceptableShapingType.String;
    }
    _getInfoCore() {
        return _geo_point_map_item_1.geoPointMapDashboardItemSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'GeoPointMap';
    }
}
exports.GeoPointMapItem = GeoPointMapItem;
serializable_model_1.itemTypesMap['GeoPointMap'] = { type: GeoPointMapItem, groupName: 'maps', title: 'DashboardWebStringId.DefaultNameGeoPointMapItem', index: 210 };


/***/ }),

/***/ 65422:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MapItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const data_item_1 = __webpack_require__(44650);
const _array_utils_1 = __webpack_require__(60618);
const _utils_1 = __webpack_require__(66358);
const _base_metadata_1 = __webpack_require__(17916);
const data_dashboard_item_1 = __webpack_require__(70355);
const _custom_shape_file_data_1 = __webpack_require__(16322);
const _map_item_1 = __webpack_require__(1035);
class MapItem extends data_dashboard_item_1.DataDashboardItem {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.tooltipMeasures = ko.observableArray([]);
        this._isGeometryChanged = false;
        this._shapeFilesAttributeNameList = ko.observableArray();
        this._initialExtentChanged = ko.observable(false);
        this._isGeometryChangedCallback = () => {
            this._isGeometryChanged = true;
            this.viewport.createViewerPaddings(true);
        };
        this.__tooltipMeasures = analytics_utils_1.deserializeArray(modelJson.TooltipMeasures, (item) => new data_item_1.DataItemLink(this, item, serializer));
        this._subscribeDataItemLinkArrays(_map_item_1.tooltipMeasures);
        this.__tooltipMeasures.subscribe((links) => {
            this._setLinkCollectionAcceptableShapingType(links, data_item_1.AcceptableShapingType.String);
        });
        this._setLinkCollectionAcceptableShapingType(this.__tooltipMeasures(), data_item_1.AcceptableShapingType.String);
        if (!modelJson[_map_item_1.viewport.modelName] &&
            !modelJson[_map_item_1.area.modelName] &&
            !modelJson[_custom_shape_file_data_1.shapeData.modelName]) {
            this.viewport._set({
                'TopLatitude': 83.64513000000001,
                'BottomLatitude': -55.61182999999996,
                'CenterPointLatitude': 44.08908074480383,
                'CenterPointLongitude': 1.4210854715202004e-13,
                'LeftLongitude': -179.99999999999997,
                'RightLongitude': 180
            });
        }
        this._supportedUIStates(['error', 'loading']);
    }
    _clearBindings() {
        super._clearBindings();
        this.__tooltipMeasures.removeAll();
    }
    _getInfoCore() {
        return _map_item_1.mapDashboardItemSerializationsInfo;
    }
    _isCalculationSupported() {
        return false;
    }
    _getMasterFilterMode() { return this.interactivityOptions.masterFilterMode(); }
    _getDrillDownEnabled() { return false; }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
    _setClientState(clientState) {
        super._setClientState(clientState);
    }
    _getContentCategories() {
        return super._getContentCategories().concat([_base_metadata_1.PropertyCategory.Map]);
    }
    _updateContentViewModel(content) {
        super._updateContentViewModel(content);
        var mapContent = this._paneContentHolder.getContent(_base_metadata_1.PropertyCategory.Map);
        if (!_array_utils_1.areArraysEqual(this._shapeFilesAttributeNameList(), mapContent.MapAttributesNames)) {
            this._shapeFilesAttributeNameList(mapContent.MapAttributesNames);
        }
        if (mapContent && mapContent.ViewModel) {
            content.ViewModel.MapItems = mapContent.ViewModel.MapItems;
            content.ViewModel.ShapeTitleAttributeName = mapContent.ViewModel.ShapeTitleAttributeName;
            content.FullViewport = mapContent.FullViewport;
            if (this._isGeometryChanged) {
                this.viewport._set(mapContent.FullViewport);
                this._isGeometryChanged = false;
            }
        }
        content.ViewModel.Viewport = this.viewport._createViewModel();
    }
    _isSortingEnabled() {
        return false;
    }
}
__decorate([
    _utils_1.collectionItemType('TooltipMeasure')
], MapItem.prototype, "__tooltipMeasures", void 0);
exports.MapItem = MapItem;


/***/ }),

/***/ 26114:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MapLegend = exports.WeightedLegend = exports.MapLegendBase = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _map_legend_1 = __webpack_require__(99983);
class MapLegendBase extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
}
exports.MapLegendBase = MapLegendBase;
class WeightedLegend extends MapLegendBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _map_legend_1.weightedLegendSerializationsInfo;
    }
}
exports.WeightedLegend = WeightedLegend;
class MapLegend extends MapLegendBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _map_legend_1.mapLegendSerializationsInfo;
    }
}
exports.MapLegend = MapLegend;


/***/ }),

/***/ 73505:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MapViewport = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const _undo_engine_helper_1 = __webpack_require__(2908);
const serializable_model_1 = __webpack_require__(29591);
const _map_viewport_1 = __webpack_require__(22081);
class MapViewport extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _map_viewport_1.mapViewportSerializationsInfo;
    }
    _set(viewport, paddings = true) {
        if (!!viewport) {
            this.topLatitude(viewport.TopLatitude);
            this.bottomLatitude(viewport.BottomLatitude);
            this.leftLongitude(viewport.LeftLongitude);
            this.rightLongitude(viewport.RightLongitude);
            this.centerPointLatitude(viewport.CenterPointLatitude);
            this.centerPointLongitude(viewport.CenterPointLongitude);
            this.createViewerPaddings(paddings);
        }
    }
    _createViewModel() {
        return {
            TopLatitude: this.topLatitude(),
            BottomLatitude: this.bottomLatitude(),
            CenterPointLatitude: this.centerPointLatitude(),
            CenterPointLongitude: this.centerPointLongitude(),
            LeftLongitude: this.leftLongitude(),
            RightLongitude: this.rightLongitude(),
            CreateViewerPaddings: this.createViewerPaddings()
        };
    }
}
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], MapViewport.prototype, "_set", null);
exports.MapViewport = MapViewport;


/***/ }),

/***/ 7240:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bubbleMapDashboardItemSerializationsInfo = exports.bubbleMapColor = exports.bubbleMapWeight = void 0;
const _data_item_1 = __webpack_require__(44010);
const _base_metadata_1 = __webpack_require__(17916);
const _geo_point_map_item_base_1 = __webpack_require__(13886);
const _map_item_1 = __webpack_require__(1035);
exports.bubbleMapWeight = { propertyName: _base_metadata_1.weightPropertyName, modelName: 'Weight', displayName: 'DashboardStringId.WeightCaption', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.bubbleMapColor = { propertyName: _base_metadata_1.colorPropertyName, modelName: 'Color', displayName: 'DashboardStringId.DescriptionItemColor', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.bubbleMapDashboardItemSerializationsInfo = _geo_point_map_item_base_1.geoPointMapDashboardItemBaseSerializationsInfo.concat([exports.bubbleMapWeight, exports.bubbleMapColor, _map_item_1.colorLegend, _map_item_1.weightedLegend]);


/***/ }),

/***/ 54674:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.choroplethMapDashboardItemSerializationsInfo = exports.tooltipAttributeName = exports.attributeName = exports.attributeDimension = exports.includeSummaryValueToShapeTitle = exports.maps = void 0;
const _data_item_1 = __webpack_require__(44010);
const _base_metadata_1 = __webpack_require__(17916);
const _map_item_1 = __webpack_require__(1035);
exports.maps = {
    propertyName: 'maps',
    modelName: 'Maps',
    displayName: 'DashboardWebStringId.Binding.Maps',
    array: true
};
exports.includeSummaryValueToShapeTitle = {
    propertyName: 'includeSummaryValueToShapeTitle',
    modelName: '@IncludeSummaryValueToShapeTitle',
    displayName: 'DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle',
    defaultVal: false,
    simpleFormAdapterItem: 'yesNoButtonGroupEditor',
    from: _base_metadata_1.parseBool
};
exports.attributeDimension = {
    propertyName: '__attributeDimension',
    modelName: 'AttributeDimension',
    displayName: 'DashboardWebStringId.Map.AttributeDimension',
    info: _data_item_1.dataItemLinkSerializationsInfo
};
exports.attributeName = {
    propertyName: 'attributeName',
    modelName: '@AttributeName',
    displayName: 'DashboardWebStringId.Map.AttributeName',
    defaultVal: '',
    category: _base_metadata_1.PropertyCategory.Map
};
exports.tooltipAttributeName = {
    propertyName: 'tooltipAttributeName',
    modelName: '@ToolTopAttributeName',
    displayName: 'DashboardWebStringId.Map.TooltipAttribute',
    defaultVal: '',
    category: _base_metadata_1.PropertyCategory.Map
};
exports.choroplethMapDashboardItemSerializationsInfo = _map_item_1.mapDashboardItemSerializationsInfo.concat([exports.maps, exports.attributeDimension, exports.attributeName, exports.includeSummaryValueToShapeTitle, exports.tooltipAttributeName, _map_item_1.colorLegend]);


/***/ }),

/***/ 60653:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deltaMapSerializationsInfo = exports.deltaName = exports.actualValueName = exports.deltaMapDeltaOptions = exports.deltaMapTargetValue = exports.deltaMapActualValue = exports.valueMapSerializationsInfo = exports.chorolpethMapValue = exports.valueName = void 0;
const _data_item_1 = __webpack_require__(44010);
const _base_metadata_1 = __webpack_require__(17916);
const delta_options_1 = __webpack_require__(86785);
exports.valueName = { propertyName: 'valueName', modelName: '@ValueName', displayName: 'DashboardWebStringId.Map.TooltipCaption', simpleFormAdapterItem: 'textBoxEditor' };
exports.chorolpethMapValue = { propertyName: _base_metadata_1.valuePropertyName, modelName: 'Value', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.valueMapSerializationsInfo = [_base_metadata_1.itemType, _base_metadata_1.name, exports.chorolpethMapValue, exports.valueName];
exports.deltaMapActualValue = { propertyName: _base_metadata_1.actualValuePropertyName, modelName: 'ActualValue', displayName: 'DashboardStringId.ActualValueCaption', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.deltaMapTargetValue = { propertyName: _base_metadata_1.targetValuePropertyName, modelName: 'TargetValue', displayName: 'DashboardStringId.TargetValueCaption', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.deltaMapDeltaOptions = { propertyName: 'deltaOptions', modelName: 'DeltaOptions', displayName: 'DashboardWebStringId.Grid.DeltaOptions', type: delta_options_1.DeltaOptions };
exports.actualValueName = { propertyName: 'actualValueName', modelName: '@ActualValueName', displayName: 'DashboardWebStringId.Map.TooltipActualValueCaption', simpleFormAdapterItem: 'textBoxEditor' };
exports.deltaName = { propertyName: 'deltaName', modelName: '@DeltaName', displayName: 'DashboardWebStringId.Map.TooltipDeltaCaption', simpleFormAdapterItem: 'textBoxEditor' };
exports.deltaMapSerializationsInfo = [_base_metadata_1.itemType, _base_metadata_1.name, exports.deltaMapActualValue, exports.deltaMapTargetValue, exports.actualValueName, exports.deltaName, exports.deltaMapDeltaOptions, _data_item_1.absoluteVariationNumericFormat, _data_item_1.percentVariationNumericFormat, _data_item_1.percentOfTargetNumericFormat];


/***/ }),

/***/ 16322:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.customShapefileDataSerializationsInfo = exports.attributeData = exports.shapeData = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.shapeData = { propertyName: 'shapeData', modelName: '@ShapeData', displayName: 'DashboardWebStringId.Map.CustomMapFile', defaultVal: undefined, category: _base_metadata_1.PropertyCategory.Map };
exports.attributeData = { propertyName: 'attributeData', modelName: '@AttributeData', displayName: 'DashboardWebStringId.Map.CustomAttributeFile', defaultVal: undefined, category: _base_metadata_1.PropertyCategory.Map };
exports.customShapefileDataSerializationsInfo = [exports.shapeData, exports.attributeData];


/***/ }),

/***/ 51692:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.customShapefileSerializationsInfo = exports.customShapefileData = exports.customShapefileUrl = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const custom_shape_file_data_1 = __webpack_require__(57615);
exports.customShapefileUrl = { propertyName: 'url', modelName: '@Url', displayName: 'DashboardWebStringId.Map.CustomMapUrl', defaultVal: undefined, simpleFormAdapterItem: 'textBoxEditor', editorOptions: { placeholder: 'http://www.example.com/map.shp' }, category: _base_metadata_1.PropertyCategory.Map };
exports.customShapefileData = { propertyName: 'data', modelName: 'Data', type: custom_shape_file_data_1.CustomShapefileData };
exports.customShapefileSerializationsInfo = [exports.customShapefileUrl, exports.customShapefileData];


/***/ }),

/***/ 13886:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.geoPointMapDashboardItemBaseSerializationsInfo = exports.enableClustering = exports.tooltipDimensions = exports.longitude = exports.latitude = void 0;
const _data_item_1 = __webpack_require__(44010);
const _base_metadata_1 = __webpack_require__(17916);
const _map_item_1 = __webpack_require__(1035);
exports.latitude = { propertyName: '__latitude', modelName: 'Latitude', displayName: 'DashboardStringId.Latitude', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.longitude = { propertyName: '__longitude', modelName: 'Longitude', displayName: 'DashboardStringId.Longitude', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.tooltipDimensions = { propertyName: '__tooltipDimensions', modelName: 'TooltipDimensions', displayName: 'DashboardWebStringId.Map.TooltipDimensions', array: true };
exports.enableClustering = { propertyName: 'enableClustering', modelName: '@EnableClustering', displayName: 'DashboardWebStringId.GeoPointMapClusterization', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.geoPointMapDashboardItemBaseSerializationsInfo = _map_item_1.mapDashboardItemSerializationsInfo.concat([exports.latitude, exports.longitude, exports.tooltipDimensions, exports.enableClustering]);


/***/ }),

/***/ 55313:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.geoPointMapDashboardItemSerializationsInfo = exports.value = void 0;
const _data_item_1 = __webpack_require__(44010);
const _base_metadata_1 = __webpack_require__(17916);
const _geo_point_map_item_base_1 = __webpack_require__(13886);
exports.value = { propertyName: _base_metadata_1.valuePropertyName, modelName: 'Value', displayName: 'DashboardWebStringId.Chart.Value', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.geoPointMapDashboardItemSerializationsInfo = _geo_point_map_item_base_1.geoPointMapDashboardItemBaseSerializationsInfo.concat([exports.value]);


/***/ }),

/***/ 1035:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mapDashboardItemSerializationsInfo = exports.shapeTitleAttributeName = exports.lockNavigation = exports.tooltipMeasures = exports.viewport = exports.customShapefile = exports.weightedLegend = exports.colorLegend = exports.area = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _data_dashboard_item_1 = __webpack_require__(66302);
const interactivity_options_1 = __webpack_require__(50045);
const custom_shape_file_1 = __webpack_require__(37797);
const map_legend_1 = __webpack_require__(26114);
const map_viewport_1 = __webpack_require__(73505);
exports.area = {
    propertyName: 'area', modelName: '@ShapefileArea', defaultVal: 'WorldCountries',
    values: {
        'WorldCountries': 'DashboardWebStringId.Map.Area.WorldCountries',
        'Europe': 'DashboardWebStringId.Map.Area.Europe',
        'Asia': 'DashboardWebStringId.Map.Area.Asia',
        'NorthAmerica': 'DashboardWebStringId.Map.Area.NorthAmerica',
        'SouthAmerica': 'DashboardWebStringId.Map.Area.SouthAmerica',
        'Africa': 'DashboardWebStringId.Map.Area.Africa',
        'USA': 'DashboardWebStringId.Map.Area.USA',
        'Canada': 'DashboardWebStringId.Map.Area.Canada',
        'Custom': 'DashboardWebStringId.Map.Area.Custom'
    },
    category: _base_metadata_1.PropertyCategory.Map
};
exports.colorLegend = { propertyName: 'legend', modelName: 'MapLegend', displayName: 'DashboardWebStringId.Chart.Legend', type: map_legend_1.MapLegend };
exports.weightedLegend = { propertyName: 'weightedLegend', modelName: 'WeightedLegend', displayName: 'DashboardWebStringId.AccordionTab.WeightedLegend', type: map_legend_1.WeightedLegend };
exports.customShapefile = { propertyName: 'customShapefile', modelName: 'CustomShapefile', type: custom_shape_file_1.CustomShapefile };
exports.viewport = { propertyName: 'viewport', modelName: 'ViewArea', displayName: 'DashboardWebStringId.Map.Viewport', type: map_viewport_1.MapViewport };
exports.tooltipMeasures = { propertyName: '__tooltipMeasures', modelName: 'TooltipMeasures', displayName: 'DashboardWebStringId.Binding.TooltipMeasures', array: true };
exports.lockNavigation = {
    propertyName: 'lockNavigation', modelName: '@LockNavigation', displayName: 'DashboardWebStringId.MapLockNavigation', defaultVal: false, simpleFormAdapterItem: 'buttonGroupEditor', valuesArray: [
        { value: true, displayValue: 'DashboardWebStringId.MapLockNavigationLocked' },
        { value: false, displayValue: 'DashboardWebStringId.MapLockNavigationUnlocked' }
    ], from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel
};
exports.shapeTitleAttributeName = { propertyName: 'shapeTitleAttributeName', modelName: '@ShapeTitleAttributeName', displayName: 'DashboardWebStringId.Map.ShapeTitleAttribute', defaultVal: '', category: _base_metadata_1.PropertyCategory.Map };
exports.mapDashboardItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([exports.area, exports.customShapefile, exports.viewport, exports.tooltipMeasures, exports.lockNavigation, exports.shapeTitleAttributeName, interactivity_options_1._masterFilterInteractivityOptionsMeta]);


/***/ }),

/***/ 99983:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mapLegendSerializationsInfo = exports.legendOrientation = exports.weightedLegendSerializationsInfo = exports.legendType = exports.legendPosition = exports.weightedLegendVisible = exports.legendVisible = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.legendVisible = { propertyName: 'visible', modelName: '@Visible', displayName: 'DashboardWebStringId.Map.ShowLegend', defaultVal: false, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.weightedLegendVisible = Object.assign(Object.assign({}, exports.legendVisible), { displayName: 'DashboardWebStringId.Map.ShowWeightedLegend' });
exports.legendPosition = {
    propertyName: 'position', modelName: '@Position', displayName: 'DashboardWebStringId.WeightedLegendGalleryGroup', defaultVal: 'TopLeft', simpleFormAdapterItem: 'listEditor',
    values: {
        'TopLeft': 'DashboardWebStringId.Map.Position.TopLeft',
        'TopCenter': 'DashboardWebStringId.Map.Position.TopCenter',
        'TopRight': 'DashboardWebStringId.Map.Position.TopRight',
        'BottomLeft': 'DashboardWebStringId.Map.Position.BottomLeft',
        'BottomCenter': 'DashboardWebStringId.Map.Position.BottomCenter',
        'BottomRight': 'DashboardWebStringId.Map.Position.BottomRight'
    }
};
exports.legendType = {
    propertyName: 'type', modelName: '@WeightedLegendType', displayName: 'DashboardWebStringId.Map.WeightedLegendType', defaultVal: 'Linear',
    values: {
        'Linear': 'DashboardWebStringId.Map.WeightedLegendType.Linear',
        'Nested': 'DashboardWebStringId.Map.WeightedLegendType.Nested'
    }
};
exports.weightedLegendSerializationsInfo = [exports.weightedLegendVisible, exports.legendPosition, exports.legendType];
exports.legendOrientation = {
    propertyName: 'orientation', modelName: '@Orientation', displayName: 'DashboardWebStringId.Chart.Orientation', defaultVal: 'Vertical', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Vertical': 'DashboardWebStringId.Map.Orientation.Vertical',
        'Horizontal': 'DashboardWebStringId.Map.Orientation.Horizontal'
    }
};
exports.mapLegendSerializationsInfo = [exports.legendVisible, exports.legendPosition, exports.legendOrientation];


/***/ }),

/***/ 22081:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mapViewportSerializationsInfo = exports.createViewerPaddings = exports.centerPointLongitude = exports.centerPointLatitude = exports.rightLongitude = exports.leftLongitude = exports.bottomLatitude = exports.topLatitude = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.topLatitude = { propertyName: 'topLatitude', modelName: '@TopLatitude', displayName: 'DashboardWebStringId.Map.Viewport.TopLatitude', defaultVal: 90, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, category: _base_metadata_1.PropertyCategory.NoUpdate };
exports.bottomLatitude = { propertyName: 'bottomLatitude', modelName: '@BottomLatitude', displayName: 'DashboardWebStringId.Map.Viewport.BottomLatitude', defaultVal: -90, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, category: _base_metadata_1.PropertyCategory.NoUpdate };
exports.leftLongitude = { propertyName: 'leftLongitude', modelName: '@LeftLongitude', displayName: 'DashboardWebStringId.Map.Viewport.LeftLongitude', defaultVal: -180, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, category: _base_metadata_1.PropertyCategory.NoUpdate };
exports.rightLongitude = { propertyName: 'rightLongitude', modelName: '@RightLongitude', displayName: 'DashboardWebStringId.Map.Viewport.RightLongitude', defaultVal: 180, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, category: _base_metadata_1.PropertyCategory.NoUpdate };
exports.centerPointLatitude = { propertyName: 'centerPointLatitude', modelName: '@CenterPointLatitude', displayName: 'DashboardWebStringId.Map.Viewport.CenterPointLatitude', defaultVal: 0, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, category: _base_metadata_1.PropertyCategory.NoUpdate };
exports.centerPointLongitude = { propertyName: 'centerPointLongitude', modelName: '@CenterPointLongitude', displayName: 'DashboardWebStringId.Map.Viewport.CenterPointLongitude', defaultVal: 0, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, category: _base_metadata_1.PropertyCategory.NoUpdate };
exports.createViewerPaddings = { propertyName: 'createViewerPaddings', modelName: '@CreateViewerPaddings', displayName: 'DashboardWebStringId.Map.Viewport.CreateViewerPaddings', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.NoUpdate };
exports.mapViewportSerializationsInfo = [exports.topLatitude, exports.bottomLatitude, exports.leftLongitude, exports.rightLongitude, exports.centerPointLatitude, exports.centerPointLongitude, exports.createViewerPaddings];


/***/ }),

/***/ 44988:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pieMapDashboardItemSerializationsInfo = exports.isWeighted = exports.pieMapValues = exports.pieMapArgument = void 0;
const _data_item_1 = __webpack_require__(44010);
const _base_metadata_1 = __webpack_require__(17916);
const _coloring_options_1 = __webpack_require__(73498);
const _geo_point_map_item_base_1 = __webpack_require__(13886);
const _map_item_1 = __webpack_require__(1035);
exports.pieMapArgument = { propertyName: _base_metadata_1.argumentPropertyName, modelName: 'Argument', displayName: 'DashboardStringId.DescriptionItemArgument', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.pieMapValues = { propertyName: _base_metadata_1.valuesPropertyName, modelName: 'Values', displayName: 'DashboardStringId.DescriptionValues', array: true };
exports.isWeighted = { propertyName: 'isWeighted', modelName: '@IsWeighted', displayName: 'DashboardWebStringId.PieMapIsWeighted', defaultVal: true, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.pieMapDashboardItemSerializationsInfo = _geo_point_map_item_base_1.geoPointMapDashboardItemBaseSerializationsInfo.concat([exports.pieMapArgument, exports.pieMapValues, exports.isWeighted, _map_item_1.colorLegend, _map_item_1.weightedLegend, _coloring_options_1.coloringOptions]);


/***/ }),

/***/ 80638:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PieMapItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const data_item_1 = __webpack_require__(44650);
const _utils_1 = __webpack_require__(66358);
const _base_metadata_1 = __webpack_require__(17916);
const serializable_model_1 = __webpack_require__(29591);
const data_dashboard_item_1 = __webpack_require__(70355);
const geo_point_map_item_base_1 = __webpack_require__(85596);
const _pie_map_item_1 = __webpack_require__(44988);
class PieMapItem extends geo_point_map_item_base_1.GeoPointMapItemBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.values = ko.observableArray([]);
        this.__values = analytics_utils_1.deserializeArray(modelJson.Values, (item) => new data_item_1.DataItemLink(this, item, serializer));
        this._subscribeDataItemLinkArrays(_pie_map_item_1.pieMapValues);
        this._attachDataItem(this, _pie_map_item_1.pieMapArgument.propertyName);
        data_dashboard_item_1.DataDashboardItem._addColoringMeta([this.__argument]);
    }
    _clearBindings() {
        super._clearBindings();
        this.__values.removeAll();
        this.__argument.uniqueName(null);
    }
    _getInfoCore() {
        return _pie_map_item_1.pieMapDashboardItemSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'PieMap';
    }
    _getLayersCount() {
        return !!this.__values ? this.__values().length : 0;
    }
    _getLayerName() {
        return this._getDataItemDisplayName(this.__values()[this._selectedElementIndex() || 0].dataItem());
    }
    _getSliceDimensions() {
        return super._getSliceDimensions().concat(this.__argument);
    }
    _getIsDimensionColoredByDefault(dimension) {
        return this.__argument.dataItem() === dimension;
    }
    _getAreMeasuresColoredByDefault() {
        return this.__values().length > 1 && !this.__argument.dataItem();
    }
    _getCanColorByMeasures() { return true; }
    _getCanColorByDimensions() { return true; }
    _getColorizableDataItemsInfo() {
        return [{
                items: [this.__argument],
                prefixId: _base_metadata_1.BindingSectionTitles.SingleArgument
            }];
    }
}
__decorate([
    _utils_1.collectionItemType('Value')
], PieMapItem.prototype, "__values", void 0);
exports.PieMapItem = PieMapItem;
serializable_model_1.itemTypesMap['PieMap'] = { type: PieMapItem, groupName: 'maps', title: 'DashboardWebStringId.DefaultNamePieMapItem', index: 240 };


/***/ }),

/***/ 49320:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.boundImageDashboardItemSerializationsInfo = exports.uriPattern = exports.dataBindingMode = exports.imageItem = void 0;
const _data_item_1 = __webpack_require__(44010);
const interactivity_options_1 = __webpack_require__(50045);
const _data_dashboard_item_1 = __webpack_require__(66302);
const _image_item_1 = __webpack_require__(67286);
exports.imageItem = { propertyName: '__imageItem', modelName: 'ImageItem', displayName: 'DashboardStringId.DescriptionBoundImageAttribute', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.dataBindingMode = {
    propertyName: 'dataBindingMode', modelName: '@DataBindingMode', displayName: 'DashboardWebStringId.Image.BindingMode', defaultVal: 'BinaryArray', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'BinaryArray': 'DashboardWebStringId.Image.BindingMode.BinaryArray',
        'Uri': 'DashboardWebStringId.Image.BindingMode.Uri'
    }
};
exports.uriPattern = { propertyName: 'uriPattern', modelName: '@UriPattern', displayName: 'DashboardWebStringId.RangeFilter.UriPattern', defaultVal: '', simpleFormAdapterItem: 'textBoxEditor', editorOptions: { placeholder: 'http://www.example.com/{0}.jpg' } };
exports.boundImageDashboardItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([
    exports.imageItem, exports.dataBindingMode, exports.uriPattern, interactivity_options_1._baseInteractivityOptionsMeta, _image_item_1.sizeMode, _image_item_1.horizontalAlignment, _image_item_1.verticalAlignment
]);


/***/ }),

/***/ 913:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.chartItemBaseSerializationsInfo = exports.chartArgumentsMeta = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _coloring_options_1 = __webpack_require__(73498);
const _series_item_1 = __webpack_require__(77270);
exports.chartArgumentsMeta = { propertyName: _base_metadata_1.argumentsPropertyName, modelName: 'Arguments', displayName: 'DashboardStringId.ChartCalculationAlongArguments', array: true };
exports.chartItemBaseSerializationsInfo = _series_item_1.seriesDashboardItemSerializationsInfo.concat([exports.chartArgumentsMeta, _coloring_options_1.coloringOptions]);


/***/ }),

/***/ 37710:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dashboardItemSerializationsInfo = exports.parentContainer = exports.showCaptionDefaultFalse = exports.showCaption = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.showCaption = { propertyName: 'showCaption', modelName: '@ShowCaption', displayName: 'DashboardWebStringId.ShowCaptionText', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.showCaptionDefaultFalse = { propertyName: 'showCaption', modelName: '@ShowCaption', displayName: 'DashboardWebStringId.ShowCaptionText', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.parentContainer = { propertyName: 'parentContainer', modelName: '@ParentContainer' };
exports.dashboardItemSerializationsInfo = [_base_metadata_1.itemType, _base_metadata_1.componentName, _base_metadata_1.name_ViewModel, exports.showCaption, exports.parentContainer];


/***/ }),

/***/ 66302:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dataDashboardItemSerializationsInfo = exports.formatRules = exports.hiddenMeasures = exports.hiddenDimensions = exports.dataItemsSerializable = exports.itemColorScheme = exports.isMasterFilterCrossDataSource = exports.visibleDataFilterString = exports.filterString = exports.dataSource = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _dashboard_item_1 = __webpack_require__(37710);
exports.dataSource = { propertyName: 'dataSource', modelName: '@DataSource', displayName: 'DashboardStringId.DefaultDataSourceName', simpleFormAdapterItem: 'textBoxEditor' };
exports.filterString = { propertyName: 'filterString', modelName: '@FilterString' };
exports.visibleDataFilterString = { propertyName: 'visibleDataFilterString', modelName: '@VisibleDataFilterString' };
exports.isMasterFilterCrossDataSource = { propertyName: 'isMasterFilterCrossDataSource', modelName: '@IsMasterFilterCrossDataSource', displayName: 'DashboardWebStringId.CrossDataSourceFiltering', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.itemColorScheme = { propertyName: 'colorScheme', modelName: 'ColorScheme', displayName: 'DashboardWebStringId.DashboardMenuColorScheme', array: true };
exports.dataItemsSerializable = { propertyName: 'dataItems', modelName: 'DataItems', displayName: 'DashboardWebStringId.DataSources.DataItems', array: true };
exports.hiddenDimensions = { propertyName: '__hiddenDimensions', modelName: 'HiddenDimensions', displayName: 'DashboardWebStringId.Binding.HiddenDimensions', array: true };
exports.hiddenMeasures = { propertyName: '__hiddenMeasures', modelName: 'HiddenMeasures', displayName: 'DashboardWebStringId.Binding.HiddenMeasures', array: true };
exports.formatRules = { propertyName: 'formatRules', modelName: 'FormatRules', array: true };
exports.dataDashboardItemSerializationsInfo = _dashboard_item_1.dashboardItemSerializationsInfo.concat([exports.dataSource, _base_metadata_1.dataMember, exports.filterString, exports.visibleDataFilterString, exports.isMasterFilterCrossDataSource, exports.dataItemsSerializable, exports.formatRules, exports.hiddenDimensions, exports.hiddenMeasures, exports.itemColorScheme]);


/***/ }),

/***/ 67286:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.imageDashboardItemSerializationsInfo = exports.verticalAlignment = exports.horizontalAlignment = exports.sizeMode = exports.imageType = exports.image64 = exports.urlPath = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _dashboard_item_1 = __webpack_require__(37710);
exports.urlPath = { propertyName: 'urlPath', modelName: '@Url', defaultVal: '', simpleFormAdapterItem: 'textBoxEditor' };
exports.image64 = { propertyName: 'image64', modelName: 'ImageData' };
exports.imageType = {
    propertyName: 'imageType', displayName: 'DashboardWebStringId.Title.Image', defaultVal: 'linked', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'linked': 'DashboardWebStringId.Title.ImageLinked',
        'embedded': 'DashboardWebStringId.Title.ImageEmbedded'
    }
};
exports.sizeMode = {
    propertyName: 'sizeMode', modelName: '@SizeMode', displayName: 'DashboardStringId.SizeMode', defaultVal: 'Clip', simpleFormAdapterItem: 'listEditor',
    values: {
        'Clip': 'DashboardWebStringId.Image.SizeMode.Clip',
        'Stretch': 'DashboardWebStringId.Image.SizeMode.Stretch',
        'Zoom': 'DashboardWebStringId.Image.SizeMode.Zoom',
        'Squeeze': 'DashboardWebStringId.Image.SizeMode.Squeeze'
    },
    category: _base_metadata_1.PropertyCategory.ViewModel
};
exports.horizontalAlignment = {
    propertyName: 'horizontalAlignment', modelName: '@HorizontalAlignment', displayName: 'DashboardWebStringId.Image.HorizontalAlignment', defaultVal: 'Center', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Left': 'DashboardWebStringId.Image.Alignment.Left',
        'Center': 'DashboardWebStringId.Image.Alignment.Center',
        'Right': 'DashboardWebStringId.Image.Alignment.Right'
    },
    category: _base_metadata_1.PropertyCategory.ViewModel
};
exports.verticalAlignment = {
    propertyName: 'verticalAlignment', modelName: '@VerticalAlignment', displayName: 'DashboardWebStringId.Image.VerticalAlignment', defaultVal: 'Center', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Top': 'DashboardWebStringId.Image.Alignment.Top',
        'Center': 'DashboardWebStringId.Image.Alignment.Center',
        'Bottom': 'DashboardWebStringId.Image.Alignment.Bottom'
    },
    category: _base_metadata_1.PropertyCategory.ViewModel
};
exports.imageDashboardItemSerializationsInfo = _dashboard_item_1.dashboardItemSerializationsInfo.concat([exports.urlPath, exports.imageType, exports.image64, exports.sizeMode, exports.horizontalAlignment, exports.verticalAlignment]);


/***/ }),

/***/ 77270:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.seriesDashboardItemSerializationsInfo = exports.seriesDimensions = void 0;
const _data_dashboard_item_1 = __webpack_require__(66302);
exports.seriesDimensions = { propertyName: '__seriesDimensions', modelName: 'SeriesDimensions', displayName: 'DashboardWebStringId.SeriesItem.SeriesDimensions', array: true };
exports.seriesDashboardItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([exports.seriesDimensions]);


/***/ }),

/***/ 69642:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.textBoxDashboardItemSerializationsInfo = exports.textBoxValues = exports.textBoxText = void 0;
const ko = __webpack_require__(71032);
const _base_metadata_1 = __webpack_require__(17916);
const interactivity_options_1 = __webpack_require__(50045);
const _data_dashboard_item_1 = __webpack_require__(66302);
exports.textBoxText = {
    propertyName: 'text',
    modelName: 'Text',
    displayName: 'DashboardWebStringId.TextBox.Text',
    defaultVal: '',
    from: (value) => ko.observable(value),
    toJsonObject: (value) => {
        return value.replace(/\0*$/g, '').trim();
    },
};
exports.textBoxValues = { propertyName: _base_metadata_1.valuesPropertyName, modelName: 'Values', displayName: 'DashboardStringId.DescriptionValues', array: true };
exports.textBoxDashboardItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([exports.textBoxValues, exports.textBoxText, interactivity_options_1._baseInteractivityOptionsMeta]);


/***/ }),

/***/ 27526:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardItemColoringOptions = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _dashboard_item_coloring_options_1 = __webpack_require__(9309);
class DashboardItemColoringOptions extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _dashboard_item_coloring_options_1.dashboardItemColoringOptionsSerializationsInfo;
    }
}
exports.DashboardItemColoringOptions = DashboardItemColoringOptions;


/***/ }),

/***/ 86785:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeltaOptions = exports.CardDeltaOptions = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _delta_options_1 = __webpack_require__(62800);
class CardDeltaOptions extends serializable_model_1.SerializableModel {
    constructor(modelJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJSON, serializer);
    }
    getInfo() {
        return _delta_options_1.cardDeltaOptionsSerializationsInfo;
    }
}
exports.CardDeltaOptions = CardDeltaOptions;
class DeltaOptions extends CardDeltaOptions {
    constructor(modelJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJSON, serializer);
    }
    getInfo() {
        return _delta_options_1.deltaOptionsSerializationsInfo;
    }
}
exports.DeltaOptions = DeltaOptions;


/***/ }),

/***/ 50045:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._chartItemInteractivityOptionsMeta = exports._drillDownInteractivityOptionsMeta = exports._masterFilterInteractivityOptionsMeta = exports._dashboardItemInteractivityOptionsMeta = exports._baseInteractivityOptionsMeta = exports._tabItemInteractivityOptions = exports._groupItemInteractivityOptionsMeta = exports._filterItemInteractivityOptionsMeta = exports.ChartInteractivityOptions = exports.DashboardItemInteractivityOptions = exports.DashboardItemDrillDownInteractivityOptions = exports.DashboardItemMasterFilterInteractivityOptions = exports.DashboardTabItemInteractivityOptions = exports.DashboardItemBaseInteractivityOptions = exports.DashboardItemGroupInteractivityOptions = exports.FilterableDashboardItemInteractivityOptions = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _interactivity_options_1 = __webpack_require__(97492);
class FilterableDashboardItemInteractivityOptions extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return [_interactivity_options_1.ignoreMasterFiltersDefaultTrue];
    }
}
exports.FilterableDashboardItemInteractivityOptions = FilterableDashboardItemInteractivityOptions;
class DashboardItemGroupInteractivityOptions extends FilterableDashboardItemInteractivityOptions {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return super.getInfo().concat(_interactivity_options_1.isMasterFilterDefaultFalse);
    }
}
exports.DashboardItemGroupInteractivityOptions = DashboardItemGroupInteractivityOptions;
class DashboardItemBaseInteractivityOptions extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return [_interactivity_options_1.ignoreMasterFiltersDefaultFalse];
    }
}
exports.DashboardItemBaseInteractivityOptions = DashboardItemBaseInteractivityOptions;
class DashboardTabItemInteractivityOptions extends DashboardItemBaseInteractivityOptions {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return super.getInfo().concat([_interactivity_options_1.isMasterFilterDefaultTrue, _interactivity_options_1.ignoreMasterFiltersDefaultFalse]);
    }
}
exports.DashboardTabItemInteractivityOptions = DashboardTabItemInteractivityOptions;
class DashboardItemMasterFilterInteractivityOptions extends DashboardItemBaseInteractivityOptions {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return super.getInfo().concat([_interactivity_options_1.masterFilterMode]);
    }
}
exports.DashboardItemMasterFilterInteractivityOptions = DashboardItemMasterFilterInteractivityOptions;
class DashboardItemDrillDownInteractivityOptions extends DashboardItemBaseInteractivityOptions {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return super.getInfo().concat([_interactivity_options_1.isDrillDownEnabled]);
    }
}
exports.DashboardItemDrillDownInteractivityOptions = DashboardItemDrillDownInteractivityOptions;
class DashboardItemInteractivityOptions extends DashboardItemMasterFilterInteractivityOptions {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return super.getInfo().concat([_interactivity_options_1.isDrillDownEnabled]);
    }
}
exports.DashboardItemInteractivityOptions = DashboardItemInteractivityOptions;
class ChartInteractivityOptions extends DashboardItemInteractivityOptions {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return super.getInfo().concat(_interactivity_options_1.targetDimensions);
    }
}
exports.ChartInteractivityOptions = ChartInteractivityOptions;
exports._filterItemInteractivityOptionsMeta = _interactivity_options_1.getInteractivityOptionsPropertyInfo(FilterableDashboardItemInteractivityOptions);
exports._groupItemInteractivityOptionsMeta = _interactivity_options_1.getInteractivityOptionsPropertyInfo(DashboardItemGroupInteractivityOptions);
exports._tabItemInteractivityOptions = _interactivity_options_1.getInteractivityOptionsPropertyInfo(DashboardTabItemInteractivityOptions);
exports._baseInteractivityOptionsMeta = _interactivity_options_1.getInteractivityOptionsPropertyInfo(DashboardItemBaseInteractivityOptions);
exports._dashboardItemInteractivityOptionsMeta = _interactivity_options_1.getInteractivityOptionsPropertyInfo(DashboardItemInteractivityOptions);
exports._masterFilterInteractivityOptionsMeta = _interactivity_options_1.getInteractivityOptionsPropertyInfo(DashboardItemMasterFilterInteractivityOptions);
exports._drillDownInteractivityOptionsMeta = _interactivity_options_1.getInteractivityOptionsPropertyInfo(DashboardItemDrillDownInteractivityOptions);
exports._chartItemInteractivityOptionsMeta = _interactivity_options_1.getInteractivityOptionsPropertyInfo(ChartInteractivityOptions);


/***/ }),

/***/ 73498:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.coloringOptions = void 0;
const coloring_options_1 = __webpack_require__(27526);
exports.coloringOptions = { propertyName: 'coloringOptions', modelName: 'ColoringOptions', displayName: 'DashboardWebStringId.ColoringOptions', type: coloring_options_1.DashboardItemColoringOptions };


/***/ }),

/***/ 9309:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dashboardItemColoringOptionsSerializationsInfo = exports.measuresColoringMode = exports.useGlobalColors = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.useGlobalColors = {
    propertyName: 'useGlobalColors', modelName: '@UseGlobalColors', displayName: 'DashboardWebStringId.Colorization.ColorSchemeType', defaultVal: true, simpleFormAdapterItem: 'buttonGroupEditor', from: _base_metadata_1.parseBool,
    valuesArray: [{
            value: true,
            displayValue: 'DashboardWebStringId.Coloring.Global'
        }, {
            value: false,
            displayValue: 'DashboardWebStringId.Coloring.Local'
        }],
    category: _base_metadata_1.PropertyCategory.Coloring
};
exports.measuresColoringMode = {
    propertyName: 'measuresColoringMode', modelName: '@MeasuresColoringMode', displayName: 'DashboardWebStringId.Coloring.MeasuresColoringMode', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Default': 'DashboardWebStringId.ColoringModeAuto',
        'None': 'DashboardWebStringId.ColoringModeOff',
        'Hue': 'DashboardWebStringId.ColoringModeOn'
    }
};
exports.dashboardItemColoringOptionsSerializationsInfo = [exports.useGlobalColors, exports.measuresColoringMode];


/***/ }),

/***/ 62800:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deltaOptionsSerializationsInfo = exports.cardDeltaOptionsSerializationsInfo = exports.resultIndicationThreshold = exports.resultIndicationThresholdType = exports.resultIndicationMode = exports.valueType = exports.deltaValueTypeMap = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.deltaValueTypeMap = {
    'ActualValue': 'DashboardStringId.DeltaValueTypeActualValueCaption',
    'AbsoluteVariation': 'DashboardStringId.DeltaValueTypeAbsoluteVariationCaption',
    'PercentVariation': 'DashboardStringId.DeltaValueTypePercentVariationCaption',
    'PercentOfTarget': 'DashboardStringId.DeltaValueTypePercentOfTargetCaption',
    'TargetValue': 'DashboardStringId.DeltaValueTypeTargetValueCaption'
};
exports.valueType = {
    propertyName: 'valueType', modelName: '@ValueType', displayName: 'DashboardWebStringId.Delta.ValueType', defaultVal: 'AbsoluteVariation', simpleFormAdapterItem: 'listEditor', values: exports.deltaValueTypeMap
};
exports.resultIndicationMode = {
    propertyName: 'resultIndicationMode', modelName: '@ResultIndicationMode', displayName: 'DashboardWebStringId.Delta.ResultIndication', defaultVal: 'GreaterIsGood', simpleFormAdapterItem: 'listEditor',
    values: {
        'GreaterIsGood': 'DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption',
        'LessIsGood': 'DashboardStringId.DeltaIndicationModeLessIsGoodCaption',
        'WarningIfGreater': 'DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption',
        'WarningIfLess': 'DashboardStringId.DeltaIndicationModeWarningIfLessCaption',
        'NoIndication': 'DashboardStringId.DeltaIndicationModeNoIndicationCaption'
    }
};
exports.resultIndicationThresholdType = {
    propertyName: 'resultIndicationThresholdType', modelName: '@ResultIndicationThresholdType', displayName: 'DashboardWebStringId.Delta.ThresholdType', defaultVal: 'Percent', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Absolute': 'DashboardStringId.DeltaThresholdTypeAbsolute',
        'Percent': 'DashboardStringId.DeltaThresholdTypePercent'
    }
};
exports.resultIndicationThreshold = { propertyName: 'resultIndicationThreshold', modelName: '@ResultIndicationThreshold', displayName: 'DashboardWebStringId.Delta.ThresholdValue', defaultVal: 0, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel };
exports.cardDeltaOptionsSerializationsInfo = [exports.resultIndicationMode, exports.resultIndicationThresholdType, exports.resultIndicationThreshold];
exports.deltaOptionsSerializationsInfo = [exports.valueType].concat(exports.cardDeltaOptionsSerializationsInfo);


/***/ }),

/***/ 97492:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getInteractivityOptionsPropertyInfo = exports.commonInteractivityOptions = exports.targetDimensions = exports.isDrillDownEnabled = exports.masterFilterMode = exports.isMasterFilterDefaultTrue = exports.isMasterFilterDefaultFalse = exports.ignoreMasterFiltersDefaultTrue = exports.ignoreMasterFiltersDefaultFalse = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.ignoreMasterFiltersDefaultFalse = { propertyName: 'ignoreMasterFilters', modelName: '@IgnoreMasterFilters', displayName: 'DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.Interactivity };
exports.ignoreMasterFiltersDefaultTrue = { propertyName: 'ignoreMasterFilters', modelName: '@IgnoreMasterFilters', displayName: 'DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.Interactivity };
exports.isMasterFilterDefaultFalse = { propertyName: 'isMasterFilter', modelName: '@IsMasterFilter', displayName: 'DashboardWebStringId.InteractivityOptions.IsMasterFilter', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.isMasterFilterDefaultTrue = { propertyName: 'isMasterFilter', modelName: '@IsMasterFilter', displayName: 'DashboardWebStringId.InteractivityOptions.IsMasterFilter', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.masterFilterMode = {
    propertyName: 'masterFilterMode', modelName: '@MasterFilterMode', displayName: 'DashboardWebStringId.MasterFilterMode', defaultVal: 'None', simpleFormAdapterItem: 'buttonGroupEditor', category: _base_metadata_1.PropertyCategory.Interactivity, values: {
        'None': 'DashboardWebStringId.InteractivityOptions.MasterFilterMode.None',
        'Single': 'DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single',
        'Multiple': 'DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple'
    }
};
exports.isDrillDownEnabled = { propertyName: 'isDrillDownEnabled', modelName: '@IsDrillDownEnabled', displayName: 'DashboardWebStringId.InteractivityOptions.DrillDown', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.Data };
exports.targetDimensions = {
    propertyName: 'targetDimensions', modelName: '@TargetDimensions', displayName: 'DashboardWebStringId.InteractivityOptions.TargetDimensions', defaultVal: 'Arguments', simpleFormAdapterItem: 'buttonGroupEditor', category: _base_metadata_1.PropertyCategory.Interactivity,
    values: {
        'Arguments': 'DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments',
        'Series': 'DashboardWebStringId.InteractivityOptions.TargetDimensions.Series',
        'Points': 'DashboardWebStringId.InteractivityOptions.TargetDimensions.Points'
    }
};
exports.commonInteractivityOptions = { propertyName: 'interactivityOptions', modelName: 'InteractivityOptions', displayName: 'DashboardWebStringId.InteractivityOptions' };
function getInteractivityOptionsPropertyInfo(type) { return Object.assign({ type: type }, exports.commonInteractivityOptions); }
exports.getInteractivityOptionsPropertyInfo = getInteractivityOptionsPropertyInfo;


/***/ }),

/***/ 73612:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sparklineOptionsSerializationsInfo = exports.highlightStartEndPoints = exports.highlightMinMaxPoints = exports.viewType = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.viewType = { propertyName: 'viewType', modelName: '@ViewType', displayName: 'DashboardWebStringId.Sparkline.ViewType', defaultVal: 'Line' };
exports.highlightMinMaxPoints = { propertyName: 'highlightMinMaxPoints', modelName: '@HighlightMinMaxPoints', displayName: 'DashboardWebStringId.Sparkline.HighlightMinMaxPoints', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.highlightStartEndPoints = { propertyName: 'highlightStartEndPoints', modelName: '@HighlightStartEndPoints', displayName: 'DashboardWebStringId.Sparkline.HighlightStartEndPoints', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.sparklineOptionsSerializationsInfo = [exports.viewType, exports.highlightMinMaxPoints, exports.highlightStartEndPoints];


/***/ }),

/***/ 1103:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SparklineOptions = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const serializable_model_1 = __webpack_require__(29591);
const _sparkline_options_1 = __webpack_require__(73612);
class SparklineOptions extends serializable_model_1.SerializableModel {
    constructor(JSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(JSON, serializer);
    }
    getInfo() {
        return _sparkline_options_1.sparklineOptionsSerializationsInfo;
    }
}
exports.SparklineOptions = SparklineOptions;


/***/ }),

/***/ 94396:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pieDashboardItemSerializationsInfo = exports.labelPosition = exports.showPieCaptions = exports.pieType = exports.tooltipContentType = exports.labelContentType = exports.pieValues = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _chart_item_base_1 = __webpack_require__(913);
const interactivity_options_1 = __webpack_require__(50045);
exports.pieValues = { propertyName: _base_metadata_1.valuesPropertyName, modelName: 'Values', displayName: 'DashboardWebStringId.Binding.Values', array: true };
exports.labelContentType = {
    propertyName: 'labelContentType', modelName: '@LabelContentType', displayName: 'DashboardWebStringId.Chart.LabelContent', defaultVal: 'ArgumentAndPercent', simpleFormAdapterItem: 'listEditor',
    values: {
        'None': 'DashboardWebStringId.Pie.LabelContentType.None',
        'Argument': 'DashboardWebStringId.Pie.LabelContentType.Argument',
        'Percent': 'DashboardWebStringId.Pie.LabelContentType.Percent',
        'ArgumentAndPercent': 'DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent',
        'Value': 'DashboardWebStringId.Pie.LabelContentType.Value',
        'ArgumentAndValue': 'DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue',
        'ValueAndPercent': 'DashboardWebStringId.Pie.LabelContentType.ValueAndPercent',
        'ArgumentValueAndPercent': 'DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent'
    }
};
exports.tooltipContentType = {
    propertyName: 'tooltipContentType', modelName: '@TooltipContentType', displayName: 'DashboardWebStringId.Chart.TooltipContent', defaultVal: 'ArgumentValueAndPercent', simpleFormAdapterItem: 'listEditor',
    values: {
        'None': 'DashboardWebStringId.Pie.LabelContentType.None',
        'Argument': 'DashboardWebStringId.Pie.LabelContentType.Argument',
        'Percent': 'DashboardWebStringId.Pie.LabelContentType.Percent',
        'ArgumentAndPercent': 'DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent',
        'Value': 'DashboardWebStringId.Pie.LabelContentType.Value',
        'ArgumentAndValue': 'DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue',
        'ValueAndPercent': 'DashboardWebStringId.Pie.LabelContentType.ValueAndPercent',
        'ArgumentValueAndPercent': 'DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent'
    }
};
exports.pieType = {
    propertyName: 'pieType', modelName: '@PieType', displayName: 'DashboardWebStringId.Pie.Type', defaultVal: 'Pie',
    valuesArray: [
        { value: 'Pie', displayValue: 'DashboardWebStringId.Pie' },
        { value: 'Donut', displayValue: 'DashboardWebStringId.Pie.Donut' }
    ]
};
exports.showPieCaptions = { propertyName: 'showPieCaptions', modelName: '@ShowPieCaptions', displayName: 'DashboardWebStringId.Pie.ShowCaptions', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.labelPosition = {
    propertyName: 'labelPosition', modelName: '@LabelPosition', displayName: 'DashboardWebStringId.Pie.LabelPosition', defaultVal: 'Outside', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Outside': 'DashboardWebStringId.Pie.LabelPositionOutside',
        'Inside': 'DashboardWebStringId.Pie.LabelPositionInside'
    }
};
exports.pieDashboardItemSerializationsInfo = _chart_item_base_1.chartItemBaseSerializationsInfo.concat([exports.pieValues, exports.labelContentType, exports.tooltipContentType, exports.pieType, _base_metadata_1.contentArrangementMode, _base_metadata_1.contentLineCount, exports.showPieCaptions, interactivity_options_1._chartItemInteractivityOptionsMeta, exports.labelPosition]);


/***/ }),

/***/ 19013:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PieItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const data_item_1 = __webpack_require__(44650);
const pie_calc_window_definition_1 = __webpack_require__(74599);
const _utils_1 = __webpack_require__(66358);
const serializable_model_1 = __webpack_require__(29591);
const chart_item_base_1 = __webpack_require__(74380);
const _pie_item_1 = __webpack_require__(94396);
class PieItem extends chart_item_base_1.ChartItemBase {
    constructor(dashboardItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this.values = ko.observableArray([]);
        this.__values = analytics_utils_1.deserializeArray(dashboardItemJSON.Values, (item) => new data_item_1.DataItemLink(this, item, serializer));
        this._subscribeDataItemLinkArrays(_pie_item_1.pieValues);
    }
    _getInfoCore() {
        return _pie_item_1.pieDashboardItemSerializationsInfo;
    }
    _clearBindings() {
        super._clearBindings();
        this.__values.removeAll();
    }
    _getDefaultItemType() {
        return 'Pie';
    }
    _getTargetDimensions() { return this.interactivityOptions.targetDimensions(); }
    _getMasterFilterMode() { return this.interactivityOptions.masterFilterMode(); }
    _getDrillDownEnabled() { return this.interactivityOptions.isDrillDownEnabled(); }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
    _getAreMeasuresColoredByDefault() { return this.values().length > 1 && this.arguments().length == 0; }
    _getIsDimensionColoredByDefault(dimension) {
        return !!this.arguments().filter(dim => dim === dimension)[0];
    }
    _getLayersCount() {
        return !!this.__seriesDimensions && this.__seriesDimensions().length > 0 ? this.__values().length : 0;
    }
    _getLayerName() {
        return this._getDataItemDisplayName(this.__values()[this._selectedElementIndex() || 0].dataItem());
    }
    _getDefaultCalculationWindowDefinition() {
        return new pie_calc_window_definition_1.PieWindowDefinition();
    }
}
__decorate([
    _utils_1.collectionItemType('Value')
], PieItem.prototype, "__values", void 0);
exports.PieItem = PieItem;
serializable_model_1.itemTypesMap['Pie'] = { type: PieItem, groupName: 'common', title: 'DashboardStringId.DefaultNamePieItem', index: 45 };


/***/ }),

/***/ 13785:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pivotDashboardItemSerializationsInfo = exports.layoutType = exports.columnTotalsPosition = exports.rowTotalsPosition = exports.valuesPosition = exports.showRowTotals = exports.showColumnTotals = exports.showRowGrandTotals = exports.showColumnGrandTotals = exports.autoExpandRowGroups = exports.autoExpandColumnGroups = exports.pivotValues = exports.pivotRows = exports.pivotColumns = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _data_dashboard_item_1 = __webpack_require__(66302);
const interactivity_options_1 = __webpack_require__(50045);
exports.pivotColumns = { propertyName: _base_metadata_1.columnsPropertyName, modelName: 'Columns', displayName: 'DashboardStringId.DescriptionColumns', array: true };
exports.pivotRows = { propertyName: _base_metadata_1.rowsPropertyName, modelName: 'Rows', displayName: 'DashboardStringId.DescriptionRows', array: true };
exports.pivotValues = { propertyName: _base_metadata_1.valuesPropertyName, modelName: 'Values', displayName: 'DashboardStringId.DescriptionValues', array: true };
exports.autoExpandColumnGroups = { propertyName: 'autoExpandColumnGroups', modelName: 'AutoExpandColumnGroups', displayName: 'DashboardWebStringId.PivotGrid.AutoExpandColumnGroups', defaultVal: false, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.autoExpandRowGroups = { propertyName: 'autoExpandRowGroups', modelName: 'AutoExpandRowGroups', displayName: 'DashboardWebStringId.PivotGrid.AutoExpandRowGroups', defaultVal: false, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.showColumnGrandTotals = { propertyName: 'showColumnGrandTotals', modelName: 'ShowColumnGrandTotals', displayName: 'DashboardWebStringId.PivotGrid.ColumnGrandTotals', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.showRowGrandTotals = { propertyName: 'showRowGrandTotals', modelName: 'ShowRowGrandTotals', displayName: 'DashboardWebStringId.PivotGrid.RowGrandTotals', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.showColumnTotals = { propertyName: 'showColumnTotals', modelName: 'ShowColumnTotals', displayName: 'DashboardWebStringId.PivotGrid.ColumnTotals', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.showRowTotals = { propertyName: 'showRowTotals', modelName: 'ShowRowTotals', displayName: 'DashboardWebStringId.PivotGrid.RowTotals', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.valuesPosition = {
    propertyName: 'valuesPosition', modelName: 'ValuesPosition', displayName: 'DashboardWebStringId.PivotGrid.ValuesPosition', defaultVal: 'Columns', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Columns': 'DashboardWebStringId.PivotGrid.ValuesPositionColumns',
        'Rows': 'DashboardWebStringId.PivotGrid.ValuesPositionRows'
    }
};
exports.rowTotalsPosition = {
    propertyName: 'rowTotalsPosition', modelName: 'RowTotalsPosition', displayName: 'DashboardWebStringId.PivotGrid.RowTotalsPosition', defaultVal: 'Bottom', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Bottom': 'DashboardWebStringId.PivotGrid.RowTotalsPositionBottom',
        'Top': 'DashboardWebStringId.PivotGrid.RowTotalsPositionTop'
    }
};
exports.columnTotalsPosition = {
    propertyName: 'columnTotalsPosition', modelName: 'ColumnTotalsPosition', displayName: 'DashboardWebStringId.PivotGrid.ColumnTotalsPosition', defaultVal: 'Far', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Far': 'DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar',
        'Near': 'DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear'
    }
};
exports.layoutType = {
    propertyName: 'layoutType', modelName: 'LayoutType', displayName: 'DashboardWebStringId.PivotGrid.LayoutType', defaultVal: 'Compact', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Compact': 'DashboardWebStringId.PivotGrid.LayoutTypeCompact',
        'Tabular': 'DashboardWebStringId.PivotGrid.LayoutTypeTabular'
    }
};
exports.pivotDashboardItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([exports.pivotColumns, exports.pivotRows, exports.pivotValues, exports.autoExpandColumnGroups, exports.autoExpandRowGroups, exports.showColumnGrandTotals, exports.showRowGrandTotals, exports.showColumnTotals, exports.showRowTotals, exports.valuesPosition, exports.rowTotalsPosition, exports.columnTotalsPosition, exports.layoutType, interactivity_options_1._baseInteractivityOptionsMeta]);


/***/ }),

/***/ 68920:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PivotItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const data_item_1 = __webpack_require__(44650);
const measure_1 = __webpack_require__(17012);
const _data_item_1 = __webpack_require__(44010);
const pivot_calc_window_definition_1 = __webpack_require__(64069);
const _utils_1 = __webpack_require__(66358);
const serializable_model_1 = __webpack_require__(29591);
const data_dashboard_item_1 = __webpack_require__(70355);
const _pivot_item_1 = __webpack_require__(13785);
class PivotItem extends data_dashboard_item_1.DataDashboardItem {
    constructor(dashboardItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this.columns = ko.observableArray([]);
        this.rows = ko.observableArray([]);
        this.values = ko.observableArray([]);
        this.__columns = analytics_utils_1.deserializeArray(dashboardItemJSON.Columns, (item) => new data_item_1.DataItemLink(this, item, serializer));
        this.__rows = analytics_utils_1.deserializeArray(dashboardItemJSON.Rows, (item) => new data_item_1.DataItemLink(this, item, serializer));
        this.__values = analytics_utils_1.deserializeArray(dashboardItemJSON.Values, (item) => new data_item_1.DataItemLink(this, item, serializer));
        this._subscribeDataItemLinkArrays(_pivot_item_1.pivotColumns, _pivot_item_1.pivotRows, _pivot_item_1.pivotValues);
        this.__values.subscribe((newValue) => {
            this._setCustomOptionsPropertyOnMeasures(newValue);
            this._setLinkCollectionAcceptableShapingType(newValue, data_item_1.AcceptableShapingType.String);
        });
        this.__rows.subscribe((newValue) => {
            this._setCustomOptionsPropertyOnDimensions(newValue);
        });
        this.__columns.subscribe((newValue) => {
            this._setCustomOptionsPropertyOnDimensions(newValue);
        });
        this._setCustomOptionsPropertyOnMeasures(this.__values());
        this._setLinkCollectionAcceptableShapingType(this.__values(), data_item_1.AcceptableShapingType.String);
        this._setCustomOptionsPropertyOnDimensions(this.__rows());
        this._setCustomOptionsPropertyOnDimensions(this.__columns());
        this.autoExpandColumnGroups.subscribe((newValue) => {
            this._expandingManager.resetExpandingParams();
            this._expandingManager.resetColumnViewState(newValue);
        });
        this.autoExpandRowGroups.subscribe((newValue) => {
            this._expandingManager.resetExpandingParams();
            this._expandingManager.resetRowViewState(newValue);
        });
    }
    _clearBindings() {
        super._clearBindings();
        this.__columns.removeAll();
        this.__rows.removeAll();
        this.__values.removeAll();
    }
    _getInfoCore() {
        return _pivot_item_1.pivotDashboardItemSerializationsInfo;
    }
    _canChangeDataItemVisibilityOptions(dataItem) {
        return this.__values().some(value => value.dataItem() === dataItem) || this.__rows().some(value => value.dataItem() === dataItem) || this.__columns().some(value => value.dataItem() === dataItem);
    }
    _isTotalsVisibilityOptionEnabled(dataItem) {
        if (dataItem instanceof measure_1.Measure)
            return true;
        var localRows = this.__rows();
        if (localRows.length > 0 && localRows.some(row => row.dataItem() == dataItem)) {
            return localRows.length > 0 && this.layoutType() != 'Compact' && dataItem != localRows[localRows.length - 1].dataItem();
        }
        var localColumns = this.__columns();
        return localColumns.length > 0 && localColumns.some(column => column.dataItem() == dataItem) && dataItem != localColumns[localColumns.length - 1].dataItem();
    }
    _setCustomOptionsPropertyOnMeasures(links) {
        links.forEach((value) => {
            value._specifics.customOptionsProperties = [{
                    serializationInfo: _data_item_1.showValues
                }, {
                    serializationInfo: _data_item_1.showTotals
                }, {
                    serializationInfo: _data_item_1.showGrandTotals
                }];
        });
    }
    _setCustomOptionsPropertyOnDimensions(links) {
        links.forEach((row) => {
            row._specifics.customOptionsProperties = [{
                    serializationInfo: _data_item_1.showTotals,
                    filter: (dataItem) => { return this._canChangeDataItemVisibilityOptions(dataItem); },
                    disabledRule: (dataItem) => { return !this._isTotalsVisibilityOptionEnabled(dataItem); }
                }];
        });
    }
    _getDefaultItemType() {
        return 'Pivot';
    }
    _extendContentState(content) {
        content.PivotExpandViewState = this._expandingManager.getPivotExpandViewState();
    }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
    _getDefaultCalculationWindowDefinition() {
        return new pivot_calc_window_definition_1.PivotWindowDefinition();
    }
    _getIsVisualInteractivitySupported() { return false; }
}
__decorate([
    _utils_1.collectionItemType('Column')
], PivotItem.prototype, "__columns", void 0);
__decorate([
    _utils_1.collectionItemType('Row')
], PivotItem.prototype, "__rows", void 0);
__decorate([
    _utils_1.collectionItemType('Value')
], PivotItem.prototype, "__values", void 0);
exports.PivotItem = PivotItem;
serializable_model_1.itemTypesMap['Pivot'] = { type: PivotItem, groupName: 'common', title: 'DashboardStringId.DefaultNamePivotItem', index: 20 };


/***/ }),

/***/ 62248:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._subscribeToDimension = void 0;
const _knockout_utils_1 = __webpack_require__(4437);
const _subscribeToDimension = (dimension, dateTimePeriods, dataManager) => {
    _knockout_utils_1.safeSubscribe({
        dimension,
        dateTimePeriods,
        dataManager
    }, (args) => {
        setPeriodFirstDayOfWeek(args.dimension, args.dateTimePeriods, args.dataManager);
        const subscriptions = args.dimension ?
            args.dateTimePeriods.map(curPeriod => curPeriod._subscribeToGroupInterval(args.dimension)) : [];
        return { dispose: () => { subscriptions.forEach(s => s.dispose()); } };
    });
};
exports._subscribeToDimension = _subscribeToDimension;
const setPeriodFirstDayOfWeek = (dimension, dateTimePeriods, dataManager) => {
    const metaData = dataManager && dataManager.getMetaData();
    const dimensionUniqueName = dimension && dimension.uniqueName();
    const dimensionFormat = metaData && metaData.getDimensionFormat(dimensionUniqueName);
    const firstDayOfWeek = dimensionFormat && dimensionFormat.DateTimeFormat && dimensionFormat.DateTimeFormat.FirstDayOfWeek;
    if (firstDayOfWeek) {
        dateTimePeriods.forEach(period => period._firstDayOfWeek(firstDayOfWeek));
    }
};


/***/ }),

/***/ 58015:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RangeStateController = void 0;
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const dashboard_state_1 = __webpack_require__(51372);
const _dimension_filter_values_1 = __webpack_require__(66637);
const _date_utils_1 = __webpack_require__(76900);
class RangeStateController {
    constructor(item) {
        this.item = item;
    }
    get defaultDateTimePeriodName() { return this.item.defaultDateTimePeriodName; }
    get currentSelectedDateTimePeriodName() { return this.item.currentSelectedDateTimePeriodName; }
    get dateTimePeriods() { return this.item.dateTimePeriods; }
    get _selectionValues() { return this.item._selectionValues; }
    _getSelectionByPeriod(period) {
        return this.item._getSelectionByPeriod(period);
    }
    _setSelection(stateSelection) {
        this.item._setSelection(stateSelection);
    }
    initialize() {
        if (this.defaultDateTimePeriodName()) {
            this.item._processItemSetPredefinedPeriod(this.defaultDateTimePeriodName());
        }
        this.dateTimePeriods.subscribe(newPeriods => {
            if (!newPeriods.filter(p => p.name() === this.defaultDateTimePeriodName())[0]) {
                this.defaultDateTimePeriodName(undefined);
            }
        });
        var subscribeOnDefaultPeriodNameChange = () => {
            this.item._defaultDateTimePeriodIndexSubscription && this.item._defaultDateTimePeriodIndexSubscription.dispose();
            this.item._defaultDateTimePeriodIndexSubscription = null;
            var newPeriod = this.dateTimePeriods().filter(p => p.name() === this.defaultDateTimePeriodName())[0];
            if (newPeriod) {
                this.item._defaultDateTimePeriodIndexSubscription = newPeriod.name.subscribe((changedName) => {
                    this.defaultDateTimePeriodName(changedName);
                });
            }
        };
        this.defaultDateTimePeriodName.subscribe(newName => {
            subscribeOnDefaultPeriodNameChange();
            this.item._processItemSetPredefinedPeriod(newName);
        });
        subscribeOnDefaultPeriodNameChange();
        this.item._state = ko.computed(() => {
            var state = new dashboard_state_1.ItemState();
            if (this.defaultDateTimePeriodName() && this.defaultDateTimePeriodName() !== this.currentSelectedDateTimePeriodName()) {
                state.RangeFilterState = null;
            }
            if (this.currentSelectedDateTimePeriodName()) {
                if (this.currentSelectedDateTimePeriodName() !== this.defaultDateTimePeriodName()) {
                    state.RangeFilterState = {
                        PeriodName: this.currentSelectedDateTimePeriodName()
                    };
                }
            }
            else {
                var selection = _date_utils_1.toStringArray(this._selectionValues());
                if (selection && selection.length && (!!selection[0][0] || !!selection[0][1])) {
                    state.RangeFilterState = {
                        Selection: {
                            Minimum: selection[0][0],
                            Maximum: selection[0][1]
                        }
                    };
                }
            }
            return state;
        });
    }
    setState(itemState) {
        var obsoleteItemState = itemState;
        let rangeFilterState = itemState.RangeFilterState;
        let selectedPeriod;
        let selection;
        if (rangeFilterState) {
            let rangeSelection = rangeFilterState.Selection;
            if (rangeFilterState.PeriodName) {
                let period = this.dateTimePeriods().filter(p => p.name() === rangeFilterState.PeriodName)[0];
                if (period) {
                    selectedPeriod = rangeFilterState.PeriodName;
                    selection = this._getSelectionByPeriod(period);
                }
            }
            else if (rangeSelection) {
                if (!!rangeSelection.Minimum || !!rangeSelection.Maximum) {
                    selection = [[rangeSelection.Minimum, rangeSelection.Maximum]];
                }
            }
        }
        else {
            selection = itemState.MasterFilterValues || obsoleteItemState.Selection;
        }
        this.currentSelectedDateTimePeriodName(selectedPeriod);
        this._setSelection(selection);
    }
    removeSelectionFromState(state) {
        var itemState = _jquery_helpers_1.deepExtend({}, state);
        itemState.RangeFilterState = undefined;
        return itemState;
    }
    setPredefinedPeriodToState(state, periodName) {
        var itemState = _jquery_helpers_1.deepExtend({}, state);
        itemState.RangeFilterState = { PeriodName: periodName };
        return itemState;
    }
    setSelectionToState(state, selection) {
        var itemState = _jquery_helpers_1.deepExtend({}, state);
        if (!itemState.RangeFilterState) {
            itemState.RangeFilterState = new dashboard_state_1.RangeFilterState();
        }
        let rangeSelection = new dashboard_state_1.RangeFilterSelection();
        if (selection && selection.length > 0 && selection[0].length > 0) {
            rangeSelection.Minimum = selection[0][0];
            rangeSelection.Maximum = selection[0][1];
        }
        itemState.RangeFilterState.Selection = rangeSelection;
        return itemState;
    }
    extendContentState(content) {
        if (this.currentSelectedDateTimePeriodName()) {
            let selectedPeriod = this.dateTimePeriods().filter(p => p.name() === this.currentSelectedDateTimePeriodName())[0];
            if (selectedPeriod) {
                content.ViewModel.SelectedPeriodIndex = this.dateTimePeriods().indexOf(selectedPeriod);
            }
        }
    }
    _getDisplayFilterValues(limitCount) {
        var metaData = this.item._dataManager() ? this.item._dataManager().getMetaData() : undefined, selection = this.item._outputFilter(), outFilterValues = [], argumentDimension = selection && selection.dimensions && selection.dimensions[0];
        if (argumentDimension) {
            let dimensionId = argumentDimension['@DefaultId'];
            let format = metaData ? metaData.getDimensionFormat(dimensionId) : undefined;
            if (!_utils_1.arrayEquals(selection.range, this.item._fullRange())) {
                let filterValues = new _dimension_filter_values_1.DimensionFilterValues(this.item._getDimensionDisplayName(dimensionId));
                filterValues.Values.push({
                    Type: 'Range',
                    RangeLeft: selection.range[0],
                    RangeRight: selection.range[1],
                    Format: format
                });
                outFilterValues.push(filterValues);
            }
        }
        return outFilterValues;
    }
}
exports.RangeStateController = RangeStateController;


/***/ }),

/***/ 78252:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DateTimePeriod = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const _format_helper_1 = __webpack_require__(27893);
const _formatter_1 = __webpack_require__(93687);
const _datetime_period_converter_1 = __webpack_require__(35814);
const _data_field_1 = __webpack_require__(68951);
const _knockout_utils_1 = __webpack_require__(4437);
const serializable_model_1 = __webpack_require__(29591);
const _date_time_period_1 = __webpack_require__(98443);
const _period_limit_1 = __webpack_require__(74581);
class DateTimePeriod extends serializable_model_1.TypedSerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.argumentInterval = ko.observable('Year');
        this._firstDayOfWeek = ko.observable(0);
        this._getPeriodTextValue = ko.pureComputed(() => {
            let range = this.getDateTimeValue();
            var startTextValue = this.format(range.startValue);
            var endTextValue = this.format(range.endValue);
            if (startTextValue != null || endTextValue != null)
                return _formatter_1.constructIntervalFilterText({ left: startTextValue, right: endTextValue });
            return _default_1.getLocalizationById('DashboardStringId.EntireRangePeriodCaption');
        });
        ko.computed(() => {
            this.start.argumentInterval(this.argumentInterval());
            this.end.argumentInterval(this.argumentInterval());
        });
    }
    getInfo() {
        return _date_time_period_1.dateTimePeriodSerializationsInfo;
    }
    _getDefaultItemType() { return 'DateTimePeriod'; }
    getDateTimeValue() {
        let convertToLimit = (limit) => {
            if (limit.mode() === 'None')
                return undefined;
            let flowMode = limit.mode() === 'Flow';
            return {
                Relative: flowMode,
                Date: limit.mode() === 'Fixed' ? limit.fixed.date() : undefined,
                Interval: flowMode ? limit.flow.interval() : undefined,
                Offset: flowMode ? limit.flow.offset() : undefined
            };
        };
        let range = _datetime_period_converter_1.DateTimePeriodConverter.toRange({
            Start: convertToLimit(this.start),
            End: convertToLimit(this.end)
        }, this._firstDayOfWeek());
        return range;
    }
    getDateFormat() {
        var argumentInterval = _period_limit_1.convertDateTimeGroupInterval(this.argumentInterval()), startInterval = this.start.getInterval() || argumentInterval, endInterval = this.end.getInterval() || argumentInterval;
        var dateFormat = ['year', 'quarterYear', 'monthYear', 'weekYear', 'dayMonthYear', 'dateHour', 'dateHourMinute', 'dateHourMinuteSecond'];
        return dateFormat[Math.max(_period_limit_1.flowIntervalOrderedValues.indexOf(startInterval), _period_limit_1.flowIntervalOrderedValues.indexOf(endInterval))];
    }
    format(value) {
        if (value == null)
            return null;
        var dateFormatInfoType = this.getDateFormat(), correctedValue = value;
        switch (dateFormatInfoType) {
            case 'year':
                correctedValue = value.getFullYear();
                break;
        }
        return _format_helper_1.DashboardFormatHelper.format(correctedValue, { dateType: 'short', format: dateFormatInfoType });
    }
    _subscribeToGroupInterval(dimension) {
        return _knockout_utils_1.safeSubscribe({
            dataMember: dimension.dataMember,
            groupInterval: dimension.dateTimeGroupInterval
        }, (dim) => {
            this.argumentInterval(_data_field_1.DataField.isOlap(dim.dataMember) ? 'None' : dim.groupInterval);
        });
    }
}
exports.DateTimePeriod = DateTimePeriod;


/***/ }),

/***/ 90300:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LimitContainer = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const serializable_model_1 = __webpack_require__(29591);
const _limit_container_1 = __webpack_require__(11784);
class LimitContainer extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.mode = ko.observable();
        this.argumentInterval = ko.observable('Year');
        this.mode.subscribe(newMode => {
            if (newMode === 'None') {
                this.flow.isEmpty(true);
                this.fixed.isEmpty(true);
            }
            else if (newMode === 'Flow') {
                this.flow.isEmpty(false);
                this.fixed.isEmpty(true);
            }
            else if (newMode === 'Fixed') {
                this.flow.isEmpty(true);
                this.fixed.isEmpty(false);
            }
        });
        if (!modelJson.hasOwnProperty('FixedDateTimePeriodLimit')) {
            if (!modelJson.hasOwnProperty('FlowDateTimePeriodLimit')) {
                this.mode('None');
            }
            else {
                this.mode('Flow');
            }
        }
        else {
            this.mode('Fixed');
        }
        ko.computed(() => {
            this.flow.argumentInterval(this.argumentInterval());
        });
    }
    getInfo() {
        return _limit_container_1.limitContainer;
    }
    isEmpty() {
        return this.mode() === 'None';
    }
    getInterval() {
        if (this.mode() === 'Flow') {
            return this.flow.interval();
        }
        else {
            return null;
        }
    }
}
exports.LimitContainer = LimitContainer;


/***/ }),

/***/ 98443:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mode = exports.dateTimePeriodSerializationsInfo = exports.endLimit = exports.startLimit = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const _base_metadata_1 = __webpack_require__(17916);
const limit_container_1 = __webpack_require__(90300);
function limitContainerFromJson(json, serializer = new analytics_utils_1.ModelSerializer()) {
    return new limit_container_1.LimitContainer(json, serializer);
}
function limitContainerToJson(limitContainer, serializer = new analytics_utils_1.ModelSerializer()) {
    var limitContainerJson = serializer.serialize(limitContainer);
    if (!limitContainer.fixed.isEmpty() && !limitContainerJson.hasOwnProperty('FixedDateTimePeriodLimit')) {
        limitContainerJson.FixedDateTimePeriodLimit = null;
    }
    if (!limitContainer.flow.isEmpty() && !limitContainerJson.hasOwnProperty('FlowDateTimePeriodLimit')) {
        limitContainerJson.FlowDateTimePeriodLimit = null;
    }
    return limitContainerJson;
}
exports.startLimit = { propertyName: 'start', modelName: 'StartLimit', type: limit_container_1.LimitContainer, from: limitContainerFromJson, toJsonObject: limitContainerToJson };
exports.endLimit = { propertyName: 'end', modelName: 'EndLimit', type: limit_container_1.LimitContainer, from: limitContainerFromJson, toJsonObject: limitContainerToJson };
exports.dateTimePeriodSerializationsInfo = [_base_metadata_1.itemType, _base_metadata_1.name, exports.startLimit, exports.endLimit];
exports.mode = {
    propertyName: 'mode', defaultVal: 'None', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'None': 'DashboardWebStringId.RangeFilter.None',
        'Fixed': 'DashboardWebStringId.RangeFilter.Fixed',
        'Flow': 'DashboardWebStringId.RangeFilter.Flow'
    }
};


/***/ }),

/***/ 11784:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.limitContainer = exports.flowDateTimePeriodLimitProperty = exports.fixedDateTimePeriodLimitProperty = void 0;
const period_limit_1 = __webpack_require__(73531);
exports.fixedDateTimePeriodLimitProperty = {
    propertyName: 'fixed', modelName: 'FixedDateTimePeriodLimit', type: period_limit_1.FixedDateTimePeriodLimit
};
exports.flowDateTimePeriodLimitProperty = {
    propertyName: 'flow', modelName: 'FlowDateTimePeriodLimit', type: period_limit_1.FlowDateTimePeriodLimit
};
exports.limitContainer = [exports.fixedDateTimePeriodLimitProperty, exports.flowDateTimePeriodLimitProperty];


/***/ }),

/***/ 74581:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fixedDateTimePeriodLimitSerializationsInfo = exports.date = exports.flowDateTimePeriodLimitSerializationsInfo = exports.offset = exports.interval = exports.convertDateTimeGroupInterval = exports.flowIntervalValues = exports.flowIntervalOrderedValues = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.flowIntervalOrderedValues = ['Year', 'Quarter', 'Month', 'Week', 'Day', 'Hour', 'Minute', 'Second'];
exports.flowIntervalValues = {
    'Year': 'DashboardStringId.DateTimeIntervalYear',
    'Quarter': 'DashboardStringId.DateTimeIntervalQuarter',
    'Month': 'DashboardStringId.DateTimeIntervalMonth',
    'Week': 'DashboardStringId.DateTimeIntervalWeek',
    'Day': 'DashboardStringId.DateTimeIntervalDay',
    'Hour': 'DashboardStringId.DateTimeIntervalHour',
    'Minute': 'DashboardStringId.DateTimeIntervalMinute',
    'Second': 'DashboardStringId.DateTimeIntervalSecond'
};
function convertDateTimeGroupInterval(groupInterval) {
    var map = {
        'Year': 'Year',
        'QuarterYear': 'Quarter',
        'MonthYear': 'Month',
        'DayMonthYear': 'Day',
        'DateHour': 'Hour',
        'DateHourMinute': 'Minute',
        'DateHourMinuteSecond': 'Second',
        'None': 'Second'
    };
    var dateTimeInterval = map[groupInterval];
    if (!dateTimeInterval) {
        throw Error('Argument exception');
    }
    return dateTimeInterval;
}
exports.convertDateTimeGroupInterval = convertDateTimeGroupInterval;
exports.interval = { propertyName: 'interval', modelName: '@Interval', defaultVal: 'Year' };
exports.offset = { propertyName: 'offset', modelName: '@Offset', defaultVal: 0, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel };
exports.flowDateTimePeriodLimitSerializationsInfo = [exports.interval, exports.offset];
exports.date = { propertyName: 'date', modelName: '@Date', defaultVal: _base_metadata_1.fromDateToString(new Date()), from: _base_metadata_1.fromStringToDate, toJsonObject: _base_metadata_1.fromDateToString, simpleFormAdapterItem: 'dateBoxEditor' };
exports.fixedDateTimePeriodLimitSerializationsInfo = [exports.date];


/***/ }),

/***/ 30097:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.rangeFilterDashboardItemSerializationsInfo = exports.argument = exports.rangeSeries = exports.dateTimePeriods = exports.defaultDateTimePeriodName = void 0;
const _data_item_1 = __webpack_require__(44010);
const _base_metadata_1 = __webpack_require__(17916);
const _dashboard_item_1 = __webpack_require__(37710);
const _series_item_1 = __webpack_require__(77270);
const interactivity_options_1 = __webpack_require__(50045);
const _coloring_options_1 = __webpack_require__(73498);
exports.defaultDateTimePeriodName = { propertyName: 'defaultDateTimePeriodName', displayName: 'DashboardStringId.DateTimeFormatYearFormatDefaultCaption', modelName: '@SelectedDateTimePeriodIndex', simpleFormAdapterItem: 'textBoxEditor', category: _base_metadata_1.PropertyCategory.ViewModel };
exports.dateTimePeriods = { propertyName: 'dateTimePeriods', modelName: 'DateTimePeriods', array: true };
exports.rangeSeries = { propertyName: 'series', modelName: 'Series', displayName: 'DashboardStringId.RangeFilterCalculationAlongSeries', array: true };
exports.argument = { propertyName: _base_metadata_1.argumentPropertyName, modelName: 'Argument', displayName: 'DashboardStringId.DescriptionItemArgument', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.rangeFilterDashboardItemSerializationsInfo = _series_item_1.seriesDashboardItemSerializationsInfo
    .concat([exports.rangeSeries, exports.argument, interactivity_options_1._filterItemInteractivityOptionsMeta, _coloring_options_1.coloringOptions, exports.dateTimePeriods, exports.defaultDateTimePeriodName])
    .map(e => e === _dashboard_item_1.showCaption ? _dashboard_item_1.showCaptionDefaultFalse : e);


/***/ }),

/***/ 73531:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FlowDateTimePeriodLimit = exports.FixedDateTimePeriodLimit = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const serializable_model_1 = __webpack_require__(29591);
const _period_limit_1 = __webpack_require__(74581);
class FixedDateTimePeriodLimit extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.isEmpty = ko.observable(false);
    }
    getInfo() {
        return _period_limit_1.fixedDateTimePeriodLimitSerializationsInfo;
    }
    getDateTimeValue() {
        return this.date();
    }
}
exports.FixedDateTimePeriodLimit = FixedDateTimePeriodLimit;
class FlowDateTimePeriodLimit extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.isEmpty = ko.observable(false);
        this.argumentInterval = ko.observable('Year');
    }
    getInfo() {
        return _period_limit_1.flowDateTimePeriodLimitSerializationsInfo;
    }
    _getAvailableIntervals() {
        return _period_limit_1.flowIntervalOrderedValues
            .slice(0, _period_limit_1.flowIntervalOrderedValues.indexOf(_period_limit_1.convertDateTimeGroupInterval(this.argumentInterval())) + 1)
            .map(value => {
            return {
                value: value,
                displayValue: _default_1.getLocalizationById(_period_limit_1.flowIntervalValues[value])
            };
        });
    }
}
exports.FlowDateTimePeriodLimit = FlowDateTimePeriodLimit;


/***/ }),

/***/ 63716:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RangeFilterItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const item_data_axis_names_1 = __webpack_require__(51101);
const _jquery_helpers_1 = __webpack_require__(59384);
const _range_filter_selection_validator_1 = __webpack_require__(82748);
const data_item_1 = __webpack_require__(44650);
const range_filter_calc_window_definition_1 = __webpack_require__(58554);
const _array_utils_1 = __webpack_require__(60618);
const _utils_1 = __webpack_require__(66358);
const _base_metadata_1 = __webpack_require__(17916);
const serializable_model_1 = __webpack_require__(29591);
const chart_series_creator_1 = __webpack_require__(52469);
const series_item_1 = __webpack_require__(21741);
const date_time_period_1 = __webpack_require__(78252);
const _range_filter_item_1 = __webpack_require__(30097);
const _range_filter_item_helper_1 = __webpack_require__(62248);
const _range_state_controller_1 = __webpack_require__(58015);
class RangeFilterItem extends series_item_1.SeriesItem {
    constructor(dashboardItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this._defaultDateTimePeriodIndexSubscription = null;
        this.currentSelectedDateTimePeriodName = ko.observable();
        this.series = analytics_utils_1.deserializeArray(dashboardItemJSON.Series, (item) => chart_series_creator_1.ChartSeriesCreator.createSeries(this, item, serializer));
        this.dateTimePeriods = analytics_utils_1.deserializeArray(dashboardItemJSON.DateTimePeriods, (item) => new date_time_period_1.DateTimePeriod(item, serializer));
        this._attachDataItem(this, _range_filter_item_1.argument.propertyName);
        this.__argument._specifics.acceptableShapingType = data_item_1.AcceptableShapingType.RangeDate;
        this.__argument._specifics.forceAddOlapExactDateFormat = true;
        this._stateController = new _range_state_controller_1.RangeStateController(this);
        this._stateController.initialize();
        _range_filter_item_helper_1._subscribeToDimension(this.argument, this.dateTimePeriods, this._dataManager);
    }
    get _supportParallelRequests() {
        return false;
    }
    _clearBindings() {
        super._clearBindings();
        this.dateTimePeriods.removeAll();
        this.series.removeAll();
    }
    _getInfoCore() {
        return _range_filter_item_1.rangeFilterDashboardItemSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'RangeFilter';
    }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
    _getClearMasterFilterSupported() { return true; }
    _getIsMasterFilter() { return true; }
    _getInteractivityDimensionLinks() {
        return [this.__argument];
    }
    _getIsVisualInteractivitySupported() { return false; }
    _getCanColorByDimensions() { return true; }
    _getCanColorByMeasures() { return true; }
    _getAreMeasuresColoredByDefault() {
        return this.series().length > 1;
    }
    _getIsDimensionColoredByDefault(dimension) {
        return !!this.__seriesDimensions().filter(link => link.dataItem() === dimension)[0];
    }
    _getColorizableDataItemsInfo() {
        return [{
                items: this.__seriesDimensions(),
                prefixId: _base_metadata_1.BindingSectionTitles.SeriesDimension
            }];
    }
    _getDefaultCalculationWindowDefinition() {
        return new range_filter_calc_window_definition_1.RangeFilterWindowDefinition();
    }
    _hasSelection() {
        if (this.currentSelectedDateTimePeriodName())
            return true;
        if (super._hasSelection()) {
            let fullRange = this._fullRange.peek();
            if (fullRange) {
                return !_array_utils_1.arrayEquals(fullRange, this._selectionValues()[0]);
            }
            else
                return true;
        }
        return false;
    }
    _getSelectionByPeriod(period) {
        let range = period.getDateTimeValue();
        return [[range.startValue, range.endValue]];
    }
    _getDisplayFilterValues(limitCount) {
        return this._stateController._getDisplayFilterValues(limitCount);
    }
    _getEntireRange() {
        var points = this._getPointsByDimension(this.__argument.uniqueName(), item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis);
        if (points && points.length > 0) {
            return [points[0].getValue(), points[points.length - 1].getValue()];
        }
        return [];
    }
    _validateSelectionByData(selection) {
        if (this.argument()) {
            let newRange = this._getEntireRange();
            if (!_array_utils_1.arrayEquals(newRange, this._fullRange.peek()))
                this._fullRange(newRange);
        }
        let validatedSelection = this._fullRange() && this._fullRange().length > 0 ? selection : undefined;
        this._setSelection(validatedSelection);
    }
    _getValidatedSelection(selectionValues) {
        let validatedValues = super._getValidatedSelection(selectionValues);
        if (this._fullRange() && this._fullRange().length > 0) {
            if (validatedValues) {
                let validatedRange = _range_filter_selection_validator_1.RangeFilterSelectionValidator.validate({
                    startValue: validatedValues[0][0],
                    endValue: validatedValues[0][1]
                }, this.argument()._actualDateTimeGroupInterval() === 'Year', {
                    minimum: this._fullRange()[0],
                    maximum: this._fullRange()[1]
                });
                validatedValues[0] = [validatedRange.startValue, validatedRange.endValue];
            }
        }
        return validatedValues;
    }
    _setState(itemState) {
        this._stateController.setState(itemState);
    }
    _removeSelectionFromState(state) {
        let itemState = super._removeSelectionFromState(_jquery_helpers_1.deepExtend({}, state));
        return this._stateController.removeSelectionFromState(itemState);
    }
    _setPredefinedPeriodToState(state, periodName) {
        let itemState = super._setPredefinedPeriodToState(_jquery_helpers_1.deepExtend({}, state), periodName);
        return this._stateController.setPredefinedPeriodToState(itemState, periodName);
    }
    _setSelectionToState(state, selection) {
        return this._stateController.setSelectionToState(state, selection);
    }
    _extendContentState(content) {
        super._extendContentState(content);
        this._stateController.extendContentState(content);
    }
    _isSortingEnabled() {
        return false;
    }
    _isTopNEnabled(dataItem) {
        return false;
    }
}
RangeFilterItem.rangeSeriesViewTypesMap = {
    Line: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap.Line,
    StackedLine: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap.StackedLine,
    FullStackedLine: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap.FullStackedLine,
    Area: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap.Area,
    StackedArea: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap.StackedArea,
    FullStackedArea: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap.FullStackedArea,
    Bar: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap.Bar,
    StackedBar: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap.StackedBar,
    FullStackedBar: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap.FullStackedBar
};
__decorate([
    _utils_1.collectionItemType('DateTimePeriod')
], RangeFilterItem.prototype, "dateTimePeriods", void 0);
exports.RangeFilterItem = RangeFilterItem;
serializable_model_1.itemTypesMap['RangeFilter'] = { type: RangeFilterItem, groupName: 'filter', title: 'DashboardStringId.DefaultNameRangeFilterItem', index: 310 };


/***/ }),

/***/ 60644:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scatterChartDashboardItemSerializationsInfo = exports.scatterChartWeight = exports.axisYMeasure = exports.axisXMeasure = exports.pointLabelOptions = exports.axisY = exports.axisX = exports.legend = exports.rotated = exports.scatterArgumentsMeta = void 0;
const _data_item_1 = __webpack_require__(44010);
const _base_metadata_1 = __webpack_require__(17916);
const chart_axis_1 = __webpack_require__(97851);
const chart_legend_1 = __webpack_require__(33166);
const _data_dashboard_item_1 = __webpack_require__(66302);
const interactivity_options_1 = __webpack_require__(50045);
const _coloring_options_1 = __webpack_require__(73498);
const scatter_point_label_options_1 = __webpack_require__(43383);
exports.scatterArgumentsMeta = { propertyName: _base_metadata_1.argumentsPropertyName, modelName: 'Dimensions', array: true };
exports.rotated = { propertyName: 'rotated', modelName: '@Rotated', displayName: 'DashboardWebStringId.Chart.Rotated', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.legend = { propertyName: 'legend', modelName: 'ChartLegend', displayName: 'DashboardWebStringId.Chart.Legend', type: chart_legend_1.ChartLegend };
exports.axisX = { propertyName: 'axisX', modelName: 'AxisX', displayName: 'DashboardWebStringId.Chart.AxisX', type: chart_axis_1.ChartAxisY };
exports.axisY = { propertyName: 'axisY', modelName: 'AxisY', displayName: 'DashboardWebStringId.Chart.AxisY', type: chart_axis_1.ScatterChartAxisY };
exports.pointLabelOptions = { propertyName: 'pointLabelOptions', modelName: 'PointLabelOptions', displayName: 'DashboardWebStringId.Chart.PointLabelOptions', type: scatter_point_label_options_1.ScatterPointLabelOptions };
exports.axisXMeasure = { propertyName: '__axisXMeasure', modelName: 'MeasureX', displayName: 'DashboardWebStringId.Chart.AxisXMeasure', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.axisYMeasure = { propertyName: '__axisYMeasure', modelName: 'MeasureY', displayName: 'DashboardWebStringId.Chart.AxisYMeasure', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.scatterChartWeight = { propertyName: _base_metadata_1.weightPropertyName, modelName: 'MeasureWeight', displayName: 'DashboardWebStringId.Chart.Weight', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.scatterChartDashboardItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([exports.scatterArgumentsMeta, interactivity_options_1._dashboardItemInteractivityOptionsMeta, exports.rotated, exports.legend, exports.axisX, exports.axisY, exports.pointLabelOptions, exports.axisXMeasure, exports.axisYMeasure, exports.scatterChartWeight, _coloring_options_1.coloringOptions]);


/***/ }),

/***/ 25298:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scatterPointLabelOptionsSerializationsInfo = exports.content = void 0;
const _point_label_options_1 = __webpack_require__(10054);
exports.content = {
    propertyName: 'content', modelName: '@Content', displayName: 'DashboardWebStringId.Chart.Content', defaultVal: 'Argument', simpleFormAdapterItem: 'listEditor',
    values: {
        'Argument': 'DashboardWebStringId.Binding.Argument',
        'Weight': 'DashboardWebStringId.Chart.Weight',
        'Values': 'DashboardWebStringId.Binding.Values',
        'ArgumentAndWeight': 'DashboardWebStringId.Chart.ArgumentAndWeight',
        'ArgumentAndValues': 'DashboardWebStringId.Chart.ArgumentAndValues'
    }
};
exports.scatterPointLabelOptionsSerializationsInfo = _point_label_options_1.pointLabelOptionsBaseSerializationsInfo.concat([exports.content, _point_label_options_1.position]);


/***/ }),

/***/ 91456:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ScatterChartItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const data_item_1 = __webpack_require__(44650);
const scatter_chart_calc_window_definition_1 = __webpack_require__(58720);
const _utils_1 = __webpack_require__(66358);
const _base_metadata_1 = __webpack_require__(17916);
const serializable_model_1 = __webpack_require__(29591);
const data_dashboard_item_1 = __webpack_require__(70355);
const _scatter_chart_item_1 = __webpack_require__(60644);
class ScatterChartItem extends data_dashboard_item_1.DataDashboardItem {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.arguments = ko.observableArray([]);
        this.__arguments = analytics_utils_1.deserializeArray(modelJson.Dimensions, (item) => new data_item_1.DataItemLink(this, item, serializer));
        this._subscribeDataItemLinkArrays(_scatter_chart_item_1.scatterArgumentsMeta);
        this.__arguments.subscribe((newValue) => {
            data_dashboard_item_1.DataDashboardItem._addColoringMeta(newValue);
        });
        data_dashboard_item_1.DataDashboardItem._addColoringMeta(this.__arguments());
        this._attachDataItem(this, _scatter_chart_item_1.scatterChartWeight.propertyName);
        this._attachDataItem(this, _scatter_chart_item_1.axisXMeasure.propertyName);
        this._attachDataItem(this, _scatter_chart_item_1.axisYMeasure.propertyName);
    }
    _clearBindings() {
        super._clearBindings();
        this.__arguments.removeAll();
    }
    _getInfoCore() {
        return _scatter_chart_item_1.scatterChartDashboardItemSerializationsInfo;
    }
    _isCalculationSupported() {
        return true;
    }
    _getDefaultItemType() {
        return 'ScatterChart';
    }
    _getMasterFilterMode() { return this.interactivityOptions.masterFilterMode(); }
    _getDrillDownEnabled() { return this.interactivityOptions.isDrillDownEnabled(); }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
    _getInteractivityDimensionLinks() { return this.__arguments(); }
    _getCanColorByMeasures() { return false; }
    _getCanColorByDimensions() { return true; }
    _getColorizableDataItemsInfo() {
        return [{
                items: this.__arguments(),
                prefixId: _base_metadata_1.BindingSectionTitles.Arguments
            }];
    }
    _getDefaultCalculationWindowDefinition() {
        return new scatter_chart_calc_window_definition_1.ScatterWindowDefinition();
    }
    _isSortingEnabled() {
        return false;
    }
}
__decorate([
    _utils_1.collectionItemType('Dimension')
], ScatterChartItem.prototype, "__arguments", void 0);
exports.ScatterChartItem = ScatterChartItem;
serializable_model_1.itemTypesMap['ScatterChart'] = { type: ScatterChartItem, groupName: 'common', title: 'DashboardStringId.DefaultNameScatterChartItem', index: 50 };


/***/ }),

/***/ 43383:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ScatterPointLabelOptions = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const point_label_options_1 = __webpack_require__(41435);
const _scatter_point_label_options_1 = __webpack_require__(25298);
class ScatterPointLabelOptions extends point_label_options_1.PointLabelOptionsBase {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return _scatter_point_label_options_1.scatterPointLabelOptionsSerializationsInfo;
    }
}
exports.ScatterPointLabelOptions = ScatterPointLabelOptions;


/***/ }),

/***/ 21741:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SeriesItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const data_item_1 = __webpack_require__(44650);
const _utils_1 = __webpack_require__(66358);
const data_dashboard_item_1 = __webpack_require__(70355);
const _series_item_1 = __webpack_require__(77270);
class SeriesItem extends data_dashboard_item_1.DataDashboardItem {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.__seriesDimensions = ko.observableArray([]);
        this.seriesDimensions = ko.observableArray([]);
        this.__seriesDimensions(analytics_utils_1.deserializeArray(modelJson.SeriesDimensions, (item) => new data_item_1.DataItemLink(this, item, serializer))());
        this._subscribeDataItemLinkArrays(_series_item_1.seriesDimensions);
    }
    _getInfoCore() {
        return _series_item_1.seriesDashboardItemSerializationsInfo;
    }
    _clearBindings() {
        super._clearBindings();
        this.__seriesDimensions.removeAll();
    }
    _getInteractivityDimensionLinks() {
        return this.__seriesDimensions();
    }
}
__decorate([
    _utils_1.collectionItemType('SeriesDimension')
], SeriesItem.prototype, "__seriesDimensions", void 0);
exports.SeriesItem = SeriesItem;


/***/ }),

/***/ 12319:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardTabPage = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const dashboard_item_1 = __webpack_require__(5815);
const _dashboard_tab_page_1 = __webpack_require__(18916);
class DashboardTabPage extends dashboard_item_1.DashboardItem {
    constructor(dashboardItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this._uniqueNamePrefix = 'dashboardTabPage';
    }
    _getInfoCore() {
        return _dashboard_tab_page_1.tabPageSerializationInfo;
    }
    getUniqueNamePrefix() {
        return this._uniqueNamePrefix;
    }
    _getDefaultItemType() {
        return 'Page';
    }
}
exports.DashboardTabPage = DashboardTabPage;


/***/ }),

/***/ 18916:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.tabPageSerializationInfo = exports.showItemAsTabPage = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _dashboard_item_1 = __webpack_require__(37710);
const interactivity_options_1 = __webpack_require__(50045);
exports.showItemAsTabPage = { propertyName: 'showItemAsTabPage', modelName: '@ShowItemAsTabPage', displayName: 'DashboardWebStringId.DisplayItemAsPage', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.tabPageSerializationInfo = _dashboard_item_1.dashboardItemSerializationsInfo.concat([interactivity_options_1._tabItemInteractivityOptions, exports.showItemAsTabPage]);


/***/ }),

/***/ 42657:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.tabContainerItemSerializationInfo = exports.tabPages = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _dashboard_item_1 = __webpack_require__(37710);
exports.tabPages = { propertyName: 'tabPages', modelName: 'Pages', array: true, category: _base_metadata_1.PropertyCategory.NoUpdate };
exports.tabContainerItemSerializationInfo = _dashboard_item_1.dashboardItemSerializationsInfo.concat([exports.tabPages]);


/***/ }),

/***/ 99290:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TabContainerItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _default_1 = __webpack_require__(65855);
const dashboard_state_1 = __webpack_require__(51372);
const _helper_classes_1 = __webpack_require__(8384);
const _knockout_utils_1 = __webpack_require__(4437);
const _utils_1 = __webpack_require__(66358);
const serializable_model_1 = __webpack_require__(29591);
const dashboard_item_1 = __webpack_require__(5815);
const dashboard_tab_page_1 = __webpack_require__(12319);
const _tab_container_item_1 = __webpack_require__(42657);
class TabContainerItem extends dashboard_item_1.DashboardItem {
    constructor(dashboardItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this.tabPages = analytics_utils_1.deserializeArray(dashboardItemJSON.Pages, (item) => new dashboard_tab_page_1.DashboardTabPage(item, serializer));
        if (this.tabPages().length === 0) {
            this._addNewPage();
        }
        this._activeTabPage = ko.observable();
        _knockout_utils_1.subscribeWithPrev(this._activeTabPage, (prevPage, page) => {
            let prevPageName = prevPage && this.tabPages().indexOf(prevPage) != -1 ? prevPage.componentName() : '';
            let activePageName = page && this.tabPages().indexOf(page) != -1 ? page.componentName() : '';
            if (this._activePageChanged && (prevPageName !== activePageName || (!prevPageName && !page))) {
                this._activePageChanged(prevPageName, activePageName);
            }
        });
        this._state = ko.computed(() => {
            var state = new dashboard_state_1.ItemState();
            if (this._activeTabPage() && this.tabPages().indexOf(this._activeTabPage()) !== 0) {
                state.TabPageName = this._activeTabPage().componentName();
            }
            return state;
        });
    }
    _setState(itemState) {
        super._setState(itemState);
        if (itemState.TabPageName) {
            let page = this.tabPages().filter(page => page.componentName() === itemState.TabPageName)[0];
            if (page && (!this._activeTabPage() || this._activeTabPage().name() !== page.name())) {
                this._activeTabPage(page);
            }
        }
    }
    _getInfoCore() {
        return _tab_container_item_1.tabContainerItemSerializationInfo;
    }
    _getDefaultItemType() {
        return 'TabContainer';
    }
    _addNewPage() {
        var tabPage = new dashboard_tab_page_1.DashboardTabPage({});
        tabPage.name(_helper_classes_1.NameGenerator.generateName(_default_1.getLocalizationById('DashboardStringId.DefaultNameTabPage') + ' ', this.tabPages(), 'name', 1));
        this.tabPages.push(tabPage);
        return tabPage;
    }
}
__decorate([
    _utils_1.collectionItemType('Page')
], TabContainerItem.prototype, "tabPages", void 0);
exports.TabContainerItem = TabContainerItem;
serializable_model_1.itemTypesMap['TabContainer'] = { type: TabContainerItem, groupName: 'layout', title: 'DashboardStringId.DefaultNameTabContainerItem', index: 115 };


/***/ }),

/***/ 3892:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextBoxItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const data_item_1 = __webpack_require__(44650);
const _utils_1 = __webpack_require__(66358);
const serializable_model_1 = __webpack_require__(29591);
const data_dashboard_item_1 = __webpack_require__(70355);
const _text_box_item_1 = __webpack_require__(69642);
class TextBoxItem extends data_dashboard_item_1.DataDashboardItem {
    constructor(dashboardItemJSON = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this.values = ko.observableArray([]);
        this.__values = analytics_utils_1.deserializeArray(dashboardItemJSON.Values, (item) => new data_item_1.DataItemLink(this, item, serializer));
        this._subscribeDataItemLinkArrays(_text_box_item_1.textBoxValues);
        this.__values.subscribe((links) => {
            this._setLinkCollectionAcceptableShapingType(links, data_item_1.AcceptableShapingType.String);
        });
        this._setLinkCollectionAcceptableShapingType(this.__values(), data_item_1.AcceptableShapingType.String);
        this._supportedUIStates(['error', 'loading']);
    }
    _clearBindings() {
        super._clearBindings();
        this.__values.removeAll();
    }
    _getInfoCore() {
        return _text_box_item_1.textBoxDashboardItemSerializationsInfo;
    }
    _isCalculationSupported() {
        return false;
    }
    _getDefaultItemType() {
        return 'TextBox';
    }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
    _getIsVisualInteractivitySupported() { return false; }
}
__decorate([
    _utils_1.collectionItemType('Value')
], TextBoxItem.prototype, "__values", void 0);
exports.TextBoxItem = TextBoxItem;
serializable_model_1.itemTypesMap['TextBox'] = { type: TextBoxItem, groupName: 'common', title: 'DashboardStringId.DefaultNameTextBoxItem', index: 80 };


/***/ }),

/***/ 50853:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.treemapDashboardItemSerializationsInfo = exports.groupsTooltipContentType = exports.groupsLabelContentType = exports.tilesTooltipContentType = exports.tilesLabelContentType = exports.layoutDirection = exports.layoutAlgorithm = exports.treeMapArgumentsMeta = exports.treeMapvalues = void 0;
const _base_metadata_1 = __webpack_require__(17916);
const _data_dashboard_item_1 = __webpack_require__(66302);
const interactivity_options_1 = __webpack_require__(50045);
const _coloring_options_1 = __webpack_require__(73498);
exports.treeMapvalues = { propertyName: _base_metadata_1.valuesPropertyName, modelName: 'Values', displayName: 'DashboardWebStringId.Binding.Values', array: true };
exports.treeMapArgumentsMeta = { propertyName: _base_metadata_1.argumentsPropertyName, modelName: 'Arguments', array: true };
exports.layoutAlgorithm = {
    propertyName: 'layoutAlgorithm', modelName: '@LayoutAlgorithm', displayName: 'DashboardWebStringId.TreemapLayoutAlgorithm', defaultVal: 'Squarified', simpleFormAdapterItem: 'listEditor',
    values: {
        'SliceAndDice': 'DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm',
        'Squarified': 'DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm',
        'Striped': 'DashboardWebStringId.Treemap.StripedLayoutAlgorithm'
    }
};
exports.layoutDirection = {
    propertyName: 'layoutDirection', modelName: '@LayoutDirection', displayName: 'DashboardWebStringId.Treemap.LayoutDirection', defaultVal: 'TopLeftToBottomRight', simpleFormAdapterItem: 'listEditor',
    values: {
        'BottomLeftToTopRight': 'DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection',
        'BottomRightToTopLeft': 'DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection',
        'TopLeftToBottomRight': 'DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection',
        'TopRightToBottomLeft': 'DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection'
    }
};
exports.tilesLabelContentType = {
    propertyName: 'tilesLabelContentType', modelName: '@TilesLabelContentType', displayName: 'DashboardWebStringId.TilesLabelContentType', defaultVal: 'Argument', simpleFormAdapterItem: 'listEditor',
    values: {
        'None': 'DashboardWebStringId.Treemap.TileLabelsNone',
        'Argument': 'DashboardWebStringId.Treemap.TileLabelsArgument',
        'Value': 'DashboardWebStringId.Treemap.TileLabelsValue',
        'ArgumentAndValue': 'DashboardWebStringId.Treemap.TileLabelsArgumentAndValue'
    }
};
exports.tilesTooltipContentType = {
    propertyName: 'tilesTooltipContentType', modelName: '@TilesTooltipContentType', displayName: 'DashboardWebStringId.TilesTooltipContentType', defaultVal: 'ArgumentAndValue', simpleFormAdapterItem: 'listEditor',
    values: {
        'None': 'DashboardWebStringId.Treemap.TileTooltipsNone',
        'Argument': 'DashboardWebStringId.Treemap.TileTooltipsArgument',
        'Value': 'DashboardWebStringId.Treemap.TileTooltipsValue',
        'ArgumentAndValue': 'DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue'
    }
};
exports.groupsLabelContentType = {
    propertyName: 'groupsLabelContentType', modelName: '@GroupsLabelContentType', displayName: 'DashboardWebStringId.GroupsLabelContentType', defaultVal: 'Argument', simpleFormAdapterItem: 'listEditor',
    values: {
        'None': 'DashboardWebStringId.Treemap.GroupLabelsNone',
        'Argument': 'DashboardWebStringId.Treemap.GroupLabelsArgument',
        'Value': 'DashboardWebStringId.Treemap.GroupLabelsValue',
        'ArgumentAndValue': 'DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue'
    }
};
exports.groupsTooltipContentType = {
    propertyName: 'groupsTooltipContentType', modelName: '@GroupsTooltipContentType', displayName: 'DashboardWebStringId.GroupsTooltipContentType', defaultVal: 'ArgumentAndValue', simpleFormAdapterItem: 'listEditor',
    values: {
        'None': 'DashboardWebStringId.Treemap.GroupTooltipsNone',
        'Argument': 'DashboardWebStringId.Treemap.GroupTooltipsArgument',
        'Value': 'DashboardWebStringId.Treemap.GroupTooltipsValue',
        'ArgumentAndValue': 'DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue'
    }
};
exports.treemapDashboardItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([exports.treeMapvalues, exports.treeMapArgumentsMeta, exports.layoutAlgorithm, exports.layoutDirection, exports.tilesLabelContentType, exports.tilesTooltipContentType, exports.groupsLabelContentType, exports.groupsTooltipContentType, interactivity_options_1._dashboardItemInteractivityOptionsMeta, _coloring_options_1.coloringOptions]);


/***/ }),

/***/ 78717:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreemapItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const data_item_1 = __webpack_require__(44650);
const _utils_1 = __webpack_require__(66358);
const _base_metadata_1 = __webpack_require__(17916);
const serializable_model_1 = __webpack_require__(29591);
const data_dashboard_item_1 = __webpack_require__(70355);
const _treemap_item_1 = __webpack_require__(50853);
class TreemapItem extends data_dashboard_item_1.DataDashboardItem {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.values = ko.observableArray([]);
        this.__arguments = ko.observableArray([]);
        this.arguments = ko.observableArray([]);
        this.__arguments.subscribe((newArguments) => {
            data_dashboard_item_1.DataDashboardItem._addColoringMeta(newArguments);
        });
        this.__arguments(analytics_utils_1.deserializeArray(modelJson.Arguments, (item) => new data_item_1.DataItemLink(this, item, serializer))());
        this._subscribeDataItemLinkArrays(_treemap_item_1.treeMapArgumentsMeta);
        this.__values = analytics_utils_1.deserializeArray(modelJson.Values, (item) => new data_item_1.DataItemLink(this, item, serializer));
        this._subscribeDataItemLinkArrays(_treemap_item_1.treeMapvalues);
    }
    _getInfoCore() {
        return _treemap_item_1.treemapDashboardItemSerializationsInfo;
    }
    _clearBindings() {
        super._clearBindings();
        this.__arguments.removeAll();
        this.__values.removeAll();
    }
    _isCalculationSupported() {
        return false;
    }
    _getDefaultItemType() {
        return 'Treemap';
    }
    _getCanColorByMeasures() { return true; }
    _getCanColorByDimensions() { return true; }
    _getAreMeasuresColoredByDefault() { return this.__values().length > 1 && this.__arguments().length === 0; }
    _getIsDimensionColoredByDefault(dimension) {
        return this.__arguments().length > 0 && this.__arguments()[0].dataItem() === dimension;
    }
    _getMasterFilterMode() { return this.interactivityOptions.masterFilterMode(); }
    _getDrillDownEnabled() { return this.interactivityOptions.isDrillDownEnabled(); }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
    _getInteractivityDimensionLinks() { return this.__arguments(); }
    _getLayersCount() {
        return !!this.__arguments && this.__arguments().length > 0 ? this.__values().length : 0;
    }
    _getLayerName() {
        return this._getDataItemDisplayName(this.__values()[this._selectedElementIndex() || 0].dataItem());
    }
    _getColorizableDataItemsInfo() {
        return [{
                items: this.__arguments(),
                prefixId: _base_metadata_1.BindingSectionTitles.Arguments
            }];
    }
    _isSortingEnabled() {
        return false;
    }
}
__decorate([
    _utils_1.collectionItemType('Value')
], TreemapItem.prototype, "__values", void 0);
__decorate([
    _utils_1.collectionItemType('Argument')
], TreemapItem.prototype, "__arguments", void 0);
exports.TreemapItem = TreemapItem;
serializable_model_1.itemTypesMap['Treemap'] = { type: TreemapItem, groupName: 'common', title: 'DashboardStringId.DefaultNameTreemapItem', index: 40 };


/***/ }),

/***/ 5279:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardLayoutCreator = void 0;
const dashboard_tab_page_1 = __webpack_require__(12319);
const tab_container_item_1 = __webpack_require__(99290);
const dashboard_layout_group_1 = __webpack_require__(97805);
class DashboardLayoutCreator {
    constructor(_clientWidth = 1, _clientHeight = 1, _dashboard) {
        this._clientWidth = _clientWidth;
        this._clientHeight = _clientHeight;
        this._dashboard = _dashboard;
        this._layoutRoot = this._dashboard.layout();
        this.rebuildLayout();
    }
    rebuildLayout() {
        this._removeIncorrectLayoutNodes();
        if (this._layoutRoot.childNodes().length === 0) {
            this._layoutRoot.childNodes.push(new dashboard_layout_group_1.DashboardLayoutGroup());
        }
        this._createLayoutNodes(this._dashboard.items().filter(item => item instanceof tab_container_item_1.TabContainerItem));
        this._createLayoutNodes(this._dashboard._tabPages());
        this._createLayoutNodes(this._dashboard.groups());
        this._createLayoutNodes(this._dashboard.items());
    }
    _removeIncorrectLayoutNodes() {
        var layoutNodesToRemove = this._layoutRoot.getNodesRecursive().filter(layoutNode => {
            if (layoutNode.dashboardItem()) {
                var dashboardItem = this._dashboard.findItem(layoutNode.dashboardItem());
                if (!dashboardItem) {
                    return true;
                }
                else if (!!dashboardItem.parentContainer()) {
                    let parent = layoutNode.parentNode();
                    while (parent != this._layoutRoot && parent.dashboardItem() == null)
                        parent = parent.parentNode();
                    if (parent.dashboardItem() !== dashboardItem.parentContainer())
                        return true;
                }
            }
            else if (layoutNode instanceof dashboard_layout_group_1.DashboardLayoutGroup && layoutNode.childNodes().length === 0) {
                return true;
            }
            return false;
        });
        layoutNodesToRemove.forEach(layoutNode => layoutNode.remove());
    }
    _getParentItem(dashboardItem) {
        if (dashboardItem instanceof dashboard_tab_page_1.DashboardTabPage) {
            return this._dashboard.items()
                .filter(item => item instanceof tab_container_item_1.TabContainerItem)
                .filter(tabContainer => tabContainer.tabPages().indexOf(dashboardItem) !== -1)[0];
        }
        return this._dashboard.findItem(dashboardItem.parentContainer());
    }
    _createLayoutNodes(dashboardItems) {
        dashboardItems
            .filter(dashboardItem => !this._layoutRoot.findLayoutItem(dashboardItem))
            .forEach(dashboardItem => {
            var parentNode = null;
            var parentItem = this._getParentItem(dashboardItem);
            if (parentItem) {
                parentNode = this._layoutRoot.findLayoutItem(parentItem);
            }
            if (!parentNode) {
                parentNode = this._layoutRoot.childNodes()[0];
            }
            this._createLayoutNode(dashboardItem, parentNode);
        });
    }
    _createLayoutNode(dashboardItem, layoutGroup) {
        if (layoutGroup.childNodes().length == 0 || this._getParentItem(dashboardItem) instanceof tab_container_item_1.TabContainerItem) {
            layoutGroup.childNodes.push(this._dashboard._createDashboardLayoutNode(dashboardItem));
            return;
        }
        var maxItem = layoutGroup.getItemsRecursive().reduce((acc, layoutNode) => {
            if (acc === null) {
                return layoutNode;
            }
            else {
                if (acc._relativeArea() < layoutNode._relativeArea())
                    return layoutNode;
                return acc;
            }
        }, null);
        var newLayoutNode = this._dashboard._createDashboardLayoutNode(dashboardItem);
        if (maxItem == null) {
            layoutGroup.childNodes.push(newLayoutNode);
            return;
        }
        if (maxItem.parentNode().orientation() === 'Horizontal') {
            if (maxItem._relativeHeight() * this._clientHeight < maxItem._relativeWidth() * this._clientWidth) {
                maxItem.weight(maxItem.weight() / 2);
                newLayoutNode.weight(maxItem.weight());
                maxItem.insert(newLayoutNode, 'right');
            }
            else {
                newLayoutNode.weight(maxItem.weight());
                maxItem.insert(newLayoutNode, 'bottom');
            }
        }
        else {
            if (maxItem._relativeHeight() * this._clientHeight > maxItem._relativeWidth() * this._clientWidth) {
                maxItem.weight(maxItem.weight() / 2);
                newLayoutNode.weight(maxItem.weight());
                maxItem.insert(newLayoutNode, 'bottom');
            }
            else {
                newLayoutNode.weight(maxItem.weight());
                maxItem.insert(newLayoutNode, 'right');
            }
        }
    }
}
exports.DashboardLayoutCreator = DashboardLayoutCreator;


/***/ }),

/***/ 74265:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardLayoutItemPlaceholder = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const dashboard_layout_node_1 = __webpack_require__(48033);
class DashboardLayoutItemPlaceholder extends dashboard_layout_node_1.DashboardLayoutNode {
    get _template() { return 'dx-dashboard-item-placeholder'; }
    constructor(parent, serializer = new analytics_utils_1.ModelSerializer()) {
        super({}, serializer);
        this.parentNode(parent);
    }
    moveTo(itemModel, location) { }
    _delete() { }
    _createViewModel() {
        var baseViewModel = super._createViewModel();
        baseViewModel.create = (modelItemJson, location) => {
            var newItemModel = this.parentNode()._dashboard()._createDashboardLayoutItem(modelItemJson);
            this.parentNode()._addItem(newItemModel);
            return newItemModel._createViewModel();
        };
        baseViewModel.moveTo = (itemModel, location) => { };
        baseViewModel.hasItem = ko.observable(true);
        return baseViewModel;
    }
    _insertItemCore(layoutNodeToInsert, position) {
        if (this.parentNode()) {
            this.parentNode().childNodes.push(layoutNodeToInsert);
        }
    }
    _getDefaultItemType() { return ''; }
}
exports.DashboardLayoutItemPlaceholder = DashboardLayoutItemPlaceholder;


/***/ }),

/***/ 22335:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deserializeDashboardLayoutNode = exports._layoutItemTypeMap = void 0;
const analytics_utils_1 = __webpack_require__(25733);
exports._layoutItemTypeMap = {};
function deserializeDashboardLayoutNode(itemModel, serializer = new analytics_utils_1.ModelSerializer()) {
    var itemType = itemModel['@ItemType'];
    return new exports._layoutItemTypeMap[itemType](itemModel, serializer);
}
exports.deserializeDashboardLayoutNode = deserializeDashboardLayoutNode;


/***/ }),

/***/ 97805:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardLayoutRootGroup = exports.DashboardLayoutGroup = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const dashboard_layout_node_1 = __webpack_require__(48033);
const _layout_item_placeholder_1 = __webpack_require__(74265);
const _layout_utils_1 = __webpack_require__(22335);
class DashboardLayoutGroup extends dashboard_layout_node_1.DashboardLayoutNode {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.childNodes = ko.observableArray([]);
        this.childNodes(analytics_utils_1.deserializeArray(modelJson.LayoutItems || {}, modelJson => _layout_utils_1.deserializeDashboardLayoutNode(modelJson, serializer))());
        this.childNodes().forEach(childNode => childNode.parentNode(this));
        this.parentNode.subscribe(newParentNode => {
            this.childNodes().forEach(childNode => childNode.parentNode(this));
        });
        this.childNodes.subscribe((arrayChanges) => {
            arrayChanges.forEach(arrayChange => {
                if (arrayChange.status === 'added') {
                    var addedLayoutItem = arrayChange.value;
                    addedLayoutItem.parentNode(this);
                }
                if (arrayChange.status === 'deleted') {
                    var removedLayoutItem = arrayChange.value;
                    if (removedLayoutItem.parentNode() === this) {
                        arrayChange.value.parentNode(null);
                    }
                }
            });
        }, null, 'arrayChange');
    }
    get _template() { return 'dx-dashboard-group'; }
    get _createPlaceholderFunc() { return () => new _layout_item_placeholder_1.DashboardLayoutItemPlaceholder(this)._createViewModel(); }
    get _visibleItems() { return this.childNodes; }
    get _childItems() { return this.childNodes; }
    get _orientation() { return this.orientation; }
    findLayoutItem(dashboardItem) {
        var result = super.findLayoutItem(dashboardItem);
        if (!result) {
            for (let childLayoutItem of this.childNodes()) {
                result = childLayoutItem.findLayoutItem(dashboardItem);
                if (!!result) {
                    break;
                }
            }
        }
        return result;
    }
    getNodesRecursive() {
        return this.childNodes().reduce((acc, layoutItem) => {
            acc.push(layoutItem);
            if (layoutItem instanceof DashboardLayoutGroup) {
                acc = acc.concat(layoutItem.getNodesRecursive());
            }
            return acc;
        }, []);
    }
    getItemsRecursive() {
        return this.getNodesRecursive().filter(node => node.dashboardItem());
    }
    _attachToGroupWithInversedOrientation(target, itemToAttach, position) {
        var owner = this;
        var newGroupItemModel = new DashboardLayoutGroup();
        newGroupItemModel.orientation(owner.orientation());
        owner.childNodes().slice(0).forEach(node => {
            owner._detachChild(node);
            newGroupItemModel.childNodes.push(node);
        });
        owner.orientation(newGroupItemModel.orientation() === 'Horizontal' ? 'Vertical' : 'Horizontal');
        owner.childNodes.push(newGroupItemModel);
        owner._attachChild(target, itemToAttach, position);
    }
    _attachChild(target, itemToAttach, position) {
        var attachBefore = true;
        var owner = this;
        if (this.orientation() === 'Horizontal') {
            switch (position) {
                case 'left':
                    break;
                case 'right':
                    attachBefore = false;
                    break;
                case 'top':
                    owner = this._wrapChildWithGroup(target, 'Vertical');
                    break;
                case 'bottom':
                    attachBefore = false;
                    owner = this._wrapChildWithGroup(target, 'Vertical');
                    break;
            }
        }
        else {
            switch (position) {
                case 'left':
                    owner = this._wrapChildWithGroup(target, 'Horizontal');
                    break;
                case 'right':
                    attachBefore = false;
                    owner = this._wrapChildWithGroup(target, 'Horizontal');
                    break;
                case 'top':
                    break;
                case 'bottom':
                    attachBefore = false;
                    break;
            }
        }
        if (!this.parentNode() && owner === this) {
            owner = this._wrapChildWithGroup(target, 'Horizontal');
        }
        _attachChildCore(owner, target, itemToAttach, attachBefore);
    }
    _detachChild(removedChildLayoutNode) {
        this.childNodes.splice(this.childNodes().indexOf(removedChildLayoutNode), 1);
        if (this.childNodes().length === 0 && !this.item) {
            this.remove();
        }
        this._ensureGroupIsNeeded();
    }
    _ensureGroupIsNeeded() {
        if (this.childNodes().length === 1 && !this.item && this.parentNode() && this.parentNode().parentNode()) {
            var childToUnwrap = this.childNodes()[0];
            var parentNode = this.parentNode();
            childToUnwrap.weight(this.weight());
            this.childNodes.remove(childToUnwrap);
            parentNode.childNodes.splice(parentNode.childNodes().indexOf(this), 1, childToUnwrap);
            parentNode._ensureGroupIsNeeded();
        }
    }
    _wrapChildWithGroup(childLayoutNode, orientation) {
        var newGroupItemModel = new DashboardLayoutGroup();
        newGroupItemModel.weight(childLayoutNode.weight());
        newGroupItemModel.orientation(orientation);
        _attachChildCore(this, childLayoutNode, newGroupItemModel, true);
        this._detachChild(childLayoutNode);
        newGroupItemModel.childNodes.push(childLayoutNode);
        return newGroupItemModel;
    }
    _getOrientationByInsertPosition(position) {
        return (position === 'left' || position === 'right') ? 'Horizontal' : 'Vertical';
    }
    _insertItemCore(layoutNodeToInsert, position, insertionBehavior) {
        if (this.parentNode()) {
            if (insertionBehavior === 'InsertIntoGroup' && this._getOrientationByInsertPosition(position) !== this.orientation()) {
                this._attachToGroupWithInversedOrientation(this, layoutNodeToInsert, position);
            }
            else {
                super._insertItemCore(layoutNodeToInsert, position);
            }
        }
        else {
            this._addItem(layoutNodeToInsert);
        }
    }
    _addItem(layoutNodeToInsert) {
        this.childNodes.push(layoutNodeToInsert);
    }
    _getDefaultItemType() { return 'LayoutGroup'; }
    _deleteDashbordItem() {
        super._deleteDashbordItem();
        if (this._dashboard()) {
            this._dashboard().items.remove(item => item.parentContainer() === this.item.componentName());
            this._dashboard().groups.remove(this.item);
        }
    }
}
exports.DashboardLayoutGroup = DashboardLayoutGroup;
function _attachChildCore(owner, target, sibling, before = true) {
    var index = owner.childNodes().indexOf(target);
    if (index == -1)
        index = 0;
    owner.childNodes.splice(before ? index : index + 1, 0, sibling);
}
_layout_utils_1._layoutItemTypeMap['LayoutGroup'] = DashboardLayoutGroup;
class DashboardLayoutRootGroup extends DashboardLayoutGroup {
    constructor(dashboard, modelJson, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this._dashboard(dashboard);
        this.weight(undefined);
    }
    _getDefaultItemType() { return ''; }
    _addItem(layoutNodeToInsert) {
        if (this.childNodes().length == 0) {
            var targetLayoutItem = new DashboardLayoutGroup();
            targetLayoutItem.childNodes.push(layoutNodeToInsert);
            this.childNodes.push(targetLayoutItem);
        }
        else if (this.childNodes().length == 1 && this.childNodes()[0] instanceof DashboardLayoutGroup) {
            this.childNodes()[0].childNodes.push(layoutNodeToInsert);
        }
        else if (this.childNodes().length > 1) {
            throw new Error('Root layout item has more than one child.');
        }
    }
}
exports.DashboardLayoutRootGroup = DashboardLayoutRootGroup;


/***/ }),

/***/ 37021:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardLayoutItem = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const dashboard_layout_node_1 = __webpack_require__(48033);
const _layout_utils_1 = __webpack_require__(22335);
class DashboardLayoutItem extends dashboard_layout_node_1.DashboardLayoutNode {
    get _template() { return 'dx-dashboard-item'; }
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    _getDefaultItemType() { return 'LayoutItem'; }
    _deleteDashbordItem() {
        if (this._dashboard()) {
            this._dashboard().items.remove(this.item);
        }
    }
}
exports.DashboardLayoutItem = DashboardLayoutItem;
_layout_utils_1._layoutItemTypeMap['LayoutItem'] = DashboardLayoutItem;


/***/ }),

/***/ 48033:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardLayoutNode = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _knockout_utils_1 = __webpack_require__(4437);
const _undo_engine_helper_1 = __webpack_require__(2908);
const dashboard_item_1 = __webpack_require__(5815);
const group_item_1 = __webpack_require__(86961);
const dashboard_tab_page_1 = __webpack_require__(12319);
const tab_container_item_1 = __webpack_require__(99290);
const serializable_model_1 = __webpack_require__(29591);
const _dashboard_layout_node_1 = __webpack_require__(29636);
class DashboardLayoutNode extends serializable_model_1.TypedSerializableModel {
    constructor(dashboardLayoutItemJSON, serializer = new analytics_utils_1.ModelSerializer()) {
        super(dashboardLayoutItemJSON, serializer);
        this.parentNode = ko.observable();
        this._dashboard = ko.observable();
        this._item = ko.observable();
        this._relativeWidth = ko.computed(() => {
            if (!this.parentNode()) {
                return 1;
            }
            else if (this.parentNode().orientation() === 'Horizontal')
                return this.parentNode()._relativeWidth() * (this.weight() / this.parentNode().childNodes().reduce((acc, item) => acc + item.weight(), 0));
            else
                return this.parentNode()._relativeWidth();
        });
        this._relativeHeight = ko.computed(() => {
            if (!this.parentNode()) {
                return 1;
            }
            else if (this.parentNode().orientation() === 'Vertical')
                return this.parentNode()._relativeHeight() * (this.weight() / this.parentNode().childNodes().reduce((acc, item) => acc + item.weight(), 0));
            else
                return this.parentNode()._relativeHeight();
        });
        this._relativeArea = ko.computed(() => {
            return this._relativeWidth() * this._relativeHeight();
        });
        this._activeTabPage = ko.observable(undefined);
        this._activeTabIndex = ko.observable(0);
        _knockout_utils_1.safeSubscribe({
            dashboard: this._dashboard
        }, args => {
            if (args.dashboard) {
                return _knockout_utils_1.safeSubscribe({
                    allItems: args.dashboard._allItems,
                    componentName: this.dashboardItem
                }, innerArgs => {
                    let dashboardItem = innerArgs.allItems.filter(item => item.componentName() === innerArgs.componentName)[0] || null;
                    if (dashboardItem !== this._item()) {
                        this._item(dashboardItem);
                    }
                });
            }
            else {
                this._item(null);
            }
        });
        ko.computed(() => {
            this._dashboard(this.parentNode() && this.parentNode()._dashboard() || null);
        });
        this.parentNode.subscribe(_ => this._ensureItemParentContainer());
        this._item.subscribe(_ => this._ensureItemParentContainer());
        if (!this.weight()) {
            this.weight(1);
        }
    }
    static _canAttach(parent, dashboardLayoutNode) {
        if (dashboardLayoutNode) {
            var containsParent = (predicate) => {
                var container = parent;
                while (!!container) {
                    if (predicate(container)) {
                        return true;
                    }
                    container = container.parentNode();
                }
                return false;
            };
            var itemType = dashboardLayoutNode instanceof DashboardLayoutNode ? dashboardLayoutNode._getDefaultItemType() : dashboardLayoutNode['@ItemType'];
            if (itemType === 'TabContainer' || itemType === 'LayoutTabContainer') {
                return !containsParent(container => container.item instanceof group_item_1.GroupItem) &&
                    !containsParent(container => container.item instanceof tab_container_item_1.TabContainerItem);
            }
            var isVisbleGroup = (node) => {
                if (node instanceof DashboardLayoutNode) {
                    return !!node.dashboardItem();
                }
                else {
                    return true;
                }
            };
            if ((itemType === 'Group' || itemType === 'LayoutGroup') && isVisbleGroup(dashboardLayoutNode)) {
                return !containsParent(container => container.item instanceof group_item_1.GroupItem);
            }
        }
        return true;
    }
    get item() {
        return this._item();
    }
    set item(newItem) {
        if (this.item !== newItem) {
            this._setItemCore(newItem);
        }
    }
    getInfo() {
        return _dashboard_layout_node_1.layoutItemSerializationsInfo;
    }
    findLayoutItem(dashboardItem) {
        return this.item === dashboardItem ? this : undefined;
    }
    insert(itemToInsert, position) {
        var layoutNodeToInsert = null;
        if (itemToInsert instanceof dashboard_item_1.DashboardItem)
            layoutNodeToInsert = this._dashboard() && this._dashboard()._createDashboardLayoutNode(itemToInsert) || null;
        else
            layoutNodeToInsert = itemToInsert;
        if (!layoutNodeToInsert || !this._canAttach(layoutNodeToInsert)) {
            return;
        }
        this._insertItemCore(layoutNodeToInsert, position);
    }
    moveTo(targetItem, position) {
        this._moveTo(targetItem, position);
    }
    _moveTo(targetItem, position, insertionBehavior) {
        this.remove();
        targetItem._insertItemCore(this, position, insertionBehavior);
    }
    remove() {
        if (this.parentNode()) {
            this.parentNode()._detachChild(this);
            this.parentNode(null);
        }
    }
    _create(modelItemJson, position, insertionBehavior) {
        var newItemModel = this._dashboard()._createDashboardLayoutItem(modelItemJson);
        if (!!this.weight()) {
            newItemModel.weight(this.weight());
        }
        this._insertItemCore(newItemModel, position, insertionBehavior);
        return newItemModel;
    }
    _validateParentNode(newParentNode) {
        this.parentNode(newParentNode);
    }
    _canAttach(itemToAttach) {
        return DashboardLayoutNode._canAttach(this.parentNode(), itemToAttach);
    }
    _createViewModel() {
        if (!this._viewModel) {
            this._viewModel = {
                model: this,
                dashboardItem: this.dashboardItem,
                template: this._template,
                hasItem: ko.computed(() => !!this.item),
                item: ko.computed(() => {
                    if (this.item instanceof dashboard_tab_page_1.DashboardTabPage) {
                        return this._dashboard()._getDisplayDashboardItem(this.item);
                    }
                    return this.item;
                }),
                create: (modelItemJson, location, insertionBehavior) => {
                    let layoutItemModel = this._create(modelItemJson, location, insertionBehavior);
                    return layoutItemModel && layoutItemModel._createViewModel() || null;
                },
                createTabPage: () => this._createTabPage(),
                moveTo: (itemViewModel, location, insertionBehavior) => {
                    this._moveTo(itemViewModel.model, location, insertionBehavior);
                    return itemViewModel.model._createViewModel();
                },
                delete: () => this._delete(),
                canAttach: (something) => this._canAttach(something.model ? something.model : something),
                ignoreChildMaxHeight: this._ignoreChildMaxHeight,
                orientation: this._orientation,
                getPlaceholder: this._createPlaceholderFunc,
                weight: this.weight,
                visibleItems: this._visibleItems,
                childItems: this._childItems,
                activeTabPage: this._activeTabPage,
                activeTabIndex: this._activeTabIndex,
                dragOverInnerElementController: this._dragOverInnerElementController
            };
        }
        return this._viewModel;
    }
    get _template() { return ''; }
    get _ignoreChildMaxHeight() { return false; }
    get _visibleItems() { return ko.observableArray([]); }
    get _childItems() { return ko.observableArray([]); }
    get _orientation() { return ko.observable('Horizontal'); }
    get _createPlaceholderFunc() { return null; }
    get _dragOverInnerElementController() { return null; }
    _delete() {
        this._deleteDashbordItem();
        this.remove();
    }
    _insertItemCore(layoutNodeToInsert, position, insertionBehavior) {
        if (this.parentNode()) {
            this.parentNode()._attachChild(this, layoutNodeToInsert, position);
        }
    }
    _setItemCore(newItem) {
        this.dashboardItem(newItem.componentName());
    }
    _createTabPage() {
    }
    _ensureItemParentContainer() {
        if (!!this._item()) {
            var current = this.parentNode();
            while (!!current && !(current._item() instanceof group_item_1.GroupItem || current._item() instanceof dashboard_tab_page_1.DashboardTabPage)) {
                current = current.parentNode();
            }
            if (!!current && (current._item() instanceof group_item_1.GroupItem || current._item() instanceof dashboard_tab_page_1.DashboardTabPage)) {
                this._item().parentContainer(current._item().componentName());
            }
            else {
                this._item().parentContainer(undefined);
            }
        }
    }
    _deleteDashbordItem() {
    }
}
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DashboardLayoutNode.prototype, "insert", null);
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DashboardLayoutNode.prototype, "_moveTo", null);
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DashboardLayoutNode.prototype, "remove", null);
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DashboardLayoutNode.prototype, "_create", null);
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DashboardLayoutNode.prototype, "_delete", null);
exports.DashboardLayoutNode = DashboardLayoutNode;


/***/ }),

/***/ 70091:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardLayoutTabContainer = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _undo_engine_helper_1 = __webpack_require__(2908);
const _knockout_utils_1 = __webpack_require__(4437);
const dashboard_layout_group_1 = __webpack_require__(97805);
const dashboard_layout_tab_page_1 = __webpack_require__(60209);
const _layout_utils_1 = __webpack_require__(22335);
class DashboardLayoutTabContainer extends dashboard_layout_group_1.DashboardLayoutGroup {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this._activeTabIndex = ko.computed(() => {
            return this.childNodes().map(node => node.item).indexOf(this._activeTabPage());
        });
        this._activeTabPage = ko.computed({
            read: () => {
                return this.item ? this.item._activeTabPage() : undefined;
            },
            write: (tabPage) => {
                let containerItem = this.item;
                if (containerItem && containerItem._activeTabPage() !== tabPage) {
                    containerItem._activeTabPage(tabPage);
                }
            }
        });
        this._visibleItemsCore = ko.observableArray();
        ko.computed(() => {
            let tabContainerItem = this.item;
            if (tabContainerItem && !tabContainerItem._activeTabPage.peek()) {
                let firstTabPageLayoutItem = this.childNodes()[0];
                if (firstTabPageLayoutItem && firstTabPageLayoutItem.item) {
                    tabContainerItem._activeTabPage(firstTabPageLayoutItem.item);
                }
            }
        });
        _knockout_utils_1.subscribeArrayChange(this.childNodes, {
            added: (page, index) => {
                if (this.childNodes().length === 1 && !this._activeTabPage()) {
                    if (page.item) {
                        this._activeTabPage(page.item);
                    }
                    else {
                        let _disposables = ko.computed(() => {
                            if (page.item) {
                                this._activeTabPage(page.item);
                                _disposables.dispose();
                            }
                        });
                    }
                }
            },
            deleted: (page) => {
                if (this._activeTabPage() && this._activeTabPage().componentName() === page.dashboardItem()) {
                    this._activeTabPage(this.childNodes().length ? this.childNodes()[0].item : null);
                }
            }
        });
        ko.computed(() => {
            this._visibleItemsCore.removeAll();
            if (this._tabContainer && this._tabContainer._activeTabPage()) {
                var item = this.childNodes().filter(childNode => childNode.item === this._tabContainer._activeTabPage())[0];
                if (item)
                    this._visibleItemsCore.push(item);
            }
        });
    }
    get _tabContainer() { return this.item; }
    _getDefaultItemType() { return 'LayoutTabContainer'; }
    get _template() { return 'dx-dashboard-tab-container'; }
    get _visibleItems() { return this._visibleItemsCore; }
    get _ignoreChildMaxHeight() { return true; }
    get _dragOverInnerElementController() {
        return {
            selector: '.dx-layout-item-container .dx-tab',
            onDragOver: (index) => {
                if (this._tabContainer) {
                    this._activeTabPage(this.childNodes()[index].item);
                }
            }
        };
    }
    _setItemCore(newItem) {
        super._setItemCore(newItem);
        var tabContainerItem = newItem;
        tabContainerItem.tabPages().forEach(tabPage => this._addLayoutTabPage(tabPage));
    }
    _createTabPage() {
        if (this._tabContainer) {
            var tabPageModel = this._tabContainer._addNewPage();
            let layoutTabPage = this._addLayoutTabPage(tabPageModel);
            this._activeTabPage(tabPageModel);
            return layoutTabPage;
        }
        return undefined;
    }
    _removeLayoutTabPage(tabPageModel) {
        var tabPageLayoutItem = this._dashboard().layout().findLayoutItem(tabPageModel);
        if (tabPageLayoutItem) {
            tabPageLayoutItem._createViewModel().delete();
        }
    }
    _deleteDashbordItem() {
        if (this._dashboard()) {
            super._deleteDashbordItem();
            this.childNodes().forEach(layoutPage => layoutPage._deleteDashbordItem());
            this._dashboard().items.remove(this.item);
        }
    }
    _addLayoutTabPage(tabPageModel) {
        var layoutItem = new dashboard_layout_tab_page_1.DashboardLayoutTabPage();
        layoutItem.item = tabPageModel;
        this.childNodes.push(layoutItem);
        return layoutItem;
    }
}
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DashboardLayoutTabContainer.prototype, "_createTabPage", null);
__decorate([
    _undo_engine_helper_1.wrapWithUndoRedo
], DashboardLayoutTabContainer.prototype, "_removeLayoutTabPage", null);
exports.DashboardLayoutTabContainer = DashboardLayoutTabContainer;
_layout_utils_1._layoutItemTypeMap['LayoutTabContainer'] = DashboardLayoutTabContainer;


/***/ }),

/***/ 60209:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardLayoutTabPage = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const dashboard_layout_group_1 = __webpack_require__(97805);
const _layout_utils_1 = __webpack_require__(22335);
class DashboardLayoutTabPage extends dashboard_layout_group_1.DashboardLayoutGroup {
    get _template() { return 'dx-layout-group-container'; }
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
    }
    _getDefaultItemType() { return 'LayoutTabPage'; }
    _deleteDashbordItem() {
        super._deleteDashbordItem();
        this.childNodes()
            .filter(item => item instanceof dashboard_layout_group_1.DashboardLayoutGroup)
            .forEach(group => group.dashboardItem() && group._deleteDashbordItem());
        var tabContainer = this.parentNode().item;
        let page = this.item;
        let deletedPageIndex = tabContainer.tabPages().indexOf(page);
        if (tabContainer._activeTabPage() === page) {
            let newIndex = deletedPageIndex === tabContainer.tabPages().length - 1 && tabContainer.tabPages().length > 1 ? deletedPageIndex - 1 : deletedPageIndex;
            tabContainer.tabPages.remove(page);
            tabContainer._activeTabPage(tabContainer.tabPages()[newIndex]);
        }
        else {
            tabContainer.tabPages.remove(page);
        }
    }
}
exports.DashboardLayoutTabPage = DashboardLayoutTabPage;
_layout_utils_1._layoutItemTypeMap['LayoutTabPage'] = DashboardLayoutTabPage;


/***/ }),

/***/ 93096:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LayoutDimensionOptions = void 0;
const serializable_model_1 = __webpack_require__(29591);
class LayoutDimensionOptions extends serializable_model_1.SerializableModel {
    constructor(model, serializer, info) {
        super(model, serializer, info);
    }
}
exports.LayoutDimensionOptions = LayoutDimensionOptions;


/***/ }),

/***/ 43236:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LayoutOptions = void 0;
const serializable_model_1 = __webpack_require__(29591);
const _layout_options_1 = __webpack_require__(49618);
class LayoutOptions extends serializable_model_1.SerializableModel {
    constructor(model, serializer, info) {
        super(model, serializer, info);
    }
    getInfo() {
        return _layout_options_1.layoutOptionsSerializationInfo;
    }
}
exports.LayoutOptions = LayoutOptions;


/***/ }),

/***/ 29636:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.layoutItemSerializationsInfo = exports.layoutItemsSerializable = exports.layoutWeight = exports.orientation = exports.dashboardItem = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.dashboardItem = { propertyName: 'dashboardItem', modelName: '@DashboardItem' };
exports.orientation = { propertyName: 'orientation', modelName: '@Orientation', displayName: 'DashboardWebStringId.Chart.Orientation', defaultVal: 'Horizontal', simpleFormAdapterItem: 'textBoxEditor' };
exports.layoutWeight = { propertyName: 'weight', modelName: '@Weight', defaultVal: 1, displayName: 'DashboardStringId.WeightCaption', simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel };
exports.layoutItemsSerializable = { propertyName: 'childNodes', modelName: 'LayoutItems', displayName: 'DashboardWebStringId.Dashboard.LayoutItems', array: true };
exports.layoutItemSerializationsInfo = [_base_metadata_1.itemType, exports.layoutWeight, exports.orientation, exports.layoutItemsSerializable, exports.dashboardItem];


/***/ }),

/***/ 31075:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.widthOptionsSerializationInfo = exports.heightOptionsSerializationInfo = exports._defaultWidth = exports._defaultHeight = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports._defaultHeight = 800;
exports._defaultWidth = 1000;
let mode = { propertyName: 'mode', modelName: '@Mode', values: {
        'Auto': 'DashboardStringId.LayoutDimensionModeAuto',
        'Fixed': 'DashboardStringId.LayoutDimensionModeFixed',
    }, defaultVal: 'Auto' };
let height = { propertyName: 'value', modelName: '@Value', defaultVal: exports._defaultHeight, from: _base_metadata_1.floatFromModel };
let width = { propertyName: 'value', modelName: '@Value', defaultVal: exports._defaultWidth, from: _base_metadata_1.floatFromModel };
exports.heightOptionsSerializationInfo = [mode, height];
exports.widthOptionsSerializationInfo = [mode, width];


/***/ }),

/***/ 49618:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.layoutOptionsSerializationInfo = void 0;
const layout_dimension_options_1 = __webpack_require__(93096);
const _layout_dimension_options_1 = __webpack_require__(31075);
let heightSerializationInfo = { propertyName: 'height', modelName: 'Height', type: layout_dimension_options_1.LayoutDimensionOptions, info: _layout_dimension_options_1.heightOptionsSerializationInfo };
let widthSerializationInfo = { propertyName: 'width', modelName: 'Width', type: layout_dimension_options_1.LayoutDimensionOptions, info: _layout_dimension_options_1.widthOptionsSerializationInfo };
exports.layoutOptionsSerializationInfo = [heightSerializationInfo, widthSerializationInfo];


/***/ }),

/***/ 17916:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.colorPropertyName = exports.weightPropertyName = exports.sparklineArgumentPropertyName = exports.targetValuePropertyName = exports.actualValuePropertyName = exports.valuePropertyName = exports.argumentPropertyName = exports.valuesPropertyName = exports.argumentsPropertyName = exports.rowsPropertyName = exports.columnsPropertyName = exports.BindingSectionTitles = exports.contentLineCount = exports.contentArrangementMode = exports.filter = exports.dataMember = exports.nameTag = exports.name_ViewModel = exports.name = exports.url = exports.componentName = exports.itemType = exports.integerValidationRule = exports.nullableFloatToModel = exports.fromDateToString = exports.fromStringToDate = exports.floatFromModel = exports.parseBool = exports.PropertyCategory = exports.NotSupportedProperty = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _date_utils_1 = __webpack_require__(76900);
exports.NotSupportedProperty = 'NotSupportedProperty';
function testCast() {
    var a = { propertyName: '123' };
    var b = a;
    return b;
}
var PropertyCategory;
(function (PropertyCategory) {
    PropertyCategory[PropertyCategory["ClientState"] = 0] = "ClientState";
    PropertyCategory[PropertyCategory["Data"] = 1] = "Data";
    PropertyCategory[PropertyCategory["Interactivity"] = 2] = "Interactivity";
    PropertyCategory[PropertyCategory["ViewModel"] = 3] = "ViewModel";
    PropertyCategory[PropertyCategory["Map"] = 4] = "Map";
    PropertyCategory[PropertyCategory["Initialize"] = 5] = "Initialize";
    PropertyCategory[PropertyCategory["Coloring"] = 6] = "Coloring";
    PropertyCategory[PropertyCategory["NoUpdate"] = 7] = "NoUpdate";
    PropertyCategory[PropertyCategory["NoUpdateByObservableValue"] = 8] = "NoUpdateByObservableValue";
})(PropertyCategory = exports.PropertyCategory || (exports.PropertyCategory = {}));
function parseBool(value) {
    return analytics_utils_1.parseBool(value);
}
exports.parseBool = parseBool;
function floatFromModel(value) {
    return ko.observable(parseFloat(value));
}
exports.floatFromModel = floatFromModel;
function fromStringToDate(val) {
    return ko.observable(_date_utils_1.toUtcDate(val));
}
exports.fromStringToDate = fromStringToDate;
function fromDateToString(date) {
    return _date_utils_1.fromUtcDateToString(date);
}
exports.fromDateToString = fromDateToString;
function nullableFloatToModel(value) {
    if (!isNaN(value))
        return JSON.stringify(value);
    return {};
}
exports.nullableFloatToModel = nullableFloatToModel;
exports.integerValidationRule = {
    type: 'custom',
    validationCallback: (e) => Math.abs(Math.round(e.value) - e.value) === 0 || isNaN(e.value)
};
exports.itemType = { propertyName: 'itemType', modelName: '@ItemType', defaultVal: '' };
exports.componentName = { propertyName: 'componentName', modelName: '@ComponentName', displayName: 'DashboardWebStringId.Dashboard.ComponentName', simpleFormAdapterItem: 'textBoxEditor' };
exports.url = { propertyName: 'url', modelName: '@RequestUrl' };
exports.name = { propertyName: 'name', modelName: '@Name', displayName: 'DashboardWebStringId.Options.Caption', simpleFormAdapterItem: 'textBoxEditor' };
exports.name_ViewModel = { propertyName: 'name', modelName: '@Name', displayName: 'DashboardWebStringId.Options.Caption', simpleFormAdapterItem: 'textBoxEditor', category: PropertyCategory.ViewModel };
exports.nameTag = { propertyName: 'name', modelName: 'Name' };
exports.dataMember = { propertyName: 'dataMember', modelName: '@DataMember', displayName: 'DashboardStringId.DataSourceDataMember', simpleFormAdapterItem: 'textBoxEditor' };
exports.filter = { propertyName: 'filter', modelName: 'Filter' };
exports.contentArrangementMode = {
    propertyName: 'contentArrangementMode', modelName: '@ContentArrangementMode', displayName: 'DashboardWebStringId.Cards.ArrangementMode', defaultVal: 'Auto', simpleFormAdapterItem: 'listEditor',
    values: {
        'Auto': 'DashboardWebStringId.Cards.ArrangementMode.Auto',
        'FixedRowCount': 'DashboardWebStringId.Cards.ArrangementMode.FixedRows',
        'FixedColumnCount': 'DashboardWebStringId.Cards.ArrangementMode.FixedColumns'
    }
};
exports.contentLineCount = {
    propertyName: 'contentLineCount',
    modelName: '@ContentLineCount',
    displayName: 'DashboardWebStringId.Cards.LineCount',
    defaultVal: 3,
    simpleFormAdapterItem: 'numberBoxEditor',
    from: floatFromModel,
    editorOptions: { min: 1 },
    validationRules: [exports.integerValidationRule]
};
exports.BindingSectionTitles = {
    Arguments: 'DashboardStringId.DescriptionArguments',
    SingleArgument: 'DashboardWebStringId.Binding.Argument',
    SeriesDimension: 'DashboardStringId.DescriptionSeries'
};
exports.columnsPropertyName = '__columns';
exports.rowsPropertyName = '__rows';
exports.argumentsPropertyName = '__arguments';
exports.valuesPropertyName = '__values';
exports.argumentPropertyName = '__argument';
exports.valuePropertyName = '__value';
exports.actualValuePropertyName = '__actualValue';
exports.targetValuePropertyName = '__targetValue';
exports.sparklineArgumentPropertyName = '__sparklineArgument';
exports.weightPropertyName = '__weight';
exports.colorPropertyName = '__color';


/***/ }),

/***/ 26011:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.editorTemplates = void 0;
exports.editorTemplates = {
    radioGroup: 'radioGroup',
    image: 'image',
    text: 'text',
    bool: 'bool',
    boolYesNo: 'boolYesNo',
    boolVisibleHidden: 'boolVisibleHidden',
    boolDiscreteContinuous: 'boolDiscreteContinuous',
    checkBox: 'checkBox',
    list: 'list',
    numeric: 'numeric',
    date: 'data',
    combobox: 'combobox',
    buttonGroup: 'buttonGroup',
    guid: 'guid',
};


/***/ }),

/***/ 30448:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dashboardSerializationsInfo = exports.layoutOptions = exports.layout = exports.dataSources = exports.groups = exports.colorScheme = exports.parameters = exports.items = exports.dashboardTitle = exports.currencyCultureName = void 0;
const layout_options_1 = __webpack_require__(43236);
const title_1 = __webpack_require__(21048);
const _title_1 = __webpack_require__(20994);
exports.currencyCultureName = { propertyName: 'currencyCultureName', modelName: '@CurrencyCulture' };
exports.dashboardTitle = { propertyName: 'title', modelName: 'Title', displayName: 'DashboardStringId.Title', type: title_1.DashboardTitle, info: _title_1.dashboardTitleSerializationsInfo };
exports.items = { propertyName: 'items', modelName: 'Items', displayName: 'DashboardWebStringId.Dashboard.Items', array: true };
exports.parameters = { propertyName: 'parameters', modelName: 'Parameters', displayName: 'DashboardWebStringId.DashboardParameters', array: true };
exports.colorScheme = { propertyName: 'colorScheme', modelName: 'ColorScheme', displayName: 'DashboardWebStringId.DashboardMenuColorScheme', array: true };
exports.groups = { propertyName: 'groups', modelName: 'Groups', displayName: 'DashboardWebStringId.Dashboard.Groups', array: true };
exports.dataSources = { propertyName: 'dataSources', modelName: 'DataSources', displayName: 'DashboardWebStringId.DashboardMenuDataSources', array: true };
exports.layout = { propertyName: 'layout', modelName: 'LayoutTree' };
exports.layoutOptions = { propertyName: 'layoutOptions', modelName: 'LayoutOptions', type: layout_options_1.LayoutOptions };
exports.dashboardSerializationsInfo = [exports.dashboardTitle, exports.items, exports.groups, exports.dataSources, exports.currencyCultureName, exports.layout, exports.layoutOptions, exports.parameters, exports.colorScheme];


/***/ }),

/***/ 20994:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dashboardTitleSerializationsInfo = exports.titleImageType = exports.titleImageUrl = exports.titleImage64 = exports.titleAlignment = exports.includeMasterFilter = exports.titleVisible = exports.titleText = void 0;
const _base_metadata_1 = __webpack_require__(17916);
exports.titleText = { propertyName: 'text', modelName: '@Text', displayName: 'DashboardWebStringId.Title.Text', simpleFormAdapterItem: 'textBoxEditor' };
exports.titleVisible = { propertyName: 'visible', displayName: 'DashboardWebStringId.Title.Visible', modelName: '@Visible', defaultVal: true, simpleFormAdapterItem: 'checkBoxEditor', from: _base_metadata_1.parseBool };
exports.includeMasterFilter = { propertyName: 'includeMasterFilter', displayName: 'DashboardWebStringId.Title.IncludeMasterFilter', modelName: '@IncludeMasterFilterState', defaultVal: true, simpleFormAdapterItem: 'checkBoxEditor', from: _base_metadata_1.parseBool };
exports.titleAlignment = {
    propertyName: 'alignment', modelName: '@Alignment', defaultVal: 'Center', displayName: 'DashboardWebStringId.Title.Aligment', simpleFormAdapterItem: 'listEditor',
    values: {
        'Left': 'DashboardWebStringId.Title.Aligment.Left',
        'Center': 'DashboardWebStringId.Title.Aligment.Center',
    }
};
exports.titleImage64 = { propertyName: 'image64', modelName: 'ImageData' };
exports.titleImageUrl = { propertyName: 'url', modelName: '@Url', simpleFormAdapterItem: 'textBoxEditor' };
exports.titleImageType = {
    propertyName: 'imageType', displayName: 'DashboardWebStringId.Title.Image', defaultVal: 'none', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'embedded': 'DashboardWebStringId.Title.ImageEmbedded',
        'linked': 'DashboardWebStringId.Title.ImageLinked',
        'none': 'DashboardWebStringId.Title.ImageNone'
    }
};
exports.dashboardTitleSerializationsInfo = [exports.titleText, exports.titleVisible, exports.titleAlignment, exports.includeMasterFilter, exports.titleImageType, exports.titleImage64, exports.titleImageUrl];


/***/ }),

/***/ 57914:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParameterHelper = exports.validateGuid = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const _date_utils_1 = __webpack_require__(76900);
const _base_metadata_1 = __webpack_require__(17916);
function validateGuid(guid) {
    return guid && (/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(guid)
        || /^\{[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\}$/.test(guid)
        || /^\([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\)$/.test(guid)
        || /^[0-9a-fA-F]{32}$/.test(guid));
}
exports.validateGuid = validateGuid;
class ParameterHelper {
    static getInfoPerType(valueType) {
        var value = { propertyName: 'value', modelName: '#text', displayName: 'DashboardStringId.ParametersFormValueColumnCaption', simpleFormAdapterItem: 'textBoxEditor' };
        if (valueType)
            return [_jquery_helpers_1.deepExtend({}, value, { simpleFormAdapterItems: ParameterHelper.getEditorType(valueType()) }), _base_metadata_1.itemType];
        else
            return [value, _base_metadata_1.itemType];
    }
    static getEditorType(typeString) {
        if (typeString === 'Enum') {
            return 'selectBoxEditor';
        }
        if (typeString === 'System.String') {
            return 'textBoxEditor';
        }
        if (typeString === 'System.Guid') {
            return 'guidEditor';
        }
        if (typeString === 'System.SByte'
            || typeString === 'System.Int64'
            || typeString === 'System.Int32'
            || typeString === 'System.Int16'
            || typeString === 'System.Single'
            || typeString === 'System.Double'
            || typeString === 'System.Byte'
            || typeString === 'System.UInt16'
            || typeString === 'System.UInt32'
            || typeString === 'System.UInt64'
            || typeString === 'System.Decimal'
            || typeString === 'System.Byte') {
            return 'numberBoxEditor';
        }
        if (typeString === 'System.Boolean') {
            return 'onOffButtonGroupEditor';
        }
        if (typeString === 'System.DateTime') {
            return 'dateBoxEditor';
        }
        return 'textBoxEditor';
    }
    static _getTypeValue(typeName) {
        var values = ParameterHelper.typeValues.filter((type) => { return type.value === typeName; });
        return values.length > 0 ? values[0] : null;
    }
    static _tryConvertValue(value, type, allowNull) {
        var condition = val => {
            return val !== void 0 && val !== null && !isNaN(typeof val === 'string' ? '' : val);
        };
        if (!condition(value)) {
            return { isValid: allowNull, newValue: null };
        }
        var typeValue = this._getTypeValue(type), converter = (typeValue && typeValue.valueConverter) || (val => typeValue && typeValue.defaultValue), newValue = converter(value);
        return { isValid: condition(newValue), newValue: newValue };
    }
    static getDefaultTypeValue(type) {
        var typeValue = this._getTypeValue(type);
        return typeValue ? typeValue.defaultValue : '';
    }
    static convertSingleValue(value, type, allowNull = false) {
        var result = this._tryConvertValue(value, type, allowNull);
        return result.isValid ? result.newValue : this.getDefaultTypeValue(type);
    }
}
exports.ParameterHelper = ParameterHelper;
ParameterHelper.typeValues = [
    { value: 'System.String', displayValue: 'AnalyticsCoreStringId.Parameter_Type_String', defaultValue: '', specifics: 'String', valueConverter: val => { return val.toString(); } },
    { value: 'System.DateTime', displayValue: 'AnalyticsCoreStringId.Parameter_Type_DateTime', defaultValue: _base_metadata_1.fromDateToString(new Date(new Date().setHours(0, 0, 0, 0))), specifics: 'Date', valueConverter: val => { return _date_utils_1.toUtcDate(val); } },
    { value: 'System.Int16', displayValue: 'AnalyticsCoreStringId.Parameter_Type_Int16', defaultValue: 0, specifics: 'Integer', valueConverter: val => { return parseInt(val); } },
    { value: 'System.Int32', displayValue: 'AnalyticsCoreStringId.Parameter_Type_Int32', defaultValue: 0, specifics: 'Integer', valueConverter: val => { return parseInt(val); } },
    { value: 'System.Int64', displayValue: 'AnalyticsCoreStringId.Parameter_Type_Int64', defaultValue: '0', specifics: 'String', valueConverter: val => { return val.toString(); } },
    { value: 'System.Single', displayValue: 'AnalyticsCoreStringId.Parameter_Type_Float', defaultValue: 0, specifics: 'Float', valueConverter: val => { return parseFloat(val); } },
    { value: 'System.Double', displayValue: 'AnalyticsCoreStringId.Parameter_Type_Double', defaultValue: 0, specifics: 'Float', valueConverter: val => { return parseFloat(val); } },
    { value: 'System.Decimal', displayValue: 'AnalyticsCoreStringId.Parameter_Type_Decimal', defaultValue: 0, specifics: 'Float', valueConverter: val => { return parseFloat(val); } },
    { value: 'System.Boolean', displayValue: 'AnalyticsCoreStringId.Parameter_Type_Boolean', defaultValue: false, specifics: 'Bool', valueConverter: val => { return String(val).toLowerCase() === 'true' ? true : (String(val).toLowerCase() === 'false' ? false : false); } },
    { value: 'System.Guid', displayValue: 'AnalyticsCoreStringId.Parameter_Type_Guid', defaultValue: '00000000-0000-0000-0000-000000000000', specifics: 'String', valueConverter: val => { return validateGuid(val) ? val : '00000000-0000-0000-0000-000000000000'; } }
];


/***/ }),

/***/ 48438:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._dynamicListLookUpSettingsSerializationInfo = exports.DynamicListLookUpSettings = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const serializable_model_1 = __webpack_require__(29591);
const _dynamic_list_lookup_settings_1 = __webpack_require__(54793);
class DynamicListLookUpSettings extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        let clearMembers = () => {
            this.valueMemberName(null);
            this.displayMemberName(null);
            this.sortByMember(null);
        };
        this._dataSource = ko.computed({
            read: () => {
                return this.dataSource();
            },
            write: (val) => {
                this.dataMember(null);
                clearMembers();
                this.dataSource(val);
            }
        });
        this._dataMember = ko.computed({
            read: () => {
                return this.dataMember();
            },
            write: (val) => {
                clearMembers();
                this.dataMember(val);
            }
        });
    }
    getInfo() {
        return _dynamic_list_lookup_settings_1.dynamicListLookUpSettingsSerializationsInfo;
    }
    equals(target) {
        return this.dataMember() === target.dataMember() &&
            this.dataSource() === target.dataSource() &&
            this.valueMemberName() === target.valueMemberName() &&
            this.displayMemberName() === target.displayMemberName() &&
            this.sortByMember() === target.sortByMember() &&
            this.sortOrder() === target.sortOrder();
    }
    isPropertyDisabled(propertyName) {
        if (propertyName === _dynamic_list_lookup_settings_1.sortOrder.propertyName) {
            return !this.sortByMember();
        }
        return false;
    }
}
exports.DynamicListLookUpSettings = DynamicListLookUpSettings;
DynamicListLookUpSettings.modelName = 'DynamicListLookUpSettings';
exports._dynamicListLookUpSettingsSerializationInfo = { propertyName: 'dynamicListLookUpSettings', displayName: 'DashboardWebStringId.Parameters.DynamicListLookUpSettings', type: DynamicListLookUpSettings, defaultVal: null, alwaysSerialize: true };


/***/ }),

/***/ 21597:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LookUpValue = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _date_utils_1 = __webpack_require__(76900);
const serializable_model_1 = __webpack_require__(29591);
const _parameters_helper_1 = __webpack_require__(57914);
class LookUpValue extends serializable_model_1.TypedSerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this.valueType = ko.observable('');
        this.value(_date_utils_1.tryConvertToDateTime(this.value()));
    }
    getInfo() {
        return _parameters_helper_1.ParameterHelper.getInfoPerType(this.valueType);
    }
    _getDefaultItemType() {
        return 'Value';
    }
}
exports.LookUpValue = LookUpValue;


/***/ }),

/***/ 54793:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dynamicListLookUpSettingsSerializationsInfo = exports._dataSourceNameSerialization = exports._dataMemberSerialization = exports.sortOrder = exports.sortByMember = exports.displayMemberSerialization = exports.valueMemberSerialization = exports.dataMemberSerialization = exports.dataSourceNameSerialization = void 0;
exports.dataSourceNameSerialization = { propertyName: 'dataSource', modelName: '@DataSourceName', defaultVal: null };
exports.dataMemberSerialization = { propertyName: 'dataMember', modelName: '@DataMember', defaultVal: null };
exports.valueMemberSerialization = { propertyName: 'valueMemberName', modelName: '@ValueMember', displayName: 'DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember', defaultVal: null };
exports.displayMemberSerialization = { propertyName: 'displayMemberName', modelName: '@DisplayMember', displayName: 'DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember', defaultVal: null };
exports.sortByMember = { propertyName: 'sortByMember', modelName: '@SortByMember', displayName: 'DashboardWebStringId.Parameters.SortByMember', defaultVal: null };
exports.sortOrder = {
    propertyName: 'sortOrder', modelName: '@SortOrder', displayName: 'DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder', defaultVal: 'Ascending', simpleFormAdapterItem: 'listEditor',
    values: {
        'Ascending': 'DevExpress.DashboardCommon.DimensionSortOrder.Ascending',
        'Descending': 'DevExpress.DashboardCommon.DimensionSortOrder.Descending',
        'None': 'DevExpress.DashboardCommon.DimensionSortOrder.None'
    }
};
exports._dataMemberSerialization = { propertyName: '_dataMember', displayName: 'DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember' };
exports._dataSourceNameSerialization = { propertyName: '_dataSource', displayName: 'DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource' };
exports.dynamicListLookUpSettingsSerializationsInfo = [exports._dataSourceNameSerialization, exports.dataSourceNameSerialization, exports._dataMemberSerialization, exports.dataMemberSerialization, exports.valueMemberSerialization, exports.displayMemberSerialization, exports.sortByMember, exports.sortOrder];


/***/ }),

/***/ 78840:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dashboardParameterSerializationsInfo = exports.selectAllValues = exports.defaultValues = exports.lookUpSourceType = exports.parameterTypePropertyGrid = exports.parameterTypeSerialization = exports.defaultValue = exports.parameterName = exports.allowNull = exports.allowMultiselect = exports.description = exports.parameterVisible = void 0;
const analytics_internal_1 = __webpack_require__(19745);
const _base_metadata_1 = __webpack_require__(17916);
const dynamic_list_lookup_settings_1 = __webpack_require__(48438);
const static_list_lookup_settings_1 = __webpack_require__(31346);
const _parameters_helper_1 = __webpack_require__(57914);
exports.parameterVisible = { propertyName: 'parameterVisible', modelName: '@Visible', displayName: 'DevExpress.DashboardCommon.DashboardParameter.Visible', defaultVal: true, simpleFormAdapterItem: 'checkBoxEditor', from: _base_metadata_1.parseBool };
exports.description = { propertyName: 'description', modelName: '@Description', displayName: 'DevExpress.DashboardCommon.DashboardParameter.Description', defaultVal: '', simpleFormAdapterItem: 'textBoxEditor' };
exports.allowMultiselect = { propertyName: 'allowMultiselect', modelName: '@AllowMultiselect', displayName: 'DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect', defaultVal: false, simpleFormAdapterItem: 'checkBoxEditor', from: _base_metadata_1.parseBool };
exports.allowNull = { propertyName: 'allowNull', modelName: '@AllowNull', displayName: 'DevExpress.DashboardCommon.DashboardParameter.AllowNull', defaultVal: false, simpleFormAdapterItem: 'checkBoxEditor', from: _base_metadata_1.parseBool };
exports.parameterName = { propertyName: 'name', modelName: '@Name', displayName: 'DashboardWebStringId.DataSources.CalculatedField.Name', defaultVal: '', simpleFormAdapterItem: 'textBoxEditor', validationRules: analytics_internal_1.nameValidationRules };
exports.defaultValue = { propertyName: 'defaultValue', modelName: '@Value', displayName: 'DashboardWebStringId.Parameters.DefaultValue' };
exports.parameterTypeSerialization = { propertyName: '_type', modelName: '@Type', defaultVal: 'System.String' };
exports.parameterTypePropertyGrid = { propertyName: 'type', displayName: 'DashboardWebStringId.FilterItem.Type', simpleFormAdapterItem: 'selectBoxEditor', valuesArray: (_parameters_helper_1.ParameterHelper.typeValues) };
exports.lookUpSourceType = {
    propertyName: 'lookUpSourceType', displayName: 'DashboardWebStringId.Parameters.LookUpSettingsType', values: {
        'None': 'DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp',
        'StaticListLookUpSettings': 'DashboardWebStringId.Parameters.LookUpSettingsType.StaticList',
        'DynamicListLookUpSettings': 'DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList'
    }
};
exports.defaultValues = { propertyName: 'defaultValues', modelName: 'Values', array: true, displayName: 'DashboardWebStringId.Parameters.DefaultValue' };
exports.selectAllValues = { propertyName: 'selectAllValues', modelName: '@SelectAllValues', displayName: 'DevExpress.DashboardCommon.DashboardParameter.SelectAllValues', defaultVal: false, simpleFormAdapterItem: 'checkBoxEditor', from: _base_metadata_1.parseBool };
exports.dashboardParameterSerializationsInfo = [_base_metadata_1.itemType, exports.parameterName, exports.description, exports.parameterVisible, exports.allowNull, exports.allowMultiselect, exports.parameterTypeSerialization, exports.parameterTypePropertyGrid, exports.defaultValue, exports.selectAllValues, exports.lookUpSourceType, static_list_lookup_settings_1._staticListLookUpSettingsSerializationInfo, dynamic_list_lookup_settings_1._dynamicListLookUpSettingsSerializationInfo, exports.defaultValues];


/***/ }),

/***/ 71739:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.staticListLookUpSettingsSerializationsInfo = exports.lookUpvalues = exports.lookUpValue = void 0;
const look_up_value_1 = __webpack_require__(21597);
exports.lookUpValue = { propertyName: 'value', modelName: '#text', displayName: 'DashboardStringId.ParametersFormValueColumnCaption', simpleFormAdapterItem: 'textBoxEditor' };
exports.lookUpvalues = { propertyName: 'values', modelName: 'Values', displayName: 'DevExpress.DashboardCommon.StaticListLookUpSettings.Values', array: true, addHandler: function () { return new look_up_value_1.LookUpValue({}); } };
exports.staticListLookUpSettingsSerializationsInfo = [exports.lookUpvalues];


/***/ }),

/***/ 12052:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Parameter = exports._getParametersQuery = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _jquery_helpers_1 = __webpack_require__(59384);
const _date_utils_1 = __webpack_require__(76900);
const _utils_1 = __webpack_require__(66358);
const serializable_model_1 = __webpack_require__(29591);
const dynamic_list_lookup_settings_1 = __webpack_require__(48438);
const look_up_value_1 = __webpack_require__(21597);
const _parameter_1 = __webpack_require__(78840);
const static_list_lookup_settings_1 = __webpack_require__(31346);
const _parameters_helper_1 = __webpack_require__(57914);
function _getParametersQuery(parameters) {
    return parameters.map(p => {
        return {
            name: p.name(),
            value: _date_utils_1.toStringArray(p._actualValue()),
            type: p.type(),
            allowMultiselect: p.allowMultiselect(),
            selectAll: p.allowMultiselect() && p.selectAllValues() && p._actualValue() === Parameter.SelectAllValue
        };
    });
}
exports._getParametersQuery = _getParametersQuery;
class Parameter extends serializable_model_1.TypedSerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer(), _allParameters) {
        super(modelJson, serializer);
        this._allParameters = _allParameters;
        this.lookUpSourceType = ko.observable('None');
        this.staticListLookUpSettings = ko.observable(null);
        this.dynamicListLookUpSettings = ko.observable(null);
        this._paramDialogValue = ko.observable();
        this._value = ko.computed({
            read: () => this._paramDialogValue(),
            write: val => this._paramDialogValue(val)
        });
        this.defaultValues = analytics_utils_1.deserializeArray(modelJson.Values, (item) => new look_up_value_1.LookUpValue(item, serializer));
        this._valuesOfDefaultValues = ko.computed(() => {
            return this.defaultValues() && this.defaultValues().map(val => val.value()) || null;
        });
        if (this._type()) {
            var typeParts = this._type().split(',');
            if (typeParts.length > 1) {
                this._type(typeParts[0]);
            }
        }
        this.type = ko.pureComputed({
            read: () => {
                return this._type();
            },
            write: (val) => {
                var oldVal = this._type();
                if (val !== oldVal) {
                    this._value(undefined);
                    if (this.staticListLookUpSettings()) {
                        this.staticListLookUpSettings()._updateValuesType(val);
                    }
                    this._type(val);
                    if (val === 'System.DateTime') {
                        this.defaultValue(_parameters_helper_1.ParameterHelper.getDefaultTypeValue(val));
                    }
                    else {
                        this.defaultValue(_parameters_helper_1.ParameterHelper.convertSingleValue(this.defaultValue(), val, this.allowNull()));
                    }
                }
            }
        });
        this.defaultValue(_parameters_helper_1.ParameterHelper.convertSingleValue(this.defaultValue(), this.type(), this.allowNull()));
        if (modelJson.hasOwnProperty(static_list_lookup_settings_1.StaticListLookUpSettings.modelName)) {
            this.staticListLookUpSettings(new static_list_lookup_settings_1.StaticListLookUpSettings(modelJson[static_list_lookup_settings_1.StaticListLookUpSettings.modelName], serializer));
            delete this['_model'][static_list_lookup_settings_1.StaticListLookUpSettings.modelName];
            this.staticListLookUpSettings()._updateValuesType(this.type());
            this.lookUpSourceType('StaticListLookUpSettings');
        }
        else if (modelJson.hasOwnProperty(dynamic_list_lookup_settings_1.DynamicListLookUpSettings.modelName)) {
            this.dynamicListLookUpSettings(new dynamic_list_lookup_settings_1.DynamicListLookUpSettings(modelJson[dynamic_list_lookup_settings_1.DynamicListLookUpSettings.modelName], serializer));
            delete this['_model'][dynamic_list_lookup_settings_1.DynamicListLookUpSettings.modelName];
            this.lookUpSourceType('DynamicListLookUpSettings');
        }
        else {
            this.lookUpSourceType('None');
        }
        this.lookUpSourceType = ko.computed({
            read: () => {
                if (!!this.staticListLookUpSettings()) {
                    return 'StaticListLookUpSettings';
                }
                else if (this.dynamicListLookUpSettings()) {
                    return 'DynamicListLookUpSettings';
                }
                else {
                    return 'None';
                }
            },
            write: (val) => {
                switch (val) {
                    case 'StaticListLookUpSettings':
                        this.staticListLookUpSettings(new static_list_lookup_settings_1.StaticListLookUpSettings());
                        this.dynamicListLookUpSettings(null);
                        this._resetDefaultValues();
                        break;
                    case 'DynamicListLookUpSettings':
                        this.staticListLookUpSettings(null);
                        this.dynamicListLookUpSettings(new dynamic_list_lookup_settings_1.DynamicListLookUpSettings());
                        this._resetDefaultValues();
                        break;
                    default:
                        this.staticListLookUpSettings(null);
                        this.dynamicListLookUpSettings(null);
                        this._resetDefaultValues();
                        this.allowMultiselect(false);
                        this.selectAllValues(false);
                        break;
                }
            }
        });
        this._actualValue = ko.computed(() => {
            if ((!this.allowNull() && (this._value() === null || this._value() === undefined)) ||
                (this.allowNull() && this._value() === undefined)) {
                if (this.allowMultiselect()) {
                    if (this.selectAllValues()) {
                        if (!!this.staticListLookUpSettings()) {
                            return this.staticListLookUpSettings().values().map(val => val.value());
                        }
                        else if (!!this.dynamicListLookUpSettings()) {
                            return Parameter.SelectAllValue;
                        }
                    }
                    return this._valuesOfDefaultValues();
                }
                return this.defaultValue();
            }
            return this._value();
        });
        this.containsDisplayMember = ko.computed(() => {
            return !!this.dynamicListLookUpSettings();
        });
        this.defaultValue.subscribe(newDefaultValue => {
            if (!this.allowMultiselect()) {
                this._value(this.defaultValue());
            }
        });
        ko.computed(() => {
            if (this.allowMultiselect()) {
                if (this.selectAllValues()) {
                    this._value(undefined);
                }
                else {
                    this._value(this._valuesOfDefaultValues());
                }
            }
            else {
                this._value(this.defaultValue());
            }
        });
        this.allowMultiselect.subscribe(newAllowMultiselect => {
            if (!newAllowMultiselect) {
                this.selectAllValues(false);
            }
            this._resetDefaultValues();
        });
        this.selectAllValues.subscribe(_ => {
            this._resetDefaultValues();
        });
    }
    _patchSerializationsInfo(infos, propertyName, action) {
        var property = (infos.filter((prop) => { return prop.propertyName === propertyName; })[0]);
        if (!!property) {
            action(property);
        }
    }
    getInfo() {
        var info = _jquery_helpers_1.deepExtend([], _parameter_1.dashboardParameterSerializationsInfo);
        if (this.type) {
            this._patchSerializationsInfo(info, _parameter_1.defaultValue.propertyName, (prop) => { prop.defaultVal = _parameters_helper_1.ParameterHelper.getDefaultTypeValue(this.type()); });
        }
        if (this.staticListLookUpSettings && !!this.staticListLookUpSettings()) {
            this._patchSerializationsInfo(info, static_list_lookup_settings_1._staticListLookUpSettingsSerializationInfo.propertyName, (prop) => { prop.modelName = static_list_lookup_settings_1.StaticListLookUpSettings.modelName; });
        }
        if (this.staticListLookUpSettings && !!this.dynamicListLookUpSettings()) {
            this._patchSerializationsInfo(info, dynamic_list_lookup_settings_1._dynamicListLookUpSettingsSerializationInfo.propertyName, (prop) => { prop.modelName = dynamic_list_lookup_settings_1.DynamicListLookUpSettings.modelName; });
        }
        return info;
    }
    _resetDefaultValues() {
        this.defaultValue(_parameters_helper_1.ParameterHelper.convertSingleValue(null, this.type(), this.allowNull()));
        this.defaultValues(this.allowNull() ? null : []);
    }
    grabFrom(another) {
        this.name(another.name.peek());
        this._type(another._type.peek());
        this.allowNull(another.allowNull.peek());
        this.parameterVisible(another.parameterVisible.peek());
        this.description(another.description.peek());
        this.defaultValue(another.defaultValue.peek());
        this.allowMultiselect(another.allowMultiselect.peek());
        this.defaultValues(another.defaultValues.peek());
        this.selectAllValues(another.selectAllValues.peek());
        this.staticListLookUpSettings(another.staticListLookUpSettings.peek());
        this.dynamicListLookUpSettings(another.dynamicListLookUpSettings.peek());
    }
    _getDefaultItemType() {
        return 'Parameter';
    }
}
Parameter.SelectAllValue = '7BD68C11-DC21-4571-8EF6-AAB6E15355EF';
__decorate([
    _utils_1.collectionItemType('Value')
], Parameter.prototype, "defaultValues", void 0);
exports.Parameter = Parameter;


/***/ }),

/***/ 31346:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._staticListLookUpSettingsSerializationInfo = exports.StaticListLookUpSettings = void 0;
const analytics_utils_1 = __webpack_require__(25733);
const ko = __webpack_require__(71032);
const _utils_1 = __webpack_require__(66358);
const serializable_model_1 = __webpack_require__(29591);
const look_up_value_1 = __webpack_require__(21597);
const _static_list_lookup_settings_1 = __webpack_require__(71739);
const _parameters_helper_1 = __webpack_require__(57914);
class StaticListLookUpSettings extends serializable_model_1.SerializableModel {
    constructor(modelJson = {}, serializer = new analytics_utils_1.ModelSerializer()) {
        super(modelJson, serializer);
        this._valueType = ko.observable();
        this.values = analytics_utils_1.deserializeArray(modelJson.Values, (item) => new look_up_value_1.LookUpValue(item, serializer));
    }
    getInfo() {
        return _static_list_lookup_settings_1.staticListLookUpSettingsSerializationsInfo;
    }
    _updateValuesType(newType) {
        this._valueType(newType);
        if (this.values() && this.values().length > 0) {
            this.values().forEach((lookUpValue) => {
                lookUpValue.valueType(newType);
                lookUpValue.value(_parameters_helper_1.ParameterHelper.convertSingleValue(lookUpValue.value(), newType));
            });
        }
    }
}
StaticListLookUpSettings.modelName = 'StaticListLookUpSettings';
__decorate([
    _utils_1.collectionItemType('Value')
], StaticListLookUpSettings.prototype, "values", void 0);
exports.StaticListLookUpSettings = StaticListLookUpSettings;
exports._staticListLookUpSettingsSerializationInfo = { propertyName: 'staticListLookUpSettings', displayName: 'DashboardWebStringId.Parameters.StaticListLookUpSettings', type: StaticListLookUpSettings, defaultVal: null, alwaysSerialize: true };


/***/ }),

/***/ 29591:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.itemTypesMap = exports.TypedSerializableModel = exports.SerializableModel = void 0;
const analytics_utils_1 = __webpack_require__(25733);
class SerializableModel {
    constructor(model, serializer, info) {
        serializer = serializer || new analytics_utils_1.ModelSerializer();
        let prevGetInfo = this.getInfo;
        if (info !== undefined)
            this.getInfo = undefined;
        serializer.deserialize(this, model || {}, info);
        if (info !== undefined)
            this.getInfo = prevGetInfo;
    }
}
exports.SerializableModel = SerializableModel;
class TypedSerializableModel extends SerializableModel {
    constructor(model, serializer, info) {
        super(model, serializer, info);
        !this.itemType() && this.itemType(this._getDefaultItemType());
    }
    _getUniqueNamePrefix() {
        return this.itemType().charAt(0).toLowerCase() + this.itemType().slice(1);
    }
}
exports.TypedSerializableModel = TypedSerializableModel;
exports.itemTypesMap = {};


/***/ }),

/***/ 21048:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardTitle = void 0;
const ko = __webpack_require__(71032);
const _title_1 = __webpack_require__(20994);
const serializable_model_1 = __webpack_require__(29591);
class DashboardTitle extends serializable_model_1.SerializableModel {
    constructor(model, serializer, info) {
        super(model || {}, serializer, info);
        this.imageType = ko.observable('none');
        if (this.image64()) {
            this.imageType('embedded');
        }
        else if (this.url()) {
            this.imageType('linked');
        }
        else {
            this.imageType('none');
        }
        this.imageType.subscribe(imageType => {
            switch (imageType) {
                case 'embedded':
                    this.url(null);
                    break;
                case 'linked':
                    this.image64(null);
                    break;
                default:
                    this.url(null);
                    this.image64(null);
            }
        });
    }
    getInfo() {
        return _title_1.dashboardTitleSerializationsInfo;
    }
}
exports.DashboardTitle = DashboardTitle;


/***/ }),

/***/ 82423:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const analytics_widgets_internal_1 = __webpack_require__(86092);
analytics_widgets_internal_1.addToBindingsCache('dx-ko-resizable: $data, visible: visible', function ($context, $element) { return { 'dx-ko-resizable': function () { return $context.$data; }, 'visible': function () { return $context.$data.visible; } }; });
analytics_widgets_internal_1.addToBindingsCache('style: { width: containerWidth() + \'px\', height: containerHeight() + \'px\' }', function ($context, $element) { return { 'style': function () { return { 'width': $context.$data.containerWidth() + 'px', 'height': $context.$data.containerHeight() + 'px' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxclick: coverClickHandler, css: itemStyle', function ($context, $element) { return { 'dxclick': function () { return $context.$data.coverClickHandler; }, 'css': function () { return $context.$data.itemStyle; } }; });
analytics_widgets_internal_1.addToBindingsCache('visible: isSelected', function ($context, $element) { return { 'visible': function () { return $context.$data.isSelected; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: itemStyle', function ($context, $element) { return { 'css': function () { return $context.$data.itemStyle; } }; });
analytics_widgets_internal_1.addToBindingsCache('layoutItem: $data', function ($context, $element) { return { 'layoutItem': function () { return $context.$data; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: layoutItem', function ($context, $element) { return { 'with': function () { return $context.$data.layoutItem; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: viewModel.hasItem()', function ($context, $element) { return { 'if': function () { return $context.$data.viewModel.hasItem(); } }; });
analytics_widgets_internal_1.addToBindingsCache('template: viewModel.template || \'dx-layout-item-container\'', function ($context, $element) { return { 'template': function () { return $context.$data.viewModel.template || 'dx-layout-item-container'; } }; });
analytics_widgets_internal_1.addToBindingsCache('ifnot: viewModel.hasItem()', function ($context, $element) { return { 'ifnot': function () { return $context.$data.viewModel.hasItem(); } }; });
analytics_widgets_internal_1.addToBindingsCache('template: \'dx-layout-group-container\'', function ($context, $element) { return { 'template': function () { return 'dx-layout-group-container'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: isDesignMode', function ($context, $element) { return { 'if': function () { return $context.$data.isDesignMode; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: viewModel.orientation() === \'Horizontal\'', function ($context, $element) { return { 'if': function () { return $context.$data.viewModel.orientation() === 'Horizontal'; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: items', function ($context, $element) { return { 'foreach': function () { return $context.$data.items; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: viewModel.orientation() === \'Vertical\'', function ($context, $element) { return { 'if': function () { return $context.$data.viewModel.orientation() === 'Vertical'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: items().length === 0 && !!$data.getPlaceholder', function ($context, $element) { return { 'if': function () { return $context.$data.items().length === 0 && !!$context.$data.getPlaceholder; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: $data.getPlaceholder()', function ($context, $element) { return { 'with': function () { return $context.$data.getPlaceholder(); } }; });
analytics_widgets_internal_1.addToBindingsCache('template: viewModel.template', function ($context, $element) { return { 'template': function () { return $context.$data.viewModel.template; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: $data', function ($context, $element) { return { 'foreach': function () { return $context.$data; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: $data', function ($context, $element) { return { 'template': function () { return $context.$data; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $parent.isDesignMode()', function ($context, $element) { return { 'if': function () { return $context.$parent.isDesignMode(); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: !dragOverLocation()', function ($context, $element) { return { 'if': function () { return !$context.$data.dragOverLocation(); } }; });
analytics_widgets_internal_1.addToBindingsCache('template: getLayoutItemPlaceholder()', function ($context, $element) { return { 'template': function () { return $context.$data.getLayoutItemPlaceholder(); } }; });
analytics_widgets_internal_1.addToBindingsCache('dx-dashboard-layout-group-binding: { dashboardContext: $data.getContext(), localContext: $data.getLocalContext(), sizeController: $data.sizeController, dashboardItem: $data.viewModel.model.item, headerHeight: $parent.headerHeight }', function ($context, $element) { return { 'dx-dashboard-layout-group-binding': function () { return { 'dashboardContext': $context.$data.getContext(), 'localContext': $context.$data.getLocalContext(), 'sizeController': $context.$data.sizeController, 'dashboardItem': $context.$data.viewModel.model.item, 'headerHeight': $context.$parent.headerHeight }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxclick: coverClickHandler, event: { mouseover: coverMouseOverHandler }, css: itemStyle', function ($context, $element) { return { 'dxclick': function () { return $context.$data.coverClickHandler; }, 'event': function () { return { 'mouseover': $context.$data.coverMouseOverHandler }; }, 'css': function () { return $context.$data.itemStyle; } }; });
analytics_widgets_internal_1.addToBindingsCache('style: { top: $parent.headerHeight() + \'px\', padding: $parent.padding() + \'px\' }', function ($context, $element) { return { 'style': function () { return { 'top': $context.$parent.headerHeight() + 'px', 'padding': $context.$parent.padding() + 'px' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: items().length !== 0', function ($context, $element) { return { 'if': function () { return $context.$data.items().length !== 0; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: items().length === 0 && isDesignMode()', function ($context, $element) { return { 'if': function () { return $context.$data.items().length === 0 && $context.$data.isDesignMode(); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: isSelected', function ($context, $element) { return { 'if': function () { return $context.$data.isSelected; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: getContextMenu()', function ($context, $element) { return { 'template': function () { return $context.$data.getContextMenu(); } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-item-plate\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-item-plate' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTabs: { items: tabPageBindings, itemTemplate: \'dx-dasbhoard-layout-tab-item\', selectionMode: \'single\', keyExpr: \'id\', selectedItemKeys: selectedItemKeys, onSelectionChanged: onSelectionChanged, hoverStateEnabled: true, scrollingEnabled: false, focusStateEnabled: false}', function ($context, $element) { return { 'dxTabs': function () { return { 'items': $context.$data.tabPageBindings, 'itemTemplate': 'dx-dasbhoard-layout-tab-item', 'selectionMode': 'single', 'keyExpr': 'id', 'selectedItemKeys': $context.$data.selectedItemKeys, 'onSelectionChanged': $context.$data.onSelectionChanged, 'hoverStateEnabled': true, 'scrollingEnabled': false, 'focusStateEnabled': false }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dx-dashboard-layout-tab-binding: { dashboardItem: $data.dashboardItem, dashboardContext: $data.context, localContext: $data.localContext, sizeController: $data.sizeController, ignoreBorder: $data.ignoreBorder }', function ($context, $element) { return { 'dx-dashboard-layout-tab-binding': function () { return { 'dashboardItem': $context.$data.dashboardItem, 'dashboardContext': $context.$data.context, 'localContext': $context.$data.localContext, 'sizeController': $context.$data.sizeController, 'ignoreBorder': $context.$data.ignoreBorder }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: toggleMenu', function ($context, $element) { return { 'click': function () { return $context.$data.toggleMenu; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: createTabPage', function ($context, $element) { return { 'click': function () { return $context.$data.createTabPage; } }; });
analytics_widgets_internal_1.addToBindingsCache('layoutItem: $data, headerHeight: $parent.headerHeight', function ($context, $element) { return { 'layoutItem': function () { return $context.$data; }, 'headerHeight': function () { return $context.$parent.headerHeight; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $parent.activeItems().length !== 0', function ($context, $element) { return { 'if': function () { return $context.$parent.activeItems().length !== 0; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $parent.activeItems()[0].items().length !== 0', function ($context, $element) { return { 'if': function () { return $context.$parent.activeItems()[0].items().length !== 0; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $parent.activeItems()[0].items().length === 0 && isDesignMode()', function ($context, $element) { return { 'if': function () { return $context.$parent.activeItems()[0].items().length === 0 && $context.$data.isDesignMode(); } }; });
analytics_widgets_internal_1.addToBindingsCache('with:  $parent.activeItems()[0].getPlaceholder()', function ($context, $element) { return { 'with': function () { return $context.$parent.activeItems()[0].getPlaceholder(); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $parent.activeItems().length === 0 && isDesignMode()', function ($context, $element) { return { 'if': function () { return $context.$parent.activeItems().length === 0 && $context.$data.isDesignMode(); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: showMenu()', function ($context, $element) { return { 'if': function () { return $context.$data.showMenu(); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: showAddButton()', function ($context, $element) { return { 'if': function () { return $context.$data.showAddButton(); } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate:{ name:\'dx-dasbhoard-layout-tab-item\' }', function () { return { dxTemplate: { name: 'dx-dasbhoard-layout-tab-item' } }; });
analytics_widgets_internal_1.addToBindingsCache('css: cssClasses', function ($context, $element) { return { 'css': function () { return $context.$data.cssClasses; } }; });
analytics_widgets_internal_1.addToBindingsCache('style: title.containerStyles', function ($context, $element) { return { 'style': function () { return $context.$data.title.containerStyles; } }; });
analytics_widgets_internal_1.addToBindingsCache('style: title.styles', function ($context, $element) { return { 'style': function () { return $context.$data.title.styles; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxScrollView: scrollView.options, style: scrollView.styles', function ($context, $element) { return { 'dxScrollView': function () { return $context.$data.scrollView.options; }, 'style': function () { return $context.$data.scrollView.styles; } }; });
analytics_widgets_internal_1.addToBindingsCache('style: scrollView.contentWrapperStyles, dx-dashboard-element-accessor: layoutMainElementEvents', function ($context, $element) { return { 'style': function () { return $context.$data.scrollView.contentWrapperStyles; }, 'dx-dashboard-element-accessor': function () { return $context.$data.layoutMainElementEvents; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-state-underlying-selection\': $data.areChildrenSelected() }', function ($context, $element) { return { 'css': function () { return { 'dx-state-underlying-selection': $context.$data.areChildrenSelected() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('style: fullscreenItem.styles', function ($context, $element) { return { 'style': function () { return $context.$data.fullscreenItem.styles; } }; });
analytics_widgets_internal_1.addToBindingsCache('dx-dashboard-item-binding: { dashboardItem: fullscreenItemModel.viewModel().dashboardItem, dashboardContext: fullscreenItemModel.viewModel().dashboardContext, localContext:  fullscreenItemModel.viewModel().localContext, sizeController: fullscreenItemModel.viewModel().getSizeController($element) }', function ($context, $element) { return { 'dx-dashboard-item-binding': function () { return { 'dashboardItem': $context.$data.fullscreenItemModel.viewModel().dashboardItem, 'dashboardContext': $context.$data.fullscreenItemModel.viewModel().dashboardContext, 'localContext': $context.$data.fullscreenItemModel.viewModel().localContext, 'sizeController': $context.$data.fullscreenItemModel.viewModel().getSizeController($element) }; } }; });
analytics_widgets_internal_1.addToBindingsCache('componentArgs: componentArgs', function ($context, $element) { return { 'componentArgs': function () { return $context.$data.componentArgs; } }; });
analytics_widgets_internal_1.addToBindingsCache('componentArgs: title.componentArgs', function ($context, $element) { return { 'componentArgs': function () { return $context.$data.title.componentArgs; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: componentArgs', function ($context, $element) { return { 'if': function () { return $context.$data.componentArgs; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: title.showTitle()', function ($context, $element) { return { 'if': function () { return $context.$data.title.showTitle(); } }; });
analytics_widgets_internal_1.addToBindingsCache('with: layout', function ($context, $element) { return { 'with': function () { return $context.$data.layout; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: fullscreenItemModel.visible()', function ($context, $element) { return { 'if': function () { return $context.$data.fullscreenItemModel.visible(); } }; });
analytics_widgets_internal_1.addToBindingsCache('dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { my: \'left top\', at: \'left top\', collision: \'flipfit\', boundaryOffset: \'0, 0\', boundary: $root.getWidgetContainer(), of:  $root.getWidgetContainer(), offset: \'0, 0\' }, animation: enableAnimation () ? { show: { type: \'slide\', from: { left: panelWidth() * -1 }, to: { left: 0 }, duration: 500 }, hide: { type: \'slide\', from: { left: 0 }, to: { left: panelWidth() * -1 }, duration: 500 } } : null, focusStateEnabled: false, showCloseButton: isMobile, dragEnabled: false, width: panelWidth, height: \'100%\', shading: false, toolbarItems: [{ text: $root.getLocalizationById(\'DashboardWebStringId.Dashboards\'), location: \'before\', toolbar: \'top\', }], hideOnOutsideClick: false, onInitialized: onPopupInitialized, onDisposing: onPopupDisposing, onContentReady: function() { enableAnimation(true) }, visible: visible, wrapperAttr: { class: isMobile() ? \'dx-dashboard-card-view-panel dx-dashboard-panel-extension dx-dashboard-typography\' : \'dx-dashboard-panel-extension dx-dashboard-typography\' } }', function ($context, $element) { return { 'dxPopup': function () { return { 'target': $context.$root.getWidgetContainer(), 'container': $context.$root.getWidgetContainer(), 'position': { 'my': 'left top', 'at': 'left top', 'collision': 'flipfit', 'boundaryOffset': '0, 0', 'boundary': $context.$root.getWidgetContainer(), 'of': $context.$root.getWidgetContainer(), 'offset': '0, 0' }, 'animation': $context.$data.enableAnimation() ? { 'show': { 'type': 'slide', 'from': { 'left': $context.$data.panelWidth() * -1 }, 'to': { 'left': 0 }, 'duration': 500 }, 'hide': { 'type': 'slide', 'from': { 'left': 0 }, 'to': { 'left': $context.$data.panelWidth() * -1 }, 'duration': 500 } } : null, 'focusStateEnabled': false, 'showCloseButton': $context.$data.isMobile, 'dragEnabled': false, 'width': $context.$data.panelWidth, 'height': '100%', 'shading': false, 'toolbarItems': [{ 'text': $context.$root.getLocalizationById('DashboardWebStringId.Dashboards'), 'location': 'before', 'toolbar': 'top' }], 'hideOnOutsideClick': false, 'onInitialized': $context.$data.onPopupInitialized, 'onDisposing': $context.$data.onPopupDisposing, 'onContentReady': function () { $context.$data.enableAnimation(true); }, 'visible': $context.$data.visible, 'wrapperAttr': { 'class': $context.$data.isMobile() ? 'dx-dashboard-card-view-panel dx-dashboard-panel-extension dx-dashboard-typography' : 'dx-dashboard-panel-extension dx-dashboard-typography' } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxList: listOptions, css: { \'dx-dashboard-dashboard-list-full\': !allowSwitchToDesigner(), \'dx-dashboard-dashboard-list-clipped\': allowSwitchToDesigner() }', function ($context, $element) { return { 'dxList': function () { return $context.$data.listOptions; }, 'css': function () { return { 'dx-dashboard-dashboard-list-full': !$context.$data.allowSwitchToDesigner(), 'dx-dashboard-dashboard-list-clipped': $context.$data.allowSwitchToDesigner() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: name', function ($context, $element) { return { 'text': function () { return $context.$data.name; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-dashboard-minimized\': hidden }', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-minimized': $context.$data.hidden }; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-dashboard-hidden\': hidden }', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-hidden': $context.$data.hidden }; } }; });
analytics_widgets_internal_1.addToBindingsCache('attr: { src: imageUrl, alt: name }, event: { error: hide }', function ($context, $element) { return { 'attr': function () { return { 'src': $context.$data.imageUrl, 'alt': $context.$data.name }; }, 'event': function () { return { 'error': $context.$data.hide }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxButton: { onClick: switchToDesigner, type: \'default\', template: \'template\' }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': $context.$data.switchToDesigner, 'type': 'default', 'template': 'template' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.EditInDesigner\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.EditInDesigner'); } }; });
analytics_widgets_internal_1.addToBindingsCache('dxButton: { onClick: click, type: \'default\', text: $root.getLocalizationById(\'DashboardWebStringId.Viewer\') }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': $context.$data.click, 'type': 'default', 'text': $context.$root.getLocalizationById('DashboardWebStringId.Viewer') }; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: allowSwitchToDesigner', function ($context, $element) { return { 'if': function () { return $context.$data.allowSwitchToDesigner; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: \'dx-dashboard-edit-in-designer-button\'', function ($context, $element) { return { 'template': function () { return 'dx-dashboard-edit-in-designer-button'; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: \'dx-dashboard-edit-in-designer-button-icon\'', function ($context, $element) { return { 'template': function () { return 'dx-dashboard-edit-in-designer-button-icon'; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate:{ name: \'dashboard-card-view\' }', function () { return { dxTemplate: { name: 'dashboard-card-view' } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate:{ name: \'dashboard-preview\' }', function () { return { dxTemplate: { name: 'dashboard-preview' } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate:{ name: \'dashboard-list-item\' }', function () { return { dxTemplate: { name: 'dashboard-list-item' } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate: { name: \'template\' }', function () { return { dxTemplate: { name: 'template' } }; });
analytics_widgets_internal_1.addToBindingsCache('dxPopup: _getPopupOptions()', function ($context, $element) { return { 'dxPopup': function () { return $context.$data._getPopupOptions(); } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardStringId.InspectedData\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardStringId.InspectedData'); } }; });
analytics_widgets_internal_1.addToBindingsCache('dxRadioGroup: { layout: \'horizontal\', displayExpr: \'text\', valueExpr: \'value\', dataSource: avaliableInspectedDataType, value: inspectedDataType }', function ($context, $element) { return { 'dxRadioGroup': function () { return { 'layout': 'horizontal', 'displayExpr': 'text', 'valueExpr': 'value', 'dataSource': $context.$data.avaliableInspectedDataType, 'value': $context.$data.inspectedDataType }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxDataGrid: $data', function ($context, $element) { return { 'dxDataGrid': function () { return $context.$data; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: allowSwitchInspectedDataType', function ($context, $element) { return { 'if': function () { return $context.$data.allowSwitchInspectedDataType; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: gridOptions', function ($context, $element) { return { 'with': function () { return $context.$data.gridOptions; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxList: layoutViewModel, style: { top: titleViewModel.height() + \'px\' }', function ($context, $element) { return { 'dxList': function () { return $context.$data.layoutViewModel; }, 'style': function () { return { 'top': $context.$data.titleViewModel.height() + 'px' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('componentArgs: { options: options, width: width, height: height, encodeHtml: encodeHtml, className: className }', function ($context, $element) { return { 'componentArgs': function () { return { 'options': $context.$data.options, 'width': $context.$data.width, 'height': $context.$data.height, 'encodeHtml': $context.$data.encodeHtml, 'className': $context.$data.className }; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-mobile-title\', data: titleViewModel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-mobile-title', 'data': $context.$data.titleViewModel }; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-mobile-fullscreen-item\', data: fullscreenItemViewModel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-mobile-fullscreen-item', 'data': $context.$data.fullscreenItemViewModel }; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-mobile-item-master-filters\', data: itemMasterFiltersViewModel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-mobile-item-master-filters', 'data': $context.$data.itemMasterFiltersViewModel }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate:{ name: \'item\' }', function () { return { dxTemplate: { name: 'item' } }; });
analytics_widgets_internal_1.addToBindingsCache('dxOverlay: { shading: false, width: width, height: height, deferRendering: true, visible: visible, animation: { show: { type: \'slide\', duration: 400, from: { position: { my: \'left\', at: \'right\', of: window } }, to: { position: { my: \'center\', at: \'center\', of: window } } }, hide: { type: \'slide\', duration: 400, from: { position: { my: \'center\', at: \'center\', of: window } }, to: { position: { my: \'left\', at: \'right\', of: window } } } }, onInitialized: onInitialized, onDisposing: onDisposing, wrapperAttr: { class: \'dx-dashboard-fullscreen-item-popup\' }, position: { my: \'left top\', at: \'left top\' } }', function ($context, $element) { return { 'dxOverlay': function () { return { 'shading': false, 'width': $context.$data.width, 'height': $context.$data.height, 'deferRendering': true, 'visible': $context.$data.visible, 'animation': { 'show': { 'type': 'slide', 'duration': 400, 'from': { 'position': { 'my': 'left', 'at': 'right', 'of': window } }, 'to': { 'position': { 'my': 'center', 'at': 'center', 'of': window } } }, 'hide': { 'type': 'slide', 'duration': 400, 'from': { 'position': { 'my': 'center', 'at': 'center', 'of': window } }, 'to': { 'position': { 'my': 'left', 'at': 'right', 'of': window } } } }, 'onInitialized': $context.$data.onInitialized, 'onDisposing': $context.$data.onDisposing, 'wrapperAttr': { 'class': 'dx-dashboard-fullscreen-item-popup' }, 'position': { 'my': 'left top', 'at': 'left top' } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dashboardItem: dashboardItem, dashboardContext: dashboardContext, localContext: localContext, repaintRequest: repaintRequest,', function ($context, $element) { return { 'dashboardItem': function () { return $context.$data.dashboardItem; }, 'dashboardContext': function () { return $context.$data.dashboardContext; }, 'localContext': function () { return $context.$data.localContext; }, 'repaintRequest': function () { return $context.$data.repaintRequest; }, '': function () { return undefined; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: visible', function ($context, $element) { return { 'if': function () { return $context.$data.visible; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: itemViewModel', function ($context, $element) { return { 'with': function () { return $context.$data.itemViewModel; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-dashboard-mobile-layout-maximize-icon-selected\': isReadyForAction() }, style: { \'opacity\': maximizeIconOpacity()  }', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-mobile-layout-maximize-icon-selected': $context.$data.isReadyForAction() }; }, 'style': function () { return { 'opacity': $context.$data.maximizeIconOpacity() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('style: { \'transform\': \'translateX(\' + itemOffsetInPixels() + \'px)\'  }', function ($context, $element) { return { 'style': function () { return { 'transform': 'translateX(' + $context.$data.itemOffsetInPixels() + 'px)' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxclick: click, dxpointerdown: selectItem, dxpointerup: unselectItem, dxpointermove: unselectItem', function ($context, $element) { return { 'dxclick': function () { return $context.$data.click; }, 'dxpointerdown': function () { return $context.$data.selectItem; }, 'dxpointerup': function () { return $context.$data.unselectItem; }, 'dxpointermove': function () { return $context.$data.unselectItem; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxOverlay: { height: masterFiltersPopup.height, width: masterFiltersPopup.width, hideOnOutsideClick: true, visible: masterFiltersPopup.visible, onHiding: function() { closeMasterFiltersPopup() }, position: { my: \'bottom\', at: \'bottom\', of: window } , animation: { show: { type: \'slide\', duration: 250, from: { position: { my: \'top\', at: \'bottom\', of: window } } }, hide: { type: \'slide\', duration: 250, to: { position: { my: \'top\', at: \'bottom\', of: window } } } }, onInitialized: masterFiltersPopup.onInitialized, onDisposing: masterFiltersPopup.onDisposing, wrapperAttr: { class: \'dx-dashboard-master-filters-popup\' } }', function ($context, $element) { return { 'dxOverlay': function () { return { 'height': $context.$data.masterFiltersPopup.height, 'width': $context.$data.masterFiltersPopup.width, 'hideOnOutsideClick': true, 'visible': $context.$data.masterFiltersPopup.visible, 'onHiding': function () { $context.$data.closeMasterFiltersPopup(); }, 'position': { 'my': 'bottom', 'at': 'bottom', 'of': window }, 'animation': { 'show': { 'type': 'slide', 'duration': 250, 'from': { 'position': { 'my': 'top', 'at': 'bottom', 'of': window } } }, 'hide': { 'type': 'slide', 'duration': 250, 'to': { 'position': { 'my': 'top', 'at': 'bottom', 'of': window } } } }, 'onInitialized': $context.$data.masterFiltersPopup.onInitialized, 'onDisposing': $context.$data.masterFiltersPopup.onDisposing, 'wrapperAttr': { 'class': 'dx-dashboard-master-filters-popup' } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('style: { flex: maximizeFiltersPopup() ? 0 : 1 }, dxclick: function() { closeMasterFiltersPopup() }', function ($context, $element) { return { 'style': function () { return { 'flex': $context.$data.maximizeFiltersPopup() ? 0 : 1 }; }, 'dxclick': function () { return function () { $context.$data.closeMasterFiltersPopup(); }; } }; });
analytics_widgets_internal_1.addToBindingsCache('style: { flex: maximizeFiltersPopup() ? 1 : 0 }', function ($context, $element) { return { 'style': function () { return { 'flex': $context.$data.maximizeFiltersPopup() ? 1 : 0 }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxclick: click', function ($context, $element) { return { 'dxclick': function () { return $context.$data.click; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: valuesString', function ($context, $element) { return { 'text': function () { return $context.$data.valuesString; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxButton: { text:  $root.getLocalizationById(\'DashboardStringId.ButtonOK\'), onClick: closeMasterFiltersPopup, type: \'default\' }', function ($context, $element) { return { 'dxButton': function () { return { 'text': $context.$root.getLocalizationById('DashboardStringId.ButtonOK'), 'onClick': $context.$data.closeMasterFiltersPopup, 'type': 'default' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxOverlay: { height: masterFilterMaximizedItemPopup.height, width: masterFilterMaximizedItemPopup.width, hideOnOutsideClick: true, onHiding: function() { closeMasterFilterItemPopup() }, visible: masterFilterMaximizedItemPopup.visible, position: { my: \'bottom\', at: \'bottom\', of: window } , animation: { show: { type: \'slide\', duration: 250, from: { position: { my: \'top\', at: \'bottom\', of: window } } }, hide: { type: \'slide\', duration: 250, to: { position: { my: \'top\', at: \'bottom\', of: window } } } }, onInitialized: masterFilterMaximizedItemPopup.onInitialized, onDisposing: masterFilterMaximizedItemPopup.onDisposing, wrapperAttr: { class: \'dx-dashboard-master-filters-popup\' } }', function ($context, $element) { return { 'dxOverlay': function () { return { 'height': $context.$data.masterFilterMaximizedItemPopup.height, 'width': $context.$data.masterFilterMaximizedItemPopup.width, 'hideOnOutsideClick': true, 'onHiding': function () { $context.$data.closeMasterFilterItemPopup(); }, 'visible': $context.$data.masterFilterMaximizedItemPopup.visible, 'position': { 'my': 'bottom', 'at': 'bottom', 'of': window }, 'animation': { 'show': { 'type': 'slide', 'duration': 250, 'from': { 'position': { 'my': 'top', 'at': 'bottom', 'of': window } } }, 'hide': { 'type': 'slide', 'duration': 250, 'to': { 'position': { 'my': 'top', 'at': 'bottom', 'of': window } } } }, 'onInitialized': $context.$data.masterFilterMaximizedItemPopup.onInitialized, 'onDisposing': $context.$data.masterFilterMaximizedItemPopup.onDisposing, 'wrapperAttr': { 'class': 'dx-dashboard-master-filters-popup' } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxButton: { text: $root.getLocalizationById(\'DashboardStringId.ButtonOK\'), onClick: closeMasterFilterItemPopup, type: \'default\' }', function ($context, $element) { return { 'dxButton': function () { return { 'text': $context.$root.getLocalizationById('DashboardStringId.ButtonOK'), 'onClick': $context.$data.closeMasterFilterItemPopup, 'type': 'default' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: masterItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.masterItems; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: filterValues', function ($context, $element) { return { 'foreach': function () { return $context.$data.filterValues; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: masterFilterItem', function ($context, $element) { return { 'with': function () { return $context.$data.masterFilterItem; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxToast: { type: \'custom\', visible: visible() && !suspended(), width: \'auto\', target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { my: \'bottom right\', at: \'bottom right\', offset: \'0 0\', boundary: $root.getWidgetContainer(), of: $root.getWidgetContainer() }, displayTime: displayTime, closeOnClick: true, closeOnSwipe: false, onInitialized: onInitialized }', function ($context, $element) { return { 'dxToast': function () { return { 'type': 'custom', 'visible': $context.$data.visible() && !$context.$data.suspended(), 'width': 'auto', 'target': $context.$root.getWidgetContainer(), 'container': $context.$root.getWidgetContainer(), 'position': { 'my': 'bottom right', 'at': 'bottom right', 'offset': '0 0', 'boundary': $context.$root.getWidgetContainer(), 'of': $context.$root.getWidgetContainer() }, 'displayTime': $context.$data.displayTime, 'closeOnClick': true, 'closeOnSwipe': false, 'onInitialized': $context.$data.onInitialized }; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: notifications, css: {  \'dx-dashboard-error\': type() === \'error\', \'dx-dashboard-success\': type() === \'success\', \'dx-dashboard-info\': type() === \'info\'}', function ($context, $element) { return { 'foreach': function () { return $context.$data.notifications; }, 'css': function () { return { 'dx-dashboard-error': $context.$data.type() === 'error', 'dx-dashboard-success': $context.$data.type() === 'success', 'dx-dashboard-info': $context.$data.type() === 'info' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: title', function ($context, $element) { return { 'text': function () { return $context.$data.title; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: detail', function ($context, $element) { return { 'text': function () { return $context.$data.detail; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: detail !== null', function ($context, $element) { return { 'if': function () { return $context.$data.detail !== null; } }; });
analytics_widgets_internal_1.addToBindingsCache('dx-dashboard-item-binding: { dashboardItem: $data.viewModel.model.item, dashboardContext: $data.getContext(), localContext: $data.getLocalContext(), sizeController: $data.sizeController }, css: { \'dx-layout-item-selected\': isSelected }', function ($context, $element) { return { 'dx-dashboard-item-binding': function () { return { 'dashboardItem': $context.$data.viewModel.model.item, 'dashboardContext': $context.$data.getContext(), 'localContext': $context.$data.getLocalContext(), 'sizeController': $context.$data.sizeController }; }, 'css': function () { return { 'dx-layout-item-selected': $context.$data.isSelected }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text:$root.getLocalizationById(\'DashboardStringId.MessageLoading\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardStringId.MessageLoading'); } }; });
analytics_widgets_internal_1.addToBindingsCache('class: sizeClass', function ($context, $element) { return { 'class': function () { return $context.$data.sizeClass; } }; });
analytics_widgets_internal_1.addToBindingsCache('xlinkHref: icon', function ($context, $element) { return { 'xlinkHref': function () { return $context.$data.icon; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: errorState() && errorState().title', function ($context, $element) { return { 'text': function () { return $context.$data.errorState() && $context.$data.errorState().title; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: errorState() && errorState().detail', function ($context, $element) { return { 'text': function () { return $context.$data.errorState() && $context.$data.errorState().detail; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: {\'dx-dashboard-widget-container\': isStandalone, \'dx-dashboard-typography\': isStandalone  }, dx-dashboard-item-binding: { dashboardItem: $data.dashboardItem, dashboardContext: $data.dashboardContext, localContext: $data.localContext, sizeController: $data.sizeController }', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-widget-container': $context.$data.isStandalone, 'dx-dashboard-typography': $context.$data.isStandalone }; }, 'dx-dashboard-item-binding': function () { return { 'dashboardItem': $context.$data.dashboardItem, 'dashboardContext': $context.$data.dashboardContext, 'localContext': $context.$data.localContext, 'sizeController': $context.$data.sizeController }; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data', function ($context, $element) { return { 'if': function () { return $context.$data; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $parent.getEmptyItemTemplates', function ($context, $element) { return { 'if': function () { return $context.$parent.getEmptyItemTemplates; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: $parent.getEmptyItemTemplates()', function ($context, $element) { return { 'template': function () { return $context.$parent.getEmptyItemTemplates(); } }; });
analytics_widgets_internal_1.addToBindingsCache('css: colorSchemeCss', function ($context, $element) { return { 'css': function () { return $context.$data.colorSchemeCss; } }; });
analytics_widgets_internal_1.addToBindingsCache('style: { left: surfaceLeft() + \'px\' }, css: $data.classList()', function ($context, $element) { return { 'style': function () { return { 'left': $context.$data.surfaceLeft() + 'px' }; }, 'css': function () { return $context.$data.classList(); } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.NoDashboards\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.NoDashboards'); } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: externalTemplates', function ($context, $element) { return { 'foreach': function () { return $context.$data.externalTemplates; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: isDashboardLoaded()', function ($context, $element) { return { 'if': function () { return $context.$data.isDashboardLoaded(); } }; });
analytics_widgets_internal_1.addToBindingsCache('template: $data.layoutTemplate()', function ($context, $element) { return { 'template': function () { return $context.$data.layoutTemplate(); } }; });
analytics_widgets_internal_1.addToBindingsCache('ifnot: isDashboardLoaded()', function ($context, $element) { return { 'ifnot': function () { return $context.$data.isDashboardLoaded(); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: isLoading()', function ($context, $element) { return { 'if': function () { return $context.$data.isLoading(); } }; });
analytics_widgets_internal_1.addToBindingsCache('ifnot: isLoading()', function ($context, $element) { return { 'ifnot': function () { return $context.$data.isLoading(); } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: emptyControlTemplates', function ($context, $element) { return { 'foreach': function () { return $context.$data.emptyControlTemplates; } }; });
analytics_widgets_internal_1.addToBindingsCache('template:  { name: "dx-dashboard-notification-controller", data: notificationController._viewModel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-notification-controller', 'data': $context.$data.notificationController._viewModel }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxButtonGroup: $data', function ($context, $element) { return { 'dxButtonGroup': function () { return $context.$data; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { my: \'center\', at: \'center\', of: $root.getWidgetContainer(), boundary: $root.getWidgetContainer() }, height: \'80%\', width: \'688px\', maxHeight: \'800px\', minHeight: \'500px\', maxWidth: \'80%\', minWidth:\'600px\', animation: { }, focusStateEnabled: true, hideOnOutsideClick: false, toolbarItems: toolbarItems, visible: popupVisible, showTitle: true, hideOnParentScroll: false, title: $root.getLocalizationById(\'DashboardWebStringId.DataSources.EditCalculatedField\'), wrapperAttr: { class: \'dx-dashboard-calc-field-editor-popup\' }, resizeEnabled: true, }', function ($context, $element) { return { 'dxPopup': function () { return { 'target': $context.$root.getWidgetContainer(), 'container': $context.$root.getWidgetContainer(), 'position': { 'my': 'center', 'at': 'center', 'of': $context.$root.getWidgetContainer(), 'boundary': $context.$root.getWidgetContainer() }, 'height': '80%', 'width': '688px', 'maxHeight': '800px', 'minHeight': '500px', 'maxWidth': '80%', 'minWidth': '600px', 'animation': {}, 'focusStateEnabled': true, 'hideOnOutsideClick': false, 'toolbarItems': $context.$data.toolbarItems, 'visible': $context.$data.popupVisible, 'showTitle': true, 'hideOnParentScroll': false, 'title': $context.$root.getLocalizationById('DashboardWebStringId.DataSources.EditCalculatedField'), 'wrapperAttr': { 'class': 'dx-dashboard-calc-field-editor-popup' }, 'resizeEnabled': true }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.CalculatedField.Name\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.CalculatedField.Name'); } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTextBox: { value: name }, dxValidator: { isValid: isCalcFieldNameValid, validationRules: nameValidationRules }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.name }; }, 'dxValidator': function () { return { 'isValid': $context.$data.isCalcFieldNameValid, 'validationRules': $context.$data.nameValidationRules }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.CalculatedField.FieldType\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.CalculatedField.FieldType'); } }; });
analytics_widgets_internal_1.addToBindingsCache('dxSelectBox: { items: availableTypes, value: fieldType, editEnabled: false, dropDownOptions: { container: $root.getWidgetContainer() } }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data.availableTypes, 'value': $context.$data.fieldType, 'editEnabled': false, 'dropDownOptions': { 'container': $context.$root.getWidgetContainer() } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-invalid\': !expressionEditable.isValid() }', function ($context, $element) { return { 'css': function () { return { 'dx-invalid': !$context.$data.expressionEditable.isValid() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dshdExpressionEditor: { options: expressionEditable, fieldListProvider: itemsProvider, displayNameProvider: displayNameProvider, saveHandler: saveHandler }', function ($context, $element) { return { 'dshdExpressionEditor': function () { return { 'options': $context.$data.expressionEditable, 'fieldListProvider': $context.$data.itemsProvider, 'displayNameProvider': $context.$data.displayNameProvider, 'saveHandler': $context.$data.saveHandler }; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: viewModel', function ($context, $element) { return { 'with': function () { return $context.$data.viewModel; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxPopup: { showTitle: true, title: $root.getLocalizationById(\'AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption\'), visible: popupVisible, toolbarItems: buttonItems, showCloseButton: true, fullScreen: false, height: \'70%\', width: \'645px\', maxHeight: \'800px\', minHeight: \'500px\', maxWidth: \'80%\', minWidth:\'600px\', container: $root.getWidgetContainer(), position: { of: $root.getWidgetContainer(), boundary: $root.getWidgetContainer() }, wrapperAttr: { class: \'dx-designer dx-expressioneditor dx-popup-general\' }, resizeEnabled: true, }', function ($context, $element) { return { 'dxPopup': function () { return { 'showTitle': true, 'title': $context.$root.getLocalizationById('AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption'), 'visible': $context.$data.popupVisible, 'toolbarItems': $context.$data.buttonItems, 'showCloseButton': true, 'fullScreen': false, 'height': '70%', 'width': '645px', 'maxHeight': '800px', 'minHeight': '500px', 'maxWidth': '80%', 'minWidth': '600px', 'container': $context.$root.getWidgetContainer(), 'position': { 'of': $context.$root.getWidgetContainer(), 'boundary': $context.$root.getWidgetContainer() }, 'wrapperAttr': { 'class': 'dx-designer dx-expressioneditor dx-popup-general' }, 'resizeEnabled': true }; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: "dx-expressioneditor-main"', function ($context, $element) { return { 'template': function () { return 'dx-expressioneditor-main'; } }; });
analytics_widgets_internal_1.addToBindingsCache('dx-dashboard-form-adapter: { target: $data }', function ($context, $element) { return { 'dx-dashboard-form-adapter': function () { return { 'target': $context.$data }; } }; });
analytics_widgets_internal_1.addToBindingsCache('value: mode, values: dataSource', function ($context, $element) { return { 'value': function () { return $context.$data.mode; }, 'values': function () { return $context.$data.dataSource; }, '_ko_property_writers': function () { return { 'value': function (_z) { $context.$data.mode = _z; } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: formAdapterWrapper', function ($context, $element) { return { 'with': function () { return $context.$data.formAdapterWrapper; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Colorization.ColorSchemes\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Colorization.ColorSchemes'); } }; });
analytics_widgets_internal_1.addToBindingsCache('dxList: { dataSource: editableSignatures, selectedItems: selectedSignatures, selectionMode: \'single\', keyExpr: \'key\', nextButtonText: $root.getLocalizationById(\'DashboardWebStringId.More\') }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.editableSignatures, 'selectedItems': $context.$data.selectedSignatures, 'selectionMode': 'single', 'keyExpr': 'key', 'nextButtonText': $context.$root.getLocalizationById('DashboardWebStringId.More') }; } }; });
analytics_widgets_internal_1.addToBindingsCache('style: { \'margin-left\': ($index() > 1 ? ($index() -1) * 21 : 0).toString() + \'px\' }', function ($context, $element) { return { 'style': function () { return { 'margin-left': ($context.$index() > 1 ? ($context.$index() - 1) * 21 : 0).toString() + 'px' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $data, attr: { title: $data }', function ($context, $element) { return { 'text': function () { return $context.$data; }, 'attr': function () { return { 'title': $context.$data }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Colorization.ColorSchemeType\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Colorization.ColorSchemeType'); } }; });
analytics_widgets_internal_1.addToBindingsCache('text: typeText, attr: {title: typeText}', function ($context, $element) { return { 'text': function () { return $context.$data.typeText; }, 'attr': function () { return { 'title': $context.$data.typeText }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardStringId.DefaultDataSourceName\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardStringId.DefaultDataSourceName'); } }; });
analytics_widgets_internal_1.addToBindingsCache('text: _getDataSourceText($parents[1].getDataSourceName(dataSource)), attr: { title: _getDataSourceText($parents[1].getDataSourceName(dataSource)) }', function ($context, $element) { return { 'text': function () { return $context.$data._getDataSourceText($context.$parents[1].getDataSourceName($context.$data.dataSource)); }, 'attr': function () { return { 'title': $context.$data._getDataSourceText($context.$parents[1].getDataSourceName($context.$data.dataSource)) }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: $parent.removeTable', function ($context, $element) { return { 'click': function () { return $context.$parent.removeTable; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.ColorScheme.Empty\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.ColorScheme.Empty'); } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name :\'dx-dashboard-edit-color-scheme\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-edit-color-scheme' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Colorization.NoSelectedSchema\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Colorization.NoSelectedSchema'); } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.ColorScheme.Color\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.ColorScheme.Color'); } }; });
analytics_widgets_internal_1.addToBindingsCache('dxColorBox: { value: color, editAlphaChannel: true, dropDownOptions: { container: $root.getWidgetContainer() } }', function ($context, $element) { return { 'dxColorBox': function () { return { 'value': $context.$data.color, 'editAlphaChannel': true, 'dropDownOptions': { 'container': $context.$root.getWidgetContainer() } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxPopover: { target: target, container: $root.getWidgetContainer(), toolbarItems: buttonItems, visible: visible, position: { boundary: $root.getWidgetContainer() } }', function ($context, $element) { return { 'dxPopover': function () { return { 'target': $context.$data.target, 'container': $context.$root.getWidgetContainer(), 'toolbarItems': $context.$data.buttonItems, 'visible': $context.$data.visible, 'position': { 'boundary': $context.$root.getWidgetContainer() } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxScrollView: { direction: \'vertical\' }', function ($context, $element) { return { 'dxScrollView': function () { return { 'direction': 'vertical' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxColorView: { value: colorCss, editAlphaChannel: true, applyValueMode: \'instantly\' }', function ($context, $element) { return { 'dxColorView': function () { return { 'value': $context.$data.colorCss, 'editAlphaChannel': true, 'applyValueMode': 'instantly' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: dimensionKey.definition.dataMember', function ($context, $element) { return { 'text': function () { return $context.$data.dimensionKey.definition.dataMember; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxNumberBox: { height: 40, showSpinButtons:true, disabled: $parent.isAutogenerated, value: dimensionKey.value.value }, dxValidator: { validationGroup: \'newEntry\', name: dimensionKey.definition.dataMember(), validationRules: [{ type: \'required\' } ] }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'height': 40, 'showSpinButtons': true, 'disabled': $context.$parent.isAutogenerated, 'value': $context.$data.dimensionKey.value.value }; }, 'dxValidator': function () { return { 'validationGroup': 'newEntry', 'name': $context.$data.dimensionKey.definition.dataMember(), 'validationRules': [{ 'type': 'required' }] }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxDateBox: { height: 40, width: \'auto\', disabled: $parent.isAutogenerated, value: dimensionKey.value.value, dropDownOptions: { container: $root.getWidgetContainer() } }, dxValidator: { validationGroup: \'newEntry\', name: dimensionKey.definition.dataMember(), validationRules: [{ type: \'required\' } ] }', function ($context, $element) { return { 'dxDateBox': function () { return { 'height': 40, 'width': 'auto', 'disabled': $context.$parent.isAutogenerated, 'value': $context.$data.dimensionKey.value.value, 'dropDownOptions': { 'container': $context.$root.getWidgetContainer() } }; }, 'dxValidator': function () { return { 'validationGroup': 'newEntry', 'name': $context.$data.dimensionKey.definition.dataMember(), 'validationRules': [{ 'type': 'required' }] }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxCheckBox: { height: 40, disabled: $parent.isAutogenerated, value: dimensionKey.value.value }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'height': 40, 'disabled': $context.$parent.isAutogenerated, 'value': $context.$data.dimensionKey.value.value }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTextBox: { height: 40, disabled: $parent.isAutogenerated, value: dimensionKey.value.value }, dxValidator: { validationGroup: \'newEntry\', name: dimensionKey.definition.dataMember(), validationRules: [{ type: \'required\' } ] }', function ($context, $element) { return { 'dxTextBox': function () { return { 'height': 40, 'disabled': $context.$parent.isAutogenerated, 'value': $context.$data.dimensionKey.value.value }; }, 'dxValidator': function () { return { 'validationGroup': 'newEntry', 'name': $context.$data.dimensionKey.definition.dataMember(), 'validationRules': [{ 'type': 'required' }] }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Colorization.MeasureNames\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Colorization.MeasureNames'); } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTagBox: { dataSource: availableMeasures, value: selectedMeasuresIds, disabled: isAutogenerated, displayExpr: \'displayText\', valueExpr: \'_id\', dropDownOptions: { container: $root.getWidgetContainer() } }, dxValidator: { validationGroup: \'newEntry\', validationRules: measuresValidationRules || [] }', function ($context, $element) { return { 'dxTagBox': function () { return { 'dataSource': $context.$data.availableMeasures, 'value': $context.$data.selectedMeasuresIds, 'disabled': $context.$data.isAutogenerated, 'displayExpr': 'displayText', 'valueExpr': '_id', 'dropDownOptions': { 'container': $context.$root.getWidgetContainer() } }; }, 'dxValidator': function () { return { 'validationGroup': 'newEntry', 'validationRules': $context.$data.measuresValidationRules || [] }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.ColorScheme.Colors\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.ColorScheme.Colors'); } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Colorization.AddColor\'), click: addNewEntry', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Colorization.AddColor'); }, 'click': function () { return $context.$data.addNewEntry; } }; });
analytics_widgets_internal_1.addToBindingsCache('visible: allowModify || isTreeMode()', function ($context, $element) { return { 'visible': function () { return $context.$data.allowModify || $context.$data.isTreeMode(); } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTreeView: { dataSource: dataSource, dataStructure: \'tree\', height: !allowModify ? \'450px\' : \'100%\', selectByClick: allowModify ? true : false, selectionMode: allowModify ? \'single\' : \'none\', onItemSelectionChanged: allowModify ? onItemSelectionChanged : null, searchEnabled: true, searchExpr: [\'value\'], searchEditorOptions: { placeholder: $root.getLocalizationById(\'DashboardWebStringId.Search\'), focusStateEnabled: false, hoverStateEnabled: false } }', function ($context, $element) { return { 'dxTreeView': function () { return { 'dataSource': $context.$data.dataSource, 'dataStructure': 'tree', 'height': !$context.$data.allowModify ? '450px' : '100%', 'selectByClick': $context.$data.allowModify ? true : false, 'selectionMode': $context.$data.allowModify ? 'single' : 'none', 'onItemSelectionChanged': $context.$data.allowModify ? $context.$data.onItemSelectionChanged : null, 'searchEnabled': true, 'searchExpr': ['value'], 'searchEditorOptions': { 'placeholder': $context.$root.getLocalizationById('DashboardWebStringId.Search'), 'focusStateEnabled': false, 'hoverStateEnabled': false } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-color-scheme-group-tree-item\': !$data.editColor }', function ($context, $element) { return { 'css': function () { return { 'dx-color-scheme-group-tree-item': !$context.$data.editColor }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: editColor, style: { \'backgroundColor\': color }', function ($context, $element) { return { 'click': function () { return $context.$data.editColor; }, 'style': function () { return { 'backgroundColor': $context.$data.color }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: value', function ($context, $element) { return { 'text': function () { return $context.$data.value; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: $parent.removeItem', function ($context, $element) { return { 'click': function () { return $context.$parent.removeItem; } }; });
analytics_widgets_internal_1.addToBindingsCache('visible: !allowModify && !isTreeMode(), dxList: { dataSource: dataSource, focusStateEnabled: false, hoverStateEnabled: false, activeStateEnabled: false, searchEnabled: true, searchMode: \'contains\', searchExpr: [\'value\'], noDataText: $root.getLocalizationById(\'DashboardStringId.FilterElementNoDataToDisplay\'), encodeNoDataText: true, searchEditorOptions: { placeholder: $root.getLocalizationById(\'DashboardWebStringId.Search\'), focusStateEnabled: false, hoverStateEnabled: false }, height: !allowModify ? \'450px\' : \'100%\', }', function ($context, $element) { return { 'visible': function () { return !$context.$data.allowModify && !$context.$data.isTreeMode(); }, 'dxList': function () { return { 'dataSource': $context.$data.dataSource, 'focusStateEnabled': false, 'hoverStateEnabled': false, 'activeStateEnabled': false, 'searchEnabled': true, 'searchMode': 'contains', 'searchExpr': ['value'], 'noDataText': $context.$root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'), 'encodeNoDataText': true, 'searchEditorOptions': { 'placeholder': $context.$root.getLocalizationById('DashboardWebStringId.Search'), 'focusStateEnabled': false, 'hoverStateEnabled': false }, 'height': !$context.$data.allowModify ? '450px' : '100%' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('style: { \'backgroundColor\': color }', function ($context, $element) { return { 'style': function () { return { 'backgroundColor': $context.$data.color }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: editColor', function ($context, $element) { return { 'click': function () { return $context.$data.editColor; } }; });
analytics_widgets_internal_1.addToBindingsCache('dataSource: colorSchemeModel().selectedSignatureEntries, allowModify: true, selectedEntry: selectedEntry, addNewEntry: createNewEntry, removeEntry: colorSchemeModel().removeEntry, colorPalette: colorPalette', function ($context, $element) { return { 'dataSource': function () { return $context.$data.colorSchemeModel().selectedSignatureEntries; }, 'allowModify': function () { return true; }, 'selectedEntry': function () { return $context.$data.selectedEntry; }, 'addNewEntry': function () { return $context.$data.createNewEntry; }, 'removeEntry': function () { return $context.$data.colorSchemeModel().removeEntry; }, 'colorPalette': function () { return $context.$data.colorPalette; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: colorSchemeModel', function ($context, $element) { return { 'with': function () { return $context.$data.colorSchemeModel; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: editableSignatures().length > 0', function ($context, $element) { return { 'if': function () { return $context.$data.editableSignatures().length > 0; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: dataItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.dataItems; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $index() > 0', function ($context, $element) { return { 'if': function () { return $context.$index() > 0; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: !$parent.isSignatureAutogenerated($data)', function ($context, $element) { return { 'if': function () { return !$context.$parent.isSignatureAutogenerated($context.$data); } }; });
analytics_widgets_internal_1.addToBindingsCache('ifnot: editableSignatures().length > 0', function ($context, $element) { return { 'ifnot': function () { return $context.$data.editableSignatures().length > 0; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: colorSchemeModel() && colorSchemeModel().selectedSignatureEntries().length > 0', function ($context, $element) { return { 'if': function () { return $context.$data.colorSchemeModel() && $context.$data.colorSchemeModel().selectedSignatureEntries().length > 0; } }; });
analytics_widgets_internal_1.addToBindingsCache('ifnot: colorSchemeModel() && colorSchemeModel().selectedSignatureEntries().length > 0', function ($context, $element) { return { 'ifnot': function () { return $context.$data.colorSchemeModel() && $context.$data.colorSchemeModel().selectedSignatureEntries().length > 0; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: entryEditorModel.visible', function ($context, $element) { return { 'if': function () { return $context.$data.entryEditorModel.visible; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: entryEditorModel', function ($context, $element) { return { 'with': function () { return $context.$data.entryEditorModel; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: \'dx-dashboard-enter-new-entry-editor\'', function ($context, $element) { return { 'template': function () { return 'dx-dashboard-enter-new-entry-editor'; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: dimensionEditors || []', function ($context, $element) { return { 'foreach': function () { return $context.$data.dimensionEditors || []; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: ["Integer", "Float", "Double", "Decimal"].indexOf(valueType) > -1', function ($context, $element) { return { 'if': function () { return ['Integer', 'Float', 'Double', 'Decimal'].indexOf($context.$data.valueType) > -1; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: ["DateTime"].indexOf(valueType) > -1', function ($context, $element) { return { 'if': function () { return ['DateTime'].indexOf($context.$data.valueType) > -1; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: ["Bool","Boolean"].indexOf(valueType) > -1', function ($context, $element) { return { 'if': function () { return ['Bool', 'Boolean'].indexOf($context.$data.valueType) > -1; } }; });
analytics_widgets_internal_1.addToBindingsCache('ifnot: ["Integer", "Float", "Double", "Decimal", "DateTime", "Bool", "Boolean"].indexOf(valueType) > -1', function ($context, $element) { return { 'ifnot': function () { return ['Integer', 'Float', 'Double', 'Decimal', 'DateTime', 'Bool', 'Boolean'].indexOf($context.$data.valueType) > -1; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: hasMeasures', function ($context, $element) { return { 'if': function () { return $context.$data.hasMeasures; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: colorPickerModel', function ($context, $element) { return { 'with': function () { return $context.$data.colorPickerModel; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name : \'dx-dashboard-color-picker-editor\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-color-picker-editor', 'data': $context.$data }; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: allowAddNewEntry', function ($context, $element) { return { 'if': function () { return $context.$data.allowAddNewEntry; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data.editColor', function ($context, $element) { return { 'if': function () { return $context.$data.editColor; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $parent.allowModify && custom', function ($context, $element) { return { 'if': function () { return $context.$parent.allowModify && $context.$data.custom; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-dashboard-state-condition-selected\': displayMode() === \'specificTypes\' }', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-state-condition-selected': $context.$data.displayMode() === 'specificTypes' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxList: { dataSource: availableConditionTypes, selectionMode: \'single\', selectedItems: availableConditionTypes() && availableConditionTypes().filter(function(value) { return value.value === conditionType(); }) || [], onItemClick: function (e) { conditionType(e.itemData.value); }, itemTemplate: \'item\', onItemRendered: updateItemAppearance, encodeNoDataText: true, noDataText: $root.getLocalizationById(\'DashboardWebStringId.ConditionalFormatting.UnsupportedDataType\') }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.availableConditionTypes, 'selectionMode': 'single', 'selectedItems': $context.$data.availableConditionTypes() && $context.$data.availableConditionTypes().filter(function (value) { return value.value === $context.$data.conditionType(); }) || [], 'onItemClick': function (e) { $context.$data.conditionType(e.itemData.value); }, 'itemTemplate': 'item', 'onItemRendered': $context.$data.updateItemAppearance, 'encodeNoDataText': true, 'noDataText': $context.$root.getLocalizationById('DashboardWebStringId.ConditionalFormatting.UnsupportedDataType') }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(displayText)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.displayText); } }; });
analytics_widgets_internal_1.addToBindingsCache('dxList: { dataSource: availableSpecificTypes, selectionMode: \'single\', grouped: availableSpecificTypes().rangeStyleType !== \'None\', selectedItems: selectedSpecificTypes, onItemClick: function (e) { specificType(e.itemData.value); }, itemTemplate: \'item\' }, css: { \'dx-dashboard-gallery-list\': availableSpecificTypes().rangeStyleType !== \'None\' }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.availableSpecificTypes, 'selectionMode': 'single', 'grouped': $context.$data.availableSpecificTypes().rangeStyleType !== 'None', 'selectedItems': $context.$data.selectedSpecificTypes, 'onItemClick': function (e) { $context.$data.specificType(e.itemData.value); }, 'itemTemplate': 'item' }; }, 'css': function () { return { 'dx-dashboard-gallery-list': $context.$data.availableSpecificTypes().rangeStyleType !== 'None' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('attr: { title: $root.getLocalizationById(displayText) }, foreach: $parent.getStyleList(value)', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$root.getLocalizationById($context.$data.displayText) }; }, 'foreach': function () { return $context.$parent.getStyleList($context.$data.value); } }; });
analytics_widgets_internal_1.addToBindingsCache('css: \'dx-dashboard-appearance-range-preview\', attr: { style: $data }', function ($context, $element) { return { 'css': function () { return 'dx-dashboard-appearance-range-preview'; }, 'attr': function () { return { 'style': $context.$data }; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: \'dx-dashboard-appearance-bar-preview\', attr: { style: $data }', function ($context, $element) { return { 'css': function () { return 'dx-dashboard-appearance-bar-preview'; }, 'attr': function () { return { 'style': $context.$data }; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: $data', function ($context, $element) { return { 'css': function () { return $context.$data; } }; });
analytics_widgets_internal_1.addToBindingsCache('attr: { title: $root.getLocalizationById(displayText) }, foreach: $parent.getGradientColorsList(value)', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$root.getLocalizationById($context.$data.displayText) }; }, 'foreach': function () { return $context.$parent.getGradientColorsList($context.$data.value); } }; });
analytics_widgets_internal_1.addToBindingsCache('css: \'dx-dashboard-appearance-gradient-preview\', attr: { style: \'background-color:\' + $data.css }', function ($context, $element) { return { 'css': function () { return 'dx-dashboard-appearance-gradient-preview'; }, 'attr': function () { return { 'style': 'background-color:' + $context.$data.css }; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: \'dx-dashboard-appearance-gradient-bar-preview\', attr: { style: \'background-color:\' + $data.css }', function ($context, $element) { return { 'css': function () { return 'dx-dashboard-appearance-gradient-bar-preview'; }, 'attr': function () { return { 'style': 'background-color:' + $context.$data.css }; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: \'dx-slidable-lists-navigation-area\'', function ($context, $element) { return { 'template': function () { return 'dx-slidable-lists-navigation-area'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $parent.availableSpecificTypes().rangeStyleType === \'None\'', function ($context, $element) { return { 'if': function () { return $context.$parent.availableSpecificTypes().rangeStyleType === 'None'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $parent.availableSpecificTypes().rangeStyleType === \'Color\'', function ($context, $element) { return { 'if': function () { return $context.$parent.availableSpecificTypes().rangeStyleType === 'Color'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $parent.availableSpecificTypes().rangeStyleType === \'ColorBar\'', function ($context, $element) { return { 'if': function () { return $context.$parent.availableSpecificTypes().rangeStyleType === 'ColorBar'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $parent.availableSpecificTypes().rangeStyleType === \'Icon\'', function ($context, $element) { return { 'if': function () { return $context.$parent.availableSpecificTypes().rangeStyleType === 'Icon'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $parent.availableSpecificTypes().rangeStyleType === \'Gradient\'', function ($context, $element) { return { 'if': function () { return $context.$parent.availableSpecificTypes().rangeStyleType === 'Gradient'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $parent.availableSpecificTypes().rangeStyleType === \'GradientBar\'', function ($context, $element) { return { 'if': function () { return $context.$parent.availableSpecificTypes().rangeStyleType === 'GradientBar'; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate:{ name:\'item\' }', function () { return { dxTemplate: { name: 'item' } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate: { name:\'item\' }', function () { return { dxTemplate: { name: 'item' } }; });
analytics_widgets_internal_1.addToBindingsCache('dxPopup: { toolbarItems: buttonItems, visible: visible, }', function ($context, $element) { return { 'dxPopup': function () { return { 'toolbarItems': $context.$data.buttonItems, 'visible': $context.$data.visible }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxForm: { formData: appearanceWrapper, items: items }', function ($context, $element) { return { 'dxForm': function () { return { 'formData': $context.$data.appearanceWrapper, 'items': $context.$data.items }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxPopover: { container: $root.getWidgetContainer(), toolbarItems: buttonItems, visible: visible, position: { of: $element.parentNode, my: \'top\', at: \'bottom\', boundary: $root.getWidgetContainer(), collision: \'flipfit\' }, wrapperAttr: { class: \'dx-dropdowneditor-overlay dx-dashboard-cf-color-picker\' } }', function ($context, $element) { return { 'dxPopover': function () { return { 'container': $context.$root.getWidgetContainer(), 'toolbarItems': $context.$data.buttonItems, 'visible': $context.$data.visible, 'position': { 'of': $element.parentNode, 'my': 'top', 'at': 'bottom', 'boundary': $context.$root.getWidgetContainer(), 'collision': 'flipfit' }, 'wrapperAttr': { 'class': 'dx-dropdowneditor-overlay dx-dashboard-cf-color-picker' } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxColorView: { value: color, editAlphaChannel: true, applyValueMode: \'instantly\' }', function ($context, $element) { return { 'dxColorView': function () { return { 'value': $context.$data.color, 'editAlphaChannel': true, 'applyValueMode': 'instantly' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: add', function ($context, $element) { return { 'click': function () { return $context.$data.add; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: remove, css: { \'dx-dashboard-state-selected\': (!!selection() && value().length > 2) }', function ($context, $element) { return { 'click': function () { return $context.$data.remove; }, 'css': function () { return { 'dx-dashboard-state-selected': (!!$context.$data.selection() && $context.$data.value().length > 2) }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxDataGrid: dataGridOptions', function ($context, $element) { return { 'dxDataGrid': function () { return $context.$data.dataGridOptions; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $data.text', function ($context, $element) { return { 'text': function () { return $context.$data.text; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxPopover: { visible: true, width: \'241px\', height: \'auto\', hideOnOutsideClick: false, position: { of: $element, my: \'left top\', at: \'left bottom\', offset: \'-8 -8\' }, container: $root.getWidgetContainer(), contentTemplate: \'dx-dashboard-style-settings-editor-template\', wrapperAttr: { class: \'dx-dashboard-style-settings-editor-popup dx-dropdowneditor-overlay\' } }', function ($context, $element) { return { 'dxPopover': function () { return { 'visible': true, 'width': '241px', 'height': 'auto', 'hideOnOutsideClick': false, 'position': { 'of': $element, 'my': 'left top', 'at': 'left bottom', 'offset': '-8 -8' }, 'container': $context.$root.getWidgetContainer(), 'contentTemplate': 'dx-dashboard-style-settings-editor-template', 'wrapperAttr': { 'class': 'dx-dashboard-style-settings-editor-popup dx-dropdowneditor-overlay' } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: negativeInfinityDisplayText', function ($context, $element) { return { 'text': function () { return $context.$data.negativeInfinityDisplayText; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxNumberBox: editorOptions', function ($context, $element) { return { 'dxNumberBox': function () { return $context.$data.editorOptions; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxDateBox: editorOptions', function ($context, $element) { return { 'dxDateBox': function () { return $context.$data.editorOptions; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxPopover: { visible: true, width: \'241px\', height: \'auto\', hideOnOutsideClick: false, position: { of: $element, my: \'left top\', at: \'left bottom\', boundary: $root.getWidgetContainer() }, container: $root.getWidgetContainer(), wrapperAttr: { class: \'dx-dropdowneditor-overlay dx-dashboard-range-edit-number-template\' } }', function ($context, $element) { return { 'dxPopover': function () { return { 'visible': true, 'width': '241px', 'height': 'auto', 'hideOnOutsideClick': false, 'position': { 'of': $element, 'my': 'left top', 'at': 'left bottom', 'boundary': $context.$root.getWidgetContainer() }, 'container': $context.$root.getWidgetContainer(), 'wrapperAttr': { 'class': 'dx-dropdowneditor-overlay dx-dashboard-range-edit-number-template' } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxButtonGroup: buttonOptions', function ($context, $element) { return { 'dxButtonGroup': function () { return $context.$data.buttonOptions; } }; });
analytics_widgets_internal_1.addToBindingsCache('target: $root.ko.observable(value), options: $parent.createStyleSettingsEditorOptions($data.data)', function ($context, $element) { return { 'target': function () { return $context.$root.ko.observable($context.$data.value); }, 'options': function () { return $context.$parent.createStyleSettingsEditorOptions($context.$data.data); } }; });
analytics_widgets_internal_1.addToBindingsCache('args: $parent.createStyleSettingsEditorItemOptions($data.data)', function ($context, $element) { return { 'args': function () { return $context.$parent.createStyleSettingsEditorItemOptions($context.$data.data); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: !$data.isGradient', function ($context, $element) { return { 'if': function () { return !$context.$data.isGradient; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-range-edit-number-template\', data: $parent.createRangeNumberEditorViewModel({ grid: $data.component, isRightValue: true, rowIndex: $data.rowIndex, value: $data.data.rightValue, setValue: $data.setValue }) }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-range-edit-number-template', 'data': $context.$parent.createRangeNumberEditorViewModel({ 'grid': $context.$data.component, 'isRightValue': true, 'rowIndex': $context.$data.rowIndex, 'value': $context.$data.data.rightValue, 'setValue': $context.$data.setValue }) }; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-range-edit-number-template\', data: $parent.createRangeNumberEditorViewModel({ grid: $data.component, isRightValue: false, rowIndex: $data.rowIndex, value: $data.data.leftValue, setValue: $data.setValue }) }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-range-edit-number-template', 'data': $context.$parent.createRangeNumberEditorViewModel({ 'grid': $context.$data.component, 'isRightValue': false, 'rowIndex': $context.$data.rowIndex, 'value': $context.$data.data.leftValue, 'setValue': $context.$data.setValue }) }; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: \'dx-dashboard-style-settings-view\'', function ($context, $element) { return { 'template': function () { return 'dx-dashboard-style-settings-view'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: infinitValue', function ($context, $element) { return { 'if': function () { return $context.$data.infinitValue; } }; });
analytics_widgets_internal_1.addToBindingsCache('ifnot: infinitValue', function ($context, $element) { return { 'ifnot': function () { return $context.$data.infinitValue; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: editorType === \'numberBox\'', function ($context, $element) { return { 'if': function () { return $context.$data.editorType === 'numberBox'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: editorType === \'dateBox\'', function ($context, $element) { return { 'if': function () { return $context.$data.editorType === 'dateBox'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: allowInfinity', function ($context, $element) { return { 'if': function () { return $context.$data.allowInfinity; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate:{ name: \'dx-dashboard-range-cell-template\' }', function () { return { dxTemplate: { name: 'dx-dashboard-range-cell-template' } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate: { name: \'dx-dashboard-range-edit-number-template-right\' }', function () { return { dxTemplate: { name: 'dx-dashboard-range-edit-number-template-right' } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate: { name: \'dx-dashboard-range-edit-number-template-left\' }', function () { return { dxTemplate: { name: 'dx-dashboard-range-edit-number-template-left' } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate:{ name: \'dx-dashboard-range-style-template\' }', function () { return { dxTemplate: { name: 'dx-dashboard-range-style-template' } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate:{ name: \'dx-dashboard-range-style-editor-template\' }', function () { return { dxTemplate: { name: 'dx-dashboard-range-style-editor-template' } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate:{ name: \'dx-dashboard-style-settings-editor-template\' }', function () { return { dxTemplate: { name: 'dx-dashboard-style-settings-editor-template' } }; });
analytics_widgets_internal_1.addToBindingsCache('click: clickHandler, attr: { style: cssStyles, title: title, \'data-label\': dataLabel }, css: cssClasses', function ($context, $element) { return { 'click': function () { return $context.$data.clickHandler; }, 'attr': function () { return { 'style': $context.$data.cssStyles, 'title': $context.$data.title, 'data-label': $context.$data.dataLabel }; }, 'css': function () { return $context.$data.cssClasses; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: isRangeStop', function ($context, $element) { return { 'if': function () { return $context.$data.isRangeStop; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-popover-color-picker\', data: colorPicker }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-popover-color-picker', 'data': $context.$data.colorPicker }; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-custom-appearance-dialog\', data: customizeAppearanceDialog }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-custom-appearance-dialog', 'data': $context.$data.customizeAppearanceDialog }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardStringId.FormatRulePredefinedColor\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardStringId.FormatRulePredefinedColor'); } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: list', function ($context, $element) { return { 'foreach': function () { return $context.$data.list; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardStringId.FormatRuleCustomColor\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardStringId.FormatRuleCustomColor'); } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: customStyleItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.customStyleItems; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: iconList', function ($context, $element) { return { 'foreach': function () { return $context.$data.iconList; } }; });
analytics_widgets_internal_1.addToBindingsCache('value: viewMode, values: [{ value: \'Appearance\', displayValue: \'DashboardStringId.FormatRuleStyleAppearance\'}, { value: \'Icon\', displayValue: \'DashboardStringId.FormatRuleStyleIcons\'}]', function ($context, $element) { return { 'value': function () { return $context.$data.viewMode; }, 'values': function () { return [{ 'value': 'Appearance', 'displayValue': 'DashboardStringId.FormatRuleStyleAppearance' }, { 'value': 'Icon', 'displayValue': 'DashboardStringId.FormatRuleStyleIcons' }]; }, '_ko_property_writers': function () { return { 'value': function (_z) { $context.$data.viewMode = _z; } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('args: $data', function ($context, $element) { return { 'args': function () { return $context.$data; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: allowChangeViewMode', function ($context, $element) { return { 'if': function () { return $context.$data.allowChangeViewMode; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: viewMode() === \'Appearance\'', function ($context, $element) { return { 'if': function () { return $context.$data.viewMode() === 'Appearance'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: customStyleItems', function ($context, $element) { return { 'if': function () { return $context.$data.customStyleItems; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: viewMode() === \'Icon\'', function ($context, $element) { return { 'if': function () { return $context.$data.viewMode() === 'Icon'; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { of: $root.getWidgetContainer(), boundary: $root.getWidgetContainer() }, title: confirmTitle, visible: confirmVisible, toolbarItems: confirmButtons, onHidden: function(e) { confirmHidden(e); }, width: \'550px\', height: \'280px\', wrapperAttr: { class: \'dx-dashboard-confirm dx-dashboard-typography\' } }', function ($context, $element) { return { 'dxPopup': function () { return { 'target': $context.$root.getWidgetContainer(), 'container': $context.$root.getWidgetContainer(), 'position': { 'of': $context.$root.getWidgetContainer(), 'boundary': $context.$root.getWidgetContainer() }, 'title': $context.$data.confirmTitle, 'visible': $context.$data.confirmVisible, 'toolbarItems': $context.$data.confirmButtons, 'onHidden': function (e) { $context.$data.confirmHidden(e); }, 'width': '550px', 'height': '280px', 'wrapperAttr': { 'class': 'dx-dashboard-confirm dx-dashboard-typography' } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('html: confirmText', function ($context, $element) { return { 'html': function () { return $context.$data.confirmText; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Currency.Currency\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Currency.Currency'); } }; });
analytics_widgets_internal_1.addToBindingsCache('dxList: { dataSource: { store: currencies, paginate: false }, displayExpr: \'displayText\', selectedItem: selectedCurrency, selectionMode: \'single\', onContentReady: function (e) { e.component.scrollToItem(currencies.indexOf(selectedCurrency()) + 1); }, itemTemplate: \'currencyItemWithPreview\', searchEnabled: true, searchExpr: \'displayText\', searchEditorOptions: { placeholder: $root.getLocalizationById(\'DashboardWebStringId.Search\') } }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': { 'store': $context.$data.currencies, 'paginate': false }, 'displayExpr': 'displayText', 'selectedItem': $context.$data.selectedCurrency, 'selectionMode': 'single', 'onContentReady': function (e) { e.component.scrollToItem($context.$data.currencies.indexOf($context.$data.selectedCurrency()) + 1); }, 'itemTemplate': 'currencyItemWithPreview', 'searchEnabled': true, 'searchExpr': 'displayText', 'searchEditorOptions': { 'placeholder': $context.$root.getLocalizationById('DashboardWebStringId.Search') } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Currency.CurrencyCulture\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Currency.CurrencyCulture'); } }; });
analytics_widgets_internal_1.addToBindingsCache('dxSelectBox: { dataSource: selectedCurrency() && selectedCurrency().cultures || [], displayExpr: \'displayText\', value: selectedCulture, placeholder: $root.getLocalizationById(\'DashboardStringId.ParametersSelectorText\'), noDataText: $root.getLocalizationById(\'DashboardStringId.FilterElementNoDataToDisplay\'), encodeNoDataText: true, dropDownOptions: { container: $root.getWidgetContainer() }, searchEnabled: true, searchExpr: \'displayText\' }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.selectedCurrency() && $context.$data.selectedCurrency().cultures || [], 'displayExpr': 'displayText', 'value': $context.$data.selectedCulture, 'placeholder': $context.$root.getLocalizationById('DashboardStringId.ParametersSelectorText'), 'noDataText': $context.$root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'), 'encodeNoDataText': true, 'dropDownOptions': { 'container': $context.$root.getWidgetContainer() }, 'searchEnabled': true, 'searchExpr': 'displayText' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Preview\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Preview'); } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $data.previewPositive', function ($context, $element) { return { 'text': function () { return $context.$data.previewPositive; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $data.previewNegative', function ($context, $element) { return { 'text': function () { return $context.$data.previewNegative; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $data.previewWarning', function ($context, $element) { return { 'text': function () { return $context.$data.previewWarning; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxSelectBox: { dataSource: currencies, displayExpr: \'displayText\', value: selectedCurrency, disabled: disabled, placeholder: $root.getLocalizationById(\'DashboardStringId.ParametersSelectorText\'), noDataText: $root.getLocalizationById(\'DashboardStringId.FilterElementNoDataToDisplay\'), encodeNoDataText: true, dropDownOptions: { container: $root.getWidgetContainer() }, itemTemplate: \'currencyItemWithPreview\', searchEnabled: true, searchExpr: \'displayText\' }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.currencies, 'displayExpr': 'displayText', 'value': $context.$data.selectedCurrency, 'disabled': $context.$data.disabled, 'placeholder': $context.$root.getLocalizationById('DashboardStringId.ParametersSelectorText'), 'noDataText': $context.$root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'), 'encodeNoDataText': true, 'dropDownOptions': { 'container': $context.$root.getWidgetContainer() }, 'itemTemplate': 'currencyItemWithPreview', 'searchEnabled': true, 'searchExpr': 'displayText' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: displayText', function ($context, $element) { return { 'text': function () { return $context.$data.displayText; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: previewText', function ($context, $element) { return { 'text': function () { return $context.$data.previewText; } }; });
analytics_widgets_internal_1.addToBindingsCache('currencyCultureName: dashboard() && dashboard().currencyCultureName', function ($context, $element) { return { 'currencyCultureName': function () { return $context.$data.dashboard() && $context.$data.dashboard().currencyCultureName; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-currency-list-item\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-currency-list-item' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data.previewPositive && $data.previewNegative', function ($context, $element) { return { 'if': function () { return $context.$data.previewPositive && $context.$data.previewNegative; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data.previewWarning', function ($context, $element) { return { 'if': function () { return $context.$data.previewWarning; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate:{ name:\'currencyItemWithPreview\' }', function () { return { dxTemplate: { name: 'currencyItemWithPreview' } }; });
analytics_widgets_internal_1.addToBindingsCache('', function ($context, $element) { return {}; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.UsedDataSources\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.UsedDataSources'); } }; });
analytics_widgets_internal_1.addToBindingsCache('click: click, text: text, css: { \'disabled-action\': disabled }', function ($context, $element) { return { 'click': function () { return $context.$data.click; }, 'text': function () { return $context.$data.text; }, 'css': function () { return { 'disabled-action': $context.$data.disabled }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: click, text: text', function ($context, $element) { return { 'click': function () { return $context.$data.click; }, 'text': function () { return $context.$data.text; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { my: \'center\', at: \'center\', of: $root.getWidgetContainer(), boundary: \'.dx-dashboard-datasource-browser-wrapper\' }, height: \'80%\', width: \'700px\', animation: { }, focusStateEnabled: true, hideOnOutsideClick: false, toolbarItems: popupContent() && popupContent().toolbarItems || [], onHidden: function() { $data.popupContent(undefined); }, visible: popupVisible, showTitle: true, title: popupContent() && popupContent().title || \'\', wrapperAttr: { class: \'dx-dashboard-datasource-browser-popup dx-dashboard-typography\' } }', function ($context, $element) { return { 'dxPopup': function () { return { 'target': $context.$root.getWidgetContainer(), 'container': $context.$root.getWidgetContainer(), 'position': { 'my': 'center', 'at': 'center', 'of': $context.$root.getWidgetContainer(), 'boundary': '.dx-dashboard-datasource-browser-wrapper' }, 'height': '80%', 'width': '700px', 'animation': {}, 'focusStateEnabled': true, 'hideOnOutsideClick': false, 'toolbarItems': $context.$data.popupContent() && $context.$data.popupContent().toolbarItems || [], 'onHidden': function () { $context.$data.popupContent(undefined); }, 'visible': $context.$data.popupVisible, 'showTitle': true, 'title': $context.$data.popupContent() && $context.$data.popupContent().title || '', 'wrapperAttr': { 'class': 'dx-dashboard-datasource-browser-popup dx-dashboard-typography' } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxList: { dataSource: dataSourceBrowser._dataSources, selectionMode: \'single\', selectedItem: selectedDataSource, nextButtonText: $root.getLocalizationById(\'DashboardWebStringId.More\'), searchEnabled: true, searchExpr: \'name\', searchEditorOptions: { placeholder: $root.getLocalizationById(\'DashboardWebStringId.Search\') } }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.dataSourceBrowser._dataSources, 'selectionMode': 'single', 'selectedItem': $context.$data.selectedDataSource, 'nextButtonText': $context.$root.getLocalizationById('DashboardWebStringId.More'), 'searchEnabled': true, 'searchExpr': 'name', 'searchEditorOptions': { 'placeholder': $context.$root.getLocalizationById('DashboardWebStringId.Search') } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: name()', function ($context, $element) { return { 'text': function () { return $context.$data.name(); } }; });
analytics_widgets_internal_1.addToBindingsCache('click: $parent.showRenameDataSourceForm', function ($context, $element) { return { 'click': function () { return $context.$parent.showRenameDataSourceForm; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: $parent.removeDataSource', function ($context, $element) { return { 'click': function () { return $context.$parent.removeDataSource; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.NoUsedDataSources\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.NoUsedDataSources'); } }; });
analytics_widgets_internal_1.addToBindingsCache('click: showAddDataSourceForm, text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.AddDataSource\')', function ($context, $element) { return { 'click': function () { return $context.$data.showAddDataSourceForm; }, 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.AddDataSource'); } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.NoAvailableDataSources\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.NoAvailableDataSources'); } }; });
analytics_widgets_internal_1.addToBindingsCache('treelist: $data, css: {\'dx-state-loading\': itemsProvider.loading() }', function ($context, $element) { return { 'treelist': function () { return $context.$data; }, 'css': function () { return { 'dx-state-loading': $context.$data.itemsProvider.loading() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-state-active\': itemsProvider.loading() }', function ($context, $element) { return { 'css': function () { return { 'dx-state-active': $context.$data.itemsProvider.loading() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('event: { dblclick: function() { $data.dblClickHandler ? $data.dblClickHandler($data) : $data.toggleCollapsed() } }, css: { \'dx-treelist-item-selected\': isSelected, \'dx-treelist-item-collapsed\': collapsed, \'dx-treelist-group-item\': hasItems, \'dx-dashboard-treelist-item-disabled\': data.isList, \'dx-dashboard-corrupted-calc-field\': data.isCorruptedCalcField }, click: toggleSelected', function ($context, $element) { return { 'event': function () { return { 'dblclick': function () { $context.$data.dblClickHandler ? $context.$data.dblClickHandler($context.$data) : $context.$data.toggleCollapsed(); } }; }, 'css': function () { return { 'dx-treelist-item-selected': $context.$data.isSelected, 'dx-treelist-item-collapsed': $context.$data.collapsed, 'dx-treelist-group-item': $context.$data.hasItems, 'dx-dashboard-treelist-item-disabled': $context.$data.data.isList, 'dx-dashboard-corrupted-calc-field': $context.$data.data.isCorruptedCalcField }; }, 'click': function () { return $context.$data.toggleSelected; } }; });
analytics_widgets_internal_1.addToBindingsCache('styleunit: { \'paddingLeft\': 20 * level + 10 }', function ($context, $element) { return { 'styleunit': function () { return { 'paddingLeft': 20 * $context.$data.level + 10 }; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: nodeImageClass, click: toggleCollapsed', function ($context, $element) { return { 'css': function () { return $context.$data.nodeImageClass; }, 'click': function () { return $context.$data.toggleCollapsed; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: data.style', function ($context, $element) { return { 'css': function () { return $context.$data.data.style; } }; });
analytics_widgets_internal_1.addToBindingsCache('event: { dblclick: function() { $data.dblClickHandler && $data.dblClickHandler($data); } }', function ($context, $element) { return { 'event': function () { return { 'dblclick': function () { $context.$data.dblClickHandler && $context.$data.dblClickHandler($context.$data); } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: text, attr: { title: text }', function ($context, $element) { return { 'text': function () { return $context.$data.text; }, 'attr': function () { return { 'title': $context.$data.text }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: data.field.fieldType', function ($context, $element) { return { 'text': function () { return $context.$data.data.field.fieldType; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardStringId.MessageCollectionTypesNotSupported\'), attr: { title: $root.getLocalizationById(\'DashboardStringId.MessageCollectionTypesNotSupported\')}', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardStringId.MessageCollectionTypesNotSupported'); }, 'attr': function () { return { 'title': $context.$root.getLocalizationById('DashboardStringId.MessageCollectionTypesNotSupported') }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.CalculatedField.Corrupted\'), attr: { title: $root.getLocalizationById(\'DashboardStringId.MessageCollectionTypesNotSupported\')}', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.CalculatedField.Corrupted'); }, 'attr': function () { return { 'title': $context.$root.getLocalizationById('DashboardStringId.MessageCollectionTypesNotSupported') }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: click, css: style', function ($context, $element) { return { 'click': function () { return $context.$data.click; }, 'css': function () { return $context.$data.style; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: dataSourceActions', function ($context, $element) { return { 'foreach': function () { return $context.$data.dataSourceActions; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: \'dx-dashboard-datasource-used-datasources\'', function ($context, $element) { return { 'template': function () { return 'dx-dashboard-datasource-used-datasources'; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: editDataSourceActions', function ($context, $element) { return { 'foreach': function () { return $context.$data.editDataSourceActions; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: visible()', function ($context, $element) { return { 'if': function () { return $context.$data.visible(); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data.filterEditorModel() !== null', function ($context, $element) { return { 'if': function () { return $context.$data.filterEditorModel() !== null; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-filtereditor-popup\', data: filterEditorModel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-filtereditor-popup', 'data': $context.$data.filterEditorModel }; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-datasource-tree\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-datasource-tree', 'data': $context.$data }; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: popupVisible', function ($context, $element) { return { 'if': function () { return $context.$data.popupVisible; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: popupContent', function ($context, $element) { return { 'with': function () { return $context.$data.popupContent; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: template, data: { extension: $data.bindingData ? $data.bindingData : $data, dataSourcesFilter: dataSourcesFilter, federationSources: null } }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.template, 'data': { 'extension': $context.$data.bindingData ? $context.$data.bindingData : $context.$data, 'dataSourcesFilter': $context.$data.dataSourcesFilter, 'federationSources': null } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-calc-field-editor\', data: calcFieldEditor  }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-calc-field-editor', 'data': $context.$data.calcFieldEditor }; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data.usedDataSourcesExist()', function ($context, $element) { return { 'if': function () { return $context.$data.usedDataSourcesExist(); } }; });
analytics_widgets_internal_1.addToBindingsCache('template: renameDataSourcePopup.template', function ($context, $element) { return { 'template': function () { return $context.$data.renameDataSourcePopup.template; } }; });
analytics_widgets_internal_1.addToBindingsCache('ifnot: $data.usedDataSourcesExist()', function ($context, $element) { return { 'ifnot': function () { return $context.$data.usedDataSourcesExist(); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: availableDataSourcesExist()', function ($context, $element) { return { 'if': function () { return $context.$data.availableDataSourcesExist(); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data.sqlDataSourceWizard', function ($context, $element) { return { 'if': function () { return $context.$data.sqlDataSourceWizard; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: !availableDataSourcesExist()', function ($context, $element) { return { 'if': function () { return !$context.$data.availableDataSourcesExist(); } }; });
analytics_widgets_internal_1.addToBindingsCache('with: dataSourceTreeListViewModel.treeListEditorOption', function ($context, $element) { return { 'with': function () { return $context.$data.dataSourceTreeListViewModel.treeListEditorOption; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: !data.style', function ($context, $element) { return { 'if': function () { return !$context.$data.data.style; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: !!data.style', function ($context, $element) { return { 'if': function () { return !!$context.$data.data.style; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: !data.isCorruptedCalcField', function ($context, $element) { return { 'if': function () { return !$context.$data.data.isCorruptedCalcField; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: data.field.fieldType && data.field.fieldType() !== \'Unknown\'', function ($context, $element) { return { 'if': function () { return $context.$data.data.field.fieldType && $context.$data.data.field.fieldType() !== 'Unknown'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: data.isList', function ($context, $element) { return { 'if': function () { return $context.$data.data.isList; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: data.isCorruptedCalcField', function ($context, $element) { return { 'if': function () { return $context.$data.data.isCorruptedCalcField; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: data.innerActions', function ($context, $element) { return { 'foreach': function () { return $context.$data.data.innerActions; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: $data', function ($context, $element) { return { 'with': function () { return $context.$data; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name :\'dx-dashboard-datasource-browser\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-datasource-browser' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { my: \'center\', at: \'center\', boundary: \'.dx-dashboard-datasource-browser-wrapper\' }, width: \'400px\', height: \'240px\', animation: { }, focusStateEnabled: true, hideOnOutsideClick: false, toolbarItems: toolbarItems || [], visible: popupVisible, showTitle: true, title: title || \'\', wrapperAttr: { class: \'dx-dashboard-datasources-rename-popup dx-dashboard-typography\' } }', function ($context, $element) { return { 'dxPopup': function () { return { 'target': $context.$root.getWidgetContainer(), 'container': $context.$root.getWidgetContainer(), 'position': { 'my': 'center', 'at': 'center', 'boundary': '.dx-dashboard-datasource-browser-wrapper' }, 'width': '400px', 'height': '240px', 'animation': {}, 'focusStateEnabled': true, 'hideOnOutsideClick': false, 'toolbarItems': $context.$data.toolbarItems || [], 'visible': $context.$data.popupVisible, 'showTitle': true, 'title': $context.$data.title || '', 'wrapperAttr': { 'class': 'dx-dashboard-datasources-rename-popup dx-dashboard-typography' } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: label', function ($context, $element) { return { 'text': function () { return $context.$data.label; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTextBox: nameTextBoxOptions, dxValidator: nameValidatorOptions', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.nameTextBoxOptions; }, 'dxValidator': function () { return $context.$data.nameValidatorOptions; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxLoadPanel: { visible: loadingPanelVisible, hideOnOutsideClick: true, container: $root.getWidgetContainer(), position: { of: $root.getWidgetContainer() } }', function ($context, $element) { return { 'dxLoadPanel': function () { return { 'visible': $context.$data.loadingPanelVisible, 'hideOnOutsideClick': true, 'container': $context.$root.getWidgetContainer(), 'position': { 'of': $context.$root.getWidgetContainer() } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dx-dashboard-element-accessor-binding: { element: wizardElement }', function ($context, $element) { return { 'dx-dashboard-element-accessor-binding': function () { return { 'element': $context.$data.wizardElement }; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: wizardModel.isVisible()', function ($context, $element) { return { 'if': function () { return $context.$data.wizardModel.isVisible(); } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-wizard-newlayout\', data: wizardModel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-wizard-newlayout', 'data': $context.$data.wizardModel }; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { selected: selectedType() === \'Sql\' }, click: function() { return selectedType(\'Sql\'); }', function ($context, $element) { return { 'css': function () { return { 'selected': $context.$data.selectedType() === 'Sql' }; }, 'click': function () { return function () { return $context.$data.selectedType('Sql'); }; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { selected: selectedType() === \'Olap\' }, click: function() { return selectedType(\'Olap\'); }', function ($context, $element) { return { 'css': function () { return { 'selected': $context.$data.selectedType() === 'Olap' }; }, 'click': function () { return function () { return $context.$data.selectedType('Olap'); }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: edit', function ($context, $element) { return { 'click': function () { return $context.$data.edit; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: remove, css: { \'dx-dashboard-state-selected\': !!criteriaString() }', function ($context, $element) { return { 'click': function () { return $context.$data.remove; }, 'css': function () { return { 'dx-dashboard-state-selected': !!$context.$data.criteriaString() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: criteriaString', function ($context, $element) { return { 'text': function () { return $context.$data.criteriaString; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: editorTemplate, data: editor }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.editorTemplate, 'data': $context.$data.editor }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: extension.errorState().title', function ($context, $element) { return { 'text': function () { return $context.$data.extension.errorState().title; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: extension.errorState().detail', function ($context, $element) { return { 'text': function () { return $context.$data.extension.errorState().detail; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.ChooseDataSource\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.ChooseDataSource'); } }; });
analytics_widgets_internal_1.addToBindingsCache('click: function() { extension.showCreateDataSourceWizard(federationSources); }, text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.CreateNewDataSource\'), attr: { title: $root.getLocalizationById(\'DashboardWebStringId.DataSources.CreateDataSource.Tooltip\') }', function ($context, $element) { return { 'click': function () { return function () { $context.$data.extension.showCreateDataSourceWizard($context.$data.federationSources); }; }, 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.CreateNewDataSource'); }, 'attr': function () { return { 'title': $context.$root.getLocalizationById('DashboardWebStringId.DataSources.CreateDataSource.Tooltip') }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxList: { dataSource: extension.getDataSources(dataSourcesFilter), selectionMode: \'single\', selectedItems: extension.selectedDataSources, noDataText: \'\', encodeNoDataText: true, nextButtonText: $root.getLocalizationById(\'DashboardWebStringId.More\'), searchEnabled: true, searchExpr: \'name\', searchEditorOptions: { placeholder: $root.getLocalizationById(\'DashboardWebStringId.Search\') }}', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.extension.getDataSources($context.$data.dataSourcesFilter), 'selectionMode': 'single', 'selectedItems': $context.$data.extension.selectedDataSources, 'noDataText': '', 'encodeNoDataText': true, 'nextButtonText': $context.$root.getLocalizationById('DashboardWebStringId.More'), 'searchEnabled': true, 'searchExpr': 'name', 'searchEditorOptions': { 'placeholder': $context.$root.getLocalizationById('DashboardWebStringId.Search') } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: extension.uiState() === \'error\'', function ($context, $element) { return { 'if': function () { return $context.$data.extension.uiState() === 'error'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: extension.errorState()', function ($context, $element) { return { 'if': function () { return $context.$data.extension.errorState(); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: extension.uiState() === \'loading\'', function ($context, $element) { return { 'if': function () { return $context.$data.extension.uiState() === 'loading'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: extension.uiState() === \'live\'', function ($context, $element) { return { 'if': function () { return $context.$data.extension.uiState() === 'live'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: extension.canCreateDataSourceWizard', function ($context, $element) { return { 'if': function () { return $context.$data.extension.canCreateDataSourceWizard; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.ClickHereInvitation\'), click: click', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.ClickHereInvitation'); }, 'click': function () { return $context.$data.click; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.BindDataInvitation\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.BindDataInvitation'); } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-visible-properties\': !!data.propertiesController.mainModel() }', function ($context, $element) { return { 'css': function () { return { 'dx-visible-properties': !!$context.$data.data.propertiesController.mainModel() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxButton: { onClick: hideBindingProperties, type: \'normal\', stylingMode: \'text\', icon: \'arrowleft\' }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': $context.$data.hideBindingProperties, 'type': 'normal', 'stylingMode': 'text', 'icon': 'arrowleft' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(data.propertiesController.secondaryModel().displayText)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.data.propertiesController.secondaryModel().displayText); } }; });
analytics_widgets_internal_1.addToBindingsCache('css: {\'dx-dashboard-slide-to-right\': isSecondaryPanelVisible() }', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-slide-to-right': $context.$data.isSecondaryPanelVisible() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxScrollView: { }', function ($context, $element) { return { 'dxScrollView': function () { return {}; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: data.template, data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.data.template, 'data': $context.$data }; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: isSecondaryPanelVisible()', function ($context, $element) { return { 'if': function () { return $context.$data.isSecondaryPanelVisible(); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: data.propertiesController.mainModel()', function ($context, $element) { return { 'if': function () { return $context.$data.data.propertiesController.mainModel(); } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-properties-accordion\', data: { propertiesController: data.propertiesController } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-properties-accordion', 'data': { 'propertiesController': $context.$data.data.propertiesController } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: data.propertiesController.secondaryModel()', function ($context, $element) { return { 'if': function () { return $context.$data.data.propertiesController.secondaryModel(); } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-properties-accordion\', data: { propertiesController: data.propertiesController, useSecondaryModel: true } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-properties-accordion', 'data': { 'propertiesController': $context.$data.data.propertiesController, 'useSecondaryModel': true } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: groupTitle', function ($context, $element) { return { 'text': function () { return $context.$data.groupTitle; } }; });
analytics_widgets_internal_1.addToBindingsCache('attr: { \'data-item-type\': type, title: title }, click: convert, css: {\'dx-state-disabled\': disabled }', function ($context, $element) { return { 'attr': function () { return { 'data-item-type': $context.$data.type, 'title': $context.$data.title }; }, 'click': function () { return $context.$data.convert; }, 'css': function () { return { 'dx-state-disabled': $context.$data.disabled }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxButton: { text: duplicateActionCaption, onClick: duplicate }', function ($context, $element) { return { 'dxButton': function () { return { 'text': $context.$data.duplicateActionCaption, 'onClick': $context.$data.duplicate }; } }; });
analytics_widgets_internal_1.addToBindingsCache('using: data', function ($context, $element) { return { 'using': function () { return $context.$data.data; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: groups', function ($context, $element) { return { 'foreach': function () { return $context.$data.groups; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.New.DashboardName\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.New.DashboardName'); } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTextBox: { placeholder: $root.getLocalizationById(\'DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder\'), value: dashboardName }', function ($context, $element) { return { 'dxTextBox': function () { return { 'placeholder': $context.$root.getLocalizationById('DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder'), 'value': $context.$data.dashboardName }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxButton: { text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.CreateDataSource\'), onClick: createNewDashboard, disabled: createNewDashboardDisabled, width: \'160px\', height: \'40px\', type: \'default\' }', function ($context, $element) { return { 'dxButton': function () { return { 'text': $context.$root.getLocalizationById('DashboardWebStringId.DataSources.CreateDataSource'), 'onClick': $context.$data.createNewDashboard, 'disabled': $context.$data.createNewDashboardDisabled, 'width': '160px', 'height': '40px', 'type': 'default' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.AddNewDashboard\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.AddNewDashboard'); } }; });
analytics_widgets_internal_1.addToBindingsCache('click: showCreateNewDashboard, text: $root.getLocalizationById(\'DashboardWebStringId.DashboardMenuNewDashboardCreate\')', function ($context, $element) { return { 'click': function () { return $context.$data.showCreateNewDashboard; }, 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DashboardMenuNewDashboardCreate'); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: accessibleDataSourcesExtension()', function ($context, $element) { return { 'if': function () { return $context.$data.accessibleDataSourcesExtension(); } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: accessibleDataSourcesExtension().templateName, data: { extension: accessibleDataSourcesExtension().viewModel, dataSourcesFilter: function() { return true; }, federationSources: [] } }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.accessibleDataSourcesExtension().templateName, 'data': { 'extension': $context.$data.accessibleDataSourcesExtension().viewModel, 'dataSourcesFilter': function () { return true; }, 'federationSources': [] } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: isDesignMode()', function ($context, $element) { return { 'if': function () { return $context.$data.isDesignMode(); } }; });
analytics_widgets_internal_1.addToBindingsCache('with: data', function ($context, $element) { return { 'with': function () { return $context.$data.data; } }; });
analytics_widgets_internal_1.addToBindingsCache('ifnot: propertiesController.accordionDataSource().length > 1', function ($context, $element) { return { 'ifnot': function () { return $context.$data.propertiesController.accordionDataSource().length > 1; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: propertiesController.accordionDataSource()[0]', function ($context, $element) { return { 'with': function () { return $context.$data.propertiesController.accordionDataSource()[0]; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: \'dx-dashboard-accordion-tab-content\'', function ($context, $element) { return { 'template': function () { return 'dx-dashboard-accordion-tab-content'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: propertiesController.accordionDataSource().length > 1', function ($context, $element) { return { 'if': function () { return $context.$data.propertiesController.accordionDataSource().length > 1; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-properties-accordion\', data: { propertiesController: propertiesController } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-properties-accordion', 'data': { 'propertiesController': $context.$data.propertiesController } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: data.propertiesController.secondaryModel', function ($context, $element) { return { 'if': function () { return $context.$data.data.propertiesController.secondaryModel; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxList: { dataSource: { load: dashboardsListStore, totalCount: function() { return 0; }, paginate: false, searchExpr: \'name\' }, noDataText: \'\', encodeNoDataText: true, searchEnabled: true, pageLoadingText: $root.getLocalizationById(\'DashboardStringId.MessageLoading\'), nextButtonText: $root.getLocalizationById(\'DashboardWebStringId.More\'), displayExpr: \'name\', keyExpr: \'id\', searchEditorOptions: { placeholder: $root.getLocalizationById(\'DashboardWebStringId.Search\') }, hoverStateEnabled: true, height: \'100%\', onItemClick: openDashboard }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': { 'load': $context.$data.dashboardsListStore, 'totalCount': function () { return 0; }, 'paginate': false, 'searchExpr': 'name' }, 'noDataText': '', 'encodeNoDataText': true, 'searchEnabled': true, 'pageLoadingText': $context.$root.getLocalizationById('DashboardStringId.MessageLoading'), 'nextButtonText': $context.$root.getLocalizationById('DashboardWebStringId.More'), 'displayExpr': 'name', 'keyExpr': 'id', 'searchEditorOptions': { 'placeholder': $context.$root.getLocalizationById('DashboardWebStringId.Search') }, 'hoverStateEnabled': true, 'height': '100%', 'onItemClick': $context.$data.openDashboard }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dx-dashboard-form-adapter: { target: titleSettings }', function ($context, $element) { return { 'dx-dashboard-form-adapter': function () { return { 'target': $context.$data.titleSettings }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: formCaption', function ($context, $element) { return { 'text': function () { return $context.$data.formCaption; } }; });
analytics_widgets_internal_1.addToBindingsCache('componentArgs: getTitleComponentArgs($element)', function ($context, $element) { return { 'componentArgs': function () { return $context.$data.getTitleComponentArgs($element); } }; });
analytics_widgets_internal_1.addToBindingsCache('dxPopup: viewModel.getPopupOptions($root.getWidgetContainer())', function ($context, $element) { return { 'dxPopup': function () { return $context.$data.viewModel.getPopupOptions($context.$root.getWidgetContainer()); } }; });
analytics_widgets_internal_1.addToBindingsCache('dxSelectBox: { dataSource: fields, displayExpr: \'displayName\', value: selectedField, placeholder: $root.getLocalizationById(\'DashboardStringId.ParametersSelectorText\'), noDataText: $root.getLocalizationById(\'DashboardStringId.FilterElementNoDataToDisplay\'), encodeNoDataText: true, dropDownOptions: { container: $root.getWidgetContainer() }   }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.fields, 'displayExpr': 'displayName', 'value': $context.$data.selectedField, 'placeholder': $context.$root.getLocalizationById('DashboardStringId.ParametersSelectorText'), 'noDataText': $context.$root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'), 'encodeNoDataText': true, 'dropDownOptions': { 'container': $context.$root.getWidgetContainer() } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTreeList: $data', function ($context, $element) { return { 'dxTreeList': function () { return $context.$data; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: displayName', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: viewModel.fieldSelector.template', function ($context, $element) { return { 'template': function () { return $context.$data.viewModel.fieldSelector.template; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: viewModel.filterTreeList.template', function ($context, $element) { return { 'template': function () { return $context.$data.viewModel.filterTreeList.template; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: editorOptions', function ($context, $element) { return { 'with': function () { return $context.$data.editorOptions; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $data', function ($context, $element) { return { 'text': function () { return $context.$data; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxSelectBox: selectBoxOptions', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.selectBoxOptions; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxNumberBox: numberBoxOptions', function ($context, $element) { return { 'dxNumberBox': function () { return $context.$data.numberBoxOptions; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: buttons', function ($context, $element) { return { 'foreach': function () { return $context.$data.buttons; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxButton: $data', function ($context, $element) { return { 'dxButton': function () { return $context.$data; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: caption', function ($context, $element) { return { 'text': function () { return $context.$data.caption; } }; });
analytics_widgets_internal_1.addToBindingsCache('dx-dashboard-form-adapter: { target: object }', function ($context, $element) { return { 'dx-dashboard-form-adapter': function () { return { 'target': $context.$data.object }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxButtonGroup: buttonGroupOptions', function ($context, $element) { return { 'dxButtonGroup': function () { return $context.$data.buttonGroupOptions; } }; });
analytics_widgets_internal_1.addToBindingsCache('dx-dashboard-container-draggable: data', function ($context, $element) { return { 'dx-dashboard-container-draggable': function () { return $context.$data.data; } }; });
analytics_widgets_internal_1.addToBindingsCache('attr: { title: $root.getLocalizationById(title) }, click: action', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$root.getLocalizationById($context.$data.title) }; }, 'click': function () { return $context.$data.action; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-dashboard-data-source-panel-opened\': changeDataSourcePanelVisible() }', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-data-source-panel-opened': $context.$data.changeDataSourcePanelVisible() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: changeDataSource', function ($context, $element) { return { 'click': function () { return $context.$data.changeDataSource; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Binding.DataSource\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Binding.DataSource'); } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-dashboard-data-source-options-active\': changeDataSourcePanelVisible()  }', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-data-source-options-active': $context.$data.changeDataSourcePanelVisible() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('style: { height: changeDataSourcePanelVisible() ? \'\' : \'0px\' }', function ($context, $element) { return { 'style': function () { return { 'height': $context.$data.changeDataSourcePanelVisible() ? '' : '0px' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: saveDataSourceChanges, text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.OK\')', function ($context, $element) { return { 'click': function () { return $context.$data.saveDataSourceChanges; }, 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.OK'); } }; });
analytics_widgets_internal_1.addToBindingsCache('click: changeDataSource, text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.Cancel\')', function ($context, $element) { return { 'click': function () { return $context.$data.changeDataSource; }, 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.Cancel'); } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(dataSourceDisplayText()), attr: { title: $root.getLocalizationById(\'DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip\') }, style: { height: changeDataSourcePanelVisible() ? \'0px\' : \'\' }, click: changeDataSource, css: { \'dx-dashboard-data-source-info-alert\': needSetDataSource }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.dataSourceDisplayText()); }, 'attr': function () { return { 'title': $context.$root.getLocalizationById('DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip') }; }, 'style': function () { return { 'height': $context.$data.changeDataSourcePanelVisible() ? '0px' : '' }; }, 'click': function () { return $context.$data.changeDataSource; }, 'css': function () { return { 'dx-dashboard-data-source-info-alert': $context.$data.needSetDataSource }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dataSourceBrowser: dataSourceBrowser, dataSource: dataSourceName, dataMember: dataMemberName, active: changeDataSourcePanelVisible', function ($context, $element) { return { 'dataSourceBrowser': function () { return $context.$data.dataSourceBrowser; }, 'dataSource': function () { return $context.$data.dataSourceName; }, 'dataMember': function () { return $context.$data.dataMemberName; }, 'active': function () { return $context.$data.changeDataSourcePanelVisible; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-context-menu-header\', data: { title: title, click: hideBindingPanel, detailVisible: detailVisible } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-context-menu-header', 'data': { 'title': $context.$data.title, 'click': $context.$data.hideBindingPanel, 'detailVisible': $context.$data.detailVisible } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: data.dataSections', function ($context, $element) { return { 'foreach': function () { return $context.$data.data.dataSections; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data.sectionInfo && sectionInfo.actions', function ($context, $element) { return { 'if': function () { return $context.$data.sectionInfo && $context.$data.sectionInfo.actions; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: sectionInfo.actions', function ($context, $element) { return { 'foreach': function () { return $context.$data.sectionInfo.actions; } }; });
analytics_widgets_internal_1.addToBindingsCache('lazy: { if: $parents[2].detailVisible }', function ($context, $element) { return { 'lazy': function () { return { 'if': $context.$parents[2].detailVisible }; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: $data.template, data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.template, 'data': $context.$data }; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-item-datasource\', data: data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-item-datasource', 'data': $context.$data.data }; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: "dx-dashboard-confirm-dialog", data: confirmDialogViewModel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-confirm-dialog', 'data': $context.$data.confirmDialogViewModel }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxclick: function(data, event) { event.stopPropagation(); return false; }', function ($context, $element) { return { 'dxclick': function () { return function (data, event) { event.stopPropagation(); return false; }; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-dashboard-include-summary\': $data.additionalProperties()}', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-include-summary': $context.$data.additionalProperties() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('model: $data.model(), holder: $data', function ($context, $element) { return { 'model': function () { return $context.$data.model(); }, 'holder': function () { return $context.$data; } }; });
analytics_widgets_internal_1.addToBindingsCache('binding: binding, item: item, click: click, selected: false, dataItemDisplayNameProvider: dataItemDisplayNameProvider, removeDataItem: removeDataItem, placeholder: placeholder, embeddedRemovalIcon: true, error: $parent.holder.dataItemErrorFactory && $parent.holder.dataItemErrorFactory($data.item.dataItem())', function ($context, $element) { return { 'binding': function () { return $context.$data.binding; }, 'item': function () { return $context.$data.item; }, 'click': function () { return $context.$data.click; }, 'selected': function () { return false; }, 'dataItemDisplayNameProvider': function () { return $context.$data.dataItemDisplayNameProvider; }, 'removeDataItem': function () { return $context.$data.removeDataItem; }, 'placeholder': function () { return $context.$data.placeholder; }, 'embeddedRemovalIcon': function () { return true; }, 'error': function () { return $context.$parent.holder.dataItemErrorFactory && $context.$parent.holder.dataItemErrorFactory($context.$data.item.dataItem()); } }; });
analytics_widgets_internal_1.addToBindingsCache('dataSourceBrowser: dataSourceBrowser, filter: constraint, startPath: dataMemberPath(), selectedField: choosenField()', function ($context, $element) { return { 'dataSourceBrowser': function () { return $context.$data.dataSourceBrowser; }, 'filter': function () { return $context.$data.constraint; }, 'startPath': function () { return $context.$data.dataMemberPath(); }, 'selectedField': function () { return $context.$data.choosenField(); } }; });
analytics_widgets_internal_1.addToBindingsCache('with: additionalProperties', function ($context, $element) { return { 'with': function () { return $context.$data.additionalProperties; } }; });
analytics_widgets_internal_1.addToBindingsCache('component: { name: \'dx-dashboard-checked-button\', params: { isSelected: $data.selected, hint: $root.getLocalizationById(displayName), icon: icon, click: function(e) { $parent.itemClick($data, e.event) } } }', function ($context, $element) { return { 'component': function () { return { 'name': 'dx-dashboard-checked-button', 'params': { 'isSelected': $context.$data.selected, 'hint': $context.$root.getLocalizationById($context.$data.displayName), 'icon': $context.$data.icon, 'click': function (e) { $context.$parent.itemClick($context.$data, e.event); } } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('component: { name: \'dx-dashboard-checked-button\', params: { hint: $root.getLocalizationById(\'DashboardStringId.CloseCaption\'), icon: \'dx-dashboard-close\' } }', function ($context, $element) { return { 'component': function () { return { 'name': 'dx-dashboard-checked-button', 'params': { 'hint': $context.$root.getLocalizationById('DashboardStringId.CloseCaption'), 'icon': 'dx-dashboard-close' } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('component: { name: \'dx-dashboard-checked-button\', params: { hint: $root.getLocalizationById(\'DashboardWebStringId.Binding.ShowAll\'), icon: \'dx-dashboard-group-types-full-list\' } }', function ($context, $element) { return { 'component': function () { return { 'name': 'dx-dashboard-checked-button', 'params': { 'hint': $context.$root.getLocalizationById('DashboardWebStringId.Binding.ShowAll'), 'icon': 'dx-dashboard-group-types-full-list' } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.FilterItem.Type\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.FilterItem.Type'); } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-container-types-header\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-container-types-header' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.StyleSettings\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.StyleSettings'); } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById($data.displayName)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.displayName); } }; });
analytics_widgets_internal_1.addToBindingsCache('component: { name: \'dx-dashboard-checked-button\', params: { isSelected: $data.selected, hint: $root.getLocalizationById(displayName), icon: icon, click: function(e) { $parents[1].itemClick($data, e.event) } } }', function ($context, $element) { return { 'component': function () { return { 'name': 'dx-dashboard-checked-button', 'params': { 'isSelected': $context.$data.selected, 'hint': $context.$root.getLocalizationById($context.$data.displayName), 'icon': $context.$data.icon, 'click': function (e) { $context.$parents[1].itemClick($context.$data, e.event); } } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: shortAvailableContainerTypes', function ($context, $element) { return { 'foreach': function () { return $context.$data.shortAvailableContainerTypes; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: hasFullList', function ($context, $element) { return { 'if': function () { return $context.$data.hasFullList; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: availableContainerTypeGroups', function ($context, $element) { return { 'foreach': function () { return $context.$data.availableContainerTypeGroups; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data.displayName', function ($context, $element) { return { 'if': function () { return $context.$data.displayName; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: $parent.availableContainerTypes.filter(function (type) { return type.group === $data.name; } )', function ($context, $element) { return { 'foreach': function () { return $context.$parent.availableContainerTypes.filter(function (type) { return type.group === $context.$data.name; }); } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-state-selected\': $data.layoutItem.isSelected }', function ($context, $element) { return { 'css': function () { return { 'dx-state-selected': $context.$data.layoutItem.isSelected }; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: menuContainerCssClasses', function ($context, $element) { return { 'css': function () { return $context.$data.menuContainerCssClasses; } }; });
analytics_widgets_internal_1.addToBindingsCache('menuVisibilitySubscription: { visible: menuItemDetailVisible }', function ($context, $element) { return { 'menuVisibilitySubscription': function () { return { 'visible': $context.$data.menuItemDetailVisible }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: collapsedStateToggle, css: isCollapsed() ? \'dx-dashboard-item-menu-expand\' : \'\'', function ($context, $element) { return { 'click': function () { return $context.$data.collapsedStateToggle; }, 'css': function () { return $context.$data.isCollapsed() ? 'dx-dashboard-item-menu-expand' : ''; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: menuButton.cssClass, click: menuButton.clickHandler, attr: { title: menuButton.hint }', function ($context, $element) { return { 'css': function () { return $context.$data.menuButton.cssClass; }, 'click': function () { return $context.$data.menuButton.clickHandler; }, 'attr': function () { return { 'title': $context.$data.menuButton.hint }; } }; });
analytics_widgets_internal_1.addToBindingsCache('xlinkHref: menuButton.icon', function ($context, $element) { return { 'xlinkHref': function () { return $context.$data.menuButton.icon; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxPopover: getPopoverOptions($root.getWidgetContainer())', function ($context, $element) { return { 'dxPopover': function () { return $context.$data.getPopoverOptions($context.$root.getWidgetContainer()); } }; });
analytics_widgets_internal_1.addToBindingsCache('click: deleteCurrentItemAction, attr: { title: deleteCurrentItemActionCaption }', function ($context, $element) { return { 'click': function () { return $context.$data.deleteCurrentItemAction; }, 'attr': function () { return { 'title': $context.$data.deleteCurrentItemActionCaption }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxButton: { onClick: click, type: \'normal\', stylingMode: \'text\', icon: \'close\' }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': $context.$data.click, 'type': 'normal', 'stylingMode': 'text', 'icon': 'close' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: cssClasses, style: style', function ($context, $element) { return { 'css': function () { return $context.$data.cssClasses; }, 'style': function () { return $context.$data.style; } }; });
analytics_widgets_internal_1.addToBindingsCache('layoutController: $data.dockingLayoutController, layoutItem: $data.layoutItem, itemMenuViewModelContainer: $data.itemMenuViewModelContainer, notificationController: $data.notificationController', function ($context, $element) { return { 'layoutController': function () { return $context.$data.dockingLayoutController; }, 'layoutItem': function () { return $context.$data.layoutItem; }, 'itemMenuViewModelContainer': function () { return $context.$data.itemMenuViewModelContainer; }, 'notificationController': function () { return $context.$data.notificationController; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: isCollapsedStateToggleVisible()', function ($context, $element) { return { 'if': function () { return $context.$data.isCollapsedStateToggleVisible(); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: !isCollapsed()', function ($context, $element) { return { 'if': function () { return !$context.$data.isCollapsed(); } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: contextMenuItemViewModels', function ($context, $element) { return { 'foreach': function () { return $context.$data.contextMenuItemViewModels; } }; });
analytics_widgets_internal_1.addToBindingsCache('lazy: { template: \'dx-dashboard-context-menu-panel-content\' }', function ($context, $element) { return { 'lazy': function () { return { 'template': 'dx-dashboard-context-menu-panel-content' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: menuPropertiesPanel', function ($context, $element) { return { 'with': function () { return $context.$data.menuPropertiesPanel; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: title', function ($context, $element) { return { 'if': function () { return $context.$data.title; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-context-menu-header\', data: { title: title, click: hidePanelAction, detailVisible: detailVisible } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-context-menu-header', 'data': { 'title': $context.$data.title, 'click': $context.$data.hidePanelAction, 'detailVisible': $context.$data.detailVisible } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: detailVisible', function ($context, $element) { return { 'if': function () { return $context.$data.detailVisible; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: panelContent.view, data: panelContent.viewModel }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.panelContent.view, 'data': $context.$data.panelContent.viewModel }; } }; });
analytics_widgets_internal_1.addToBindingsCache('style: { \'font-weight\': $data.customTemplateGetItemWeight($data.itemModel)}', function ($context, $element) { return { 'style': function () { return { 'font-weight': $context.$data.customTemplateGetItemWeight($context.$data.itemModel) }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById($data.parent.getItemText($data.itemModel))', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.parent.getItemText($context.$data.itemModel)); } }; });
analytics_widgets_internal_1.addToBindingsCache('component: { name: \'dx-dashboard-checked-button\', params: { isSelected: $data.selected, text: $data.item && $data.item.dataItem && $data.item.dataItem() && dataItemDisplayNameProvider($data.item.dataItem()) || (($root.ko.unwrap($data.selected) && $data.selectedPlaceholder) || $data.placeholder), click: function(e) { !!$data.propertiesController ? $data.propertiesController.processDataItemClick($data) : $data.click($data); } } }, style: { \'z-index\': 1000 - $data.index }, css: { \'dx-dashboard-data-item-remove-action-visible\': $root.ko.unwrap($data.selected) && !$root.ko.unwrap($data.isEmpty), \'dx-empty\': $data.isEmpty, \'dx-state-warning\': $data.warning, \'dx-state-error\': $data.error }, attr: { draggable: !!$root.ko.unwrap($data.draggable) }', function ($context, $element) { return { 'component': function () { return { 'name': 'dx-dashboard-checked-button', 'params': { 'isSelected': $context.$data.selected, 'text': $context.$data.item && $context.$data.item.dataItem && $context.$data.item.dataItem() && $context.$data.dataItemDisplayNameProvider($context.$data.item.dataItem()) || (($context.$root.ko.unwrap($context.$data.selected) && $context.$data.selectedPlaceholder) || $context.$data.placeholder), 'click': function (e) { !!$context.$data.propertiesController ? $context.$data.propertiesController.processDataItemClick($context.$data) : $context.$data.click($context.$data); } } }; }, 'style': function () { return { 'z-index': 1000 - $context.$data.index }; }, 'css': function () { return { 'dx-dashboard-data-item-remove-action-visible': $context.$root.ko.unwrap($context.$data.selected) && !$context.$root.ko.unwrap($context.$data.isEmpty), 'dx-empty': $context.$data.isEmpty, 'dx-state-warning': $context.$data.warning, 'dx-state-error': $context.$data.error }; }, 'attr': function () { return { 'draggable': !!$context.$root.ko.unwrap($context.$data.draggable) }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: function(model, event) { removeDataItem(item); event.stopPropagation(); }, css: { \'dx-dashboard-data-item-remove-action-visible\': $root.ko.unwrap($data.selected) , \'dx-dashboard-data-item-remove-action-embeded\': $data.embeddedRemovalIcon }', function ($context, $element) { return { 'click': function () { return function (model, event) { $context.$data.removeDataItem($context.$data.item); event.stopPropagation(); }; }, 'css': function () { return { 'dx-dashboard-data-item-remove-action-visible': $context.$root.ko.unwrap($context.$data.selected), 'dx-dashboard-data-item-remove-action-embeded': $context.$data.embeddedRemovalIcon }; } }; });
analytics_widgets_internal_1.addToBindingsCache('ifnot: $data.isEmpty', function ($context, $element) { return { 'ifnot': function () { return $context.$data.isEmpty; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(sectionInfo.title)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.sectionInfo.title); } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-dashboard-hierarchical-group\': $data.groupIndex !== undefined }', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-hierarchical-group': $context.$data.groupIndex !== undefined }; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: {\'dx-dashboard-hierarchical-group-cover\': false}', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-hierarchical-group-cover': false }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: addPane, title: $root.getLocalizationById(\'DashboardWebStringId.Chart.AddPane\')', function ($context, $element) { return { 'click': function () { return $context.$data.addPane; }, 'title': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Chart.AddPane'); } }; });
analytics_widgets_internal_1.addToBindingsCache('item: $data, click: $parents[1].selectDataItem, removeDataItem: $parents[1].removeDataItem, index: $index(), dataItemDisplayNameProvider: $parents[1].dataItemDisplayNameProvider, propertiesController: $parents[1].itemSurface.propertiesController, error: $parents[1].errorFactory($data), draggable: true', function ($context, $element) { return { 'item': function () { return $context.$data; }, 'click': function () { return $context.$parents[1].selectDataItem; }, 'removeDataItem': function () { return $context.$parents[1].removeDataItem; }, 'index': function () { return $context.$index(); }, 'dataItemDisplayNameProvider': function () { return $context.$parents[1].dataItemDisplayNameProvider; }, 'propertiesController': function () { return $context.$parents[1].itemSurface.propertiesController; }, 'error': function () { return $context.$parents[1].errorFactory($context.$data); }, 'draggable': function () { return true; } }; });
analytics_widgets_internal_1.addToBindingsCache('selectionTarget: newItemSample, placeholder: sectionInfo.bindingProperty.emptyPlaceholder, selectedPlaceholder: sectionInfo.bindingProperty.selectedPlaceholder, click: addClick, propertiesController: $parent.itemSurface.propertiesController, warning: $data.warning', function ($context, $element) { return { 'selectionTarget': function () { return $context.$data.newItemSample; }, 'placeholder': function () { return $context.$data.sectionInfo.bindingProperty.emptyPlaceholder; }, 'selectedPlaceholder': function () { return $context.$data.sectionInfo.bindingProperty.selectedPlaceholder; }, 'click': function () { return $context.$data.addClick; }, 'propertiesController': function () { return $context.$parent.itemSurface.propertiesController; }, 'warning': function () { return $context.$data.warning; } }; });
analytics_widgets_internal_1.addToBindingsCache('draggable: true, click: $parents[1].selectDataItemContainer, item: $data, removeDataItem: $parents[1].removeDataItem, dataItemDisplayNameProvider: $parents[1].dataItemDisplayNameProvider, placeholder: $parents[1].getDisplayName($data), isEmpty: false, error: $parents[1].errorFactory($data), propertiesController: $parents[1].itemSurface.propertiesController', function ($context, $element) { return { 'draggable': function () { return true; }, 'click': function () { return $context.$parents[1].selectDataItemContainer; }, 'item': function () { return $context.$data; }, 'removeDataItem': function () { return $context.$parents[1].removeDataItem; }, 'dataItemDisplayNameProvider': function () { return $context.$parents[1].dataItemDisplayNameProvider; }, 'placeholder': function () { return $context.$parents[1].getDisplayName($context.$data); }, 'isEmpty': function () { return false; }, 'error': function () { return $context.$parents[1].errorFactory($context.$data); }, 'propertiesController': function () { return $context.$parents[1].itemSurface.propertiesController; } }; });
analytics_widgets_internal_1.addToBindingsCache('selectionTarget: newContainerSample, placeholder: sectionInfo.bindingProperty.emptyPlaceholder, selectedPlaceholder: sectionInfo.bindingProperty.selectedPlaceholder, click: addDataItemContainerClick, propertiesController: $parent.itemSurface.propertiesController, warning: $data.warning', function ($context, $element) { return { 'selectionTarget': function () { return $context.$data.newContainerSample; }, 'placeholder': function () { return $context.$data.sectionInfo.bindingProperty.emptyPlaceholder; }, 'selectedPlaceholder': function () { return $context.$data.sectionInfo.bindingProperty.selectedPlaceholder; }, 'click': function () { return $context.$data.addDataItemContainerClick; }, 'propertiesController': function () { return $context.$parent.itemSurface.propertiesController; }, 'warning': function () { return $context.$data.warning; } }; });
analytics_widgets_internal_1.addToBindingsCache('item: dataItemLink, removeDataItem: removeDataItem, dataItemDisplayNameProvider: dataItemDisplayNameProvider, click: selectDataItem, placeholder: sectionInfo.bindingProperty.emptyPlaceholder, selectedPlaceholder: sectionInfo.bindingProperty.selectedPlaceholder, propertiesController: $parent.itemSurface.propertiesController, error: errorFactory(dataItemLink), draggable: dataItemLink.uniqueName, warning: $data.warning', function ($context, $element) { return { 'item': function () { return $context.$data.dataItemLink; }, 'removeDataItem': function () { return $context.$data.removeDataItem; }, 'dataItemDisplayNameProvider': function () { return $context.$data.dataItemDisplayNameProvider; }, 'click': function () { return $context.$data.selectDataItem; }, 'placeholder': function () { return $context.$data.sectionInfo.bindingProperty.emptyPlaceholder; }, 'selectedPlaceholder': function () { return $context.$data.sectionInfo.bindingProperty.selectedPlaceholder; }, 'propertiesController': function () { return $context.$parent.itemSurface.propertiesController; }, 'error': function () { return $context.$data.errorFactory($context.$data.dataItemLink); }, 'draggable': function () { return $context.$data.dataItemLink.uniqueName; }, 'warning': function () { return $context.$data.warning; } }; });
analytics_widgets_internal_1.addToBindingsCache('lazy: { if: $parents[3].detailVisible }', function ($context, $element) { return { 'lazy': function () { return { 'if': $context.$parents[3].detailVisible }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxFieldListPicker: { path: pathToMembers, value: value, displayValue: displayValue, itemsProvider: itemsProvider, treeListController: treeListController, disabled: disabled, placeholder: $root.getLocalizationById(\'DashboardStringId.ParametersSelectorText\') }', function ($context, $element) { return { 'dxFieldListPicker': function () { return { 'path': $context.$data.pathToMembers, 'value': $context.$data.value, 'displayValue': $context.$data.displayValue, 'itemsProvider': $context.$data.itemsProvider, 'treeListController': $context.$data.treeListController, 'disabled': $context.$data.disabled, 'placeholder': $context.$root.getLocalizationById('DashboardStringId.ParametersSelectorText') }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxScrollView: { direction: \'vertical\', height: \'100%\' }', function ($context, $element) { return { 'dxScrollView': function () { return { 'direction': 'vertical', 'height': '100%' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dx-dashboard-form-adapter: { target: commonParameterSettings  }', function ($context, $element) { return { 'dx-dashboard-form-adapter': function () { return { 'target': $context.$data.commonParameterSettings }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dx-dashboard-form-adapter: { target: lookUpParameterType  }', function ($context, $element) { return { 'dx-dashboard-form-adapter': function () { return { 'target': $context.$data.lookUpParameterType }; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: staticListLookUpSettings', function ($context, $element) { return { 'with': function () { return $context.$data.staticListLookUpSettings; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: dynamicListLookUpSettings', function ($context, $element) { return { 'with': function () { return $context.$data.dynamicListLookUpSettings; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Parameters.ParameterList\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Parameters.ParameterList'); } }; });
analytics_widgets_internal_1.addToBindingsCache('click: toggleReordering, text: allowReordering() ? $root.getLocalizationById(\'DashboardWebStringId.Parameters.Done\'): $root.getLocalizationById(\'DashboardWebStringId.Parameters.Reorder\')', function ($context, $element) { return { 'click': function () { return $context.$data.toggleReordering; }, 'text': function () { return $context.$data.allowReordering() ? $context.$root.getLocalizationById('DashboardWebStringId.Parameters.Done') : $context.$root.getLocalizationById('DashboardWebStringId.Parameters.Reorder'); } }; });
analytics_widgets_internal_1.addToBindingsCache('click: addParameter, text: $root.getLocalizationById(\'DashboardWebStringId.Add\'), attr: { title: $root.getLocalizationById(\'DashboardWebStringId.Parameters.AddParameter.Tooltip\') }', function ($context, $element) { return { 'click': function () { return $context.$data.addParameter; }, 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Add'); }, 'attr': function () { return { 'title': $context.$root.getLocalizationById('DashboardWebStringId.Parameters.AddParameter.Tooltip') }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxList: { dataSource: dashboard().parameters, selectionMode: \'single\', itemDragging: { allowReordering: allowReordering, }, onItemReordered: reorderParameters, selectedItems: $data.selectedParameters, nextButtonText: $root.getLocalizationById(\'DashboardWebStringId.More\'), searchEnabled: true, searchExpr: [\'name\', \'description\'], searchEditorOptions: { placeholder: $root.getLocalizationById(\'DashboardWebStringId.Search\') } }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.dashboard().parameters, 'selectionMode': 'single', 'itemDragging': { 'allowReordering': $context.$data.allowReordering }, 'onItemReordered': $context.$data.reorderParameters, 'selectedItems': $context.$data.selectedParameters, 'nextButtonText': $context.$root.getLocalizationById('DashboardWebStringId.More'), 'searchEnabled': true, 'searchExpr': ['name', 'description'], 'searchEditorOptions': { 'placeholder': $context.$root.getLocalizationById('DashboardWebStringId.Search') } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: description', function ($context, $element) { return { 'text': function () { return $context.$data.description; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: $parent.removeParameter', function ($context, $element) { return { 'click': function () { return $context.$parent.removeParameter; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: addParameter, text: $root.getLocalizationById(\'DashboardWebStringId.Parameters.AddParameter\')', function ($context, $element) { return { 'click': function () { return $context.$data.addParameter; }, 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Parameters.AddParameter'); } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-parameter-settings\', data: parameterEditorViewModel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-parameter-settings', 'data': $context.$data.parameterEditorViewModel }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Parameters.NoSelectedParameter\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Parameters.NoSelectedParameter'); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: dashboard()', function ($context, $element) { return { 'if': function () { return $context.$data.dashboard(); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: dashboard().parameters().length > 1', function ($context, $element) { return { 'if': function () { return $context.$data.dashboard().parameters().length > 1; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: dashboard().parameters().length > 0', function ($context, $element) { return { 'if': function () { return $context.$data.dashboard().parameters().length > 0; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: description', function ($context, $element) { return { 'if': function () { return $context.$data.description; } }; });
analytics_widgets_internal_1.addToBindingsCache('ifnot: $parent.allowReordering', function ($context, $element) { return { 'ifnot': function () { return $context.$parent.allowReordering; } }; });
analytics_widgets_internal_1.addToBindingsCache('ifnot: dashboard().parameters().length > 0', function ($context, $element) { return { 'ifnot': function () { return $context.$data.dashboard().parameters().length > 0; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: parameterEditorViewModel', function ($context, $element) { return { 'if': function () { return $context.$data.parameterEditorViewModel; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxAccordion: { dataSource: !$data.useSecondaryModel ? propertiesController.accordionDataSource : propertiesController.secondaryAccordionDataSource, itemTitleTemplate: \'title\', itemTemplate: \'itemCategory\', focusStateEnabled: false, selectedIndex: !$data.useSecondaryModel ? propertiesController.selectedIndex : propertiesController.secondarySelectedIndex, collapsible: true, noDataText: $root.getLocalizationById(\'DashboardStringId.MessageLoading\'), encodeNoDataText: true, onItemRendered: function (e) { if(e.itemData.hasNoBorder) { $root.$unwrap(e.itemElement).classList.add(\'dx-dashboard-accordion-item-no-border\'); } }, onSelectionChanged: function(e) { if(e.addedItems[0] && e.addedItems[0].tabModel) { e.addedItems[0].tabModel(e.addedItems[0].tabModel()) } } }', function ($context, $element) { return { 'dxAccordion': function () { return { 'dataSource': !$context.$data.useSecondaryModel ? $context.$data.propertiesController.accordionDataSource : $context.$data.propertiesController.secondaryAccordionDataSource, 'itemTitleTemplate': 'title', 'itemTemplate': 'itemCategory', 'focusStateEnabled': false, 'selectedIndex': !$context.$data.useSecondaryModel ? $context.$data.propertiesController.selectedIndex : $context.$data.propertiesController.secondarySelectedIndex, 'collapsible': true, 'noDataText': $context.$root.getLocalizationById('DashboardStringId.MessageLoading'), 'encodeNoDataText': true, 'onItemRendered': function (e) { if (e.itemData.hasNoBorder) {
            $context.$root.$unwrap(e.itemElement).classList.add('dx-dashboard-accordion-item-no-border');
        } }, 'onSelectionChanged': function (e) { if (e.addedItems[0] && e.addedItems[0].tabModel) {
            e.addedItems[0].tabModel(e.addedItems[0].tabModel());
        } } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: $data.style, style: { height: $data.headerHeight ? $data.headerHeight + \'px\': \'\' }, dxclick: function(data, event) { $data.onTitleClick && $data.onTitleClick($data.headerModel || $data.tabModel, data, event); }', function ($context, $element) { return { 'css': function () { return $context.$data.style; }, 'style': function () { return { 'height': $context.$data.headerHeight ? $context.$data.headerHeight + 'px' : '' }; }, 'dxclick': function () { return function (data, event) { $context.$data.onTitleClick && $context.$data.onTitleClick($context.$data.headerModel || $context.$data.tabModel, data, event); }; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: $data.style', function ($context, $element) { return { 'css': function () { return $context.$data.style; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById($data.category)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.category); } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById($data.summary && $data.summary()), attr: { title: $data.summaryHint && $data.summaryHint() }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.summary && $context.$data.summary()); }, 'attr': function () { return { 'title': $context.$data.summaryHint && $context.$data.summaryHint() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data.headerTemplate', function ($context, $element) { return { 'if': function () { return $context.$data.headerTemplate; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: $data.headerTemplate, data: $data.headerModel || $data.tabModel }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.headerTemplate, 'data': $context.$data.headerModel || $context.$data.tabModel }; } }; });
analytics_widgets_internal_1.addToBindingsCache('ifnot: $data.headerTemplate', function ($context, $element) { return { 'ifnot': function () { return $context.$data.headerTemplate; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-dashboard-properties-header-template\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-properties-header-template' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data.tabTemplate', function ($context, $element) { return { 'if': function () { return $context.$data.tabTemplate; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: $data.tabTemplate, data: $data.tabModel }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.tabTemplate, 'data': $context.$data.tabModel }; } }; });
analytics_widgets_internal_1.addToBindingsCache('ifnot: $data.tabTemplate', function ($context, $element) { return { 'ifnot': function () { return $context.$data.tabTemplate; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: $data.tabModel', function ($context, $element) { return { 'with': function () { return $context.$data.tabModel; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data.summary', function ($context, $element) { return { 'if': function () { return $context.$data.summary; } }; });
analytics_widgets_internal_1.addToBindingsCache('ifnot: $data.summary', function ($context, $element) { return { 'ifnot': function () { return $context.$data.summary; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate : { name: \'title\', visible: \'visible\' }', function () { return { dxTemplate: { name: 'title', visible: 'visible' } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate : { name: \'itemCategory\', visible: \'visible\' }', function () { return { dxTemplate: { name: 'itemCategory', visible: 'visible' } }; });
analytics_widgets_internal_1.addToBindingsCache('dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { boundary: $root.getWidgetContainer() }, hideOnOutsideClick: true, showTitle: true, deferRendering: true, onHiding: onHiding, onHidden: onHidden, onInitialized: onInitialized, title: $root.getLocalizationById(\'DashboardWebStringId.TextBoxItemEditor.DialogCaption\'), toolbarItems: [ { toolbar: \'bottom\', location: \'after\', widget: \'dxButton\', options: { text: $root.getLocalizationById(\'DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose\'), onClick: saveAndClose, type: \'default\' } }, { toolbar: \'bottom\', location: \'after\', widget: \'dxButton\', options: { text: $root.getLocalizationById(\'DashboardWebStringId.TextBoxItemEditor.DialogClose\'), onClick: close } } ], wrapperAttr: { class: \'dx-dashboard-text-box-item-editor-popup\' } }', function ($context, $element) { return { 'dxPopup': function () { return { 'target': $context.$root.getWidgetContainer(), 'container': $context.$root.getWidgetContainer(), 'position': { 'boundary': $context.$root.getWidgetContainer() }, 'hideOnOutsideClick': true, 'showTitle': true, 'deferRendering': true, 'onHiding': $context.$data.onHiding, 'onHidden': $context.$data.onHidden, 'onInitialized': $context.$data.onInitialized, 'title': $context.$root.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.DialogCaption'), 'toolbarItems': [{ 'toolbar': 'bottom', 'location': 'after', 'widget': 'dxButton', 'options': { 'text': $context.$root.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose'), 'onClick': $context.$data.saveAndClose, 'type': 'default' } }, { 'toolbar': 'bottom', 'location': 'after', 'widget': 'dxButton', 'options': { 'text': $context.$root.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.DialogClose'), 'onClick': $context.$data.close } }], 'wrapperAttr': { 'class': 'dx-dashboard-text-box-item-editor-popup' } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dx-dashboard-rich-edit: $data', function ($context, $element) { return { 'dx-dashboard-rich-edit': function () { return $context.$data; } }; });
analytics_widgets_internal_1.addToBindingsCache('with: richEditorOptions', function ($context, $element) { return { 'with': function () { return $context.$data.richEditorOptions; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxPopup: getKoPopupOptions()', function ($context, $element) { return { 'dxPopup': function () { return $context.$data.getKoPopupOptions(); } }; });
analytics_widgets_internal_1.addToBindingsCache('dxToolbar: koToolbarOptions', function ($context, $element) { return { 'dxToolbar': function () { return $context.$data.koToolbarOptions; } }; });
analytics_widgets_internal_1.addToBindingsCache('style: { left: designerPanelLeft() + \'px\' }', function ($context, $element) { return { 'style': function () { return { 'left': $context.$data.designerPanelLeft() + 'px' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { my: \'left top\', at: \'left top\', collision: \'flipfit\', boundaryOffset: \'0, 0\', boundary: $root.getWidgetContainer(), of:  $root.getWidgetContainer(), offset: \'0, 0\' }, animation: { show: { type: \'slide\', from: { left: -240 }, to: { left: 0 } }, hide: { type: \'slide\', from: { left: 0 }, to: { left: -240 } } }, focusStateEnabled: false, showCloseButton: false, dragEnabled: false, width: settingsFormVisible() ? \'100%\' : 240, height: \'100%\', titleTemplate: \'menuTitleTemplate\', hideOnOutsideClick: !settingsFormVisible(), hideOnParentScroll: false, visible: menuVisible, wrapperAttr: { class: \'dx-dashboard-designer-menu-popup\' } }', function ($context, $element) { return { 'dxPopup': function () { return { 'target': $context.$root.getWidgetContainer(), 'container': $context.$root.getWidgetContainer(), 'position': { 'my': 'left top', 'at': 'left top', 'collision': 'flipfit', 'boundaryOffset': '0, 0', 'boundary': $context.$root.getWidgetContainer(), 'of': $context.$root.getWidgetContainer(), 'offset': '0, 0' }, 'animation': { 'show': { 'type': 'slide', 'from': { 'left': -240 }, 'to': { 'left': 0 } }, 'hide': { 'type': 'slide', 'from': { 'left': 0 }, 'to': { 'left': -240 } } }, 'focusStateEnabled': false, 'showCloseButton': false, 'dragEnabled': false, 'width': $context.$data.settingsFormVisible() ? '100%' : 240, 'height': '100%', 'titleTemplate': 'menuTitleTemplate', 'hideOnOutsideClick': !$context.$data.settingsFormVisible(), 'hideOnParentScroll': false, 'visible': $context.$data.menuVisible, 'wrapperAttr': { 'class': 'dx-dashboard-designer-menu-popup' } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.DashboardMenu\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DashboardMenu'); } }; });
analytics_widgets_internal_1.addToBindingsCache('dxButton: { onClick: function() { toggleMenu(); }, type: \'normal\', stylingMode: \'text\', icon: \'close\' }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': function () { $context.$data.toggleMenu(); }, 'type': 'normal', 'stylingMode': 'text', 'icon': 'close' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: disabled() ? null : $parent.menuItemClick, text: $root.getLocalizationById(title), css: { \'dx-state-selected\': selected, \'dx-state-disabled\': disabled, \'dx-separator\': $data.hasSeparator }', function ($context, $element) { return { 'click': function () { return $context.$data.disabled() ? null : $context.$parent.menuItemClick; }, 'text': function () { return $context.$root.getLocalizationById($context.$data.title); }, 'css': function () { return { 'dx-state-selected': $context.$data.selected, 'dx-state-disabled': $context.$data.disabled, 'dx-separator': $context.$data.hasSeparator }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(settingsForm().title)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.settingsForm().title); } }; });
analytics_widgets_internal_1.addToBindingsCache('element-height-change-provider: { model: toolbarGroupsSorted, height: toolbarHeight }', function ($context, $element) { return { 'element-height-change-provider': function () { return { 'model': $context.$data.toolbarGroupsSorted, 'height': $context.$data.toolbarHeight }; } }; });
analytics_widgets_internal_1.addToBindingsCache('attr: { title: $root.getLocalizationById(title) }, click: click, css: { \'dx-state-disabled\': disabled }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$root.getLocalizationById($context.$data.title) }; }, 'click': function () { return $context.$data.click; }, 'css': function () { return { 'dx-state-disabled': $context.$data.disabled }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxScrollView: { direction: \'vertical\'}, style: { bottom: toolbarHeight() + \'px\' }', function ($context, $element) { return { 'dxScrollView': function () { return { 'direction': 'vertical' }; }, 'style': function () { return { 'bottom': $context.$data.toolbarHeight() + 'px' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(title)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.title); } }; });
analytics_widgets_internal_1.addToBindingsCache('dx-dashboard-element-accessor: $parents[1].initDragEvents(type), attr: { \'data-item-type\': type, title: $root.getLocalizationById(title) }, click: click, css: { \'dx-state-disabled\': disabled }', function ($context, $element) { return { 'dx-dashboard-element-accessor': function () { return $context.$parents[1].initDragEvents($context.$data.type); }, 'attr': function () { return { 'data-item-type': $context.$data.type, 'title': $context.$root.getLocalizationById($context.$data.title) }; }, 'click': function () { return $context.$data.click; }, 'css': function () { return { 'dx-state-disabled': $context.$data.disabled }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.AddItemInvitation\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.AddItemInvitation'); } }; });
analytics_widgets_internal_1.addToBindingsCache('attr: { title: $root.getLocalizationById(title) }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$root.getLocalizationById($context.$data.title) }; } }; });
analytics_widgets_internal_1.addToBindingsCache('xlinkHref: iconName', function ($context, $element) { return { 'xlinkHref': function () { return $context.$data.iconName; } }; });
analytics_widgets_internal_1.addToBindingsCache('attr: { \'data-item-type\': type }, click:  $parent.addDashboardItem', function ($context, $element) { return { 'attr': function () { return { 'data-item-type': $context.$data.type }; }, 'click': function () { return $context.$parent.addDashboardItem; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: \'dx-dashboard-menu\'', function ($context, $element) { return { 'template': function () { return 'dx-dashboard-menu'; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: \'dx-dashboard-toolbox\'', function ($context, $element) { return { 'template': function () { return 'dx-dashboard-toolbox'; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: \'dx-dashboard-toolbar\'', function ($context, $element) { return { 'template': function () { return 'dx-dashboard-toolbar'; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: menuItemsSorted', function ($context, $element) { return { 'foreach': function () { return $context.$data.menuItemsSorted; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: settingsFormVisible() && settingsForm()', function ($context, $element) { return { 'if': function () { return $context.$data.settingsFormVisible() && $context.$data.settingsForm(); } }; });
analytics_widgets_internal_1.addToBindingsCache('template:{ name: settingsForm().template, data: settingsForm().data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.settingsForm().template, 'data': $context.$data.settingsForm().data }; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: toolbarGroupsSorted', function ($context, $element) { return { 'foreach': function () { return $context.$data.toolbarGroupsSorted; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data[\'template\']', function ($context, $element) { return { 'if': function () { return $context.$data['template']; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: $data[\'template\']', function ($context, $element) { return { 'template': function () { return $context.$data['template']; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data[\'icon\']', function ($context, $element) { return { 'if': function () { return $context.$data['icon']; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: toolboxGroupsSorted', function ($context, $element) { return { 'foreach': function () { return $context.$data.toolboxGroupsSorted; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: dashboardItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.dashboardItems; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate: { name: \'menuTitleTemplate\' }', function () { return { dxTemplate: { name: 'menuTitleTemplate' } }; });
analytics_widgets_internal_1.addToBindingsCache('visible: isToolbarVisible', function ($context, $element) { return { 'visible': function () { return $context.$data.isToolbarVisible; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: add, css: { \'dx-state-disabled\': !addEnabled() }', function ($context, $element) { return { 'click': function () { return $context.$data.add; }, 'css': function () { return { 'dx-state-disabled': !$context.$data.addEnabled() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: edit, css: { \'dx-state-disabled\': !editEnabled() }', function ($context, $element) { return { 'click': function () { return $context.$data.edit; }, 'css': function () { return { 'dx-state-disabled': !$context.$data.editEnabled() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: down, css: { \'dx-state-disabled\': !downEnabled() }', function ($context, $element) { return { 'click': function () { return $context.$data.down; }, 'css': function () { return { 'dx-state-disabled': !$context.$data.downEnabled() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: up, css: { \'dx-state-disabled\': !upEnabled() }', function ($context, $element) { return { 'click': function () { return $context.$data.up; }, 'css': function () { return { 'dx-state-disabled': !$context.$data.upEnabled() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: remove, css: { \'dx-dashboard-state-selected\': !!removeEnabled() }', function ($context, $element) { return { 'click': function () { return $context.$data.remove; }, 'css': function () { return { 'dx-dashboard-state-selected': !!$context.$data.removeEnabled() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: action, attr: { title: name }', function ($context, $element) { return { 'click': function () { return $context.$data.action; }, 'attr': function () { return { 'title': $context.$data.name }; } }; });
analytics_widgets_internal_1.addToBindingsCache('attr: { \'xlink:href\': icon }', function ($context, $element) { return { 'attr': function () { return { 'xlink:href': $context.$data.icon }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxList: $data.getListOptions()', function ($context, $element) { return { 'dxList': function () { return $context.$data.getListOptions(); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: allowAddItem', function ($context, $element) { return { 'if': function () { return $context.$data.allowAddItem; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: allowEditItem', function ($context, $element) { return { 'if': function () { return $context.$data.allowEditItem; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: allowReorderItem', function ($context, $element) { return { 'if': function () { return $context.$data.allowReorderItem; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: allowRemoveItem', function ($context, $element) { return { 'if': function () { return $context.$data.allowRemoveItem; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: customToolbarItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.customToolbarItems; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-state-disabled\': !downEnabled() }, click: down', function ($context, $element) { return { 'css': function () { return { 'dx-state-disabled': !$context.$data.downEnabled() }; }, 'click': function () { return $context.$data.down; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-state-disabled\': !upEnabled() }, click: up', function ($context, $element) { return { 'css': function () { return { 'dx-state-disabled': !$context.$data.upEnabled() }; }, 'click': function () { return $context.$data.up; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: remove, css: { \'dx-dashboard-state-selected\': removeEnabled() }', function ($context, $element) { return { 'click': function () { return $context.$data.remove; }, 'css': function () { return { 'dx-dashboard-state-selected': $context.$data.removeEnabled() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxDataGrid: $data.getGridOptions()', function ($context, $element) { return { 'dxDataGrid': function () { return $context.$data.getGridOptions(); } }; });
analytics_widgets_internal_1.addToBindingsCache('template: \'dx-field-chooser-content-list\'', function ($context, $element) { return { 'template': function () { return 'dx-field-chooser-content-list'; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-field-chooser-search-mode\': isSearchMode() }', function ($context, $element) { return { 'css': function () { return { 'dx-field-chooser-search-mode': $context.$data.isSearchMode() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: searchButtonClick', function ($context, $element) { return { 'click': function () { return $context.$data.searchButtonClick; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: addCalcField', function ($context, $element) { return { 'click': function () { return $context.$data.addCalcField; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: editCalcField, css: {\'dx-state-disabled\': !isCalcFieldSelected()}', function ($context, $element) { return { 'click': function () { return $context.$data.editCalcField; }, 'css': function () { return { 'dx-state-disabled': !$context.$data.isCalcFieldSelected() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('click: removeCalcField, css: {\'dx-state-disabled\': !isCalcFieldSelected()}', function ($context, $element) { return { 'click': function () { return $context.$data.removeCalcField; }, 'css': function () { return { 'dx-state-disabled': !$context.$data.isCalcFieldSelected() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('component: { name: \'dx-dashboard-checked-button\', params: { isSelected: isListMode, icon: \'dx-dashboard-fc-mode-list\', click: setListMode } }', function ($context, $element) { return { 'component': function () { return { 'name': 'dx-dashboard-checked-button', 'params': { 'isSelected': $context.$data.isListMode, 'icon': 'dx-dashboard-fc-mode-list', 'click': $context.$data.setListMode } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('component: { name: \'dx-dashboard-checked-button\', params: { isSelected: !isListMode(), icon: \'dx-dashboard-fc-mode-tree\', click: setTreeMode } }', function ($context, $element) { return { 'component': function () { return { 'name': 'dx-dashboard-checked-button', 'params': { 'isSelected': !$context.$data.isListMode(), 'icon': 'dx-dashboard-fc-mode-tree', 'click': $context.$data.setTreeMode } }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTextBox: { value: searchString, valueChangeEvent: \'keyup\', showClearButton: true, placeholder: $root.getLocalizationById(\'DashboardWebStringId.Binding.Searching\'), disabled: !isSearchMode() }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.searchString, 'valueChangeEvent': 'keyup', 'showClearButton': true, 'placeholder': $context.$root.getLocalizationById('DashboardWebStringId.Binding.Searching'), 'disabled': !$context.$data.isSearchMode() }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxList: { items: searchResults, onItemClick: selectViaSearchResults, selectionMode: \'single\', selectedItems: [selectedSearchResult()], noDataText: $root.getLocalizationById(\'DashboardWebStringId.Binding.EmptySearchResult\'), }', function ($context, $element) { return { 'dxList': function () { return { 'items': $context.$data.searchResults, 'onItemClick': $context.$data.selectViaSearchResults, 'selectionMode': 'single', 'selectedItems': [$context.$data.selectedSearchResult()], 'noDataText': $context.$root.getLocalizationById('DashboardWebStringId.Binding.EmptySearchResult') }; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: {\'dx-has-path\': path.length > 0 }', function ($context, $element) { return { 'css': function () { return { 'dx-has-path': $context.$data.path.length > 0 }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: item.displayName, attr: { title: $root.ko.unwrap(item.displayName).length > 30 ? item.displayName : null }, css: {\'dx-dashboard-corrupted-calc-field\': item.isCorruptedCalcField }', function ($context, $element) { return { 'text': function () { return $context.$data.item.displayName; }, 'attr': function () { return { 'title': $context.$root.ko.unwrap($context.$data.item.displayName).length > 30 ? $context.$data.item.displayName : null }; }, 'css': function () { return { 'dx-dashboard-corrupted-calc-field': $context.$data.item.isCorruptedCalcField }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: path, attr: { title: path.length > 30 ? path : null }', function ($context, $element) { return { 'text': function () { return $context.$data.path; }, 'attr': function () { return { 'title': $context.$data.path.length > 30 ? $context.$data.path : null }; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-state-ready\': ready }, style: { left: $element.offsetWidth * index() + \'px\' }', function ($context, $element) { return { 'css': function () { return { 'dx-state-ready': $context.$data.ready }; }, 'style': function () { return { 'left': $element.offsetWidth * $context.$data.index() + 'px' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxList: { dataSource: items, pageLoadMode: \'scrollBottom\', onItemClick: itemClick, selectionMode: \'single\', selectedItemKeys: selectedItemName, keyExpr: \'name\', onInitialized: onInitialized, onContentReady: onContentReady, encodeNoDataText: true, noDataText: $root.getLocalizationById(\'DashboardStringId.FilterElementNoDataToDisplay\') }, css: { \'dx-hierarchical-field-chooser-list\' : !!ancestors }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.items, 'pageLoadMode': 'scrollBottom', 'onItemClick': $context.$data.itemClick, 'selectionMode': 'single', 'selectedItemKeys': $context.$data.selectedItemName, 'keyExpr': 'name', 'onInitialized': $context.$data.onInitialized, 'onContentReady': $context.$data.onContentReady, 'encodeNoDataText': true, 'noDataText': $context.$root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay') }; }, 'css': function () { return { 'dx-hierarchical-field-chooser-list': !!$context.$data.ancestors }; } }; });
analytics_widgets_internal_1.addToBindingsCache('attr: { title: displayName }, css: { \'dx-dashboard-has-children\': $root.ko.unwrap(isGroup) }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.displayName }; }, 'css': function () { return { 'dx-dashboard-has-children': $context.$root.ko.unwrap($context.$data.isGroup) }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: displayName, css: {\'dx-dashboard-corrupted-calc-field\': $data.isCorruptedCalcField }', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'css': function () { return { 'dx-dashboard-corrupted-calc-field': $context.$data.isCorruptedCalcField }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxLoadIndicator: { visible: loading }', function ($context, $element) { return { 'dxLoadIndicator': function () { return { 'visible': $context.$data.loading }; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTreeView: dataSourceTreeOptions', function ($context, $element) { return { 'dxTreeView': function () { return $context.$data.dataSourceTreeOptions; } }; });
analytics_widgets_internal_1.addToBindingsCache('css: { \'dx-field-chooser-group-list-item\': $data.isGroup }', function ($context, $element) { return { 'css': function () { return { 'dx-field-chooser-group-list-item': $context.$data.isGroup }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: displayName, attr: { title: $root.ko.unwrap(displayName).length > 20 ? displayName : null }, css: {\'dx-dashboard-corrupted-calc-field\': $data.isCorruptedCalcField }', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$root.ko.unwrap($context.$data.displayName).length > 20 ? $context.$data.displayName : null }; }, 'css': function () { return { 'dx-dashboard-corrupted-calc-field': $context.$data.isCorruptedCalcField }; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: isOlap || isCalcField', function ($context, $element) { return { 'if': function () { return $context.$data.isOlap || $context.$data.isCalcField; } }; });
analytics_widgets_internal_1.addToBindingsCache('attr: { title: $data.typeTooltip}, style: { cursor: $data.isList ? \'default\' : \'inherit\' }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.typeTooltip }; }, 'style': function () { return { 'cursor': $context.$data.isList ? 'default' : 'inherit' }; } }; });
analytics_widgets_internal_1.addToBindingsCache('xlinkHref: \'dx-dashboard-datatype-\' + $data.normalizedType', function ($context, $element) { return { 'xlinkHref': function () { return 'dx-dashboard-datatype-' + $context.$data.normalizedType; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: \'dx-field-chooser-header-area\'', function ($context, $element) { return { 'template': function () { return 'dx-field-chooser-header-area'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: hasSearchResults() && isSearchMode()', function ($context, $element) { return { 'if': function () { return $context.$data.hasSearchResults() && $context.$data.isSearchMode(); } }; });
analytics_widgets_internal_1.addToBindingsCache('template: \'dx-field-chooser-content-search-results\'', function ($context, $element) { return { 'template': function () { return 'dx-field-chooser-content-search-results'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: !$data.hasSearchResults || !$data.isListMode || (!hasSearchResults() && isListMode())', function ($context, $element) { return { 'if': function () { return !$context.$data.hasSearchResults || !$context.$data.isListMode || (!$context.$data.hasSearchResults() && $context.$data.isListMode()); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: !hasSearchResults() && !isListMode()', function ($context, $element) { return { 'if': function () { return !$context.$data.hasSearchResults() && !$context.$data.isListMode(); } }; });
analytics_widgets_internal_1.addToBindingsCache('template: \'dx-field-chooser-content-treeview\'', function ($context, $element) { return { 'template': function () { return 'dx-field-chooser-content-treeview'; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: "dx-dashboard-confirm-dialog", data: _inappropriateCalcFieldConfirmation }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-confirm-dialog', 'data': $context.$data._inappropriateCalcFieldConfirmation }; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: canAddCalculatedField', function ($context, $element) { return { 'if': function () { return $context.$data.canAddCalculatedField; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: hasGroups()', function ($context, $element) { return { 'if': function () { return $context.$data.hasGroups(); } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-field-chooser-field-type\', data: item }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-field-chooser-field-type', 'data': $context.$data.item }; } }; });
analytics_widgets_internal_1.addToBindingsCache('foreach: lists', function ($context, $element) { return { 'foreach': function () { return $context.$data.lists; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: { name: \'dx-slidable-lists-navigation-area\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-slidable-lists-navigation-area', 'data': $context.$data }; } }; });
analytics_widgets_internal_1.addToBindingsCache('template: \'dx-field-chooser-field-type\'', function ($context, $element) { return { 'template': function () { return 'dx-field-chooser-field-type'; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data.isOlapDimension', function ($context, $element) { return { 'if': function () { return $context.$data.isOlapDimension; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data.isOlapDimensionHierarchy', function ($context, $element) { return { 'if': function () { return $context.$data.isOlapDimensionHierarchy; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data.isOlapMeasure', function ($context, $element) { return { 'if': function () { return $context.$data.isOlapMeasure; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data.isCalcField', function ($context, $element) { return { 'if': function () { return $context.$data.isCalcField; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data.isAggregate', function ($context, $element) { return { 'if': function () { return $context.$data.isAggregate; } }; });
analytics_widgets_internal_1.addToBindingsCache('ifnot: $data.isAggregate', function ($context, $element) { return { 'ifnot': function () { return $context.$data.isAggregate; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: !$data.isCorruptedCalcField', function ($context, $element) { return { 'if': function () { return !$context.$data.isCorruptedCalcField; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: $data.isCorruptedCalcField', function ($context, $element) { return { 'if': function () { return $context.$data.isCorruptedCalcField; } }; });
analytics_widgets_internal_1.addToBindingsCache('dxTemplate : { name: \'item\' }', function () { return { dxTemplate: { name: 'item' } }; });
analytics_widgets_internal_1.addToBindingsCache('visible: !!ancestors', function ($context, $element) { return { 'visible': function () { return !!$context.$data.ancestors; } }; });
analytics_widgets_internal_1.addToBindingsCache('attr: { title: $data.map(function(el) { return $root.getLocalizationById(el); }).join(\'/\') }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.map(function (el) { return $context.$root.getLocalizationById(el); }).join('/') }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById($data), click: function(data) { var handler = $parents[3].backClick || $parents[1].backClick; handler(data, $parent); }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data); }, 'click': function () { return function (data) { var handler = $context.$parents[3].backClick || $context.$parents[1].backClick; handler(data, $context.$parent); }; } }; });
analytics_widgets_internal_1.addToBindingsCache('text: $root.getLocalizationById($data)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data); } }; });
analytics_widgets_internal_1.addToBindingsCache('with: ancestors', function ($context, $element) { return { 'with': function () { return $context.$data.ancestors; } }; });
analytics_widgets_internal_1.addToBindingsCache('if: ($index() !== ($parent.length - 1))', function ($context, $element) { return { 'if': function () { return ($context.$index() !== ($context.$parent.length - 1)); } }; });
analytics_widgets_internal_1.addToBindingsCache('if: ($index() === ($parent.length - 1))', function ($context, $element) { return { 'if': function () { return ($context.$index() === ($context.$parent.length - 1)); } }; });


/***/ }),

/***/ 88654:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.resources = void 0;
exports.resources = { "SvgResources": "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><symbol id=\"dx-dashboard-add-pane\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M17 6H5c-.6 0-1 .4-1 1v9c0 .6.4 1 1 1h12c.6 0 1-.4 1-1V7c0-.6-.4-1-1-1zm0 10H5V7h12v9zm-4-7h2v6h-2V9zm-3 2h2v4h-2v-4zm-3 2h2v2H7v-2z\"/><path class=\"dx-dashboard-green-icon\" d=\"M24 3h-3V0h-2v3h-3v2h3v3h2V5h3z\"/></symbol><symbol id=\"dx-dashboard-calc-field-add\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-green-icon\" d=\"M20 15h-3v-3h-2v3h-3v2h3v3h2v-3h3z\"/><path class=\"dx-dashboard-current-color-icon\" d=\"M9.5 6.3c-.1.2-.3 1.3-.6 2.7H6v2h2.5c-.4 2.3-.8 4.5-.8 4.5-.1.7-.3 1-.6 1-.1 0-.1 0-.2-.1-.1 0-.1-.1-.2-.2-.2-.2-.3-.4-.3-.4-.1-.1-.2-.1-.3-.2-.1 0-.2-.1-.3-.1-.2 0-.4.1-.6.3-.1.3-.2.5-.2.8 0 .4.2.7.5 1 .3.3.7.4 1.2.4s2.8.3 3.3-4c0 0 .3-1.5.5-3H13V9h-2.1c0-.4.1-.7.1-.9.4-2.5 2.3-2.2 3-2v-2s-3.3-.8-4.5 2.2z\"/></symbol><symbol id=\"dx-dashboard-calc-field-aggregate\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-current-color-icon\" d=\"M6.5 2.3c-.1.2-.3 1.3-.6 2.7H3v2h2.5c-.4 2.3-.8 4.5-.8 4.5-.1.7-.3 1-.6 1-.1 0-.1 0-.2-.1-.1 0-.1-.1-.2-.2-.2-.2-.3-.4-.3-.4-.1-.1-.2-.1-.3-.2-.1 0-.2-.1-.3-.1-.2 0-.4.1-.6.3-.1.3-.2.5-.2.8 0 .4.2.7.5 1 .3.3.7.4 1.2.4s2.8.3 3.3-4c0 0 .3-1.5.5-3H10V5H7.9c0-.4.1-.7.1-.9.4-2.5 2.3-2.2 3-2v-2S7.7-.7 6.5 2.3zM16 9H9.2c-.4 0-.7.5-.3.9l2.6 2.6-2.7 2.6c-.3.4-.1.9.4.9H16v-2h-3.3l1.1-1.1c.2-.2.2-.5 0-.7l-1-1.2H16V9z\"/></symbol><symbol id=\"dx-dashboard-calc-field-corrupted\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-yellow-icon\" d=\"M7.45 1.41c.3-.54.75-.54 1.05 0l6.37 11.62c.3.54.05.97-.5.97H1.64c-.6 0-.8-.43-.5-.97L7.45 1.41z\"/><path class=\"dx-dashboard-black-icon\" d=\"M7.02 5h2v4h-2V5zM9 10H7v2h2v-2z\"/></symbol><symbol id=\"dx-dashboard-calc-field\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-current-color-icon\" d=\"M6.5 3.3c-.1.2-.3 1.3-.6 2.7H3v2h2.5c-.4 2.3-.8 4.5-.8 4.5-.1.7-.3 1-.6 1-.1 0-.1 0-.2-.1-.1 0-.1-.1-.2-.2-.2-.2-.3-.4-.3-.4-.1-.1-.2-.1-.3-.2-.1 0-.2-.1-.3-.1-.2 0-.4.1-.6.3-.1.3-.2.5-.2.8 0 .4.2.7.5 1 .3.3.7.4 1.2.4s2.8.3 3.3-4c0 0 .3-1.5.5-3H10V6H7.9c0-.4.1-.7.1-.9.4-2.5 2.3-2.2 3-2v-2S7.7.3 6.5 3.3z\"/></symbol><symbol id=\"dx-dashboard-ce-add\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M19 11h-6V5h-2v6H5v2h6v6h2v-6h6z\"/></symbol><symbol id=\"dx-dashboard-ce-arrow-down\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M13 14V5h-2v9H7l5 5 5-5z\"/></symbol><symbol id=\"dx-dashboard-ce-arrow-up\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M13 10v9h-2v-9H7l5-5 5 5z\"/></symbol><symbol id=\"dx-dashboard-ce-edit\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M15 6l-9 9v3h3l9-9-3-3zm-7 8.9l5-4.9 1 1-5 5-1-1.1z\"/></symbol><symbol id=\"dx-dashboard-checkmark\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" fill=\"#7B7B7B\" d=\"M7 18l-5-5v3l5 5L22 6V3z\"/></symbol><symbol id=\"dx-dashboard-close\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M19 7h-3l-4 4-4-4H5l5.5 5.5L5 18h3l4-4 4 4h3l-5.5-5.5z\"/></symbol><symbol id=\"dx-dashboard-designer-menu-icon\" viewBox=\"-467 269 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M-465 274h20v2h-20zM-465 280h20v2h-20zM-465 286h20v2h-20z\"/></symbol><symbol id=\"dx-dashboard-drag\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-current-color-icon\" d=\"M5 7H3V5h2v2zm4-2H7v2h2V5zm4 0h-2v2h2V5zm0 4h-2v2h2V9zM9 9H7v2h2V9zM5 9H3v2h2V9z\"/></symbol><symbol id=\"dx-dashboard-ds-edit\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M14 6l-8 8.1V18h4l8-8-4-4zm2 4l-1.2 1.2-2-2L14 8l2 2zm-8 4l3.4-3.4 2 2L10 16l-2-2z\"/></symbol><symbol id=\"dx-dashboard-ds-embed\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M20 4h-4v2h3v12H5V6h3V4H4c-.6 0-1 .4-1 1v14c0 .6.4 1 1 1h16c.6 0 1-.4 1-1V5c0-.6-.4-1-1-1z\"/><path class=\"dx-dashboard-current-color-icon\" d=\"M20 4h-4v2h3v12H5V6h3V4H4c-.6 0-1 .4-1 1v14c0 .6.4 1 1 1h16c.6 0 1-.4 1-1V5c0-.6-.4-1-1-1z\"/><path class=\"dx-dashboard-current-color-icon\" d=\"M13 11V4h-2v7H7l5 5 5-5z\"/></symbol><symbol id=\"dx-dashboard-ds-link\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M8.5 18.5c-.4.4-1 .4-1.4 0l-1.6-1.6c-.4-.4-.4-1 0-1.4L10 11H7l-3.1 3.1c-1.2 1.2-1.2 3.1 0 4.2l1.8 1.8c1.2 1.2 3.1 1.2 4.2 0L13 17v-3l-4.5 4.5z\"/><path class=\"dx-dashboard-current-color-icon\" d=\"M8.5 18.5c-.4.4-1 .4-1.4 0l-1.6-1.6c-.4-.4-.4-1 0-1.4L10 11H7l-3.1 3.1c-1.2 1.2-1.2 3.1 0 4.2l1.8 1.8c1.2 1.2 3.1 1.2 4.2 0L13 17v-3l-4.5 4.5z\"/><path class=\"dx-dashboard-current-color-icon\" d=\"M8.04 14.97l7-7 .99.99-7 7z\"/><g><path class=\"dx-dashboard-current-color-icon\" d=\"M15.5 5.5c.4-.4 1-.4 1.4 0l1.6 1.6c.4.4.4 1 0 1.4L14 13h3l3.1-3.1c1.2-1.2 1.2-3.1 0-4.2l-1.8-1.8c-1.2-1.2-3.1-1.2-4.2 0L11 7v3l4.5-4.5z\"/><path class=\"dx-dashboard-current-color-icon\" d=\"M15.5 5.5c.4-.4 1-.4 1.4 0l1.6 1.6c.4.4.4 1 0 1.4L14 13h3l3.1-3.1c1.2-1.2 1.2-3.1 0-4.2l-1.8-1.8c-1.2-1.2-3.1-1.2-4.2 0L11 7v3l4.5-4.5z\"/></g></symbol><symbol id=\"dx-dashboard-ds-preview\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M12 7c-2.8 0-5 2.2-5 5s2.2 5 5 5 5-2.2 5-5-2.2-5-5-5zm0 8c-1.7 0-3-1.3-3-3s1.3-3 3-3c.2 0 .4 0 .6.1-.9.2-1.5 1-1.5 1.9 0 1.1.9 2 2 2 .9 0 1.7-.7 1.9-1.5 0 .2.1.3.1.5-.1 1.7-1.4 3-3.1 3z\"/><path class=\"dx-dashboard-current-color-icon\" d=\"M12 6c4.5 0 8.2 2.2 8.9 5H23c-.7-3.9-5.3-7-11-7S1.7 7.1 1 11h2.1c.7-2.8 4.4-5 8.9-5zM12 18c-4.5 0-8.2-2.2-8.9-5H1c.7 3.9 5.3 7 11 7s10.3-3.1 11-7h-2.1c-.7 2.8-4.4 5-8.9 5z\"/><g><path class=\"dx-dashboard-current-color-icon\" d=\"M12 6c4.5 0 8.2 2.2 8.9 5H23c-.7-3.9-5.3-7-11-7S1.7 7.1 1 11h2.1c.7-2.8 4.4-5 8.9-5zM12 18c-4.5 0-8.2-2.2-8.9-5H1c.7 3.9 5.3 7 11 7s10.3-3.1 11-7h-2.1c-.7 2.8-4.4 5-8.9 5z\"/></g></symbol><symbol id=\"dx-dashboard-fc-arrow-right\" viewBox=\"0 0 12 12\"><path class=\"dx-dashboard-current-color-icon\" d=\"M5 10l4-4-4-4z\"/></symbol><symbol id=\"dx-dashboard-fc-dropdown-icon\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-current-color-icon\" d=\"M4 6l4 4 4-4z\"/></symbol><symbol id=\"dx-dashboard-fc-mode-list\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M5 5h14v2H5zM5 9h14v2H5zM5 13h14v2H5zM5 17h14v2H5z\"/></symbol><symbol id=\"dx-dashboard-fc-mode-tree\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M11 9h8v2h-8V9zm0 8h8v2h-8v-2zM9 5h10v2H9V5zM5 5h2v2H5V5zm4 8h10v2H9v-2zm-4 0h2v2H5v-2z\"/></symbol><symbol id=\"dx-dashboard-fc-search\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M14 5c-2.8 0-5 2.2-5 5 0 1.1.4 2.2 1 3l-5 5 1 1 5-5c.8.6 1.9 1 3 1 2.8 0 5-2.2 5-5s-2.2-5-5-5zm0 8c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.3 3-3 3z\"/></symbol><symbol id=\"dx-dashboard-fc-treeview-collapse\" viewBox=\"0 0 13 13\"><path class=\"dx-dashboard-current-color-icon\" d=\"M10 6H7V3H6v3H3v1h3v3h1V7h3z\"/></symbol><symbol id=\"dx-dashboard-fc-treeview-expand\" viewBox=\"0 0 13 13\"><path class=\"dx-dashboard-current-color-icon\" d=\"M3 6h7v1H3z\"/></symbol><symbol id=\"dx-dashboard-item-data-source\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-accent-icon\" d=\"M14 10v3c0 1.1-2.7 2-6 2s-6-.9-6-2v-3c0 1.1 2.7 2 6 2s6-.9 6-2zM8 8c-3.3 0-6-.9-6-2v3c0 1.1 2.7 2 6 2s6-.9 6-2V6c0 1.1-2.7 2-6 2zm6-5v2c0 1.1-2.7 2-6 2s-6-.9-6-2V3c0-1.1 2.7-2 6-2s6 .9 6 2zm-1.1 0c-.5-.4-2.1-1-4.9-1s-4.4.6-4.9 1c.5.4 2.1 1 4.9 1s4.4-.6 4.9-1z\"/></symbol><symbol id=\"dx-dashboard-main-menu-close\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M22 4h-3l-7 7-7-7H2l8.5 8.5L2 21h3l7-7 7 7h3l-8.5-8.5z\"/></symbol><symbol id=\"dx-dashboard-olap-dimension-hierarchy\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-current-color-icon\" d=\"M6 0h4v4H6zM0 12h4v4H0zM6 12h4v4H6zM12 12h4v4h-4zM3 6h4v4H3zM9 6h4v4H9z\"/></symbol><symbol id=\"dx-dashboard-olap-dimension\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-current-color-icon\" d=\"M15 12l-4-3v2H5V5h2L4 1 1 5h2v8h8v2z\"/></symbol><symbol id=\"dx-dashboard-olap-measure\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-current-color-icon\" d=\"M15 1H1l7 7-7 7h14v-2H6l5-5-5-5h9z\"/></symbol><symbol id=\"dx-dashboard-remove-small\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-red-icon\" d=\"M11 5c-.6 0-1 .4-1 1v1h1V6h3v1h1V6c0-.6-.4-1-1-1h-3zm7 4H7V8c0-.6.4-1 1-1h9c.6 0 1 .4 1 1v1zM8 10v7c0 .6.4 1 1 1h7c.6 0 1-.4 1-1v-7H8zm3 6h-1v-4h1v4zm2 0h-1v-4h1v4zm2 0h-1v-4h1v4z\"/></symbol><symbol id=\"dx-dashboard-remove\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-red-icon\" d=\"M4 8v13c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V8H4zm5 11H7v-8h2v8zm4 0h-2v-8h2v8zm4 0h-2v-8h2v8zM20 5h-4V3c0-.6-.4-1-1-1H9c-.6 0-1 .4-1 1v2H4c-.5 0-1 .5-1 1v1h18V6c0-.5-.5-1-1-1zm-6 0h-4V4h4v1z\"/><g><path class=\"dx-dashboard-red-icon\" d=\"M4 8v13c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V8H4zm5 11H7v-8h2v8zm4 0h-2v-8h2v8zm4 0h-2v-8h2v8zM20 5h-4V3c0-.6-.4-1-1-1H9c-.6 0-1 .4-1 1v2H4c-.5 0-1 .5-1 1v1h18V6c0-.5-.5-1-1-1zm-6 0h-4V4h4v1z\"/></g></symbol><symbol id=\"dx-dashboard-rename\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M10.4 13.2l1.7-1.7L9.8 5H7.3L4 14h2.2l.6-2h3.3l.3 1.2zM7.5 10l1-3 1 3h-2zM17 8l-8 8v3h3l8-8-3-3zm-6 8l4-4 1 1-4 4-1-1z\"/></symbol><symbol id=\"dx-dashboard-template-to-all-cards\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M5 9v9h11V9H5zm9 7H7v-5h7v5z\"/><path class=\"dx-dashboard-current-color-icon\" d=\"M7 7v2h9v7h2V7z\" opacity=\".75\"/><path class=\"dx-dashboard-current-color-icon\" d=\"M9 5v2h9v7h2V5z\" opacity=\".5\"/></symbol><symbol id=\"dx-dashboard-textbox-search-clear\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" fill=\"#7B7B7B\" d=\"M12 5c-3.9 0-7 3.1-7 7s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7zm4 10h-2l-2-2-2 2H8l3-3-3-3h2l2 2 2-2h2l-3 3 3 3z\"/></symbol><symbol id=\"dx-dashboard-transparent-background\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M0 0h6v6H0zM12 0h6v6h-6zM6 6h6v6H6zM18 6h6v6h-6zM0 12h6v6H0zM12 12h6v6h-6zM6 18h6v6H6zM18 18h6v6h-6z\"/></symbol><symbol id=\"dx-dashboard-tree-connector\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-current-color-icon\" d=\"M2 2h1v10H2zM2 12h12v1H2z\"/></symbol><symbol id=\"dx-dashboard-arrow-left\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M19 11H8.9L14 6h-3l-6 6 6 6h3l-5.1-5H19z\"/></symbol><symbol id=\"dx-dashboard-group-types-full-list\" viewBox=\"0 0 24 24\"><circle class=\"dx-dashboard-current-color-icon\" cx=\"6\" cy=\"12\" r=\"2\"/><circle class=\"dx-dashboard-current-color-icon\" cx=\"12\" cy=\"12\" r=\"2\"/><circle class=\"dx-dashboard-current-color-icon\" cx=\"18\" cy=\"12\" r=\"2\"/></symbol><symbol id=\"dx-dashboard-back\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M19 11H8.9L14 6h-3l-6 6 6 6h3l-5.1-5H19z\"/></symbol><symbol id=\"dx-dashboard-clear-master-filter\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M20 5H4l7 7v8h2v-8z\"/><path class=\"dx-dashboard-red-icon\" d=\"M19 18l1.8-1.8c.3-.3.3-.7 0-1-.3-.3-.7-.3-1 0L18 17l-1.8-1.8c-.3-.3-.7-.3-1 0-.3.3-.3.7 0 1L17 18l-1.8 1.8c-.3.3-.3.7 0 1 .3.3.7.3 1 0L18 19l1.8 1.8c.3.3.7.3 1 0 .3-.3.3-.7 0-1L19 18z\"/></symbol><symbol id=\"dx-dashboard-clear-selection\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M19 4H8c-.6 0-1 .4-1 1v1h10c.6 0 1 .4 1 1v10h1c.6 0 1-.4 1-1V5c0-.6-.4-1-1-1z\" opacity=\".5\"/><path class=\"dx-dashboard-current-color-icon\" d=\"M16 7H5c-.6 0-1 .4-1 1v11c0 .6.4 1 1 1h11c.6 0 1-.4 1-1V8c0-.6-.4-1-1-1zm-1 11H6V9h9v9z\"/><path class=\"dx-dashboard-red-icon\" d=\"M11.3 13.5l1.5-1.5c.2-.2.2-.6 0-.8-.2-.2-.6-.2-.8 0l-1.5 1.5L9 11.2c-.2-.2-.6-.2-.8 0-.2.2-.2.6 0 .8l1.5 1.5L8.2 15c-.2.2-.2.6 0 .8.2.2.6.2.8 0l1.5-1.5 1.5 1.5c.2.2.6.2.8 0 .2-.2.2-.6 0-.8l-1.5-1.5z\"/></symbol><symbol id=\"dx-dashboard-content-selection\" viewBox=\"0 0 24 24\"><g class=\"st0\"><path class=\"dx-dashboard-current-color-icon\" d=\"M21 14l-9 6-9-6 9-6z\"/></g><path class=\"dx-dashboard-current-color-icon\" d=\"M21 10l-9 6-9-6 9-6z\"/></symbol><symbol id=\"dx-dashboard-data-inspector\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M9.7 11H4V9h7.1c-.6.6-1.1 1.3-1.4 2zM17 7V5H4v2h13zm-8 7c0-.3 0-.7.1-1H4v2h5.1c-.1-.3-.1-.7-.1-1zm7-5c-2.8 0-5 2.2-5 5 0 .9.2 1.7.6 2.4l-3.2 3.2c-.6.6-.6 1.4 0 2 .6.6 1.4.6 2 0l3.2-3.2c.7.4 1.5.6 2.4.6 2.8 0 5-2.2 5-5s-2.2-5-5-5zm0 8c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.3 3-3 3z\"/></symbol><symbol id=\"dx-dashboard-data-reduced\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-yellow-icon\" d=\"M12 3c-5 0-9 4-9 9s4 9 9 9 9-4 9-9-4-9-9-9zm0 16c-3.9 0-7-3.1-7-7s3.1-7 7-7 7 3.1 7 7-3.1 7-7 7z\"/><path class=\"dx-dashboard-yellow-icon\" d=\"M12 14c-.6 0-1-.4-1-1V8c0-.6.4-1 1-1s1 .4 1 1v5c0 .6-.4 1-1 1zM12 17c-.6 0-1-.4-1-1s.4-1 1-1 1 .4 1 1-.4 1-1 1z\"/></symbol><symbol id=\"dx-dashboard-drill-up\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M11 5V2L5 7l6 5V9h1c1.7 0 4 1 4 3 0 5-3 8-3 8s6-3 6-9c0-4-3-6-7-6h-1z\"/></symbol><symbol id=\"dx-dashboard-export-to-excel\" viewBox=\"0 0 48 48\"><path class=\"dx-dashboard-green-icon\" d=\"M42.7 8.4H28.4v3h3.9v3.7h-3.9v1.6h3.9v3.7h-3.9V22h3.9v3.7h-3.9v1.6h3.9V31h-3.9v1.6h3.9v3.7h-3.9v3.1h14.2c.7 0 1.3-.6 1.3-1.3V9.7c.1-.7-.5-1.3-1.2-1.3zm-2.3 27.7h-6.6v-3.7h6.6v3.7zm0-5.2h-6.6v-3.7h6.6v3.7zm0-5.3h-6.6v-3.7h6.6v3.7zm0-5.3h-6.6v-3.7h6.6v3.7zm0-5.2h-6.6v-3.7h6.6v3.7zM4 8.4v30.8L27.3 44V4L4 8.4zm13.8 23.7l-2.5-6.2-2.4 5.9-3-.2 3.7-7.4-3.4-7.2 3.1-.2 2.1 5.7 2.3-6 3.3-.2-3.9 7.8 4.1 8.2-3.4-.2z\"/></symbol><symbol id=\"dx-dashboard-export-to-image\" viewBox=\"0 0 48 48\"><path class=\"dx-dashboard-current-color-icon\" d=\"M5 5v38h38V5H5zm36 36H7V7h34v34z\" opacity=\".5\"/><path class=\"dx-dashboard-green-icon\" d=\"M8 40h32V25l-12 5-10-10-10 5z\"/><circle class=\"dx-dashboard-yellow-icon\" cx=\"32\" cy=\"16\" r=\"5\"/></symbol><symbol id=\"dx-dashboard-export-to-pdf\" viewBox=\"0 0 48 48\"><path class=\"dx-dashboard-red-icon\" d=\"M39.1 27.7c-1.8 0-4 .1-6.3.5-1-.6-2.1-1.2-2.9-2-2.2-2.1-4.1-5-5.3-8.1.1-.3.1-.5.2-.8.3-1.5.6-6.3.6-6.5v-.2c.1-.3.5-1.9.4-2.9-.2-.9-.9-2.7-2.6-2.7h-.6c-1.2 0-2.2.6-2.5 1.5-.8 2.8 0 7 1.5 12.5l-.4.9c-1 2.5-2.3 5-3.4 7.2l-.2.3C16.3 30 15.1 32.2 14 34c-.2-.2-.4-.2-.6-.1-.1 0-1.8 1-2.2 1.2-3.5 2.1-5.8 4.4-6.2 6.3-.1.6 0 1.4.6 1.8l1 .5c.5.2 1 .3 1.4.3 2.5 0 5.4-3.1 9.3-9.9 4.5-1.5 9.7-2.7 14.2-3.4 4.2 2.3 9.4 3.8 11.7 3.1.5-.1 1-.5 1.3-.9.2-.3.4-1.1.4-1.4v-.2s.1-.6.1-.9c-.1-.6-.3-1.2-.7-1.6-.8-.6-2.5-1.1-5.2-1.1zm-2.4 2.4c2.6-.2 4.6-.1 5.7.3 1.3.4 1.5.8 1.6.8v.1c-.1.2-.3.3-.4.4-.9.3-3.6-.2-6.9-1.6zM24.3 10.3V10.6c-.1.3-.6 2.3-.9 3.5-.4-1.8-.6-3.5-.6-4.9 0-.5 0-1.5.2-2.3 0-.2.1-.3.1-.4.2.2.5.6.8 1.4.4.8.4 1.7.4 2.4zm-4.1 18.4c1.4-2.6 2.3-4.7 3-6.4 1.3 2.4 3 4.4 4.9 6 .2.2.4.4.7.5-3.9.8-7.2 1.7-10.2 2.8.5-.9 1-1.9 1.6-2.9zM13 35.8c-2.5 3.9-4.2 5.6-5.4 6.2.5-1.2 2.3-3.6 4.8-5.6.1-.2.3-.4.6-.6z\"/><path class=\"dx-dashboard-red-icon\" d=\"M31.5 15.5h.6c.7 0 1.3-.2 1.7-.7.4-.5.7-1.1.7-1.8 0-.8-.2-1.4-.6-1.8-.4-.4-1-.6-1.7-.6H30v7.6h1.5v-2.7zm0-3.7h.5c.3 0 .5.1.7.3s.3.5.3.9c0 .8-.3 1.2-1 1.2h-.5v-2.4zM39.7 17c.5-.7.8-1.6.8-2.8 0-2.5-1.1-3.7-3.1-3.7h-2v7.6h2c1 0 1.7-.4 2.3-1.1zm-2.9-5.2h.6c.5 0 .9.2 1.2.7.3.4.4 1 .4 1.8s-.1 1.4-.4 1.9c-.3.5-.7.7-1.2.7h-.6v-5.1zM45 11.8v-1.3h-3.5v7.6H43v-3h1.8v-1.3H43v-2z\"/></symbol><symbol id=\"dx-dashboard-export\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M19 8h-4v2h3v8H6v-8h3V8H5c-.6 0-1 .4-1 1v10c0 .6.4 1 1 1h14c.6 0 1-.4 1-1V9c0-.6-.4-1-1-1zm-8-2v7h2V6h3l-4-4-4 4h3z\"/></symbol><symbol id=\"dx-dashboard-filter\"><path d=\"M17 1H1l7 8v8l2-1V9l7-8z\" class=\"dx-dashboard-accent-icon\"/></symbol><symbol id=\"dx-dashboard-filters\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M20 5H4l7 7v8h2v-8z\"/></symbol><symbol id=\"dx-dashboard-map-initial-extent\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M14.5 4C11.5 4 9 6.5 9 9.5c0 1 .3 1.9.7 2.8l-5.3 5.3c-.6.6-.6 1.4 0 2 .6.6 1.4.6 2 0l5.3-5.3c.8.5 1.7.7 2.8.7 3 0 5.5-2.5 5.5-5.5S17.5 4 14.5 4zm0 9c-1.9 0-3.5-1.6-3.5-3.5S12.6 6 14.5 6 18 7.6 18 9.5 16.4 13 14.5 13z\"/><circle class=\"dx-dashboard-current-color-icon\" cx=\"14.5\" cy=\"9.5\" r=\"1.5\"/></symbol><symbol id=\"dx-dashboard-maximize-item\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M10 5H5v5l2-2 2 2 1-1-2-2 2-2zM19 10V5h-5l2 2-2 2 1 1 2-2 2 2zM14 19h5v-5l-2 2-2-2-1 1 2 2-2 2zM5 14v5h5l-2-2 2-2-1-1-2 2-2-2z\"/></symbol><symbol id=\"dx-dashboard-open-tab-pages\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M8 12c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm4-2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"/></symbol><symbol id=\"dx-dashboard-parameters\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M6 12c-1.7 0-3 1.3-3 3s1.3 3 3 3 3-1.3 3-3-1.3-3-3-3zm0 4c-.6 0-1-.4-1-1s.4-1 1-1 1 .4 1 1-.4 1-1 1zM12 6c-1.7 0-3 1.3-3 3s1.3 3 3 3 3-1.3 3-3-1.3-3-3-3zm0 4c-.6 0-1-.4-1-1s.4-1 1-1 1 .4 1 1-.4 1-1 1z\"/><g opacity=\".5\"><path class=\"dx-dashboard-current-color-icon\" d=\"M6 12c.4 0 .7.1 1 .2V5c0-.6-.4-1-1-1s-1 .4-1 1v7.2c.3-.1.6-.2 1-.2zM6 18c-.4 0-.7-.1-1-.2V19c0 .6.4 1 1 1s1-.4 1-1v-1.2c-.3.1-.6.2-1 .2zM12 6c.4 0 .7.1 1 .2V5c0-.6-.4-1-1-1s-1 .4-1 1v1.2c.3-.1.6-.2 1-.2zM12 12c-.4 0-.7-.1-1-.2V19c0 .6.4 1 1 1s1-.4 1-1v-7.2c-.3.1-.6.2-1 .2zM18 17c-.4 0-.7-.1-1-.2V19c0 .6.4 1 1 1s1-.4 1-1v-2.2c-.3.1-.6.2-1 .2zM18 11c.4 0 .7.1 1 .2V5c0-.6-.4-1-1-1s-1 .4-1 1v6.2c.3-.1.6-.2 1-.2z\"/></g><path class=\"dx-dashboard-current-color-icon\" d=\"M18 11c-1.7 0-3 1.3-3 3s1.3 3 3 3 3-1.3 3-3-1.3-3-3-3zm0 4c-.6 0-1-.4-1-1s.4-1 1-1 1 .4 1 1-.4 1-1 1z\"/></symbol><symbol id=\"dx-dashboard-range-time-periods\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M16 13.2l6-2.2-8-3v10h-4V3L2 6l6 2.2V18H4v2h16v-2h-4z\"/></symbol><symbol id=\"dx-dashboard-restore-item\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-red-icon\" d=\"M19 14h-5v5l2-2 2 2 1-1-2-2 2-2zM10 19v-5H5l2 2-2 2 1 1 2-2 2 2zM5 10h5V5L8 7 6 5 5 6l2 2-2 2zM14 5v5h5l-2-2 2-2-1-1-2 2-2-2z\"/></symbol><symbol id=\"dx-dashboard-toggle-multiselection\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M19 4H8c-.6 0-1 .4-1 1v1h10c.6 0 1 .4 1 1v10h1c.6 0 1-.4 1-1V5c0-.6-.4-1-1-1z\" opacity=\".5\"/><path class=\"dx-dashboard-current-color-icon\" d=\"M16 7H5c-.6 0-1 .4-1 1v11c0 .6.4 1 1 1h11c.6 0 1-.4 1-1V8c0-.6-.4-1-1-1zm-1 11H6V9h9v9z\"/><path class=\"dx-dashboard-current-color-icon\" d=\"M9.1 16.8c.3.3.8.3 1-.1L14 10c-.7 0-1.3.4-1.6 1l-2.7 4L8 13.7c-.2-.2-.6-.2-.8.1-.2.2-.2.5-.1.7l2 2.3z\"/></symbol><symbol id=\"dx-dashboard-datatype-boolean\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-yellow-icon\" d=\"M10.6 6.4h-.5v1.5h.5c.7 0 1.1-.2 1.1-.7-.1-.7-.5-.8-1.1-.8zM5.3 6.3c-.7 0-1.1.4-1.1 1.9s.5 2 1.1 2c.7 0 1.1-.5 1.1-1.9 0-1.5-.5-2-1.1-2z\"/><path class=\"dx-dashboard-yellow-icon\" d=\"M15 1H1c-.5 0-1 .5-1 1v12c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zM5.2 11.1c-1.4 0-2.2-.8-2.2-2.8 0-2 .9-2.8 2.4-2.8s2.3.7 2.3 2.7c-.1 1.9-1 2.9-2.5 2.9zm8-.1h-1.4l-.9-2c0-.1-.2-.3-.3-.3h-.5V10c.3.1.6.2.7.3v.7H8.6l-.1-.7c.1-.1.2-.2.4-.3V6.4c-.1-.1-.3-.1-.4-.3l.1-.7h2c1.4 0 2.2.3 2.2 1.6 0 .8-.6 1.2-1.2 1.5.2.1.4.2.5.4l.6 1.1c.2.1.4.2.5.3v.7z\"/></symbol><symbol id=\"dx-dashboard-datatype-custom\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-accent-icon\" d=\"M8.6 8.2c0 1.5-.1 2.1-.8 2.1-.7 0-.8-.6-.8-2.1 0-1.4.1-2 .8-2 .7 0 .8.6.8 2zM16 2v12c0 .5-.5 1-1 1H1c-.5 0-1-.5-1-1V2c0-.5.5-1 1-1h14c.5 0 1 .5 1 1zM4.6 10.4c0-.1-.2-.2-.4-.3V5.5c-.7 0-1.4.1-1.9.3v.5c.2.1.5.2.7.2V10c-.2.1-.5.2-.6.3l.1.7h2.1v-.6zm5.1-2.2c0-2-.5-2.7-1.9-2.7s-2 .8-2 2.8.5 2.8 1.9 2.8c1.5 0 2.1-1 2-2.9zm3.7 2.2c0-.1-.2-.2-.4-.3V5.5c-.7 0-1.4.1-1.9.3v.5c.2.1.5.2.7.2V10c-.2.1-.5.2-.6.3l.1.7h2.1v-.6z\"/></symbol><symbol id=\"dx-dashboard-datatype-datetime\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-green-icon\" d=\"M15 1H1c-.5 0-1 .5-1 1v12c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zM8 12c-2.2 0-4-1.8-4-4s1.8-4 4-4 4 1.8 4 4-1.8 4-4 4z\"/><path class=\"dx-dashboard-green-icon\" d=\"M8 6H7v3h3V8H8z\"/></symbol><symbol id=\"dx-dashboard-datatype-float\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-accent-icon\" d=\"M15 1H1c-.5 0-1 .5-1 1v12c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zM3.4 11.1c-.4 0-.7-.1-.7-.6.1-.5.3-.6.7-.6.4 0 .7.2.7.6 0 .4-.3.6-.7.6zm5.4-.1H5.2L5 10l2-2.2c.3-.3.6-.7.6-1.2 0-.4-.2-.6-.6-.6-.2 0-.5 0-.7.1-.1.4-.2.8-.3.9h-.7c-.1-.2-.1-.6-.1-.9v-.2c.4-.3 1.1-.5 1.8-.5.9 0 1.7.2 1.7 1.4 0 .4-.3.9-.5 1.2L7 9.4c-.3.3-.8.7-.8.7v.1s.4-.1.8-.1h.6c0-.3.1-.6.2-.7h.8c.3.4.3 1.2.2 1.6zm2.3.1c-.5 0-1.1-.2-1.4-.3l.3-.8c.3.1.6.2 1 .2.7 0 1.1-.3 1.1-.9 0-.9-.5-1-.9-1s-.7.1-.9.1l-.3-.6V5.5h3v.9h-2v1.1h.7c1 0 1.7.5 1.7 1.7-.1 1.3-1 1.9-2.3 1.9z\"/></symbol><symbol id=\"dx-dashboard-datatype-integer\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-accent-icon\" d=\"M15 1H1c-.5 0-1 .5-1 1v12c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zM6.7 11H4.6l-.1-.7c.1-.1.4-.2.6-.3V6.5c-.1 0-.4 0-.6-.1v-.6c.5-.3 1.2-.4 1.8-.3v4.6c.2.1.4.2.4.3v.6zm4.8 0H7.8l-.2-1 2-2.2c.3-.3.6-.7.6-1.2 0-.4-.2-.6-.6-.6-.2 0-.5 0-.7.1 0 .3-.1.6-.2.8L8 7c-.1-.2-.2-.6-.2-.9v-.2c.4-.3 1.1-.5 1.8-.5.9 0 1.7.2 1.7 1.4 0 .4-.3.9-.5 1.2L9.7 9.4c-.3.3-.8.7-.8.7v.1s.4-.1.8-.1h.6c0-.3.1-.6.2-.7h.8c.2.4.3 1.2.2 1.6z\"/></symbol><symbol id=\"dx-dashboard-datatype-list\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-current-color-icon\" d=\"M0 1v14h16V1H0zm15 13H1V2h14v12z\"/><path class=\"dx-dashboard-red-icon\" d=\"M9.05 8l1.84-1.84c.15-.15.15-.38 0-.53l-.52-.52a.357.357 0 00-.52 0L8 6.95 6.16 5.11a.357.357 0 00-.52 0l-.53.53c-.15.15-.15.38 0 .53L6.95 8 5.11 9.84c-.15.15-.15.38 0 .52l.52.52c.15.15.38.15.53 0L8 9.05l1.84 1.84c.15.15.38.15.52 0l.52-.52c.15-.15.15-.38 0-.53L9.05 8z\"/></symbol><symbol id=\"dx-dashboard-datatype-string\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-red-icon\" d=\"M4.5 9.6c0 .3.2.5.5.5.4 0 .6-.2.7-.3v-.7h-.5c-.5 0-.7.2-.7.5zM10.7 7.4c-.4 0-.7.1-.9.3V10c.3.1.5.2.7.2.6 0 .9-.6.9-1.4 0-1.1-.2-1.4-.7-1.4z\"/><path class=\"dx-dashboard-red-icon\" d=\"M15 1H1c-.5 0-1 .5-1 1v12c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zm-7.4 9.9s-.5.2-1.3.2c0 0-.1-.2-.2-.6-.2.2-.5.6-1.4.6-.8 0-1.5-.5-1.5-1.3 0-.7.5-1.3 1.6-1.3h1V8c0-.5-.2-.7-.7-.7-.2 0-.3 0-.5.1 0 .2-.1.5-.1.6h-.9c-.1-.3-.2-.7-.1-1.1.4-.2 1.2-.5 1.9-.5 1.1 0 1.7.4 1.7 1.6v1.9c.2 0 .4.1.5.2v.8zm3 .2c-.4 0-.9-.1-1.2-.3-.1.1-.2.2-.4.2h-.4V5.6c-.2-.1-.4-.2-.5-.3l.1-.7c.5-.1 1.2-.1 1.7-.1v2.3c.2-.2.7-.3 1.1-.3 1.3 0 1.8.6 1.8 2.2-.1 1.8-1.2 2.4-2.2 2.4z\"/></symbol><symbol id=\"dx-dashboard-convert\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M17 12V9H3V5h14V2l5 5z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M7 12v3h14v4H7v3l-5-5z\"/></symbol><symbol id=\"dx-dashboard-interactivity\" viewBox=\"-467 269 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M-446 279h-6v-7c0-.6-.4-1-1-1h-11c-.6 0-1 .4-1 1v10c0 .6.4 1 1 1h6v7c0 .6.4 1 1 1h11c.6 0 1-.4 1-1v-10c0-.6-.4-1-1-1zm-17 2v-8h9v8h-9zm16 8h-9v-6h3c.6 0 1-.4 1-1v-1h5v8z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M-447 273l2-2h-6v6l2-2 3 3 2-2zM-461 287l-3-3-2 2 3 3-2 2h6v-6z\"/></symbol><symbol id=\"dx-dashboard-item-filter\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M23 3H1l9 9v10h4V12z\"/></symbol><symbol id=\"dx-dashboard-item-menu-collapse\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-grey-icon\" d=\"M7 13l5-5 5 5v3l-5-5-5 5s.1-3 0-3z\"/></symbol><symbol id=\"dx-dashboard-item-options\" viewBox=\"-467 269 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M-456.8 288.9l.3 3.1h3.1l.3-3.1c.9-.2 1.8-.6 2.5-1.1l2.4 1.9 2-2-2-2.4c.5-.8.9-1.6 1.1-2.5l3.1-.3v-3.1l-3.1-.3c-.2-.9-.6-1.8-1.1-2.5l1.9-2.4-2-2-2.4 2c-.8-.5-1.6-.9-2.5-1.1l-.3-3.1h-3.1l-.3 3.1c-.9.2-1.8.6-2.5 1.1l-2.4-1.9-2 2 2 2.4c-.5.8-.9 1.6-1.1 2.5l-3.1.3v3.1l3.1.3c.2.9.6 1.8 1.1 2.5l-1.9 2.4 2 2 2.4-2c.7.6 1.6.9 2.5 1.1zm-4.2-7.9c0-3.3 2.7-6 6-6s6 2.7 6 6-2.7 6-6 6-6-2.7-6-6z\"/></symbol><symbol id=\"dx-dashboard-properties\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-current-color-icon\" d=\"M17.8 10.2c-1.1 1.1-2.9 1.1-4 0s-1.1-2.9 0-4l3.7-3.7c-.8-.3-1.6-.5-2.5-.5-3.9 0-7 3.1-7 7 0 1.2.3 2.3.8 3.2l-6.2 6.2c-.8.8-.8 2.2 0 3s2.2.8 3 0l6.2-6.2c1 .5 2.1.8 3.2.8 3.9 0 7-3.1 7-7 0-.9-.2-1.7-.5-2.5l-3.7 3.7z\"/></symbol><symbol id=\"dx-dashboard-redo\" viewBox=\"4 -4 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M25 10l-1-9-3 3c-2.3-2.3-4.4-3-7-3-4 0-7 2.7-7 7 0 4 2 7 2 7l2-2c-.3-.7-.9-2.1-1-4-.2-3.4 1.4-5 4-5 3 0 5 2 5 2l-3 3 9 1z\"/></symbol><symbol id=\"dx-dashboard-undo\" viewBox=\"4 -4 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M18 1c-2.6 0-4.7.7-7 3L8 1l-1 9 9-1-3-3s2-2 5-2c2.6 0 4.2 1.6 4 5-.1 1.9-.8 3.3-1 4l2 2s2-3 2-7c0-4.3-3-7-7-7z\"/></symbol><symbol id=\"dx-dashboard-toolbox-boundImage\" viewBox=\"0 0 24 24\"><circle class=\"dx-dashboard-contrast-icon\" cx=\"7.5\" cy=\"9.5\" r=\"1.5\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M9 12l-3 4h3l1.4-2.1zM14 10l-4 6h8z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M20.5 8c-1.5 0-2.8-.4-3.3-1-.1.2-.2.3-.2.5v1c0 .8 1.6 1.5 3.5 1.5S24 9.3 24 8.5v-1c0-.2-.1-.3-.2-.5-.5.6-1.8 1-3.3 1zM20.5 5c-1.5 0-2.8-.4-3.3-1-.1.2-.2.3-.2.5v1c0 .8 1.6 1.5 3.5 1.5S24 6.3 24 5.5v-1c0-.2-.1-.3-.2-.5-.5.6-1.8 1-3.3 1z\"/><ellipse class=\"dx-dashboard-accent-icon\" cx=\"20.5\" cy=\"2.5\" rx=\"3.5\" ry=\"1.5\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M21 12v8H3V4h12V3c0-.4.1-.7.3-1H2c-.5 0-1 .5-1 1v18c0 .6.4 1 1 1h20c.5 0 1-.5 1-1v-9.5c-.6.3-1.3.4-2 .5z\"/></symbol><symbol id=\"dx-dashboard-toolbox-bubbleMap\" viewBox=\"4 -4 24 24\"><circle class=\"dx-dashboard-accent-icon\" cx=\"12\" cy=\"11\" r=\"6\"/><circle class=\"dx-dashboard-contrast-icon\" cx=\"22\" cy=\"6\" r=\"4\"/><circle class=\"dx-dashboard-current-color-icon\" cx=\"13.5\" cy=\"1.5\" r=\"2.5\"/></symbol><symbol id=\"dx-dashboard-toolbox-card\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M22 2H5c-.6 0-1 .4-1 1v2H2c-.6 0-1 .4-1 1v15c0 .6.4 1 1 1h17c.6 0 1-.4 1-1v-2h2c.6 0 1-.4 1-1V3c0-.6-.4-1-1-1zm-4 18H3V7h15v13zm-7-8H5v-2h6v2zm5 5H5v-2h11v2z\"/></symbol><symbol id=\"dx-dashboard-toolbox-chart\" viewBox=\"4 -4 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M26 17h-3c-.6 0-1-.4-1-1V7c0-.6.4-1 1-1h3c.6 0 1 .4 1 1v9c0 .6-.4 1-1 1z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M9 17H6c-.6 0-1-.4-1-1v-5c0-.6.4-1 1-1h3c.6 0 1 .4 1 1v5c0 .6-.4 1-1 1zM21 17h-3c-.6 0-1-.4-1-1V0c0-.6.4-1 1-1h3c.6 0 1 .4 1 1v16c0 .6-.4 1-1 1z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M14 17h-3c-.6 0-1-.4-1-1V4c0-.6.4-1 1-1h3c.6 0 1 .4 1 1v12c0 .6-.4 1-1 1z\"/></symbol><symbol id=\"dx-dashboard-toolbox-choroplethMap\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M20.9 2h-9.8c-.6 0-1.1.5-1.1 1.1V8h5v6h5.9c.6 0 1.1-.5 1.1-1.1V3.1c0-.6-.5-1.1-1.1-1.1z\"/><path class=\"dx-dashboard-current-color-icon\" d=\"M16.9 6H7.1C6.5 6 6 6.5 6 7.1V12h6v6h4.9c.6 0 1.1-.5 1.1-1.1V7.1c0-.6-.5-1.1-1.1-1.1z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M12.9 22H3.1c-.6 0-1.1-.5-1.1-1.1v-9.8c0-.6.5-1.1 1.1-1.1h9.8c.6 0 1.1.5 1.1 1.1v9.8c0 .6-.5 1.1-1.1 1.1z\"/></symbol><symbol id=\"dx-dashboard-toolbox-comboBox\" viewBox=\"4 -4 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M26 1H6c-.6 0-1 .4-1 1v12c0 .6.4 1 1 1h20c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1zm-1 12H7V3h18v10z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M16 4v8h8V4h-8zm4 6l-3-3h6l-3 3z\"/></symbol><symbol id=\"dx-dashboard-toolbox-dateFilter\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M9 14H5v-4h4v4zm5-4h-4v4h4v-4zm-5 5H5v4h4v-4zm5 0h-4v4h4v-4zm8-12h-2v2c0 .5-.5 1-1 1h-2c-.5 0-1-.5-1-1V3H8v2c0 .5-.5 1-1 1H5c-.5 0-1-.5-1-1V3H2c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h20c.5 0 1-.5 1-1V4c0-.5-.5-1-1-1zm-1 18H3V8h18v13zM7 5H5V1h2v4zm12-4h-2v4h2V1z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M19 14h-4v-4h4v4zm0 1h-4v4h4v-4z\"/></symbol><symbol id=\"dx-dashboard-toolbox-gauge\" viewBox=\"4 -4 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M16-3C9.9-3 5 1.9 5 8s4.9 11 11 11 11-4.9 11-11S22.1-3 16-3zm0 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M16 6c-.3 0-.6.1-.8.2L11 2l-1 1 4.2 4.2c-.1.2-.2.5-.2.8 0 1.1.9 2 2 2s2-.9 2-2-.9-2-2-2z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M9 8c0 1.9.8 3.7 2.1 4.9l1.4-1.4C11.6 10.6 11 9.4 11 8c0-.6.1-1.2.3-1.7L9.8 4.8c-.5.9-.8 2-.8 3.2zM16 1c-1.2 0-2.3.3-3.2.8l1.5 1.5c.5-.2 1.1-.3 1.7-.3 1.4 0 2.6.6 3.5 1.5l1.4-1.4C19.7 1.8 17.9 1 16 1z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M20.9 3.1l-1.4 1.4c.9.9 1.5 2.1 1.5 3.5s-.6 2.6-1.5 3.5l1.4 1.4c1.3-1.3 2.1-3 2.1-4.9 0-1.9-.8-3.7-2.1-4.9z\"/></symbol><symbol id=\"dx-dashboard-toolbox-geoPointMap\" viewBox=\"4 -4 24 24\"><circle class=\"dx-dashboard-contrast-icon\" cx=\"19\" cy=\"13\" r=\"3\"/><circle class=\"dx-dashboard-contrast-icon\" cx=\"20\" cy=\"3\" r=\"3\"/><circle class=\"dx-dashboard-contrast-icon\" cx=\"12\" cy=\"8\" r=\"3\"/></symbol><symbol id=\"dx-dashboard-toolbox-grid\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M5 5h4v4H5V5zm5 0h4v4h-4V5zm5 0h4v4h-4V5zM5 10h4v4H5v-4zm5 0h4v4h-4v-4zm5 0h4v4h-4v-4zM5 15h4v4H5v-4zm5 0h4v4h-4v-4zm5 0h4v4h-4v-4zm8-13c0-.6-.4-1-1-1H2c-.6 0-1 .4-1 1v20c0 .6.4 1 1 1h20c.6 0 1-.4 1-1V2zm-2 19H3V3h18v18z\"/></symbol><symbol id=\"dx-dashboard-toolbox-group\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M22 1H2c-.6 0-1 .4-1 1v20c0 .6.4 1 1 1h20c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1zm-1 20H3V3h18v18zM6 19h9c.6 0 1-.4 1-1v-2h2c.6 0 1-.4 1-1V6c0-.6-.4-1-1-1H9c-.6 0-1 .4-1 1v2H6c-.6 0-1 .4-1 1v9c0 .6.4 1 1 1zm1-9h7v7H7v-7z\"/></symbol><symbol id=\"dx-dashboard-toolbox-image\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M22 2H2c-.5 0-1 .5-1 1v18c0 .6.4 1 1 1h20c.5 0 1-.5 1-1V3c0-.6-.4-1-1-1zm-1 18H3V4h18v16zM7.5 8C8.3 8 9 8.7 9 9.5S8.3 11 7.5 11 6 10.3 6 9.5 6.7 8 7.5 8zM9 12l-3 4h3l1.4-2.1L9 12zm5-2l-4 6h8l-4-6z\"/></symbol><symbol id=\"dx-dashboard-toolbox-listBox\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M10 7h8v2h-8V7zM6 7h2v2H6V7zm4 4h8v2h-8v-2zm-4 0h2v2H6v-2zm4 4h8v2h-8v-2zm-4 0h2v2H6v-2zM21 1H3c-.6 0-1 .4-1 1v20c0 .6.4 1 1 1h18c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1zm-1 20H4V3h16v18z\"/></symbol><symbol id=\"dx-dashboard-toolbox-pie\" viewBox=\"4 -4 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M5 7h10V-3C9.5-3 5 1.5 5 7z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M17-1V9H7c0 5.5 4.5 10 10 10s10-4.5 10-10S22.5-1 17-1z\"/></symbol><symbol id=\"dx-dashboard-toolbox-pieMap\" viewBox=\"0 0 24 24\"><circle class=\"dx-dashboard-contrast-icon\" cx=\"18\" cy=\"10\" r=\"4\"/><circle class=\"dx-dashboard-contrast-icon\" cx=\"9.5\" cy=\"5.5\" r=\"2.5\"/><path class=\"dx-dashboard-accent-icon\" d=\"M8 9v6l-4.2 4.2C4.8 20.3 6.3 21 8 21c3.3 0 6-2.7 6-6s-2.7-6-6-6z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M8 9c-3.3 0-6 2.7-6 6 0 .8.2 1.6.5 2.3.2.4.3.7.6 1 .2.3.5.6.7.9L8 15V9z\"/></symbol><symbol id=\"dx-dashboard-toolbox-pivot\" viewBox=\"4 -4 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M27-3H5L16 8 5 19h22v-3H12l8-8-8-8h15z\"/></symbol><symbol id=\"dx-dashboard-toolbox-rangeFilter\" viewBox=\"4 -4 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M26-1H6c-.6 0-1 .4-1 1v16c0 .6.4 1 1 1h7V5L7 8.8V1h18v4l-6 6v6h7c.6 0 1-.4 1-1V0c0-.6-.4-1-1-1z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M21-3V9l-2 2-6-6-2 1.3V-3H9v22h2v-2h10v2h2V-3z\"/></symbol><symbol id=\"dx-dashboard-toolbox-scatterChart\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M22 1H2c-.6 0-1 .4-1 1v20c0 .6.4 1 1 1h20c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1zm-1 20H3V3h18v18zM8 13c-1.7 0-3 1.3-3 3s1.3 3 3 3 3-1.3 3-3-1.3-3-3-3zm0 4c-.6 0-1-.4-1-1s.4-1 1-1 1 .4 1 1-.4 1-1 1zm8-6c-1.7 0-3 1.3-3 3s1.3 3 3 3 3-1.3 3-3-1.3-3-3-3zm0 4c-.6 0-1-.4-1-1s.4-1 1-1 1 .4 1 1-.4 1-1 1zm-2-7c0-1.7-1.3-3-3-3S8 6.3 8 8s1.3 3 3 3 3-1.3 3-3zm-3 1c-.6 0-1-.4-1-1s.4-1 1-1 1 .4 1 1-.4 1-1 1z\"/></symbol><symbol id=\"dx-dashboard-toolbox-tabContainer\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M22 4H11V1c0-.5-.5-1-1-1H1C.5 0 0 .5 0 1v21c0 .5.5 1 1 1h21c.5 0 1-.5 1-1V5c0-.5-.5-1-1-1zm-1 17H2V2h7v4h12v15z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M16 8h-6c-.5 0-1 .5-1 1v2H7c-.5 0-1 .5-1 1v6c0 .5.5 1 1 1h6c.5 0 1-.5 1-1v-2h2c.5 0 1-.5 1-1V9c0-.5-.5-1-1-1zm-4 9H8v-4h4v4z\"/></symbol><symbol id=\"dx-dashboard-toolbox-textBox\" viewBox=\"4 -4 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M26 3c.6 0 1-.4 1-1v-4c0-.6-.4-1-1-1h-4c-.6 0-1 .4-1 1v1H11v-1c0-.6-.4-1-1-1H6c-.6 0-1 .4-1 1v4c0 .6.4 1 1 1h1v10H6c-.6 0-1 .4-1 1v4c0 .6.4 1 1 1h4c.6 0 1-.4 1-1v-1h10v1c0 .6.4 1 1 1h4c.6 0 1-.4 1-1v-4c0-.6-.4-1-1-1h-1V3h1zM7-1h2v2H7v-2zm0 18v-2h2v2H7zm14-3v1H11v-1c0-.6-.4-1-1-1H9V3h1c.6 0 1-.4 1-1V1h10v1c0 .6.4 1 1 1h1v10h-1c-.6 0-1 .4-1 1zm4 3h-2v-2h2v2zM23 1v-2h2v2h-2z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M18 11h2l-3-7h-2l-3 7h2l.4-1h3.1l.5 1zm-2.7-3l.7-1.7.7 1.7h-1.4z\"/></symbol><symbol id=\"dx-dashboard-toolbox-treemap\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M2 1c-.6 0-1 .4-1 1v20c0 .6.4 1 1 1h5V1H2z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M23 9V2c0-.6-.4-1-1-1H9v8h14zM17 18v5h5c.6 0 1-.4 1-1v-4h-6z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M17 11h6v5h-6zM9 11h6v12H9z\"/></symbol><symbol id=\"dx-dashboard-toolbox-treeView\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M14 8H2c-.6 0-1 .4-1 1v12c0 .6.4 1 1 1h12c.6 0 1-.4 1-1V9c0-.6-.4-1-1-1zm-1 12H3V10h10v10zm-2-6H9v-2H7v2H5v2h2v2h2v-2h2v-2zM22 2H10c-.6 0-1 .4-1 1v4h2V4h10v10h-5v2h6c.6 0 1-.4 1-1V3c0-.6-.4-1-1-1zm-6 8h3V8h-3.3c.2.3.3.6.3 1v1z\"/></symbol><symbol id=\"dx-dashboard-chart-series-area\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M19 18H5c-.6 0-1-.4-1-1v-5l5-5 5 5 6-6v11c0 .6-.4 1-1 1z\"/></symbol><symbol id=\"dx-dashboard-chart-series-bar\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M7 20H5c-.6 0-1-.4-1-1v-5c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v5c0 .6-.4 1-1 1zM13 20h-2c-.6 0-1-.4-1-1V9c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v10c0 .6-.4 1-1 1zM19 20h-2c-.6 0-1-.4-1-1V5c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v14c0 .6-.4 1-1 1z\"/></symbol><symbol id=\"dx-dashboard-chart-series-candle-stick\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M17 6V4h-2v2h-2v9h2v2h2v-2h2V6h-2zm0 7h-2V8h2v5z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M9 9V7H7v2H5v9h2v2h2v-2h2V9z\"/></symbol><symbol id=\"dx-dashboard-chart-series-full-stacked-area\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M4 5v14h16V5c0-.6-.4-1-1-1H5c-.6 0-1 .4-1 1z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M9 11l-5 5v3c0 .6.4 1 1 1h14c.6 0 1-.4 1-1v-9l-6 6-5-5z\"/></symbol><symbol id=\"dx-dashboard-chart-series-full-stacked-bar\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M13 20h-2c-.6 0-1-.4-1-1v-8h4v8c0 .6-.4 1-1 1zM19 20h-2c-.6 0-1-.4-1-1V8h4v11c0 .6-.4 1-1 1zM7 20H5c-.6 0-1-.4-1-1v-4h4v4c0 .6-.4 1-1 1z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M20 9h-4V5c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v4zM14 12h-4V5c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v7zM8 16H4V5c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v11z\"/></symbol><symbol id=\"dx-dashboard-chart-series-full-stacked-line\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M4 5h16v2H4z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M14 16l-5-5-5 5v3l5-5 5 5 6-6v-3z\"/></symbol><symbol id=\"dx-dashboard-chart-series-full-stacked-spline-area\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M19 4H5c-.6 0-1 .4-1 1v8.9s3.2 6.8 8 0c4.7-6.6 8 0 8 0V5c0-.6-.4-1-1-1z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M12 13c-4.8 6.8-8 0-8 0v6c0 .6.4 1 1 1h14c.6 0 1-.4 1-1v-6s-3.3-6.6-8 0z\"/></symbol><symbol id=\"dx-dashboard-chart-series-high-low-close\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M9 7H7v13h2v-3h2v-2H9z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M15 14V4h-2v12h4v-2z\"/></symbol><symbol id=\"dx-dashboard-chart-series-line\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M14 13L9 8l-5 5v3l5-5 5 5 6-6V7z\"/></symbol><symbol id=\"dx-dashboard-chart-series-points\" viewBox=\"0 0 24 24\"><circle class=\"dx-dashboard-contrast-icon\" cx=\"6\" cy=\"18\" r=\"2\"/><circle class=\"dx-dashboard-contrast-icon\" cx=\"18\" cy=\"6\" r=\"2\"/><circle class=\"dx-dashboard-contrast-icon\" cx=\"11\" cy=\"9\" r=\"2\"/><circle class=\"dx-dashboard-contrast-icon\" cx=\"13\" cy=\"15\" r=\"2\"/></symbol><symbol id=\"dx-dashboard-chart-series-range-area\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M14 12L9 7l-5 5v6l5-5 5 5 6-6V6z\"/></symbol><symbol id=\"dx-dashboard-chart-series-range-bar\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M7 17H5c-.6 0-1-.4-1-1V8c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v8c0 .6-.4 1-1 1zM13 20h-2c-.6 0-1-.4-1-1v-7c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v7c0 .6-.4 1-1 1zM19 13h-2c-.6 0-1-.4-1-1V5c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v7c0 .6-.4 1-1 1z\"/></symbol><symbol id=\"dx-dashboard-chart-series-spline-area\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M12 8.9c-4.8 6.8-8 0-8 0v8c0 .6.4 1 1 1h14c.6 0 1-.5 1-1v-8s-3.3-6.6-8 0z\"/></symbol><symbol id=\"dx-dashboard-chart-series-spline\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M8.2 16h-.3C5.5 16 4 12.5 4 12.4l1.5-.8c.3.6 1.2 2.4 2.4 2.4 1.5 0 2.4-1.2 3.3-2.5C12.9 9 14.2 8 16 8c2.5 0 3.9 3.4 4 3.5l-1.6.9c-.3-.6-.8-2.4-2.4-2.4-1.8 0-2.5 1.3-3.3 2.5-1.4 2.1-3 3.5-4.5 3.5z\"/></symbol><symbol id=\"dx-dashboard-chart-series-stacked-area\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M9 10l-5 5v4c0 .6.4 1 1 1h14c.6 0 1-.4 1-1V9l-6 6-5-5z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M14 10L9 5l-5 5v6l5-5 5 5 6-6V4z\"/></symbol><symbol id=\"dx-dashboard-chart-series-stacked-bar\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M14 15h-4V9c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v6zM8 17H4v-3c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v3zM20 12h-4V5c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v7z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M13 20h-2c-.6 0-1-.4-1-1v-5h4v5c0 .6-.4 1-1 1zM19 20h-2c-.6 0-1-.4-1-1v-8h4v8c0 .6-.4 1-1 1zM7 20H5c-.6 0-1-.4-1-1v-3h4v3c0 .6-.4 1-1 1z\"/></symbol><symbol id=\"dx-dashboard-chart-series-stacked-line\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M11 10l-6 6v3l6-6 6 6 2-2v-3l-2 2z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M15 9l-4-4-6 6v3l6-6 4 4 4-4V5z\"/></symbol><symbol id=\"dx-dashboard-chart-series-stacked-spline-area\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M12 6.9c-4.8 6.8-8 0-8 0V14s3.2 6.4 8 0c4.7-6.3 8 0 8 0V6.9s-3.3-6.6-8 0z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M12 13c-4.7 6.5-8 0-8 0v6c0 .6.4 1 1 1h14c.6 0 1-.4 1-1v-6s-3.3-6.6-8 0z\"/><g><path class=\"dx-dashboard-accent-icon\" d=\"M12 6.9c-4.8 6.8-8 0-8 0V14s3.2 6.4 8 0c4.7-6.3 8 0 8 0V6.9s-3.3-6.6-8 0z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M12 13c-4.7 6.5-8 0-8 0v6c0 .6.4 1 1 1h14c.6 0 1-.4 1-1v-6s-3.3-6.6-8 0z\"/></g></symbol><symbol id=\"dx-dashboard-chart-series-step-area\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M5 20h14c.6 0 1-.4 1-1V9h-4V4h-4v11H8v-3H4v7c0 .6.4 1 1 1z\"/></symbol><symbol id=\"dx-dashboard-chart-series-step-line\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M12 4v14H8v-4H4v2h2v4h8V6h4v9h2V4z\"/></symbol><symbol id=\"dx-dashboard-chart-series-stock\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M10 7H8v3H6v2h2v8h2v-3h2v-2h-2z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M16 14V4h-4v2h2v10h4v-2z\"/></symbol><symbol id=\"dx-dashboard-chart-series-weighted\" viewBox=\"0 0 24 24\"><circle class=\"dx-dashboard-contrast-icon\" cx=\"7\" cy=\"17\" r=\"2\"/><circle class=\"dx-dashboard-contrast-icon\" cx=\"12\" cy=\"9\" r=\"4\"/><circle class=\"dx-dashboard-contrast-icon\" cx=\"16.5\" cy=\"15.5\" r=\"2.5\"/></symbol><symbol id=\"dx-dashboard-gauge-circular-full\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M12 4c-4.4 0-8 3.6-8 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M12 4c-4.4 0-8 3.6-8 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M12 10c-.3 0-.6.1-.8.2L5 4 4 5l6.2 6.2c-.1.2-.2.5-.2.8 0 1.1.9 2 2 2s2-.9 2-2-.9-2-2-2z\"/></symbol><symbol id=\"dx-dashboard-gauge-circular-half\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M12 9c3.3 0 6 2.7 6 6h2c0-4.4-3.6-8-8-8s-8 3.6-8 8h2c0-3.3 2.7-6 6-6z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M12 9c3.3 0 6 2.7 6 6h2c0-4.4-3.6-8-8-8s-8 3.6-8 8h2c0-3.3 2.7-6 6-6z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M12 13c-.3 0-.6.1-.8.2L5 7 4 8l6.2 6.2c-.1.2-.2.5-.2.8 0 1.1.9 2 2 2s2-.9 2-2-.9-2-2-2z\"/></symbol><symbol id=\"dx-dashboard-gauge-circular-left-quarter\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M6 17h2c0-5 4-9 9-9V6C10.9 6 6 10.9 6 17z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M16 14c-.3 0-.6.1-.8.2L8 7 7 8l7.2 7.2c-.1.2-.2.5-.2.8 0 1.1.9 2 2 2s2-.9 2-2-.9-2-2-2z\"/></symbol><symbol id=\"dx-dashboard-gauge-circular-right-quarter\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M18 17h-2c0-5-4-9-9-9V6c6.1 0 11 4.9 11 11z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M8 14c.3 0 .6.1.8.2L16 7l1 1-7.2 7.2c.1.2.2.5.2.8 0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2z\"/></symbol><symbol id=\"dx-dashboard-gauge-circular-three-fourth\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M20 13c0-4.4-3.6-8-8-8s-8 3.6-8 8c0 2.2.9 4.2 2.4 5.6l1.4-1.4C6.7 16.1 6 14.7 6 13c0-3.3 2.7-6 6-6s6 2.7 6 6c0 1.7-.7 3.1-1.8 4.2l1.4 1.4c1.5-1.4 2.4-3.4 2.4-5.6z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M20 13c0-4.4-3.6-8-8-8s-8 3.6-8 8c0 2.2.9 4.2 2.4 5.6l1.4-1.4C6.7 16.1 6 14.7 6 13c0-3.3 2.7-6 6-6s6 2.7 6 6c0 1.7-.7 3.1-1.8 4.2l1.4 1.4c1.5-1.4 2.4-3.4 2.4-5.6z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M12 11c-.3 0-.6.1-.8.2L5 5 4 6l6.2 6.2c-.1.2-.2.5-.2.8 0 1.1.9 2 2 2s2-.9 2-2-.9-2-2-2z\"/></symbol><symbol id=\"dx-dashboard-gauge-linear-horizontal\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M4 10h16v4H4z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M4 10h10v4H4z\"/></symbol><symbol id=\"dx-dashboard-gauge-linear-vertical\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M10 4h4v16h-4z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M10 10h4v10h-4z\"/></symbol><symbol id=\"dx-dashboard-grid-column-delta\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M12 4L4 20h16L12 4zm-1 6l4 8H7l4-8z\"/></symbol><symbol id=\"dx-dashboard-grid-column-dimension\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M20 17l-4-3v2H8V8h2L7 4 4 8h2v10h10v2z\"/></symbol><symbol id=\"dx-dashboard-grid-column-hyperlink\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M7.8 15l-.5-2.2H5.2L4.7 15H3l2.3-9h1.9l2.2 9H7.8zM6.4 8.6c0-.2-.1-.5-.1-1v-.2c-.1.6-.2.9-.2 1.1l-.6 2.9H7l-.6-2.8zM10.3 15V6h2.5c1.6 0 2.3.7 2.3 2.1 0 .5-.1.9-.4 1.3-.2.4-.6.6-1 .7.5.1.8.3 1.1.7.3.4.4.9.4 1.4 0 .8-.2 1.5-.6 2-.4.5-1 .7-1.8.7h-2.5zm1.6-7.5v2.2h.7c.3 0 .5-.1.7-.3s.3-.5.3-.8c0-.7-.4-1-1.1-1h-.6zm0 3.6v2.4h.8c.3 0 .6-.1.8-.3s.3-.5.3-.9-.1-.6-.3-.8c-.2-.2-.4-.3-.7-.3h-.9zM21 14.6c-.5.3-1 .4-1.6.4-1 0-1.8-.4-2.4-1.2-.6-.8-.9-1.8-.9-3.1 0-1.5.3-2.7.9-3.5S18.5 6 19.6 6c.5 0 1 .1 1.4.3v1.6c-.4-.3-.8-.5-1.3-.5-.6 0-1 .3-1.4.8-.3.6-.5 1.3-.5 2.3 0 .9.2 1.7.5 2.2.3.5.8.8 1.3.8s.9-.2 1.4-.5v1.6zM3 17h18v1H3z\"/></symbol><symbol id=\"dx-dashboard-grid-column-measure\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M20 5H4l7 7-7 7h16v-2H9l5-5-5-5h11z\"/></symbol><symbol id=\"dx-dashboard-grid-column-sparkline\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M20 7c-1.1 0-2 .9-2 2 0 .3.1.6.2.8l-3.4 3.4c-.2-.1-.5-.2-.8-.2s-.6.1-.8.2l-2.4-2.4c.1-.3.2-.5.2-.8 0-1.1-.9-2-2-2s-2 .9-2 2c0 .3.1.6.2.8l-2.4 2.4c-.2-.1-.5-.2-.8-.2-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2c0-.3-.1-.6-.2-.8l2.4-2.4c.2.1.5.2.8.2s.6-.1.8-.2l2.4 2.4c-.1.2-.2.5-.2.8 0 1.1.9 2 2 2s2-.9 2-2c0-.3-.1-.6-.2-.8l3.4-3.4c.3.1.5.2.8.2 1.1 0 2-.9 2-2s-.9-2-2-2z\"/></symbol><symbol id=\"dx-dashboard-pie-donut\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M8 12c0-2.2 1.8-4 4-4V4c-4.4 0-8 3.6-8 8 0 2.2.9 4.2 2.3 5.7l2.8-2.8C8.4 14.1 8 13.1 8 12z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M12 4v4c2.2 0 4 1.8 4 4s-1.8 4-4 4c-1.1 0-2.1-.4-2.8-1.2l-2.8 2.8C7.8 19.1 9.8 20 12 20c4.4 0 8-3.6 8-8s-3.6-8-8-8z\"/></symbol><symbol id=\"dx-dashboard-pie-pie\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M12 4c-4.4 0-8 3.6-8 8 0 2.2.9 4.2 2.3 5.7L12 12V4z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M12 4v8l-5.7 5.7C7.8 19.1 9.8 20 12 20c4.4 0 8-3.6 8-8s-3.6-8-8-8z\"/></symbol><symbol id=\"dx-dashboard-sparkline-win-loss\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M2 13v-2c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v2c0 .6-.4 1-1 1H3c-.6 0-1-.4-1-1zM7 13v-2c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v2c0 .6-.4 1-1 1H8c-.6 0-1-.4-1-1zM18 13v-2c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v2c0 .6-.4 1-1 1h-2c-.6 0-1-.4-1-1z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M12 13v-2c0-.6.4-1 1-1h3c.6 0 1 .4 1 1v2c0 .6-.4 1-1 1h-3c-.6 0-1-.4-1-1z\"/></symbol></svg>", "HtmlResources": "<script type=\"text/html\" id=\"dx-dashboard-control\"> <div class=\"dx-dashboard-widget-container dx-dashboard-control dx-dashboard-typography dx-dashboard-theme dx-viewport dx-designer-viewport\" data-bind=\"css: colorSchemeCss\"> <!-- ko foreach: externalTemplates --> <!-- ko template: $data --> <!-- /ko --> <!-- /ko --> <div class=\"dx-dashboard-surface\" data-bind=\"style: { left: surfaceLeft() + 'px' }, css: $data.classList()\"> <!-- ko if: isDashboardLoaded()  --> <!-- ko template: $data.layoutTemplate() --> <!-- /ko --> <!-- /ko --> <!-- ko ifnot: isDashboardLoaded()  --> <div class=\"dx-dashboard-no-visible-dashboard\"> <div> <!-- ko if: isLoading() --> <div class=\"dx-dashboard-control-loading\" data-bind=\"text:$root.getLocalizationById('DashboardStringId.MessageLoading')\"></div> <!-- /ko --> <!-- ko ifnot: isLoading() --> <div data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.NoDashboards')\"></div><br /> <!-- ko foreach: emptyControlTemplates --> <!-- ko template: $data --> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div> </div> <!-- /ko --> </div> <!-- ko template:  { name: \"dx-dashboard-notification-controller\", data: notificationController._viewModel } --> <!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-dashboard-resizable-layout\"> <!-- ko if: componentArgs --> <dashboard-docking-layout data-bind=\"css: cssClasses\" params=\"componentArgs: componentArgs\"></dashboard-docking-layout> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-docking-layout\"> <!-- ko if: title.showTitle() --> <div data-bind=\"style: title.containerStyles\"> <dashboard-title data-bind=\"style: title.styles\" params=\"componentArgs: title.componentArgs\"></dashboard-title> </div> <!-- /ko --> <div data-bind=\"dxScrollView: scrollView.options, style: scrollView.styles\" class=\"dx-dashboard-layout-container\"> <div data-bind=\"style: scrollView.contentWrapperStyles, dx-dashboard-element-accessor: layoutMainElementEvents\"> <!-- ko with: layout --> <dx-layout-item data-bind=\"css: { 'dx-state-underlying-selection': $data.areChildrenSelected() }\" class=\"dx-layout-item dx-layout-root\" params=\"layoutItem: $data\"></dx-layout-item> <!-- /ko --> </div> </div> <!-- ko if: fullscreenItemModel.visible() --> <div class=\"dx-dashboard-fullscreen-item-base\" data-bind=\"style: fullscreenItem.styles\"> <div class=\"dx-layout-item-wrapper dx-dashboard-fullscreen-item\"> <div class=\"dx-layout-item-container dx-dashboard-container\" data-bind=\" dx-dashboard-item-binding: { dashboardItem: fullscreenItemModel.viewModel().dashboardItem, dashboardContext: fullscreenItemModel.viewModel().dashboardContext, localContext:  fullscreenItemModel.viewModel().localContext, sizeController: fullscreenItemModel.viewModel().getSizeController($element) }\"> </div> </div> </div> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-mobile-layout\"> <!-- ko if: componentArgs --> <dashboard-mobile-layout-widget params=\"componentArgs: componentArgs\" style=\"position: absolute; top: 0; left: 0; bottom: 0; right: 0;\" class=\"dx-dashboard-viewer dx-dashboard-container dx-dashboard-mobile-layout-widget\" > </dashboard-mobile-layout-widget> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-mobile-layout-widget\"> <!-- ko template: { name: 'dx-dashboard-mobile-title', data: titleViewModel } --> <!-- /ko --> <div data-bind=\"dxList: layoutViewModel, style: { top: titleViewModel.height() + 'px' }\" style=\"position:absolute\" class=\"dx-dashboard-mobile-layout dx-dashboard-container\"> <div data-options=\"dxTemplate:{ name: 'item' }\"> <!-- ko template: $data --> <!-- /ko --> </div> </div> <!-- ko template: { name: 'dx-dashboard-mobile-fullscreen-item', data: fullscreenItemViewModel } --> <!-- /ko --> <!-- ko template: { name: 'dx-dashboard-mobile-item-master-filters', data: itemMasterFiltersViewModel } --> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-mobile-title\"> <dashboard-title params=\"componentArgs: { options: options, width: width, height: height, encodeHtml: encodeHtml, className: className }\"></dashboard-title></script><script type=\"text/html\" id=\"dx-dashboard-mobile-fullscreen-item\"> <div data-bind=\"dxOverlay: { shading: false, width: width, height: height, deferRendering: true, visible: visible, animation: { show: { type: 'slide', duration: 400, from: { position: { my: 'left', at: 'right', of: window } }, to: { position: { my: 'center', at: 'center', of: window } } }, hide: { type: 'slide', duration: 400, from: { position: { my: 'center', at: 'center', of: window } }, to: { position: { my: 'left', at: 'right', of: window } } } }, onInitialized: onInitialized, onDisposing: onDisposing, wrapperAttr: { class: 'dx-dashboard-fullscreen-item-popup' }, position: { my: 'left top', at: 'left top' } }\"> <!-- ko if: visible --> <!-- ko with: itemViewModel --> <dashboard-standalone-item class=\"dx-dashboard-container dx-dashboard-theme\" style=\"width:100%;height:100%;display:block;\" params=\"dashboardItem: dashboardItem, dashboardContext: dashboardContext, localContext: localContext, repaintRequest: repaintRequest, \"></dashboard-standalone-item> <!-- /ko --> <!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-dashboard-mobile-layout-item\"> <div class=\"dx-dashboard-mobile-layout-maximize-icon\" data-bind=\" css: { 'dx-dashboard-mobile-layout-maximize-icon-selected': isReadyForAction() }, style: { 'opacity': maximizeIconOpacity()  } \"> <svg><use xlink:href=\"#dx-dashboard-maximize-item\"></use></svg> <div>Maximize</div> </div> <dashboard-standalone-item data-bind=\"style: { 'transform': 'translateX(' + itemOffsetInPixels() + 'px)'  }\" class=\"dx-dashboard-standalone-item-container dx-state-disabled\" params=\"dashboardItem: dashboardItem, dashboardContext: dashboardContext, localContext: localContext, repaintRequest: repaintRequest, \"></dashboard-standalone-item> <div class=\"dx-dashboard-mobile-layout-item-shield\" data-bind=\" dxclick: click, dxpointerdown: selectItem, dxpointerup: unselectItem, dxpointermove: unselectItem \"></div> <!--dxswipestart: { execute: swipestart, direction: 'horizontal' }, dxswipe: { execute: swipeupdate, direction: 'horizontal' }, dxswipeend: { execute: swipeend, direction: 'horizontal' }--> </script><script type=\"text/html\" id=\"dx-dashboard-mobile-item-master-filters\"> <div data-bind=\" dxOverlay: { height: masterFiltersPopup.height, width: masterFiltersPopup.width, hideOnOutsideClick: true, visible: masterFiltersPopup.visible, onHiding: function() { closeMasterFiltersPopup() }, position: { my: 'bottom', at: 'bottom', of: window } , animation: { show: { type: 'slide', duration: 250, from: { position: { my: 'top', at: 'bottom', of: window } } }, hide: { type: 'slide', duration: 250, to: { position: { my: 'top', at: 'bottom', of: window } } } }, onInitialized: masterFiltersPopup.onInitialized, onDisposing: masterFiltersPopup.onDisposing, wrapperAttr: { class: 'dx-dashboard-master-filters-popup' } }\"> <div class=\"master-filters-list-container\"> <div class=\"master-filters-list-spring\" data-bind=\"style: { flex: maximizeFiltersPopup() ? 0 : 1 }, dxclick: function() { closeMasterFiltersPopup() }\"> </div> <div class=\"master-filters-list master-filter-popup\" data-bind=\"style: { flex: maximizeFiltersPopup() ? 1 : 0 }\"> <!-- ko foreach: masterItems--> <div class=\"dx-dashboard-masters-preview-item\" data-bind=\"dxclick: click\"> <div class=\"dx-dashboard-masters-preview-item-name\" data-bind=\"text: name\"></div> <div class=\"dx-dashboard-masters-preview-filtervalues\"> <!-- ko foreach: filterValues --> <b data-bind=\"text: name\"></b>:<span data-bind=\"text: valuesString\"></span> <!-- /ko --> </div> </div> <!-- /ko --> </div> </div> <div class=\"apply-buttons\" style=\"position: absolute; left:0; right:0; bottom: 0px;\"> <div data-bind=\"dxButton: { text:  $root.getLocalizationById('DashboardStringId.ButtonOK'), onClick: closeMasterFiltersPopup, type: 'default' }\"> </div> </div> </div> <div data-bind=\"dxOverlay: { height: masterFilterMaximizedItemPopup.height, width: masterFilterMaximizedItemPopup.width, hideOnOutsideClick: true, onHiding: function() { closeMasterFilterItemPopup() }, visible: masterFilterMaximizedItemPopup.visible, position: { my: 'bottom', at: 'bottom', of: window } , animation: { show: { type: 'slide', duration: 250, from: { position: { my: 'top', at: 'bottom', of: window } } }, hide: { type: 'slide', duration: 250, to: { position: { my: 'top', at: 'bottom', of: window } } } }, onInitialized: masterFilterMaximizedItemPopup.onInitialized, onDisposing: masterFilterMaximizedItemPopup.onDisposing, wrapperAttr: { class: 'dx-dashboard-master-filters-popup' } }\"> <!-- ko with: masterFilterItem --> <div class=\"master-filter-popup\" style=\"position: absolute;left:0; right:0; top:0; bottom: 70px;display: block;\"> <dashboard-standalone-item class=\"dx-dashboard-standalone-item-container dx-dashboard-container dx-dashboard-theme\" params=\"dashboardItem: dashboardItem, dashboardContext: dashboardContext, localContext: localContext, repaintRequest: repaintRequest, \"></dashboard-standalone-item> </div> <!-- /ko --> <div class=\"apply-buttons\"  style=\"position: absolute; left:0; right:0; bottom: 0px;\"> <div data-bind=\"dxButton: { text: $root.getLocalizationById('DashboardStringId.ButtonOK'), onClick: closeMasterFilterItemPopup, type: 'default' }\"> </div> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-notification-controller\"> <div data-bind=\"dxToast: { type: 'custom', visible: visible() && !suspended(), width: 'auto', target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { my: 'bottom right', at: 'bottom right', offset: '0 0', boundary: $root.getWidgetContainer(), of: $root.getWidgetContainer() }, displayTime: displayTime, closeOnClick: true, closeOnSwipe: false, onInitialized: onInitialized }\"> <div class=\"dx-dashboard-notificator\" data-bind=\"foreach: notifications, css: {  'dx-dashboard-error': type() === 'error', 'dx-dashboard-success': type() === 'success', 'dx-dashboard-info': type() === 'info'} \"> <h1 data-bind=\"text: title\"></h1> <!-- ko if: detail !== null --> <span data-bind=\"text: detail\"></span> <!-- /ko --> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-item\"> <div class=\"dx-layout-item-container\" data-bind=\"dx-dashboard-item-binding: { dashboardItem: $data.viewModel.model.item, dashboardContext: $data.getContext(), localContext: $data.getLocalContext(), sizeController: $data.sizeController }, css: { 'dx-layout-item-selected': isSelected }\"> </div> <!-- ko if: isDesignMode --> <div class=\"dx-layout-item-cover dx-layout-float-cover\" data-bind=\"dxclick: coverClickHandler, event: { mouseover: coverMouseOverHandler }, css: itemStyle\"></div> <!-- ko if: isSelected --> <!-- ko template: getContextMenu() --> <!-- /ko --> <!-- ko template: { name: 'dx-dashboard-item-plate' } --> <!-- /ko --> <!-- /ko --> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-item-state-loading\"> <div class=\"dx-dashboard-layout-state dx-layout-item-loading\"> <div class=\"dx-dashboard-control-loading\" data-bind=\"text:$root.getLocalizationById('DashboardStringId.MessageLoading')\"></div> </div></script><script type=\"text/html\" id=\"dx-dashboard-item-state-empty\"> <div class=\"dx-dashboard-layout-state dx-dashboard-layout-state-empty dx-layout-item-empty\" data-bind=\"class: sizeClass\"> <!-- ko if: $data --> <svg class=\"dx-dashboard-item-type-icon\"><use data-bind=\"xlinkHref: icon\"></use></svg> <div class=\"dx-dashboard-item-type-title\" data-bind=\"text: title\"></div> <!-- /ko --> <div class=\"dx-dashboard-layout-state-content\"> <!-- ko if: $parent.getEmptyItemTemplates --> <!-- ko template: $parent.getEmptyItemTemplates() --> <!-- /ko --> <!-- /ko --> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-item-state-error\"> <div class=\"dx-dashboard-layout-state dx-dashboard-layout-state-error dx-layout-item-empty\" data-bind=\"class: sizeClass\"> <!-- ko if: $data --> <svg class=\"dx-dashboard-item-type-icon\"><use data-bind=\"xlinkHref: icon\"></use></svg> <div class=\"dx-dashboard-item-type-title\" data-bind=\"text: title\"></div> <!-- /ko --> <div class=\"dx-dashboard-layout-state-content dx-dashboard-layout-text\"> <p data-bind=\"text: errorState() && errorState().title\"></p> <p data-bind=\"text: errorState() && errorState().detail\"></p> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-standalone-item\"> <div class=\"dx-dashboard-standalone-item\" data-bind=\"css: {'dx-dashboard-widget-container': isStandalone, 'dx-dashboard-typography': isStandalone  }, dx-dashboard-item-binding: { dashboardItem: $data.dashboardItem, dashboardContext: $data.dashboardContext, localContext: $data.localContext, sizeController: $data.sizeController }\"> </div></script><script type=\"text/html\" id=\"dx-layout-item\"> <!-- ko with: layoutItem --> <div class=\"dx-layout-item-wrapper\" data-bind=\"dx-ko-resizable: $data, visible: visible\"> <!-- ko if: viewModel.hasItem() --> <!-- ko template: viewModel.template || 'dx-layout-item-container' --> <!-- /ko --> <!-- /ko --> <!-- ko ifnot: viewModel.hasItem() --> <!-- ko template: 'dx-layout-group-container' --> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --></script><script type=\"text/html\" id=\"dx-layout-item-container\"> <div class=\"dx-layout-item-container\" data-bind=\"style: { width: containerWidth() + 'px', height: containerHeight() + 'px' }\"></div> <!-- ko if: isDesignMode --> <div class=\"dx-layout-item-cover\" data-bind=\"dxclick: coverClickHandler, css: itemStyle\" draggable=\"true\"></div> <div class=\"dx-layout-item-plate\" data-bind=\"visible: isSelected\" draggable=\"true\"></div> <!-- /ko --></script><script type=\"text/html\" id=\"dx-layout-group-container\"> <div class=\"dx-layout\"> <!-- ko if: viewModel.orientation() === 'Horizontal' --> <div class=\"dx-layout-group\"> <!-- ko foreach: items --> <dx-layout-item class=\"dx-layout-item\" params=\"layoutItem: $data\"></dx-layout-item> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: viewModel.orientation() === 'Vertical' --> <!-- ko foreach: items --> <div class=\"dx-layout-group\"> <dx-layout-item class=\"dx-layout-item\" params=\"layoutItem: $data\"></dx-layout-item> </div> <!-- /ko --> <!-- /ko --> <!-- ko if: items().length === 0 && !!$data.getPlaceholder --> <div data-bind=\"style: { width: containerWidth() + 'px', height: containerHeight() + 'px' }\"> <!-- ko with: $data.getPlaceholder() --> <!-- ko template: viewModel.template --> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-dashboard-empty-item-templates\"> <!-- ko foreach: $data --> <!-- ko template: $data --> <!-- /ko --> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-item-placeholder\"> <!-- ko if: $parent.isDesignMode() --> <div class=\"dx-layout-item-placeholder\" data-bind=\"css: itemStyle\"> <!-- ko if: !dragOverLocation() --> <!-- ko template: getLayoutItemPlaceholder() --> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-group\"> <dx-dashboard-layout-group params=\"layoutItem: $data\"></dx-dashboard-layout-group></script><script type=\"text/html\" id=\"dx-dashboard-layout-group\"> <!-- ko with: layoutItem --> <div class=\"dx-layout-item-container\" data-bind=\"dx-dashboard-layout-group-binding: { dashboardContext: $data.getContext(), localContext: $data.getLocalContext(), sizeController: $data.sizeController, dashboardItem: $data.viewModel.model.item, headerHeight: $parent.headerHeight }\"></div> <!-- ko if: isDesignMode --> <div class=\"dx-layout-item-cover\" data-bind=\" dxclick: coverClickHandler, event: { mouseover: coverMouseOverHandler }, css: itemStyle\"> </div> <!-- /ko --> <!-- ko if: items().length !== 0 --> <div data-bind=\"style: { top: $parent.headerHeight() + 'px', padding: $parent.padding() + 'px' }\" style=\"position: absolute; bottom: 0;\"> <!-- ko template: 'dx-layout-group-container' --> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: items().length === 0 && isDesignMode() --> <div class=\"dx-layout-item-cover\" data-bind=\" dxclick: coverClickHandler, event: { mouseover: coverMouseOverHandler }, css: itemStyle\"> <div data-bind=\"style: { top: $parent.headerHeight() + 'px', padding: $parent.padding() + 'px' }\" style=\"position: absolute; bottom: 0; left: 0; right: 0; \"> <!-- ko with: $data.getPlaceholder() --> <!-- ko template: viewModel.template --> <!-- /ko --> <!-- /ko --> </div> </div> <!-- /ko --> <!-- ko if: isSelected --> <!-- ko template: getContextMenu() --> <!-- /ko --> <!-- ko template: { name: 'dx-dashboard-item-plate' } --> <!-- /ko --> <!-- /ko --> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-tab-container\"> <dx-dashboard-layout-tab-container params=\"layoutItem: $data\"></dx-dashboard-layout-tab-container></script><script type=\"text/html\" id=\"dx-dashboard-layout-tab-container\"> <!-- ko with: layoutItem --> <dashboard-layout-tabs params=\"layoutItem: $data, headerHeight: $parent.headerHeight\" class=\"dx-layout-item-container dx-dashboard-item-container dx-dashboard-tabs-container\"> </dashboard-layout-tabs> <!-- ko if: isDesignMode --> <div class=\"dx-layout-item-cover\" data-bind=\" dxclick: coverClickHandler, event: { mouseover: coverMouseOverHandler }, css: itemStyle\"> </div> <!-- /ko --> <!-- ko if: $parent.activeItems().length !== 0 --> <!-- ko if: $parent.activeItems()[0].items().length !== 0 --> <div data-bind=\"style: { top: $parent.headerHeight() + 'px', padding: $parent.padding() + 'px' }\" style=\"position: absolute; top: 0; bottom: 0;\" class=\"dx-dashboard-tabs-content\"> <!-- ko template: 'dx-layout-group-container' --> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: $parent.activeItems()[0].items().length === 0 && isDesignMode() --> <div class=\"dx-layout-item-cover\" data-bind=\" dxclick: coverClickHandler, event: { mouseover: coverMouseOverHandler }, css: itemStyle\"> <div data-bind=\"style: { top: $parent.headerHeight() + 'px', padding: $parent.padding() + 'px' }\" style=\"position: absolute; top: 0; right:0; left: 0; bottom: 0;\" > <!-- ko with:  $parent.activeItems()[0].getPlaceholder() --> <!-- ko template: viewModel.template --> <!-- /ko --> <!-- /ko --> </div> </div> <!-- /ko --> <!-- /ko --> <!-- ko if: $parent.activeItems().length === 0 && isDesignMode() --> <div> </div> <!-- /ko --> <!-- ko if: isSelected --> <!-- ko template: getContextMenu() --> <!-- /ko --> <!-- ko template: { name: 'dx-dashboard-item-plate' } --> <!-- /ko --> <!-- /ko --> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-layout-tabs\"> <div class=\"dx-dashboard-layout-tabs-container\"> <div class=\"dx-dashboard-layout-tabs dx-dashboard-stretched\" data-bind=\"dxTabs: { items: tabPageBindings, itemTemplate: 'dx-dasbhoard-layout-tab-item', selectionMode: 'single', keyExpr: 'id', selectedItemKeys: selectedItemKeys, onSelectionChanged: onSelectionChanged, hoverStateEnabled: true, scrollingEnabled: false, focusStateEnabled: false}\"> <div data-options=\"dxTemplate:{ name:'dx-dasbhoard-layout-tab-item' }\" class='dx-dashboard-tab-content'> <div class=\"dx-dashboard-standalone-item\" data-bind=\"dx-dashboard-layout-tab-binding: { dashboardItem: $data.dashboardItem, dashboardContext: $data.context, localContext: $data.localContext, sizeController: $data.sizeController, ignoreBorder: $data.ignoreBorder }\"> </div> <div class=\"dx-dashboard-cover\"></div> </div> </div> <!-- ko if: showMenu() --> <div class=\"dx-dashboard-tab-button dx-dashboard-toggle-menu-button\" data-bind=\"click: toggleMenu\"> <div> <svg><use xlink:href=\"#dx-dashboard-open-tab-pages\"></use></svg> </div> </div> <!-- /ko --> <!-- ko if: showAddButton() --> <div class=\"dx-dashboard-tab-button dx-dashboard-create-tab-page-button\" data-bind=\"click: createTabPage\"> <div> <svg><use xlink:href=\"#dx-dashboard-ce-add\"></use></svg> </div> </div> <!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-dashboard-working-mode-extension\"> <div data-bind=\"dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { my: 'left top', at: 'left top', collision: 'flipfit', boundaryOffset: '0, 0', boundary: $root.getWidgetContainer(), of:  $root.getWidgetContainer(), offset: '0, 0' }, animation: enableAnimation () ? { show: { type: 'slide', from: { left: panelWidth() * -1 }, to: { left: 0 }, duration: 500 }, hide: { type: 'slide', from: { left: 0 }, to: { left: panelWidth() * -1 }, duration: 500 } } : null, focusStateEnabled: false, showCloseButton: isMobile, dragEnabled: false, width: panelWidth, height: '100%', shading: false, toolbarItems: [{ text: $root.getLocalizationById('DashboardWebStringId.Dashboards'), location: 'before', toolbar: 'top', }], hideOnOutsideClick: false, onInitialized: onPopupInitialized, onDisposing: onPopupDisposing, onContentReady: function() { enableAnimation(true) }, visible: visible, wrapperAttr: { class: isMobile() ? 'dx-dashboard-card-view-panel dx-dashboard-panel-extension dx-dashboard-typography' : 'dx-dashboard-panel-extension dx-dashboard-typography' } }\"> <div class=\"dx-dashboard-dashboard-list dx-dashboard-typography\" data-bind=\"dxList: listOptions, css: { 'dx-dashboard-dashboard-list-full': !allowSwitchToDesigner(), 'dx-dashboard-dashboard-list-clipped': allowSwitchToDesigner() }\"> <div data-options=\"dxTemplate:{ name: 'dashboard-card-view' }\"> <div class=\"dx-dashboard-card-view\"> <div class='dx-dashboard-card-name' data-bind=\"text: name\"></div> </div> </div> <div data-options=\"dxTemplate:{ name: 'dashboard-preview' }\"> <div class=\"dx-dashboard-preview\" data-bind=\"css: { 'dx-dashboard-minimized': hidden }\"> <div class='dx-dashboard-image-container' data-bind=\"css: { 'dx-dashboard-hidden': hidden }\"> <img class=\"dx-dashboard-image\" data-bind=\"attr: { src: imageUrl, alt: name }, event: { error: hide }\" /> </div> <div class=\"dx-dashboard-name-container\"> <div class='dx-dashboard-name' data-bind=\"text: name\"></div> </div> </div> </div> <div data-options=\"dxTemplate:{ name: 'dashboard-list-item' }\"> <div data-bind=\"text: name\"></div> </div> </div> <!-- ko if: allowSwitchToDesigner --> <!-- ko template: 'dx-dashboard-edit-in-designer-button' --> <!-- /ko --> <!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-dashboard-edit-in-designer-button-icon\"> <div class=\"dx-dashboard-edit-in-designer-button-icon\"> <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 32 32\" style=\"enable-background:new 0 0 32 32;\" xml:space=\"preserve\"> <style type=\"text/css\"> .editDashboardIcon { fill: #FFFFFF; } </style> <g> <path class=\"editDashboardIcon\" d=\"M25.5,5.5C23.3,3.3,20.3,2,17,2C10.5,2,5.3,7.1,5,13.5C6,13.2,7,13,8,13c5,0,9,4,9,9c0,1.4-0.3,2.8-0.9,4 c0.3,0,0.6,0,0.9,0c6.6,0,12-5.4,12-12H17L25.5,5.5z\" /> <path class=\"editDashboardIcon\" d=\"M32,13c0-3.3-1.3-6.3-3.5-8.5L20,13H32z\" /> <path class=\"editDashboardIcon\" d=\"M8,14c-4.4,0-8,3.6-8,8s3.6,8,8,8s8-3.6,8-8S12.4,14,8,14z M13.7,24H9.3l1.7-5l-4.2,5H2.3 C2.1,23.4,2,22.7,2,22c0-3.3,2.7-6,6-6s6,2.7,6,6C14,22.7,13.9,23.4,13.7,24z\" /> </g> </svg> </div></script><script type=\"text/html\" id=\"dx-dashboard-edit-in-designer-button\"> <div class=\"dx-dashboard-edit-in-designer-button\" data-bind=\"dxButton: { onClick: switchToDesigner, type: 'default', template: 'template' }\"> <div data-options=\"dxTemplate: { name: 'template' }\" class=\"designer-button-content\"> <!-- ko template: 'dx-dashboard-edit-in-designer-button-icon' --> <!-- /ko --> <div class=\"dx-dashboard-edit-in-designer-button-text\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.EditInDesigner')\"></div> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-working-mode-extension-viewer-button\"> <div class=\"dx-dashboard-viewer-button\" data-bind=\"dxButton: { onClick: click, type: 'default', text: $root.getLocalizationById('DashboardWebStringId.Viewer') }\"> </div></script><script type=\"text/html\" id=\"dx-dashboard-data-inspector-extension\"> <div data-bind=\"dxPopup: _getPopupOptions()\"> <!-- ko if: allowSwitchInspectedDataType --> <div class=\"dx-dashboard-inspected-data-type-chooser\"> <span class=\"dx-dashboard-inspected-data-type-text\" data-bind=\"text: $root.getLocalizationById('DashboardStringId.InspectedData')\"></span> <div class=\"dx-dashboard-inspected-data-radio-group\" data-bind=\"dxRadioGroup: { layout: 'horizontal', displayExpr: 'text', valueExpr: 'value', dataSource: avaliableInspectedDataType, value: inspectedDataType }\"> </div> </div> <!-- /ko --> <!-- ko with: gridOptions --> <div class=\"dx-dashboard-data-inspector-grid\" data-bind=\"dxDataGrid: $data\"></div> <!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-dashboard-button-group-template\"> <div data-bind=\"dxButtonGroup: $data\"></div></script><script id=\"dx-dashboard-calc-field-editor\" type=\"text/html\"> <!-- ko with: viewModel --> <div data-bind=\"dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { my: 'center', at: 'center', of: $root.getWidgetContainer(), boundary: $root.getWidgetContainer() }, height: '80%', width: '688px', maxHeight: '800px', minHeight: '500px', maxWidth: '80%', minWidth:'600px', animation: { }, focusStateEnabled: true, hideOnOutsideClick: false, toolbarItems: toolbarItems, visible: popupVisible, showTitle: true, hideOnParentScroll: false, title: $root.getLocalizationById('DashboardWebStringId.DataSources.EditCalculatedField'), wrapperAttr: { class: 'dx-dashboard-calc-field-editor-popup' }, resizeEnabled: true, }\"> <div class=\"dx-dashboard-calc-field-dialog\" style=\"height: 100%;\"> <div class=\"dx-fieldset\"> <div class=\"dx-field\"> <div class=\"dx-field-label\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.DataSources.CalculatedField.Name')\"></div> <div class=\"dx-field-value\"> <div data-bind=\"dxTextBox: { value: name }, dxValidator: { isValid: isCalcFieldNameValid, validationRules: nameValidationRules }\"></div> </div> </div> <div class=\"dx-field\"> <div class=\"dx-field-label\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.DataSources.CalculatedField.FieldType')\"></div> <div class=\"dx-field-value\"> <div data-bind=\"dxSelectBox: { items: availableTypes, value: fieldType, editEnabled: false, dropDownOptions: { container: $root.getWidgetContainer() } }\"></div> </div> </div> </div> <div class=\"dx-dashboard-calc-field-expression\" data-bind=\"css: { 'dx-invalid': !expressionEditable.isValid() }\"> <div class=\"dx-designer dx-expressioneditor\" style=\"height: 100%;\" data-bind=\"dshdExpressionEditor: { options: expressionEditable, fieldListProvider: itemsProvider, displayNameProvider: displayNameProvider, saveHandler: saveHandler }\" ></div> </div> </div> </div> <!-- /ko --></script><script type=\"text/html\" id='dx-dashboard-calculation-expression-editor'> <!--ko with: viewModel --> <div data-bind=\"dxPopup: { showTitle: true, title: $root.getLocalizationById('AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption'), visible: popupVisible, toolbarItems: buttonItems, showCloseButton: true, fullScreen: false, height: '70%', width: '645px', maxHeight: '800px', minHeight: '500px', maxWidth: '80%', minWidth:'600px', container: $root.getWidgetContainer(), position: { of: $root.getWidgetContainer(), boundary: $root.getWidgetContainer() }, wrapperAttr: { class: 'dx-designer dx-expressioneditor dx-popup-general' }, resizeEnabled: true, }\"> <div style=\"height: 100%;\"> <!-- ko template: \"dx-expressioneditor-main\" --> <!-- /ko --> </div> </div> <!-- /ko --></script><script type=\"text/html\" id='dx-dashboard-window-definition-editor'> <div class=\"dx-dashboard-window-definition-editor\"> <dx-dashboard-button-group class=\"dx-dashboard-window-definition-selector\" params=\"value: mode, values: dataSource\"></dx-dashboard-button-group> <!-- ko with: formAdapterWrapper --> <div data-bind=\"dx-dashboard-form-adapter: { target: $data }\" class=\"dx-dashboard-properties\"></div> <!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-dashboard-form-color-scheme\"> <div class=\"dx-dashboard-form-wrapper\"> <div class=\"dx-dashboard-form-column dx-dashboard-form-left-column dx-dashboard-color-scheme-editor-form\"> <div class=\"dx-dashboard-form-column-content-wrapper dx-dashboard-coloring-form-color-tables-panel\"> <!-- ko with: colorSchemeModel --> <div class=\"dx-dashboard-form-row-caption\"> <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Colorization.ColorSchemes')\"></span> </div> <!-- ko if: editableSignatures().length > 0 --> <div class=\"dx-dashboard-list dx-dashboard-form-row-content\"> <div class=\"dx-dashboard-color-tables-list\" data-bind=\"dxList: { dataSource: editableSignatures, selectedItems: selectedSignatures, selectionMode: 'single', keyExpr: 'key', nextButtonText: $root.getLocalizationById('DashboardWebStringId.More') }\"> <div class=\"dx-dashboard-color-table-item\"> <div class=\"dx-dashboard-color-table-item-description\"> <div> <!-- ko foreach: dataItems --> <div class=\"dx-dashboard-color-definition-tree\" data-bind=\"style: { 'margin-left': ($index() > 1 ? ($index() -1) * 21 : 0).toString() + 'px' }\"> <!-- ko if: $index() > 0 --> <svg><use xlink:href=\"#dx-dashboard-tree-connector\" /></svg> <!-- /ko --> <span data-bind=\"text: $data, attr: { title: $data }\"></span> </div> <!-- /ko --> <div class=\"dx-dashboard-definition-container\"> <span class=\"dx-dashboard-definition-caption\"> <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Colorization.ColorSchemeType')\"></span>:&nbsp; </span> <span data-bind=\"text: typeText, attr: {title: typeText}\"></span> </div> <div class=\"dx-dashboard-definition-container\"> <span class=\"dx-dashboard-definition-caption\"> <span data-bind=\"text: $root.getLocalizationById('DashboardStringId.DefaultDataSourceName')\"></span>:&nbsp; </span> <span data-bind=\"text: _getDataSourceText($parents[1].getDataSourceName(dataSource)), attr: { title: _getDataSourceText($parents[1].getDataSourceName(dataSource)) }\"></span> </div> </div> </div> <!-- ko if: !$parent.isSignatureAutogenerated($data) --> <div class=\"dx-dashboard-remove-icon\" data-bind=\"click: $parent.removeTable\"> <svg><use xlink:href=\"#dx-dashboard-remove-small\" /></svg> </div> <!-- /ko --> </div> </div> </div> <!-- /ko --> <!-- ko ifnot: editableSignatures().length > 0 --> <div class=\"dx-dashboard-form-row-content\"> <div class=\"dx-dashboard-form-parameter-placeholder\"> <div> <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.ColorScheme.Empty')\"></span> </div> </div> </div> <!-- /ko --> <!-- /ko --> </div> </div> <div class=\"dx-dashboard-form-column dx-dashboard-form-right-column dx-dashboard-color-scheme-editor-form\"> <div class=\"dx-dashboard-form-column-content-wrapper\"> <!-- ko if: colorSchemeModel() && colorSchemeModel().selectedSignatureEntries().length > 0 --> <div class=\"dx-dashboard-form-row-content\"> <div data-bind=\"template: { name :'dx-dashboard-edit-color-scheme' }\" class=\"dx-dashboard-color-scheme-editor\"></div> </div> <!-- /ko --> <!-- ko ifnot: colorSchemeModel() && colorSchemeModel().selectedSignatureEntries().length > 0 --> <div class=\"dx-dashboard-form-row-content\"> <div class=\"dx-dashboard-form-parameter-placeholder\"> <div data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Colorization.NoSelectedSchema')\"></div> </div> </div> <!-- /ko --> </div> </div> </div></script><script type=\"text/html\" id='dx-dashboard-edit-color-scheme'> <div class=\"dx-dashboard-form-column dx-dashboard-form-left-column dx-dashboard-color-scheme-editor-form\"> <div class=\"dx-dashboard-coloring-form-colors-panel\"> <dx-dashboard-colors-component params=\"dataSource: colorSchemeModel().selectedSignatureEntries, allowModify: true, selectedEntry: selectedEntry, addNewEntry: createNewEntry, removeEntry: colorSchemeModel().removeEntry, colorPalette: colorPalette\"></dx-dashboard-colors-component> </div> </div> <div class=\"dx-dashboard-form-column dx-dashboard-form-right-column\"> <div class=\"dx-dashboard-form-column-content-wrapper dx-dashboard-properties\"> <div class=\"dx-dashboard-form-row-content\"> <div class=\"dx-dashboard-edit-color-entry-panel\"> <!-- ko if: entryEditorModel.visible --> <!-- ko with: entryEditorModel --> <!-- ko template: 'dx-dashboard-enter-new-entry-editor' --> <!-- /ko --> <div class=\"dx-dashboard-coloring-form-colorbox-panel\"> <div class=\"dx-dashboard-coloring-form-panel-header\"> <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.ColorScheme.Color')\"></span> </div> <div data-bind=\"dxColorBox: { value: color, editAlphaChannel: true, dropDownOptions: { container: $root.getWidgetContainer() } }\"> </div> </div> <!-- /ko --> <!-- /ko --> </div> </div> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-color-picker-editor\"> <div data-bind=\"dxPopover: { target: target, container: $root.getWidgetContainer(), toolbarItems: buttonItems, visible: visible, position: { boundary: $root.getWidgetContainer() } }\"> <div data-bind=\"dxScrollView: { direction: 'vertical' }\"> <div data-bind=\"dxColorView: { value: colorCss, editAlphaChannel: true, applyValueMode: 'instantly' }\"> </div> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-enter-new-entry-editor\"> <div class=\"dx-dashboard-new-entry-panel\"> <!-- ko foreach: dimensionEditors || [] --> <div class=\"dx-dashboard-new-entry-item\"> <div class=\"dx-dashboard-coloring-form-panel-header\" data-bind=\"text: dimensionKey.definition.dataMember\"></div> <!-- ko if: [\"Integer\", \"Float\", \"Double\", \"Decimal\"].indexOf(valueType) > -1 --> <div data-bind=\"dxNumberBox: { height: 40, showSpinButtons:true, disabled: $parent.isAutogenerated, value: dimensionKey.value.value }, dxValidator: { validationGroup: 'newEntry', name: dimensionKey.definition.dataMember(), validationRules: [{ type: 'required' } ] }\"> </div> <!-- /ko --> <!-- ko if: [\"DateTime\"].indexOf(valueType) > -1 --> <div data-bind=\"dxDateBox: { height: 40, width: 'auto', disabled: $parent.isAutogenerated, value: dimensionKey.value.value, dropDownOptions: { container: $root.getWidgetContainer() } }, dxValidator: { validationGroup: 'newEntry', name: dimensionKey.definition.dataMember(), validationRules: [{ type: 'required' } ] }\"> </div> <!-- /ko --> <!-- ko if: [\"Bool\",\"Boolean\"].indexOf(valueType) > -1 --> <div data-bind=\"dxCheckBox: { height: 40, disabled: $parent.isAutogenerated, value: dimensionKey.value.value }\"> </div> <!-- /ko --> <!-- ko ifnot: [\"Integer\", \"Float\", \"Double\", \"Decimal\", \"DateTime\", \"Bool\", \"Boolean\"].indexOf(valueType) > -1 --> <div data-bind=\"dxTextBox: { height: 40, disabled: $parent.isAutogenerated, value: dimensionKey.value.value }, dxValidator: { validationGroup: 'newEntry', name: dimensionKey.definition.dataMember(), validationRules: [{ type: 'required' } ] }\"> </div> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: hasMeasures --> <div class=\"dx-dashboard-color-entry-measures-selector\"> <div class=\"dx-dashboard-coloring-form-panel-header\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Colorization.MeasureNames')\"></div> <div data-bind=\"dxTagBox: { dataSource: availableMeasures, value: selectedMeasuresIds, disabled: isAutogenerated, displayExpr: 'displayText', valueExpr: '_id', dropDownOptions: { container: $root.getWidgetContainer() } }, dxValidator: { validationGroup: 'newEntry', validationRules: measuresValidationRules || [] }\"> </div> </div> <!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-dashboard-colors-view\"> <!-- ko with: colorPickerModel --><!-- ko template: { name : 'dx-dashboard-color-picker-editor', data: $data } --><!-- /ko --><!-- /ko --><div class=\"dx-dashboard-colors-view-panel\"> <!-- ko if: allowAddNewEntry --> <div class=\"dx-dashboard-form-row-caption dx-dashboard-coloring-form-panel-header\"> <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.ColorScheme.Colors')\"></span> <div class=\"dx-dashboard-form-row-action-list\"> <div class=\"dx-dashboard-form-row-action\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Colorization.AddColor'), click: addNewEntry\"> </div> </div> </div> <!-- /ko --> <div class=\"dx-color-scheme-tree-view-container dx-dashboard-form-row-content\" data-bind=\"visible: allowModify || isTreeMode()\"> <div class=\"dx-dashboard-treeview dx-dashboard-empty-message dx-color-scheme-tree-view\" data-bind=\"dxTreeView: { dataSource: dataSource, dataStructure: 'tree', height: !allowModify ? '450px' : '100%', selectByClick: allowModify ? true : false, selectionMode: allowModify ? 'single' : 'none', onItemSelectionChanged: allowModify ? onItemSelectionChanged : null, searchEnabled: true, searchExpr: ['value'], searchEditorOptions: { placeholder: $root.getLocalizationById('DashboardWebStringId.Search'), focusStateEnabled: false, hoverStateEnabled: false } }\"> <div class=\"dx-color-scheme-tree-item\" data-bind=\"css: { 'dx-color-scheme-group-tree-item': !$data.editColor }\"> <!-- ko if: $data.editColor --> <div class=\"dx-dashboard-color-scheme-item-color\" data-bind=\"click: editColor, style: { 'backgroundColor': color }\"></div> <!-- /ko --> <span class=\"dx-dashboard-color-scheme-item-name\" data-bind=\"text: value\"></span> <!-- ko if: $parent.allowModify && custom --> <div class=\"dx-dashboard-remove-icon\" data-bind=\"click: $parent.removeItem\"> <svg> <use xlink:href=\"#dx-dashboard-remove-small\" /> </svg> </div> <!-- /ko --> </div> </div> </div> <div class=\"dx-dashboard-colors-list-compact dx-dashboard-list dx-dashboard-empty-message\" data-bind=\"visible: !allowModify && !isTreeMode(), dxList: { dataSource: dataSource, focusStateEnabled: false, hoverStateEnabled: false, activeStateEnabled: false, searchEnabled: true, searchMode: 'contains', searchExpr: ['value'], noDataText: $root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'), encodeNoDataText: true, searchEditorOptions: { placeholder: $root.getLocalizationById('DashboardWebStringId.Search'), focusStateEnabled: false, hoverStateEnabled: false }, height: !allowModify ? '450px' : '100%', }\"> <div class=\"dx-dashboard-color-scheme-item\" data-bind=\"style: { 'backgroundColor': color }\"> <div class=\"dx-dashboard-color-scheme-item-name\" data-bind=\"text: value\"></div> <!-- ko if: $data.editColor --> <div class=\"dx-dashboard-edit-color-icon\" data-bind=\"click: editColor\"> <svg> <use xlink:href=\"#dx-dashboard-ds-edit\" /> </svg> </div> <!-- /ko --> </div> </div></div></script><script type=\"text/html\" id=\"dx-dashboard-format-rule-condition-type-editor\"> <div class=\"dx-dashboard-condition-type-editor\"> <div class=\"dx-field-chooser-header-container\"> <!-- ko template: 'dx-slidable-lists-navigation-area' --> <!-- /ko --> </div> <div class=\"dx-dashboard-condition-types-container dx-dashboard-list\" data-bind=\"css: { 'dx-dashboard-state-condition-selected': displayMode() === 'specificTypes' }\"> <div class=\"dx-dashboard-list dx-dashboard-empty-message\" data-bind=\"dxList: { dataSource: availableConditionTypes, selectionMode: 'single', selectedItems: availableConditionTypes() && availableConditionTypes().filter(function(value) { return value.value === conditionType(); }) || [], onItemClick: function (e) { conditionType(e.itemData.value); }, itemTemplate: 'item', onItemRendered: updateItemAppearance, encodeNoDataText: true, noDataText: $root.getLocalizationById('DashboardWebStringId.ConditionalFormatting.UnsupportedDataType') }\"> <div data-options=\"dxTemplate:{ name:'item' }\"> <span data-bind=\"text: $root.getLocalizationById(displayText)\"></span> </div> </div> <div data-bind=\"dxList: { dataSource: availableSpecificTypes, selectionMode: 'single', grouped: availableSpecificTypes().rangeStyleType !== 'None', selectedItems: selectedSpecificTypes, onItemClick: function (e) { specificType(e.itemData.value); }, itemTemplate: 'item' }, css: { 'dx-dashboard-gallery-list': availableSpecificTypes().rangeStyleType !== 'None' }\"> <div data-options=\"dxTemplate: { name:'item' }\"> <!-- ko if: $parent.availableSpecificTypes().rangeStyleType === 'None' --> <span data-bind=\"text: $root.getLocalizationById(displayText)\"></span> <!-- /ko --> <!-- ko if: $parent.availableSpecificTypes().rangeStyleType === 'Color' --> <div class=\"dx-dashboard-gallery-item\" data-bind=\"attr: { title: $root.getLocalizationById(displayText) }, foreach: $parent.getStyleList(value)\"> <div data-bind=\"css: 'dx-dashboard-appearance-range-preview', attr: { style: $data }\"></div> </div> <!-- /ko --> <!-- ko if: $parent.availableSpecificTypes().rangeStyleType === 'ColorBar' --> <div class=\"dx-dashboard-gallery-item\" data-bind=\"attr: { title: $root.getLocalizationById(displayText) }, foreach: $parent.getStyleList(value)\"> <div data-bind=\"css: 'dx-dashboard-appearance-bar-preview', attr: { style: $data }\"></div> </div> <!-- /ko --> <!-- ko if: $parent.availableSpecificTypes().rangeStyleType === 'Icon' --> <div class=\"dx-dashboard-gallery-item\" data-bind=\"attr: { title: $root.getLocalizationById(displayText) }, foreach: $parent.getStyleList(value)\"> <div class=\"dx-icon-dashboard-cf\" data-bind=\"css: $data\"></div> </div> <!-- /ko --> <!-- ko if: $parent.availableSpecificTypes().rangeStyleType === 'Gradient' --> <div class=\"dx-dashboard-gallery-item\" data-bind=\"attr: { title: $root.getLocalizationById(displayText) }, foreach: $parent.getGradientColorsList(value)\"> <div data-bind=\"css: 'dx-dashboard-appearance-gradient-preview', attr: { style: 'background-color:' + $data.css }\"></div> </div> <!-- /ko --> <!-- ko if: $parent.availableSpecificTypes().rangeStyleType === 'GradientBar' --> <div class=\"dx-dashboard-gallery-item\" data-bind=\"attr: { title: $root.getLocalizationById(displayText) }, foreach: $parent.getGradientColorsList(value)\"> <div data-bind=\"css: 'dx-dashboard-appearance-gradient-bar-preview', attr: { style: 'background-color:' + $data.css }\"></div> </div> <!-- /ko --> </div> </div> </div> </div></script><script type=\"text/html\" id='dx-dashboard-rule-ranges-editor'> <div class=\"dx-dashboard-range-editor\"> <!-- ko if: !$data.isGradient --> <div class=\"dx-dashboard-range-editor-header\"> <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-add\" data-bind=\"click: add\"> <svg><use xlink:href=\"#dx-dashboard-ce-add\" /></svg> </div> <div class=\"dx-dashboard-ce-remove-icon\" data-bind=\"click: remove, css: { 'dx-dashboard-state-selected': (!!selection() && value().length > 2) }\"> <svg><use xlink:href=\"#dx-dashboard-remove-small\" /></svg> </div> </div> <!-- /ko --> <div class=\"dx-dashboard-range-editor-content\" data-bind=\"dxDataGrid: dataGridOptions\"> <div data-options=\"dxTemplate:{ name: 'dx-dashboard-range-cell-template' }\"> <div class=\"dx-dashboard-range-cell\" data-bind=\"text: $data.text\"></div> </div> <div data-options=\"dxTemplate: { name: 'dx-dashboard-range-edit-number-template-right' }\"> <!-- ko template: { name: 'dx-dashboard-range-edit-number-template', data: $parent.createRangeNumberEditorViewModel({ grid: $data.component, isRightValue: true, rowIndex: $data.rowIndex, value: $data.data.rightValue, setValue: $data.setValue }) } --> <!-- /ko --> </div> <div data-options=\"dxTemplate: { name: 'dx-dashboard-range-edit-number-template-left' }\"> <!-- ko template: { name: 'dx-dashboard-range-edit-number-template', data: $parent.createRangeNumberEditorViewModel({ grid: $data.component, isRightValue: false, rowIndex: $data.rowIndex, value: $data.data.leftValue, setValue: $data.setValue }) } --> <!-- /ko --> </div> <div data-options=\"dxTemplate:{ name: 'dx-dashboard-range-style-template' }\"> <!-- ko template: 'dx-dashboard-style-settings-view'--> <!-- /ko --> </div> <div data-options=\"dxTemplate:{ name: 'dx-dashboard-range-style-editor-template' }\"> <!-- ko template: 'dx-dashboard-style-settings-view'--> <!-- /ko --> <div data-bind=\"dxPopover: { visible: true, width: '241px', height: 'auto', hideOnOutsideClick: false, position: { of: $element, my: 'left top', at: 'left bottom', offset: '-8 -8' }, container: $root.getWidgetContainer(), contentTemplate: 'dx-dashboard-style-settings-editor-template', wrapperAttr: { class: 'dx-dashboard-style-settings-editor-popup dx-dropdowneditor-overlay' } }\"> <div data-options=\"dxTemplate:{ name: 'dx-dashboard-style-settings-editor-template' }\" tabindex=\"0\"> <dx-dashboard-style-settings-editor params=\" target: $root.ko.observable(value), options: $parent.createStyleSettingsEditorOptions($data.data)\"> </dx-dashboard-style-settings-editor> </div> </div> </div> </div> </div></script><script type=\"text/html\" id='dx-dashboard-style-settings-view'> <div class=\"dx-dashboard-range-style dx-dashboard-range-cell\"> <dx-dashboard-style-settings-editor-item params=\"args: $parent.createStyleSettingsEditorItemOptions($data.data)\"></dx-dashboard-style-settings-editor-item> </div></script><script type=\"text/html\" id=\"dx-dashboard-range-edit-number-template\"> <!-- ko if: infinitValue --> <div class=\"dx-dashboard-range-cell\" data-bind=\"text: negativeInfinityDisplayText\"></div> <!-- /ko --> <!-- ko ifnot: infinitValue --> <!-- ko if: editorType === 'numberBox' --> <div data-bind=\"dxNumberBox: editorOptions\"></div> <!-- /ko --> <!-- ko if: editorType === 'dateBox' --> <div data-bind=\"dxDateBox: editorOptions\"></div> <!-- /ko --> <!-- /ko --> <!-- ko if: allowInfinity --> <div data-bind=\"dxPopover: { visible: true, width: '241px', height: 'auto', hideOnOutsideClick: false, position: { of: $element, my: 'left top', at: 'left bottom', boundary: $root.getWidgetContainer() }, container: $root.getWidgetContainer(), wrapperAttr: { class: 'dx-dropdowneditor-overlay dx-dashboard-range-edit-number-template' } }\"> <div data-bind=\"dxButtonGroup: buttonOptions\"></div> </div> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-style-settings-editor-item\"> <div data-bind=\"click: clickHandler, attr: { style: cssStyles, title: title, 'data-label': dataLabel }, css: cssClasses\"> </div> <!-- ko if: isRangeStop --> <div class=\"dx-dashboard-rangestop\"></div> <!-- /ko --> <!-- ko template: { name: 'dx-dashboard-popover-color-picker', data: colorPicker } --> <!-- /ko --> <!-- ko template: { name: 'dx-dashboard-custom-appearance-dialog', data: customizeAppearanceDialog } --> <!-- /ko --></script><script type=\"text/html\" id='dx-dashboard-style-settings-editor'> <!-- ko if: allowChangeViewMode --> <dx-dashboard-button-group class=\"dx-dashboard-window-definition-selector\" params=\"value: viewMode, values: [{ value: 'Appearance', displayValue: 'DashboardStringId.FormatRuleStyleAppearance'}, { value: 'Icon', displayValue: 'DashboardStringId.FormatRuleStyleIcons'}]\"></dx-dashboard-button-group> <div style=\"height: 4px;\"></div> <!-- /ko --> <div class=\"dx-dashboard-style-settings-editor\"> <!-- ko if: viewMode() === 'Appearance' --> <!-- ko if: customStyleItems --> <span class='dx-dashboard-style-settings-editor-caption' data-bind=\"text: $root.getLocalizationById('DashboardStringId.FormatRulePredefinedColor')\"></span> <!-- /ko --> <div data-bind=\"foreach: list\"> <dx-dashboard-style-settings-editor-item params=\"args: $data\"></dx-dashboard-style-settings-editor-item> </div> <!-- ko if: customStyleItems --> <span class='dx-dashboard-style-settings-editor-caption' data-bind=\"text: $root.getLocalizationById('DashboardStringId.FormatRuleCustomColor')\"></span> <div data-bind=\"foreach: customStyleItems\"> <dx-dashboard-style-settings-editor-item style=\"display: inline-block\" params=\"args: $data\"></dx-dashboard-style-settings-editor-item> </div> <!-- /ko --> <!-- /ko --> <!-- ko if: viewMode() === 'Icon' --> <div data-bind=\"foreach: iconList\"> <dx-dashboard-style-settings-editor-item params=\"args: $data\"></dx-dashboard-style-settings-editor-item> </div> <!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-dashboard-confirm-dialog\"> <div data-bind=\"dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { of: $root.getWidgetContainer(), boundary: $root.getWidgetContainer() }, title: confirmTitle, visible: confirmVisible, toolbarItems: confirmButtons, onHidden: function(e) { confirmHidden(e); }, width: '550px', height: '280px', wrapperAttr: { class: 'dx-dashboard-confirm dx-dashboard-typography' } }\"> <span data-bind=\"html: confirmText\"></span> </div></script><script type=\"text/html\" id='dx-dash-currency-selector'> <div class=\"dx-dashboard-form-wrapper dx-dashboard-currency-selector dx-dashboard-properties\"> <div class=\"dx-dashboard-form-column dx-dashboard-form-left-column\"> <div class=\"dx-dashboard-form-column-content-wrapper\"> <div class=\"dx-dashboard-form-row-field\"> <div class=\"dx-dashboard-form-row-caption\"> <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Currency.Currency')\"></span> </div> <div class=\"dx-dashboard-list\" data-bind=\"dxList: { dataSource: { store: currencies, paginate: false }, displayExpr: 'displayText', selectedItem: selectedCurrency, selectionMode: 'single', onContentReady: function (e) { e.component.scrollToItem(currencies.indexOf(selectedCurrency()) + 1); }, itemTemplate: 'currencyItemWithPreview', searchEnabled: true, searchExpr: 'displayText', searchEditorOptions: { placeholder: $root.getLocalizationById('DashboardWebStringId.Search') } }\"> <div data-options=\"dxTemplate:{ name:'currencyItemWithPreview' }\"> <!-- ko template: { name: 'dx-dashboard-currency-list-item' }--> <!-- /ko --> </div> </div> </div> <div class=\"dx-dashboard-form-row-field\"> <div class=\"dx-dashboard-form-row-caption\"> <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Currency.CurrencyCulture')\"> </div> <div data-bind=\"dxSelectBox: { dataSource: selectedCurrency() && selectedCurrency().cultures || [], displayExpr: 'displayText', value: selectedCulture, placeholder: $root.getLocalizationById('DashboardStringId.ParametersSelectorText'), noDataText: $root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'), encodeNoDataText: true, dropDownOptions: { container: $root.getWidgetContainer() }, searchEnabled: true, searchExpr: 'displayText' }\"></div> </div> </div> </div> <div class=\"dx-dashboard-form-column dx-dashboard-form-right-column\"> <div class=\"dx-dashboard-form-column-content-wrapper\"> <div class=\"dx-dashboard-form-row-caption\"> <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Preview')\"></span> </div> <div class=\"dx-dashboard-form-row-content\"> <div class=\"dx-dashboard-currency-selector-preview\"> <!-- ko if: $data.previewPositive && $data.previewNegative --> <div data-bind=\"text: $data.previewPositive\"></div> <div data-bind=\"text: $data.previewNegative\"></div> <!-- /ko --> <!-- ko if: $data.previewWarning --> <div class=\"dx-dashboard-currency-selector-preview-warn\" data-bind=\"text: $data.previewWarning\"></div> <!-- /ko --> </div> </div> </div> </div> </div></script><script type=\"text/html\" id='dx-dashboard-currency-editor-template'> <div data-bind=\"dxSelectBox: { dataSource: currencies, displayExpr: 'displayText', value: selectedCurrency, disabled: disabled, placeholder: $root.getLocalizationById('DashboardStringId.ParametersSelectorText'), noDataText: $root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'), encodeNoDataText: true, dropDownOptions: { container: $root.getWidgetContainer() }, itemTemplate: 'currencyItemWithPreview', searchEnabled: true, searchExpr: 'displayText' }\"> <div data-options=\"dxTemplate:{ name:'currencyItemWithPreview' }\"> <!-- ko template: { name: 'dx-dashboard-currency-list-item' } --> <!-- /ko --> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-currency-list-item\"> <div class=\"dx-dashboard-currency-list-item\"> <div class=\"dx-dashboard-currency-list-item-display-text\"> <div data-bind=\"text: displayText\"> </div> </div> <div class=\"dx-dashboard-currency-list-item-preview\" data-bind=\"text: previewText\"> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-form-currency-settings\"> <dx-dashboard-currency-selector params=\"currencyCultureName: dashboard() && dashboard().currencyCultureName\" style=\"height: 100%;\"></dx-dashboard-currency-selector></script><script type=\"text/html\" id='dx-dashboard-datasource-browser'> <div class=\"dx-dashboard-form-wrapper dx-dashboard-datasource-browser-wrapper\" data-bind=\"\"> <div class=\"dx-dashboard-form-column dx-dashboard-form-left-column\"> <div class=\"dx-dashboard-form-column-content-wrapper\"> <div class=\"dx-dashboard-form-row\"> <div class=\"dx-dashboard-form-row-caption\"> <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.DataSources.UsedDataSources')\"></span> <div class='dx-dashboard-form-row-action-list'> <!-- ko foreach: dataSourceActions --> <div class=\"dx-dashboard-form-row-action\" data-bind=\"click: click, text: text, css: { 'disabled-action': disabled }\"> </div> <!-- /ko --> </div> </div> <div class=\"dx-dashboard-form-row-content dx-dashboard-datasource-list-wrapper\"> <!-- ko template: 'dx-dashboard-datasource-used-datasources' --> <!-- /ko --> </div> </div> </div> </div> <div class=\"dx-dashboard-form-column dx-dashboard-form-right-column\"> <div class=\"dx-dashboard-form-column-content-wrapper\"> <div class=\"dx-dashboard-form-row-caption dx-dashboard-datasource-tree-actions-wrapper\"> <span></span> <div class='dx-dashboard-form-row-action-list'> <!-- ko foreach: editDataSourceActions --> <!-- ko if: visible() --> <div class=\"dx-dashboard-form-row-action\" data-bind=\"click: click, text: text\"> </div> <!-- /ko --> <!-- /ko --> <!-- ko if: $data.filterEditorModel() !== null --> <!-- ko template: { name: 'dx-filtereditor-popup', data: filterEditorModel } --> <!-- /ko --> <!-- /ko --> </div> </div> <div class=\"dx-dashboard-form-row-content dx-dashboard-datasource-tree-wrapper\"> <!-- ko template: { name: 'dx-dashboard-datasource-tree', data: $data } --> <!-- /ko --> </div> </div> </div> </div> <div data-bind=\"dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { my: 'center', at: 'center', of: $root.getWidgetContainer(), boundary: '.dx-dashboard-datasource-browser-wrapper' }, height: '80%', width: '700px', animation: { }, focusStateEnabled: true, hideOnOutsideClick: false, toolbarItems: popupContent() && popupContent().toolbarItems || [], onHidden: function() { $data.popupContent(undefined); }, visible: popupVisible, showTitle: true, title: popupContent() && popupContent().title || '', wrapperAttr: { class: 'dx-dashboard-datasource-browser-popup dx-dashboard-typography' } }\"> <!-- ko if: popupVisible --> <!-- ko with: popupContent --> <!-- ko template: { name: template, data: { extension: $data.bindingData ? $data.bindingData : $data, dataSourcesFilter: dataSourcesFilter, federationSources: null } } --> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div> <!-- ko template: { name: 'dx-dashboard-calc-field-editor', data: calcFieldEditor  } --> <!-- /ko --></script><script type=\"text/html\" id='dx-dashboard-datasource-used-datasources'> <!-- ko if: $data.usedDataSourcesExist() --> <div class=\"dx-dashboard-datasources-list\" data-bind=\"dxList: { dataSource: dataSourceBrowser._dataSources, selectionMode: 'single', selectedItem: selectedDataSource, nextButtonText: $root.getLocalizationById('DashboardWebStringId.More'), searchEnabled: true, searchExpr: 'name', searchEditorOptions: { placeholder: $root.getLocalizationById('DashboardWebStringId.Search') } }\"> <div class=\"dx-dashboard-datasource-item\"> <div class=\"dx-dashboard-datasource-description\"> <span data-bind=\"text: name()\"></span> </div> <div class=\"dx-dashboard-datasource-icons\"> <div class=\"dx-dashboard-datasource-icon dx-dashboard-datasource-icon-rename\" data-bind=\"click: $parent.showRenameDataSourceForm\"> <svg><use xlink:href=\"#dx-dashboard-rename\" /></svg> </div> <div class=\"dx-dashboard-datasource-icon dx-dashboard-datasource-icon-remove\" data-bind=\"click: $parent.removeDataSource\"> <svg><use xlink:href=\"#dx-dashboard-remove-small\" /></svg> </div> </div> </div> </div> <!-- ko template: renameDataSourcePopup.template --> <!-- /ko --> <!-- /ko --> <!-- ko ifnot: $data.usedDataSourcesExist() --> <div class=\"dx-dashboard-form-parameter-placeholder\"> <div> <!-- ko if: availableDataSourcesExist() --> <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.DataSources.NoUsedDataSources')\"></span> <br /><br /> <!-- ko if: $data.sqlDataSourceWizard --> <span class=\"dx-dashboard-form-inline-action\" data-bind=\"click: showAddDataSourceForm, text: $root.getLocalizationById('DashboardWebStringId.DataSources.AddDataSource')\"></span> <!-- /ko --> <!-- /ko --> <!-- ko if: !availableDataSourcesExist() --> <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.DataSources.NoAvailableDataSources')\"></span> <!-- /ko --> </div> </div> <!-- /ko --></script><script type=\"text/html\" id='dx-dashboard-datasource-tree'> <div data-bind=\"dxScrollView: { direction: 'vertical' }\"> <!-- ko with: dataSourceTreeListViewModel.treeListEditorOption --> <div class=\"dx-dashboard-datasource-browser-tree\" data-bind=\"treelist: $data, css: {'dx-state-loading': itemsProvider.loading() }\"></div> <div class=\"dx-dashboard-treelist-loading\" data-bind=\"css: { 'dx-state-active': itemsProvider.loading() }\">Loading</div> <!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-dashboard-treelist-item-template\"> <div class=\"dx-treelist-item\" data-bind=\"event: { dblclick: function() { $data.dblClickHandler ? $data.dblClickHandler($data) : $data.toggleCollapsed() } }, css: { 'dx-treelist-item-selected': isSelected, 'dx-treelist-item-collapsed': collapsed, 'dx-treelist-group-item': hasItems, 'dx-dashboard-treelist-item-disabled': data.isList, 'dx-dashboard-corrupted-calc-field': data.isCorruptedCalcField }, click: toggleSelected\"> <div class=\"dx-dashboard-datasource-tree-item-column\" data-bind=\"styleunit: { 'paddingLeft': 20 * level + 10 }\"> <div class=\"dx-treelist-item-images\"> <!-- ko if: !data.style --> <div class=\"dx-treelist-collapsedbutton\" data-bind=\"css: nodeImageClass, click: toggleCollapsed\"></div> <!-- /ko --> <!-- ko if: !!data.style --> <div class=\"dx-dashboard-datasource-field-icon\" data-bind=\"css: data.style\"> <div> <svg> <use xlink:href=\"#dx-dashboard-calc-field\"/> </svg> </div> </div> <!-- /ko --> </div> <div class=\"dx-treelist-caption\"> <div class=\"dx-treelist-selectedcontent\" data-bind=\"event: { dblclick: function() { $data.dblClickHandler && $data.dblClickHandler($data); } }\"> <div class=\"dx-treelist-text\" data-bind=\"text: text, attr: { title: text }\"></div> </div> </div> </div> <div class=\"dx-dashboard-datasource-tree-item-column\" style=\"padding: 0 12px;\"> <!-- ko if: !data.isCorruptedCalcField --> <!-- ko if: data.field.fieldType && data.field.fieldType() !== 'Unknown' --> <span data-bind=\"text: data.field.fieldType\"></span> <!-- /ko --> <!-- ko if: data.isList --> <span data-bind=\"text: $root.getLocalizationById('DashboardStringId.MessageCollectionTypesNotSupported'), attr: { title: $root.getLocalizationById('DashboardStringId.MessageCollectionTypesNotSupported')}\"></span> <!-- /ko --> <!-- /ko --> <!-- ko if: data.isCorruptedCalcField --> <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.DataSources.CalculatedField.Corrupted'), attr: { title: $root.getLocalizationById('DashboardStringId.MessageCollectionTypesNotSupported')}\"></span> <!-- /ko --> </div> <div class=\"dx-dashboard-datasource-tree-item-column\" style=\"border-right: none; text-align: center;\"> <!-- ko foreach: data.innerActions --> <div class=\"dx-dashboard-datasource-field-icon\"  data-bind=\"click: click, css: style\"> <svg><use data-bind=\"xlinkHref: icon\" /></svg> </div> <!-- /ko --> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-form-datasource-browser\"> <!-- ko with: $data --> <!-- ko template: { name :'dx-dashboard-datasource-browser' } --> <!-- /ko --> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-data-source-wizard\"> <div data-bind=\"dxLoadPanel: { visible: loadingPanelVisible, hideOnOutsideClick: true, container: $root.getWidgetContainer(), position: { of: $root.getWidgetContainer() } }\"></div> <!-- Data Source wizard popup should be first child of DashboardControl --> <!-- ko dx-dashboard-element-accessor-binding: { element: wizardElement } --> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-data-source-wizard-binding\"> <!-- ko if: wizardModel.isVisible() --> <!-- ko template: { name: 'dx-wizard-newlayout', data: wizardModel } --> <!-- /ko --> <!-- /ko --></script><script type=\"text/html\" id='dx-dashboard-expression-editor-view'> <!-- ko template: { name: editorTemplate, data: editor } --> <!-- /ko --> <div class=\"dx-dashboard-filter-expression-editor\"> <div class=\"dx-dashboard-filter-expression-editor-header\"> <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-edit\" data-bind=\"click: edit\"> <svg><use xlink:href=\"#dx-dashboard-ce-edit\" /></svg> </div> <div class=\"dx-dashboard-ce-remove-icon\" data-bind=\"click: remove, css: { 'dx-dashboard-state-selected': !!criteriaString() }\"> <svg><use xlink:href=\"#dx-dashboard-remove-small\" /></svg> </div> </div> <div class=\"dx-dashboard-filter-expression-edit-criteria\"> <div data-bind=\"text: criteriaString\"></div> </div> </div></script><script type=\"text/html\" id='dx-dashboard-datasource-available-datasources'> <div class=\"dx-dashboard-datasources-list-holder\"> <!-- ko if: extension.uiState() === 'error' --> <!-- ko if: extension.errorState() --> <div class=\"dx-dashboard-datasources-content dx-dashboard-datasources-error\"> <div class=\"dx-dashboard-datasources-error-item\"> <span class=\"dx-dashboard-datasources-error-title\" data-bind=\"text: extension.errorState().title\"></span> <br><br> <span class=\"dx-dashboard-datasources-error-details\" data-bind=\"text: extension.errorState().detail\"></span> </div> </div> <!-- /ko --> <!-- /ko --> <!-- ko if: extension.uiState() === 'loading' --> <div class=\"dx-dashboard-datasources-content dx-dashboard-datasources-loading\"> <div class=\"dx-dashboard-control-loading\" data-bind=\"text:$root.getLocalizationById('DashboardStringId.MessageLoading')\"></div> </div> <!-- /ko --> <!-- ko if: extension.uiState() === 'live' --> <div class=\"dx-dashboard-datasources-list-header\"> <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.DataSources.ChooseDataSource')\"></span> <!-- ko if: extension.canCreateDataSourceWizard --> <span class=\"dx-dashboard-datasource-action\" data-bind=\"click: function() { extension.showCreateDataSourceWizard(federationSources); }, text: $root.getLocalizationById('DashboardWebStringId.DataSources.CreateNewDataSource'), attr: { title: $root.getLocalizationById('DashboardWebStringId.DataSources.CreateDataSource.Tooltip') } \"></span> <!-- /ko --> </div> <div class=\"dx-dashboard-datasources-list dx-dashboard-list\" data-bind=\"dxList: { dataSource: extension.getDataSources(dataSourcesFilter), selectionMode: 'single', selectedItems: extension.selectedDataSources, noDataText: '', encodeNoDataText: true, nextButtonText: $root.getLocalizationById('DashboardWebStringId.More'), searchEnabled: true, searchExpr: 'name', searchEditorOptions: { placeholder: $root.getLocalizationById('DashboardWebStringId.Search') }}\"> <div class=\"dx-dashboard-datasource-item\"> <div class=\"dx-dashboard-datasource-description\"> <span data-bind=\"text: name()\"></span> </div> </div> </div> <!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-dashboard-binding-properties-empty-item\"> <!-- ko if: isDesignMode --> <div class=\"dx-dashboard-layout-text\"> <span class=\"dx-dashboard-layout-link\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.ClickHereInvitation'), click: click\"></span> <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.BindDataInvitation')\"></span> </div> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-binding-properties\"> <!-- ko template: { name: data.template, data: $data } --> <!-- /ko --> <div data-bind=\"css: { 'dx-visible-properties': !!data.propertiesController.mainModel() }\" class=\"dx-dashboard-binding-panel-properties-content\"> <div class=\"dx-dashboard-binding-panel-header-container\"> <div class=\"dx-dashboard-arrow-back dx-toolbar-item-content\"> <div data-bind=\"dxButton: { onClick: hideBindingProperties, type: 'normal', stylingMode: 'text', icon: 'arrowleft' }\"></div> </div> <!-- ko if: isSecondaryPanelVisible() --> <h5 data-bind=\"text: $root.getLocalizationById(data.propertiesController.secondaryModel().displayText)\"></h5> <!-- /ko --> </div> <div class=\"dx-dashboard-binding-panel-details dx-dashboard-slidable-content\" data-bind=\"css: {'dx-dashboard-slide-to-right': isSecondaryPanelVisible() }\"> <div data-bind=\"dxScrollView: { }\"> <!-- ko if: data.propertiesController.mainModel() --> <!-- ko template: { name: 'dx-dashboard-properties-accordion', data: { propertiesController: data.propertiesController } } --> <!-- /ko --> <!-- /ko --> </div> <div data-bind=\"dxScrollView: { }\"> <div> <!-- ko if: data.propertiesController.secondaryModel()  --> <!-- ko template: { name: 'dx-dashboard-properties-accordion', data: { propertiesController: data.propertiesController, useSecondaryModel: true } } --> <!-- /ko --> <!-- /ko --> </div> </div> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-convert-to\"> <!-- ko using: data --> <div class=\"dx-dashboard-binding-panel-options dx-dashboard-slidable-content dx-dashboard-convert-to-panel dx-dashboard-slide-to-right\" style=\"overflow:visible;\"> <div class=\"dx-dashboard-binding-panel-details dx-dashboard-toolbox-extension\"> <div data-bind=\"dxScrollView: { direction: 'vertical' }\"> <div class=\"dx-dashboard-toolbox\"> <div class=\"dx-dashboard-toolbox-group-separator\"></div> <!-- ko foreach: groups --> <div class=\"dx-dashboard-toolbox-group\" data-bind=\"text: groupTitle\"></div> <!-- ko foreach: items --> <div class=\"dx-dashboard-toolbox-item\" data-bind=\" attr: { 'data-item-type': type, title: title }, click: convert, css: {'dx-state-disabled': disabled }\" > <svg> <use data-bind=\"xlinkHref: icon\"></use> </svg> <div class=\"dx-dashboard-toolbox-item-hover\"></div> </div> <!-- /ko --> <div class=\"dx-dashboard-toolbox-group-separator\"></div> <!-- /ko --> </div> <div class=\"dx-dashboard-duplicate-action-container\"> <div class=\"dx-dashboard-duplicate-action\" data-bind=\"dxButton: { text: duplicateActionCaption, onClick: duplicate }\"></div> </div> </div> </div> </div> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-form-new\"> <div class=\"dx-dashboard-form-new dx-dashboard-form-column\"> <div class=\"dx-dashboard-form-row\"> <div class=\"dx-dashboard-form-row-caption\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.New.DashboardName')\"></div> <div data-bind=\"dxTextBox: { placeholder: $root.getLocalizationById('DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder'), value: dashboardName }\"></div> <div class=\"dx-dashboard-form-new-content\"> <!-- ko if: accessibleDataSourcesExtension()  --> <!-- ko template: { name: accessibleDataSourcesExtension().templateName, data: { extension: accessibleDataSourcesExtension().viewModel, dataSourcesFilter: function() { return true; }, federationSources: [] } } --> <!-- /ko --> <!-- /ko --> </div> <div class=\"dx-dashboard-form-new-button\"> <div data-bind=\"dxButton: { text: $root.getLocalizationById('DashboardWebStringId.DataSources.CreateDataSource'), onClick: createNewDashboard, disabled: createNewDashboardDisabled, width: '160px', height: '40px', type: 'default' }\"> </div> </div> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-add-new-dashboard\"> <!-- ko if: isDesignMode() --> <div data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.AddNewDashboard')\"></div>&nbsp; <a href=\"#\" data-bind=\"click: showCreateNewDashboard, text: $root.getLocalizationById('DashboardWebStringId.DashboardMenuNewDashboardCreate')\"></a>. <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-options\"> <div class=\"dx-dashboard-binding-panel-options dx-dashboard-slidable-content\" data-bind=\"css: {'dx-dashboard-slide-to-right': isSecondaryPanelVisible() }\" style=\"overflow:visible;\"> <div class=\"dx-dashboard-binding-panel-details\"> <!-- ko with: data --> <div data-bind=\"dxScrollView: { direction: 'vertical' }\"> <!-- ko ifnot: propertiesController.accordionDataSource().length > 1 --> <!-- ko with: propertiesController.accordionDataSource()[0] --> <div class=\"dx-dashboard-properties-single-tab\"> <!-- ko template: 'dx-dashboard-accordion-tab-content' --> <!-- /ko --> </div> <!-- /ko --> <!-- /ko --> <!-- ko if: propertiesController.accordionDataSource().length > 1 --> <!-- ko template: { name: 'dx-dashboard-properties-accordion', data: { propertiesController: propertiesController } } --> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> </div> <div> <div class=\"dx-dashboard-secondary-header-container\"> <div class=\"dx-dashboard-arrow-back dx-toolbar-item-content\"> <div data-bind=\"dxButton: { onClick: hideBindingProperties, type: 'normal', stylingMode: 'text', icon: 'arrowleft' }\"></div> </div> <!-- ko if: data.propertiesController.secondaryModel--> <h5 data-bind=\"text: $root.getLocalizationById(data.propertiesController.secondaryModel().displayText)\"></h5> <!-- /ko --> </div> <div data-bind=\"dxScrollView: { direction: 'vertical' }\"> <!-- ko if: data.propertiesController.secondaryModel--> <!-- ko template: { name: 'dx-dashboard-properties-accordion', data: { propertiesController: data.propertiesController, useSecondaryModel: true } } --> <!-- /ko --> <!-- /ko --> </div> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-form-open\"> <div data-bind=\"dxList: { dataSource: { load: dashboardsListStore, totalCount: function() { return 0; }, paginate: false, searchExpr: 'name' }, noDataText: '', encodeNoDataText: true, searchEnabled: true, pageLoadingText: $root.getLocalizationById('DashboardStringId.MessageLoading'), nextButtonText: $root.getLocalizationById('DashboardWebStringId.More'), displayExpr: 'name', keyExpr: 'id', searchEditorOptions: { placeholder: $root.getLocalizationById('DashboardWebStringId.Search') }, hoverStateEnabled: true, height: '100%', onItemClick: openDashboard }\" class=\"dx-dashboard-form-open\"> </div></script><script type=\"text/html\" id=\"dx-dashboard-form-title-settings\"><div class=\"dx-dashboard-form-wrapper\"> <div class=\"dx-dashboard-form-column dx-dashboard-form-left-column\"> <div class=\"dx-dashboard-form-column-content-wrapper\"> <div class=\"dx-dashboard-form-row-content\" data-bind=\"dxScrollView: { direction: 'vertical' }\"> <div data-bind=\"dx-dashboard-form-adapter: { target: titleSettings }\" class=\"dx-dashboard-properties\"></div> </div> </div> </div> <div class=\"dx-dashboard-form-column dx-dashboard-form-right-column\"> <div class=\"dx-dashboard-form-column-content-wrapper\"> <div class=\"dx-dashboard-form-row-caption\"> <span data-bind=\"text: formCaption\"></span> </div> <div class=\"dx-dashboard-form-row-content\"> <div class=\"dx-dashboard-title-settings-preview-wrapper\"> <dashboard-title params=\"componentArgs: getTitleComponentArgs($element)\"> </dashboard-title> </div> </div> </div> </div></div></script><script type=\"text/html\" id=\"dx-dashboard-text-preview\"> <div data-bind=\"text: $data\"></div></script><script type=\"text/html\" id=\"dx-dashboard-flow-mode-settings\"> <div class=\"dx-dashboard-flow-mode-settings\"> <div data-bind=\"dxSelectBox: selectBoxOptions\" class=\"dx-dashboard-list\" style=\"display: inline-block; margin-right: 5px; width: 60%\"> </div><div data-bind=\"dxNumberBox: numberBoxOptions\" style=\"display: inline-block; width: calc(40% - 5px)\"></div> </div></script><script type=\"text/html\" id=\"dx-dashboard-action-buttons\"> <div class=\"dx-dashboard-action-buttons\" data-bind=\"foreach: buttons\"> <div data-bind=\"dxButton: $data\"></div> </div></script><script type=\"text/html\" id=\"dx-dashboard-nested-propertygrid-editor\"> <div class=\"dx-dashboard-accordion-group\"> <div class=\"dx-accordion-item-title\"> <h5 data-bind=\"text: caption\"></h5> </div> <div data-bind=\"dx-dashboard-form-adapter: { target: object }\" class=\"dx-dashboard-properties\"></div> </div></script><script type=\"text/html\" id=\"dx-dashboard-nullable-numberbox\"> <div data-bind=\"dxButtonGroup: buttonGroupOptions\"></div> <div class=\"dx-dashboard-gauge-nb\" data-bind=\"dxNumberBox: numberBoxOptions\" style=\"margin-top: 10px;\"></div></script><script type=\"text/html\" id=\"dx-dashboard-base-item-surface\"> <div class=\"dx-dashboard-data-binding-surface\" data-bind=\"css: { 'dx-visible-properties': !!data.propertiesController.mainModel() }\"> <!-- ko template: { name: 'dx-dashboard-context-menu-header', data: { title: title, click: hideBindingPanel, detailVisible: detailVisible } }--> <!-- /ko --> <div class=\"dx-dashboard-data-binding-panel\"> <div data-bind=\"dxScrollView: { direction: 'vertical' }\"> <div class=\"dx-dashboard-binding-panel-content\" data-bind=\"dx-dashboard-container-draggable: data\"> <!-- ko foreach: data.dataSections --> <div class=\"dx-dashboard-section\"> <!-- ko if: $data.sectionInfo && sectionInfo.actions --> <div class=\"dx-dashboard-section-actions\"> <!-- ko foreach: sectionInfo.actions --> <div class=\"dx-dashboard-section-action\" data-bind=\"attr: { title: $root.getLocalizationById(title) }, click: action\"> <!-- ko lazy: { if: $parents[2].detailVisible } --> <svg><use data-bind=\"xlinkHref: icon\"></use></svg> <!-- /ko --> </div> <!-- /ko --> </div> <!-- /ko --> <!-- ko template: { name: $data.template, data: $data } --> <!-- /ko --> </div> <!-- /ko --> </div> </div> </div> <!-- ko template: { name: 'dx-dashboard-item-datasource', data: data } --> <!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-dashboard-item-datasource\"> <div class=\"dx-dashboard-data-source-panel\"  data-bind=\"css: { 'dx-dashboard-data-source-panel-opened': changeDataSourcePanelVisible() }\"> <div class=\"dx-dashboard-data-source-header\" data-bind=\"click: changeDataSource\"> <div class=\"dx-dashboard-text-overflow\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Binding.DataSource')\"></div> <div class=\"dx-dashboard-data-source-options\" data-bind=\"css: { 'dx-dashboard-data-source-options-active': changeDataSourcePanelVisible()  }\"> <svg><use xlink:href=\"#dx-dashboard-item-data-source\" /></svg> </div> </div> <div class=\"dx-dashboard-data-source-body\"> <div class=\"dx-dashboard-data-source-options-panel\" data-bind=\"style: { height: changeDataSourcePanelVisible() ? '' : '0px' } \"> <div> <div class=\"dx-dashboard-data-source-chooser\"> <dx-datasource-chooser params=\"dataSourceBrowser: dataSourceBrowser, dataSource: dataSourceName, dataMember: dataMemberName, active: changeDataSourcePanelVisible\"></dx-datasource-chooser> </div> <span class=\"dx-dashboard-data-source-options-control\"> <span class=\"dx-dashboard-text-overflow\" data-bind=\"click: saveDataSourceChanges, text: $root.getLocalizationById('DashboardWebStringId.DataSources.OK')\">OK</span> <span class=\"dx-dashboard-text-overflow\" data-bind=\"click: changeDataSource, text: $root.getLocalizationById('DashboardWebStringId.DataSources.Cancel')\"></span> </span> </div> </div> <div class=\"dx-dashboard-data-source-info\" data-bind=\"text: $root.getLocalizationById(dataSourceDisplayText()), attr: { title: $root.getLocalizationById('DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip') }, style: { height: changeDataSourcePanelVisible() ? '0px' : '' }, click: changeDataSource, css: { 'dx-dashboard-data-source-info-alert': needSetDataSource }\"></div> </div> </div> <!-- ko template: { name: \"dx-dashboard-confirm-dialog\", data: confirmDialogViewModel } --> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-item-plate\"> <div class=\"dx-dashboard-item-plate-container\"> <div class=\"dx-dashboard-item-plate dx-layout-item-plate dx-state-selected\" draggable=\"true\" > <svg><use xlink:href=\"#dx-dashboard-drag\" /></svg> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-item-menu-holder\"> <div class=\"dx-dashboard-item-controls\"> <dx-dashboard-item-menu params=\" layoutController: $data.dockingLayoutController, layoutItem: $data.layoutItem, itemMenuViewModelContainer: $data.itemMenuViewModelContainer, notificationController: $data.notificationController\" data-bind=\"css: { 'dx-state-selected': $data.layoutItem.isSelected }\"></dx-dashboard-item-menu> </div></script><script type=\"text/html\" id=\"dx-dashboard-item-menu\"> <div class=\"dx-dashboard-item-menu-container\" data-bind=\"css: menuContainerCssClasses\"> <div class=\"dx-dashboard-item-menu\" data-bind=\"menuVisibilitySubscription: { visible: menuItemDetailVisible }\"> <!-- ko if: isCollapsedStateToggleVisible() --> <div class=\"dx-dashboard-designer-menu-item dx-dashboard-item-menu-toggle\" data-bind=\"click: collapsedStateToggle, css: isCollapsed() ? 'dx-dashboard-item-menu-expand' : ''\"> <svg><use xlink:href=\"#dx-dashboard-item-menu-collapse\" /></svg> </div> <!-- ko if: !isCollapsed() --> <div class=\"dx-dashboard-designer-menu-separator\"></div> <!-- /ko --> <!-- /ko --> <!-- ko if: !isCollapsed() --> <!-- ko foreach: contextMenuItemViewModels --> <div data-bind=\"css: menuButton.cssClass, click: menuButton.clickHandler, attr: { title: menuButton.hint }\" class=\"dx-dashboard-designer-menu-item\"> <svg><use data-bind=\"xlinkHref: menuButton.icon\"></use></svg> <div data-bind=\"dxPopover: getPopoverOptions($root.getWidgetContainer())\"> <!-- ko lazy: { template: 'dx-dashboard-context-menu-panel-content' } --> <!-- /ko --> </div> </div> <!-- /ko --> <div class=\"dx-dashboard-designer-menu-separator\"></div> <div class=\"dx-dashboard-remove-item-button dx-dashboard-designer-menu-item\" data-bind=\"click: deleteCurrentItemAction, attr: { title: deleteCurrentItemActionCaption }\"> <svg><use xlink:href=\"#dx-dashboard-remove\"></use></svg> </div> <!-- /ko --> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-context-menu-header\"> <div class=\"dx-dashboard-panel-header\"> <div class=\"dx-dashboard-panel-header-title\" data-bind=\"text: title\"></div> <div class=\"dx-dashboard-close-panel dx-toolbar-item-content\"> <div data-bind=\"dxButton: { onClick: click, type: 'normal', stylingMode: 'text', icon: 'close' }\"></div> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-context-menu-panel-content\"> <!-- ko with: menuPropertiesPanel --><div class=\"dx-dashboard-context-menu-panel\" data-bind=\"css: cssClasses, style: style\"> <!-- ko if: title --> <!-- ko template: { name: 'dx-dashboard-context-menu-header', data: { title: title, click: hidePanelAction, detailVisible: detailVisible } }--> <!-- /ko --> <!-- /ko --> <!-- ko if: detailVisible --> <!-- ko template: { name: panelContent.view, data: panelContent.viewModel } --> <!-- /ko --> <!-- /ko --></div><!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-custom-range-collection-item\"> <div class=\"dx-dashboard-collection-editor-item\" data-bind=\"style: { 'font-weight': $data.customTemplateGetItemWeight($data.itemModel)}\"> <div data-bind=\"text: $root.getLocalizationById($data.parent.getItemText($data.itemModel))\"></div> </div></script><script type=\"text/html\" id='dx-dashboard-field-picker'> <div data-bind=\"dxFieldListPicker: { path: pathToMembers, value: value, displayValue: displayValue, itemsProvider: itemsProvider, treeListController: treeListController, disabled: disabled, placeholder: $root.getLocalizationById('DashboardStringId.ParametersSelectorText') }\"></div></script><script type=\"text/html\" id='dx-dashboard-parameter-settings'> <div class=\"dx-dashboard-form-column dx-dashboard-form-left-column\"> <div data-bind=\"dxScrollView: { direction: 'vertical', height: '100%' }\"> <div data-bind=\"dx-dashboard-form-adapter: { target: commonParameterSettings  }\" class=\"dx-dashboard-properties\"></div> </div> </div> <div class=\"dx-dashboard-form-column dx-dashboard-form-right-column\"> <div class=\"dx-dashboard-form-column-content-wrapper dx-dashboard-properties\"> <div class=\"dx-dashboard-form-row-content\" data-bind=\"dxScrollView: { direction: 'vertical' }\"> <div data-bind=\"dx-dashboard-form-adapter: { target: lookUpParameterType  }\" class=\"dx-dashboard-properties\"></div> <div class=\"dx-dashboard-parameter-lookup-settings\"> <!-- ko with: staticListLookUpSettings --> <div data-bind=\"dx-dashboard-form-adapter: { target: $data }\" class=\"dx-dashboard-properties\"></div> <!-- /ko--> <!-- ko with: dynamicListLookUpSettings --> <div data-bind=\"dx-dashboard-form-adapter: { target: $data }\" class=\"dx-dashboard-properties\"></div> <!-- /ko --> </div> </div> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-form-parameters-settings\"> <!-- ko if: dashboard() --> <div class=\"dx-dashboard-form-wrapper\"> <div class=\"dx-dashboard-form-column dx-dashboard-form-left-column\"> <div class=\"dx-dashboard-form-column-content-wrapper\"> <div class=\"dx-dashboard-form-row-caption\"> <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Parameters.ParameterList')\"></span> <div class='dx-dashboard-form-row-action-list'> <!-- ko if: dashboard().parameters().length > 1 --> <div class=\"dx-dashboard-form-row-action\" data-bind=\"click: toggleReordering, text: allowReordering() ? $root.getLocalizationById('DashboardWebStringId.Parameters.Done'): $root.getLocalizationById('DashboardWebStringId.Parameters.Reorder')\"> </div> <!-- /ko --> <!-- ko if: dashboard().parameters().length > 0 --> <div class=\"dx-dashboard-form-row-action\" data-bind=\"click: addParameter, text: $root.getLocalizationById('DashboardWebStringId.Add'), attr: { title: $root.getLocalizationById('DashboardWebStringId.Parameters.AddParameter.Tooltip') }\"> </div> <!-- /ko --> </div> </div> <!-- ko if: dashboard().parameters().length > 0 --> <div class=\"dx-dashboard-form-row-content\"> <div class=\"dx-dashboard-form-settings-parameters-list\" data-bind=\"dxList: { dataSource: dashboard().parameters, selectionMode: 'single', itemDragging: { allowReordering: allowReordering, }, onItemReordered: reorderParameters, selectedItems: $data.selectedParameters, nextButtonText: $root.getLocalizationById('DashboardWebStringId.More'), searchEnabled: true, searchExpr: ['name', 'description'], searchEditorOptions: { placeholder: $root.getLocalizationById('DashboardWebStringId.Search') } }\"> <div class=\"dx-dashboard-parameter-item\"> <div class=\"dx-dashboard-parameter-entry\"> <div> <span class=\"dx-dashboard-parameter-name\" data-bind=\"text: name\"></span> <!-- ko if: description--> <br/> <span class=\"dx-dashboard-parameter-description\" data-bind=\"text: description\"></span> <!-- /ko --> </div> </div> <!-- ko ifnot: $parent.allowReordering --> <div class=\"dx-dashboard-remove-icon\" data-bind=\"click: $parent.removeParameter\"> <svg><use xlink:href=\"#dx-dashboard-remove\" /></svg> </div> <!-- /ko --> </div> </div> </div> <!-- /ko --> <!-- ko ifnot: dashboard().parameters().length > 0 --> <div class=\"dx-dashboard-form-row-content\"> <div class=\"dx-dashboard-form-parameter-placeholder\"> <div> <span class=\"dx-dashboard-form-inline-action\" data-bind=\"click: addParameter, text: $root.getLocalizationById('DashboardWebStringId.Parameters.AddParameter')\"></span> </div> </div> </div> <!-- /ko --> </div> </div> <div class=\"dx-dashboard-form-column dx-dashboard-form-right-column\"> <div class=\"dx-dashboard-form-column-content-wrapper\"> <!-- ko if: dashboard().parameters().length > 0 --> <div class=\"dx-dashboard-form-row-content\"> <!-- ko if: parameterEditorViewModel  --> <div data-bind=\"template: { name: 'dx-dashboard-parameter-settings', data: parameterEditorViewModel }\" class=\"dx-dashboard-parameter-settings\"></div> <!-- /ko --> </div> <!-- /ko --> <!-- ko ifnot: dashboard().parameters().length > 0 --> <div class=\"dx-dashboard-form-row-content\"> <div class=\"dx-dashboard-form-parameter-placeholder\"> <div data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Parameters.NoSelectedParameter')\"></div> </div> </div> <!-- /ko --> </div> </div> </div> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-properties-accordion\"> <div data-bind=\"dxAccordion: { dataSource: !$data.useSecondaryModel ? propertiesController.accordionDataSource : propertiesController.secondaryAccordionDataSource, itemTitleTemplate: 'title', itemTemplate: 'itemCategory', focusStateEnabled: false, selectedIndex: !$data.useSecondaryModel ? propertiesController.selectedIndex : propertiesController.secondarySelectedIndex, collapsible: true, noDataText: $root.getLocalizationById('DashboardStringId.MessageLoading'), encodeNoDataText: true, onItemRendered: function (e) { if(e.itemData.hasNoBorder) { $root.$unwrap(e.itemElement).classList.add('dx-dashboard-accordion-item-no-border'); } }, onSelectionChanged: function(e) { if(e.addedItems[0] && e.addedItems[0].tabModel) { e.addedItems[0].tabModel(e.addedItems[0].tabModel()) } } }\"> <div data-options=\"dxTemplate : { name: 'title', visible: 'visible' }\" data-bind=\" css: $data.style, style: { height: $data.headerHeight ? $data.headerHeight + 'px': '' }, dxclick: function(data, event) { $data.onTitleClick && $data.onTitleClick($data.headerModel || $data.tabModel, data, event); } \" > <!-- ko if: $data.headerTemplate --> <!-- ko template: { name: $data.headerTemplate, data: $data.headerModel || $data.tabModel } --> <!-- /ko --> <!-- /ko --> <!-- ko ifnot: $data.headerTemplate --> <!-- ko template: { name: 'dx-dashboard-properties-header-template' } --> <!-- /ko --> <!-- /ko --> </div> <div data-options=\"dxTemplate : { name: 'itemCategory', visible: 'visible' }\" data-bind=\"css: $data.style\"> <div> <!-- ko template: 'dx-dashboard-accordion-tab-content' --> <!-- /ko --> </div> <div class=\"dx-shadow dx-shadow-bottom\"></div> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-accordion-tab-content\"> <!-- ko if: $data.tabTemplate --> <!-- ko template: { name: $data.tabTemplate, data: $data.tabModel } --> <!-- /ko --> <!-- /ko --> <!-- ko ifnot: $data.tabTemplate --> <!-- ko with: $data.tabModel --> <div data-bind=\"dx-dashboard-form-adapter: { target: $data }\" class=\"dx-dashboard-properties\"></div> <!-- /ko --> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-content-in-tab-header-template\"> <!-- ko with: $data --> <div data-bind=\"dx-dashboard-form-adapter: { target: $data }\" class=\"dx-dashboard-properties\"></div> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-properties-header-template\"> <div class=\"dx-shadow dx-shadow-top\"></div> <div class=\"dx-dashboard-accordion-title-content\"> <h5 data-bind=\"text: $root.getLocalizationById($data.category)\"></h5> <!-- ko if: $data.summary --> <h6 data-bind=\"text: $root.getLocalizationById($data.summary && $data.summary()), attr: { title: $data.summaryHint && $data.summaryHint() }\"></h6> <!-- /ko --> <!-- ko ifnot: $data.summary --> <h6></h6> <!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-dashboard-text-box-item-editor-extension\"> <div data-bind=\"dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { boundary: $root.getWidgetContainer() }, hideOnOutsideClick: true, showTitle: true, deferRendering: true, onHiding: onHiding, onHidden: onHidden, onInitialized: onInitialized, title: $root.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.DialogCaption'), toolbarItems: [ { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: $root.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose'), onClick: saveAndClose, type: 'default' } }, { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: $root.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.DialogClose'), onClick: close } } ], wrapperAttr: { class: 'dx-dashboard-text-box-item-editor-popup' } }\"> <!-- ko with: richEditorOptions --> <div style=\"display: block; position: relative;\" data-bind=\"dx-dashboard-rich-edit: $data\"> </div> <!-- /ko --> </div> <!-- ko template: { name: \"dx-dashboard-confirm-dialog\", data: confirmDialogViewModel } --> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-toolbar-extension\"> <div data-bind=\"dxPopup: getKoPopupOptions()\"> <div class=\"dx-dashboard-designer-toolbar\" data-bind=\"dxToolbar: koToolbarOptions\"></div> </div></script><script type=\"text/html\" id=\"dx-dashboard-toolbox-extension\"> <div class=\"dx-dashboard-toolbox-extension\" data-bind=\"style: { left: designerPanelLeft() + 'px' }\"> <!-- ko template: 'dx-dashboard-menu' --> <!-- /ko --> <!-- ko template: 'dx-dashboard-toolbox' --> <!-- /ko --> <!-- ko template: 'dx-dashboard-toolbar' --> <!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-dashboard-menu\"> <!-- toogle menu button --> <div class=\"dx-dashboard-designer-menu-button\" data-bind=\"click: toggleMenu\"> <svg><use xlink:href=\"#dx-dashboard-designer-menu-icon\"></use></svg> </div> <!-- menu --> <div data-bind=\"dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { my: 'left top', at: 'left top', collision: 'flipfit', boundaryOffset: '0, 0', boundary: $root.getWidgetContainer(), of:  $root.getWidgetContainer(), offset: '0, 0' }, animation: { show: { type: 'slide', from: { left: -240 }, to: { left: 0 } }, hide: { type: 'slide', from: { left: 0 }, to: { left: -240 } } }, focusStateEnabled: false, showCloseButton: false, dragEnabled: false, width: settingsFormVisible() ? '100%' : 240, height: '100%', titleTemplate: 'menuTitleTemplate', hideOnOutsideClick: !settingsFormVisible(), hideOnParentScroll: false, visible: menuVisible, wrapperAttr: { class: 'dx-dashboard-designer-menu-popup' } }\"> <div class=\"dx-dashboard-designer-menu-header\" data-options=\"dxTemplate: { name: 'menuTitleTemplate' }\"> <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.DashboardMenu')\"></span> <div class=\"dx-dashboard-designer-menu-close\"> <div data-bind=\"dxButton: { onClick: function() { toggleMenu(); }, type: 'normal', stylingMode: 'text', icon: 'close' }\"></div> </div> </div> <div class=\"dx-dashboard-designer-menu\" data-bind=\"dxScrollView: { direction: 'vertical' }\"> <ul class=\"dx-theme-generic-typography\"> <!-- ko foreach: menuItemsSorted --> <li class=\"dx-dashboard-main-menu-item\" data-bind=\"click: disabled() ? null : $parent.menuItemClick, text: $root.getLocalizationById(title), css: { 'dx-state-selected': selected, 'dx-state-disabled': disabled, 'dx-separator': $data.hasSeparator }\"></li> <!-- /ko --> </ul> </div> <!-- ko if: settingsFormVisible() && settingsForm() --> <div class=\"dx-dashboard-dashboard-form dx-dashboard-typography dx-dashboard-property-grid dx-dashboard-settings-form\"> <div class=\"dx-dashboard-settings-form-title\" data-bind=\"text: $root.getLocalizationById(settingsForm().title)\"> </div> <div class=\"dx-dashboard-settings-form-content\"> <!-- ko template:{ name: settingsForm().template, data: settingsForm().data } --> <!-- /ko --> </div> </div> <!-- /ko --> </div> <!-- right form --></script><script type=\"text/html\" id=\"dx-dashboard-toolbar\"> <!-- toolbar --> <div class=\"dx-dashboard-toolbar\" data-bind=\"element-height-change-provider: { model: toolbarGroupsSorted, height: toolbarHeight } \"> <div class=\"dx-dashboard-toolbox-group-separator\"></div> <!-- ko foreach: toolbarGroupsSorted --> <!-- ko foreach: items --> <!-- ko if: $data['template'] --> <!-- ko template: $data['template'] --> <!-- /ko --> <!-- /ko --> <!-- ko if: $data['icon']--> <div class=\"dx-dashboard-toolbar-action\" data-bind=\"attr: { title: $root.getLocalizationById(title) }, click: click, css: { 'dx-state-disabled': disabled }\"> <svg><use data-bind=\"xlinkHref: icon\"></use></svg> </div> <!-- /ko --> <!-- /ko --> <div class=\"dx-dashboard-toolbox-group-separator\"></div> <!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-dashboard-toolbox\"> <!-- toolbox --> <div class=\"dx-dashboard-toolbox dx-dashboard-toolbox-group-separator\" data-bind=\" dxScrollView: { direction: 'vertical'}, style: { bottom: toolbarHeight() + 'px' }\"> <!-- ko foreach: toolboxGroupsSorted --> <div class=\"dx-dashboard-toolbox-group\" data-bind=\"text: $root.getLocalizationById(title)\"></div> <!-- ko foreach: items --> <div class=\"dx-dashboard-toolbox-item\" data-bind=\"dx-dashboard-element-accessor: $parents[1].initDragEvents(type), attr: { 'data-item-type': type, title: $root.getLocalizationById(title) }, click: click, css: { 'dx-state-disabled': disabled }\" draggable=\"true\"> <svg> <use data-bind=\"xlinkHref: icon\"></use> </svg> <div class=\"dx-dashboard-toolbox-item-hover\"></div> </div> <!-- /ko --> <div class=\"dx-dashboard-toolbox-group-separator\"></div> <!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-toolbox-extension-layout-item-placeholder\"> <div class=\"dx-toolbox-extension-layout-item-placeholder-wrapper\"> <div class=\"dx-toolbox-extension-layout-item-placeholder\"> <div data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.AddItemInvitation')\"></div> <div> <!-- ko foreach: dashboardItems --> <div class=\"dx-dashboard-toolbox-item\" data-bind=\"attr: { title: $root.getLocalizationById(title) }\"> <svg> <use data-bind=\"xlinkHref: iconName\"></use> </svg> <div class=\"dx-dashboard-toolbox-item-button\" data-bind=\"attr: { 'data-item-type': type }, click:  $parent.addDashboardItem\"></div> </div> <!-- /ko --> </div> </div> </div></script><script type=\"text/html\" id=\"dx-slidable-lists-navigation-area\"> <div class=\"dx-slidable-lists-navigation\" data-bind=\"visible: !!ancestors\"> <!-- ko with: ancestors --> <div class=\"dx-slidable-lists-breadcrumb\" data-bind=\"attr: { title: $data.map(function(el) { return $root.getLocalizationById(el); }).join('/') }\"> <!-- ko foreach: $data --> <!-- ko if: ($index() !== ($parent.length - 1)) --> <span class=\"dx-slidable-lists-navigation-path-item dx-slidable-lists-navigation-path-item-link\" data-bind=\"text: $root.getLocalizationById($data), click: function(data) { var handler = $parents[3].backClick || $parents[1].backClick; handler(data, $parent); }\"></span> <span>/</span> <!-- /ko --> <!-- ko if: ($index() === ($parent.length - 1)) --> <span class=\"dx-slidable-lists-navigation-path-item\" data-bind=\"text: $root.getLocalizationById($data)\"></span> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> <div class=\"dx-slidable-lists-navigation-empty-area\"></div> </div></script><script type=\"text/html\" id='dx-dashboard-custom-appearance-dialog'> <div data-bind=\"dxPopup: { toolbarItems: buttonItems, visible: visible, }\"> <div data-bind=\"dxForm: { formData: appearanceWrapper, items: items }\"> </div> </div></script><script type=\"text/html\" id='dx-dashboard-popover-color-picker'> <div data-bind=\"dxPopover: { container: $root.getWidgetContainer(), toolbarItems: buttonItems, visible: visible, position: { of: $element.parentNode, my: 'top', at: 'bottom', boundary: $root.getWidgetContainer(), collision: 'flipfit' }, wrapperAttr: { class: 'dx-dropdowneditor-overlay dx-dashboard-cf-color-picker' } }\"> <div data-bind=\"dxColorView: { value: color, editAlphaChannel: true, applyValueMode: 'instantly' }\"> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-datasources-rename-popup\"> <div data-bind=\"dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { my: 'center', at: 'center', boundary: '.dx-dashboard-datasource-browser-wrapper' }, width: '400px', height: '240px', animation: { }, focusStateEnabled: true, hideOnOutsideClick: false, toolbarItems: toolbarItems || [], visible: popupVisible, showTitle: true, title: title || '', wrapperAttr: { class: 'dx-dashboard-datasources-rename-popup dx-dashboard-typography' } }\"> <div> <div class=\"dx-dashboard-rename-data-source-label\"> <span data-bind=\"text: label\"></span> </div> <div data-bind=\"dxTextBox: nameTextBoxOptions, dxValidator: nameValidatorOptions\"></div> </div> </div></script><script type=\"text/html\" id=\"dx-dashboard-page-data-source-type\"> <div class=\"dx-dashboard-page-data-source-type\"> <div data-bind=\"css: { selected: selectedType() === 'Sql' }, click: function() { return selectedType('Sql'); }\"> Sql </div> <div data-bind=\"css: { selected: selectedType() === 'Olap' }, click: function() { return selectedType('Olap'); }\"> Olap </div> </div></script><script type=\"text/html\" id='dx-simple-filter-popup'> <div data-bind=\"dxPopup: viewModel.getPopupOptions($root.getWidgetContainer())\"> <!-- ko template: viewModel.fieldSelector.template --> <!-- /ko --> <!-- ko template: viewModel.filterTreeList.template --> <!-- /ko --> </div></script><script type=\"text/html\" id='dx-simple-filter-data-field-selector'> <div data-bind=\"dxSelectBox: { dataSource: fields, displayExpr: 'displayName', value: selectedField, placeholder: $root.getLocalizationById('DashboardStringId.ParametersSelectorText'), noDataText: $root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'), encodeNoDataText: true, dropDownOptions: { container: $root.getWidgetContainer() }   }\"></div></script><script type=\"text/html\" id='dx-simple-filter-tree-list'> <!-- ko if: visible --> <!-- ko with: editorOptions--> <div class=\"dx-filter dx-treeview-border-visible\" data-bind=\"dxTreeList: $data\"> <div class=\"dx-filter-item\"> <span data-bind=\"text: displayName\"></span> </div> </div> <!-- /ko --> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-data-items-header\"> <div data-bind=\"dxclick: function(data, event) { event.stopPropagation(); return false; }\"> <dx-dashboard-group-data-items params=\"model: $data.model(), holder: $data\"></dx-dashboard-group-data-items> </div></script><script type=\"text/html\" id=\"dx-dashboard-group-data-items\"> <!-- ko foreach: dataItems --> <dx-dashboard-data-item-link params=\"binding: binding, item: item, click: click, selected: false, dataItemDisplayNameProvider: dataItemDisplayNameProvider, removeDataItem: removeDataItem, placeholder: placeholder, embeddedRemovalIcon: true, error: $parent.holder.dataItemErrorFactory && $parent.holder.dataItemErrorFactory($data.item.dataItem())\"></dx-dashboard-data-item-link> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-data-item-general\"> <div class=\"dx-dashboard-field-chooser\" data-bind=\"css: { 'dx-dashboard-include-summary': $data.additionalProperties()}\"> <dx-field-chooser params=\"dataSourceBrowser: dataSourceBrowser, filter: constraint, startPath: dataMemberPath(), selectedField: choosenField()\"></dx-field-chooser> </div> <!-- ko with: additionalProperties --> <div data-bind=\"if: $data\"> <div data-bind=\"dx-dashboard-form-adapter: { target: $data }\" class=\"dx-dashboard-properties\"></div> </div> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-container-types-header\"> <div class=\"dx-dashboard-container-types-header\"> <!-- do NOT reindent these lines --> <!-- ko foreach: shortAvailableContainerTypes --><div class=\"dx-dashboard-container-type\" data-bind=\" component: { name: 'dx-dashboard-checked-button', params: { isSelected: $data.selected, hint: $root.getLocalizationById(displayName), icon: icon, click: function(e) { $parent.itemClick($data, e.event) } } }\"> </div><!-- /ko --><!-- ko if: hasFullList --> <div class=\"dx-dashboard-container-type dx-dashboard-type-more\"> <div class=\"dx-dashboard-type-selector-more-close\" data-bind=\" component: { name: 'dx-dashboard-checked-button', params: { hint: $root.getLocalizationById('DashboardStringId.CloseCaption'), icon: 'dx-dashboard-close' } }\"> </div> <div class=\"dx-dashboard-type-selector-more-full\" data-bind=\" component: { name: 'dx-dashboard-checked-button', params: { hint: $root.getLocalizationById('DashboardWebStringId.Binding.ShowAll'), icon: 'dx-dashboard-group-types-full-list' } }\"> </div> </div><!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-dashboard-container-type-selector-header\"> <div class=\"dx-dashboard-container-types-header-container\"> <h5 data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.FilterItem.Type')\"></h5> <div data-bind=\"template: { name: 'dx-dashboard-container-types-header' }\"></div> </div></script><script type=\"text/html\" id=\"dx-dashboard-container-style-selector-header\"> <div class=\"dx-dashboard-container-types-header-container\"> <h5 data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.StyleSettings')\"></h5> <div data-bind=\"template: { name: 'dx-dashboard-container-types-header' }\"></div> </div></script><script type=\"text/html\" id=\"dx-dashboard-container-type-selector-full\"> <!-- ko foreach: availableContainerTypeGroups --> <div class=\"dx-dashboard-container-types\"> <!-- ko if: $data.displayName--> <h4 data-bind=\"text: $root.getLocalizationById($data.displayName)\"></h4> <!-- /ko --> <!-- do NOT reindent these lines --> <!-- ko foreach: $parent.availableContainerTypes.filter(function (type) { return type.group === $data.name; } ) --><div class=\"dx-dashboard-container-type\" data-bind=\" component: { name: 'dx-dashboard-checked-button', params: { isSelected: $data.selected, hint: $root.getLocalizationById(displayName), icon: icon, click: function(e) { $parents[1].itemClick($data, e.event) } } }\"> </div><!-- /ko --> </div><!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-data-item-link\"> <div class=\"dx-dashboard-data-item\" data-bind=\" component: { name: 'dx-dashboard-checked-button', params: { isSelected: $data.selected, text: $data.item && $data.item.dataItem && $data.item.dataItem() && dataItemDisplayNameProvider($data.item.dataItem()) || (($root.ko.unwrap($data.selected) && $data.selectedPlaceholder) || $data.placeholder), click: function(e) { !!$data.propertiesController ? $data.propertiesController.processDataItemClick($data) : $data.click($data); } } }, style: { 'z-index': 1000 - $data.index }, css: { 'dx-dashboard-data-item-remove-action-visible': $root.ko.unwrap($data.selected) && !$root.ko.unwrap($data.isEmpty), 'dx-empty': $data.isEmpty, 'dx-state-warning': $data.warning, 'dx-state-error': $data.error }, attr: { draggable: !!$root.ko.unwrap($data.draggable) }\"></div> <!-- ko ifnot: $data.isEmpty  --> <div class=\"dx-dashboard-data-item-remove-action\" data-bind=\" click: function(model, event) { removeDataItem(item); event.stopPropagation(); }, css: { 'dx-dashboard-data-item-remove-action-visible': $root.ko.unwrap($data.selected) , 'dx-dashboard-data-item-remove-action-embeded': $data.embeddedRemovalIcon } \"> <svg><use xlink:href=\"#dx-dashboard-remove-small\" /></svg> </div> <!-- /ko --></script><script type=\"text/html\" id=\"dx-dashboard-data-item-collection\"> <h4 data-bind=\"text: $root.getLocalizationById(sectionInfo.title)\"></h4> <div class=\"dx-dashboard-collection\"> <!-- ko foreach: groups --> <div class=\"dx-dashboard-drop-target\"> <div></div> </div> <div data-bind=\"css: { 'dx-dashboard-hierarchical-group': $data.groupIndex !== undefined }\"> <!-- ko foreach: items --> <dx-dashboard-data-item-link params=\"item: $data, click: $parents[1].selectDataItem, removeDataItem: $parents[1].removeDataItem, index: $index(), dataItemDisplayNameProvider: $parents[1].dataItemDisplayNameProvider, propertiesController: $parents[1].itemSurface.propertiesController, error: $parents[1].errorFactory($data), draggable: true\"></dx-dashboard-data-item-link> <!-- /ko --> </div> <!-- /ko --> <div class=\"dx-dashboard-drop-target dx-dashboard-cover-item\" data-bind=\"css: {'dx-dashboard-hierarchical-group-cover': false}\"> <div></div> </div> <dx-dashboard-data-item-link params=\"selectionTarget: newItemSample, placeholder: sectionInfo.bindingProperty.emptyPlaceholder, selectedPlaceholder: sectionInfo.bindingProperty.selectedPlaceholder, click: addClick, propertiesController: $parent.itemSurface.propertiesController, warning: $data.warning\"></dx-dashboard-data-item-link> </div></script><script type=\"text/html\" id=\"dx-dashboard-add-pane-section\"> <div class=\"dx-dashboard-add-pane\" data-bind=\"click: addPane, title: $root.getLocalizationById('DashboardWebStringId.Chart.AddPane')\"> <!-- ko lazy: { if: $parents[3].detailVisible } --> <svg><use xlink:href=\"#dx-dashboard-add-pane\"></use></svg> <!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-dashboard-data-item-container-collection\"> <h4 data-bind=\"text: $root.getLocalizationById(sectionInfo.title)\"></h4> <div class=\"dx-dashboard-collection\"> <!-- ko foreach: groups --> <div class=\"dx-dashboard-drop-target\"> <div></div> </div> <div data-bind=\"css: { 'dx-dashboard-hierarchical-group': $data.groupIndex !== undefined }\"> <!-- ko foreach: items --> <dx-dashboard-data-item-link params=\"draggable: true, click: $parents[1].selectDataItemContainer, item: $data, removeDataItem: $parents[1].removeDataItem, dataItemDisplayNameProvider: $parents[1].dataItemDisplayNameProvider, placeholder: $parents[1].getDisplayName($data), isEmpty: false, error: $parents[1].errorFactory($data), propertiesController: $parents[1].itemSurface.propertiesController \"></dx-dashboard-data-item-link> <!-- /ko --> </div> <!-- /ko --> <div class=\"dx-dashboard-drop-target dx-dashboard-cover-item\"> <div></div> </div> <dx-dashboard-data-item-link params=\"selectionTarget: newContainerSample, placeholder: sectionInfo.bindingProperty.emptyPlaceholder, selectedPlaceholder: sectionInfo.bindingProperty.selectedPlaceholder, click: addDataItemContainerClick, propertiesController: $parent.itemSurface.propertiesController, warning: $data.warning\"/> </div></script><script type=\"text/html\" id=\"dx-dashboard-data-item-single\"> <h4 data-bind=\"text: $root.getLocalizationById(sectionInfo.title)\"></h4> <div class=\"dx-dashboard-collection\"> <div class=\"dx-dashboard-drop-target dx-dashboard-cover-item\"> <div></div> </div> <dx-dashboard-data-item-link params=\"item: dataItemLink, removeDataItem: removeDataItem, dataItemDisplayNameProvider: dataItemDisplayNameProvider, click: selectDataItem, placeholder: sectionInfo.bindingProperty.emptyPlaceholder, selectedPlaceholder: sectionInfo.bindingProperty.selectedPlaceholder, propertiesController: $parent.itemSurface.propertiesController, error: errorFactory(dataItemLink), draggable: dataItemLink.uniqueName, warning: $data.warning\" /> </div></script><script type=\"text/html\" id='dx-dashboard-collection-editor'> <div class=\"dx-dashboard-collection-editor\"> <div class=\"dx-dashboard-collection-editor-header\" data-bind=\"visible: isToolbarVisible\"> <!-- ko if: allowAddItem --> <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-add\" data-bind=\"click: add, css: { 'dx-state-disabled': !addEnabled() }\"> <svg><use xlink:href=\"#dx-dashboard-ce-add\" /></svg> </div> <!-- /ko --> <!-- ko if: allowEditItem --> <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-edit\" data-bind=\"click: edit, css: { 'dx-state-disabled': !editEnabled() }\"> <svg><use xlink:href=\"#dx-dashboard-ce-edit\" /></svg> </div> <!-- /ko --> <!-- ko if: allowReorderItem --> <div class=\"dx-dx-dashboard-icon-separator\"></div> <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-arrow-down\" data-bind=\"click: down, css: { 'dx-state-disabled': !downEnabled() }\"> <svg><use xlink:href=\"#dx-dashboard-ce-arrow-down\" /></svg> </div> <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-arrow-up\" data-bind=\"click: up, css: { 'dx-state-disabled': !upEnabled() }\"> <svg><use xlink:href=\"#dx-dashboard-ce-arrow-up\" /></svg> </div> <!-- /ko --> <!-- ko if: allowRemoveItem --> <div class=\"dx-dashboard-ce-remove-icon\" data-bind=\"click: remove, css: { 'dx-dashboard-state-selected': !!removeEnabled() }\"> <svg><use xlink:href=\"#dx-dashboard-remove-small\" /></svg> </div> <!-- /ko --> <!-- ko foreach: customToolbarItems --> <div class=\"dx-dx-dashboard-icon-separator\"></div> <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-custom-action-icon\" data-bind=\"click: action, attr: { title: name }\"> <svg><use data-bind=\"attr: { 'xlink:href': icon }\" xlink:href='' /></svg> </div> <!-- /ko --> </div> <div class=\"dx-dashboard-list dx-dashboard-empty-message\" data-bind=\"dxList: $data.getListOptions()\"></div> </div></script><script type=\"text/html\" id='dx-dashboard-editable-collection-editor'> <div class=\"dx-dashboard-collection-editor\"> <div class=\"dx-dashboard-collection-editor-header\" data-bind=\"visible: isToolbarVisible\"> <!-- ko if: allowAddItem --> <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-add\" data-bind=\"click: add, css: { 'dx-state-disabled': !addEnabled() }\"> <svg><use xlink:href=\"#dx-dashboard-ce-add\" /></svg> </div> <!-- /ko --> <!-- ko if: allowReorderItem --> <div class=\"dx-dx-dashboard-icon-separator\"></div> <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-arrow-down\" data-bind=\"css: { 'dx-state-disabled': !downEnabled() }, click: down\"> <svg><use xlink:href=\"#dx-dashboard-ce-arrow-down\" /></svg> </div> <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-arrow-up\" data-bind=\"css: { 'dx-state-disabled': !upEnabled() }, click: up\"> <svg><use xlink:href=\"#dx-dashboard-ce-arrow-up\" /></svg> </div> <!-- /ko --> <!-- ko if: allowRemoveItem --> <div class=\"dx-dashboard-ce-remove-icon\" data-bind=\"click: remove, css: { 'dx-dashboard-state-selected': removeEnabled() }\"> <svg><use xlink:href=\"#dx-dashboard-remove-small\" /></svg> </div> <!-- /ko --> </div> <div class=\"dx-dashboard-editable-collection-editor\" data-bind=\"dxDataGrid: $data.getGridOptions()\"></div></script><script type=\"text/html\" id=\"dx-datasource-chooser-slider\"> <div> <div class=\"dx-field-chooser-header-container\"> </div> <div class=\"dx-field-chooser-scroll-holder dx-data-source-scroll-holder\"> <!-- ko template: 'dx-field-chooser-content-list' --> <!-- /ko --> </div> </div></script><script type=\"text/html\" id=\"dx-field-chooser-slider\"> <div> <div class=\"dx-field-chooser-header-container\"> <!-- ko template: 'dx-field-chooser-header-area' --> <!-- /ko --> </div> <div class=\"dx-field-chooser-scroll-holder\"> <!-- ko if: hasSearchResults() && isSearchMode() --> <!-- ko template: 'dx-field-chooser-content-search-results' --> <!-- /ko --> <!-- /ko --> <!-- ko if: !$data.hasSearchResults || !$data.isListMode || (!hasSearchResults() && isListMode()) --> <!-- ko template: 'dx-field-chooser-content-list' --> <!-- /ko --> <!-- /ko --> <!-- ko if: !hasSearchResults() && !isListMode() --> <!-- ko template: 'dx-field-chooser-content-treeview' --> <!-- /ko --> <!-- /ko --> </div> </div> <!-- ko template: { name: 'dx-dashboard-calc-field-editor', data: calcFieldEditor  } --> <!-- /ko --> <!-- ko template: { name: \"dx-dashboard-confirm-dialog\", data: _inappropriateCalcFieldConfirmation } --> <!-- /ko --></script><script type=\"text/html\" id=\"dx-field-chooser-header-area\"> <div class=\"dx-field-chooser-header\" data-bind=\"css: { 'dx-field-chooser-search-mode': isSearchMode() }\"> <div class=\"dx-field-chooser-toolbar\"> <div class=\"dx-dashboard-ce-icon dx-field-chooser-search-button\" data-bind=\"click: searchButtonClick\"> <svg><use xlink:href=\"#dx-dashboard-fc-search\" /></svg> </div> <!-- ko if: canAddCalculatedField --> <div class=\"dx-dx-dashboard-icon-separator\"></div> <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-add\" data-bind=\"click: addCalcField\"> <svg><use xlink:href=\"#dx-dashboard-calc-field-add\" /></svg> </div> <div class=\"dx-dashboard-ce-icon\" data-bind=\"click: editCalcField, css: {'dx-state-disabled': !isCalcFieldSelected()}\"> <svg><use xlink:href=\"#dx-dashboard-ce-edit\" /></svg> </div> <!-- /ko --> <div class=\"dx-field-chooser-mode-buttons\"> <!-- ko if: canAddCalculatedField --> <div class=\"dx-dashboard-ce-icon\" data-bind=\"click: removeCalcField, css: {'dx-state-disabled': !isCalcFieldSelected()}\"> <svg><use xlink:href=\"#dx-dashboard-remove-small\" /></svg> </div> <!-- /ko --> <!-- ko if: hasGroups() --> <div class=\"dx-field-chooser-header-button\" data-bind=\" component: { name: 'dx-dashboard-checked-button', params: { isSelected: isListMode, icon: 'dx-dashboard-fc-mode-list', click: setListMode } }\"> </div> <div class=\"dx-field-chooser-header-button\" data-bind=\" component: { name: 'dx-dashboard-checked-button', params: { isSelected: !isListMode(), icon: 'dx-dashboard-fc-mode-tree', click: setTreeMode } }\"> </div> <!-- /ko --> </div> </div> <div class=\"dx-field-chooser-find-area\"> <div class=\"dx-field-chooser-search\"> <div data-bind=\"dxTextBox: { value: searchString, valueChangeEvent: 'keyup', showClearButton: true, placeholder: $root.getLocalizationById('DashboardWebStringId.Binding.Searching'), disabled: !isSearchMode() }\"></div> </div> </div> </div></script><script type=\"text/html\" id=\"dx-field-chooser-content-search-results\"> <div class=\"dx-field-chooser-lists-container\"> <div class=\"dx-dashboard-list dx-dashboard-empty-message\" data-bind=\"dxList: { items: searchResults, onItemClick: selectViaSearchResults, selectionMode: 'single', selectedItems: [selectedSearchResult()], noDataText: $root.getLocalizationById('DashboardWebStringId.Binding.EmptySearchResult'), }\"> <div data-options=\"dxTemplate : { name: 'item' }\"> <div class=\"dx-field-chooser-search-list-item\" data-bind=\"css: {'dx-has-path': path.length > 0 }\"> <div class=\"dx-field-chooser-search-list-item-name\" data-bind=\"text: item.displayName, attr: { title: $root.ko.unwrap(item.displayName).length > 30 ? item.displayName : null }, css: {'dx-dashboard-corrupted-calc-field': item.isCorruptedCalcField }\"></div> <div class=\"dx-field-chooser-search-list-item-path\" data-bind=\"text: path, attr: { title: path.length > 30 ? path : null }\"></div> <!-- ko template: { name: 'dx-field-chooser-field-type', data: item } --> <!-- /ko --> </div> </div> </div> </div></script><script type=\"text/html\" id=\"dx-field-chooser-content-list\"> <div class=\"dx-field-chooser-lists-container\"> <!-- ko foreach: lists --> <div class=\"dx-field-chooser-list\" data-bind=\"css: { 'dx-state-ready': ready }, style: { left: $element.offsetWidth * index() + 'px' }\"> <!-- ko template: { name: 'dx-slidable-lists-navigation-area', data: $data } --> <!-- /ko --> <div class=\"dx-dashboard-list dx-dashboard-empty-message\" data-bind=\"dxList: { dataSource: items, pageLoadMode: 'scrollBottom', onItemClick: itemClick, selectionMode: 'single', selectedItemKeys: selectedItemName, keyExpr: 'name', onInitialized: onInitialized, onContentReady: onContentReady, encodeNoDataText: true, noDataText: $root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay') }, css: { 'dx-hierarchical-field-chooser-list' : !!ancestors }\"> <div data-options=\"dxTemplate : { name: 'item' }\"> <div class=\"dx-field-chooser-list-item\" data-bind=\"attr: { title: displayName }, css: { 'dx-dashboard-has-children': $root.ko.unwrap(isGroup) }\"> <span data-bind=\"text: displayName, css: {'dx-dashboard-corrupted-calc-field': $data.isCorruptedCalcField }\"></span> <!-- ko template: 'dx-field-chooser-field-type' --> <!-- /ko --> </div> </div> </div> <div class=\"dx-field-chooser-list-loading\" data-bind=\"dxLoadIndicator: { visible: loading }\"> </div> </div> <!-- /ko --> </div></script><script type=\"text/html\" id=\"dx-field-chooser-content-treeview\"> <div class=\"dx-field-chooser-tree-view-container\"> <div class=\"dx-dashboard-treeview dx-dashboard-empty-message dx-field-chooser-tree-view\" data-bind=\"dxTreeView: dataSourceTreeOptions\"> <div class=\"dx-field-chooser-list-item\" data-bind=\"css: { 'dx-field-chooser-group-list-item': $data.isGroup }\"> <span data-bind=\"text: displayName, attr: { title: $root.ko.unwrap(displayName).length > 20 ? displayName : null }, css: {'dx-dashboard-corrupted-calc-field': $data.isCorruptedCalcField }\" ></span> <!-- ko template: 'dx-field-chooser-field-type' --> <!-- /ko --> </div> </div> </div></script><script type=\"text/html\" id=\"dx-field-chooser-field-type\"> <div class=\"dx-dashboard-field-kind\" data-bind=\"if: isOlap || isCalcField\"> <!-- ko if: $data.isOlapDimension--> <svg> <use xlink:href=\"#dx-dashboard-olap-dimension\" /> </svg> <!-- /ko --> <!-- ko if: $data.isOlapDimensionHierarchy--> <svg> <use xlink:href=\"#dx-dashboard-olap-dimension-hierarchy\" /> </svg> <!-- /ko --> <!-- ko if: $data.isOlapMeasure--> <svg> <use xlink:href=\"#dx-dashboard-olap-measure\" /> </svg> <!-- /ko --> <!-- ko if: $data.isCalcField--> <!-- ko if: $data.isAggregate--> <svg><use xlink:href=\"#dx-dashboard-calc-field-aggregate\" /></svg> <!-- /ko --> <!-- ko ifnot: $data.isAggregate--> <svg><use xlink:href=\"#dx-dashboard-calc-field\" /></svg> <!-- /ko --> <!-- /ko --> </div> <div class=\"dx-dashboard-field-type\" style=\"pointer-events: auto;\" data-bind=\"attr: { title: $data.typeTooltip}, style: { cursor: $data.isList ? 'default' : 'inherit' }\"> <!-- ko if: !$data.isCorruptedCalcField --> <svg> <use data-bind=\"xlinkHref: 'dx-dashboard-datatype-' + $data.normalizedType\"></use> </svg> <!-- /ko --> <!-- ko if: $data.isCorruptedCalcField --> <svg> <use xlink:href=\"#dx-dashboard-calc-field-corrupted\" /> </svg> <!-- /ko --> </div></script>" };


/***/ }),

/***/ 69859:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dashboardConstants = exports.devExtremeConstants = void 0;
const materialGridBaseHeaderHeight = 40;
const materialGridBaseHeaderLineHeight = 16;
const materialGridBaseCellHeight = 36;
const materialGridBaseCellLineHeight = 16;
const materialPopupContentPadding = 16;
exports.devExtremeConstants = {
    materialPopupToolbarHeight: 42,
    materialPopupContentPadding: materialPopupContentPadding,
    materialGridBaseHeaderHeight: materialGridBaseHeaderHeight,
    materialGridBaseHeaderLineHeight: materialGridBaseHeaderLineHeight,
    materialGridBaseHeaderCellVerticalPadding: Math.round((materialGridBaseHeaderHeight - materialGridBaseHeaderLineHeight) / 2),
    materialGridBaseCellHeight: materialGridBaseCellHeight,
    materialGridBaseCellLineHeight: materialGridBaseCellLineHeight,
    materialGridBaseCellVerticalPadding: Math.round((materialGridBaseCellHeight - materialGridBaseCellLineHeight) / 2),
    materialButtonHeight: 28,
    materialGridBaseCellFontSize: 13,
    materialGridBaseRowBorder: 1,
    dxPopupTitleBorderBottom: 1,
    dxDatagridHeadersBorder: 1,
};
exports.dashboardConstants = {
    materialParametersDialogFormPaddingTop: 18,
    materialParametersDialogFormPaddingBottom: 30 - exports.devExtremeConstants.materialPopupContentPadding,
};


/***/ }),

/***/ 41603:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cacheable = exports.resetGlobalSizeCache = void 0;
let globalCache = {};
function resetGlobalSizeCache() {
    globalCache = {};
}
exports.resetGlobalSizeCache = resetGlobalSizeCache;
function cacheable(cacheKey) {
    return (target, propertyKey, descriptor) => {
        if (typeof target !== 'function') {
            throw Error('The cacheable decorator can be applied only for static methods');
        }
        return {
            value: (...args) => {
                if (!globalCache[cacheKey]) {
                    globalCache[cacheKey] = {};
                }
                var functionCache = globalCache[cacheKey];
                var argsKey = JSON.stringify(args);
                if (functionCache.hasOwnProperty(argsKey)) {
                    return functionCache[argsKey];
                }
                else {
                    var result = descriptor.value.apply(this, args);
                    functionCache[argsKey] = result;
                    return result;
                }
            }
        };
    };
}
exports.cacheable = cacheable;


/***/ }),

/***/ 41247:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardWidgetImplementation = void 0;
class CardWidgetImplementation {
    constructor(notifyHandler) {
        this._onCustomizeText = undefined;
        this._cardBackColor = undefined;
        this.element = () => {
            return this._element;
        };
        this._notifyChanged = notifyHandler;
    }
    _changed() {
        this._notifyChanged && this._notifyChanged();
    }
    get onCustomizeText() {
        return this._onCustomizeText;
    }
    set onCustomizeText(value) {
        this._onCustomizeText = value;
        this._changed();
    }
    get cardBackColor() {
        return this._cardBackColor;
    }
    set cardBackColor(value) {
        this._cardBackColor = value;
        this._changed();
    }
}
exports.CardWidgetImplementation = CardWidgetImplementation;


/***/ }),

/***/ 26018:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardLayoutModeHelper = void 0;
const devices_1 = __webpack_require__(52562);
const support_1 = __webpack_require__(6925);
class DashboardLayoutModeHelper {
    static get isMobile() {
        if (DashboardLayoutModeHelper._forceMobileMode !== null)
            return DashboardLayoutModeHelper._forceMobileMode;
        return devices_1.default.current().phone || devices_1.default.current().tablet;
    }
    static set isMobile(value) {
        DashboardLayoutModeHelper._forceMobileMode = value;
    }
    static get isTouch() {
        if (DashboardLayoutModeHelper._forceTouchMode !== null)
            return DashboardLayoutModeHelper._forceTouchMode;
        return support_1.touch;
    }
    static set isTouch(value) {
        DashboardLayoutModeHelper._forceTouchMode = value;
    }
}
exports.DashboardLayoutModeHelper = DashboardLayoutModeHelper;
DashboardLayoutModeHelper._forceTouchMode = null;
DashboardLayoutModeHelper._forceMobileMode = null;


/***/ }),

/***/ 83257:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getBaseColorScheme = void 0;
const themes_1 = __webpack_require__(90056);
var getBaseColorScheme = () => {
    var vizTheme = themes_1.currentTheme();
    return (vizTheme.indexOf('dark') !== -1) ? 'dark' : 'light';
};
exports.getBaseColorScheme = getBaseColorScheme;


/***/ }),

/***/ 167:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExportOptions = exports.dashboardStateExcelExportPosition = exports.dashboardStateExportPosition = exports.dashboardExportSizeMode = exports.dashboardExportExcelFormat = exports.dashboardExportImageFormat = exports.excelExportFilterState = exports.dashboardExportFilterState = exports.exportFormats = exports.dashboardExportDocumentScaleMode = exports.dashboardExportScaleMode = exports.dashboardExportPageLayout = exports.dashboardExportPaperKind = void 0;
const _utils_1 = __webpack_require__(7590);
exports.dashboardExportPaperKind = {
    letter: 'Letter',
    legal: 'Legal',
    executive: 'Executive',
    a5: 'A5',
    a4: 'A4',
    a3: 'A3'
};
exports.dashboardExportPageLayout = {
    auto: 'Auto',
    portrait: 'Portrait',
    landscape: 'Landscape'
};
exports.dashboardExportScaleMode = {
    none: 'None',
    useScaleFactor: 'UseScaleFactor',
    autoFitToPageWidth: 'AutoFitToPageWidth',
    autoFitWithinOnePage: 'AutoFitWithinOnePage'
};
exports.dashboardExportDocumentScaleMode = {
    none: 'None',
    useScaleFactor: 'UseScaleFactor',
    autoFitToPagesWidth: 'AutoFitToPagesWidth',
};
exports.exportFormats = {
    pdf: 'PDF',
    image: 'Image',
    excel: 'Excel'
};
exports.dashboardExportFilterState = {
    none: 'None',
    after: 'Below',
    afterAndSplitPage: 'SeparatePage',
};
exports.excelExportFilterState = {
    none: 'None',
    below: 'Below',
    separateSheet: 'SeparateSheet'
};
exports.dashboardExportImageFormat = {
    png: 'Png',
    gif: 'Gif',
    jpg: 'Jpg'
};
exports.dashboardExportExcelFormat = {
    csv: 'Csv',
    xls: 'Xls',
    xlsx: 'Xlsx'
};
exports.dashboardExportSizeMode = {
    none: 'None',
    stretch: 'Stretch',
    zoom: 'Zoom'
};
exports.dashboardStateExportPosition = {
    below: 'Below',
    separatePage: 'SeparatePage'
};
exports.dashboardStateExcelExportPosition = {
    below: 'Below',
    separateSheet: 'SeparateSheet'
};
class ExportOptions {
    constructor() {
        let defaultFontInfoName = undefined;
        let defaultGdiCharSet = 0;
        let defaultUseCustomFontInfo = false;
        this.pdfExportOptions = {
            Title: ExportOptions.DefaultTitle,
            AutoFitPageCount: 1,
            CardAutoArrangeContent: true,
            ChartAutomaticPageLayout: true,
            ChartSizeMode: 'Zoom',
            ExportFilters: false,
            ExportParameters: false,
            DashboardStatePosition: 'Below',
            GaugeAutoArrangeContent: true,
            GridFitToPageWidth: true,
            GridPrintHeadersOnEveryPage: true,
            MapAutomaticPageLayout: true,
            MapSizeMode: 'Zoom',
            PageLayout: 'Portrait',
            PaperKind: 'Letter',
            PieAutoArrangeContent: true,
            PivotPrintHeadersOnEveryPage: true,
            RangeFilterAutomaticPageLayout: true,
            RangeFilterSizeMode: 'Stretch',
            ScaleFactor: 1.0,
            DocumentScaleMode: 'None',
            DashboardAutomaticPageLayout: true,
            ShowTitle: true,
            TreemapAutomaticPageLayout: true,
            TreemapSizeMode: 'Zoom',
            IncludeHiddenParameters: false,
            FontInfo: {
                Name: defaultFontInfoName,
                GdiCharSet: defaultGdiCharSet,
                UseCustomFontInfo: defaultUseCustomFontInfo
            }
        };
        this.imageExportOptions = {
            Title: ExportOptions.DefaultTitle,
            Format: 'Png',
            Resolution: 96,
            ExportFilters: false,
            ExportParameters: false,
            ScaleFactor: 1.0,
            ShowTitle: true,
            IncludeHiddenParameters: false,
            FontInfo: {
                Name: defaultFontInfoName,
                GdiCharSet: defaultGdiCharSet,
                UseCustomFontInfo: defaultUseCustomFontInfo
            }
        };
        this.excelExportOptions = {
            CsvValueSeparator: ',',
            ExportFilters: false,
            ExportParameters: false,
            DashboardStatePosition: 'Below',
            Format: 'Xlsx',
            IncludeHiddenParameters: false
        };
    }
    convertToExportOptions(clientOptions) {
        if (!clientOptions)
            return this;
        let argumentExportOptions = clientOptions;
        let argumentAspxOptions = clientOptions;
        let argumentPdfOptions = clientOptions;
        let argumentImageOptions = clientOptions;
        let argumentExcelOptions = clientOptions;
        let currentPdfOptions = this.pdfExportOptions;
        let currentImageOptions = this.imageExportOptions;
        let currentExcelOptions = this.excelExportOptions;
        let clientPdfOptions = argumentExportOptions.pdfExportOptions ? argumentExportOptions.pdfExportOptions : argumentPdfOptions;
        let clientImageOptions = argumentExportOptions.imageExportOptions ? argumentExportOptions.imageExportOptions : argumentImageOptions;
        let clientExcelOptions = argumentExportOptions.excelExportOptions ? argumentExportOptions.excelExportOptions : argumentExcelOptions;
        let clientDashboardPdfOptions = clientPdfOptions;
        let clientDashboardImageOptions = clientImageOptions;
        let pdfOptions = {
            Title: 'Title' in clientPdfOptions ? clientPdfOptions.Title : currentPdfOptions.Title,
            ShowTitle: _utils_1.type.isDefined(clientPdfOptions.ShowTitle) ? clientPdfOptions.ShowTitle !== 'False' && clientPdfOptions.ShowTitle !== false : currentPdfOptions.ShowTitle,
            AutoFitPageCount: clientPdfOptions.AutoFitPageCount || currentPdfOptions.AutoFitPageCount,
            CardAutoArrangeContent: this._getDefinedValue(argumentAspxOptions.CardOptions, 'AutoArrangeContent', clientDashboardPdfOptions.CardAutoArrangeContent, currentPdfOptions.CardAutoArrangeContent),
            ChartAutomaticPageLayout: this._getDefinedValue(argumentAspxOptions.ChartOptions, 'AutomaticPageLayout', clientDashboardPdfOptions.ChartAutomaticPageLayout, currentPdfOptions.ChartAutomaticPageLayout),
            ChartSizeMode: this._getDefinedValue(argumentAspxOptions.ChartOptions, 'SizeMode', clientDashboardPdfOptions.ChartSizeMode, currentPdfOptions.ChartSizeMode),
            ExportFilters: this._getExportFilters(clientPdfOptions, currentPdfOptions.ExportFilters),
            ExportParameters: _utils_1.type.isDefined(clientDashboardPdfOptions.ExportParameters) ? clientDashboardPdfOptions.ExportParameters : currentPdfOptions.ExportParameters,
            DashboardStatePosition: this._getPdfDashboardStatePosition(clientPdfOptions, currentPdfOptions.DashboardStatePosition),
            GaugeAutoArrangeContent: this._getDefinedValue(argumentAspxOptions.GaugeOptions, 'AutoArrangeContent', clientDashboardPdfOptions.GaugeAutoArrangeContent, currentPdfOptions.GaugeAutoArrangeContent),
            GridFitToPageWidth: this._getDefinedValue(argumentAspxOptions.GridOptions, 'FitToPageWidth', clientDashboardPdfOptions.GridFitToPageWidth, currentPdfOptions.GridFitToPageWidth),
            GridPrintHeadersOnEveryPage: this._getDefinedValue(argumentAspxOptions.GridOptions, 'PrintHeadersOnEveryPage', clientDashboardPdfOptions.GridPrintHeadersOnEveryPage, currentPdfOptions.GridPrintHeadersOnEveryPage),
            MapAutomaticPageLayout: this._getDefinedValue(argumentAspxOptions.MapOptions, 'AutomaticPageLayout', clientDashboardPdfOptions.MapAutomaticPageLayout, currentPdfOptions.MapAutomaticPageLayout),
            MapSizeMode: this._getDefinedValue(argumentAspxOptions.MapOptions, 'SizeMode', clientDashboardPdfOptions.MapSizeMode, currentPdfOptions.MapSizeMode),
            PageLayout: clientPdfOptions.PageLayout || currentPdfOptions.PageLayout,
            PaperKind: clientPdfOptions.PaperKind || currentPdfOptions.PaperKind,
            PieAutoArrangeContent: this._getDefinedValue(argumentAspxOptions.PieOptions, 'AutoArrangeContent', clientDashboardPdfOptions.PieAutoArrangeContent, currentPdfOptions.PieAutoArrangeContent),
            PivotPrintHeadersOnEveryPage: this._getDefinedValue(argumentAspxOptions.PivotOptions, 'PrintHeadersOnEveryPage', clientDashboardPdfOptions.PivotPrintHeadersOnEveryPage, currentPdfOptions.PivotPrintHeadersOnEveryPage),
            RangeFilterAutomaticPageLayout: this._getDefinedValue(argumentAspxOptions.RangeFilterOptions, 'AutomaticPageLayout', clientDashboardPdfOptions.RangeFilterAutomaticPageLayout, currentPdfOptions.RangeFilterAutomaticPageLayout),
            RangeFilterSizeMode: this._getDefinedValue(argumentAspxOptions.RangeFilterOptions, 'SizeMode', clientDashboardPdfOptions.RangeFilterSizeMode, currentPdfOptions.RangeFilterSizeMode),
            ScaleFactor: clientPdfOptions.ScaleFactor || currentPdfOptions.ScaleFactor,
            DocumentScaleMode: clientDashboardPdfOptions.DocumentScaleMode || (argumentAspxOptions.ScaleMode && this._convertScaleModeToDocumentScaleMode(argumentAspxOptions.ScaleMode)) || currentPdfOptions.DocumentScaleMode,
            DashboardAutomaticPageLayout: this._getDashboardAutomaticPageLayout(clientPdfOptions, currentPdfOptions.DashboardAutomaticPageLayout),
            TreemapAutomaticPageLayout: this._getDefinedValue(argumentAspxOptions.TreemapOptions, 'AutomaticPageLayout', clientDashboardPdfOptions.TreemapAutomaticPageLayout, currentPdfOptions.TreemapAutomaticPageLayout),
            TreemapSizeMode: this._getDefinedValue(argumentAspxOptions.TreemapOptions, 'SizeMode', clientDashboardPdfOptions.TreemapSizeMode, currentPdfOptions.TreemapSizeMode),
            IncludeHiddenParameters: _utils_1.type.isDefined(clientDashboardPdfOptions.IncludeHiddenParameters) ? clientDashboardPdfOptions.IncludeHiddenParameters : currentPdfOptions.IncludeHiddenParameters,
            FontInfo: {
                Name: this._getDefinedValue(clientDashboardPdfOptions.FontInfo, 'Name', undefined, currentPdfOptions.FontInfo.Name),
                GdiCharSet: this._getDefinedValue(clientDashboardPdfOptions.FontInfo, 'GdiCharSet', undefined, currentPdfOptions.FontInfo.GdiCharSet),
                UseCustomFontInfo: this._getDefinedValue(clientDashboardPdfOptions.FontInfo, 'UseCustomFontInfo', undefined, currentPdfOptions.FontInfo.UseCustomFontInfo),
            }
        };
        let imageOptions = {
            Title: clientImageOptions.Title || currentImageOptions.Title,
            Format: this._getImageFormat(clientImageOptions, currentImageOptions.Format),
            Resolution: (argumentAspxOptions.ImageOptions ? argumentAspxOptions.ImageOptions.Resolution : clientDashboardImageOptions.Resolution) || currentImageOptions.Resolution,
            ExportFilters: this._getExportFilters(clientImageOptions, currentImageOptions.ExportFilters),
            ExportParameters: _utils_1.type.isDefined(clientDashboardImageOptions.ExportParameters) ? clientDashboardImageOptions.ExportParameters : currentImageOptions.ExportParameters,
            ScaleFactor: clientImageOptions.ScaleFactor || currentImageOptions.ScaleFactor,
            ShowTitle: _utils_1.type.isDefined(clientImageOptions.ShowTitle) ? clientImageOptions.ShowTitle !== 'False' && clientImageOptions.ShowTitle !== false : currentImageOptions.ShowTitle,
            IncludeHiddenParameters: _utils_1.type.isDefined(clientDashboardImageOptions.IncludeHiddenParameters) ? clientDashboardImageOptions.IncludeHiddenParameters : currentImageOptions.IncludeHiddenParameters,
            FontInfo: {
                Name: this._getDefinedValue(clientDashboardImageOptions.FontInfo, 'Name', undefined, currentImageOptions.FontInfo.Name),
                GdiCharSet: this._getDefinedValue(clientDashboardImageOptions.FontInfo, 'GdiCharSet', undefined, currentImageOptions.FontInfo.GdiCharSet),
                UseCustomFontInfo: this._getDefinedValue(clientDashboardImageOptions.FontInfo, 'UseCustomFontInfo', undefined, currentImageOptions.FontInfo.UseCustomFontInfo),
            }
        };
        let excelOptions = {
            CsvValueSeparator: (argumentAspxOptions.ExcelOptions ? argumentAspxOptions.ExcelOptions.CsvValueSeparator : clientExcelOptions.CsvValueSeparator) || currentExcelOptions.CsvValueSeparator,
            ExportFilters: this._getExportFilters(clientExcelOptions, currentExcelOptions.ExportFilters),
            ExportParameters: clientExcelOptions.ExportParameters || currentExcelOptions.ExportParameters,
            DashboardStatePosition: this._getExcelDashboardStatePosition(clientExcelOptions, currentExcelOptions.DashboardStatePosition),
            Format: this._getExcelFormat(clientExcelOptions, currentExcelOptions.Format),
            IncludeHiddenParameters: _utils_1.type.isDefined(clientExcelOptions.IncludeHiddenParameters) ? clientExcelOptions.IncludeHiddenParameters : currentExcelOptions.IncludeHiddenParameters
        };
        let options = new ExportOptions();
        options.pdfExportOptions = pdfOptions;
        options.imageExportOptions = imageOptions;
        options.excelExportOptions = excelOptions;
        return options;
    }
    convertToASPxClientDashboardExportOptions() {
        return {
            PaperKind: this.pdfExportOptions.PaperKind,
            PageLayout: this.pdfExportOptions.PageLayout,
            ScaleMode: this._convertDocumentScaleModeToScaleMode(this.pdfExportOptions.DocumentScaleMode, this.pdfExportOptions.DashboardAutomaticPageLayout),
            ScaleFactor: this.pdfExportOptions.ScaleFactor,
            AutoFitPageCount: this.pdfExportOptions.AutoFitPageCount,
            Title: this.pdfExportOptions.Title,
            ShowTitle: this.pdfExportOptions.ShowTitle,
            FilterState: this._getPdfFilterState(),
            ImageOptions: {
                Format: this.imageExportOptions.Format,
                Resolution: this.imageExportOptions.Resolution,
            },
            ExcelOptions: {
                CsvValueSeparator: this.excelExportOptions.CsvValueSeparator,
                Format: this.excelExportOptions.Format,
                FilterState: this._getExcelFilterState()
            },
            GridOptions: {
                FitToPageWidth: this.pdfExportOptions.GridFitToPageWidth,
                PrintHeadersOnEveryPage: this.pdfExportOptions.GridPrintHeadersOnEveryPage
            },
            PivotOptions: {
                PrintHeadersOnEveryPage: this.pdfExportOptions.PivotPrintHeadersOnEveryPage
            },
            PieOptions: {
                AutoArrangeContent: this.pdfExportOptions.PieAutoArrangeContent
            },
            GaugeOptions: {
                AutoArrangeContent: this.pdfExportOptions.GaugeAutoArrangeContent
            },
            CardOptions: {
                AutoArrangeContent: this.pdfExportOptions.CardAutoArrangeContent
            },
            RangeFilterOptions: {
                AutomaticPageLayout: this.pdfExportOptions.RangeFilterAutomaticPageLayout,
                SizeMode: this.pdfExportOptions.RangeFilterSizeMode,
            },
            ChartOptions: {
                AutomaticPageLayout: this.pdfExportOptions.ChartAutomaticPageLayout,
                SizeMode: this.pdfExportOptions.ChartSizeMode,
            },
            MapOptions: {
                AutomaticPageLayout: this.pdfExportOptions.MapAutomaticPageLayout,
                SizeMode: this.pdfExportOptions.MapSizeMode
            },
            TreemapOptions: {
                AutomaticPageLayout: this.pdfExportOptions.TreemapAutomaticPageLayout,
                SizeMode: this.pdfExportOptions.TreemapSizeMode
            }
        };
    }
    setExcelOptions(options) {
        this.excelExportOptions = this.convertToExportOptions(options).excelExportOptions;
    }
    setImageOptions(options) {
        this.imageExportOptions = this.convertToExportOptions(options).imageExportOptions;
    }
    setPdfOptions(options) {
        this.pdfExportOptions = this.convertToExportOptions(options).pdfExportOptions;
    }
    setOptions(options) {
        let exportOptions = this.convertToExportOptions(options);
        this.pdfExportOptions = exportOptions.pdfExportOptions;
        this.imageExportOptions = exportOptions.imageExportOptions;
        this.excelExportOptions = exportOptions.excelExportOptions;
    }
    _getPdfDashboardStatePosition(clientOptions, currentValue) {
        if (clientOptions.DashboardStatePosition && clientOptions.DashboardStatePosition !== 'SeparateSheet')
            return clientOptions.DashboardStatePosition;
        return clientOptions.FilterState && clientOptions.FilterState !== 'None' ? clientOptions.FilterState : currentValue;
    }
    _getExcelDashboardStatePosition(clientOptions, currentValue) {
        if (clientOptions.DashboardStatePosition && clientOptions.DashboardStatePosition !== 'SeparatePage')
            return clientOptions.DashboardStatePosition;
        return clientOptions.ExcelOptions && clientOptions.ExcelOptions.FilterState && clientOptions.ExcelOptions.FilterState !== 'None' ? clientOptions.ExcelOptions.FilterState : currentValue;
    }
    _getImageFormat(clientOptions, currentValue) {
        if (clientOptions.Format && (clientOptions.Format === 'Png' || clientOptions.Format === 'Jpeg' || clientOptions.Format === 'Jpg' || clientOptions.Format === 'Gif'))
            return this._correctImageFormat(clientOptions.Format);
        return clientOptions.ImageOptions ? clientOptions.ImageOptions.Format : currentValue;
    }
    _getExcelFormat(clientOptions, currentValue) {
        if (clientOptions.Format && (clientOptions.Format === 'Csv' || clientOptions.Format === 'Xls' || clientOptions.Format === 'Xlsx'))
            return clientOptions.Format;
        return clientOptions.ExcelOptions ? clientOptions.ExcelOptions.Format : currentValue;
    }
    _getDefinedValue(oldOptions, oldProperty, newValue, currentValue) {
        if (_utils_1.type.isDefined(oldOptions))
            return oldOptions[oldProperty];
        if (_utils_1.type.isDefined(newValue))
            return newValue;
        return currentValue;
    }
    _getExportFilters(clientOptions, currentValue) {
        if (_utils_1.type.isDefined(clientOptions.ExportFilters))
            return clientOptions.ExportFilters;
        if (_utils_1.type.isDefined(clientOptions.FilterState))
            return clientOptions.FilterState !== 'None';
        return currentValue;
    }
    _getDashboardAutomaticPageLayout(clientOptions, currentValue) {
        if (_utils_1.type.isDefined(clientOptions.DashboardAutomaticPageLayout))
            return clientOptions.DashboardAutomaticPageLayout;
        if (_utils_1.type.isDefined(clientOptions.ScaleMode))
            return clientOptions.ScaleMode === exports.dashboardExportScaleMode.autoFitWithinOnePage;
        return currentValue;
    }
    _convertDocumentScaleModeToScaleMode(documentScaleMode, dashboardAutomaticPageLayout) {
        switch (documentScaleMode) {
            case exports.dashboardExportDocumentScaleMode.autoFitToPagesWidth:
                return exports.dashboardExportScaleMode.autoFitToPageWidth;
            case exports.dashboardExportDocumentScaleMode.useScaleFactor:
                return exports.dashboardExportScaleMode.useScaleFactor;
            default:
                return dashboardAutomaticPageLayout ? exports.dashboardExportScaleMode.autoFitWithinOnePage : exports.dashboardExportScaleMode.none;
        }
    }
    _convertScaleModeToDocumentScaleMode(scaleMode) {
        switch (scaleMode) {
            case exports.dashboardExportScaleMode.autoFitToPageWidth:
                return exports.dashboardExportDocumentScaleMode.autoFitToPagesWidth;
            case exports.dashboardExportScaleMode.useScaleFactor:
                return exports.dashboardExportDocumentScaleMode.useScaleFactor;
            default:
                return exports.dashboardExportDocumentScaleMode.none;
        }
    }
    _getPdfFilterState() {
        if (!this.pdfExportOptions.ExportFilters && !this.pdfExportOptions.ExportParameters)
            return 'None';
        return this.pdfExportOptions.DashboardStatePosition;
    }
    _getExcelFilterState() {
        if (!this.excelExportOptions.ExportFilters && !this.excelExportOptions.ExportParameters)
            return 'None';
        return this.excelExportOptions.DashboardStatePosition;
    }
    _correctImageFormat(imageFormat) {
        return imageFormat === 'Jpeg' ? exports.dashboardExportImageFormat.jpg : imageFormat;
    }
}
exports.ExportOptions = ExportOptions;
ExportOptions.DefaultTitle = undefined;
ExportOptions.DefaultFileName = undefined;


/***/ }),

/***/ 73500:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CalendarHelper = void 0;
class CalendarHelper {
    static getCalendarMaxZoomLevel(groupInterval) {
        switch (groupInterval) {
            case 'Year':
                return 'decade';
            case 'QuarterYear':
            case 'MonthYear':
                return 'year';
            case 'WeekYear':
            case 'DayMonthYear':
            case 'DateHour':
            case 'DateHourMinute':
            case 'DateHourMinuteSecond':
            case 'None':
            default:
                return 'month';
        }
    }
    static getCalendarType(groupInterval) {
        switch (groupInterval) {
            case 'DateHour':
            case 'DateHourMinute':
            case 'DateHourMinuteSecond':
            case 'None':
                return 'datetime';
            case 'Year':
            case 'QuarterYear':
            case 'MonthYear':
            case 'WeekYear':
            case 'DayMonthYear':
            default:
                return 'date';
        }
    }
}
exports.CalendarHelper = CalendarHelper;


/***/ }),

/***/ 38982:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defaultViewerItemFactory = exports.ViewerItemFactory = void 0;
const _data_grid_item_1 = __webpack_require__(47128);
const _combo_box_element_1 = __webpack_require__(39340);
const _date_filter_element_1 = __webpack_require__(68528);
const _list_element_1 = __webpack_require__(22219);
const _tree_element_1 = __webpack_require__(42780);
const _pivot_grid_item_1 = __webpack_require__(84953);
const _range_selector_item_1 = __webpack_require__(45019);
const _bound_image_item_1 = __webpack_require__(7031);
const _bubble_map_item_1 = __webpack_require__(89811);
const _cards_item_1 = __webpack_require__(10474);
const _chart_item_1 = __webpack_require__(64658);
const _choropleth_map_item_1 = __webpack_require__(51115);
const _custom_fake_item_1 = __webpack_require__(4477);
const _gauges_item_1 = __webpack_require__(57078);
const _geo_point_map_item_1 = __webpack_require__(92872);
const _group_item_1 = __webpack_require__(34008);
const _image_item_1 = __webpack_require__(3911);
const _pie_item_1 = __webpack_require__(62572);
const _pie_map_item_1 = __webpack_require__(36138);
const _tab_page_item_1 = __webpack_require__(63022);
const _text_item_1 = __webpack_require__(60948);
const _treemap_item_1 = __webpack_require__(75327);
const _viewer_item_types_1 = __webpack_require__(98104);
class ViewerItemFactory {
    createItem(container, options) {
        switch (options.Type) {
            case _viewer_item_types_1.types.group:
                return new _group_item_1.groupItem(container, options);
            case _viewer_item_types_1.types.tabPage:
                return new _tab_page_item_1.tabPageItem(container, options);
            case _viewer_item_types_1.types.rangeFilter:
                return new _range_selector_item_1.rangeSelectorItem(container, options);
            case _viewer_item_types_1.types.chart:
            case _viewer_item_types_1.types.scatter:
                return new _chart_item_1.chartItem(container, options);
            case _viewer_item_types_1.types.pie:
                return new _pie_item_1.pieItem(container, options);
            case _viewer_item_types_1.types.card:
                return new _cards_item_1.cardsItem(container, options);
            case _viewer_item_types_1.types.grid:
                return new _data_grid_item_1.dataGridItem(container, options);
            case _viewer_item_types_1.types.pivot:
                return new _pivot_grid_item_1.pivotGridItem(container, options);
            case _viewer_item_types_1.types.gauge:
                return new _gauges_item_1.gaugesItem(container, options);
            case _viewer_item_types_1.types.text:
                return new _text_item_1.textItem(container, options);
            case _viewer_item_types_1.types.image:
                return new _image_item_1.imageItem(container, options);
            case _viewer_item_types_1.types.boundImage:
                return new _bound_image_item_1.boundImageItem(container, options);
            case _viewer_item_types_1.types.map:
            case _viewer_item_types_1.types.choroplethMap:
                return new _choropleth_map_item_1.choroplethMapItem(container, options);
            case _viewer_item_types_1.types.geoPointMap:
                return new _geo_point_map_item_1.geoPointMapItem(container, options);
            case _viewer_item_types_1.types.bubbleMap:
                return new _bubble_map_item_1.bubbleMapItem(container, options);
            case _viewer_item_types_1.types.pieMap:
                return new _pie_map_item_1.pieMapItem(container, options);
            case _viewer_item_types_1.types.treemap:
                return new _treemap_item_1.treemapItem(container, options);
            case _viewer_item_types_1.types.comboBox:
                return new _combo_box_element_1.comboBoxFilterElement(container, options);
            case _viewer_item_types_1.types.listBox:
                return new _list_element_1.listFilterElement(container, options);
            case _viewer_item_types_1.types.treeView:
                return new _tree_element_1.treeViewFilterElement(container, options);
            case _viewer_item_types_1.types.dateFilter:
                return new _date_filter_element_1.dateFilterElement(container, options);
            case _viewer_item_types_1.types.custom:
                return new _custom_fake_item_1.customFakeItem(container, options);
            default:
                return {};
        }
    }
}
exports.ViewerItemFactory = ViewerItemFactory;
exports.defaultViewerItemFactory = new ViewerItemFactory();


/***/ }),

/***/ 98104:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.types = void 0;
exports.types = {
    group: 'GROUP',
    page: 'PAGE',
    tabPage: 'TABPAGE',
    tabContainer: 'TABCONTAINER',
    rangeFilter: 'RANGEFILTER',
    chart: 'CHART',
    scatter: 'SCATTERCHART',
    pie: 'PIE',
    card: 'CARD',
    grid: 'GRID',
    pivot: 'PIVOT',
    gauge: 'GAUGE',
    text: 'TEXT',
    image: 'IMAGE',
    boundImage: 'BOUNDIMAGE',
    map: 'MAP',
    choroplethMap: 'CHOROPLETHMAP',
    geoPointMap: 'GEOPOINTMAP',
    bubbleMap: 'BUBBLEMAP',
    pieMap: 'PIEMAP',
    comboBox: 'COMBOBOX',
    listBox: 'LISTBOX',
    treeView: 'TREEVIEW',
    treemap: 'TREEMAP',
    dateFilter: 'DATEFILTER',
    custom: 'CUSTOMITEM'
};


/***/ }),

/***/ 88238:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 55425:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.appearanceSettingsProvider = void 0;
const _utils_1 = __webpack_require__(7590);
const _cssHelper_1 = __webpack_require__(95259);
const _dx_devextreme_themes_integration_1 = __webpack_require__(83257);
var AppearanceType = {
    WhiteColor: '#FFFFFF',
    GrayedTextColor: '#D3D3D3',
    LightGradientRedColor: 'rgb(255, 166, 173)',
    LightGradientYellowColor: 'rgb(255, 226, 81)',
    LightGradientGreenColor: 'rgb(139, 210, 78)',
    LightGradientBlueColor: 'rgb(149, 204, 255)',
    LightGradientPurpleColor: 'rgb(223, 166, 232)',
    LightGradientCyanColor: 'rgb(113, 223, 221)',
    LightGradientOrangeColor: 'rgb(255, 182, 90)',
    LightGradientTransparentColor: '#ffffff',
    DarkGradientRedColor: '#AC203D',
    DarkGradientYellowColor: '#FF8A01',
    DarkGradientGreenColor: '#538A31',
    DarkGradientBlueColor: '#4371B0',
    DarkGradientPurpleColor: '#7E53A2',
    DarkGradientCyanColor: '#149BA3',
    DarkGradientOrangeColor: '#D83D00',
    DarkGradientTransparentColor: '#303030',
    LightPaleRedColor: 'rgb(255, 221, 224)',
    LightPaleYellowColor: 'rgb(255, 245, 174)',
    LightPaleGreenColor: 'rgb(208, 239, 172)',
    LightPaleBlueColor: 'rgb(213, 237, 255)',
    LightPalePurpleColor: 'rgb(244, 221, 247)',
    LightPaleCyanColor: 'rgb(194, 244, 243)',
    LightPaleOrangeColor: 'rgb(255, 228, 180)',
    LightPaleGrayColor: 'rgb(234, 234, 234)',
    DarkPaleRedColor: '#5B2D3D',
    DarkPaleYellowColor: '#51492D',
    DarkPaleGreenColor: '#3B4D2D',
    DarkPaleBlueColor: '#2D3F5A',
    DarkPalePurpleColor: '#512D55',
    DarkPaleCyanColor: '#2D4B4B',
    DarkPaleOrangeColor: '#593E2D',
    DarkPaleGrayColor: '#444444',
    LightRedColor: 'rgb(226, 60, 76)',
    LightYellowColor: 'rgb(255, 166, 38)',
    LightGreenColor: 'rgb(101, 172, 80)',
    LightBlueColor: 'rgb(89, 143, 216)',
    LightPurpleColor: 'rgb(148, 105, 184)',
    LightCyanColor: 'rgb(39, 192, 187)',
    LightOrangeColor: 'rgb(255, 92, 12)',
    LightGrayColor: 'rgb(111, 111, 111)',
    DarkRedColor: '#E23C4C',
    DarkYellowColor: '#FFA626',
    DarkGreenColor: '#65AC50',
    DarkBlueColor: '#598FD8',
    DarkPurpleColor: '#9469B8',
    DarkCyanColor: '#27C0BB',
    DarkOrangeColor: '#FF5C0C',
    DarkGrayColor: '#6F6F6F',
    LightDefaultColorizationColor: '#d2d2d2',
    DarkDefaultColorizationColor: '#606060',
};
class appearanceSettingsProvider {
    static getColor(style) {
        let isDark = appearanceSettingsProvider.isDarkColorScheme();
        if (style.AppearanceType === 'Custom')
            return appearanceSettingsProvider._getCustomBackColor(style.Color);
        return appearanceSettingsProvider._getBackColorFromPredefinedStyle(style.AppearanceType, isDark);
    }
    static getDefaultColorizationColor() {
        return appearanceSettingsProvider.isDarkColorScheme() ? AppearanceType.DarkDefaultColorizationColor : AppearanceType.LightDefaultColorizationColor;
    }
    static toCssProperties(appearanceType, drawProperty) {
        var isDark = appearanceSettingsProvider.isDarkColorScheme();
        let styles = _cssHelper_1.getEmptyCssPropertyWrappersArray();
        if (drawProperty == null || drawProperty.shouldDrawBackColorStyle)
            styles.push(_cssHelper_1.createCssPropertyWrapper('background-color', appearanceSettingsProvider._getBackColorFromPredefinedStyle(appearanceType, isDark)));
        if (drawProperty == null || drawProperty.shouldDrawFontStyles)
            styles.push(appearanceSettingsProvider._createFontStyles(appearanceType, isDark));
        return styles;
    }
    static _createFontStyles(appearanceType, isDark) {
        switch (appearanceType) {
            case 'FontBold':
                return _cssHelper_1.createCssPropertyWrapper('font-weight', 'bold');
            case 'FontItalic':
                return _cssHelper_1.createCssPropertyWrapper('font-style', 'italic');
            case 'FontUnderline':
                return _cssHelper_1.createCssPropertyWrapper('text-decoration', 'underline');
            case 'FontGrayed':
                return _cssHelper_1.createCssPropertyWrapper('color', AppearanceType.GrayedTextColor);
            case 'FontRed':
                return _cssHelper_1.createCssPropertyWrapper('color', (isDark ? AppearanceType.DarkRedColor : AppearanceType.LightRedColor));
            case 'FontYellow':
                return _cssHelper_1.createCssPropertyWrapper('color', (isDark ? AppearanceType.DarkYellowColor : AppearanceType.LightYellowColor));
            case 'FontGreen':
                return _cssHelper_1.createCssPropertyWrapper('color', (isDark ? AppearanceType.DarkGreenColor : AppearanceType.LightGreenColor));
            case 'FontBlue':
                return _cssHelper_1.createCssPropertyWrapper('color', (isDark ? AppearanceType.DarkBlueColor : AppearanceType.LightBlueColor));
            default:
                let color = appearanceSettingsProvider.backAndGradientColorGroupsToBackColor(appearanceType);
                if (color !== undefined)
                    return null;
                color = appearanceSettingsProvider._backColorsWithFontGroupToBackColor(appearanceType, isDark);
                if (color !== undefined)
                    return _cssHelper_1.createCssPropertyWrapper('color', AppearanceType.WhiteColor);
                return null;
        }
    }
    static _getBackColorFromPredefinedStyle(appearanceType, isDark) {
        let color = appearanceSettingsProvider.backAndGradientColorGroupsToBackColor(appearanceType);
        if (color !== undefined)
            return color;
        color = appearanceSettingsProvider._backColorsWithFontGroupToBackColor(appearanceType, isDark);
        if (color !== undefined)
            return color;
        return null;
    }
    static backAndGradientColorGroupsToBackColor(appearanceType) {
        var isDark = appearanceSettingsProvider.isDarkColorScheme();
        switch (appearanceType) {
            case 'PaleRed':
                return isDark ? AppearanceType.DarkPaleRedColor : AppearanceType.LightPaleRedColor;
            case 'PaleYellow':
                return isDark ? AppearanceType.DarkPaleYellowColor : AppearanceType.LightPaleYellowColor;
            case 'PaleGreen':
                return isDark ? AppearanceType.DarkPaleGreenColor : AppearanceType.LightPaleGreenColor;
            case 'PaleBlue':
                return isDark ? AppearanceType.DarkPaleBlueColor : AppearanceType.LightPaleBlueColor;
            case 'PalePurple':
                return isDark ? AppearanceType.DarkPalePurpleColor : AppearanceType.LightPalePurpleColor;
            case 'PaleCyan':
                return isDark ? AppearanceType.DarkPaleCyanColor : AppearanceType.LightPaleCyanColor;
            case 'PaleOrange':
                return isDark ? AppearanceType.DarkPaleOrangeColor : AppearanceType.LightPaleOrangeColor;
            case 'PaleGray':
                return isDark ? AppearanceType.DarkPaleGrayColor : AppearanceType.LightPaleGrayColor;
            case 'GradientRed':
                return isDark ? AppearanceType.DarkGradientRedColor : AppearanceType.LightGradientRedColor;
            case 'GradientYellow':
                return isDark ? AppearanceType.DarkGradientYellowColor : AppearanceType.LightGradientYellowColor;
            case 'GradientGreen':
                return isDark ? AppearanceType.DarkGradientGreenColor : AppearanceType.LightGradientGreenColor;
            case 'GradientBlue':
                return isDark ? AppearanceType.DarkGradientBlueColor : AppearanceType.LightGradientBlueColor;
            case 'GradientPurple':
                return isDark ? AppearanceType.DarkGradientPurpleColor : AppearanceType.LightGradientPurpleColor;
            case 'GradientCyan':
                return isDark ? AppearanceType.DarkGradientCyanColor : AppearanceType.LightGradientCyanColor;
            case 'GradientOrange':
                return isDark ? AppearanceType.DarkGradientOrangeColor : AppearanceType.LightGradientOrangeColor;
            case 'GradientTransparent':
                return isDark ? AppearanceType.DarkGradientTransparentColor : AppearanceType.LightGradientTransparentColor;
            default: {
            }
        }
    }
    static _backColorsWithFontGroupToBackColor(appearanceType, isDark) {
        switch (appearanceType) {
            case 'Red':
                return isDark ? AppearanceType.DarkRedColor : AppearanceType.LightRedColor;
            case 'Yellow':
                return isDark ? AppearanceType.DarkYellowColor : AppearanceType.LightYellowColor;
            case 'Green':
                return isDark ? AppearanceType.DarkGreenColor : AppearanceType.LightGreenColor;
            case 'Blue':
                return isDark ? AppearanceType.DarkBlueColor : AppearanceType.LightBlueColor;
            case 'Purple':
                return isDark ? AppearanceType.DarkPurpleColor : AppearanceType.LightPurpleColor;
            case 'Cyan':
                return isDark ? AppearanceType.DarkCyanColor : AppearanceType.LightCyanColor;
            case 'Orange':
                return isDark ? AppearanceType.DarkOrangeColor : AppearanceType.LightOrangeColor;
            case 'Gray':
                return isDark ? AppearanceType.DarkGrayColor : AppearanceType.LightGrayColor;
            default: {
            }
        }
    }
    static _getCustomBackColor(color) {
        if (color.toHex)
            return color.toHex();
        return _utils_1.toColor(color);
    }
    static isDarkColorScheme() {
        return _dx_devextreme_themes_integration_1.getBaseColorScheme() === 'dark';
    }
}
exports.appearanceSettingsProvider = appearanceSettingsProvider;


/***/ }),

/***/ 35480:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChartItemStyleSettingsProvider = void 0;
const _appearance_settings_provider_1 = __webpack_require__(55425);
const _style_settings_provider_1 = __webpack_require__(76106);
class ChartItemStyleSettingsProvider {
    initialize(cfModel) {
        if (cfModel)
            this.cfModel = cfModel;
    }
    getDefaultBackColor() {
        return _appearance_settings_provider_1.appearanceSettingsProvider.getDefaultColorizationColor();
    }
    getBackColor(styleSettingsInfo) {
        let styleIndexes = styleSettingsInfo ? styleSettingsInfo.styleIndexes : undefined, styleSettingsModel;
        if (styleIndexes && styleIndexes.length > 0) {
            let resultIndex = styleIndexes[styleIndexes.length - 1];
            styleSettingsModel = this.cfModel.FormatConditionStyleSettings[resultIndex];
            return this.getBackColorFromStyleSettingsModel(styleSettingsModel);
        }
    }
    getBackColorFromStyleSettingsModel(styleSettingsModel) {
        if (styleSettingsModel.RangeIndex) {
            let condition = this.cfModel.RuleModels[styleSettingsModel.RuleIndex].ConditionModel;
            styleSettingsModel = _style_settings_provider_1.styleSettingsProvider._getRangeBackColorStyleSettings(styleSettingsModel, condition);
        }
        return _appearance_settings_provider_1.appearanceSettingsProvider.getColor(styleSettingsModel);
    }
}
exports.ChartItemStyleSettingsProvider = ChartItemStyleSettingsProvider;


/***/ }),

/***/ 76106:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardItemStyleSettingsProvider = exports.styleSettingsProvider = exports.DrawProperty = void 0;
const color_1 = __webpack_require__(43150);
const browser_1 = __webpack_require__(77856);
const tooltip_1 = __webpack_require__(87441);
const $ = __webpack_require__(65311);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _cssHelper_1 = __webpack_require__(95259);
const _css_class_names_1 = __webpack_require__(28490);
const _appearance_settings_provider_1 = __webpack_require__(55425);
const ICON_TYPE_NONE = 'None', APPEARANCE_TYPE_NONE = 'None', APPEARANCE_TYPE_CUSTOM = 'Custom', VERTICAL_AXIS_PADDING = 3, HIDDEN_TEXT_PREFIX = 'hiddenText', TOOLTIP_PREFIX = 'tooltip', GRID_BANDED_ROW_SELECTOR = '.dx-datagrid .dx-row-alt', PIVOT_AREA_SELECTOR = '.dx-pivotgrid .dx-pivotgrid-area';
const nbspSymbol = '\u00A0';
class BarCacheItem {
}
class DrawProperty {
    constructor() {
        this.shouldDrawFontStyles = true;
        this.shouldDrawBackColorStyle = true;
    }
}
exports.DrawProperty = DrawProperty;
class styleSettingsProvider {
    constructor() {
        this.wordWrap = false;
        this.FontStyle = {
            Bold: 1,
            Italic: 2,
            Underline: 4,
            Strikeout: 8
        };
        this.DataAttributes = {
            Bar: 'bar',
            Axis: 'axis',
            NormalizedValue: 'normalizedValue',
            ZeroPosition: 'zeroPosition',
            AllowNegativeAxis: 'allowNegativeAxis',
            DrawAxis: 'drawAxis'
        };
        this.cfModel = undefined;
        this.cssCustomClasses = [];
        this.cssCustomClassesLinks = [];
        this.id = styleSettingsProvider.inctanceCounter++;
        this.drawingLocked = true;
        this.barCache = {};
        this.padding = null;
        this.barPrefixes = [];
    }
    static toIconCssClass(iconType) {
        return styleSettingsProvider.cssClassNames.iconConditionalFormatting + '-' + iconType.toLowerCase();
    }
    static _getRangeBackColorStyleSettings(styleSettings, condition) {
        var rangeIndex = styleSettings.RangeIndex, leftIndex = -1, rightIndex = -1, leftModel, rightModel, resultModel, leftColor, rightColor, color;
        Object.keys(condition.FixedColors)
            .map(Number)
            .forEach((index) => {
            if (index < rangeIndex && (leftIndex === -1 || index > leftIndex))
                leftIndex = index;
            if (index > rangeIndex && (rightIndex === -1 || index < rightIndex))
                rightIndex = index;
        });
        leftModel = condition.FixedColors[leftIndex];
        rightModel = condition.FixedColors[rightIndex];
        leftColor = new color_1.default(_appearance_settings_provider_1.appearanceSettingsProvider.getColor(leftModel));
        rightColor = new color_1.default(_appearance_settings_provider_1.appearanceSettingsProvider.getColor(rightModel));
        return {
            AppearanceType: APPEARANCE_TYPE_CUSTOM,
            Color: leftColor.blend(rightColor, (rangeIndex - leftIndex) / (rightIndex - leftIndex)),
            ForeColor: leftModel.ForeColor,
            FontFamily: leftModel.FontFamily,
            FontSize: leftModel.FontSize,
            FontStyle: leftModel.FontStyle,
            IsBarStyle: leftModel.IsBarStyle
        };
    }
    initialize(cfModel, wordWrap) {
        if (cfModel) {
            this.cfModel = cfModel;
            this._clearCssClasses();
            this._registerCssClasses();
            this.drawingLocked = true;
            this.barCache = {};
            this.padding = null;
            this.barPrefixes = [];
        }
        this.wordWrap = wordWrap !== undefined ? wordWrap : this.wordWrap;
    }
    dispose() {
        this._clearCssClasses();
    }
    draw() {
        Object.values(this.barCache).forEach(columnCacheItem => {
            columnCacheItem.forEach(barCacheItem => {
                const textDiv = barCacheItem.getTextDiv();
                while (barCacheItem.container.firstChild) {
                    barCacheItem.container.removeChild(barCacheItem.container.firstChild);
                }
                if (!barCacheItem.container.classList.contains(styleSettingsProvider.cssClassNames.barContainer)) {
                    barCacheItem.container.classList.add(styleSettingsProvider.cssClassNames.barContainer);
                }
                var barContainer = barCacheItem.barContainer;
                barCacheItem.container.appendChild(barContainer);
                barContainer.appendChild(barCacheItem.barDiv);
                if (barCacheItem.drawAxis) {
                    barContainer.appendChild(barCacheItem.axisDiv);
                }
                if (!barCacheItem.showBarOnly) {
                    barContainer.appendChild(textDiv);
                }
                else {
                    barCacheItem.container.appendChild(textDiv);
                    barCacheItem.container.appendChild(barCacheItem.tooltipDiv);
                }
            });
        });
        this.drawingLocked = false;
        this.barPrefixes.forEach(barPrefix => this.updateBarWidth(barPrefix));
    }
    updateBarWidth(barPrefix) {
        if (!this.drawingLocked) {
            let barCacheItems = this.barCache[barPrefix], containerHeights;
            if (barCacheItems) {
                containerHeights = this._getContainerHeights(barCacheItems);
                barCacheItems.forEach((barCacheItem, i) => {
                    var bar = barCacheItem.barDiv, normalizedValue = _jquery_helpers_1.accessJQueryData(bar, this.DataAttributes.NormalizedValue), zeroPosition = _jquery_helpers_1.accessJQueryData(bar, this.DataAttributes.ZeroPosition), allowNegativeAxis = _jquery_helpers_1.accessJQueryData(bar, this.DataAttributes.AllowNegativeAxis), drawAxis = _jquery_helpers_1.accessJQueryData(bar, this.DataAttributes.DrawAxis), containerHeight = containerHeights[i], axisDiv = bar.parentNode && bar.parentNode.querySelector('.' + this.DataAttributes.Axis + '_' + barPrefix);
                    this._setBarBounds(bar, containerHeight, zeroPosition, normalizedValue, allowNegativeAxis, drawAxis);
                    if (axisDiv) {
                        this._setAxisBounds(axisDiv, containerHeight, zeroPosition);
                    }
                });
            }
        }
    }
    applyStyleSettings(container, popupContainer, styleSettingsInfo, ignoreImageSettings, barPrefix, forceLeftAlignment, isSecondaryStyle) {
        let styleSettingsModel, sortedStyleIndexes = styleSettingsInfo ? styleSettingsInfo.styleIndexes : undefined, condition, ruleIndex, barInfo, iconType;
        if (sortedStyleIndexes && sortedStyleIndexes.length > 0) {
            sortedStyleIndexes.sort((a, b) => a - b);
            sortedStyleIndexes.forEach(styleIndex => {
                styleSettingsModel = this.cfModel.FormatConditionStyleSettings[styleIndex];
                ruleIndex = styleSettingsInfo.styleAndRuleMappingTable[styleIndex];
                if (styleSettingsModel.IsBarStyle) {
                    condition = this.cfModel.RuleModels[ruleIndex].ConditionModel;
                    barInfo = this._getBarInfo(styleSettingsModel, styleIndex, condition);
                }
                else if (styleSettingsModel.RangeIndex || styleSettingsModel.AppearanceType !== APPEARANCE_TYPE_NONE) {
                    let style = isSecondaryStyle === true ? this.cssCustomClasses[styleIndex].secondary : this.cssCustomClasses[styleIndex].primary;
                    container.classList.add(style);
                }
                else if (styleSettingsModel.IconType !== ICON_TYPE_NONE)
                    iconType = styleSettingsModel.IconType;
            });
            if (barInfo) {
                barInfo.normalizedValue = styleSettingsInfo.normalizedValue;
                barInfo.zeroPosition = styleSettingsInfo.zeroPosition;
                this._createBarContent(container, popupContainer, barInfo, barPrefix, forceLeftAlignment);
            }
            else if (!ignoreImageSettings && iconType) {
                this._applyIconSettings(container, iconType, forceLeftAlignment);
            }
        }
    }
    _getContainerHeights(barCacheItems) {
        const containerHeights = [];
        barCacheItems.forEach(barCacheItem => {
            const containerElement = barCacheItem.container, containerBounds = containerElement.getBoundingClientRect(), containerStyles = getComputedStyle(containerElement), topBorderWidth = parseInt(containerStyles.borderTopWidth) || 0, bottomBorderWidth = parseInt(containerStyles.borderBottomWidth) || 0, height = browser_1.default.webkit ? containerBounds.height - topBorderWidth : containerBounds.height - topBorderWidth - bottomBorderWidth;
            containerHeights.push(height);
        });
        return containerHeights;
    }
    _createCssClassName(prefix, styleIndex, postFix) {
        let styleName = prefix + '-' + this.id + '-' + styleIndex;
        if (postFix)
            styleName += '-' + postFix;
        return styleName;
    }
    _applyIconSettings(container, iconType, forceLeftAlignment, flexParentStyle = styleSettingsProvider.cssClassNames.flexParent) {
        if (!container.classList.contains('dx-white-space-column')) {
            let classes = styleSettingsProvider.cssClassNames;
            let textAlignmentIsLeft = this._textAlignmentIsLeft(container);
            let imageClasses = [classes.iconConditionalFormatting, styleSettingsProvider.toIconCssClass(iconType)];
            this._wrapChildElementsToApplyIconSettings(container, classes, forceLeftAlignment);
            let marginClass = textAlignmentIsLeft ? classes.leftMargin : classes.rightMargin;
            imageClasses.push(classes.fixed, marginClass);
            const imageElt = document.createElement('div');
            imageElt.classList.add(...imageClasses);
            if (textAlignmentIsLeft) {
                container.appendChild(imageElt);
            }
            else {
                container.insertBefore(imageElt, container.firstChild);
            }
            const wrappingElement = document.createElement('div');
            wrappingElement.classList.add(flexParentStyle);
            _jquery_helpers_1.wrapInner(container, wrappingElement);
        }
    }
    _wrapChildElementsToApplyIconSettings(container, classes, forceLeftAlignment) {
        let textClasses = [this.wordWrap ? classes.wordWrap : classes.truncated,
            forceLeftAlignment ? '' : classes.stretched];
        if (container.children.length > 0) {
            container.querySelectorAll('.dx-expand-icon-container').forEach(element => element.classList.add(classes.fixed));
            container.querySelectorAll(':scope>:not(.dx-expand-icon-container)').forEach(element => element.classList.add(...textClasses));
        }
        else {
            const wrappingElement = document.createElement('div');
            wrappingElement.classList.add(...textClasses);
            _jquery_helpers_1.wrapInner(container, wrappingElement);
        }
    }
    _textAlignmentIsLeft(container) {
        var textAlignment = getComputedStyle(container).textAlign;
        return textAlignment === 'left' || textAlignment === 'start' || textAlignment === 'center' || textAlignment === 'justify';
    }
    _getBarInfo(styleSettingsModel, styleIndex, condition) {
        if (this._shouldDrawBarStyle(styleSettingsModel)) {
            return {
                showBarOnly: condition.BarOptions.ShowBarOnly,
                allowNegativeAxis: condition.BarOptions.AllowNegativeAxis,
                drawAxis: condition.BarOptions.DrawAxis,
                cssClass: this.cssCustomClasses[styleIndex].primary
            };
        }
        return null;
    }
    _createBarContent(container, popupContainer, barInfo, barPrefix, forceLeftAlignment) {
        const barCacheItem = new BarCacheItem();
        const displayText = container.textContent;
        const containerContent = Array.from(container.childNodes);
        if (!this.padding) {
            const computedStyles = getComputedStyle(container);
            this.padding = computedStyles.paddingTop + ' ' + computedStyles.paddingLeft;
        }
        if (!this.barCache[barPrefix])
            this.barCache[barPrefix] = [];
        this.barCache[barPrefix].push(barCacheItem);
        const barContainer = document.createElement('div');
        barContainer.classList.add(styleSettingsProvider.cssClassNames.relativePosition);
        barCacheItem.container = container;
        barCacheItem.barContainer = barContainer;
        if (!this.barPrefixes.some(prefix => prefix === barPrefix))
            this.barPrefixes.push(barPrefix);
        barCacheItem.barDiv = this._createBarDiv(barInfo, barPrefix);
        barCacheItem.showBarOnly = barInfo.showBarOnly;
        barCacheItem.drawAxis = barInfo.drawAxis;
        if (barInfo.drawAxis) {
            barCacheItem.axisDiv = this._createAxisDiv(barPrefix, barInfo.zeroPosition);
        }
        let textDiv;
        barCacheItem.getTextDiv = () => {
            if (!textDiv) {
                textDiv = document.createElement('div');
                if (barInfo.showBarOnly) {
                    textDiv.append(nbspSymbol);
                }
                else {
                    textDiv.classList.add(styleSettingsProvider.cssClassNames.barValue);
                    containerContent.forEach(node => textDiv.appendChild(node));
                }
            }
            return textDiv;
        };
        if (barInfo.showBarOnly) {
            const index = styleSettingsProvider.hiddenTextCounter++;
            const tooltipId = TOOLTIP_PREFIX + index;
            const containerId = HIDDEN_TEXT_PREFIX + index;
            container.id = containerId;
            var tooltipDiv = document.createElement('div');
            tooltipDiv.innerText = displayText;
            tooltipDiv.id = tooltipId;
            new tooltip_1.default(tooltipDiv, {
                target: '#' + containerId,
                container: popupContainer,
                showEvent: 'dxhoverstart',
                hideEvent: 'dxhoverend',
            });
            barCacheItem.tooltipDiv = tooltipDiv;
            $.fn.constructor(container).unbind().hover(function () { $.fn.constructor(tooltipDiv).toggle(); });
        }
    }
    _createBarDiv(barInfo, barPrefix) {
        const barDiv = document.createElement('div');
        barDiv.classList.add(styleSettingsProvider.cssClassNames.absolutePosition);
        barDiv.classList.add(barInfo.cssClass);
        barDiv.classList.add(this.DataAttributes.Bar + '_' + barPrefix);
        barDiv.append(nbspSymbol);
        _jquery_helpers_1.accessJQueryData(barDiv, this.DataAttributes.NormalizedValue, barInfo.normalizedValue);
        _jquery_helpers_1.accessJQueryData(barDiv, this.DataAttributes.ZeroPosition, barInfo.zeroPosition);
        _jquery_helpers_1.accessJQueryData(barDiv, this.DataAttributes.AllowNegativeAxis, barInfo.allowNegativeAxis);
        _jquery_helpers_1.accessJQueryData(barDiv, this.DataAttributes.DrawAxis, barInfo.drawAxis);
        return barDiv;
    }
    _createAxisDiv(barPrefix, zeroPosition) {
        const axisDiv = document.createElement('div');
        axisDiv.classList.add(styleSettingsProvider.cssClassNames.absolutePosition);
        axisDiv.classList.add(this.DataAttributes.Axis + '_' + barPrefix, styleSettingsProvider.cssClassNames.barAxis);
        _jquery_helpers_1.accessJQueryData(axisDiv, this.DataAttributes.ZeroPosition, zeroPosition);
        return axisDiv;
    }
    _setBarBounds(barDiv, containerHeight, zeroPosition, normalizedValue, allowNegativeAxis, drawAxis) {
        var barWidth = Math.abs(normalizedValue * 100), axisPosition = Math.abs(zeroPosition * 100), width = allowNegativeAxis && drawAxis && normalizedValue < 0 && zeroPosition > 0 ? 'calc(' + barWidth + '% + 1px)' : barWidth + '%';
        barDiv.style.height = containerHeight + 'px';
        barDiv.style.width = width;
        if (allowNegativeAxis && normalizedValue < 0 && zeroPosition > 0) {
            if (drawAxis) {
                barDiv.style.right = 'calc(' + (100 - axisPosition) + '% - 1px)';
            }
            else {
                barDiv.style.right = (100 - axisPosition) + '%';
            }
        }
        else
            barDiv.style.left = axisPosition + '%';
    }
    _setAxisBounds(axisDiv, containerHeight, zeroPosition) {
        axisDiv.style.left = Math.abs(zeroPosition * 100) + '%';
        axisDiv.style.height = Math.max(0, containerHeight - VERTICAL_AXIS_PADDING * 2) + 'px';
    }
    _clearCssClasses() {
        this.cssCustomClassesLinks.forEach(style => style.remove());
        this.cssCustomClassesLinks = [];
    }
    _registerCssClasses() {
        if (this.cfModel != undefined) {
            for (let styleIndex = 0; styleIndex < this.cfModel.FormatConditionStyleSettings.length; styleIndex++) {
                let styleSettingsModel = this.cfModel.FormatConditionStyleSettings[styleIndex];
                this._registerCssClassByStyleModel(styleSettingsModel, styleIndex, false);
                if (this._isShouldGenerateSecondaryStyle(styleSettingsModel)) {
                    this._registerCssClassByStyleModel(styleSettingsModel, styleIndex, true);
                }
            }
        }
    }
    _registerCssClassByStyleModel(styleSettingsModel, styleIndex, isSecondaryStyle) {
        let className = this._generateCssClassName(styleIndex, isSecondaryStyle);
        this._addCssClassToDictionary(className, styleIndex, isSecondaryStyle);
        this._generateCssClassBody(styleSettingsModel, className, this._getDrawProperty(isSecondaryStyle));
    }
    _addCssClassToDictionary(styleName, styleIndex, isSecondary) {
        let primaryStyle, secondaryStyle;
        if (this.cssCustomClasses[styleIndex]) {
            primaryStyle = this.cssCustomClasses[styleIndex].primary;
            secondaryStyle = this.cssCustomClasses[styleIndex].secondary;
        }
        if (isSecondary)
            secondaryStyle = styleName;
        else
            primaryStyle = styleName;
        this.cssCustomClasses[styleIndex] = {
            primary: primaryStyle,
            secondary: secondaryStyle
        };
    }
    _generateCssClassName(styleIndex, isSecondary) {
        let postFix = this._getStylePostFix(isSecondary);
        let cssClassName = this._createCssClassName(styleSettingsProvider.cssClassNames.customStyle, styleIndex, postFix);
        return cssClassName;
    }
    addNewStyle(styleName, styleIndex, isSecond) {
        this.cssCustomClasses[styleIndex] = {
            secondary: styleName,
            primary: styleName
        };
    }
    _isShouldGenerateSecondaryStyle(styleSettingsModel) {
        return false;
    }
    _isSecondaryStyle(styleSettingsModel) {
        return false;
    }
    _getStylePostFix(isSecondary) {
        return null;
    }
    _getDrawProperty(isSecondaryStyle) {
        return null;
    }
    _shouldDrawBarStyle(styleSettingsModel) {
        return true;
    }
    _generateCssClassBody(styleSettingsModel, cssClassName, drawProperty) {
        let selector = this._getCssTdSelector(cssClassName);
        if (styleSettingsModel.RangeIndex) {
            let condition = this.cfModel.RuleModels[styleSettingsModel.RuleIndex].ConditionModel;
            styleSettingsModel = styleSettingsProvider._getRangeBackColorStyleSettings(styleSettingsModel, condition);
            this._createCssClassFromCustomAppearanceType(styleSettingsModel, selector, drawProperty);
        }
        else if (styleSettingsModel.AppearanceType === APPEARANCE_TYPE_CUSTOM) {
            this._createCssClassFromCustomAppearanceType(styleSettingsModel, selector, drawProperty);
        }
        else if (styleSettingsModel.AppearanceType !== APPEARANCE_TYPE_NONE) {
            this._createCssClassFromPredefinedAppearanceType(selector, styleSettingsModel.AppearanceType, drawProperty);
        }
    }
    _getCssTdSelector(cssClassname) {
        return '.' + styleSettingsProvider.cssClassNames.dashboardContainer + ' .' + cssClassname + ', '
            + GRID_BANDED_ROW_SELECTOR + ' .' + cssClassname + ', '
            + PIVOT_AREA_SELECTOR + ' .' + cssClassname;
    }
    _createCssClassFromCustomAppearanceType(styleSettingsModel, cssSelector, drawProperty) {
        let cssProperties = Array();
        if (drawProperty == null || drawProperty.shouldDrawBackColorStyle)
            cssProperties.push(this._createBackColorStyle(styleSettingsModel));
        if (drawProperty == null || drawProperty.shouldDrawFontStyles)
            cssProperties = cssProperties.concat(this._createFontStyles(styleSettingsModel));
        this.cssCustomClassesLinks.push(_cssHelper_1.createCssClass(cssSelector, cssProperties));
    }
    _createFontStyles(styleSettingsModel) {
        let fontStyles = Array();
        var isUnderline = (styleSettingsModel.FontStyle & this.FontStyle.Underline) !== 0, isStrikeout = (styleSettingsModel.FontStyle & this.FontStyle.Strikeout) !== 0;
        if (styleSettingsModel.ForeColor)
            fontStyles.push(_cssHelper_1.createCssPropertyWrapper('color', _utils_1.toColor(styleSettingsModel.ForeColor)));
        if (styleSettingsModel.FontFamily)
            fontStyles.push(_cssHelper_1.createCssPropertyWrapper('font-family', styleSettingsModel.FontFamily));
        if (styleSettingsModel.FontSize && styleSettingsModel.FontSize > 0)
            fontStyles.push(_cssHelper_1.createCssPropertyWrapper('font-size', styleSettingsModel.FontSize));
        if ((styleSettingsModel.FontStyle & this.FontStyle.Bold) !== 0)
            fontStyles.push(_cssHelper_1.createCssPropertyWrapper('font-weight', 'bold'));
        if ((styleSettingsModel.FontStyle & this.FontStyle.Italic) !== 0)
            fontStyles.push(_cssHelper_1.createCssPropertyWrapper('font-style', 'italic'));
        if (isUnderline && isStrikeout)
            fontStyles.push(_cssHelper_1.createCssPropertyWrapper('text-decoration', 'underline line-through'));
        else if (isUnderline)
            fontStyles.push(_cssHelper_1.createCssPropertyWrapper('text-decoration', 'underline'));
        else if (isStrikeout)
            fontStyles.push(_cssHelper_1.createCssPropertyWrapper('text-decoration', 'line-through'));
        return fontStyles;
    }
    _createBackColorStyle(styleSettingsModel) {
        return styleSettingsModel.Color ? _cssHelper_1.createCssPropertyWrapper('background-color', _appearance_settings_provider_1.appearanceSettingsProvider.getColor(styleSettingsModel)) : null;
    }
    _createCssClassFromPredefinedAppearanceType(selector, appearanceType, drawProperty) {
        this.cssCustomClassesLinks.push(_cssHelper_1.createCssClass(selector, _appearance_settings_provider_1.appearanceSettingsProvider.toCssProperties(appearanceType, drawProperty)));
    }
}
exports.styleSettingsProvider = styleSettingsProvider;
styleSettingsProvider.cssClassNames = {
    iconConditionalFormatting: 'dx-icon-dashboard-cf',
    barAxis: 'dx-dashboard-bar-axis',
    customStyle: 'dx-dashboard-cf-style',
    customGradientStyle: 'dx-dashboard-cf-gradient-style',
    dashboardContainer: 'dx-dashboard-container',
    absolutePosition: 'dx-dashboard-absolute-position',
    relativePosition: 'dx-dashboard-relative-position',
    flexParent: 'dx-dashboard-flex-parent',
    flexParentBaseline: 'dx-dashboard-flex-parent-baseline',
    truncated: 'dx-dashboard-truncated',
    wordWrap: 'dx-dashboard-word-wrap',
    stretched: 'dx-dashboard-stretched',
    fixed: 'dx-dashboard-fixed',
    leftMargin: 'dx-dashboard-left-margin',
    rightMargin: 'dx-dashboard-right-margin',
    barContainer: 'dx-dashboard-cf-bar-container',
    barValue: 'dx-dashboard-cf-bar-value'
};
styleSettingsProvider.inctanceCounter = 0;
styleSettingsProvider.hiddenTextCounter = 0;
class cardItemStyleSettingsProvider extends styleSettingsProvider {
    constructor() {
        super();
    }
    _getDrawProperty(isSecondaryStyle) {
        let drawProperty = new DrawProperty();
        drawProperty.shouldDrawBackColorStyle = isSecondaryStyle;
        drawProperty.shouldDrawFontStyles = !isSecondaryStyle;
        return drawProperty;
    }
    _getStylePostFix(isSecondaryStyle) {
        return isSecondaryStyle ? 'card' : null;
    }
    _isShouldGenerateSecondaryStyle(styleSettingsModel) {
        return true;
    }
    _shouldDrawBarStyle(styleSettingsModel) {
        return false;
    }
    _textAlignmentIsLeft(container) {
        return false;
    }
    _getCssTdSelector(cssClassname) {
        let notSelectedOrHovered = ':not(.dx-selected-viewer-item):not(.dx-hovered-viewer-item)';
        return '.' + styleSettingsProvider.cssClassNames.dashboardContainer + ' .' + _css_class_names_1.layoutCardCssClassNames.card + notSelectedOrHovered + ' .' + cssClassname + ', '
            + '.' + styleSettingsProvider.cssClassNames.dashboardContainer + ' .' + _css_class_names_1.layoutCardCssClassNames.card + notSelectedOrHovered + '.' + cssClassname;
    }
    _applyIconSettings(container, iconType, forceLeftAlignment, flexParentStyle = styleSettingsProvider.cssClassNames.flexParent) {
        super._applyIconSettings(container, iconType, forceLeftAlignment, styleSettingsProvider.cssClassNames.flexParentBaseline);
    }
    _wrapChildElementsToApplyIconSettings(container, classes, forceLeftAlignment) {
        const textClasses = [this.wordWrap ? classes.wordWrap : classes.truncated, classes.stretched];
        const wrappingElement = document.createElement('div');
        wrappingElement.classList.add(...textClasses);
        _jquery_helpers_1.wrapInner(container, wrappingElement);
    }
    getIconType(styleSettingsInfo) {
        let sortedStyleIndexes = styleSettingsInfo ? styleSettingsInfo.styleIndexes : undefined;
        let iconType;
        if (sortedStyleIndexes && sortedStyleIndexes.length > 0) {
            sortedStyleIndexes.sort((a, b) => a - b);
            sortedStyleIndexes.forEach(index => {
                let styleSettingsModel = this.cfModel.FormatConditionStyleSettings[index];
                if (styleSettingsModel.IconType !== ICON_TYPE_NONE)
                    iconType = styleSettingsModel.IconType;
            });
        }
        return iconType;
    }
    applyIndicatorStyle(container, iconType) {
        this._applyIconSettings(container, iconType, null);
    }
}
exports.cardItemStyleSettingsProvider = cardItemStyleSettingsProvider;


/***/ }),

/***/ 89347:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 45613:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(89347);
__webpack_require__(1866);
__webpack_require__(19664);
__webpack_require__(22014);
__exportStar(__webpack_require__(55425), exports);
__exportStar(__webpack_require__(76106), exports);
__exportStar(__webpack_require__(89808), exports);
__exportStar(__webpack_require__(77852), exports);
__exportStar(__webpack_require__(24620), exports);
__exportStar(__webpack_require__(65386), exports);
__exportStar(__webpack_require__(68899), exports);
__exportStar(__webpack_require__(65428), exports);
__exportStar(__webpack_require__(1866), exports);
__exportStar(__webpack_require__(78981), exports);
__exportStar(__webpack_require__(47128), exports);
__exportStar(__webpack_require__(29489), exports);
__exportStar(__webpack_require__(56856), exports);
__exportStar(__webpack_require__(39190), exports);
__exportStar(__webpack_require__(39340), exports);
__exportStar(__webpack_require__(68528), exports);
__exportStar(__webpack_require__(22219), exports);
__exportStar(__webpack_require__(42780), exports);
__exportStar(__webpack_require__(84953), exports);
__exportStar(__webpack_require__(35814), exports);
__exportStar(__webpack_require__(82748), exports);
__exportStar(__webpack_require__(45019), exports);
__exportStar(__webpack_require__(11439), exports);
__exportStar(__webpack_require__(7031), exports);
__exportStar(__webpack_require__(89811), exports);
__exportStar(__webpack_require__(10474), exports);
__exportStar(__webpack_require__(64658), exports);
__exportStar(__webpack_require__(51115), exports);
__exportStar(__webpack_require__(4477), exports);
__exportStar(__webpack_require__(57078), exports);
__exportStar(__webpack_require__(92872), exports);
__exportStar(__webpack_require__(5243), exports);
__exportStar(__webpack_require__(34008), exports);
__exportStar(__webpack_require__(3911), exports);
__exportStar(__webpack_require__(5828), exports);
__exportStar(__webpack_require__(49483), exports);
__exportStar(__webpack_require__(62423), exports);
__exportStar(__webpack_require__(62572), exports);
__exportStar(__webpack_require__(36138), exports);
__exportStar(__webpack_require__(27782), exports);
__exportStar(__webpack_require__(63022), exports);
__exportStar(__webpack_require__(60948), exports);
__exportStar(__webpack_require__(75327), exports);
__exportStar(__webpack_require__(14352), exports);
__exportStar(__webpack_require__(14727), exports);
__exportStar(__webpack_require__(6943), exports);
__exportStar(__webpack_require__(52783), exports);
__exportStar(__webpack_require__(46109), exports);
__exportStar(__webpack_require__(62826), exports);
__exportStar(__webpack_require__(38614), exports);
__exportStar(__webpack_require__(83629), exports);
__exportStar(__webpack_require__(60495), exports);
__exportStar(__webpack_require__(92814), exports);
__exportStar(__webpack_require__(88451), exports);
__exportStar(__webpack_require__(16993), exports);
__exportStar(__webpack_require__(74078), exports);
__exportStar(__webpack_require__(96723), exports);
__exportStar(__webpack_require__(55263), exports);
__exportStar(__webpack_require__(37340), exports);
__exportStar(__webpack_require__(46474), exports);
__exportStar(__webpack_require__(46973), exports);
__exportStar(__webpack_require__(29643), exports);
__exportStar(__webpack_require__(9797), exports);
__exportStar(__webpack_require__(57983), exports);
__exportStar(__webpack_require__(62231), exports);
__exportStar(__webpack_require__(19147), exports);
__exportStar(__webpack_require__(53573), exports);
__exportStar(__webpack_require__(47164), exports);
__exportStar(__webpack_require__(82717), exports);
__exportStar(__webpack_require__(83496), exports);
__exportStar(__webpack_require__(23589), exports);
__exportStar(__webpack_require__(82581), exports);
__exportStar(__webpack_require__(75629), exports);
__exportStar(__webpack_require__(39801), exports);
__exportStar(__webpack_require__(49172), exports);
__exportStar(__webpack_require__(66969), exports);
__exportStar(__webpack_require__(22439), exports);
__exportStar(__webpack_require__(36014), exports);
__exportStar(__webpack_require__(96614), exports);
__exportStar(__webpack_require__(79676), exports);
__exportStar(__webpack_require__(57774), exports);
__exportStar(__webpack_require__(52920), exports);
__exportStar(__webpack_require__(86909), exports);
__exportStar(__webpack_require__(64174), exports);
__exportStar(__webpack_require__(78979), exports);
__exportStar(__webpack_require__(17679), exports);
__exportStar(__webpack_require__(28490), exports);
__exportStar(__webpack_require__(26603), exports);
__exportStar(__webpack_require__(53527), exports);
__exportStar(__webpack_require__(70842), exports);
__exportStar(__webpack_require__(39336), exports);
__exportStar(__webpack_require__(41603), exports);
__exportStar(__webpack_require__(26018), exports);
__exportStar(__webpack_require__(167), exports);
__exportStar(__webpack_require__(38982), exports);
__exportStar(__webpack_require__(98104), exports);


/***/ }),

/***/ 13674:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(88238);
__webpack_require__(45613);
__exportStar(__webpack_require__(88238), exports);
__exportStar(__webpack_require__(89347), exports);
__exportStar(__webpack_require__(42649), exports);
__exportStar(__webpack_require__(19664), exports);
__exportStar(__webpack_require__(59036), exports);
__exportStar(__webpack_require__(57731), exports);
__exportStar(__webpack_require__(22014), exports);


/***/ }),

/***/ 89808:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.calcTabHeadersWidth = void 0;
function calcTabHeadersWidth(tabsWidth, containerWidth, leftIndex, showCaption) {
    let actualTabsWidth = tabsWidth.map(width => 0);
    let actualLeftIndex = leftIndex;
    let rightIndex = 0;
    if (showCaption) {
        let widthSum = 0;
        let actualWidthSum = 0;
        for (let i = leftIndex; i < tabsWidth.length; i++) {
            if (widthSum + tabsWidth[i] <= containerWidth) {
                widthSum += tabsWidth[i];
                rightIndex = i;
            }
            else {
                break;
            }
        }
        if (rightIndex === tabsWidth.length - 1) {
            for (let i = leftIndex - 1; i >= 0; i--) {
                if (widthSum + tabsWidth[i] <= containerWidth) {
                    widthSum += tabsWidth[i];
                    actualLeftIndex = i;
                }
                else {
                    break;
                }
            }
        }
        for (let i = actualLeftIndex; i <= rightIndex; i++) {
            let width = Math.floor(containerWidth * (tabsWidth[i] / widthSum));
            actualTabsWidth[i] = width;
            actualWidthSum += width;
        }
        let remainder = containerWidth - actualWidthSum;
        for (let i = rightIndex; i >= 0; i--) {
            if (remainder > 0) {
                actualTabsWidth[i]++;
                remainder--;
            }
            else {
                break;
            }
        }
    }
    else {
        rightIndex = leftIndex;
        actualTabsWidth[leftIndex] = containerWidth;
    }
    return {
        widths: actualTabsWidth,
        leftVisibleIndex: actualLeftIndex,
        rightVisibleIndex: rightIndex
    };
}
exports.calcTabHeadersWidth = calcTabHeadersWidth;


/***/ }),

/***/ 77852:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deepCloneObject = exports.ensureRange = exports.checkRange = exports.defSizeInPercents = exports.defConstraints = exports.getCrossDirection = exports.nonClientElement = exports.constraints = exports.size = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
let size = function (w, h) {
    return {
        width: w,
        height: h,
        plus: function (arg) {
            var correctSize = function (value, addition) {
                return (Number.MAX_VALUE - value >= addition) ? value + addition : Number.MAX_VALUE;
            };
            return exports.size(correctSize(this.width, arg.width), correctSize(this.height, arg.height));
        },
        minus: function (arg) {
            return exports.size(this.width - arg.width, this.height - arg.height);
        },
        compareByDirections: function (size) {
            if (!size) {
                return ['width', 'height'];
            }
            else {
                var differentDirections = [];
                if (size.width != this.width)
                    differentDirections.push('width');
                if (size.height != this.height)
                    differentDirections.push('height');
                return differentDirections;
            }
        },
        constrain: function (constraints) {
            var that = this, ensureDirection = function (direction) {
                return exports.ensureRange(that[direction], constraints.min[direction], constraints.max[direction]);
            };
            return exports.size(ensureDirection('width'), ensureDirection('height'));
        },
        clone: function () {
            return exports.size(this.width, this.height);
        }
    };
};
exports.size = size;
let constraints = function (pMin, pMax) {
    return {
        min: pMin,
        max: pMax,
        consolidate: function (sourceConstraints, consolidateDirection) {
            return exports.constraints(this._consolidatePart(sourceConstraints, consolidateDirection, 'min'), this._consolidatePart(sourceConstraints, consolidateDirection, 'max'));
        },
        isFixed: function (direction) {
            if (direction) {
                var differentDirections = this.min.compareByDirections(this.max);
                return differentDirections.indexOf(direction) === -1;
            }
            else {
                return false;
            }
        },
        _consolidatePart: function (sourceConstraints, consolidateDirection, part) {
            var that = this, resultSize = exports.size(), direction = consolidateDirection ? consolidateDirection : 'width', crossDirection = exports.getCrossDirection(direction), consolidateSumFunc = function (currentDirection) {
                var val1 = that[part][currentDirection], val2 = sourceConstraints[part][currentDirection];
                return (val1 === Number.MAX_VALUE || val2 === Number.MAX_VALUE) ? Number.MAX_VALUE : (val1 + val2);
            }, consolidateMaxMinFunc = function (currentDirection, isCross) {
                var val1 = that[part][currentDirection], val2 = sourceConstraints[part][currentDirection];
                return (part === 'min' || isCross) ? Math.max(val1, val2) : Math.min(val1, val2);
            };
            resultSize[direction] = consolidateDirection ? consolidateSumFunc(direction) : consolidateMaxMinFunc(direction, false);
            resultSize[crossDirection] = consolidateMaxMinFunc(crossDirection, !!consolidateDirection);
            return resultSize;
        }
    };
};
exports.constraints = constraints;
let nonClientElement = function (width, height) {
    var resultSize = exports.size(width, height);
    return {
        getBounds: function () {
            return resultSize.clone();
        }
    };
};
exports.nonClientElement = nonClientElement;
let getCrossDirection = function (direction) {
    return direction === 'width' ? 'height' : 'width';
};
exports.getCrossDirection = getCrossDirection;
let defConstraints = function (valueMin, valueMax) {
    var paramValueMin = valueMin === undefined ? 0 : valueMin, paramValueMax = valueMax === undefined ? Number.MAX_VALUE : valueMax;
    return new this.constraints(new this.size(paramValueMin, paramValueMin), new this.size(paramValueMax, paramValueMax));
};
exports.defConstraints = defConstraints;
let defSizeInPercents = function (direction, value) {
    var size = new this.size(1, 1);
    size[direction] = value;
    return size;
};
exports.defSizeInPercents = defSizeInPercents;
let checkRange = function (value, min, max) {
    return min <= value && value <= max;
};
exports.checkRange = checkRange;
let ensureRange = function (value, min, max) {
    return Math.max(Math.min(value, max), min);
};
exports.ensureRange = ensureRange;
let deepCloneObject = function (injectObject, sourceObject, noDeepCopyPropsValues) {
    var copyObj = {};
    _jquery_helpers_1.extend(copyObj, sourceObject);
    for (var prop in noDeepCopyPropsValues)
        delete copyObj[prop];
    _jquery_helpers_1.deepExtend(injectObject, copyObj);
    _jquery_helpers_1.extend(injectObject, noDeepCopyPropsValues);
    return injectObject;
};
exports.deepCloneObject = deepCloneObject;


/***/ }),

/***/ 42649:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardPrivateSettings = exports.LegacySettings = void 0;
class LegacySettings {
}
exports.LegacySettings = LegacySettings;
LegacySettings.useLegacyTreeView = false;
LegacySettings._useCardLegacyLayout = false;
LegacySettings.showExtendedDateOccurringList = false;
LegacySettings.showUndoRedoButtonsInToolbox = false;
class DashboardPrivateSettings {
}
exports.DashboardPrivateSettings = DashboardPrivateSettings;
DashboardPrivateSettings.customNumericFormatMode = 'Disabled';
DashboardPrivateSettings.useCurrencyAccountingStyle = true;
DashboardPrivateSettings.gridColumnFilterMode = 'CaseInsensitive';


/***/ }),

/***/ 24620:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardTitleToolbarAdapter = void 0;
const $ = __webpack_require__(65311);
const _formatter_1 = __webpack_require__(93687);
const _jquery_helpers_1 = __webpack_require__(59384);
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const caption_toolbar_options_1 = __webpack_require__(57731);
const _caption_toolbar_css_classes_1 = __webpack_require__(83629);
const _dashboard_title_view_constants_1 = __webpack_require__(68899);
const _filter_icon_tooptip_1 = __webpack_require__(65428);
class DashboardTitleToolbarAdapter {
    static getTitleOptions(titleViewModel, masterFilterValues, showExportDialog, showParametersDialog, allowExport) {
        let contentItems = [];
        let actionItems = [];
        if (titleViewModel) {
            let imageViewModel = titleViewModel.LayoutModel.ImageViewModel;
            let exportMenu = {
                title: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ExportTo),
                items: [],
                itemClick: (itemData, itemElement, index) => { showExportDialog(_caption_toolbar_css_classes_1._convertToExportFormat(itemData)); },
                type: 'icons'
            };
            exportMenu.items.push(_caption_toolbar_css_classes_1.cssClasses.iconExportToPDF);
            if (_caption_toolbar_css_classes_1.Settings.allowExportToImage)
                exportMenu.items.push(_caption_toolbar_css_classes_1.cssClasses.iconExportToImage);
            exportMenu.items.push(_caption_toolbar_css_classes_1.cssClasses.iconExportToExcel);
            if (imageViewModel) {
                contentItems.push({
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.dashboardTitleImage,
                    template: () => {
                        let imageSrs = (imageViewModel.Url ? imageViewModel.Url : 'data:' + imageViewModel.MimeType + ';base64,' + imageViewModel.SourceBase64String);
                        let $image = $.fn.constructor('<img>').attr('src', imageSrs).height(_dashboard_title_view_constants_1.titleHeight + 'px');
                        $image.on('load', () => {
                            let imageHeight = $image.height();
                            if (imageHeight > _dashboard_title_view_constants_1.titleHeight) {
                                $image.width(Math.floor($image.width() * (_dashboard_title_view_constants_1.titleHeight / imageHeight)));
                                $image.height(_dashboard_title_view_constants_1.titleHeight);
                            }
                            else {
                                $image.css('margin-top', Math.ceil((_dashboard_title_view_constants_1.titleHeight - imageHeight) / 2));
                            }
                            $image.css({ visibility: 'visible' });
                        });
                        return $image;
                    }
                });
            }
            if (titleViewModel.Text) {
                contentItems.push({
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.dashboardTitle,
                    type: 'text',
                    text: titleViewModel.Text
                });
            }
            if (titleViewModel.IncludeMasterFilterValues && masterFilterValues && masterFilterValues.length == 1 && masterFilterValues[0].Values.length == 1)
                contentItems.push({
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.titleFilterText,
                    template: () => {
                        return $.fn.constructor('<div/>').text(this._getMasterFilterText(masterFilterValues)).addClass([_caption_toolbar_css_classes_1.cssClasses.filterText, _caption_toolbar_css_classes_1.cssClasses.ellipsisText].join(' '));
                    }
                });
            if (titleViewModel.IncludeMasterFilterValues && masterFilterValues && (masterFilterValues.length > 1 || (masterFilterValues.length > 0 && masterFilterValues[0].Values.length > 1)))
                contentItems.push({
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.titleFilterIcon,
                    icon: _caption_toolbar_css_classes_1.cssClasses.iconFilter,
                    type: 'button',
                    tooltip: {
                        template: (contentElement) => {
                            return _filter_icon_tooptip_1.FilterIconTooltip.getTooltipContent(_jquery_helpers_1.$wrap(contentElement), masterFilterValues);
                        },
                    }
                });
            if (allowExport)
                actionItems.push({
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.exportMenu,
                    menu: exportMenu,
                    icon: _caption_toolbar_css_classes_1.cssClasses.iconItemExport,
                    type: 'menu',
                    hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ExportTo)
                });
            if (titleViewModel.ShowParametersButton)
                actionItems.push({
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.parameters,
                    click: (element) => { showParametersDialog(); },
                    icon: _caption_toolbar_css_classes_1.cssClasses.iconParameters,
                    type: 'button',
                    hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ParametersFormCaption)
                });
        }
        return {
            contentItems: contentItems,
            actionItems: actionItems,
            navigationItems: []
        };
    }
    static _getMasterFilterText(masterFilterValues) {
        if (masterFilterValues) {
            masterFilterValues.forEach(dimFilterValue => {
                dimFilterValue.Values.forEach((val) => {
                    val.Format = val.Format || {};
                });
            });
            if (masterFilterValues.length == 1 && masterFilterValues[0].Values.length == 1) {
                return _formatter_1.formatFilterValue(masterFilterValues[0].Values[0]);
            }
        }
        return undefined;
    }
}
exports.DashboardTitleToolbarAdapter = DashboardTitleToolbarAdapter;


/***/ }),

/***/ 68899:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.contentToolbarHeight = exports.titleVerticalPadding = exports.titleHeight = void 0;
exports.titleHeight = 42;
exports.titleVerticalPadding = 3;
exports.contentToolbarHeight = 34;


/***/ }),

/***/ 65386:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardTitleView = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const _title_toolbar_1 = __webpack_require__(29643);
const _dashboard_title_toolbar_adapter_1 = __webpack_require__(24620);
class DashboardTitleView {
    constructor() {
        this.onUpdated = _jquery_helpers_1.createJQueryCallbacks();
    }
    get _visible() {
        return this._titleViewModel && this._titleViewModel.Visible;
    }
    initialize(container, controlContainer, encodeHtml, options, titleViewModel) {
        this._options = options;
        this._titleViewModel = titleViewModel;
        if (this._visible) {
            this._captionToolbar = new _title_toolbar_1.DashboardTitleToolbar(container, controlContainer, container, encodeHtml);
        }
    }
    calcHeight(masterFilterValues) {
        if (this._visible) {
            let options = _dashboard_title_toolbar_adapter_1.DashboardTitleToolbarAdapter.getTitleOptions(this._titleViewModel, masterFilterValues, this._options.showExportDialog, this._options.showParametersDialog, this._options.allowExport);
            this._raiseUpdated(options);
            return this._captionToolbar.calcHeight(this._convertToToolbarOptions(options));
        }
        return 0;
    }
    update(masterFilterValues) {
        if (this._visible) {
            let options = _dashboard_title_toolbar_adapter_1.DashboardTitleToolbarAdapter.getTitleOptions(this._titleViewModel, masterFilterValues, this._options.showExportDialog, this._options.showParametersDialog, this._options.allowExport);
            this._raiseUpdated(options);
            this._captionToolbar.update(this._convertToToolbarOptions(options), this._titleViewModel.LayoutModel.Alignment === 'Center');
        }
    }
    resize() {
        if (this._visible) {
            this._captionToolbar.onResize();
        }
    }
    _convertToToolbarOptions(options) {
        return {
            staticItems: options.contentItems,
            actionItems: options.actionItems,
            stateItems: []
        };
    }
    _raiseUpdated(option) {
        this.onUpdated.fire(option);
    }
}
exports.DashboardTitleView = DashboardTitleView;


/***/ }),

/***/ 65428:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FilterIconTooltip = exports.titleTooltipClasses = void 0;
const $ = __webpack_require__(65311);
const _formatter_1 = __webpack_require__(93687);
const _render_helper_1 = __webpack_require__(39336);
exports.titleTooltipClasses = {
    root: 'dx-dashboard-title-tooltip',
    list: 'dx-dashboard-title-tooltip-list',
    listText: 'dx-dashboard-title-tooltip-list-text',
    subList: 'dx-dashboard-title-tooltip-sublist',
    subListItem: 'dx-dashboard-title-tooltip-sublist-item'
};
class FilterIconTooltip {
    static getTooltipContent(contentElement, masterFilterValues) {
        contentElement.addClass(exports.titleTooltipClasses.root);
        let $tooltipList = $.fn.constructor('<ul/>', { 'class': exports.titleTooltipClasses.list });
        masterFilterValues.forEach((argument, i) => {
            let $tooltipListItem = $.fn.constructor('<li/>').appendTo($tooltipList);
            $tooltipListItem.css({ 'padding-top': i == 0 ? 0 : this.FILTER_LIST_SPACE + 'px' });
            _render_helper_1.RenderHelper.html($.fn.constructor('<div/>', { 'class': exports.titleTooltipClasses.listText }).appendTo($tooltipListItem).get(0), argument.Name, true);
            let $tooltipSublist = $.fn.constructor('<ul/>', { 'class': exports.titleTooltipClasses.subList }).appendTo($tooltipListItem);
            let maxFilterListValues = this._calcMaxFilterListValues(masterFilterValues);
            var maxFilterValues = this._calcMaxFilterValues(maxFilterListValues, masterFilterValues);
            for (var j = 0; j < maxFilterValues; j++) {
                if (j >= argument.Values.length && argument.Truncated
                    || j + 1 == maxFilterValues && (j + 1 < argument.Values.length
                        || argument.Truncated)) {
                    $.fn.constructor('<li/>', { 'class': exports.titleTooltipClasses.subListItem }).appendTo($tooltipSublist).append('...');
                    break;
                }
                if (j >= argument.Values.length) {
                    break;
                }
                _render_helper_1.RenderHelper.html($.fn.constructor('<li/>', { 'class': exports.titleTooltipClasses.subListItem }).appendTo($tooltipSublist).get(0), _formatter_1.formatFilterValue(argument.Values[j]), true);
            }
        });
        return $tooltipList;
    }
    static _calcMaxFilterListValues(masterFilterValues) {
        var that = this, lineHeightString = $.fn.constructor('<div/>', { 'class': exports.titleTooltipClasses.root }).css('line-height'), lineHeightTmp = parseInt(lineHeightString, 10), lineHeight = lineHeightTmp && lineHeightString.length > 2 && lineHeightString.substr(lineHeightString.length - 2) == 'px' ? lineHeightTmp : this.DEFAULT_LINE_HEIGHT, maxHeight = this._calcMaxHeight();
        return Math.floor((maxHeight - (masterFilterValues.length - 1) * this.FILTER_LIST_SPACE) / lineHeight);
    }
    static _calcMaxFilterValues(maxFilterListValues, masterFilterValues) {
        var that = this, MIN_FILTER_VALUES = 4, MAX_FILTER_LIST_VALUES = 100, maxFilterValues, curFilterListValues;
        maxFilterListValues = Math.min(maxFilterListValues, MAX_FILTER_LIST_VALUES);
        for (maxFilterValues = Math.max(maxFilterListValues, MIN_FILTER_VALUES); maxFilterValues >= MIN_FILTER_VALUES; maxFilterValues--) {
            if (maxFilterValues == MIN_FILTER_VALUES) {
                break;
            }
            curFilterListValues = 0;
            $.each(masterFilterValues, function (index, dimensionFilterValues) {
                curFilterListValues += (maxFilterValues < dimensionFilterValues.Values.length ? maxFilterValues : dimensionFilterValues.Values.length) + 1;
                if (curFilterListValues > maxFilterListValues) {
                    return false;
                }
            });
            if (curFilterListValues <= maxFilterListValues) {
                break;
            }
        }
        return maxFilterValues;
    }
    static _calcMaxHeight() {
        return Math.floor($.fn.constructor(window).height() * 0.75);
    }
}
exports.FilterIconTooltip = FilterIconTooltip;
FilterIconTooltip.FILTER_LIST_SPACE = 8;
FilterIconTooltip.DEFAULT_LINE_HEIGHT = 16;


/***/ }),

/***/ 1866:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 11439:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cssClassNamesBaseItem = exports.baseItem = exports.getControlContainer = exports.createDefaultToolbar = void 0;
const $ = __webpack_require__(65311);
const _default_1 = __webpack_require__(65855);
const _common_1 = __webpack_require__(29009);
const _factory_1 = __webpack_require__(99150);
const _formatter_1 = __webpack_require__(93687);
const _jquery_helpers_1 = __webpack_require__(59384);
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const _utils_1 = __webpack_require__(7590);
const _z_index_1 = __webpack_require__(56330);
const _utils_layout_1 = __webpack_require__(77852);
const _dashboard_viewer_constants_1 = __webpack_require__(6943);
const caption_toolbar_options_1 = __webpack_require__(57731);
const _caption_toolbar_css_classes_1 = __webpack_require__(83629);
const _clickable_floating_toolbar_1 = __webpack_require__(60495);
const _hidden_caption_toolbar_1 = __webpack_require__(88451);
const _hovered_floating_toolbar_1 = __webpack_require__(16993);
const _hovered_toolbar_1 = __webpack_require__(74078);
const _minimized_clickable_toolbar_1 = __webpack_require__(96723);
const _minimized_hovered_toolbar_1 = __webpack_require__(55263);
const _static_toolbar_1 = __webpack_require__(46973);
const _render_helper_1 = __webpack_require__(39336);
const _dashboard_layout_mode_helper_1 = __webpack_require__(26018);
const _item_loading_1 = __webpack_require__(56856);
const _interactivity_controller_1 = __webpack_require__(5828);
var createDefaultToolbar = (viewerItem, container, controlContainer, popupContainer, viewOptions) => {
    if (viewOptions.hiddenToolbar) {
        return new _hidden_caption_toolbar_1.HiddenCaptionToolbar();
    }
    else if (_dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isTouch) {
        if (viewOptions.hasCaption) {
            return new _static_toolbar_1.StaticCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, _caption_toolbar_css_classes_1.cssClasses.caption, viewOptions.captionToolbarSeparatorRequired, false);
        }
        else {
            if (viewOptions.allowPreview) {
                return new _minimized_clickable_toolbar_1.MinimizedClickableCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, viewOptions.isBottomFloatingToolbarPosition, viewOptions.itemHasOwnContent);
            }
            else {
                return new _clickable_floating_toolbar_1.ClickableFloatingCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, viewOptions.isBottomFloatingToolbarPosition, viewOptions.itemHasOwnContent);
            }
        }
    }
    else {
        if (viewOptions.hasCaption) {
            return new _hovered_toolbar_1.HoveredDashboardCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, viewOptions.captionToolbarSeparatorRequired);
        }
        else {
            if (viewOptions.allowPreview) {
                return new _minimized_hovered_toolbar_1.MinimizedHoveredCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, viewOptions.isBottomFloatingToolbarPosition);
            }
            else {
                return new _hovered_floating_toolbar_1.HoveredFloatingCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, viewOptions.isBottomFloatingToolbarPosition);
            }
        }
    }
};
exports.createDefaultToolbar = createDefaultToolbar;
function getControlContainer(element) {
    return $.fn.constructor(element).closest('.dx-dashboard-widget-container')[0];
}
exports.getControlContainer = getControlContainer;
class baseItem {
    constructor($container, options) {
        this._lockCount = 0;
        this._isFixedHeight = false;
        this.customHoverEnabled = false;
        this._allowMultiselection = false;
        this.dateToString = (date) => date.toJSON();
        this.selected = _jquery_helpers_1.createJQueryCallbacks();
        this.clearMasterFilter = _jquery_helpers_1.createJQueryCallbacks();
        this.drillUp = _jquery_helpers_1.createJQueryCallbacks();
        this.contentElementSelection = _jquery_helpers_1.createJQueryCallbacks();
        this.expandValue = _jquery_helpers_1.createJQueryCallbacks();
        this.clientStateUpdate = _jquery_helpers_1.createJQueryCallbacks();
        this.dataRequest = _jquery_helpers_1.createJQueryCallbacks();
        this.itemClick = _jquery_helpers_1.createJQueryCallbacks();
        this.itemHover = _jquery_helpers_1.createJQueryCallbacks();
        this.itemSelectionChanged = _jquery_helpers_1.createJQueryCallbacks();
        this.itemWidgetCreated = _jquery_helpers_1.createJQueryCallbacks();
        this.itemWidgetUpdating = _jquery_helpers_1.createJQueryCallbacks();
        this.itemWidgetUpdated = _jquery_helpers_1.createJQueryCallbacks();
        this.itemWidgetOptionsPrepared = _jquery_helpers_1.createJQueryCallbacks();
        this.itemCaptionToolbarUpdated = _jquery_helpers_1.createJQueryCallbacks();
        this.constraintsUpdated = _jquery_helpers_1.createJQueryCallbacks();
        this.customTargetAxes = [];
        this.customDefaultSelectedValues = [];
        this.itemLoadingElement = new _item_loading_1.ItemLoadingElement();
        this.visualMode = 'full';
        this._hasWidget = false;
        this.deferredToolbarRenderingPromise = undefined;
        this.createCaptionToolbar = exports.createDefaultToolbar;
        this._initializeData(options);
        this.container = $container;
        this.controlContainer = options.controlContainer;
        this._boundaryContainer = options.boundaryContainer;
        this.interactivityController = new _interactivity_controller_1.interactivityController($.proxy(this.getSelectedTuples, this));
        this.interactivityController.selectionChanged.add($.proxy(this._onSelectionChanged, this));
        this.customSelectionMode = _interactivity_controller_1.dashboardSelectionMode.none;
    }
    get hasWidget() {
        return this._hasWidget;
    }
    get _captionToolbarSeparatorRequired() {
        return false;
    }
    get _isBottomFloatingToolbarPosition() {
        return false;
    }
    get _allowPreview() {
        return false;
    }
    get _shouldApplySelectionOnInitialRender() {
        return true;
    }
    get dataController() { return null; }
    set dataController(dataController) { }
    _initializeData(newOptions) {
        if (!this.options) {
            this.options = newOptions;
        }
        else {
            this.options = {
                Name: newOptions.Name,
                Type: newOptions.Type,
                ParentContainer: newOptions.ParentContainer,
                ContentType: newOptions.ContentType,
                SelectedValues: newOptions.SelectedValues,
                ViewModel: newOptions.ViewModel || this.options.ViewModel,
                ActionModel: newOptions.ActionModel || this.options.ActionModel,
                CaptionViewModel: newOptions.CaptionViewModel || this.options.CaptionViewModel,
                ConditionalFormattingModel: newOptions.ConditionalFormattingModel || this.options.ConditionalFormattingModel,
                Parameters: newOptions.Parameters,
                DrillDownValues: newOptions.DrillDownValues,
                DrillDownUniqueValues: newOptions.DrillDownUniqueValues,
                AxisNames: newOptions.AxisNames,
                DimensionIds: newOptions.DimensionIds,
                multiData: newOptions.multiData,
                encodeHtml: newOptions.encodeHtml !== undefined ? newOptions.encodeHtml : this.options.encodeHtml,
                allowExport: newOptions.allowExport !== undefined ? newOptions.allowExport : this.options.allowExport,
                showExportDialog: newOptions.showExportDialog !== undefined ? newOptions.showExportDialog : this.options.showExportDialog,
                isDataReduced: !!newOptions.ItemData ? newOptions.ItemData.Reduced : this.options.isDataReduced,
                useNeutralFilterMode: newOptions.useNeutralFilterMode !== undefined ? newOptions.useNeutralFilterMode : this.options.useNeutralFilterMode,
                FullViewport: newOptions.FullViewport,
                LimitDataState: newOptions.LimitDataState
            };
        }
        if (!this.dataController || (newOptions.ContentType != _common_1.contentType.actionModel)) {
            var drillDownState = {};
            drillDownState[this._getDrillDownAxisName()] = this.options.DrillDownUniqueValues;
            this.dataController = _factory_1.defaultDataControllerFactory.createDataController(this.options.Type, {
                multiData: this.options.multiData,
                viewModel: this.options.ViewModel,
                cfModel: this.options.ConditionalFormattingModel,
                useNeutralFilterMode: this.options.useNeutralFilterMode,
                drillDownState: drillDownState
            });
            if (this.dataController) {
                this.dataController.update(this.options.SelectedValues, this._isEncodeHtml());
            }
        }
        this.customSelectedTuples = [];
    }
    initialDataRequest() {
        if (this.hasWidget) {
            this.initialDataRequestUnsafe();
        }
    }
    initialDataRequestUnsafe() {
    }
    get allowMultiselection() {
        return this._allowMultiselection;
    }
    set allowMultiselection(value) {
        this._allowMultiselection = value;
    }
    forceUpdateInteractivity() {
        this.updateCaptionToolbar();
        this.updateInteractivityOptions();
    }
    clearSelection() {
        if (this.hasWidget) {
            this._clearSelectionUnsafe();
        }
        else {
            this._clearSelectionBase();
        }
    }
    _clearSelectionUnsafe() {
        this._clearSelectionBase();
    }
    _clearSelectionBase() {
    }
    performClearSelection() {
        this._setSelectedValues(null);
        this.clearSelection();
    }
    selectTuple(tuple, state) {
        if (this.hasWidget) {
            this.selectTupleUnsafe(tuple, state);
        }
    }
    selectTupleUnsafe(tuple, state) {
    }
    setSelection(values) {
        if (this.hasWidget) {
            this._setSelectionUnsafe(values);
        }
        else {
            this.setSelectionBase(values);
        }
    }
    _setSelectionUnsafe(values) {
        this.setSelectionBase(values);
    }
    setSelectionBase(values) {
        this._setSelectedValues(values);
    }
    _applySelection() {
        if (this.hasWidget) {
            this._applySelectionUnsafe();
        }
    }
    _applySelectionUnsafe() {
    }
    _isEncodeHtml() {
        return (!this.options || this.options.encodeHtml == undefined) ? true : this.options.encodeHtml;
    }
    _isSupportDataAwareExport() {
        return this.options && this.options.allowExport && this.options.ViewModel && this.options.ViewModel.SupportDataAwareExport;
    }
    _isLocked() {
        if (this._lockCount < 0)
            throw new Error("Unresolved locker state (looks like 'unlock' method is called without 'lock')");
        return this._lockCount > 0;
    }
    _lock() {
        this._lockCount++;
    }
    _unlock() {
        this._lockCount--;
    }
    _getCustomSelectionMode() {
        return this.customSelectionMode;
    }
    _setCustomSelectionMode(value) {
        this.customSelectionMode = value;
    }
    _getCustomHoverEnabled() {
        return this.customHoverEnabled;
    }
    _setCustomHoverEnabled(value) {
        this.customHoverEnabled = value;
    }
    _getCustomTargetAxes() {
        return this.customTargetAxes;
    }
    _setCustomTargetAxes(value) {
        this.customTargetAxes = value;
    }
    _getTargetAxes() {
        if (!this.isInteractivityActionEnabled()) {
            return this._getCustomTargetAxes();
        }
        else {
            return this._getAxisNames();
        }
    }
    getSelectedTuples() {
        var that = this, multiData = that.options.multiData, axisNames = that._getAxisNames(), dimensionByAxis = {}, tupleValues, axisValues, valueIndex;
        if (that._canSetMasterFilter() || that._canSetMultipleMasterFilter() || that._canPerformDrillDown()) {
            var tuples = [];
            if (that.options.SelectedValues == null)
                return tuples;
            if (axisNames.length > 1) {
                axisNames.forEach(axisName => {
                    dimensionByAxis[axisName] = multiData.getAxis(axisName).getDimensions();
                });
                that.options.SelectedValues.forEach(selection => {
                    tupleValues = [];
                    valueIndex = 0;
                    axisNames.forEach(axisName => {
                        axisValues = [];
                        dimensionByAxis[axisName].forEach(() => {
                            axisValues.push(selection[valueIndex++]);
                        });
                        tupleValues.push({ axisName: axisName, value: axisValues });
                    });
                    tuples.push(tupleValues);
                });
            }
            else {
                var drillDownValues = that._getDrillDownValues();
                that.options.SelectedValues.forEach(value => {
                    tuples.push([{ axisName: axisNames[0], value: drillDownValues.concat(value) }]);
                });
            }
            return tuples;
        }
        else {
            return that.customSelectedTuples;
        }
    }
    updateItem(options) {
        var that = this;
        this._setCustomSelectionMode(options.selectionMode);
        this._setCustomTargetAxes(options.targetAxes);
        this._setCustomHoverEnabled(options.hoverEnabled);
        this.customDefaultSelectedValues = options.defaultSelectedValues;
        that.updateInteractivityOptions();
        if (!this.isInteractivityActionEnabled()) {
            var customDefaultSelectedValues = options.selectionMode == _interactivity_controller_1.dashboardSelectionMode.single ? that.customDefaultSelectedValues.slice(0, 1) : that.customDefaultSelectedValues;
            that.interactivityController.clickAction(customDefaultSelectedValues);
        }
        this.updateCaptionToolbar();
    }
    forceUpdateItem() {
        this.forceCreateCaptionToolbar();
        this.updateContentSize();
    }
    _changeTuple(tuple) {
        var that = this, newTuple = [];
        tuple.forEach(axisValue => {
            var axisName = axisValue.axisName, value = axisValue.value;
            newTuple.push({ axisName: axisName, value: (axisName == that._getDrillDownAxisName()) ? value.slice(-1) : value });
        });
        return newTuple;
    }
    _onSelectionChanged(tuples) {
        var that = this, currentSelectedValues = this.options.SelectedValues, singleSelection = !!currentSelectedValues && currentSelectedValues.length === 1 ? currentSelectedValues[0] : null, newSelection = [], tupleValues, selectedTuples = this.getSelectedTuples(), actionName;
        this._selectTuples(tuples, selectedTuples, true);
        this._selectTuples(selectedTuples, tuples, false);
        if (this.isInteractivityActionEnabled()) {
            tuples.forEach(tuple => {
                tupleValues = [];
                that._getAxisNames().forEach(axisName => {
                    tupleValues.push.apply(tupleValues, _utils_1.getAxisPointValue(tuple, axisName).slice());
                });
                newSelection.push(tupleValues);
            });
            newSelection = this._deductDrillDownValues(newSelection);
            this._setSelectedValues(newSelection);
            actionName = this._getSelectionCallbackType(newSelection.length === 1 && singleSelection && _utils_1.checkValuesAreEqual(newSelection[0], singleSelection));
            if (actionName === _common_1.viewerActions.drillDown) {
                newSelection = newSelection[0];
            }
            if (this._mustSelectingFired(newSelection)) {
                this.selected.fire(this.getName(), actionName, newSelection);
            }
            else {
                this._onClearMasterFilter();
            }
        }
        else {
            this.customSelectedTuples = [];
            tuples.forEach(tuple => {
                that.customSelectedTuples.push(tuple);
            });
        }
        if (this.customSelectionMode == _interactivity_controller_1.dashboardSelectionMode.multiple) {
            this.updateCaptionToolbar();
        }
        if (this.itemSelectionChanged) {
            this.itemSelectionChanged.fire(this.getName(), tuples);
        }
    }
    _mustSelectingFired(values) {
        return values.length > 0;
    }
    _patchTroughDrillDownValues(values) {
        var drillDownValues = this._getDrillDownValues(), filterValues = [];
        if (values) {
            values.forEach(value => {
                filterValues.push(drillDownValues.concat(value));
            });
        }
        return filterValues;
    }
    _deductDrillDownValues(values) {
        var drillDownValues = this._getDrillDownValues(), drillDownValuesLength = drillDownValues.length, cutValue;
        values.forEach(value => {
            cutValue = value.slice(0, drillDownValuesLength);
            if (_utils_1.checkValuesAreEqual(cutValue, drillDownValues))
                value.splice(0, drillDownValuesLength);
        });
        return values;
    }
    _getSelectionCallbackType(performDrillDown) {
        var actionName = undefined;
        if (this._canSetMultipleMasterFilter() && this.allowMultiselection) {
            actionName = _common_1.viewerActions.setMultipleValuesMasterFilter;
        }
        else if (this._canSetMasterFilter()) {
            if (performDrillDown) {
                if (this._canPerformDrillDown())
                    actionName = _common_1.viewerActions.drillDown;
            }
            else {
                actionName = _common_1.viewerActions.setMasterFilter;
            }
        }
        else if (this._canPerformDrillDown()) {
            actionName = _common_1.viewerActions.drillDown;
        }
        return actionName;
    }
    _selectTuples(tuplesToSelect, unaffectedTuples, isSelect) {
        var that = this;
        var updateTuple = function (tuple) {
            if (_utils_1.checkArrayContainsTuple(unaffectedTuples, tuple) == undefined) {
                return that._hasDrillUpButton() && !that._isMultiDataSupported() ? that._changeTuple(tuple) : tuple;
            }
            return undefined;
        };
        this._selectTuplesCore(tuplesToSelect, updateTuple, isSelect);
    }
    _selectTuplesCore(tuples, updateTupleDelegate, state) {
        var that = this;
        $.each(tuples, function (index, tuple) {
            var updatedTuple = updateTupleDelegate(tuple);
            if (!!updatedTuple) {
                that.selectTuple(updatedTuple, state);
            }
        });
    }
    _renderContent(element, changeExisting, afterRenderCallback) {
        if (this.visualMode !== 'caption') {
            this._hasWidget = true;
            return this.renderContentUnsafe(element, changeExisting, afterRenderCallback);
        }
        return false;
    }
    renderContentUnsafe($element, changeExisting, afterRenderCallback) {
        return false;
    }
    renderPartialContent() {
        if (this.hasWidget) {
            this.renderPartialContentUnsafe();
        }
    }
    renderPartialContentUnsafe() {
    }
    updateContentState() {
        if (this.hasWidget) {
            this.updateContentStateUnsafe();
        }
    }
    updateContentStateUnsafe() {
    }
    getInfo() {
        if (this.hasWidget) {
            return this.getInfoUnsafe();
        }
        else {
            return this.getInfoBase();
        }
    }
    getInfoUnsafe() {
        return this.getInfoBase();
    }
    getInfoBase() {
        var that = this, container = this._getBoundaryContainer();
        return {
            name: that.getName(),
            headerHeight: this.hasCaption() ? this.captionToolbar.calcHeight(this.getCaptionToolbarOptions()) : 0,
            position: $.fn.constructor(container).offset(),
            width: $.fn.constructor(container).outerWidth(),
            height: $.fn.constructor(container).outerHeight(),
            virtualSize: undefined,
            scroll: undefined
        };
    }
    getName() {
        return this.options.Name;
    }
    getCaption() {
        return this.options.CaptionViewModel && this.options.CaptionViewModel.Text ? this.options.CaptionViewModel.Text.concat(this._getParametersTitle() || '') : undefined;
    }
    hasCaption(options) {
        var opts = options || this.options;
        return opts && opts.CaptionViewModel && opts.CaptionViewModel.ShowCaption;
    }
    hasParentContainer() {
        return this.options && _utils_1.type.isDefined(this.options.ParentContainer);
    }
    _isPaneEmpty() {
        return this.hasParentContainer();
    }
    _isTransparentBackground() {
        return false;
    }
    render(container) {
        this.container = this.container || container;
        this.container.setAttribute('data-layout-item-name', this.getName());
        this.contentRoot = document.createElement('div');
        _utils_1.moveContent(this.container, this.contentRoot, true);
        if (!this.captionToolbar) {
            this.captionToolbar = this._createCaptionToolbar(this.container, this.controlContainer, this._getBoundaryContainer());
            this.updateCaptionToolbar();
        }
        else if (container) {
            this.forceCreateCaptionToolbar();
        }
        this.container.appendChild(this.contentRoot);
        this.updateContentSize();
        this._changeContent(false);
    }
    dispose() {
        this._removeShildElement();
        this.itemLoadingElement.hide();
        if (this.captionToolbar) {
            this.captionToolbar.dispose();
        }
    }
    updateContent(newOptions) {
        var isPrevShowCaption = this.hasCaption(this.options), isNewShowCaption = this.hasCaption(newOptions), showCaptionChanged = isPrevShowCaption !== isNewShowCaption;
        this._initializeData(newOptions);
        if (_utils_1.type.isDefined(isNewShowCaption) && showCaptionChanged) {
            this.forceCreateCaptionToolbar();
        }
        else {
            this.updateCaptionToolbar();
        }
        switch (newOptions.ContentType) {
            case _common_1.contentType.partialDataSource:
            case _common_1.contentType.completeDataSource:
                if (newOptions.DataSource || (newOptions.ItemData && newOptions.ItemData.DataStorageDTO)) {
                    if (newOptions.forceUpdateViewModel)
                        this._changeContent(true);
                    else
                        this.renderPartialContent();
                }
                break;
            case _common_1.contentType.actionModel:
                if (!this.isInteractivityActionEnabled()) {
                    this.updateContentState();
                }
                break;
            default:
                this._changeContent(true);
                break;
        }
    }
    updateClientState(clientState) {
        if (this.hasWidget && this.options.ContentType !== _common_1.contentType.partialDataSource && this.options.ContentType !== _common_1.contentType.completeDataSource)
            this._updateClientStateUnsafe(clientState);
    }
    _removeShildElement() {
        let shieldingElement = this.shieldingElement;
        if (shieldingElement) {
            shieldingElement.parentNode.removeChild(shieldingElement);
            delete this.shieldingElement;
        }
    }
    showLoadingPanel() {
        this._toggleLoadingPanel(true);
    }
    hideLoadingPanel() {
        this._toggleLoadingPanel(false);
    }
    _toggleLoadingPanel(loading) {
        if (!this.container)
            return;
        const container = this._getBoundaryContainer();
        if (this.visualMode !== 'caption') {
            if (!!loading) {
                this.itemLoadingElement.show(container);
            }
            else {
                this.itemLoadingElement.hide();
            }
        }
        if (!loading) {
            this._removeShildElement();
        }
        else if (!this.shieldingElement) {
            const position = this._getContainerPosition();
            const shieldingElement = document.createElement('div');
            shieldingElement.classList.add('dx-dashboard-item-shield');
            shieldingElement.style.left = position.left.toString() + 'px';
            shieldingElement.style.top = position.top.toString() + 'px';
            shieldingElement.style.width = position.width.toString() + 'px';
            shieldingElement.style.height = position.height.toString() + 'px';
            shieldingElement.style.zIndex = _z_index_1.zIndex.dashboardItemShield.toString();
            this.shieldingElement = shieldingElement;
            $.fn.constructor(container).prepend(shieldingElement);
        }
    }
    width(width) {
        var that = this;
        if ($.isNumeric(width)) {
            that.setSize(width, undefined);
        }
        else {
            return $.fn.constructor(that.container).outerWidth();
        }
    }
    height(height) {
        var that = this;
        if ($.isNumeric(height)) {
            that.setSize(undefined, height);
        }
        else {
            return $.fn.constructor(that.container).outerHeight();
        }
    }
    setSize(width, height) {
        var that = this, oldSize = { width: that.width(), height: that.height() }, newSize = { width: width, height: height };
        if (width) {
            $.fn.constructor(that.container).outerWidth(width);
        }
        if (height) {
            $.fn.constructor(that.container).outerHeight(height);
        }
        that._resize();
    }
    getConstraints(includeBorders) {
        var borderSize = includeBorders ? _render_helper_1.RenderHelper.getBorderSizeByClasses(this._generateOuterBorderClasses().concat(this._generateInnerBorderClasses())) : { width: 0, height: 0 }, headerHeight = this._calcHeaderAndFooterHeight(), contentMinHeight = this._getMinContentHeight(), height = borderSize.height + headerHeight + contentMinHeight;
        return _utils_layout_1.constraints(_utils_layout_1.size(_dashboard_viewer_constants_1.DashboardViewerConstants.minPaneWidth + borderSize.width, height), _utils_layout_1.size(Number.MAX_VALUE, this._isFixedHeight ? height : Number.MAX_VALUE));
    }
    getOffset() {
        return {
            width: 0,
            height: 0
        };
    }
    updateInteractivityOptions() {
        var that = this, selectionMode = _interactivity_controller_1.dashboardSelectionMode.none;
        if (!that.isInteractivityActionEnabled()) {
            that.updateContentState();
            selectionMode = this.customSelectionMode;
            if (selectionMode == _interactivity_controller_1.dashboardSelectionMode.multiple && !this.allowMultiselection)
                selectionMode = _interactivity_controller_1.dashboardSelectionMode.single;
        }
        else {
            if (this._canSetMultipleMasterFilter() && this.allowMultiselection) {
                selectionMode = _interactivity_controller_1.dashboardSelectionMode.multiple;
            }
            else {
                if (that.isInteractivityActionEnabled()) {
                    selectionMode = _interactivity_controller_1.dashboardSelectionMode.single;
                }
            }
        }
        that.interactivityController.setOptions(selectionMode);
    }
    getCaptionToolbarOptions() {
        let actionAtems = this._getActionToolbarItems();
        let staticItems = this._getStaticToolbarItems();
        let stateItems = this._getStateToolbarItems();
        var toolbarOptions = {
            staticItems: staticItems,
            actionItems: actionAtems,
            stateItems: stateItems,
            navigationItems: []
        };
        this.addContextCaptionToolbarOptions && this.addContextCaptionToolbarOptions(toolbarOptions);
        this.itemCaptionToolbarUpdated.fire(this.getName(), toolbarOptions);
        return toolbarOptions;
    }
    updateConstraints() {
        this.constraintsUpdated.fire(this.getName());
    }
    updateCaptionToolbar() {
        let options = this.getCaptionToolbarOptions();
        if (this.deferredToolbarRenderingPromise) {
            this.deferredToolbarRenderingPromise(this.getName(), this.captionToolbar.calcMinWidth(options), this.captionToolbar.calcHeight(options)).done(() => {
                this._updateCaptionToolbarAndSize(options);
            });
        }
        else {
            this._updateCaptionToolbarAndSize(options);
        }
    }
    _createCaptionToolbar(container, controlContainer, popupContainer) {
        return this.createCaptionToolbar(this, container, controlContainer, popupContainer, {
            encodeHtml: this._isEncodeHtml(),
            hasCaption: this.hasCaption(),
            isBottomFloatingToolbarPosition: this._isBottomFloatingToolbarPosition,
            captionToolbarSeparatorRequired: this._captionToolbarSeparatorRequired,
            allowPreview: this._allowPreview,
            hiddenToolbar: this.visualMode === 'content',
            itemHasOwnContent: this._itemHasOwnContent()
        });
    }
    _updateCaptionToolbarAndSize(options) {
        let heightChanged = this.captionToolbar.update(options);
        if (heightChanged) {
            this.updateContentSize();
        }
    }
    forceCreateCaptionToolbar() {
        this.captionToolbar.dispose();
        this.captionToolbar = this._createCaptionToolbar(this.container, this.controlContainer, this._getBoundaryContainer());
        this.updateCaptionToolbar();
    }
    _itemHasOwnContent() {
        return true;
    }
    _updateClientStateUnsafe(clientState) {
    }
    _changeContent(updateExisting) {
        if (this.visualMode === 'caption')
            return;
        let afterRenderCallback = () => {
            if (updateExisting) {
                this._raiseItemWidgetUpdated();
            }
            else {
                this._raiseItemWidgetCreated();
            }
            if (updateExisting || this._shouldApplySelectionOnInitialRender)
                this._applySelection();
        };
        if (updateExisting) {
            this._raiseItemWidgetUpdating();
        }
        if (!this._renderContent(this.contentRoot, updateExisting, afterRenderCallback)) {
            afterRenderCallback();
        }
    }
    _calcHeaderAndFooterHeight() {
        var headerAndFooterHeight = 0;
        let toolbar = this._createCaptionToolbar(undefined, undefined, undefined);
        headerAndFooterHeight += toolbar.calcHeight(this.getCaptionToolbarOptions());
        return headerAndFooterHeight;
    }
    _getReducedDataTooltip() {
        if (this.options.LimitDataState) {
            if (this.options.LimitDataState.isReduced)
                return _default_1.getLocalizationById('DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip');
            return _default_1.getLocalizationById('DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip');
        }
        return undefined;
    }
    _getStaticToolbarItems() {
        let items = [];
        if (this.hasCaption()) {
            let caption = this.getCaption();
            if (caption) {
                items.push({
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.itemCaption,
                    type: 'text',
                    text: caption
                });
            }
            if (this.allowLimitDataCallback && this.options.LimitDataState.isReduceMode)
                items.push(this._getReduceDataToolbarItem());
        }
        return items;
    }
    _getReduceDataToolbarItem() {
        return {
            name: caption_toolbar_options_1.dashboardToolbarItemNames.limitVisibleData,
            checked: this.options.LimitDataState.isReduced,
            click: (element) => { this.allowLimitDataCallback(); },
            icon: _caption_toolbar_css_classes_1.cssClasses.iconLimitVisibleData,
            type: 'button',
            tooltip: {
                className: _caption_toolbar_css_classes_1.cssClasses.tooltipLimitVisibleData,
                template: () => {
                    let div = document.createElement('div');
                    div.innerText = this._getReducedDataTooltip();
                    return div;
                }
            }
        };
    }
    _getStateToolbarItems() {
        let items = this._getSpecificStatePanelItems();
        let actionModel = this.options.ActionModel;
        if (this._hasClearMasterFilterButton()) {
            items.push({
                name: caption_toolbar_options_1.dashboardToolbarItemNames.clearMasterFilter,
                click: (element) => { this._onClearMasterFilter(); },
                icon: _caption_toolbar_css_classes_1.cssClasses.iconClearMasterFilter,
                type: 'button',
                hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ClearMasterFilter)
            });
        }
        if (this.options.useNeutralFilterMode && actionModel && actionModel.ClearMasterFilterButtonState === 'Disabled') {
            items.push({
                name: caption_toolbar_options_1.dashboardToolbarItemNames.clearMasterFilter,
                icon: _caption_toolbar_css_classes_1.cssClasses.iconClearMasterFilter,
                type: 'button',
                disabled: true,
                hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ClearMasterFilter)
            });
        }
        if (this._hasClearSelectionButton())
            items.push({
                name: caption_toolbar_options_1.dashboardToolbarItemNames.clearSelection,
                click: (element) => { this._onClearSelection(); },
                icon: _caption_toolbar_css_classes_1.cssClasses.iconClearSelection,
                type: 'button',
                hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ClearSelection)
            });
        if (this._hasDrillUpButton() && this._isDrillUpEnabled())
            items.push({
                name: caption_toolbar_options_1.dashboardToolbarItemNames.drillUp,
                click: (element) => { this._onDrillUp(); },
                icon: _caption_toolbar_css_classes_1.cssClasses.iconDrillUp,
                type: 'button',
                hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.DrillUp)
            });
        if (!this.hasCaption() && this.allowLimitDataCallback && this.options.LimitDataState.isReduceMode)
            items.push(this._getReduceDataToolbarItem());
        return items;
    }
    _getActionToolbarItems() {
        let items = this._getSpecificActionToolbarItems(), contentDescription = this.options.ViewModel ? this.options.ViewModel.ContentDescription : undefined;
        if (this.options.allowExport)
            items.push({
                name: caption_toolbar_options_1.dashboardToolbarItemNames.exportMenu,
                menu: this._getExportMenuModel(),
                icon: _caption_toolbar_css_classes_1.cssClasses.iconItemExport,
                type: 'menu',
                hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ExportTo)
            });
        if (contentDescription && contentDescription.ElementSelectionEnabled)
            items.push({
                name: caption_toolbar_options_1.dashboardToolbarItemNames.values,
                menu: {
                    items: contentDescription.ElementNames,
                    selectedItems: [contentDescription.ElementNames[contentDescription.SelectedElementIndex]],
                    selectionMode: 'single',
                    itemClick: (itemData, itemElement, index) => { this._onContentElementSelection(index); },
                    type: 'list'
                },
                icon: _caption_toolbar_css_classes_1.cssClasses.iconContentSelection,
                type: 'menu',
                hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ElementSelection)
            });
        if (this._hasToggleSelectionModeButton())
            items.push({
                name: caption_toolbar_options_1.dashboardToolbarItemNames.multiselection,
                checked: this.allowMultiselection,
                click: (element) => { this._onToggleSelectionMode(); },
                icon: _caption_toolbar_css_classes_1.cssClasses.iconMultiselection,
                type: 'button',
                hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.AllowMultiselection)
            });
        return items;
    }
    _getExportMenuModel() {
        let items = [_caption_toolbar_css_classes_1.cssClasses.iconExportToPDF];
        if (_caption_toolbar_css_classes_1.Settings.allowExportToImage)
            items.push(_caption_toolbar_css_classes_1.cssClasses.iconExportToImage);
        if (this._isSupportDataAwareExport()) {
            items.push(_caption_toolbar_css_classes_1.cssClasses.iconExportToExcel);
        }
        return {
            title: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ExportTo),
            items: items,
            itemClick: (itemData, itemElement, index) => { this.showExportDialog(_caption_toolbar_css_classes_1._convertToExportFormat(itemData)); },
            type: 'icons'
        };
    }
    _getParametersTitle() {
        if (!this.hasCaption())
            return undefined;
        let parameters = [], separator = ' - ', drillDownValues = this.options.DrillDownValues, contentDescription = this.options.ViewModel.ContentDescription;
        if (contentDescription && contentDescription.ElementSelectionEnabled) {
            parameters.push(contentDescription.ElementNames[contentDescription.SelectedElementIndex || 0]);
        }
        if (drillDownValues && drillDownValues.length > 0) {
            parameters = parameters.concat(drillDownValues.map(drillDownValue => _formatter_1.format(drillDownValue.Value, drillDownValue.Format)));
        }
        return parameters.length > 0 ? separator + parameters.join(separator) : undefined;
    }
    showExportDialog(exportFormat) {
        this.options.showExportDialog(exportFormat);
    }
    _getSpecificActionToolbarItems() {
        return [];
    }
    _getSpecificStatePanelItems() {
        return [];
    }
    _getMinContentHeight() {
        return _dashboard_viewer_constants_1.DashboardViewerConstants.minPaneHeight;
    }
    _generateInnerBorderClasses(element) {
        if (this.visualMode === 'caption') {
            return [];
        }
        else {
            return this._generateInnerBorderClassesUnsafe(element);
        }
    }
    _generateInnerBorderClassesUnsafe(element) {
        var classes = [exports.cssClassNamesBaseItem.item];
        if (this._isBorderRequired()) {
            classes.push(exports.cssClassNamesBaseItem.simpleBorder);
        }
        if (element) {
            element.classList.add(exports.cssClassNamesBaseItem.item);
            if (this._isBorderRequired()) {
                element.classList.add(exports.cssClassNamesBaseItem.simpleBorder);
            }
            else {
                element.classList.remove(exports.cssClassNamesBaseItem.simpleBorder);
            }
        }
        return classes;
    }
    _generateOuterBorderClasses(element) {
        if (this.visualMode === 'caption')
            return;
        if (element) {
            if (this.hasParentContainer() && this.visualMode === 'full') {
                element.classList.add(exports.cssClassNamesBaseItem.groupItemChild);
            }
            else {
                element.classList.remove(exports.cssClassNamesBaseItem.groupItemChild);
            }
        }
        return this.hasParentContainer() && this.visualMode === 'full' ? [exports.cssClassNamesBaseItem.groupItemChild] : [];
    }
    _isBorderRequired() {
        return this._isPaneEmpty() && this.visualMode === 'full';
    }
    _resize() {
        if (this.hasWidget) {
            this._resizeUnsafe();
        }
        else {
            this._resizeBase();
        }
    }
    _resizeUnsafe() {
        this._resizeBase();
    }
    _resizeBase() {
        this.updateContentSize();
        this._allocatePreloader();
        this.captionToolbar.onResize();
    }
    updateContentSize() {
        if (this.hasWidget) {
            this._updateContentSizeUnsafe();
        }
        else {
            this._updateContentSizeBase();
        }
    }
    _updateContentSizeUnsafe() {
        this._updateContentSizeBase();
    }
    _updateContentSizeBase() {
        var that = this;
        that._generateOuterBorderClasses(that.container);
        that._generateInnerBorderClasses(that.contentRoot);
        var contentHeight = Math.floor($.fn.constructor(that.container).height() - that._calcHeaderAndFooterHeight());
        $.fn.constructor(that.contentRoot).outerHeight(contentHeight);
    }
    _allocatePreloader() {
        let shieldingElement = this.container.querySelector('.dx-dashboard-item-shield'), position = this._getContainerPosition();
        this.itemLoadingElement.resize();
        if (shieldingElement) {
            shieldingElement.style.left = position.left.toString() + 'px';
            shieldingElement.style.top = position.top.toString() + 'px';
            shieldingElement.style.width = position.width.toString() + 'px';
            shieldingElement.style.height = position.height.toString() + 'px';
        }
    }
    _getButtonOffset(useToolbarOffset) {
        var defaultButtonSize = 28;
        var hoverDiv = useToolbarOffset ? this.container.querySelector('.' + exports.cssClassNamesBaseItem.overlayContent) : undefined;
        return {
            left: !!hoverDiv ? $.fn.constructor(hoverDiv).outerWidth(true) : defaultButtonSize,
            top: !!hoverDiv ? $.fn.constructor(hoverDiv).outerHeight(true) : defaultButtonSize
        };
    }
    _getAnimationOptions() {
        return {
            enabled: !!this.options.animate,
            duration: 300
        };
    }
    _getContainerPosition() {
        if (this.hasWidget) {
            return this._getContainerPositionUnsafe();
        }
        else {
            return this._getContainerPositionBase();
        }
    }
    _getContainerPositionUnsafe() {
        return this._getContainerPositionBase();
    }
    _getContainerPositionBase() {
        var container = this._getBoundaryContainer(), position = $.fn.constructor(container).position(), width = $.fn.constructor(container).outerWidth(), height = $.fn.constructor(container).outerHeight(), marginX = $.fn.constructor(container).css('margin-left'), marginY = $.fn.constructor(container).css('margin-top'), border = this._isPaneEmpty() ? 0 : 1, parseMargin = function (margin) { return margin == 'auto' ? 0 : parseInt(margin); };
        return {
            left: position.left,
            top: position.top,
            width: width,
            height: height,
            offsetX: width + parseMargin(marginX) - border,
            offsetY: parseMargin(marginY) - border
        };
    }
    _getBoundaryContainer() {
        return this.visualMode === 'caption' ? this._boundaryContainer : this.container;
    }
    _getSelectedValues() {
        var selectedValues = this.options.SelectedValues;
        return this._isMultiDataSupported() ? this._patchTroughDrillDownValues(selectedValues) : selectedValues;
    }
    _onClearSelection() {
        this.clearSelection();
        this.customSelectedTuples = [];
        if (this.customSelectionMode == _interactivity_controller_1.dashboardSelectionMode.multiple)
            this.updateCaptionToolbar();
        this.itemSelectionChanged.fire(this.getName(), []);
    }
    _getElementInteractionValue(element, viewModel) {
    }
    _setSelectedValues(values) {
        this.options.SelectedValues = values;
    }
    _raiseItemClick(element) {
        var that = this, tuple = [], dataPoint = that._getDataPoint(element), drillDownValues = that._getDrillDownValues(), targetAxes = that._getTargetAxes(), drillDownAxis = drillDownValues && targetAxes.length == 1 ? targetAxes[0] : undefined;
        targetAxes.forEach(axisName => {
            var values;
            if (dataPoint.getSelectionValues) {
                values = dataPoint.getSelectionValues(axisName);
            }
            else {
                values = dataPoint.getValues(axisName);
            }
            if (values.length > 0) {
                if (drillDownAxis && axisName === drillDownAxis && !that._isMultiDataSupported()) {
                    values = drillDownValues.concat(values);
                }
                tuple.push({ axisName: axisName, value: values });
            }
        });
        if ((targetAxes.length != 0) && (targetAxes.length == tuple.length)) {
            that._clickAction(tuple);
        }
        if (that.itemClick) {
            that.itemClick.fire(that.getName(), dataPoint);
        }
    }
    _clickAction(tuple) {
        this.interactivityController.clickAction([tuple]);
    }
    _isMultiDataSupported() {
        return false;
    }
    _getDataPoint(element) {
        return null;
    }
    _getWidget() {
        return null;
    }
    _raiseItemWidgetCreated() {
        var widget = this._getWidget();
        if (widget) {
            this.itemWidgetCreated.fire(this.getName(), widget);
        }
    }
    _raiseItemWidgetUpdating() {
        var widget = this._getWidget();
        if (widget) {
            this.itemWidgetUpdating.fire(this.getName(), widget);
        }
    }
    _raiseItemWidgetUpdated() {
        var widget = this._getWidget();
        if (widget) {
            this.itemWidgetUpdated.fire(this.getName(), widget);
        }
    }
    _raiseItemWidgetOptionsPrepared(options) {
        if (options) {
            this.itemWidgetOptionsPrepared.fire(this.getName(), options);
        }
    }
    _raiseItemHover(element, state) {
        if (this.itemHover) {
            var dataPoint = this._getDataPoint(element);
            this.itemHover.fire(this.getName(), dataPoint, state);
        }
    }
    _onClearMasterFilter() {
        var name = this.getName();
        this._setSelectedValues(null);
        if (!this.options || !this.options.useNeutralFilterMode) {
            this.clearSelection();
        }
        this.clearMasterFilter.fire(name);
    }
    _onToggleSelectionMode() {
        this._allowMultiselection = !this._allowMultiselection;
        this.allowMultiselectionChanged && this.allowMultiselectionChanged(this._allowMultiselection);
        this.updateCaptionToolbar();
        this.updateInteractivityOptions();
    }
    _onDrillUp() {
        this.drillUp.fire(this.getName(), !!this._getSelectedValues());
    }
    _onContentElementSelection(index) {
        this.contentElementSelection.fire(this.getName(), {
            index: index,
            caption: this.options.ViewModel.ContentDescription.ElementNames[index]
        });
    }
    _onExpandValue(expandValueParams) {
        this.expandValue.fire(this.getName(), expandValueParams);
    }
    _onClientStateUpdate(clientState) {
        this.clientStateUpdate.fire(this.getName(), clientState);
    }
    _onDataRequest() {
        this.dataRequest.fire(this.getName());
    }
    _hasDrillUpButton() {
        var actionModel = this.options.ActionModel;
        return actionModel && actionModel.DrillUpButtonState && actionModel.DrillUpButtonState !== 'Hidden';
    }
    _hasClearMasterFilterButton() {
        var actionModel = this.options.ActionModel;
        return actionModel && actionModel.ClearMasterFilterButtonState && actionModel.ClearMasterFilterButtonState === 'Enabled';
    }
    _hasClearSelectionButton() {
        return !this.isInteractivityActionEnabled() && this.customSelectionMode == _interactivity_controller_1.dashboardSelectionMode.multiple && this.customSelectedTuples.length > 0;
    }
    _hasToggleSelectionModeButton() {
        return this._canSetMultipleMasterFilter() || (!this.isInteractivityActionEnabled() && this.customSelectionMode == _interactivity_controller_1.dashboardSelectionMode.multiple);
    }
    _isDrillUpEnabled() {
        var actionModel = this.options.ActionModel;
        return actionModel && actionModel.DrillUpButtonState && actionModel.DrillUpButtonState === 'Enabled';
    }
    _canPerformAction(action) {
        var actionModel = this.options.ActionModel;
        return actionModel && actionModel.Actions && actionModel.Actions.indexOf(action) !== -1;
    }
    _canPerformDrillDown() {
        return this._canPerformAction(_common_1.viewerActions.drillDown);
    }
    _canPerformDrillUp() {
        return this._canPerformAction(_common_1.viewerActions.drillUp);
    }
    _canSetMasterFilter() {
        return this._canPerformAction(_common_1.viewerActions.setMasterFilter);
    }
    _canSetMultipleMasterFilter() {
        return this._canPerformAction(_common_1.viewerActions.setMultipleValuesMasterFilter);
    }
    isInteractivityActionEnabled() {
        return this._canSetMasterFilter() || this._canSetMultipleMasterFilter() || this._canPerformDrillDown();
    }
    _selectionMode() {
        return this.isInteractivityActionEnabled() ? 'multiple' : 'none';
    }
    _getHtml(text) {
        return this._isEncodeHtml() ? _utils_1.encodeHtml(text) : text;
    }
    _getAxisNames() {
        return this.options.AxisNames || [];
    }
    _getDrillDownAxisName() {
        return this._getAxisNames().length > 0 ? this._getAxisNames()[0] : undefined;
    }
    _getDrillDownValues() {
        var drillDownValues = this.options.DrillDownUniqueValues;
        return drillDownValues != null ? drillDownValues : [];
    }
}
exports.baseItem = baseItem;
exports.cssClassNamesBaseItem = {
    item: 'dx-dashboard-item',
    groupItem: 'dx-dashboard-group-item',
    groupItemChild: 'dx-dashboard-group-item-child',
    simpleBorder: 'dx-dashboard-simple-border',
    overlayContent: 'dx-overlay-content',
    cardWihtoutBackground: 'dx-dashboard-card-without-background'
};


/***/ }),

/***/ 7031:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.boundImageItem = void 0;
const _image_item_1 = __webpack_require__(3911);
var BASE64_STRING_PREFIX = 'data:image/png;base64,';
class boundImageItem extends _image_item_1.imageItem {
    constructor(container, options) {
        super(container, options);
    }
    _initializeData(newOptions) {
        super._initializeData(newOptions);
        var viewModel = this.options.ViewModel, value = this.dataController ? this._dataController.getImageData() : undefined;
        if (viewModel) {
            if (viewModel.DataBindingMode === 'Uri' && viewModel.UriPattern)
                value = viewModel.UriPattern.replace('{0}', value);
            else
                value = BASE64_STRING_PREFIX + (value || viewModel.DefaultImageBase64String);
        }
        this.imgSrc = value || this._getImageSource(viewModel ? viewModel.ImageViewModel : undefined);
    }
}
exports.boundImageItem = boundImageItem;


/***/ }),

/***/ 89811:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bubbleMapItem = void 0;
const color_1 = __webpack_require__(43150);
const _jquery_helpers_1 = __webpack_require__(59384);
const _geo_point_map_item_base_1 = __webpack_require__(5243);
class bubbleMapItem extends _geo_point_map_item_base_1.geoPointMapItemBase {
    constructor(container, options) {
        super(container, options);
    }
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    _getMarkerLayers() {
        return [this.mapViewer.getLayerByName('bubble')];
    }
    _configureMarkerLayers(viewModel) {
        var markerDataSource = this._getMarkerDataSource(), markerSettings = markerDataSource.length > 0 ? this._getMarker(viewModel, markerDataSource) : null;
        return [Object.assign({ name: 'bubble', type: 'marker', elementType: 'bubble', dataField: 'value', dataSource: markerDataSource }, markerSettings)];
    }
    _getMarkerDataSource() {
        var viewModel = this.options.ViewModel, markerDataSource = [], point;
        for (var i = 0; i < this._dataController.getCount(); i++) {
            point = this._dataController.getPoint(i);
            markerDataSource.push({
                coordinates: [point.lon, point.lat],
                attributes: {
                    latSelection: point.latSel,
                    lonSelection: point.lonSel,
                    selected: this._isSelected([point.latSel, point.lonSel]),
                    value: point.weight || (point.pointsCount > 1 ? 1 : 0),
                    colorValue: point.color || 0,
                    tooltip: this._getBubbleTooltip(viewModel, point.weightText, point.colorText, point.pointsCount),
                    dimensionsTooltip: this._getDimensionsTooltipHtml(point.tooltipDimensions),
                    measuresTooltip: this._getMeasuresTooltipHtml(point.tooltipMeasures)
                }
            });
        }
        return markerDataSource;
    }
    _getMarker(viewModel, markerDataSource) {
        var rangeStops = viewModel.ColorId ? this._getBubbleRangeStops(viewModel.Colorizer, markerDataSource) : [0, 1], colors = this._getBubbleColors(viewModel.Colorizer.Colors, rangeStops.length - 1), minSize, maxSize, options = {
            palette: colors,
            colorGroups: rangeStops,
            colorGroupingField: 'colorValue',
            sizeGroups: viewModel.WeightId ? this._getBubbleWeightRangeStops(markerDataSource) : null
        }, baseMarkers = super._getMarker(viewModel, markerDataSource);
        if (viewModel.WeightId) {
            minSize = 20;
            maxSize = 60;
        }
        else {
            var res = this._getMinMaxValues(markerDataSource);
            if (res.min !== res.max) {
                minSize = 20;
                maxSize = 40;
            }
            else if (res.min === 1) {
                minSize = 40;
                maxSize = 40;
            }
            else {
                minSize = 20;
                maxSize = 20;
            }
        }
        options.minSize = minSize;
        options.maxSize = maxSize;
        return _jquery_helpers_1.deepExtend(baseMarkers, options);
    }
    _getColorLegend(viewModel) {
        var that = this;
        if (!viewModel.ColorId) {
            return;
        }
        var legend = super._getColorLegend(viewModel);
        if (legend) {
            legend.source.layer = 'bubble';
            legend.customizeText = function (arg) {
                return that._dataController.formatColor(arg.start);
            };
        }
        return legend;
    }
    _getWeightLegend(viewModel) {
        var that = this;
        if (!viewModel.WeightId) {
            return;
        }
        var legend = super._getWeightLegend(viewModel);
        if (legend) {
            legend.source.layer = 'bubble';
            legend.customizeText = function (arg) {
                return that._dataController.formatWeight(arg.start);
            };
        }
        return legend;
    }
    _getBubbleTooltip(viewModel, weight, color, pointsCount) {
        var strs = [];
        if (pointsCount && pointsCount > 1) {
            strs.push(this._pointsCountTooltip(pointsCount));
        }
        if (weight) {
            strs.push(this._getToolTip(viewModel.WeightName, weight));
        }
        if (color && viewModel.ColorName !== viewModel.WeightName) {
            strs.push(this._getToolTip(viewModel.ColorName, color));
        }
        return strs.join('<br>');
    }
    _getBubbleRangeStops(colorizer, markerDataSource) {
        var max = markerDataSource[0].attributes.colorValue, min = markerDataSource[0].attributes.colorValue;
        for (var i = 1; i < markerDataSource.length; i++) {
            if (markerDataSource[i].attributes.colorValue > max) {
                max = markerDataSource[i].attributes.colorValue;
            }
            if (markerDataSource[i].attributes.colorValue < min) {
                min = markerDataSource[i].attributes.colorValue;
            }
        }
        return this._updateRangeStops(colorizer.RangeStops, min, max, colorizer.UsePercentRangeStops);
    }
    _getBubbleWeightRangeStops(markerDataSource) {
        var max = markerDataSource[0].attributes.value, min = markerDataSource[0].attributes.value;
        for (var i = 1; i < markerDataSource.length; i++) {
            if (markerDataSource[i].attributes.value > max) {
                max = markerDataSource[i].attributes.value;
            }
            if (markerDataSource[i].attributes.value < min) {
                min = markerDataSource[i].attributes.value;
            }
        }
        return this._updateRangeStops([0, 25, 50, 75], min, max, true);
    }
    _getBubbleColors(colorModels, defaultColorsCount) {
        var colors = this._getColors(colorModels);
        return colors ? colors : this._getDefaultBubbleColorizerColors(defaultColorsCount);
    }
    _getDefaultBubbleColorizerColors(count) {
        var startColor = new color_1.default('rgb(54, 170, 206)'), endColor = new color_1.default('rgb(255, 93, 106)'), colors = [];
        if (count === 1) {
            return [startColor.toHex()];
        }
        for (var i = 0; i < count; i++) {
            colors.push(startColor.blend(endColor, i / (count - 1)).toHex());
        }
        return colors;
    }
    _getDataPointMeasureIds() {
        var viewModel = this.options.ViewModel, measureIds = [];
        measureIds.push(viewModel.WeightId);
        measureIds.push(viewModel.ColorId);
        return measureIds;
    }
}
exports.bubbleMapItem = bubbleMapItem;


/***/ }),

/***/ 10474:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardsItem = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _style_settings_provider_1 = __webpack_require__(76106);
const _card_layout_1 = __webpack_require__(96614);
const _cards_viewer_1 = __webpack_require__(86909);
const _card_widget_implementation_1 = __webpack_require__(41247);
const _base_item_1 = __webpack_require__(11439);
const _kpi_item_1 = __webpack_require__(49483);
class cardsItem extends _kpi_item_1.kpiItem {
    constructor(container, options) {
        super(container, options);
        this.useNewViewer = options.ViewModel.HasLayout;
        this._hasSparkline = false;
        this.apiHandlers = new _card_widget_implementation_1.CardWidgetImplementation(() => { this.renderContentUnsafe(this.contentRoot, true, () => { }); });
        this._styleSettingsProvider = new _style_settings_provider_1.cardItemStyleSettingsProvider();
        this._styleSettingsProvider.initialize(this.options.ConditionalFormattingModel, this.options.ViewModel ? this.options.ViewModel.WordWrap : false);
    }
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    _initializeData(newOptions) {
        super._initializeData(newOptions);
        if (this._styleSettingsProvider) {
            this._styleSettingsProvider.initialize(this.options.ConditionalFormattingModel, this.options.ViewModel ? this.options.ViewModel.WordWrap : false);
        }
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        this._hasSparkline = false;
        if (this.options.ViewModel.HasLayout != this.useNewViewer && this.widgetsViewer != null) {
            this.widgetsViewer.clear();
            this.widgetsViewer = null;
        }
        this.useNewViewer = this.options.ViewModel.HasLayout;
        this.disposeLayoutCollection();
        this.initializeLayoutCollection();
        super.renderContentUnsafe(element, changeExisting, afterRenderCallback);
        this.apiHandlers._element = this.widgetsViewer.element();
        return false;
    }
    createWidgetViewer(element, options) {
        if (this.useNewViewer)
            return new _cards_viewer_1.CardsViewer(element, options);
        else
            return super.createWidgetViewer(element, options);
    }
    initializeLayoutCollection() {
        this.layoutCollection = {};
        if (this.options.ViewModel.HasLayout) {
            var cards = this.options.ViewModel.Cards;
            cards.forEach(card => {
                var layout = new _card_layout_1.cardLayout(this.apiHandlers);
                layout.fill(card.Layout);
                this.layoutCollection[card.ID] = layout;
            });
        }
    }
    _isPaneEmpty() {
        return super._isPaneEmpty() || !this.hasCaption();
    }
    _isBorderRequired() {
        return false;
    }
    _isTransparentBackground() {
        return this._isPaneEmpty() && this.visualMode !== 'content';
    }
    _getSpecificWidgetViewerOptions() {
        let specificOptions = {};
        specificOptions.viewer = {
            ignorePadding: this._getIgnorePadding(),
            controlContainer: this.options.controlContainer,
        };
        var layoutsArray = [];
        for (var layoutKey in this.layoutCollection) {
            layoutsArray.push(this.layoutCollection[layoutKey]);
        }
        specificOptions.itemOptions = {
            hasSparkline: this._hasSparkline,
            layouts: layoutsArray
        };
        specificOptions.styleSettingsProvider = this._styleSettingsProvider;
        return _jquery_helpers_1.deepExtend(specificOptions, super._getSpecificWidgetViewerOptions());
    }
    _getIgnorePadding() {
        return this._isPaneEmpty() && this.visualMode !== 'content';
    }
    _getWidgetType() {
        return 'card';
    }
    _getElementsName() {
        return 'Cards';
    }
    setOldCardProperties(sourceItem, cardModel, props) {
        var captions = props.getCaptions(), sparklineOptions, indicatorType, isGood;
        if (cardModel.DataItemType === _utils_1.KpiValueMode.Measure) {
            sourceItem.mainValue = {
                type: undefined,
                hasPositiveMeaning: undefined,
                text: {
                    value: props.getMeasureDisplayText(),
                    useDefaultColor: cardModel.IgnoreDeltaColor
                }
            };
        }
        else {
            indicatorType = props.getIndicatorType();
            isGood = props.getIsGood();
            sourceItem.mainValue = {
                type: indicatorType,
                hasPositiveMeaning: isGood,
                text: {
                    value: props.getMainValueText(),
                    useDefaultColor: cardModel.IgnoreDeltaColor
                }
            };
            sourceItem.variableValue1 = {
                type: indicatorType,
                hasPositiveMeaning: isGood,
                text: {
                    value: props.getSubValue1Text(),
                    useDefaultColor: cardModel.IgnoreSubValue1DeltaColor
                }
            };
            sourceItem.variableValue2 = {
                type: indicatorType,
                hasPositiveMeaning: isGood,
                text: {
                    value: props.getSubValue2Text(),
                    useDefaultColor: cardModel.IgnoreSubValue2DeltaColor
                }
            };
        }
        if (cardModel.ShowSparkline) {
            sparklineOptions = props.getSparklineOptions();
            this._hasSparkline = !!sparklineOptions;
            if (this._hasSparkline) {
                sourceItem.sparklineOptions = sparklineOptions;
            }
        }
        if (captions.length > 0) {
            sourceItem.title = captions.pop();
            sourceItem.subTitle = captions.length != 0 ? captions.join(' - ') : undefined;
        }
    }
    setNewCardProperties(sourceItem, cardModel, props) {
        sourceItem.layout = this.layoutCollection[cardModel.ID];
        sourceItem.dataAccessor = props;
    }
    _setSourceItemProperties(sourceItem, cardModel, props) {
        super._setSourceItemProperties(sourceItem, cardModel, props);
        if (this.useNewViewer)
            this.setNewCardProperties(sourceItem, cardModel, props);
        else
            this.setOldCardProperties(sourceItem, cardModel, props);
    }
    _getWidget() {
        return this.useNewViewer ? this.apiHandlers : undefined;
    }
    _generateInnerBorderClassesUnsafe(element) {
        var classes = super._generateInnerBorderClassesUnsafe(element);
        var cardWithoutBackground = !this.hasParentContainer() && !this.hasCaption();
        if (cardWithoutBackground) {
            classes.push(_base_item_1.cssClassNamesBaseItem.cardWihtoutBackground);
        }
        if (element) {
            cardWithoutBackground ?
                element.classList.add(_base_item_1.cssClassNamesBaseItem.cardWihtoutBackground) :
                element.classList.remove(_base_item_1.cssClassNamesBaseItem.cardWihtoutBackground);
        }
        return classes;
    }
    dispose() {
        super.dispose();
        this.disposeLayoutCollection();
        this._styleSettingsProvider.dispose();
    }
    disposeLayoutCollection() {
        if (this.layoutCollection) {
            for (var key in this.layoutCollection) {
                if (this.layoutCollection.hasOwnProperty(key))
                    this.layoutCollection[key].dispose();
            }
        }
        this.layoutCollection = null;
    }
}
exports.cardsItem = cardsItem;


/***/ }),

/***/ 64658:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.chartItem = void 0;
const chart_1 = __webpack_require__(56319);
const item_data_axis_names_1 = __webpack_require__(51101);
const _chart_helper_1 = __webpack_require__(11222);
const _common_1 = __webpack_require__(29009);
const _format_helper_1 = __webpack_require__(27893);
const _formatter_1 = __webpack_require__(93687);
const _jquery_helpers_1 = __webpack_require__(59384);
const _selection_helper_1 = __webpack_require__(3522);
const _utils_1 = __webpack_require__(7590);
const _z_index_1 = __webpack_require__(56330);
const _chart_item_style_settings_provider_1 = __webpack_require__(35480);
const _render_helper_1 = __webpack_require__(39336);
const _dx_devextreme_themes_integration_1 = __webpack_require__(83257);
const _base_item_1 = __webpack_require__(11439);
class chartItem extends _base_item_1.baseItem {
    constructor(container, options) {
        super(container, options);
        this.itemElementCustomColor = _jquery_helpers_1.createJQueryCallbacks();
    }
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    dispose() {
        super.dispose();
        this.chartViewer && this.chartViewer.dispose();
    }
    _initializeData(newOptions) {
        super._initializeData(newOptions);
        this._styleSettingsProvider = new _chart_item_style_settings_provider_1.ChartItemStyleSettingsProvider();
        this._styleSettingsProvider.initialize(this.options.ConditionalFormattingModel);
        if (this.dataController) {
            this._dataController.elementCustomColor = (e) => this._elementCustomColor(e);
            this._dataController.styleSettingsProvider = this._styleSettingsProvider;
        }
    }
    _clearSelectionUnsafe() {
        this.chartViewer.clearSelection();
    }
    selectTupleUnsafe(tuple, state) {
        _selection_helper_1.selectionHelper.setSelectedPoint(this.chartViewer, _utils_1.getAxisPointValue(tuple, item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis), _utils_1.getAxisPointValue(tuple, item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis), state);
    }
    _setSelectionUnsafe(values) {
        super._setSelectionUnsafe(values);
        this.clearSelection();
        this._applySelection();
    }
    updateContentStateUnsafe() {
        if (this._getCustomHoverEnabled()) {
            var hoverMode = null, targetAxes = this._getTargetAxes();
            if (targetAxes.length == 1) {
                if (targetAxes[0] == item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis)
                    hoverMode = _chart_helper_1.chartHelper.SelectionMode.Argument;
                else
                    hoverMode = _chart_helper_1.chartHelper.SelectionMode.Series;
            }
            else if (targetAxes.length == 2) {
                hoverMode = _chart_helper_1.chartHelper.SelectionMode.Points;
            }
            this.chartViewer.option('commonSeriesSettings.hoverMode', this._convertHoverMode(hoverMode));
            this.chartViewer.option('commonSeriesSettings.point.hoverMode', this._convertPointHoverMode(hoverMode));
        }
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        var opts = this._getViewOptions();
        if (changeExisting && this.chartViewer) {
            switch (this.options.ContentType) {
                case _common_1.contentType.viewModel:
                    break;
                default:
                    _jquery_helpers_1.deepExtend(opts, this._getCommonOptions());
                    break;
            }
            this._raiseItemWidgetOptionsPrepared(opts);
            this.chartViewer.option(opts);
        }
        else {
            var options = Object.assign(Object.assign({}, opts), this._getCommonOptions());
            this._raiseItemWidgetOptionsPrepared(options);
            this.chartViewer = new chart_1.default(element, options);
        }
        return false;
    }
    getInfoUnsafe() {
        var info = super.getInfoUnsafe();
        var zoomAndPanMode = this.chartViewer.option('zoomAndPan');
        if (zoomAndPanMode && (zoomAndPanMode === 'both' || zoomAndPanMode === 'pan')) {
            var viewport = this.chartViewer.getVisibleArgumentBounds();
            info = _jquery_helpers_1.deepExtend(info, {
                chartViewport: {
                    min: this._dataController.getArgumentUniquePath(viewport.minVisible),
                    max: this._dataController.getArgumentUniquePath(viewport.maxVisible)
                }
            });
        }
        return info;
    }
    _elementCustomColor(eventArgs) {
        this.itemElementCustomColor.fire(this.getName(), eventArgs);
    }
    _getZoomAndPanOption(viewModel) {
        var zoomAndPanOptions = {
            argumentAxis: 'none'
        };
        if (viewModel.AxisX.EnableZooming) {
            zoomAndPanOptions.argumentAxis = 'both';
        }
        else if (viewModel.AxisX.LimitVisiblePoints) {
            zoomAndPanOptions.argumentAxis = 'pan';
        }
        return zoomAndPanOptions;
    }
    _getViewOptions() {
        var viewModel = this.options ? this.options.ViewModel : undefined;
        if (!viewModel)
            return {};
        let that = this;
        const forceShowPointMarkers = viewModel.Panes
            .reduce((seriesTemplates, pane) => [...seriesTemplates, ...pane.SeriesTemplates], [])
            .reduce((forceShow, seriesTemplate) => forceShow || seriesTemplate.ForceShowPointMarkers, false);
        var dataSourceAndSeries = that._dataController.getDataSourceAndSeries(that._isEncodeHtml()), panes = viewModel.Panes, isSelectable = that.isInteractivityActionEnabled(), seriesFormats = {}, isDiscreteArgument = that._dataController.isDiscreteArgument(), argumentAxisLabelFormat = that._dataController.getAxisXFormat(), rotated = viewModel.Rotated, axisGridColor = _dx_devextreme_themes_integration_1.getBaseColorScheme() === 'light' ? '#d3d3d3' : '#555555', isOverlappingModeHide = function () {
            var isHideMode = false;
            panes.forEach(pane => {
                pane.SeriesTemplates.forEach(seriesTemplate => {
                    if (seriesTemplate.PointLabel) {
                        var pointLabelsEnabled = that._dataController.checkSeriesTemplatePointLabels(seriesTemplate);
                        if (pointLabelsEnabled && (seriesTemplate.PointLabel.OverlappingMode == 'Hide' || seriesTemplate.PointLabel.OverlappingMode == 'Reposition'))
                            isHideMode = true;
                    }
                });
            });
            return isHideMode;
        }, configureLogarithmicOptions = function (axis, axisModel) {
            if (axisModel.Logarithmic) {
                axis.type = 'logarithmic';
                axis.logarithmBase = axisModel.LogarithmicBase;
            }
        }, customizeTextProc = function (isPercentAxis, isScientificAxis, customFormat) {
            return function () {
                if (customFormat != null)
                    return _format_helper_1.DashboardFormatHelper.format(this.value, _formatter_1.convertToFormat({ NumericFormat: customFormat }));
                if (isPercentAxis)
                    return _formatter_1.formatPercentValue(this.value);
                if (isScientificAxis)
                    return _formatter_1.formatScientificAxisValue(this.value);
                return _formatter_1.formatAxisValue(this.value, this.min, this.max);
            };
        }, options = {
            panes: [],
            valueAxis: [],
            rotated: rotated,
            zoomAndPan: this._getZoomAndPanOption(viewModel),
            resizePanesOnZoom: true,
            scrollBar: {
                visible: viewModel.AxisX.EnableZooming || viewModel.AxisX.LimitVisiblePoints,
                position: 'bottom'
            },
            autoHidePointMarkers: !forceShowPointMarkers
        };
        options.resolveLabelsOverlapping = isOverlappingModeHide();
        options.disableTwoWayBinding = true;
        options.resolveLabelOverlapping = isOverlappingModeHide() ? 'hide' : 'none';
        panes.forEach((pane, index) => {
            var paneName = that._dataController.generatePaneName(pane.Name, index), isPrimaryAxisInPercentFormat = that._isAxisInPercentFormat(pane, false), isPrimaryAxisInScientificFormat = that._isAxisInScientificFormat(pane, false), isSecondaryAxisInPercentFormat = that._isAxisInPercentFormat(pane, true), isSecondaryAxisInScientificFormat = that._isAxisInScientificFormat(pane, true);
            seriesFormats[paneName] = {};
            options.panes.push({
                name: paneName
            });
            let axis = {
                name: paneName + 'primary',
                position: rotated ? 'bottom' : 'left',
                pane: paneName,
                inverted: pane.PrimaryAxisY.Reverse,
                color: axisGridColor,
                tick: {
                    visible: false,
                },
                minorTick: {
                    visible: false,
                },
                label: {
                    visible: pane.PrimaryAxisY.Visible,
                    customizeText: customizeTextProc(isPrimaryAxisInPercentFormat, isPrimaryAxisInScientificFormat, pane.PrimaryAxisY.Format && pane.PrimaryAxisY.Format.NumericFormat)
                },
                title: {
                    text: pane.PrimaryAxisY.Visible ? pane.PrimaryAxisY.Title : null
                },
                visible: pane.PrimaryAxisY.Visible,
                grid: {
                    visible: pane.PrimaryAxisY.ShowGridLines
                },
                showZero: pane.PrimaryAxisY.ShowZeroLevel
            };
            configureLogarithmicOptions(axis, pane.PrimaryAxisY);
            options.valueAxis.push(axis);
            if (pane.SecondaryAxisY) {
                let axis = {
                    name: paneName + 'secondary',
                    position: rotated ? 'top' : 'right',
                    pane: paneName,
                    inverted: pane.SecondaryAxisY.Reverse,
                    color: axisGridColor,
                    tick: {
                        visible: false,
                    },
                    minorTick: {
                        visible: false,
                    },
                    label: {
                        visible: pane.SecondaryAxisY.Visible,
                        customizeText: customizeTextProc(isSecondaryAxisInPercentFormat, isSecondaryAxisInScientificFormat, pane.SecondaryAxisY.Format && pane.SecondaryAxisY.Format.NumericFormat)
                    },
                    title: {
                        text: pane.SecondaryAxisY.Visible ? pane.SecondaryAxisY.Title : null
                    },
                    visible: pane.SecondaryAxisY.Visible,
                    grid: {
                        visible: pane.SecondaryAxisY.ShowGridLines
                    },
                    showZero: pane.SecondaryAxisY.ShowZeroLevel
                };
                configureLogarithmicOptions(axis, pane.SecondaryAxisY);
                options.valueAxis.push(axis);
            }
        });
        if (rotated) {
            options.panes.reverse();
        }
        options.commonSeriesSettings = {
            hoverMode: isSelectable ? that._convertHoverMode(viewModel.SelectionMode) : 'none',
            point: {
                visible: false,
                hoverMode: isSelectable ? that._convertPointHoverMode(viewModel.SelectionMode) : 'none'
            },
            stackedbar: {
                label: {
                    backgroundColor: 'none'
                }
            }
        };
        var zoomArguments = that._dataController ? that._dataController.getZoomArguments() : null;
        options.argumentAxis = {
            argumentType: null,
            inverted: viewModel.AxisX.Reverse,
            color: axisGridColor,
            tick: {
                visible: false,
            },
            minorTick: {
                visible: false,
            },
            label: {
                visible: viewModel.AxisX.Visible,
                overlappingBehavior: (!viewModel.Argument.IsOrderedDiscrete && isDiscreteArgument ? 'auto' : 'hide'),
                customizeText: function (argument) {
                    return that._dataController.getAxisXLabelText(argument);
                }
            },
            title: {
                text: viewModel.AxisX.Visible ? viewModel.AxisX.Title : null
            },
            grid: {
                visible: viewModel.AxisX.ShowGridLines
            },
            visible: viewModel.AxisX.Visible,
            valueMarginsEnabled: _chart_helper_1.chartHelper.allowArgumentAxisMargins(panes),
            tickInterval: null,
            visualRange: zoomArguments ? [zoomArguments.start, zoomArguments.end] : [null, null]
        };
        configureLogarithmicOptions(options.argumentAxis, viewModel.AxisX);
        if (isDiscreteArgument) {
            options.argumentAxis.type = 'discrete';
            options.argumentAxis.argumentType = 'string';
        }
        else {
            if (options.argumentAxis.type === undefined)
                options.argumentAxis.type = 'continuous';
        }
        options.dataPrepareSettings = {
            sortingMethod: false
        };
        if (argumentAxisLabelFormat && !(viewModel.Argument && viewModel.Argument.IsContinuousDateTimeScale)) {
            options.argumentAxis.axisDivisionFactor = 70;
            switch (argumentAxisLabelFormat.format) {
                case 'monthYear':
                    options.argumentAxis.tickInterval = 'month';
                    options.argumentAxis.label.minSpacing = 10;
                    break;
                case 'dayMonthYear':
                    options.argumentAxis.tickInterval = 'day';
                    options.argumentAxis.label.minSpacing = 10;
                    break;
                case 'quarterYear':
                    options.argumentAxis.tickInterval = 'quarter';
                    options.argumentAxis.label.minSpacing = 10;
                    break;
                case 'dateHour':
                    options.argumentAxis.tickInterval = 'hour';
                    options.argumentAxis.label.minSpacing = 10;
                    break;
                case 'dateHourMinute':
                    options.argumentAxis.tickInterval = 'minute';
                    options.argumentAxis.label.minSpacing = 10;
                    break;
                case 'dateHourMinuteSecond':
                    options.argumentAxis.tickInterval = 'second';
                    options.argumentAxis.label.minSpacing = 10;
                    break;
                case 'weekYear':
                    options.argumentAxis.workWeek = [argumentAxisLabelFormat.firstDayOfWeek];
                    options.argumentAxis.tickInterval = 'week';
                    options.argumentAxis.label.minSpacing = 10;
                    break;
                default:
                    options.argumentAxis.tickInterval = null;
                    break;
            }
        }
        if (viewModel.Legend) {
            let legendParams = viewModel.Legend.IsInsideDiagram ?
                _chart_helper_1.chartHelper.convertLegendInsidePosition(viewModel.Legend.InsidePosition) :
                _chart_helper_1.chartHelper.convertLegendOutsidePosition(viewModel.Legend.OutsidePosition);
            legendParams.border = {
                visible: viewModel.Legend.IsInsideDiagram
            };
            options.legend = Object.assign(Object.assign({}, legendParams), { position: viewModel.Legend.IsInsideDiagram ? 'inside' : 'outside', visible: viewModel.Legend.Visible, itemTextPosition: 'right', customizeText: (args) => this._dataController.getLegendSeriesDisplayName(args.seriesName) });
            if (viewModel.Legend.IsInsideDiagram)
                options.legend.margin = 10;
        }
        return _jquery_helpers_1.deepExtend(dataSourceAndSeries, options);
    }
    _getCommonOptions() {
        var that = this, animation = that._getAnimationOptions(), options = {
            sortSeriesPointsByAxis: true,
            redrawOnResize: false,
            pointSelectionMode: 'multiple',
            seriesSelectionMode: 'multiple',
            palette: _render_helper_1.RenderHelper.getDefaultPalette(),
            encodeHtml: that._isEncodeHtml(),
            onIncidentOccurred: (e) => {
                if (e['target'].id === 'W2002' && (e['target'].args.indexOf('legendFakeArgument') || (e['target'].args.indexOf('legendFakeValue'))))
                    return;
                if (e['target'].id === 'W2103' || e['target'].id === 'W2104' || e['target'].id === 'W2105' || e['target'].id === 'W2106')
                    return;
                _render_helper_1.RenderHelper.widgetIncidentOccurred(e);
            },
            adjustOnZoom: false,
            customizePoint: function () {
                var argumentTag = this.tag, seriesTag = this.series.tag, result = {};
                if (!_chart_helper_1.chartHelper.isFinancialType(this.series.type)) {
                    result.color = that._dataController.getColor(argumentTag.axisPoint, seriesTag.axisPoint, that._getMeasuresIds(seriesTag), seriesTag.colorMeasureId);
                }
                let interactionValue = that._getElementInteractionValue(this, that.options.ViewModel);
                if (interactionValue && interactionValue.axisPoint && !_utils_1.allowSelectValue(interactionValue.axisPoint.getUniquePath())) {
                    result.hoverStyle = { hatching: 'none' };
                }
                return result;
            }
        };
        options.onPointClick = function (e) {
            that._raiseItemClick(e.target);
            e['cancel'] = true;
        };
        options.onSeriesClick = function (e) {
            that._raiseItemClick({ series: e.target });
        };
        options.onPointHoverChanged = function (e) {
            that._raiseItemHover(e.target);
        };
        options.tooltip = {
            enabled: true,
            container: _utils_1.tooltipContainerSelector,
            customizeTooltip: function (obj) {
                var pane = obj.point.series.pane, argumentText = that._dataController.getTooltipArgumentText(obj), allSeries = that.chartViewer.getAllSeries(), resultHtml = '<table>';
                let ARGUMENT_VALUE_CLASS = 'dx-argument-value';
                let createCell = (text, className) => {
                    return '<tr><td ' + (className ? 'class="' + className + '"' : '') + '>' + text + '</td></tr>';
                };
                resultHtml += createCell(that._getHtml(argumentText), ARGUMENT_VALUE_CLASS);
                let valueCount = 0;
                let truncated = false;
                for (let i = 0; i < allSeries.length; i++) {
                    let series = allSeries[i];
                    if (series.pane === pane) {
                        var points = series.getPointsByArg(obj.argument), point = points.length > 1 ? obj.point : points[0];
                        if (point) {
                            var text = that._dataController.customizeTooltipText(series, point, series.tag.valueFormats, that._isEncodeHtml());
                            if (text) {
                                if (valueCount < chartItem._maxTooltipValues) {
                                    resultHtml += createCell(text);
                                    valueCount++;
                                }
                                else {
                                    truncated = true;
                                    break;
                                }
                            }
                        }
                    }
                }
                if (truncated) {
                    resultHtml += createCell('...');
                }
                resultHtml += '</table>';
                return {
                    html: resultHtml
                };
            },
            font: {
                size: 14
            },
            zIndex: _z_index_1.zIndex.dashboardItemTooltips
        };
        options.commonPaneSettings = {
            border: {
                visible: true
            }
        };
        options.animation = {
            enabled: animation.enabled,
            duration: animation.duration
        };
        options.margin = {
            top: 10,
            right: 22,
            bottom: 22,
            left: 22
        };
        return options;
    }
    _applySelectionUnsafe() {
        var that = this, viewModel = that.options.ViewModel, tuples = that.getSelectedTuples();
        if (viewModel && viewModel.SelectionEnabled && tuples.length > 0) {
            that.chartViewer.clearSelection();
            tuples.forEach(tuple => {
                that.selectTuple(tuple, true);
            });
        }
    }
    _getDataPoint(element) {
        var that = this, elementTag = element.tag, elementSeries = element.series, elementSeriesTag = elementSeries ? elementSeries.tag : undefined, seriesValues = elementSeriesTag ? _utils_1.getTagValue(elementSeriesTag) : [], argumentValues = elementTag ? _utils_1.getTagValue(elementTag) : [], seriesIndex = elementSeries ? elementSeries.index : undefined;
        return {
            getValues: function (name) {
                switch (name) {
                    case item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis:
                        return argumentValues;
                    case item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis:
                        return seriesValues;
                    default:
                        return null;
                }
            },
            getDeltaIds: function () {
                return [];
            },
            getMeasureIds: function () {
                return that._getMeasuresIds(elementSeriesTag);
            }
        };
    }
    _getMeasuresIds(elementSeriesTag) {
        return elementSeriesTag ? elementSeriesTag.dataMembers : [];
    }
    _isMultiDataSupported() {
        return true;
    }
    _getElementInteractionValue(element, viewModel) {
        return (viewModel.SelectionEnabled && viewModel.SelectionMode === _chart_helper_1.chartHelper.SelectionMode.Series) ? element.series.tag : element.tag;
    }
    _isAxisInPercentFormat(pane, isSecondaryAxis) {
        var seriesTemplate;
        for (var i = 0; i < pane.SeriesTemplates.length; i++) {
            seriesTemplate = pane.SeriesTemplates[i];
            if (isSecondaryAxis == seriesTemplate.PlotOnSecondaryAxis && !seriesTemplate.OnlyPercentValues && !this._isFullStackedSeriesType(seriesTemplate.SeriesType))
                return false;
        }
        return true;
    }
    _isAxisInScientificFormat(pane, isSecondaryAxis) {
        var seriesTemplate;
        for (var i = 0; i < pane.SeriesTemplates.length; i++) {
            seriesTemplate = pane.SeriesTemplates[i];
            if (isSecondaryAxis == seriesTemplate.PlotOnSecondaryAxis && !seriesTemplate.OnlyScientificValues)
                return false;
        }
        return true;
    }
    _isFullStackedSeriesType(seriesType) {
        switch (seriesType) {
            case 'FullStackedArea':
            case 'FullStackedBar':
            case 'FullStackedLine':
            case 'FullStackedSplineArea':
                return true;
            default:
                return false;
        }
    }
    _convertHoverMode(selectionMode) {
        switch (selectionMode) {
            case _chart_helper_1.chartHelper.SelectionMode.Argument:
                return 'allArgumentPoints';
            case _chart_helper_1.chartHelper.SelectionMode.Series:
                return 'allSeriesPoints';
            case _chart_helper_1.chartHelper.SelectionMode.Points:
            default:
                return 'none';
        }
    }
    _convertPointHoverMode(selectionMode) {
        switch (selectionMode) {
            case _chart_helper_1.chartHelper.SelectionMode.Argument:
                return 'allArgumentPoints';
            case _chart_helper_1.chartHelper.SelectionMode.Series:
                return 'allSeriesPoints';
            case _chart_helper_1.chartHelper.SelectionMode.Points:
                return 'onlyPoint';
            default:
                return 'none';
        }
    }
    _resizeUnsafe() {
        super._resizeUnsafe();
        if (_jquery_helpers_1.isVisible(this.container)) {
            this.chartViewer.render();
        }
    }
    _getWidget() {
        return this.chartViewer;
    }
}
exports.chartItem = chartItem;
chartItem._maxTooltipValues = 20;


/***/ }),

/***/ 51115:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.choroplethMapItem = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _z_index_1 = __webpack_require__(56330);
const _consts_1 = __webpack_require__(82581);
const _map_item_1 = __webpack_require__(62423);
class choroplethMapItem extends _map_item_1.mapItem {
    constructor(container, options) {
        super(container, options);
    }
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    selectTuple(tuple, state) {
        var that = this;
        that.mapViewer.getLayerByName('area').getElements().forEach(item => {
            if (item.attribute('selectionName') == tuple[0].value)
                item.selected(state);
        });
    }
    _setSelectionUnsafe(values) {
        super._setSelectionUnsafe(values);
        var that = this;
        this.clearSelection();
        if (values && values.length) {
            that.mapViewer.getLayerByName('area').getElements().forEach(item => {
                values.forEach(value => {
                    if (item.attribute('selectionName') == value)
                        item.selected(true);
                });
            });
        }
    }
    updateContentStateUnsafe() {
        this.mapViewer.option('layers[0].hoverEnabled', this._getCustomHoverEnabled());
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        var options = _jquery_helpers_1.deepExtend(this._getMapViewerOptions(), this._getChoroplethMapViewerOptions());
        this._renderContentInternal(element, changeExisting, options);
        return false;
    }
    _getChoroplethMapViewerOptions() {
        var that = this, viewModel = that.options.ViewModel, mapItems = viewModel.MapItems, mapDataSource = that._getMapDataSource(mapItems, viewModel.ShapeTitleAttributeName), choroplethColorizer = viewModel.ChoroplethColorizer, tooltipAttributeName = viewModel.ToolTipAttributeName, tooltipMeasures = viewModel.TooltipMeasures, colors, rangeStops, legend, i;
        for (i = 0; i < mapItems.length; i++) {
            var attributeText = that._findAttributeValueByName(mapItems[i].Attributes, tooltipAttributeName);
            mapDataSource[i].attributes.tooltip = '<b>' + that._getHtml(attributeText) + '</b>';
        }
        if (choroplethColorizer && that._dataController.hasRecords()) {
            if (choroplethColorizer.ValueName) {
                that._fillValueMapDataSourceAttrs(mapDataSource, choroplethColorizer, tooltipMeasures, mapItems);
                rangeStops = that._getRangeStops(choroplethColorizer);
                colors = that._getColors(choroplethColorizer.Colorizer.Colors);
                if (!colors) {
                    colors = rangeStops.length > 2 ? ['#5F8195', '#B55951'] : ['#5F8195'];
                }
                legend = that._getColorLegend(viewModel.Legend, that._dataController.getMeasureDescriptorById(choroplethColorizer.ValueId));
            }
            if (choroplethColorizer.DeltaValueName) {
                that._fillDeltaMapDataSourceAttrs(mapDataSource, choroplethColorizer, tooltipMeasures, mapItems);
                colors = ['rgb(229, 82, 83)', 'rgb(224, 194, 58)', 'rgb(154, 181, 126)'];
                rangeStops = [0, 1, 2, 3];
            }
        }
        return {
            layers: that._configureGeometryLayers(mapDataSource, that._getArea(viewModel, colors, rangeStops)),
            onClick: function (e) {
                if (e.target && e.target.layer.name === 'area' && e.target.attribute('selectionName')) {
                    that._raiseItemClick(e.target);
                }
            },
            legends: [legend],
            tooltip: {
                enabled: true,
                zIndex: _z_index_1.zIndex.dashboardItemTooltips,
                container: _utils_1.tooltipContainerSelector,
                customizeTooltip: function (arg) {
                    if (arg.layer.name === 'area')
                        return {
                            html: arg.attribute('tooltip')
                        };
                }
            }
        };
    }
    _getColorLegend(legendViewModel, measureDescriptor) {
        var legend = this._getLegend(legendViewModel);
        if (legend) {
            legend.source = {
                layer: 'area',
                grouping: 'color'
            };
            legend.customizeText = function (arg) {
                return measureDescriptor.format(arg.start);
            };
        }
        return legend;
    }
    _fillMeasureToolTip(mapDataSourceItem, attribute, tooltipMeasures) {
        var displayText, tooltipViewModel, i;
        if (tooltipMeasures) {
            for (i = 0; i < tooltipMeasures.length; i++) {
                tooltipViewModel = tooltipMeasures[i];
                displayText = this._dataController.getDisplayText(attribute, tooltipViewModel.DataId);
                if (displayText != null) {
                    mapDataSourceItem.attributes.tooltip += '<br>' + this._getToolTip(tooltipViewModel.Caption, displayText);
                }
            }
        }
    }
    _fillValueMapDataSourceAttrs(mapDataSource, choroplethColorizer, tooltipMeasures, mapItems) {
        var attributeName = choroplethColorizer.AttributeName, attribute, selectionName, displayText;
        for (var i = 0; i < mapItems.length; i++) {
            attribute = this._findAttributeValueByName(mapItems[i].Attributes, attributeName);
            selectionName = this._dataController.getUniqueValue(attribute);
            if (selectionName) {
                displayText = this._dataController.getDisplayText(attribute, choroplethColorizer.ValueId);
                mapDataSource[i].attributes.selectionName = selectionName;
                mapDataSource[i].attributes.selected = this._isSelected([selectionName]);
                mapDataSource[i].attributes.value = this._dataController.getValue(attribute, choroplethColorizer.ValueId);
                mapDataSource[i].attributes.tooltip += '<br>' + this._getToolTip(choroplethColorizer.ValueName, displayText);
                this._correctAttributesTitle(mapDataSource[i].attributes, displayText);
                this._fillMeasureToolTip(mapDataSource[i], attribute, tooltipMeasures);
            }
        }
    }
    _fillDeltaMapDataSourceAttrs(mapDataSource, choroplethColorizer, tooltipMeasures, mapItems) {
        var attributeName = choroplethColorizer.AttributeName, selectionName, attribute, toolTip, deltaValue, value, isGood, displayText, indicatorType;
        for (var i = 0; i < mapItems.length; i++) {
            attribute = this._findAttributeValueByName(mapItems[i].Attributes, attributeName);
            selectionName = this._dataController.getUniqueValue(attribute);
            if (selectionName) {
                mapDataSource[i].attributes.selectionName = selectionName;
                mapDataSource[i].attributes.selected = this._isSelected([selectionName]);
                deltaValue = this._dataController.getDeltaValue(attribute, choroplethColorizer.DeltaValueId);
                isGood = deltaValue.getIsGood().getValue();
                indicatorType = this._convertIndicatorType(deltaValue.getIndicatorType().getValue());
                mapDataSource[i].attributes.value = this._getDeltaColorValue(indicatorType, isGood);
                displayText = deltaValue.getActualValue().getDisplayText();
                toolTip = '<br>' + this._getToolTip(choroplethColorizer.ActualValueName, displayText);
                value = this._getDeltaValue(deltaValue, choroplethColorizer.DeltaValueType);
                if (value) {
                    displayText = value.getDisplayText();
                    let deltaValueName = choroplethColorizer.DeltaValueType === 'TargetValue' ? choroplethColorizer.TargetValueName : choroplethColorizer.DeltaValueName;
                    toolTip += '<br>' + this._getToolTip(deltaValueName, displayText);
                }
                mapDataSource[i].attributes.tooltip += toolTip;
                this._correctAttributesTitle(mapDataSource[i].attributes, displayText);
                this._fillMeasureToolTip(mapDataSource[i], attribute, tooltipMeasures);
            }
        }
    }
    _correctAttributesTitle(attributes, displayText) {
        var viewModel = this.options.ViewModel;
        if (viewModel.IncludeSummaryValueToShapeTitle) {
            if (attributes.title)
                attributes.title += '\r\n' + displayText;
            else
                attributes.title = displayText;
        }
    }
    _getDeltaValue(deltaValue, deltaValueType) {
        switch (deltaValueType) {
            case 'AbsoluteVariation':
                return deltaValue.getAbsoluteVariation();
            case 'PercentVariation':
                return deltaValue.getPercentVariation();
            case 'PercentOfTarget':
                return deltaValue.getPercentOfTarget();
            case 'TargetValue':
                return deltaValue.getTargetValue();
            case 'ActualValue':
            default:
                return null;
        }
    }
    _findAttributeValueByName(attributes, attributeName) {
        for (var i = 0; i < attributes.length; i++) {
            if (attributes[i].Name === attributeName) {
                return attributes[i].Value;
            }
        }
    }
    _getRangeStops(choroplethColorizer) {
        var minMax = this._dataController.getMinMax(choroplethColorizer.ValueId);
        return this._updateRangeStops(choroplethColorizer.Colorizer.RangeStops, minMax.min, minMax.max, choroplethColorizer.Colorizer.UsePercentRangeStops);
    }
    _convertIndicatorType(type) {
        var indicatorTypes = ['none', 'up', 'down', 'warning'];
        return indicatorTypes[type];
    }
    _getDeltaColorValue(indicatorType, isGood) {
        switch (indicatorType) {
            case _consts_1.indicatorType.up:
            case _consts_1.indicatorType.down:
                return isGood ? 2.5 : 0.5;
            case _consts_1.indicatorType.warning:
                return 1.5;
            default:
                return -1;
        }
    }
    _getArea(viewModel, colors, rangeStops) {
        var that = this, selectionDisabled = that._selectionMode() === 'none';
        return Object.assign(Object.assign({}, that._getLabelSettings(viewModel)), { colorGroupingField: 'value', colorGroups: rangeStops, palette: colors, customize: items => {
                items.forEach(item => {
                    item.selected(item.attribute('selected'));
                    if (selectionDisabled || item.attribute('value') === undefined) {
                        item.applySettings({
                            hoveredBorderColor: null,
                            hoveredClass: null,
                            hoverEnabled: false
                        });
                    }
                });
            }, selectionMode: 'multiple' });
    }
    _getDataPoint(element) {
        var that = this;
        return {
            getValues: function () {
                return that._getElementInteractionValue(element, that.options.ViewModel);
            },
            getMeasureIds: function () {
                return [that.options.ViewModel.ChoroplethColorizer.ValueId];
            },
            getDeltaIds: function () {
                return [];
            }
        };
    }
    _getElementInteractionValue(element, viewModel) {
        return !!this.options.ViewModel.ChoroplethColorizer ? [element.attribute('selectionName')] : [];
    }
}
exports.choroplethMapItem = choroplethMapItem;


/***/ }),

/***/ 4477:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.customFakeItem = void 0;
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const _base_item_1 = __webpack_require__(11439);
class customFakeItem extends _base_item_1.baseItem {
    constructor(container, options) {
        super(container, options);
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        var div = document.createElement('div');
        div.classList.add('dx-dashboard-custom-item-notsupported-message');
        div.innerText = _localizer_1.localizer.getString(_localization_ids_1.localizationId.MessageCustomItemIsNotSupported);
        element.appendChild(div);
        return false;
    }
    _ensureToolbarIsRendered() {
        return null;
    }
}
exports.customFakeItem = customFakeItem;


/***/ }),

/***/ 57078:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gaugesItem = void 0;
const _format_helper_1 = __webpack_require__(27893);
const _formatter_1 = __webpack_require__(93687);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _kpi_item_1 = __webpack_require__(49483);
class gaugesItem extends _kpi_item_1.kpiItem {
    constructor(container, options) {
        super(container, options);
    }
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    _getWidgetViewerOptions() {
        var options = super._getWidgetViewerOptions();
        options.useFlex = true;
        return options;
    }
    _getSpecificWidgetViewerOptions() {
        var that = this, viewModel = that.options.ViewModel, specificOptions = {
            itemOptions: {
                ignoreProportions: true
            }
        }, baseOptions = super._getSpecificWidgetViewerOptions();
        if (viewModel) {
            switch (viewModel.ViewType) {
                case _utils_1.gaugeViewType.CircularHalf:
                    specificOptions.itemOptions.proportions = 0.85;
                    specificOptions.itemOptions.minWidth = 155;
                    break;
                case _utils_1.gaugeViewType.CircularQuarterLeft:
                case _utils_1.gaugeViewType.CircularQuarterRight:
                    specificOptions.itemOptions.proportions = 1.25;
                    specificOptions.itemOptions.minWidth = 150;
                    break;
                case _utils_1.gaugeViewType.CircularThreeFourth:
                case _utils_1.gaugeViewType.CircularFull:
                    specificOptions.itemOptions.proportions = 1;
                    specificOptions.itemOptions.minWidth = 180;
                    break;
                case _utils_1.gaugeViewType.LinearVertical:
                    specificOptions.itemOptions.proportions = 1.5;
                    specificOptions.itemOptions.minWidth = 150;
                    break;
                case _utils_1.gaugeViewType.LinearHorizontal:
                    specificOptions.itemOptions.proportions = 0.5;
                    specificOptions.itemOptions.minWidth = 200;
                    break;
            }
        }
        return _jquery_helpers_1.deepExtend(specificOptions, baseOptions);
    }
    _supportAnimation() {
        return true;
    }
    _getWidgetType() {
        var viewModel = this.options.ViewModel;
        if (viewModel) {
            switch (viewModel.ViewType) {
                case _utils_1.gaugeViewType.LinearVertical:
                case _utils_1.gaugeViewType.LinearHorizontal:
                    return 'lineargauge';
                default:
                    return 'circulargauge';
            }
        }
        return 'circulargauge';
    }
    _getElementsName() {
        return 'Gauges';
    }
    _showTitle() {
        if (this.options.ViewModel) {
            return this.options.ViewModel.ShowGaugeCaptions;
        }
        else {
            return super._showTitle();
        }
    }
    _getWidget() {
        if (this.widgetsViewer) {
            var gaugeList = [];
            this.widgetsViewer.itemsList.forEach(item => {
                gaugeList.push(item._widget);
            });
            return gaugeList;
        }
        else {
            return undefined;
        }
    }
    _setSourceItemProperties(sourceItem, gaugeModel, props) {
        super._setSourceItemProperties(sourceItem, gaugeModel, props);
        var captions = props.getCaptions(), range = props.getGaugeRange(), targetValue;
        this._setVisualProperties(sourceItem, gaugeModel, range);
        if (gaugeModel.DataItemType === _utils_1.KpiValueMode.Measure) {
            sourceItem.value = props.getMeasureValue();
            sourceItem.indicator = {
                text: {
                    value: props.getMeasureDisplayText(),
                    useDefaultColor: gaugeModel.IgnoreDeltaColor
                }
            };
        }
        else {
            sourceItem.value = props.getActualValue();
            targetValue = props.getTargetValue();
            if (targetValue)
                sourceItem.subvalues = [targetValue];
            sourceItem.indicator = {
                type: props.getIndicatorType(),
                hasPositiveMeaning: props.getIsGood(),
                text: {
                    value: props.getMainValueText(),
                    useDefaultColor: gaugeModel.IgnoreDeltaColor
                }
            };
        }
        if (this._showTitle() && captions.length > 0) {
            sourceItem.title = {
                text: captions.join(' - '),
                font: { size: 16 },
                subtitle: { font: { size: 14 } },
                margin: { top: 4, left: 0, right: 0, bottom: 0 },
                wordWrap: 'none'
            };
        }
    }
    _setVisualProperties(sourceItem, gaugeModel, range) {
        var that = this, viewModel = that.options.ViewModel, minRangeValue = range.min, maxRangeValue = range.max, width = maxRangeValue - minRangeValue, intervalCount = range.majorTickCount - 1, tickInterval, scaleFormat = gaugeModel.ScaleFormat != null ? _formatter_1.convertToFormat({ NumericFormat: gaugeModel.ScaleFormat }) : _formatter_1.defaultNumericFormat;
        switch (viewModel.ViewType) {
            case _utils_1.gaugeViewType.CircularHalf:
                sourceItem.geometry = {
                    startAngle: 180,
                    endAngle: 0
                };
                break;
            case _utils_1.gaugeViewType.CircularQuarterLeft:
                sourceItem.geometry = {
                    startAngle: 180,
                    endAngle: 90
                };
                break;
            case _utils_1.gaugeViewType.CircularQuarterRight:
                sourceItem.geometry = {
                    startAngle: 90,
                    endAngle: 0
                };
                break;
            case _utils_1.gaugeViewType.CircularThreeFourth:
                sourceItem.geometry = {
                    startAngle: 220,
                    endAngle: 320
                };
                break;
            case _utils_1.gaugeViewType.CircularFull:
                sourceItem.geometry = {
                    startAngle: 240,
                    endAngle: 300
                };
                break;
            case _utils_1.gaugeViewType.LinearVertical:
                sourceItem.geometry = {
                    orientation: 'vertical'
                };
                break;
            case _utils_1.gaugeViewType.LinearHorizontal:
                sourceItem.geometry = {
                    orientation: 'horizontal'
                };
                break;
        }
        sourceItem.valueIndicator = {
            type: sourceItem.geometry.orientation ? 'rangeBar' : 'twoColorNeedle'
        };
        sourceItem.subvalueIndicator = {
            offset: sourceItem.geometry.orientation ? 8 : 0
        };
        sourceItem.scale = {
            startValue: minRangeValue,
            endValue: maxRangeValue,
            label: {
                format: (value) => _format_helper_1.DashboardFormatHelper.format(value, scaleFormat)
            }
        };
        if (width > 0) {
            tickInterval = width / intervalCount;
            sourceItem.scale.tick = {
                tickInterval: (width >= intervalCount) ? Math.round(tickInterval) : tickInterval,
                useTicksAutoArrangement: false
            };
        }
        sourceItem.animation = that._getAnimationOptions();
    }
}
exports.gaugesItem = gaugesItem;


/***/ }),

/***/ 5243:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.geoPointMapItemBase = void 0;
const themes_1 = __webpack_require__(90056);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _z_index_1 = __webpack_require__(56330);
const _map_item_1 = __webpack_require__(62423);
class geoPointMapItemBase extends _map_item_1.mapItem {
    constructor(container, options) {
        super(container, options);
        var that = this;
        that.raiseTimerClusterizationDataRequest = function () {
            var clientState = that._getClusterizationInfo();
            if (clientState.clientSize.width > 0 && clientState.clientSize.height > 0) {
                that._onDataRequest();
            }
            clearTimeout(that.timer);
            that.timer = false;
        };
    }
    initialDataRequestUnsafe() {
        this._raiseClusterizationDataRequest();
    }
    selectTupleUnsafe(tuple, state) {
        var that = this;
        that._getMarkerLayers().forEach(layer => {
            layer.getElements().forEach(item => {
                if (item.attribute('latSelection') == tuple[0].value[0] && item.attribute('lonSelection') == tuple[0].value[1]) {
                    item.selected(state);
                }
            });
        });
    }
    _setSelectionUnsafe(values) {
        super._setSelectionUnsafe(values);
        this.clearSelection();
        if (values && values.length > 0) {
            this._getMarkerLayers().forEach(layer => {
                layer.getElements().forEach(item => {
                    values.forEach((value, i) => {
                        if (item.attribute('latSelection') == value[0] && item.attribute('lonSelection') == value[1]) {
                            item.selected(true);
                        }
                    });
                });
            });
        }
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        var options = _jquery_helpers_1.deepExtend(this._getMapViewerOptions(), this._getGeoPointMapViewerOptions());
        this._renderContentInternal(element, changeExisting, options);
        return false;
    }
    renderPartialContentUnsafe() {
        var viewModel = this.options.ViewModel;
        this._updateMarkerLayers(viewModel);
    }
    resetClientViewport() {
        super.resetClientViewport();
        this._raiseClusterizationDataRequest();
    }
    updateContentStateUnsafe() {
        var that = this, layers = that.mapViewer.option('layers');
        layers.forEach(layer => {
            if (layer.type === 'marker')
                layer.hoverEnabled = that._getCustomHoverEnabled();
        });
        this.mapViewer.option('layers', layers);
    }
    forceUpdateClientState() {
        if (this.hasWidget) {
            this._onClientStateUpdate(this._getClientContext());
        }
    }
    _getGeoPointMapViewerOptions() {
        var that = this, viewModel = that.options.ViewModel;
        return {
            layers: that._configureLayers(viewModel),
            onClick: function (e) {
                if (e.target && e.target.layer.type === 'marker')
                    that._raiseItemClick(e.target);
            },
            legends: that._getLegends(viewModel),
            tooltip: {
                enabled: true,
                zIndex: _z_index_1.zIndex.dashboardItemTooltips,
                container: _utils_1.tooltipContainerSelector,
                customizeTooltip: function (arg) {
                    var dimensionText, measureText, mainText, resultHtml = '';
                    if (arg.layer.type === 'marker') {
                        dimensionText = arg.attribute('dimensionsTooltip');
                        mainText = arg.attribute('tooltip');
                        measureText = arg.attribute('measuresTooltip');
                        if (dimensionText)
                            resultHtml += '<tr><td>' + dimensionText + '</td></tr>';
                        if (mainText)
                            resultHtml += '<tr><td>' + mainText + (measureText ? '' : '</td></tr>');
                        if (measureText)
                            resultHtml += (mainText ? '<br>' : '</td></tr>') + measureText + '</td></tr>';
                    }
                    return {
                        html: (resultHtml != '') ? '<table align="left">' + resultHtml + '</table>' : ''
                    };
                }
            }
        };
    }
    _getMarkerLayers() {
    }
    _configureLayers(viewModel) {
        var mapDataSource = this._getMapDataSource(viewModel.MapItems, viewModel.ShapeTitleAttributeName);
        return this._configureGeometryLayers(mapDataSource, this._getArea(viewModel)).concat(this._configureMarkerLayers(viewModel));
    }
    _configureMarkerLayers(viewModel) {
    }
    _updateMarkerLayers(viewModel) {
        var layers = this.mapViewer.option('layers'), markerLayers = this._configureMarkerLayers(viewModel);
        markerLayers.forEach((layer, index) => {
            layers[index + 1] = layer;
        });
        this.mapViewer.option('layers', layers);
    }
    _getMarker(viewModel, markerDataSource) {
        var style;
        return {
            customize: function (items) {
                items.forEach(item => {
                    item.selected(item.attribute('selected'));
                    style = { color: item.attribute('color') };
                    var size = item.attribute('size');
                    if (size)
                        style.size = size;
                    item.applySettings(style);
                });
            },
            selectionMode: 'multiple'
        };
    }
    _getArea(viewModel) {
        var that = this;
        return Object.assign(Object.assign({}, that._getLabelSettings(viewModel)), { hoverEnabled: false, selectionMode: that._selectionMode() });
    }
    _getLegends(viewModel) {
        var legends = [], colorLegend = this._getColorLegend(viewModel), sizeLegend = this._getWeightLegend(viewModel);
        if (colorLegend) {
            legends.push(colorLegend);
        }
        if (sizeLegend) {
            legends.push(sizeLegend);
        }
        return legends;
    }
    _getColorLegend(viewModel) {
        var legend = this._getLegend(viewModel.ColorLegend);
        if (legend) {
            legend.source = { grouping: 'color' };
        }
        return legend;
    }
    _getWeightLegend(viewModel) {
        var legend = this._getLegend(viewModel.WeightedLegend);
        if (legend) {
            legend.source = { grouping: 'size' };
            legend.markerShape = 'circle';
            legend.markerColor = themes_1.getTheme(themes_1.currentTheme()).map['layer:area'].color;
            legend.orientation = 'vertical';
        }
        return legend;
    }
    _getMinMaxValues(markerDataSource) {
        var min, max;
        if (markerDataSource.length > 0) {
            for (var i = 0; i < markerDataSource.length; i++) {
                if (max === undefined || markerDataSource[i].attributes.value !== undefined && (markerDataSource[i].attributes.value > max)) {
                    max = markerDataSource[i].attributes.value;
                }
                if (min === undefined || markerDataSource[i].attributes.value !== undefined && (markerDataSource[i].attributes.value < min)) {
                    min = markerDataSource[i].attributes.value;
                }
            }
        }
        return {
            min: min,
            max: max
        };
    }
    _pointsCountTooltip(count) {
        return '<b>' + count + ' points</b>';
    }
    _getElementInteractionValue(element, viewModel) {
        return [element.attribute('latSelection'), element.attribute('lonSelection')];
    }
    _getDimensionsTooltipHtml(tooltipDimensions) {
        var values = [];
        if (tooltipDimensions.length === 1) {
            if (tooltipDimensions[0].values) {
                for (var i = 0; i < tooltipDimensions[0].values.length; i++) {
                    values.push('<b>' + this._getHtml(tooltipDimensions[0].values[i]) + '</b>');
                }
                return values.join('<br>');
            }
        }
        else {
            for (var i = 0; i < tooltipDimensions.length; i++) {
                var tooltipDimension = tooltipDimensions[i];
                if (tooltipDimension.values) {
                    values.push('<b>' + this._getHtml(tooltipDimension.caption) + '</b>');
                    for (var j = 0; j < tooltipDimension.values.length; j++) {
                        values.push(this._getHtml(tooltipDimension.values[j]));
                    }
                }
            }
            return values.join('<br>');
        }
        return '';
    }
    _getMeasuresTooltipHtml(tooltipMeasures) {
        var result = [];
        for (var i = 0; i < tooltipMeasures.length; i++) {
            result.push(this._getToolTip(tooltipMeasures[i].caption, tooltipMeasures[i].value));
        }
        return result.join('<br>');
    }
    _getDataPoint(element) {
        var that = this, viewModel = that.options.ViewModel;
        return {
            getValues: function () {
                return that._getElementInteractionValue(element, viewModel);
            },
            getMeasureIds: function () {
                return that._getDataPointMeasureIds();
            },
            getDeltaIds: function () {
                return [];
            }
        };
    }
    _getDataPointMeasureIds() {
        return [];
    }
    _updateContentSizeUnsafe() {
        super._updateContentSizeUnsafe();
        if (!!this.mapViewer) {
            this._raiseClusterizationDataRequest();
        }
    }
    _raiseClusterizationDataRequest() {
        if (this.options.ViewModel.EnableClustering) {
            var clientContext = this._getClientContext();
            this._onClientStateUpdate(clientContext);
            if (clientContext.clusterizationInfo.clientSize.width > 0 && clientContext.clusterizationInfo.clientSize.height > 0) {
                this._onDataRequest();
            }
        }
    }
    _onViewPortChanged() {
        super._onViewPortChanged();
        if (this.options.ViewModel.EnableClustering && !this._isLocked() && !this.timer) {
            this.timer = setTimeout(this.raiseTimerClusterizationDataRequest, 500);
        }
    }
    _onInitialExtentUnsafe(viewport) {
        super._onInitialExtentUnsafe(viewport);
        this._raiseClusterizationDataRequest();
    }
}
exports.geoPointMapItemBase = geoPointMapItemBase;


/***/ }),

/***/ 92872:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.geoPointMapItem = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const _geo_point_map_item_base_1 = __webpack_require__(5243);
class geoPointMapItem extends _geo_point_map_item_base_1.geoPointMapItemBase {
    constructor(container, options) {
        super(container, options);
    }
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    _getMarkerLayers() {
        return [this.mapViewer.getLayerByName('dot'), this.mapViewer.getLayerByName('bubble')];
    }
    _configureMarkerLayers(viewModel) {
        var markerDataSource = this._getMarkerDataSource(), dotSettings = markerDataSource.dotDataSource.length > 0 ? this._getDorMarker(viewModel, markerDataSource.dotDataSource) : null, bubbleSettings = markerDataSource.bubbleDataSource.length > 0 ? this._getBubbleMarker(viewModel, markerDataSource.bubbleDataSource) : null;
        return [
            Object.assign({ name: 'dot', type: 'marker', elementType: 'dot', dataSource: markerDataSource.dotDataSource }, dotSettings),
            Object.assign({ name: 'bubble', type: 'marker', elementType: 'bubble', dataField: 'value', dataSource: markerDataSource.bubbleDataSource }, bubbleSettings)
        ];
    }
    _getMarkerDataSource() {
        var viewModel = this.options.ViewModel, dotDataSource = [], bubbleDataSource = [], count = this.dataController ? this._dataController.getCount() : 0, tooltip, geoPoint, point;
        for (var i = 0; i < count; i++) {
            point = this._dataController.getPoint(i);
            tooltip = this._getToolTip(viewModel.ValueName, point.text);
            geoPoint = {
                coordinates: [point.lon, point.lat],
                attributes: {
                    latSelection: point.latSel,
                    lonSelection: point.lonSel,
                    selected: this._isSelected([point.latSel, point.lonSel]),
                    dimensionsTooltip: this._getDimensionsTooltipHtml(point.tooltipDimensions),
                    measuresTooltip: this._getMeasuresTooltipHtml(point.tooltipMeasures)
                }
            };
            if (point.pointsCount && point.pointsCount > 1) {
                geoPoint.attributes.value = this._getClusterBubbleSizeIndex(point.pointsCount);
                geoPoint.attributes.tooltip = this._pointsCountTooltip(point.pointsCount) + '<br>' + tooltip;
                geoPoint.attributes.color = this._getClusterBubbleColor(point.pointsCount);
                bubbleDataSource.push(geoPoint);
            }
            else {
                geoPoint.attributes.text = point.text;
                geoPoint.attributes.tooltip = tooltip;
                dotDataSource.push(geoPoint);
            }
        }
        return {
            dotDataSource: dotDataSource,
            bubbleDataSource: bubbleDataSource
        };
    }
    _getDorMarker(viewModel, markerDataSource) {
        return Object.assign(Object.assign({}, this._getMarker(viewModel, markerDataSource)), { label: {
                dataField: 'text'
            } });
    }
    _getBubbleMarker(viewModel, markerDataSource) {
        var res = this._getMinMaxValues(markerDataSource);
        return _jquery_helpers_1.deepExtend(this._getMarker(viewModel, markerDataSource), {
            minSize: 30 + res.min * 10,
            maxSize: 30 + res.max * 10
        });
    }
    _getColorLegend(viewModel) {
    }
    _getWeightLegend(viewModel) {
    }
    _getClusterBubbleColor(value) {
        if (value < 10) {
            return 'rgb(27, 73, 165)';
        }
        if (value < 100) {
            return 'rgb(63, 136, 48)';
        }
        if (value < 1000) {
            return 'rgb(228, 124, 2)';
        }
        return 'rgb(214, 5, 5)';
    }
    _getClusterBubbleSizeIndex(value) {
        for (var i = 0;; i++) {
            if (value < Math.pow(10, i)) {
                return i - 1;
            }
        }
    }
    _getDataPointMeasureIds() {
        var viewModel = this.options.ViewModel, measureIds = [];
        measureIds.push(viewModel.ValueId);
        return measureIds;
    }
}
exports.geoPointMapItem = geoPointMapItem;


/***/ }),

/***/ 34008:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.groupItem = void 0;
const _render_helper_1 = __webpack_require__(39336);
const _base_item_1 = __webpack_require__(11439);
class groupItem extends _base_item_1.baseItem {
    constructor(container, options) {
        super(container, options);
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        element.classList.add(_base_item_1.cssClassNamesBaseItem.groupItem);
        return false;
    }
    _itemHasOwnContent() {
        return false;
    }
    _toggleLoadingPanel() {
    }
    getOffset() {
        var borderSize = _render_helper_1.RenderHelper.getBorderSizeByClasses([_base_item_1.cssClassNamesBaseItem.groupItem]);
        return {
            width: borderSize.width,
            height: borderSize.height + this._calcHeaderAndFooterHeight()
        };
    }
}
exports.groupItem = groupItem;


/***/ }),

/***/ 3911:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.imageItem = void 0;
const $ = __webpack_require__(65311);
const _jquery_helpers_1 = __webpack_require__(59384);
const _base_item_1 = __webpack_require__(11439);
var BASE64_STRING_PREFIX = 'data:image/png;base64,';
class imageItem extends _base_item_1.baseItem {
    constructor(container, options) {
        super(container, options);
    }
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    _initializeData(newOptions) {
        super._initializeData(newOptions);
        this.imgSrc = this._getImageSource(this.options.ViewModel ? this.options.ViewModel.ImageViewModel : undefined);
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        var that = this;
        if (!changeExisting || !that.img) {
            that.img = $.fn.constructor('<img>').bind('load', function () {
                that._loadImage();
            });
            $.fn.constructor(element).append(that.img);
        }
        that.img.attr('src', that.imgSrc);
        return false;
    }
    _loadImage() {
        this._clearImgTag();
        this._initialWidth = this.img.width();
        this._initialHeight = this.img.height();
        this._loadedImgProcessing();
    }
    _clearImgTag() {
        var that = this, $contentRoot = $.fn.constructor(that.contentRoot), $img = $contentRoot.find('img');
        $contentRoot.css({ overflow: '' });
        $img.removeAttr('style');
        $img.removeAttr('align');
    }
    _loadedImgProcessing() {
        var that = this, $contentRoot = $.fn.constructor(that.contentRoot), containerWidth = $contentRoot.width(), containerHeight = $contentRoot.height(), img = $contentRoot.find('img'), viewModel = that.options.ViewModel, sizeMode = viewModel.SizeMode, horizontalAlignment = viewModel.HorizontalAlignment || 'Right', verticalAlignment = viewModel.VerticalAlignment || 'Top', centeringDirect, curImgHeight, curImgWidth;
        switch (sizeMode) {
            case 'Clip':
                $contentRoot.css({ overflow: 'hidden' });
                that._setHorizontalAlignment(img, horizontalAlignment);
                that._setVerticalAlignment(img, verticalAlignment);
                break;
            case 'Stretch':
                img.css({ width: '100%', height: '100%' });
                break;
            case 'Squeeze': {
                curImgHeight = img.height();
                curImgWidth = img.width();
                if ((curImgHeight >= containerHeight && curImgHeight <= that._initialHeight) || (curImgWidth >= containerWidth && curImgWidth <= that._initialWidth)) {
                    centeringDirect = that._setImgSizeWithProportions(img, containerHeight / containerWidth);
                    img.css({ marginTop: 0, marginLeft: 0 });
                }
                else {
                    img.css({
                        width: '',
                        height: ''
                    });
                    that._setHorizontalAlignment(img, horizontalAlignment);
                    that._setVerticalAlignment(img, verticalAlignment);
                }
                break;
            }
            case 'Zoom': {
                centeringDirect = that._setImgSizeWithProportions(img, containerHeight / containerWidth);
                break;
            }
            default: break;
        }
        if (centeringDirect === 'horizontalCentering') {
            that._setHorizontalAlignment(img, horizontalAlignment);
        }
        if (centeringDirect === 'verticalCentering') {
            that._setVerticalAlignment(img, verticalAlignment);
        }
    }
    _setHorizontalAlignment($img, horizontalAlignment) {
        if (horizontalAlignment === 'Center') {
            $img.css({ marginLeft: ($.fn.constructor(this.contentRoot).width() - $img.width()) / 2 });
            return;
        }
        $img.attr('align', horizontalAlignment.toLowerCase());
    }
    _setVerticalAlignment($img, verticalAlignment) {
        var verticalOffsetCoeff, differenceTop = $.fn.constructor(this.contentRoot).height() - $img.height();
        switch (verticalAlignment) {
            case 'Bottom':
                verticalOffsetCoeff = 1;
                break;
            case 'Center':
                verticalOffsetCoeff = 0.5;
                break;
            case 'Top':
                verticalOffsetCoeff = 0;
                break;
        }
        $img.css({ marginTop: Math.floor(differenceTop * verticalOffsetCoeff) + 'px' });
    }
    _setImgSizeWithProportions($img, containerProportion) {
        var imgProportion = this._initialHeight / this._initialWidth;
        if (imgProportion > containerProportion) {
            $img.height('100%');
            $img.width(Math.floor($img.height() / imgProportion));
            return 'horizontalCentering';
        }
        else {
            $img.width('100%');
            $img.height(Math.floor($img.width() * imgProportion));
            return 'verticalCentering';
        }
    }
    _getImageSource(imageViewModel) {
        if (imageViewModel) {
            var url = imageViewModel.Url, sourceBase64String = imageViewModel.SourceBase64String, mimeType = imageViewModel.MimeType || '';
            if (sourceBase64String) {
                return 'data:' + mimeType + ';base64,' + sourceBase64String;
            }
            if (url) {
                return url;
            }
        }
        return '';
    }
    _resizeUnsafe() {
        super._resizeUnsafe();
        this._loadImage();
    }
    _getWidget() {
        return this.img && _jquery_helpers_1.wrapPublicElement(this.img[0]) || null;
    }
}
exports.imageItem = imageItem;


/***/ }),

/***/ 5828:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.interactivityController = exports.dashboardSelectionMode = void 0;
const class_1 = __webpack_require__(30867);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
exports.dashboardSelectionMode = {
    none: 'None',
    single: 'Single',
    multiple: 'Multiple'
};
exports.interactivityController = class_1.default.inherit({
    ctor: function ctor(getTuples) {
        var that = this;
        that._getTuples = getTuples;
        that.selectionChanged = _jquery_helpers_1.createJQueryCallbacks();
    },
    clickAction: function (tuples, isEmpty = false) {
        if (isEmpty) {
            this.selectionChanged.fire(null);
        }
        else if (this.selectionMode !== exports.dashboardSelectionMode.none) {
            var that = this, isMultipleMode = that.selectionMode === exports.dashboardSelectionMode.multiple, currentTuples = isMultipleMode ? that._getTuples().slice() : [], selectedTuples = [], changed = false;
            tuples.forEach(tuple => {
                if (that._allowSelectTuple(tuple)) {
                    var arrayIndex = isMultipleMode ? _utils_1.checkArrayContainsTuple(currentTuples, tuple) : undefined;
                    if (arrayIndex == undefined) {
                        selectedTuples.push(tuple);
                    }
                    else {
                        currentTuples.splice(arrayIndex, 1);
                    }
                    changed = true;
                }
            });
            if (changed) {
                that.selectionChanged.fire(currentTuples.concat(selectedTuples));
            }
        }
    },
    setOptions: function (selectionMode) {
        this.selectionMode = selectionMode;
    },
    _allowSelectTuple: function (tuple) {
        var allowSelect = true;
        tuple.forEach(axisValue => {
            if (!_utils_1.allowSelectValue(axisValue.value)) {
                allowSelect = false;
                return false;
            }
        });
        return allowSelect;
    }
});


/***/ }),

/***/ 49483:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.kpiItem = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _widget_viewer_item_1 = __webpack_require__(14352);
class kpiItem extends _widget_viewer_item_1.widgetViewerItem {
    constructor(container, options) {
        super(container, options);
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        var result = super.renderContentUnsafe(element, changeExisting, afterRenderCallback);
        element.classList.add('dx-dashboard-widget-viewer-item');
        return result;
    }
    _showTitle() {
        return true;
    }
    _getElementsName() {
    }
    selectTupleUnsafe(tuple, state) {
        this.widgetsViewer.itemsList.forEach(viewer => {
            if (_utils_1.checkValuesAreEqual(viewer.tag, tuple[0].value)) {
                if (state) {
                    viewer.select();
                }
                else {
                    viewer.clearSelection();
                }
            }
        });
    }
    _setSelectionUnsafe(values) {
        super._setSelectionUnsafe(values);
        this.clearSelection();
        this._applySelection();
    }
    _getDataPoint(element) {
        var that = this, viewModel = that.options.ViewModel, elementTag = element.tag, titleValues = elementTag ? elementTag : [], elementIndex = elementTag ? 0 : element.index, elViewModel = viewModel[that._getElementsName()][elementIndex];
        return {
            getValues: function (name) {
                return (name == 'Default') ? titleValues : null;
            },
            getDeltaIds: function () {
                return elViewModel.DataItemType === 'Delta' ? [elViewModel.ID] : [];
            },
            getMeasureIds: function () {
                return elViewModel.DataItemType === 'Measure' ? [elViewModel.ID] : [];
            },
            getSelectionValues: function () {
                return elementTag;
            }
        };
    }
    _isMultiDataSupported() {
        return true;
    }
    _setSourceItemProperties(sourceItem, elementModel, props) {
        var selectionValues = props.getSelectionValues(), serverSelection = this.options.SelectedValues, currentLine, isSelected = function () {
            if (serverSelection && selectionValues) {
                for (var i = 0; i < serverSelection.length; i++) {
                    currentLine = serverSelection[i];
                    if (_utils_1.checkValuesAreEqual(selectionValues, currentLine))
                        return true;
                }
            }
            return false;
        };
        _jquery_helpers_1.extend(sourceItem, this._configureHover(selectionValues));
        sourceItem.tag = selectionValues;
        sourceItem.isSelected = isSelected();
    }
    _applySelectionUnsafe() {
        var that = this;
        that.getSelectedTuples().forEach(tuple => that.selectTuple(tuple, true));
    }
}
exports.kpiItem = kpiItem;


/***/ }),

/***/ 62423:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mapItem = void 0;
const string_1 = __webpack_require__(36306);
const vector_map_1 = __webpack_require__(86588);
const projection_1 = __webpack_require__(66681);
const _jquery_helpers_1 = __webpack_require__(59384);
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const caption_toolbar_options_1 = __webpack_require__(57731);
const _caption_toolbar_css_classes_1 = __webpack_require__(83629);
const _base_item_1 = __webpack_require__(11439);
var projection = (function () {
    var parameters = projection_1.projection.get('mercator').source(), _to = parameters.to, _from = parameters.from;
    parameters.to = function (coordinates) {
        var coords = _to(coordinates);
        return [clamp(coords[0], -1, +1), coords[1]];
    };
    parameters.from = function (coordinates) {
        var coords = [clamp(coordinates[0], -1, +1), coordinates[1]];
        return _from(coords);
    };
    return projection_1.projection(parameters);
    function clamp(value, min, max) {
        return Math.min(Math.max(value, min), max);
    }
}());
class mapItem extends _base_item_1.baseItem {
    constructor($container, options) {
        super($container, options);
        this.isInitialExtentChanged = false;
        this.isViewportLocked = false;
    }
    dispose() {
        super.dispose();
        this.mapViewer && this.mapViewer.dispose();
    }
    _renderContentInternal(element, changeExisting, options) {
        this._raiseItemWidgetOptionsPrepared(options);
        if (changeExisting && this.mapViewer) {
            this._unsubscribeItemEvents();
            this.mapViewer.option(options);
            if (this._shouldResetClientViewport(this.options.ViewModel.Viewport)) {
                this.resetClientViewport();
            }
        }
        else {
            this.mapViewer = new vector_map_1.default(element, options);
        }
        this._updatePreviousViewport(this.options.ViewModel.Viewport);
        this._subscribeItemEvents();
    }
    resetClientViewport() {
        this.clientState = null;
        this._onClientStateUpdate(this._getClientContext());
    }
    _shouldResetClientViewport(viewportViewModel) {
        if (this.previousViewportViewModel) {
            var viewportChanged = !this._viewportEquals(this.previousViewportViewModel, viewportViewModel) || this.previousViewportViewModel.CreateViewerPaddings !== viewportViewModel.CreateViewerPaddings;
            if (viewportChanged && this.clientState && this._viewportEquals(this.clientState.clusterizationInfo.viewport, viewportViewModel) && !viewportViewModel.CreateViewerPaddings)
                return false;
            return viewportChanged;
        }
        return false;
    }
    _viewportEquals(viewport1, viewport2) {
        return viewport1.RightLongitude === viewport2.RightLongitude && viewport1.LeftLongitude === viewport2.LeftLongitude
            && viewport1.BottomLatitude === viewport2.BottomLatitude && viewport1.TopLatitude === viewport2.TopLatitude
            && viewport1.CenterPointLongitude === viewport2.CenterPointLongitude && viewport1.CenterPointLatitude === viewport2.CenterPointLatitude;
    }
    _updatePreviousViewport(viewport) {
        this.previousViewportViewModel = {
            RightLongitude: viewport.RightLongitude,
            LeftLongitude: viewport.LeftLongitude,
            BottomLatitude: viewport.BottomLatitude,
            TopLatitude: viewport.TopLatitude,
            CenterPointLongitude: viewport.CenterPointLongitude,
            CenterPointLatitude: viewport.CenterPointLatitude,
            CreateViewerPaddings: viewport.CreateViewerPaddings
        };
    }
    _clearSelectionUnsafe() {
        this.mapViewer.clearSelection();
    }
    getInfoUnsafe() {
        return _jquery_helpers_1.deepExtend(super.getInfoUnsafe(), {
            viewport: this._getViewport()
        });
    }
    _getSpecificStatePanelItems() {
        if (!this.isViewportLocked && this.isInitialExtentChanged) {
            return [{
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.initialExtent,
                    click: (element) => {
                        this._toggleInitialExtentChanged(false);
                    },
                    icon: _caption_toolbar_css_classes_1.cssClasses.iconInitialExtent,
                    type: 'button',
                    hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.InitialExtent)
                }];
        }
        else
            return [];
    }
    _getMapViewerOptions() {
        var that = this, viewModel = that.options.ViewModel;
        return {
            projection: projection,
            encodeHtml: that._isEncodeHtml(),
            background: { borderWidth: 0, borderColor: 'none' },
            controlBar: { enabled: false },
            zoomFactor: that._calculateZoomFactor(viewModel.Viewport, _jquery_helpers_1.getWidth(that.contentRoot), _jquery_helpers_1.getHeight(that.contentRoot)),
            maxZoomFactor: 1 << 18,
            center: [viewModel.Viewport.CenterPointLongitude, viewModel.Viewport.CenterPointLatitude],
            panningEnabled: !this.isViewportLocked,
            zoomingEnabled: !this.isViewportLocked
        };
    }
    _getLabelSettings(viewModel) {
        return {
            label: {
                enabled: !!viewModel.ShapeTitleAttributeName || viewModel.IncludeSummaryValueToShapeTitle,
                dataField: 'title'
            }
        };
    }
    _calculateZoomFactor(viewport, width, height) {
        var min = width < height ? width : height, mapWidth = this._translateLon(viewport.RightLongitude, min) - this._translateLon(viewport.LeftLongitude, min), mapHeight = this._translateLat(viewport.BottomLatitude, min) - this._translateLat(viewport.TopLatitude, min), latitudeZoom = width / mapWidth, longitudeZoom = height / mapHeight, zoom = latitudeZoom < longitudeZoom ? latitudeZoom : longitudeZoom;
        if (viewport.CreateViewerPaddings) {
            zoom *= 0.95;
        }
        return zoom;
    }
    _translateLon(lon, size) {
        var lon_ = lon * Math.PI / 180;
        return (size / 2) + (size / (2 * Math.PI)) * lon_;
    }
    _translateLat(lat, size) {
        var lat_ = lat * Math.PI / 180;
        return (size / 2) - (size / (2 * Math.PI)) * Math.log(Math.tan(Math.PI / 4 + lat_ / 2));
    }
    _getMapDataSource(mapItems, titleName) {
        var mapDataSource = [], data, type, points, boundary, point, segments, segmentData, pushAction;
        for (var i = 0; i < mapItems.length; i++) {
            data = [];
            type = 'area';
            if (mapItems[i].Latitude && mapItems[i].Longitude && mapItems[i].Size) {
                data.push([mapItems[i].Longitude, mapItems[i].Latitude]);
            }
            if (mapItems[i].Segments) {
                segments = mapItems[i].Segments;
                for (var j = 0; j < segments.length; j++) {
                    pushAction = function (row) {
                        if (segments[j].IsClosed && row.length > 1) {
                            var first = row[0], last = row[row.length - 1];
                            if (first[0] != last[0] || first[1] != last[1])
                                row.push(first);
                        }
                        data.push(row);
                    };
                    if (!segments[j].IsFilled)
                        type = 'line';
                    points = segments[j].Points;
                    segmentData = [];
                    for (var k = 0; k < points.length; k++) {
                        segmentData.push([points[k].Longitude, points[k].Latitude]);
                    }
                    pushAction(segmentData);
                    for (var l = 0; l < segments[j].Boundaries.length; l++) {
                        segmentData = [];
                        boundary = segments[j].Boundaries[l];
                        for (var m = 0; m < boundary.Points.length; m++) {
                            point = boundary.Points[m];
                            segmentData.push([point.Longitude, point.Latitude]);
                        }
                        pushAction(segmentData);
                    }
                }
            }
            mapDataSource.push({
                coordinates: data,
                type: type,
                attributes: {}
            });
            for (var j = 0; j < mapItems[i].Attributes.length; j++) {
                if (mapItems[i].Attributes[j].Name === titleName) {
                    mapDataSource[i].attributes.title = mapItems[i].Attributes[j].Value;
                    break;
                }
            }
        }
        return mapDataSource;
    }
    _configureGeometryLayers(mapDataSource, areaSettings) {
        var areaDataSource = [], lineDataSource = [], layers = [];
        for (var i = 0; i < mapDataSource.length; i++) {
            if (mapDataSource[i].type === 'line')
                lineDataSource.push(mapDataSource[i]);
            else
                areaDataSource.push(mapDataSource[i]);
        }
        layers.push(Object.assign({ name: 'area', type: 'area', dataSource: areaDataSource }, areaSettings));
        if (lineDataSource.length > 0)
            layers.push({ name: 'line', type: 'line', dataSource: lineDataSource });
        return layers;
    }
    _getLegend(legendModel) {
        var legend = legendModel && !!legendModel.Visible ? {} : undefined;
        if (legend) {
            this._updateLegendPosition(legend, legendModel);
        }
        return legend;
    }
    _updateLegendPosition(legend, legendModel) {
        switch (legendModel.Orientation) {
            case 'Vertical':
                legend.orientation = 'vertical';
                legend.inverted = true;
                break;
            case 'Horizontal':
                legend.orientation = 'horizontal';
                break;
            default:
                break;
        }
        switch (legendModel.Position) {
            case 'TopLeft':
                legend.verticalAlignment = 'top';
                legend.horizontalAlignment = 'left';
                break;
            case 'TopCenter':
                legend.verticalAlignment = 'top';
                legend.horizontalAlignment = 'center';
                break;
            case 'TopRight':
                legend.verticalAlignment = 'top';
                legend.horizontalAlignment = 'right';
                break;
            case 'BottomLeft':
                legend.verticalAlignment = 'bottom';
                legend.horizontalAlignment = 'left';
                break;
            case 'BottomCenter':
                legend.verticalAlignment = 'bottom';
                legend.horizontalAlignment = 'center';
                break;
            case 'BottomRight':
                legend.verticalAlignment = 'bottom';
                legend.horizontalAlignment = 'right';
                break;
            default:
                break;
        }
    }
    _isSelected(current) {
        var selectedValues = this._getSelectedValues(), selected = false, equals;
        if (selectedValues && selectedValues.length > 0 && selectedValues[0].length === current.length) {
            for (var i = 0; i < selectedValues.length; i++) {
                equals = true;
                for (var j = 0; j < current.length; j++) {
                    if (selectedValues[i][j] !== current[j]) {
                        equals = false;
                        break;
                    }
                }
                if (equals) {
                    selected = true;
                    break;
                }
            }
        }
        return selected;
    }
    _getToolTip(name, value) {
        return string_1.format('{0}: {1}', this._getHtml(name), this._getHtml(value));
    }
    _getColors(colorModels) {
        var colors;
        if (colorModels) {
            colors = [];
            for (var i = 0; i < colorModels.length; i++) {
                colors.push('rgb(' + colorModels[i].R + ', ' + colorModels[i].G + ', ' + colorModels[i].B + ')');
            }
            return colors;
        }
    }
    _updateRangeStops(rangeStops, min, max, percent) {
        var res = [];
        for (var i = 0; i < rangeStops.length; i++) {
            res.push(rangeStops[i]);
        }
        if (percent) {
            this._updatePercentRangeStops(res, min, max);
        }
        if (res.length > 0 && res[0] > min) {
            res[0] = min;
        }
        if (res[res.length - 1] < max) {
            res.push(max);
        }
        else {
            res.push(res[res.length - 1] + 1);
        }
        return res;
    }
    _updatePercentRangeStops(rangeStops, min, max) {
        for (var i = 0; i < rangeStops.length; i++) {
            rangeStops[i] = min + (rangeStops[i] / 100) * (max - min);
        }
    }
    _getViewport() {
        var topLeft = this.mapViewer.convertCoordinates(0, 0), bottomRight = this.mapViewer.convertCoordinates(_jquery_helpers_1.getWidth(this.contentRoot), _jquery_helpers_1.getHeight(this.contentRoot)), viewport = this.mapViewer.viewport(), center = this.mapViewer.center();
        return {
            LeftLongitude: !!topLeft[0] ? topLeft[0] : viewport[0],
            TopLatitude: !!topLeft[1] ? topLeft[1] : viewport[1],
            RightLongitude: !!bottomRight[0] ? bottomRight[0] : viewport[2],
            BottomLatitude: !!bottomRight[1] ? bottomRight[1] : viewport[3],
            CenterPointLongitude: center[0],
            CenterPointLatitude: center[1]
        };
    }
    _getClientContext() {
        return {
            clusterizationInfo: this._getClusterizationInfo(),
            widgetState: this._getWidgetState()
        };
    }
    _getClusterizationInfo() {
        return {
            viewport: this._getViewport(),
            clientSize: {
                width: _jquery_helpers_1.getWidth(this.contentRoot),
                height: _jquery_helpers_1.getHeight(this.contentRoot)
            }
        };
    }
    _getWidgetState() {
        return this.mapViewer && {
            zoomFactor: this.mapViewer.zoomFactor(),
            center: this.mapViewer.center()
        };
    }
    _updateClientStateUnsafe(clientState) {
        this._updateWidgetState(clientState.widgetState);
    }
    _updateViewport(viewport) {
        this._updateWidgetState({
            zoomFactor: this._calculateZoomFactor(viewport, _jquery_helpers_1.getWidth(this.contentRoot), _jquery_helpers_1.getHeight(this.contentRoot)),
            center: [viewport.CenterPointLongitude, viewport.CenterPointLatitude]
        });
    }
    _updateWidgetState(widgetState) {
        this._lock();
        try {
            this.mapViewer.zoomFactor(widgetState.zoomFactor);
            this.mapViewer.center(widgetState.center);
        }
        finally {
            this._unlock();
        }
    }
    _updateContentSizeUnsafe() {
        super._updateContentSizeUnsafe();
        if (!!this.mapViewer) {
            if (this.clientState)
                this._updateWidgetState(this.clientState.widgetState);
            else
                this._updateViewport(this.options.ViewModel.Viewport);
            this.mapViewer.render();
            this._onClientStateUpdate(this._getClientContext());
        }
    }
    _onViewPortChanged() {
        if (!this._isLocked()) {
            this.clientState = this._getClientContext();
            this.viewportChangedCallback && this.viewportChangedCallback(this.clientState.clusterizationInfo.viewport);
            this._onClientStateUpdate(this.clientState);
            this._toggleInitialExtentChanged(true);
        }
    }
    onInitialExtent(newViewport) {
        if (this.hasWidget) {
            this._onInitialExtentUnsafe(newViewport);
        }
        else {
            this._onInitialExtentBase(newViewport);
        }
    }
    _onInitialExtentUnsafe(newViewport) {
        this._updateViewport(newViewport || this.options.ViewModel.Viewport);
        this.clientState = null;
        this._onClientStateUpdate(this._getClientContext());
    }
    _onInitialExtentBase(newViewport) {
        this.clientState = null;
    }
    _getWidget() {
        return this.mapViewer;
    }
    _subscribeItemEvents() {
        var that = this;
        this.mapViewer.option('onCenterChanged', function () { that._onViewPortChanged(); });
        this.mapViewer.option('onZoomFactorChanged', function () { that._onViewPortChanged(); });
    }
    _unsubscribeItemEvents() {
        this.mapViewer.option('onCenterChanged', null);
        this.mapViewer.option('onZoomFactorChanged', null);
    }
    _toggleInitialExtentChanged(changed) {
        if (this.isInitialExtentChanged != changed) {
            this.isInitialExtentChanged = changed;
            this.initialExtentChanged && this.initialExtentChanged(this.isInitialExtentChanged);
        }
    }
}
exports.mapItem = mapItem;


/***/ }),

/***/ 62572:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pieMouseEventController = exports.pieItem = void 0;
const string_1 = __webpack_require__(36306);
const $ = __webpack_require__(65311);
const item_data_axis_names_1 = __webpack_require__(51101);
const _chart_helper_1 = __webpack_require__(11222);
const _jquery_helpers_1 = __webpack_require__(59384);
const _selection_helper_1 = __webpack_require__(3522);
const _utils_1 = __webpack_require__(7590);
const _z_index_1 = __webpack_require__(56330);
const _render_helper_1 = __webpack_require__(39336);
const _widget_viewer_item_1 = __webpack_require__(14352);
var pieSizeGroup = 0;
class pieItem extends _widget_viewer_item_1.widgetViewerItem {
    constructor(container, options) {
        super(container, options);
        this.itemElementCustomColor = _jquery_helpers_1.createJQueryCallbacks();
        this.sizeGroupId = undefined;
        this.sizeGroupId = ++pieSizeGroup;
        this._createPieMouseEventController();
    }
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    _initializeData(newOptions) {
        super._initializeData(newOptions);
        if (this.dataController) {
            this._dataController.elementCustomColor = args => this._elementCustomColor(args);
        }
    }
    _clearSelectionUnsafe() {
        super._clearSelectionUnsafe();
        var that = this, viewModel = that.options.ViewModel, piesViewer = that.widgetsViewer;
        if (viewModel && viewModel.SelectionEnabled && viewModel.SelectionMode !== _chart_helper_1.chartHelper.SelectionMode.Series) {
            $.each(piesViewer.itemsList, function () {
                if (this._widget) {
                    this._widget.clearSelection();
                }
            });
        }
    }
    updateContentStateUnsafe() {
        var that = this;
        if (that._getCustomHoverEnabled()) {
            var argumentHoverMode = 'none', seriesHoverEnabled = false, targetAxes = this._getTargetAxes();
            if (targetAxes.length == 1) {
                if (targetAxes[0] == item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis)
                    argumentHoverMode = 'allArgumentPoints';
                else
                    seriesHoverEnabled = true;
            }
            else {
                if (targetAxes.length == 2) {
                    argumentHoverMode = 'point';
                    seriesHoverEnabled = true;
                }
            }
            $.each(this.widgetsViewer.itemsList, function (index, viewer) {
                viewer._widget.option('commonSeriesSettings.hoverMode', argumentHoverMode);
                viewer._hoverEnabled = seriesHoverEnabled;
            });
        }
    }
    selectTupleUnsafe(tuple, state) {
        var that = this, isPointSelection = that.options.ViewModel.SelectionMode === _chart_helper_1.chartHelper.SelectionMode.Points, seriesValue = _utils_1.getAxisPointValue(tuple, item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis), argumentValue = _utils_1.getAxisPointValue(tuple, item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis);
        $.each(that.widgetsViewer.itemsList, function (index, viewer) {
            if (seriesValue) {
                if (_selection_helper_1.selectionHelper._checkWidgetCorrespondsToValue(viewer, seriesValue)) {
                    if (argumentValue)
                        _selection_helper_1.selectionHelper.setSelectedArguments(viewer._widget, [argumentValue], state);
                    else if (isPointSelection)
                        _selection_helper_1.selectionHelper.selectWholePie(viewer._widget, state);
                    else
                        _selection_helper_1.selectionHelper.setSelectedWidgetViewer(viewer, [seriesValue], state);
                }
            }
            else if (argumentValue) {
                _selection_helper_1.selectionHelper.setSelectedArguments(viewer._widget, [argumentValue], state);
            }
        });
    }
    _setSelectionUnsafe(values) {
        super._setSelectionUnsafe(values);
        this.clearSelection();
        this._applySelection();
    }
    _elementCustomColor(eventArgs) {
        this.itemElementCustomColor.fire(this.getName(), eventArgs);
    }
    _createPieMouseEventController() {
        var that = this;
        that.pieMouseEventController = new pieMouseEventController();
        that.pieMouseEventController.ready.add(function () {
            var data = { pie: that.pieMouseEventController.pieData, slice: that.pieMouseEventController.sliceData };
            that._raiseItemClick(data);
        });
    }
    _isHoverEnabled() {
        return super._isHoverEnabled() && this._isItemSelectionEnabled();
    }
    _isItemSelectionEnabled() {
        var viewModel = this.options.ViewModel;
        return viewModel && viewModel.SelectionEnabled && (viewModel.SelectionMode === _chart_helper_1.chartHelper.SelectionMode.Series);
    }
    _isLabelsVisible() {
        var viewModel = this.options.ViewModel;
        return viewModel && (viewModel.LabelContentType !== 'None');
    }
    _supportAnimation() {
        return true;
    }
    _getSpecificWidgetViewerOptions() {
        var that = this, specificOptions = that._isLabelsVisible() ? {
            itemOptions: {
                minWidth: 200,
                proportions: 0.75,
                ignoreProportions: true
            }
        } : {
            itemOptions: {
                minWidth: 100,
                proportions: 1,
                ignoreProportions: true
            }
        };
        return _jquery_helpers_1.deepExtend(specificOptions, super._getSpecificWidgetViewerOptions());
    }
    _getWidgetType() {
        return 'pieChart';
    }
    _getDataSource() {
        if (!this.options.ViewModel) {
            return {};
        }
        var that = this, viewModel = that.options.ViewModel, isPointSelectionEnabled = that._getPointSelectionEnabled(), selectionMode = that._selectionMode(), seriesAxisPoints = that._dataController.getSeriesAxisPoints(), selectedValuesList = that._getSelectedValues(), dataSource = [], currentSeriesPath, seriesPropsValues;
        seriesAxisPoints.forEach(seriesAxisPoint => {
            currentSeriesPath = seriesAxisPoint.getUniquePath();
            that._dataController.getValueDataMembers().forEach((valueDataMember, valueIndex) => {
                let dataSourceItem = {
                    animation: that._getAnimationOptions(),
                    sizeGroup: that.sizeGroupId,
                    legend: {
                        visible: false
                    },
                    resolveLabelOverlapping: 'shift',
                    onIncidentOccurred: _render_helper_1.RenderHelper.widgetIncidentOccurred,
                    onPointClick: that._getSelectPointsHandler(),
                    onPointHoverChanged: that._getHoverPointsHandler(),
                    palette: _render_helper_1.RenderHelper.getDefaultPalette(),
                    pointSelectionMode: 'multiple',
                    commonSeriesSettings: {
                        hoverMode: isPointSelectionEnabled && (selectionMode !== 'none') ? 'allArgumentPoints' : 'none'
                    },
                    customizePoint: function () {
                        var result = { color: that._dataController.getColor(this.tag.axisPoint, seriesAxisPoint, that._getMeasuresIds(this.tag), this.tag.colorMeasureId) };
                        let interactionValue = that._getElementInteractionValue(this, that.options.ViewModel);
                        if (interactionValue && interactionValue.axisPoint && !_utils_1.allowSelectValue(interactionValue.axisPoint.getUniquePath())) {
                            result.hoverStyle = { hatching: 'none' };
                        }
                        return result;
                    }
                };
                dataSourceItem.tag = { axisPoint: seriesAxisPoint };
                _jquery_helpers_1.extend(dataSourceItem, that._configureHover(currentSeriesPath));
                if (selectedValuesList && that._isItemSelectionEnabled()) {
                    $.each(selectedValuesList, function (__, selectedValue) {
                        if (_utils_1.checkValuesAreEqual(currentSeriesPath, selectedValue))
                            dataSourceItem.isSelected = true;
                    });
                }
                if (viewModel.ShowPieCaptions) {
                    dataSourceItem.title = {
                        text: that._dataController.getValueDisplayNames(seriesAxisPoint, valueIndex),
                        font: {
                            size: 18
                        }
                    };
                }
                seriesPropsValues = {
                    type: (viewModel.PieType === 'Donut') ? 'doughnut' : 'pie',
                    argumentField: 'x',
                    valueField: 'y',
                    label: {
                        visible: that._isLabelsVisible(),
                        position: viewModel.LabelPosition == 'Inside' ? 'inside' : 'columns'
                    },
                    point: {
                        visible: true
                    },
                    segmentsDirection: 'anticlockwise',
                    paintNullPoints: true
                };
                if (seriesPropsValues.label.visible) {
                    seriesPropsValues.label.connector = {
                        visible: true,
                        width: 1
                    };
                    seriesPropsValues.label.customizeText = that._getFormatLabelHandler(viewModel.LabelContentType);
                }
                dataSourceItem.series = [seriesPropsValues];
                dataSourceItem.dataSource = that._dataController.createDataSource(seriesAxisPoint, valueDataMember);
                dataSourceItem.tooltip = {
                    enabled: (viewModel.TooltipContentType !== 'None')
                };
                if (dataSourceItem.tooltip.enabled) {
                    dataSourceItem.tooltip.container = _utils_1.tooltipContainerSelector;
                    dataSourceItem.tooltip.customizeTooltip = function (label) {
                        return { text: that._getFormatLabelHandler(viewModel.TooltipContentType)(label) };
                    };
                    dataSourceItem.tooltip.font = {
                        size: 14
                    };
                    dataSourceItem.tooltip.zIndex = _z_index_1.zIndex.dashboardItemTooltips;
                }
                dataSource.push(dataSourceItem);
            });
        });
        return (dataSource.length == 1 && dataSource[0].dataSource.length == 0) ? [] : dataSource;
    }
    _getPointSelectionEnabled() {
        var viewModel = this.options.ViewModel;
        return viewModel.SelectionEnabled && (viewModel.SelectionMode === _chart_helper_1.chartHelper.SelectionMode.Argument || viewModel.SelectionMode === _chart_helper_1.chartHelper.SelectionMode.Points);
    }
    _getFormatLabelHandler(valueType) {
        var that = this;
        return function (label) {
            var pointTexts = that._dataController.getPointDisplayTexts(label.point.tag, label.value, label.percent), tooltipPattern = that._getTooltipPattern(valueType);
            switch (valueType) {
                case 'Argument':
                    return pointTexts.argumentText;
                case 'Percent':
                    return pointTexts.percentText;
                case 'Value':
                    return pointTexts.valueText;
                case 'ValueAndPercent':
                    return string_1.format(tooltipPattern, pointTexts.valueText, pointTexts.percentText);
                case 'ArgumentAndPercent':
                    return string_1.format(tooltipPattern, pointTexts.argumentText, pointTexts.percentText);
                case 'ArgumentAndValue':
                    return string_1.format(tooltipPattern, pointTexts.argumentText, pointTexts.valueText);
                case 'ArgumentValueAndPercent':
                    return string_1.format(tooltipPattern, pointTexts.argumentText, pointTexts.valueText, pointTexts.percentText);
                default:
                    return '';
            }
        };
    }
    _getTooltipPattern(valueType) {
        switch (valueType) {
            case 'ValueAndPercent':
                return '{0} ({1})';
            case 'ArgumentAndPercent':
            case 'ArgumentAndValue':
                return '{0}: {1}';
            case 'ArgumentValueAndPercent':
                return '{0}: {1} ({2})';
            default:
                return '';
        }
    }
    _getElementInteractionValue(element, viewModel) {
        if (this._isItemSelectionEnabled())
            return super._getElementInteractionValue(element, viewModel);
        return element.tag;
    }
    _getOnClickHandler() {
        var that = this;
        return function (e) {
            that._pieMouseEventHandler(e.item);
        };
    }
    _getSelectPointsHandler() {
        var that = this;
        return function (e) {
            var viewModel = that.options.ViewModel, selectionMode = that._selectionMode(), isPointSelectionEnalbed = viewModel.SelectionEnabled && (viewModel.SelectionMode === _chart_helper_1.chartHelper.SelectionMode.Argument) && selectionMode !== 'none';
            that._sliceMouseEventHandler(e.target);
        };
    }
    _getOnHoverHandler() {
        var that = this;
        return function (e) {
            that.pieMouseEventController.pieData = e.item;
            that._raiseItemHover({ pie: e.item }, e.state);
        };
    }
    _getHoverPointsHandler() {
        var that = this;
        return function (e) {
            that._raiseItemHover({ pie: that.pieMouseEventController.pieData, slice: e.target });
        };
    }
    _pieMouseEventHandler(element) {
        this.pieMouseEventController.setPieData(element);
    }
    _sliceMouseEventHandler(element) {
        this.pieMouseEventController.setSliceData(element);
    }
    _getDataPoint(element) {
        var that = this, viewModel = that.options.ViewModel, slice = element.slice, sliceTag = slice ? slice.tag : undefined, pie = element.pie, pieTag = pie ? pie.tag : undefined, argumentsValues = sliceTag ? _utils_1.getTagValue(sliceTag) : [], titleValues = pieTag ? _utils_1.getTagValue(pieTag) : [], argumentIndex = (slice && !sliceTag) ? slice.index : undefined, elementIndex = (pie && !pieTag) ? pie.index : undefined, measureIndex = argumentIndex ? argumentIndex : elementIndex ? elementIndex : 0;
        return {
            getValues: function (name) {
                switch (name) {
                    case item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis:
                        return argumentsValues;
                    case item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis:
                        return titleValues;
                    default:
                        return null;
                }
            },
            getDeltaIds: function () {
                return [];
            },
            getMeasureIds: function () {
                return slice ? that._getMeasuresIds(slice.tag) : [];
            }
        };
    }
    _getMeasuresIds(sliceTag) {
        return sliceTag ? sliceTag.dataMembers : [];
    }
    _isMultiDataSupported() {
        return true;
    }
    _getWidget() {
        if (this.widgetsViewer) {
            var pieWidgetViewers = this.widgetsViewer.itemsList, piesList = [];
            $.each(pieWidgetViewers, function () {
                piesList.push(this._widget);
            });
            return piesList;
        }
        else {
            return undefined;
        }
    }
    _applySelectionUnsafe() {
        var that = this;
        that.getSelectedTuples().forEach(tuple => that.selectTuple(tuple, true));
    }
}
exports.pieItem = pieItem;
class pieMouseEventController {
    constructor() {
        this.shouldRaise = false;
        this.ready = _jquery_helpers_1.createJQueryCallbacks();
        this.timer = 0;
    }
    setPieData(data) {
        this.pieData = data;
        if (this.ready) {
            this.ready.fire();
        }
        this.pieData = undefined;
        this.sliceData = undefined;
    }
    setSliceData(data) {
        this.sliceData = data;
    }
}
exports.pieMouseEventController = pieMouseEventController;


/***/ }),

/***/ 36138:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pieMapItem = void 0;
const color_1 = __webpack_require__(43150);
const string_1 = __webpack_require__(36306);
const _jquery_helpers_1 = __webpack_require__(59384);
const _geo_point_map_item_base_1 = __webpack_require__(5243);
class pieMapItem extends _geo_point_map_item_base_1.geoPointMapItemBase {
    constructor(container, options) {
        super(container, options);
        this.itemElementCustomColor = _jquery_helpers_1.createJQueryCallbacks();
        this._pieUniqueArguments = undefined;
        this._pieArgumentDisplayTexts = undefined;
        this._pieArgumentColors = undefined;
        this.itemElementCustomColor = _jquery_helpers_1.createJQueryCallbacks();
    }
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    _getMarkerLayers() {
        return [this.mapViewer.getLayerByName('pie')];
    }
    _configureMarkerLayers(viewModel) {
        var viewModel = this.options.ViewModel, pieSegments = this._getPieSegments(), pies = this._getPiesData(pieSegments, viewModel), markerDataSource = this._getMarkerDataSource(pies, viewModel.IsWeighted), markerSettings = this._getPieMapMarker(viewModel, markerDataSource, pies);
        return [Object.assign({ name: 'pie', type: 'marker', elementType: 'pie', dataField: 'values', dataSource: markerDataSource }, markerSettings)];
    }
    _getPieMapMarker(viewModel, markerDataSource, pies) {
        if (markerDataSource.length === 0) {
            return;
        }
        var markerSettings = this._getMarker(viewModel, markerDataSource);
        if (viewModel.IsWeighted) {
            markerSettings.sizeGroupingField = 'sizeValue';
            markerSettings.sizeGroups = this._getPieRangeStops(pies);
            markerSettings.minSize = 20;
            markerSettings.maxSize = 60;
        }
        markerSettings.palette = this._pieArgumentColors;
        return markerSettings;
    }
    _getMarkerDataSource(pies, isWeighted) {
        var markerDataSource = [], attributes, rangeStops = [0, 1, 2];
        for (var name in pies) {
            attributes = pies[name].attributes;
            if (!isWeighted) {
                attributes.size = 20 + this._getRangeStopIndex(pies[name].attributes.sizeValue, rangeStops) * 10;
            }
            markerDataSource.push({
                coordinates: pies[name].coordinates,
                attributes: attributes
            });
        }
        return markerDataSource;
    }
    _getColorLegend(viewModel) {
        var that = this;
        var legend = super._getColorLegend(viewModel);
        if (legend) {
            legend.source.layer = 'pie';
            legend.customizeText = function (arg) {
                return that._pieArgumentDisplayTexts[arg.index];
            };
        }
        return legend;
    }
    _getWeightLegend(viewModel) {
        var that = this;
        if (!viewModel.IsWeighted) {
            return;
        }
        var legend = super._getWeightLegend(viewModel);
        if (legend) {
            legend.source.layer = 'pie';
            legend.customizeText = function (arg) {
                return that._dataController.formatValue(arg.start);
            };
        }
        return legend;
    }
    _getPieSegments() {
        var that = this, viewModel = this.options.ViewModel, pieSegments = [], pieSegment, filledValues = viewModel.Values && viewModel.Values.length > 0, getPieSegment = function (point) {
            return {
                clusterCount: point.pointsCount,
                lat: point.lat,
                lon: point.lon,
                latSel: point.latSel,
                lonSel: point.lonSel,
                dimensionsTooltipText: that._getDimensionsTooltipHtml(point.tooltipDimensions),
                measuresTooltipText: that._getMeasuresTooltipHtml(point.tooltipMeasures),
                value: point.value,
                valueDisplayText: point.valueDisplayText,
                argumentValue: point.argument,
                argumentDisplayText: point.argumentDisplayText,
                color: point.color,
                valueId: point.valueId,
                axisPoint: point.axisPoint
            };
        };
        that._pieUniqueArguments = [];
        that._pieArgumentDisplayTexts = [];
        that._pieArgumentColors = [];
        for (var i = 0; i < that._dataController.getCount(); i++) {
            if (viewModel.ArgumentDataId) {
                pieSegment = getPieSegment(that._dataController.getPoint(i));
                if (that._pieUniqueArguments.indexOf(pieSegment.argumentValue) === -1) {
                    that._fillArgumentParams(pieSegment);
                }
                pieSegments.push(pieSegment);
            }
            else {
                if (filledValues) {
                    for (var j = 0; j < viewModel.Values.length; j++) {
                        pieSegment = getPieSegment(that._dataController.getPoint(i, j));
                        if (that._pieUniqueArguments.indexOf(pieSegment.argumentValue) === -1 || i === 0) {
                            that._fillArgumentParams(pieSegment);
                        }
                        pieSegments.push(pieSegment);
                    }
                }
            }
        }
        return pieSegments;
    }
    _fillArgumentParams(pieSegment) {
        var that = this, color = pieSegment.color, dxColor = new color_1.default(color);
        this._pieUniqueArguments.push(pieSegment.argumentValue);
        this._pieArgumentDisplayTexts.push(pieSegment.argumentDisplayText);
        if (that.itemElementCustomColor && color) {
            var customElementColorEventArgs = {
                targetElement: [pieSegment.axisPoint],
                measureIds: pieSegment ? [pieSegment.valueId] : null,
                color: dxColor.toHex()
            };
            that.itemElementCustomColor.fire(this.getName(), customElementColorEventArgs);
            color = customElementColorEventArgs.color;
        }
        this._pieArgumentColors.push(color);
    }
    _getPiesData(pieSegments, viewModel) {
        var pies = {}, segment, key, tooltip, dimensionsTooltip, measuresTooltip;
        for (var i = 0; i < pieSegments.length; i++) {
            segment = pieSegments[i];
            key = string_1.format('{0};{1}', segment.lat, segment.lon);
            if (!pies.hasOwnProperty(key)) {
                dimensionsTooltip = segment.dimensionsTooltipText;
                measuresTooltip = segment.measuresTooltipText;
                pies[key] = {
                    coordinates: [segment.lon, segment.lat],
                    attributes: {
                        latSelection: segment.latSel,
                        lonSelection: segment.lonSel,
                        selected: this._isSelected([segment.latSel, segment.lonSel]),
                        values: this._getEmptyValues(this._pieUniqueArguments.length),
                        dimensionsTooltip: dimensionsTooltip,
                        measuresTooltip: measuresTooltip,
                        sizeValue: viewModel.IsWeighted ? 0 : segment.clusterCount > 1 ? 1 : 0
                    }
                };
                if (segment.clusterCount > 1) {
                    pies[key].attributes.tooltip = this._pointsCountTooltip(segment.clusterCount);
                }
            }
            for (var j = 0; j < pies[key].attributes.values.length; j++) {
                if (segment.argumentValue === this._pieUniqueArguments[j]) {
                    pies[key].attributes.values[j] = segment.value;
                }
            }
            if (viewModel.Values && viewModel.Values.length > 0) {
                if (segment.argumentValue && segment.value > 0) {
                    tooltip = this._getToolTip(segment.argumentDisplayText, segment.valueDisplayText);
                }
                else {
                    tooltip = undefined;
                }
            }
            else {
                tooltip = segment.argumentDisplayText;
            }
            if (tooltip) {
                if (pies[key].attributes.tooltip) {
                    pies[key].attributes.tooltip += '<br>' + tooltip;
                }
                else {
                    pies[key].attributes.tooltip = tooltip;
                }
            }
            if (viewModel.IsWeighted) {
                pies[key].attributes.sizeValue += segment.value;
            }
            else if (this._getPieSegmentCount(pies[key]) === 2) {
                pies[key].attributes.sizeValue++;
            }
        }
        return pies;
    }
    _getPieSegmentCount(pie) {
        var count = 0;
        for (var i = 0; i < pie.attributes.values.length; i++) {
            if (pie.attributes.values[i] > 0) {
                count++;
            }
        }
        return count;
    }
    _getEmptyValues(length) {
        var emptyValues = [];
        for (var j = 0; j < length; j++) {
            emptyValues.push(0);
        }
        return emptyValues;
    }
    _getPieRangeStops(pies) {
        var minSizeValue, maxSizeValue;
        for (var name in pies) {
            if (minSizeValue === undefined || pies[name].attributes.sizeValue < minSizeValue) {
                minSizeValue = pies[name].attributes.sizeValue;
            }
            if (maxSizeValue === undefined || pies[name].attributes.sizeValue > maxSizeValue) {
                maxSizeValue = pies[name].attributes.sizeValue;
            }
        }
        return this._updateRangeStops([0, 25, 50, 75], minSizeValue, maxSizeValue, true);
    }
    _getRangeStopIndex(value, rangeStops) {
        if (value < rangeStops[0]) {
            return 0;
        }
        for (var i = 0; i < rangeStops.length - 1; i++) {
            if (value >= rangeStops[i] && value < rangeStops[i + 1]) {
                return i;
            }
        }
        return rangeStops.length - 1;
    }
    _getDataPointMeasureIds() {
        var viewModel = this.options.ViewModel, measureIds = [];
        if (viewModel.ArgumentDataId != null && viewModel.Values.length > 0) {
            measureIds.push(viewModel.Values[0]);
        }
        else {
            viewModel.Values.forEach(value => {
                measureIds.push(value);
            });
        }
        return measureIds;
    }
    _elementCustomColor(eventArgs) {
        this.itemElementCustomColor.fire(this.getName(), eventArgs);
    }
}
exports.pieMapItem = pieMapItem;


/***/ }),

/***/ 27782:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stubItem = void 0;
const _base_item_1 = __webpack_require__(11439);
class stubItem extends _base_item_1.baseItem {
    constructor(container, options) {
        super(container, options);
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        var options = this.options;
        element.innerText = options.Type;
        return false;
    }
}
exports.stubItem = stubItem;


/***/ }),

/***/ 63022:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.tabPageItem = void 0;
const _group_item_1 = __webpack_require__(34008);
class tabPageItem extends _group_item_1.groupItem {
    constructor(container, options) {
        super(container, options);
    }
}
exports.tabPageItem = tabPageItem;


/***/ }),

/***/ 60948:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.textItem = void 0;
const $ = __webpack_require__(65311);
const _jquery_helpers_1 = __webpack_require__(59384);
const _render_helper_1 = __webpack_require__(39336);
const _base_item_1 = __webpack_require__(11439);
class textItem extends _base_item_1.baseItem {
    constructor(container, options) {
        super(container, options);
        this.div = undefined;
    }
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        var that = this;
        if (!changeExisting || !that.div) {
            that.div = $.fn.constructor('<div>');
            that.$textContent = $.fn.constructor(_render_helper_1.RenderHelper.wrapScrollable(that.div.get(0), 'auto', 'vertical'));
            that.$textContent.addClass('dx-dashboard-textbox-content');
            $.fn.constructor(element).append(that.div);
        }
        that._setContent();
        return false;
    }
    _getWidget() {
        return this.div && _jquery_helpers_1.wrapPublicElement(this.div[0]) || null;
    }
    _setContent() {
        var itemName = this.options.Name, sheetColor, preWrapper = $.fn.constructor('<pre>'), parsedHtml = $.fn.constructor('<div>'), originalHtmlText = this.options.ViewModel.Html;
        originalHtmlText = originalHtmlText.replace('<body', '<div class="' + itemName + '"').replace('</body>', '</div>');
        originalHtmlText = this._updateDocvariableValues(originalHtmlText);
        var contentDiv = $.fn.constructor(originalHtmlText).get().filter(c => c.className === itemName)[0];
        sheetColor = contentDiv && contentDiv.getAttribute('bgcolor');
        sheetColor && this.div.css({ 'backgroundColor': sheetColor });
        parsedHtml.html(originalHtmlText);
        preWrapper.addClass('dx-dashboard-textbox-content-pre-wrapper');
        preWrapper.attr('id', itemName);
        preWrapper.append(parsedHtml.find('style'));
        if (contentDiv)
            preWrapper.append(contentDiv.children);
        this.$textContent.empty();
        this.$textContent.append(preWrapper);
    }
    _updateDocvariableValues(htmlText) {
        return htmlText.replace(/02539CA4-7628-4F5D-9940-ED09C7EE7414\(([^()]+)\)/g, (placeholder) => {
            var match = placeholder.match(/\((.*?)\)/g);
            var id = match && match.length > 0 ? match[0].replace('(', '').replace(')', '') : null;
            if (id) {
                return this._getHtml(this._dataController.getDisplayText(id) || '');
            }
        });
    }
}
exports.textItem = textItem;


/***/ }),

/***/ 75327:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.treemapItem = void 0;
const tree_map_1 = __webpack_require__(46253);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _base_item_1 = __webpack_require__(11439);
const _interactivity_controller_1 = __webpack_require__(5828);
class treemapItem extends _base_item_1.baseItem {
    constructor(container, options) {
        super(container, options);
        this.itemElementCustomColor = _jquery_helpers_1.createJQueryCallbacks();
    }
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    dispose() {
        super.dispose();
        this.treemapViewer && this.treemapViewer.dispose();
    }
    _initializeData(newOptions) {
        super._initializeData(newOptions);
        if (this._dataController) {
            this._dataController.elementCustomColor = (eventArgs) => this._elementCustomColor(eventArgs);
        }
    }
    _clearSelectionUnsafe() {
        this.treemapViewer.clearSelection();
    }
    selectTupleUnsafe(tuple, state) {
        var that = this;
        tuple.forEach(tupleValue => {
            that._selectNodes(tupleValue.value, state);
        });
    }
    _setSelectionUnsafe(values) {
        super._setSelectionUnsafe(values);
        this.clearSelection();
        this._applySelection();
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        var options = this._getTreeMapViewerOptions();
        this._raiseItemWidgetOptionsPrepared(options);
        if (changeExisting && this.treemapViewer) {
            this.treemapViewer.option(options);
        }
        else {
            this.treemapViewer = new tree_map_1.default(element, options);
        }
        var selectedValues = this.options.SelectedValues;
        if (selectedValues)
            this.setSelection(selectedValues);
        return false;
    }
    updateContentStateUnsafe() {
        if (this._getCustomHoverEnabled()) {
            this.treemapViewer.option('hoverEnabled', true);
        }
    }
    _selectNodes(valueSet, state) {
        var that = this;
        that.treemapViewer.getRootNode().getAllNodes().forEach(node => {
            if (_utils_1.checkValuesAreEqual(valueSet, node.data.uniqueValue))
                node.select(state);
        });
    }
    _clickAction(tuple) {
        var newTuples = [], tupleValue = tuple[0], values = this._dataController.getChildrenNodesUniqueValues(tupleValue.value), isMultipleMode = this._canSetMultipleMasterFilter() || this.customSelectionMode === _interactivity_controller_1.dashboardSelectionMode.multiple, currentSelection = isMultipleMode && this.allowMultiselection ? this.getSelectedTuples().slice() : [], existingTuples = [];
        if (!isMultipleMode && values.length > 1)
            return;
        for (var i = 0; i < values.length; i++) {
            var newTuple = [{ axisName: tupleValue.axisName, value: values[i] }];
            if (_utils_1.checkArrayContainsTuple(currentSelection, newTuple) === undefined)
                newTuples.push(newTuple);
            else
                existingTuples.push(newTuple);
        }
        this.interactivityController.clickAction(newTuples.length > 0 ? newTuples : existingTuples);
    }
    _elementCustomColor(eventArgs) {
        this.itemElementCustomColor.fire(this.getName(), eventArgs);
    }
    _getTreeMapViewerOptions() {
        var that = this, viewModel = that.options.ViewModel, isSingleMasterFilterMode = this._canSetMasterFilter() && !this._canSetMultipleMasterFilter(), setLabel = function (node) {
            var label = that._dataController.getLabel(node, that._isEncodeHtml());
            if (label)
                node.label(label);
            else
                node.label(' ');
        }, options = {
            dataSource: that._dataController.getDataSource(),
            layoutAlgorithm: that._getLayoutAlgorithm(),
            layoutDirection: that._getLayoutDirection(),
            selectionMode: 'multiple',
            tile: {
                label: {
                    textOverflow: 'ellipsis'
                }
            },
            hoverEnabled: that.isInteractivityActionEnabled(),
            tooltip: {
                enabled: true,
                container: _utils_1.tooltipContainerSelector,
                customizeTooltip: function (arg) {
                    return {
                        text: that._dataController.getTooltip(arg.node, that._isEncodeHtml())
                    };
                }
            },
            onClick: function (e) {
                that._raiseItemClick(e.node.data);
            },
            onNodesRendering: function () {
                this.getRootNode().getAllNodes().forEach(setLabel);
            },
            group: {
                hoverEnabled: !isSingleMasterFilterMode,
                label: {
                    textOverflow: 'ellipsis'
                }
            }
        };
        return options;
    }
    _getLayoutAlgorithm() {
        var viewModel = this.options.ViewModel;
        switch (viewModel.LayoutAlgorithm) {
            case 'SliceAndDice':
                return this.width() >= this.height() ? 'sliceanddice' : 'rotatedsliceanddice';
            case 'Squarified':
                return 'squarified';
            case 'Striped':
                return 'strip';
        }
    }
    _getLayoutDirection() {
        var viewModel = this.options.ViewModel;
        switch (viewModel.LayoutDirection) {
            case 'BottomLeftToTopRight':
                return 'leftBottomRightTop';
            case 'BottomRightToTopLeft':
                return 'rightBottomLeftTop';
            case 'TopLeftToBottomRight':
                return 'leftTopRightBottom';
            case 'TopRightToBottomLeft':
                return 'rightTopLeftBottom';
        }
    }
    _getDataPoint(element) {
        var that = this;
        return {
            getValues: function () {
                return that._getElementInteractionValue(element);
            },
            getMeasureIds: function () {
                return that._getDataPointMeasureIds();
            },
            getDeltaIds: function () {
                return [];
            }
        };
    }
    _getElementInteractionValue(element) {
        if (!this.options.ViewModel.ProvideValuesAsArguments)
            return element.uniqueValue;
    }
    _getDataPointMeasureIds() {
        var viewModel = this.options.ViewModel, contentDescription = viewModel.ContentDescription, elementIndex = 0, measureIds = [];
        if (contentDescription != null && contentDescription.ElementSelectionEnabled)
            elementIndex = contentDescription.SelectedElementIndex;
        if (!viewModel.ProvideValuesAsArguments && viewModel.ValueDataMembers.length > 0) {
            measureIds.push(viewModel.ValueDataMembers[elementIndex]);
        }
        else {
            viewModel.ValueDataMembers.forEach(value => {
                measureIds.push(value);
            });
        }
        return measureIds;
    }
    _updateContentSizeUnsafe() {
        super._updateContentSizeUnsafe();
        if (!!this.treemapViewer) {
            this.treemapViewer.option('layoutAlgorithm', this._getLayoutAlgorithm());
            this.treemapViewer.render();
        }
    }
    _getWidget() {
        return this.treemapViewer;
    }
    _isMultiDataSupported() {
        return true;
    }
    _applySelectionUnsafe() {
        var that = this;
        that.getSelectedTuples().forEach(tuple => that.selectTuple(tuple, true));
    }
}
exports.treemapItem = treemapItem;


/***/ }),

/***/ 14727:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.widgetItemCore = void 0;
class widgetItemCore {
}
exports.widgetItemCore = widgetItemCore;


/***/ }),

/***/ 14352:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.widgetViewerItem = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _widgets_viewer_1 = __webpack_require__(70842);
const _base_item_1 = __webpack_require__(11439);
class widgetViewerItem extends _base_item_1.baseItem {
    constructor(container, options) {
        super(container, options);
    }
    _clearSelectionUnsafe() {
        this.widgetsViewer.clearSelections();
    }
    getInfoUnsafe() {
        return _jquery_helpers_1.deepExtend(super.getInfoUnsafe(), this.widgetsViewer.getSizeParams());
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        var that = this, options = that._getWidgetViewerOptions(), isInAsyncRendering = true;
        options.viewer.onAllItemsRenderComplete = function () {
            if (that.widgetsViewer) {
                afterRenderCallback();
            }
            else {
                isInAsyncRendering = false;
            }
        };
        if (changeExisting && that.widgetsViewer) {
            that.widgetsViewer.option(options);
        }
        else {
            that.widgetsViewer = that.createWidgetViewer(element, options);
        }
        return isInAsyncRendering;
    }
    createWidgetViewer(element, options) {
        return new _widgets_viewer_1.dxWidgetsViewer(element, options);
    }
    _getContainerPositionUnsafe() {
        var that = this, position = super._getContainerPositionUnsafe(), itemInfo = that.getInfo(), scrollSize = itemInfo && itemInfo.scroll && itemInfo.scroll.vertical ? itemInfo.scroll.size : 0;
        position.offsetX -= scrollSize;
        return position;
    }
    _getSpecificWidgetViewerOptions() {
        return {
            itemOptions: {
                encodeHtml: this._isEncodeHtml(),
                itemWidgetOptionsPrepared: (options) => this._raiseItemWidgetOptionsPrepared(options)
            }
        };
    }
    _getWidgetType() {
        return null;
    }
    _isHoverEnabled() {
        return this._selectionMode() !== 'none';
    }
    _configureHover(selectionValues) {
        var hoverEnabled = selectionValues !== null && this._isHoverEnabled() && _utils_1.allowSelectValue(selectionValues);
        return {
            hoverEnabled,
            cursor: hoverEnabled ? 'pointer' : 'default'
        };
    }
    _getWidgetViewerOptions() {
        let viewModel = this.options.ViewModel;
        let contentDescription = viewModel ? viewModel.ContentDescription : undefined;
        if (this.dataController)
            this.dataController.setSourceItemProperties = (sourceItem, element, properties) => this._setSourceItemProperties(sourceItem, element, properties);
        let commonOptions = {
            dataSource: this._getDataSource(),
            viewer: {
                redrawOnResize: false,
                onclick: this._getOnClickHandler(),
                onhover: this._getOnHoverHandler(),
                widgetType: this._getWidgetType(),
                method: contentDescription ? this._convertContentArrangementMode(contentDescription.ArrangementMode) : 'auto',
                count: contentDescription ? contentDescription.LineCount : 1,
                supportAnimation: this._supportAnimation(),
            }
        };
        var resultOptions = _jquery_helpers_1.deepExtend(commonOptions, this._getSpecificWidgetViewerOptions());
        this._ensureOptions(resultOptions);
        return resultOptions;
    }
    _supportAnimation() {
        return false;
    }
    _getDataSource() {
        if (this.dataController)
            return this.dataController.getDataSource();
    }
    _getElementInteractionValue(element, viewModel) {
        return element.tag;
    }
    _getOnClickHandler() {
        var that = this;
        return function (e) {
            that._raiseItemClick(e.item);
        };
    }
    _getOnHoverHandler() {
        var that = this;
        return function (e) {
            that._raiseItemHover(e.item, e.state);
        };
    }
    _convertContentArrangementMode(contentArrangementMode) {
        switch (contentArrangementMode) {
            case 'FixedColumnCount':
                return 'column';
            case 'FixedRowCount':
                return 'row';
            default:
                return 'auto';
        }
    }
    _resizeUnsafe() {
        super._resizeUnsafe();
        this.widgetsViewer.redraw();
    }
    updateContentStateUnsafe() {
        this.widgetsViewer.itemsList.forEach(viewer => {
            viewer.setHoverEnabledState(this._getCustomHoverEnabled());
        });
    }
    _setSourceItemProperties(sourceItem, elementModel, props) {
    }
    _isMultiDataSupported() {
        return true;
    }
    _ensureOptions(options) {
    }
    dispose() {
        super.dispose();
        if (this.widgetsViewer)
            this.widgetsViewer.dispose();
    }
}
exports.widgetViewerItem = widgetViewerItem;


/***/ }),

/***/ 78981:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColumnWidthCalculator = void 0;
const $ = __webpack_require__(65311);
var COLUMN_MIN_WIDTH = 10;
class ColumnWidthCalculator {
    get columnsResized() {
        return this._columnWidthsStorage && this._columnWidthsStorage.columnsResized ? true : false;
    }
    reset(viewModel, columnWidthMode) {
        this._resetWidthOptions(viewModel, columnWidthMode);
        this._columnWidthsStorage = undefined;
    }
    getLeftPrintingColumnIndex(hScrollPosition) {
        var that = this, columnIndex = 0, widthSum = 0;
        $.each(that._columnWidths, function (index, width) {
            if (hScrollPosition < widthSum + width / 2) {
                columnIndex = index;
                return false;
            }
            widthSum += width;
        });
        return columnIndex;
    }
    getClientWidthOptions() {
        var that = this, clientWidthOptions;
        if (that.widthOptions) {
            clientWidthOptions = {
                mode: that.widthOptions.mode,
                columnsOptions: []
            };
            $.each(that.widthOptions.columnsOptions, function (i, info) {
                clientWidthOptions.columnsOptions[i] = {
                    widthType: info.widthType,
                    weight: info.weight
                };
            });
        }
        return clientWidthOptions;
    }
    onDataLoaded(viewModel, columnWidthMode) {
        var that = this;
        this._resetWidthOptions(viewModel, columnWidthMode);
        if (that._columnWidthsStorage) {
            that.widthOptions.mode = that._columnWidthsStorage.mode;
            $.each(that.widthOptions.columnsOptions, function (i, info) {
                $.each(that._columnWidthsStorage.columnsOptions, function (j, storageWidthInfo) {
                    if (info.actualIndex === storageWidthInfo.actualIndex) {
                        info.widthType = storageWidthInfo.widthType;
                        info.weight = storageWidthInfo.weight;
                    }
                });
            });
        }
    }
    calcColumnsWidth(bestFitProvider, maxVisibleWidth, charWidth) {
        this._columnWidths = [];
        let widthInfo = this._createWidthInfo(bestFitProvider, charWidth);
        this._calcWidth(widthInfo, maxVisibleWidth);
        widthInfo.columnsOptions.forEach((columnInfo) => {
            this._columnWidths.push(columnInfo.actualWidth);
        });
        return this._columnWidths;
    }
    onColumnResized(leftColumnIndex, leftColumnWidth, rightColumnWidth) {
        this._unfixColumnWidth(leftColumnIndex);
        if (leftColumnWidth < COLUMN_MIN_WIDTH) {
            rightColumnWidth = leftColumnWidth + rightColumnWidth - COLUMN_MIN_WIDTH;
            leftColumnWidth = COLUMN_MIN_WIDTH;
        }
        else if (rightColumnWidth < COLUMN_MIN_WIDTH) {
            leftColumnWidth = leftColumnWidth + rightColumnWidth - COLUMN_MIN_WIDTH;
            rightColumnWidth = COLUMN_MIN_WIDTH;
        }
        this._columnWidths[leftColumnIndex] = leftColumnWidth;
        this._columnWidths[leftColumnIndex + 1] = rightColumnWidth;
        this._updateWeight(this.widthOptions.columnsOptions, this._columnWidths);
        this._updateColumnWidthsStorage();
        return this._columnWidths;
    }
    _unfixColumnWidth(leftColumnIndex) {
        var that = this, leftColumnInfo = that.widthOptions.columnsOptions[leftColumnIndex], rightColumnInfo = that.widthOptions.columnsOptions[leftColumnIndex + 1], unfixColumnWidth = function (info) {
            info.widthType = 'Weight';
        };
        that.widthOptions.mode = 'Manual';
        if (that._isAllColumnsFixed()) {
            $.each(that.widthOptions.columnsOptions, function (_, info) {
                unfixColumnWidth(info);
            });
        }
        else {
            unfixColumnWidth(leftColumnInfo);
            unfixColumnWidth(rightColumnInfo);
        }
    }
    _calcWidth(optionsInfo, maxVisibleWidth) {
        var actualWidthSum = 0, autoFitToContents = optionsInfo.mode === 'AutoFitToContents';
        $.each(optionsInfo.columnsOptions, function (_, info) {
            info.actualWidth = info.initialWidth;
            actualWidthSum += info.initialWidth;
        });
        if (actualWidthSum !== maxVisibleWidth && (!autoFitToContents || (autoFitToContents && actualWidthSum < maxVisibleWidth))) {
            actualWidthSum = this._scaleColumns(optionsInfo, false, maxVisibleWidth, actualWidthSum);
            if (actualWidthSum !== maxVisibleWidth) {
                this._scaleColumns(optionsInfo, true, maxVisibleWidth, actualWidthSum);
            }
        }
    }
    _scaleColumns(optionsInfo, isFixed, maxVisibleWidth, actualWidthSum) {
        var that = this, scalingColumnSum, targetScalingColumnSum, updatedActualWidthSum, nonScalingColumnSum = 0;
        $.each(optionsInfo.columnsOptions, function (_, columnInfo) {
            if (!that._isScaledColumns(optionsInfo.mode, columnInfo.widthType, isFixed)) {
                nonScalingColumnSum += columnInfo.actualWidth;
            }
        });
        scalingColumnSum = actualWidthSum - nonScalingColumnSum;
        targetScalingColumnSum = Math.abs(maxVisibleWidth - nonScalingColumnSum);
        updatedActualWidthSum = nonScalingColumnSum;
        $.each(optionsInfo.columnsOptions, function (_, columnInfo) {
            if (that._isScaledColumns(optionsInfo.mode, columnInfo.widthType, isFixed)) {
                var correctedWidth = Math.round(targetScalingColumnSum * columnInfo.actualWidth / scalingColumnSum), actualWidth = Math.max(correctedWidth, COLUMN_MIN_WIDTH);
                columnInfo.actualWidth = actualWidth;
                updatedActualWidthSum += actualWidth;
            }
        });
        return that._spreadRemainder(optionsInfo, isFixed, maxVisibleWidth, updatedActualWidthSum);
    }
    _spreadRemainder(optionsInfo, isFixed, maxVisibleWidth, actualWidthSum) {
        for (var i = optionsInfo.columnsOptions.length - 1; i >= 0; i--) {
            var columnInfo = optionsInfo.columnsOptions[i];
            var remainder = actualWidthSum - maxVisibleWidth;
            if (remainder === 0)
                return actualWidthSum;
            if (this._isScaledColumns(optionsInfo.mode, columnInfo.widthType, isFixed)) {
                columnInfo.actualWidth -= remainder;
                actualWidthSum -= remainder;
                if (columnInfo.actualWidth < COLUMN_MIN_WIDTH) {
                    actualWidthSum += Math.abs(columnInfo.actualWidth - COLUMN_MIN_WIDTH);
                    columnInfo.actualWidth = COLUMN_MIN_WIDTH;
                }
            }
        }
        return actualWidthSum;
    }
    _isScaledColumns(widthMode, widthType, isFixed) {
        var isFixedWidth = function (widthMode, widthType) {
            return widthMode !== 'Manual' || widthType != 'Weight';
        };
        return isFixedWidth(widthMode, widthType) === isFixed;
    }
    _resetWidthOptions(viewModel, columnWidthMode) {
        var that = this, columns = viewModel.Columns, isManualColumnWidthMode = columnWidthMode == 'Manual';
        that.widthOptions = {
            mode: columnWidthMode,
            columnsOptions: []
        };
        $.each(columns, function (i, column) {
            that.widthOptions.columnsOptions[i] = {
                actualIndex: column.ActualIndex,
                widthType: column.WidthType,
                weight: column.Weight,
                fixedWidth: column.FixedWidth
            };
        });
    }
    _createWidthInfo(bestFitProvider, charWidth) {
        var that = this, isManualMode = that.widthOptions.mode == 'Manual', widthInfo = {
            mode: that.widthOptions.mode,
            columnsOptions: []
        };
        $.each(that.widthOptions.columnsOptions, function (i, info) {
            var initialWidth = 0;
            if (!isManualMode || info.widthType === 'FitToContent') {
                initialWidth = bestFitProvider.getBestFit(i);
            }
            else if (isManualMode && info.widthType === 'FixedWidth') {
                initialWidth = Math.round(info.fixedWidth * charWidth);
            }
            else {
                initialWidth = info.weight;
            }
            widthInfo.columnsOptions.push({
                widthType: info.widthType,
                initialWidth: initialWidth,
                actualWidth: 0,
            });
        });
        return widthInfo;
    }
    _updateColumnWidthsStorage() {
        var that = this, found, res = {
            columnsResized: true,
            mode: that.widthOptions.mode,
            columnsOptions: []
        };
        for (var i = 0; i < that.widthOptions.columnsOptions.length; i++) {
            res.columnsOptions.push(that.widthOptions.columnsOptions[i]);
        }
        if (that._columnWidthsStorage) {
            for (var i = 0; i < that._columnWidthsStorage.columnsOptions.length; i++) {
                found = false;
                for (var j = 0; j < res.columnsOptions.length; j++) {
                    if (that._columnWidthsStorage.columnsOptions[i].actualIndex === res.columnsOptions[j].actualIndex) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    res.columnsOptions.push(that._columnWidthsStorage.columnsOptions[i]);
                }
            }
        }
        this._columnWidthsStorage = res;
    }
    _isAllColumnsFixed() {
        var that = this, allColumnsFixed = true;
        $.each(that.widthOptions.columnsOptions, function (_, info) {
            if (info.widthType === 'Weight') {
                allColumnsFixed = false;
                return false;
            }
        });
        return allColumnsFixed;
    }
    _updateWeight(columnsWidthInfo, columnWidths) {
        var widthSum = 0;
        var weightSum = 0;
        $.each(columnsWidthInfo, function (i, info) {
            if (info.widthType === 'Weight') {
                widthSum += columnWidths[i];
                weightSum += info.weight;
            }
        });
        $.each(columnsWidthInfo, function (i, info) {
            if (info.widthType === 'Weight') {
                info.weight = columnWidths[i] * weightSum / widthSum;
            }
        });
    }
}
exports.ColumnWidthCalculator = ColumnWidthCalculator;


/***/ }),

/***/ 47128:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dataGridItem = void 0;
const string_1 = __webpack_require__(36306);
const data_grid_1 = __webpack_require__(68408);
const _default_1 = __webpack_require__(65855);
const _common_1 = __webpack_require__(29009);
const _jquery_helpers_1 = __webpack_require__(59384);
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const _utils_1 = __webpack_require__(7590);
const _style_settings_provider_1 = __webpack_require__(76106);
const legacy_settings_1 = __webpack_require__(42649);
const _base_item_1 = __webpack_require__(11439);
const _column_width_calculator_1 = __webpack_require__(78981);
const _grid_column_painter_1 = __webpack_require__(29489);
const _grid_filter_parser_1 = __webpack_require__(42097);
const _grid_filter_patcher_1 = __webpack_require__(96202);
var MAX_CELL_COUNT = 2000, HEIGHT_DELTA_INDICATOR = 12, DATAGRID_CONTEXT_MENU_ICON = 'dashboard-datagriditem-resetcolumnwidths';
class dataGridItem extends _base_item_1.baseItem {
    constructor(container, options) {
        super(container, options);
        this._updateLocked = false;
        this._digits_string = '0123456789';
        this.clientFilterChanged = _jquery_helpers_1.createJQueryCallbacks();
        this.clientFilterStateChanged = _jquery_helpers_1.createJQueryCallbacks();
        this.TextAlignment = {
            Left: 'left',
            Right: 'right',
            Center: 'center'
        };
        this.DisplayMode = {
            Value: 'Value',
            Delta: 'Delta',
            Bar: 'Bar',
            Sparkline: 'Sparkline',
            Image: 'Image',
            Hyperlink: 'Hyperlink'
        };
        this.SummaryType = {
            Count: 'Count',
            Min: 'Min',
            Max: 'Max',
            Avg: 'Avg',
            Sum: 'Sum'
        };
        this.CssClasses = {
            wordWrap: 'dx-dashboard-word-wrap',
            gridAdaptiveCellValue: 'dx-adaptive-item-text'
        };
        this._bestFitProvider = {
            getBestFit: (index) => {
                let bestFit = 0;
                let columnViewModel = this.options.ViewModel.Columns[index];
                if (columnViewModel.DisplayMode === this.DisplayMode.Sparkline) {
                    let columnName = this.options.Name + columnViewModel.DataId;
                    let startValues = _jquery_helpers_1.$unwrap(this._dataGrid.element()).querySelectorAll('.' + columnName + '_startValue');
                    let endValues = _jquery_helpers_1.$unwrap(this._dataGrid.element()).querySelectorAll('.' + columnName + '_endValue');
                    let maxStartWidth = _grid_column_painter_1.GridColumnPainter.calcMaxWidth(startValues);
                    let maxEndWidth = _grid_column_painter_1.GridColumnPainter.calcMaxWidth(endValues);
                    bestFit = Math.round(this._getDefaultBestCharacterCount(index) * this.charWidth) + maxStartWidth + maxEndWidth;
                }
                else if (columnViewModel.DisplayMode === this.DisplayMode.Bar) {
                    bestFit = Math.round(this._getDefaultBestCharacterCount(index) * this.charWidth);
                }
                else {
                    bestFit = this._dataGrid.columnOption(index, 'bestFitWidth');
                }
                return bestFit;
            }
        };
        this._clientStateUpdateDebounced = _utils_1.debounce((widthOptions) => {
            this.gridWidthOptionsChanged && this.gridWidthOptionsChanged({
                widthOptions: widthOptions
            });
        }, 300);
        this._customizeViewOptions = (opts) => {
            opts.columnAutoWidth = true;
        };
        this.isSummaryFilterCollecting = false;
        this.canRaiseFilterChanged = true;
        this._calculator = new _column_width_calculator_1.ColumnWidthCalculator();
        this._styleSettingsProvider = new _style_settings_provider_1.styleSettingsProvider();
        this._styleSettingsProvider.initialize(this.options.ConditionalFormattingModel, this.options.ViewModel ? this.options.ViewModel.WordWrap : false);
    }
    get _captionToolbarSeparatorRequired() {
        return !this.hasParentContainer() || (this.hasParentContainer() && this.visualMode === 'caption');
    }
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    dispose() {
        super.dispose();
        this._dataGrid && this._dataGrid.dispose();
        this._styleSettingsProvider.dispose();
    }
    _clearSelectionUnsafe() {
        this._dataGrid.clearSelection();
    }
    _setSelectionUnsafe(values) {
        super._setSelectionUnsafe(values);
        this.clearSelection();
        if (values)
            this._setGridSelection(values);
    }
    _selectTuplesCore(tuples, updateTupleDelegate, state) {
        var that = this, currentSelection = that._dataGrid.getSelectedRowKeys(), values = [], processKeys = function (keys) {
            keys.forEach(key => {
                if (state) {
                    currentSelection.push(key);
                }
                else {
                    currentSelection.splice(currentSelection.indexOf(key), 1);
                }
            });
            return currentSelection;
        };
        tuples.forEach(tuple => {
            var res = updateTupleDelegate(tuple);
            if (res != null && res[0] != null) {
                values.push(res[0].value);
            }
        });
        that._setGridSelection(values, processKeys);
    }
    renderPartialContentUnsafe() {
        setTimeout(() => {
            this._dataGrid.refresh(true);
        });
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        if (!this.options)
            return false;
        let opts = this._getViewOptions();
        if (this.options.ViewModel && this.options.ViewModel.WordWrap) {
            element.classList.add(this.CssClasses.wordWrap);
        }
        else {
            element.classList.remove(this.CssClasses.wordWrap);
        }
        if (changeExisting && this._dataGrid) {
            if (this.resetClientStateOnUpdate) {
                this._resetColumnWidths();
            }
            _jquery_helpers_1.deepExtend(opts, this._getCommonOptions());
            this._raiseItemWidgetOptionsPrepared(opts);
            this.canRaiseFilterChanged = false;
            this._dataGrid.option('filterSyncEnabled', false);
            this._dataGrid.option(opts);
            this.canRaiseFilterChanged = true;
        }
        else {
            var options = Object.assign(Object.assign(Object.assign({}, opts), this._getCommonOptions()), { scrolling: { mode: 'virtual' } });
            this._raiseItemWidgetOptionsPrepared(options);
            this._dataGrid = new data_grid_1.default(element, options);
            this._updateCharWidth();
        }
        return false;
    }
    getInfoUnsafe() {
        var that = this, gridScroll = this._dataGrid.getScrollable(), isVScrollbarVisible = that._dataGrid.isScrollbarVisible(), isHScrollbarVisible = gridScroll.scrollWidth() > gridScroll.clientWidth(), scrollRowData = that._dataGrid.getTopVisibleRowData(), combinedFilter = that._dataGrid.getCombinedFilter(), visibleColumns = that._dataGrid.getVisibleColumns(), topPath = [], leftPath = [];
        if (scrollRowData) {
            that.options.ViewModel.RowIdentificatorDataMembers.forEach(dataMember => {
                var value = scrollRowData[dataMember];
                topPath.push(value);
            });
            leftPath.push(this._calculator.getLeftPrintingColumnIndex(gridScroll.scrollLeft()));
        }
        return _jquery_helpers_1.deepExtend(super.getInfoUnsafe(), {
            scroll: {
                horizontal: isHScrollbarVisible,
                vertical: isVScrollbarVisible,
                topPath: topPath,
                leftPath: leftPath
            },
            sortInfo: that._getSortInfo(),
            combinedFilter: combinedFilter !== undefined ? _grid_filter_parser_1.parseFilter(combinedFilter, visibleColumns, undefined, this.dateToString) : '',
            widthOptions: that._calculator.getClientWidthOptions()
        });
    }
    _getSortInfo() {
        var that = this, sortInfo = [];
        that._dataGrid.getVisibleColumns().forEach(info => {
            if (info.sortIndex != undefined && info.sortOrder != undefined) {
                sortInfo.push({
                    dataField: info.dataField,
                    sortIndex: info.sortIndex,
                    sortOrder: info.sortOrder
                });
            }
        });
        sortInfo.sort(function (a, b) {
            return a.sortIndex - b.sortIndex;
        });
        return sortInfo;
    }
    _initializeData(newOptions) {
        super._initializeData(newOptions);
        this.options.GridClientFilterState = newOptions.GridClientFilterState;
        var isResetColumnWidthsRequired = !!this.options && !!this.options.ViewModel && !!newOptions.ViewModel && this.options.ViewModel.ColumnWidthMode !== newOptions.ViewModel.ColumnWidthMode;
        if (isResetColumnWidthsRequired) {
            this._resetColumnWidths();
        }
        if (this._styleSettingsProvider) {
            this._styleSettingsProvider.initialize(this.options.ConditionalFormattingModel, this.options.ViewModel ? this.options.ViewModel.WordWrap : false);
        }
    }
    getValueItem(columnName, index) {
        return this._dataController.getValueItem(columnName, index);
    }
    _resetColumnWidths() {
        this._calculator.reset(this.options.ViewModel, this._getColumnWidthMode());
        let columnsWidth = this._calculator.calcColumnsWidth(this._bestFitProvider, (_jquery_helpers_1.$wrap(this._dataGrid.element())).width() - this._dataGrid.getScrollbarWidth(), this.charWidth);
        this._updateColumnsWidth(columnsWidth);
        this._applySelection();
    }
    _updateColumnsWidth(columnWidths) {
        this._beginResize();
        columnWidths.forEach((width, i) => {
            this._dataGrid.columnOption(i, this._getColumnWidthProperty(), width);
        });
        this._endResize();
    }
    _getColumnWidthProperty() {
        return 'visibleWidth';
    }
    _getColumnWidthMode() {
        return this.options.ViewModel.ColumnWidthMode;
    }
    _getDefaultBestCharacterCount(index) {
        return this.options.ViewModel.Columns[index].DefaultBestCharacterCount;
    }
    _beginResize() {
        this._updateLocked = true;
        this._dataGrid.beginUpdate();
    }
    _endResize() {
        this._dataGrid.endUpdate();
        this._updateLocked = false;
    }
    _updateCharWidth() {
        var span = document.createElement('span');
        span.classList.add('dx-widget');
        span.style.display = 'inline-block';
        span.innerText = this._digits_string;
        document.body.appendChild(span);
        this.charWidth = _jquery_helpers_1.getWidth(span) / 10;
        document.body.removeChild(span);
    }
    _onColumnsChanging(e) {
        var grid = e.component, columnResized = e.optionNames.width, gridResized = e.optionNames.visibleWidth && grid.columnOption(0, 'visibleWidth') !== undefined, viewModel = this.options.ViewModel;
        if (this._updateLocked || !viewModel || !viewModel.Columns ||
            viewModel.Columns.length == 0 || grid.columnCount() !== viewModel.Columns.length) {
            return;
        }
        if (grid.getController('data').isLoaded() && gridResized && !columnResized) {
            this._calculator.onDataLoaded(viewModel, this._getColumnWidthMode());
        }
        if (columnResized) {
            let leftColumnIndex = grid.getController('columnsResizer')._resizingInfo.currentColumnIndex;
            let leftColumnWidth = this._dataGrid.columnOption(leftColumnIndex, 'width');
            let rightColumnWidth = this._dataGrid.columnOption(leftColumnIndex + 1, 'width');
            let columnWidths = this._calculator.onColumnResized(leftColumnIndex, leftColumnWidth, rightColumnWidth);
            this._updateColumnsWidth(columnWidths);
            this._clientStateUpdateDebounced(this._calculator.widthOptions);
        }
        else if (gridResized) {
            let columnsWidth = this._calculator.calcColumnsWidth(this._bestFitProvider, _jquery_helpers_1.$wrap(this._dataGrid.element()).width() - this._dataGrid.getScrollbarWidth(), this.charWidth);
            this._updateColumnsWidth(columnsWidth);
        }
    }
    _getViewOptions() {
        var viewModel = this.options.ViewModel;
        if (!viewModel)
            return null;
        var dataSource = this._dataController.getDataSource();
        var columns = this._getColumns();
        var hasSlowColumns = columns.some((c) => { return c.displayMode == this.DisplayMode.Bar || c.displayMode == this.DisplayMode.Sparkline || c.displayMode == this.DisplayMode.Image; });
        var viewOptions = {
            filterValue: !this.options.GridClientFilterState ? null : this.options.GridClientFilterState,
            dataSource: dataSource,
            keyExpr: 'index',
            columns: columns,
            summary: {
                totalItems: this._getTotals(),
                calculateCustomSummary: (options) => {
                    if (options.summaryProcess == 'finalize') {
                        options.totalValue = this._dataController.getTotalValue(options.name);
                    }
                },
            },
            filterRow: { visible: viewModel.ShowFilterRow },
            rowAlternationEnabled: viewModel.EnableBandedRows,
            showRowLines: viewModel.ShowHorizontalLines,
            showColumnLines: viewModel.ShowVerticalLines,
            wordWrapEnabled: viewModel.WordWrap,
            showColumnHeaders: viewModel.ShowColumnHeaders,
            allowColumnResizing: this._getColumnWidthMode() !== 'AutoFitToContents',
        };
        this._customizeViewOptions(viewOptions);
        return viewOptions;
    }
    _getCommonOptions() {
        var that = this, commonOptions = {};
        commonOptions.paging = { enabled: false };
        commonOptions.sorting = {
            mode: 'multiple',
            ascendingText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.GridSortAscending),
            descendingText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.GridSortDescending),
            clearText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.GridClearSorting)
        };
        if (this.manualyResetClientState) {
            commonOptions.onContextMenuPreparing = (options) => {
                if (options.target === 'content' && this._calculator.columnsResized) {
                    options.items = [{
                            text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.GridResetColumnWidths),
                            icon: DATAGRID_CONTEXT_MENU_ICON,
                            onItemClick: () => {
                                this._resetColumnWidths();
                            }
                        }];
                }
            };
        }
        commonOptions.onContentReady = () => {
            that._styleSettingsProvider.draw();
            this._changeGridSparklineColumnsWidth(this.options && this.options.ViewModel && this.options.ViewModel.Columns);
        };
        commonOptions.noDataText = _localizer_1.localizer.getString(_localization_ids_1.localizationId.MessageGridHasNoData);
        commonOptions.onCellClick = (data) => {
            let columnType = data.column && data.column.type || null;
            if (data.rowType === 'data' && columnType !== 'adaptive')
                that._raiseItemClick(data);
        };
        commonOptions.onCellHoverChanged = function (args) {
            that._raiseItemHover(args, args.eventType == 'mouseover');
        };
        commonOptions['onColumnsChanging'] = (e) => this._onColumnsChanging(e);
        commonOptions.width = '100%';
        commonOptions.cellHintEnabled = true;
        commonOptions.loadPanel = { enabled: false };
        commonOptions.searchPanel = { visible: false };
        commonOptions.keyboardNavigation = { enabled: false };
        commonOptions.filterSyncEnabled = true;
        commonOptions.onOptionChanged = (e) => {
            if (e.name == 'filterValue') {
                this._raiseClientFilterChanged(e);
                this.clientFilterStateChanged.fire(e.value);
            }
        };
        commonOptions.onEditorPreparing = (e) => {
            if (e.parentType === 'filterRow')
                e.editorOptions.valueChangeEvent = 'change';
        };
        return commonOptions;
    }
    _getRowsValues(data) {
        var that = this, selectionMembers = that.options.ViewModel.SelectionDataMembers, visibleValues = [], value;
        selectionMembers.forEach(member => {
            value = that.getValueItem(member, data.index).getUniqueValue();
            if (value !== undefined) {
                visibleValues.push(value);
            }
        });
        return that._dataController.getSelectionValues(visibleValues);
    }
    _getSelectedRowIndices() {
        var selectedValues = this._getSelectedValues();
        return selectedValues ? this._dataController.getSelectedRowKeys(selectedValues) : [];
    }
    _getTotalCaptionTemplate(totalType) {
        if (totalType == 'Auto') {
            return _default_1.getLocalizationById('DashboardStringId.GridTotalAutoTemplate');
        }
        else {
            let id;
            switch (totalType) {
                case 'Min':
                    id = 'DashboardStringId.GridTotalTypeMin';
                    break;
                case 'Max':
                    id = 'DashboardStringId.GridTotalTypeMax';
                    break;
                case 'Avg':
                    id = 'DashboardStringId.GridTotalTypeAvg';
                    break;
                case 'Sum':
                    id = 'DashboardStringId.GridTotalTypeSum';
                    break;
                default:
                    id = 'DashboardStringId.GridTotalTypeCount';
                    break;
            }
            return string_1.format(_default_1.getLocalizationById('DashboardStringId.GridTotalTemplate'), _default_1.getLocalizationById(id), _default_1.getLocalizationById('DashboardStringId.GridTotalValueTemplate'));
        }
    }
    _getTotals() {
        var that = this, res = [], columns = that.options.ViewModel.Columns || [];
        columns.forEach(column => {
            var columnName = column.DataId, totalsViewModel = column.Totals || [];
            totalsViewModel.forEach(totalModel => {
                res.push({
                    name: totalModel.DataId,
                    showInColumn: columnName,
                    summaryType: 'custom',
                    displayFormat: this._getTotalCaptionTemplate(totalModel.TotalType),
                });
            });
        });
        return res;
    }
    _calculateCustomSummary(options) {
        options.totalValue = 0;
    }
    _getColumnName(columnViewModel) {
        let gridName = this.options.Name;
        let fieldName = columnViewModel.DataId;
        return gridName + fieldName;
    }
    calculateFilterExpressionHandler(column) {
        return (filterValue, selectedFilterOperation) => {
            const gridColumn = this._dataGrid.getVisibleColumns().filter(c => c.dataField === column.dataField)[0];
            const canPatchFilter = !this.isSummaryFilterCollecting && gridColumn.dataType === 'string' && _grid_filter_patcher_1.allowedStringOperations.some(x => x === selectedFilterOperation);
            if (canPatchFilter) {
                return (values) => {
                    const cellValue = values[gridColumn.dataField.toString()];
                    return _grid_filter_patcher_1.getCaseSensitiveFilterExpression(cellValue, filterValue, selectedFilterOperation);
                };
            }
            return gridColumn.defaultCalculateFilterExpression.call(gridColumn, filterValue, selectedFilterOperation);
        };
    }
    _getColumns() {
        var that = this, res = [], columns = that.options.ViewModel.Columns || [], popupContainer = this.options.controlContainer;
        columns.forEach((column, columnIndex) => {
            var fieldName = column.DataId, columnName = this._getColumnName(column), gridColumn = {
                allowEditing: false,
                dataField: fieldName,
                encodeHtml: that._isEncodeHtml(),
                caption: column.Caption,
                alignment: column.HorzAlignment === 'Right' ? that.TextAlignment.Right : that.TextAlignment.Left,
                allowFiltering: column.SupportClientFilter
            };
            if (legacy_settings_1.DashboardPrivateSettings.gridColumnFilterMode === 'CaseSensitive')
                gridColumn.calculateFilterExpression = this.calculateFilterExpressionHandler(gridColumn).bind(this);
            gridColumn[_common_1.DashboardDataIdField] = column.DataId;
            gridColumn.headerAlignment = that.TextAlignment.Left;
            gridColumn.displayMode = column.DisplayMode;
            switch (column.DisplayMode) {
                case that.DisplayMode.Value:
                    gridColumn.cellTemplate = (containerElement, options) => {
                        let container = _jquery_helpers_1.$unwrap(containerElement);
                        var valueItem = that.getValueItem(fieldName, options.data.index);
                        _grid_column_painter_1.GridColumnPainter.renderValue(container, valueItem.getData().displayText, that._isEncodeHtml());
                        let isDetail = that._isDetail(options.rowType);
                        let colummPrefix = isDetail ? columnName + '_detail' : columnName;
                        that._styleSettingsProvider.applyStyleSettings(container, popupContainer, valueItem.getStyleSettingsInfo(), false, colummPrefix, isDetail);
                        if (isDetail)
                            container.classList.add(that.CssClasses.gridAdaptiveCellValue);
                    };
                    gridColumn.resized = () => {
                        var visibleWidthReset = that._dataGrid && (that._dataGrid.columnOption(columnIndex, 'visibleWidth') === undefined);
                        if (!visibleWidthReset) {
                            that._styleSettingsProvider.updateBarWidth(columnName);
                            that._styleSettingsProvider.updateBarWidth(columnName + '_detail');
                        }
                    };
                    break;
                case that.DisplayMode.Delta:
                    gridColumn.cellTemplate = function (containerElement, options) {
                        let container = _jquery_helpers_1.$unwrap(containerElement);
                        var valueItem = that.getValueItem(fieldName, options.data.index);
                        let isDetail = that._isDetail(options.rowType);
                        _grid_column_painter_1.GridColumnPainter.renderDelta(container, valueItem.getData(), isDetail);
                        that._styleSettingsProvider.applyStyleSettings(container, popupContainer, valueItem.getStyleSettingsInfo(), true);
                        if (isDetail)
                            container.classList.add(that.CssClasses.gridAdaptiveCellValue);
                    };
                    break;
                case that.DisplayMode.Hyperlink:
                    gridColumn.cellTemplate = function (containerElement, options) {
                        let container = _jquery_helpers_1.$unwrap(containerElement);
                        var valueItem = that.getValueItem(fieldName, options.data.index), uri = fieldName ? string_1.format(!!column.UriPattern ? column.UriPattern : '{0}', valueItem.getUriValue()) : undefined;
                        _grid_column_painter_1.GridColumnPainter.renderHyperlink(container, uri, valueItem.getData().displayText, that._isEncodeHtml());
                        that._styleSettingsProvider.applyStyleSettings(container, popupContainer, valueItem.getStyleSettingsInfo(), false, columnName);
                        if (that._isDetail(options.rowType))
                            container.classList.add(that.CssClasses.gridAdaptiveCellValue);
                    };
                    break;
                case that.DisplayMode.Sparkline:
                    gridColumn.alignment = that.TextAlignment.Left;
                    gridColumn.cssClass = 'dx-dashboard-datagrid-column-visible-cell-content';
                    gridColumn.cellTemplate = (containerElement, options) => {
                        let container = _jquery_helpers_1.$unwrap(containerElement);
                        var valueItem = that.getValueItem(fieldName, options.data.index);
                        _grid_column_painter_1.GridColumnPainter.renderSparkline(columnName, column.ShowStartEndValues, container, valueItem.getData());
                        that._styleSettingsProvider.applyStyleSettings(container, popupContainer, valueItem.getStyleSettingsInfo(), true);
                        if (that._isDetail(options.rowType))
                            container.classList.add(that.CssClasses.gridAdaptiveCellValue);
                    };
                    gridColumn.resized = () => that._changeGridSparklineColumnsWidth([column]);
                    break;
                case that.DisplayMode.Bar:
                    gridColumn.alignment = that.TextAlignment.Left;
                    gridColumn.cssClass = 'dx-dashboard-datagrid-column-visible-cell-content';
                    gridColumn.cellTemplate = function (containerElement, options) {
                        let container = _jquery_helpers_1.$unwrap(containerElement);
                        var valueItem = that.getValueItem(fieldName, options.data.index);
                        var barData = valueItem.getData();
                        _grid_column_painter_1.GridColumnPainter.renderBar(columnName, container, barData.text, barData.normalizedValue, barData.zeroValue);
                        that._styleSettingsProvider.applyStyleSettings(container, popupContainer, valueItem.getStyleSettingsInfo(), true);
                        if (that._isDetail(options.rowType))
                            container.classList.add(that.CssClasses.gridAdaptiveCellValue);
                    };
                    gridColumn.resized = function () {
                        var gridRootElement = that._dataGrid ? _jquery_helpers_1.$unwrap(that._dataGrid.element()) : undefined;
                        if (gridRootElement) {
                            _grid_column_painter_1.GridColumnPainter.changeGridBarColumnsWidth(gridRootElement, columnName);
                        }
                    };
                    break;
                case that.DisplayMode.Image:
                    gridColumn.cellTemplate = function (containerElement, options) {
                        let container = _jquery_helpers_1.$unwrap(containerElement);
                        var valueItem = that.getValueItem(fieldName, options.data.index);
                        _grid_column_painter_1.GridColumnPainter.renderImage(container, valueItem.getData());
                        that._styleSettingsProvider.applyStyleSettings(container, popupContainer, valueItem.getStyleSettingsInfo(), true);
                        if (that._isDetail(options.rowType))
                            container.classList.add(that.CssClasses.gridAdaptiveCellValue);
                    };
                    break;
            }
            res.push(gridColumn);
        });
        return res;
    }
    _changeGridSparklineColumnsWidth(columnViewModels) {
        if (columnViewModels) {
            let gridRootElement = this._dataGrid ? _jquery_helpers_1.$unwrap(this._dataGrid.element()) : undefined;
            if (gridRootElement) {
                let sparklineViewModels = columnViewModels.filter(columnViewModel => columnViewModel.DisplayMode === this.DisplayMode.Sparkline);
                sparklineViewModels.forEach(columnViewModel => {
                    _grid_column_painter_1.GridColumnPainter.changeGridSparklineColumnsWidth(gridRootElement, this._getColumnName(columnViewModel));
                });
            }
        }
    }
    _isDetail(rowType) {
        return rowType === 'detailAdaptive';
    }
    _applySelectionUnsafe() {
        this.setSelection(this.options.SelectedValues);
    }
    _resizeUnsafe() {
        super._resizeUnsafe();
        this._dataGrid.resize();
    }
    _getDataPoint(element) {
        var that = this;
        return {
            getValues: function (name) {
                return (name === 'Default') ? that._dataController.getDimensionValues(element.data.index) : null;
            },
            getDeltaIds: function () {
                return that._getColumnDataIdsByColumnType('Delta');
            },
            getMeasureIds: function () {
                return that._getColumnDataIdsByColumnType('Measure');
            },
            getSelectionValues: function (name) {
                return that._getRowsValues(element.data);
            }
        };
    }
    _getColumnsByColumnType(columnType) {
        var columns = this.options.ViewModel.Columns, foundColumns = [];
        columns.forEach(column => {
            if (column.ColumnType === columnType)
                foundColumns.push(column);
        });
        return foundColumns;
    }
    _getColumnDataIdsByColumnType(columnType) {
        var that = this, columns = that._getColumnsByColumnType(columnType), ids = [];
        columns.forEach(column => {
            ids.push(column.DataId);
        });
        return ids;
    }
    _getElementInteractionValue(element, viewModel) {
        return this._getRowsValues(element.data);
    }
    _getWidget() {
        return this._dataGrid;
    }
    _setGridSelection(values, keyProcessingDelegate) {
        if (values && values.length > 0) {
            var that = this, selectionKeys = that._dataController.getSelectedRowKeys(values);
            that._selectRows(keyProcessingDelegate ? keyProcessingDelegate(selectionKeys) : selectionKeys);
        }
    }
    _selectRows(data) {
        if (this._dataGrid) {
            this._dataGrid.selectRows(data);
        }
    }
    _isMultiDataSupported() {
        return true;
    }
    _raiseClientFilterChanged(e) {
        if (this.canRaiseFilterChanged) {
            let visibleColumns = this._dataGrid.getVisibleColumns();
            this.isSummaryFilterCollecting = true;
            let combinedFilter = this._dataGrid.getCombinedFilter();
            this.isSummaryFilterCollecting = false;
            let filter = combinedFilter !== undefined ? _grid_filter_parser_1.parseFilter(combinedFilter, visibleColumns, undefined, this.dateToString) : '';
            this.clientFilterChanged.fire(filter);
        }
    }
}
exports.dataGridItem = dataGridItem;


/***/ }),

/***/ 29489:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GridColumnPainter = void 0;
const string_1 = __webpack_require__(36306);
__webpack_require__(21420);
const bullet_1 = __webpack_require__(21420);
__webpack_require__(37827);
const sparkline_1 = __webpack_require__(37827);
const $ = __webpack_require__(65311);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _z_index_1 = __webpack_require__(56330);
const _delta_indicator_1 = __webpack_require__(75629);
const _simple_indicator_1 = __webpack_require__(39801);
const _render_helper_1 = __webpack_require__(39336);
class GridColumnPainter {
    static renderDelta(parentContainer, deltaValue, isDetail) {
        let container = document.createElement('div');
        container.classList.add(this.CssClasses.flexDeltaParent);
        container.classList.add(_delta_indicator_1.DeltaIndicator.getIndicatorColorType(deltaValue.type, deltaValue.hasPositiveMeaning, deltaValue.text.useDefaultColor));
        if (!isDetail) {
            container.classList.add(this.CssClasses.rightAlignment);
        }
        parentContainer.appendChild(container);
        let textDiv = document.createElement('div');
        textDiv.classList.add(this.CssClasses.truncated);
        textDiv.innerText = deltaValue.text.value;
        container.appendChild(textDiv);
        let indicatorDiv = document.createElement('div');
        indicatorDiv.classList.add(this.CssClasses.fixed);
        indicatorDiv.classList.add(this.CssClasses.deltaIndicator);
        indicatorDiv.innerHTML = _simple_indicator_1.SimpleIndicator.getIndicator(deltaValue.type, deltaValue.hasPositiveMeaning) || '';
        container.appendChild(indicatorDiv);
    }
    static renderSparkline(name, showStartEndValues, parentContainer, sparklineData) {
        let container = document.createElement('div');
        container.classList.add(name + '_sparkline-container');
        container.classList.add(this.CssClasses.flexParent);
        parentContainer.appendChild(container);
        let sparklineDiv = document.createElement('div');
        sparklineDiv.classList.add(name + '_sparkline');
        container.appendChild(sparklineDiv);
        if (showStartEndValues) {
            let startDiv = document.createElement('div');
            startDiv.classList.add(this.CssClasses.sparklineStartValue);
            startDiv.classList.add(name + '_startValue');
            startDiv.innerText = sparklineData.startText;
            $.fn.constructor(startDiv).prependTo(container);
            let endDiv = document.createElement('div');
            endDiv.classList.add(name + '_endValue');
            endDiv.innerText = sparklineData.endText;
            container.appendChild(endDiv);
        }
        _jquery_helpers_1.extend(sparklineData.sparkline, {
            size: {
                height: 20,
                width: 10
            },
            pointSize: 1
        });
        new sparkline_1.default(sparklineDiv, sparklineData.sparkline);
    }
    static renderBar(columnName, parentContainer, tooltipText, value, zeroValue) {
        let zerovalue = zeroValue;
        let barContainer = document.createElement('div');
        barContainer.classList.add(this.CssClasses.flexParent);
        barContainer.classList.add(columnName + '_bar-container');
        parentContainer.appendChild(barContainer);
        let barDiv = document.createElement('div');
        barDiv.classList.add(columnName + '_bar');
        barContainer.appendChild(barDiv);
        new bullet_1.default(barDiv, {
            startScaleValue: -zerovalue,
            endScaleValue: 1 - zerovalue,
            value: value,
            showZeroLevel: value !== 0 && zerovalue !== 0 && zerovalue !== 1,
            showTarget: false,
            onIncidentOccurred: _render_helper_1.RenderHelper.widgetIncidentOccurred,
            tooltip: {
                container: _utils_1.tooltipContainerSelector,
                customizeTooltip: function () {
                    return {
                        text: tooltipText
                    };
                },
                zIndex: _z_index_1.zIndex.dashboardItemTooltips
            },
            size: {
                height: 20,
                width: 10
            }
        });
    }
    static renderImage(container, imageData) {
        _utils_1.renderImage(container, imageData);
    }
    static renderHyperlink(container, uri, displayValue, isEncodeHtml) {
        if (uri) {
            let a = document.createElement('a');
            a.target = '_blank';
            a.onclick = (event) => event.stopPropagation();
            a.rel = 'noopener noreferrer';
            a.href = _utils_1.isVulnerable(uri) ? '' : uri;
            _render_helper_1.RenderHelper.html(a, displayValue, isEncodeHtml);
            container.appendChild(a);
        }
        else {
            _render_helper_1.RenderHelper.html(container, displayValue, isEncodeHtml);
        }
    }
    static renderValue(container, text, isEncodeHtml) {
        if (string_1.isEmpty(text)) {
            _render_helper_1.RenderHelper.html(container, '&nbsp;', false);
        }
        else {
            _render_helper_1.RenderHelper.html(container, text, isEncodeHtml);
        }
    }
    static changeGridSparklineColumnsWidth(gridRootElement, columnName) {
        var that = this, startValues = gridRootElement.querySelectorAll('.' + columnName + '_startValue'), endValues = gridRootElement.querySelectorAll('.' + columnName + '_endValue'), maxStartWidth = that.calcMaxWidth(startValues), maxEndWidth = that.calcMaxWidth(endValues), sparklineDivs = gridRootElement.querySelectorAll('.' + columnName + '_sparkline'), firstsparklineContainer = $.fn.constructor(gridRootElement.querySelectorAll('.' + columnName + '_sparkline-container')).filter(':visible').get(0), columnWidth = firstsparklineContainer ? $.fn.constructor(firstsparklineContainer).width() : 0, sparklineWidth = columnWidth - (maxStartWidth + maxEndWidth);
        if (sparklineWidth >= 0) {
            $.fn.constructor(startValues).width(maxStartWidth);
            $.fn.constructor(endValues).width(maxEndWidth);
            $.fn.constructor(startValues).show();
            $.fn.constructor(endValues).show();
            for (let i = 0; i < sparklineDivs.length; i++) {
                let sparklineContainer = sparklineDivs[i];
                let sparkline = sparkline_1.default.getInstance(sparklineContainer);
                sparkline.option('size', { width: sparklineWidth });
                $.fn.constructor(sparklineContainer).show();
            }
        }
        else {
            sparklineDivs.forEach(sparklineDiv => {
                $.fn.constructor(sparklineDiv).hide();
            });
            if (columnWidth >= maxStartWidth + maxEndWidth) {
                $.fn.constructor(startValues).show();
            }
            else {
                $.fn.constructor(startValues).hide();
                if (columnWidth >= maxEndWidth) {
                    $.fn.constructor(endValues).show();
                }
                else {
                    $.fn.constructor(endValues).hide();
                }
            }
        }
    }
    static calcMaxWidth(values) {
        var maxWidth = 0;
        var nodeLen = values.length;
        for (let i = 0; i < nodeLen; ++i) {
            maxWidth = Math.max(maxWidth, values[i].offsetWidth);
        }
        return maxWidth;
    }
    static changeGridBarColumnsWidth(gridRootElement, columnName) {
        var that = this, bars = gridRootElement.querySelectorAll('.' + columnName + '_bar'), firstBarContainer = $.fn.constructor(gridRootElement.querySelectorAll('.' + columnName + '_bar-container')).filter(':visible').get(0), columnWidth = firstBarContainer ? $.fn.constructor(firstBarContainer).width() : 0;
        for (let i = 0; i < bars.length; ++i) {
            let barContainer = bars[i];
            if (columnWidth > 0) {
                $.fn.constructor(barContainer).show();
                let bullet = bullet_1.default.getInstance(barContainer);
                bullet.option('size', {
                    width: columnWidth
                });
            }
            else {
                $.fn.constructor(barContainer).hide();
            }
        }
    }
}
exports.GridColumnPainter = GridColumnPainter;
GridColumnPainter.CssClasses = {
    flexParent: 'dx-dashboard-flex-parent',
    flexDeltaParent: 'dx-dashboard-flex-delta-parent',
    sparklineStartValue: 'dx-dashboard-sparkline-start-value',
    deltaIndicator: 'dx-dashboard-delta-indicator',
    truncated: 'dx-dashboard-truncated',
    fixed: 'dx-dashboard-fixed',
    rightAlignment: 'dx-dashboard-flex-right'
};


/***/ }),

/***/ 42097:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseFilter = void 0;
const _utils_1 = __webpack_require__(7590);
function parseFilter(filterItems, columns, columnIndex, dateToString) {
    var resultFilterString = '';
    if (_utils_1.type.isFunction(filterItems[0])) {
        var exprColumnIndex = columnIndex === undefined ? filterItems.columnIndex : columnIndex;
        return _parseFilterOperatorPart(filterItems, columns, exprColumnIndex, dateToString);
    }
    else {
        for (var i = 0; i < filterItems.length; i++) {
            var filterItem = filterItems[i];
            resultFilterString += _utils_1.type.isString(filterItem) ? ' ' + filterItem + ' ' : parseFilter(filterItem, columns, filterItems.columnIndex, dateToString);
        }
    }
    return '(' + resultFilterString + ')';
}
exports.parseFilter = parseFilter;
function _parseFilterOperatorPart(filterItemPart, columns, exprColumnIndex, dateToString) {
    var partOperator = filterItemPart[1], value = filterItemPart[2], column = columns[exprColumnIndex], dataField = column.dataField, unaryOperator = 'not', binaryOperators = [
        'contains',
        'startswith',
        'endswith'
    ], format = function (fmtstr, ...argArray) {
        var args = Array.prototype.slice.call(arguments, 1);
        return fmtstr.replace(/\{(\d+)\}/g, function (match, index) {
            return args[index];
        });
    };
    if (partOperator.indexOf(unaryOperator) != -1) {
        filterItemPart[1] = partOperator.replace(unaryOperator, '').trim();
        var builder = _parseFilterOperatorPart(filterItemPart, columns, exprColumnIndex, dateToString);
        return format('{0}({1})', unaryOperator, builder);
    }
    if (!_utils_1.type.isDefined(value))
        value = null;
    if (binaryOperators.indexOf(partOperator) != -1)
        return format("{1}([{0}], '{2}')", dataField, partOperator, value);
    if (value === null || _utils_1.type.isNumeric(value) || _utils_1.type.isBoolean(value))
        return format('[{0}] {1} {2}', dataField, partOperator, value);
    if (column.dataType === 'date')
        return format('[{0}] {1} #{2}#', dataField, partOperator, dateToString(value));
    return format("[{0}] {1} '{2}'", dataField, partOperator, value);
}


/***/ }),

/***/ 96202:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCaseSensitiveFilterExpression = exports.allowedStringOperations = void 0;
exports.allowedStringOperations = ['contains', 'notcontains', 'startswith', 'endswith', '=', '<>'];
function getCaseSensitiveFilterExpression(cellValue, filterValue, filterOperation) {
    if (typeof cellValue !== 'string')
        return false;
    switch (filterOperation) {
        case 'contains':
            return cellValue.indexOf(filterValue) > -1;
        case 'notcontains':
            return cellValue.indexOf(filterValue) === -1;
        case 'startswith':
            return cellValue.startsWith(filterValue);
        case 'endswith':
            return cellValue.endsWith(filterValue);
        case '=':
            return cellValue === filterValue;
        case '<>':
            return cellValue !== filterValue;
    }
}
exports.getCaseSensitiveFilterExpression = getCaseSensitiveFilterExpression;


/***/ }),

/***/ 56856:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ItemLoadingElement = void 0;
const ui_overlay_1 = __webpack_require__(71996);
__webpack_require__(70655);
const $ = __webpack_require__(65311);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const _z_index_1 = __webpack_require__(56330);
class ItemLoadingElement {
    show(container) {
        if (!this._overlay) {
            var overlayDiv = document.createElement('div');
            var contentTemplate = document.createElement('div');
            contentTemplate.classList.add('dx-dashboard-item-loading-panel');
            var h1 = document.createElement('h1');
            h1.innerText = _default_1.getLocalizationById('DashboardStringId.MessageLoading');
            contentTemplate.appendChild(h1);
            this._overlay = new ui_overlay_1.default(overlayDiv, {
                shading: true,
                animation: {
                    show: { type: 'fade', duration: 150, from: 0, to: 1, delay: 150 },
                    hide: { type: 'fade', duration: 150, to: 0, delay: 150 }
                },
                width: 'auto',
                height: 'auto',
                target: container,
                container: container,
                contentTemplate: contentTemplate,
                hideOnOutsideClick: false,
                propagateOutsideClick: true,
                position: {
                    boundary: container,
                    my: 'bottom right',
                    at: 'bottom right',
                    offset: '-10 -10',
                    of: container
                },
                onShowing: (e) => {
                    let wrapper = _jquery_helpers_1.$unwrap(e.component._$wrapper);
                    wrapper.style.zIndex = (_z_index_1.zIndex.dashboardItemShield - 2).toString();
                    let overlayContent = wrapper.querySelector('.dx-overlay-content');
                    if (overlayContent) {
                        overlayContent.style.zIndex = (_z_index_1.zIndex.dashboardItemShield - 1).toString();
                    }
                },
                wrapperAttr: {
                    class: 'dx-dashboard-loading-indicator'
                }
            });
            overlayDiv.style.zIndex = _z_index_1.zIndex.dashboardItemShield.toString();
            $.fn.constructor(container).prepend(overlayDiv);
        }
        this._overlay.show();
    }
    hide() {
        if (this._overlay) {
            this._overlay.hide();
        }
    }
    resize() {
        if (this._overlay) {
            this._overlay.repaint();
        }
    }
}
exports.ItemLoadingElement = ItemLoadingElement;


/***/ }),

/***/ 39190:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.filterElementBaseItem = void 0;
const array_store_1 = __webpack_require__(79322);
const data_source_1 = __webpack_require__(47545);
const _filter_element_data_controller_1 = __webpack_require__(99909);
const _base_item_1 = __webpack_require__(11439);
const _interactivity_controller_1 = __webpack_require__(5828);
var PAGE_SIZE = 100;
class filterElementBaseItem extends _base_item_1.baseItem {
    constructor(container, options) {
        super(container, options);
    }
    dispose() {
        super.dispose();
        this.widget && this.widget.dispose();
    }
    _setSelectionUnsafe(values) {
        super._setSelectionUnsafe(values);
        this.filterDataController.update(values, this._isEncodeHtml(), true);
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        var opts = this._getOptions(true);
        this._raiseItemWidgetOptionsPrepared(opts);
        this._lock();
        try {
            if (changeExisting && this.widget && this.widget.NAME === this._getWidgetName()) {
                this.widget.option(opts);
            }
            else {
                var div = this._createWidgetDiv();
                element.innerHTML = '';
                element.appendChild(div);
                this.widget = this._createWidget(div, opts);
            }
        }
        finally {
            this._unlock();
        }
        return false;
    }
    _createWidgetDiv() {
        return document.createElement('div');
    }
    _initializeData(newOptions) {
        super._initializeData(newOptions);
        if (this.options) {
            this.options.allowExport = false;
        }
    }
    get allowMultiselection() {
        return true;
    }
    set allowMultiselection(value) {
    }
    get isMultiSelectable() {
        return this.dataController ? this.dataController.isMultiselectable() : false;
    }
    _isPaneEmpty() {
        return super._isPaneEmpty() || !this.hasCaption();
    }
    updateInteractivityOptions() {
        this.interactivityController.setOptions(this.isMultiSelectable ? _interactivity_controller_1.dashboardSelectionMode.multiple : _interactivity_controller_1.dashboardSelectionMode.single);
        this.interactivityController._allowSelectTuple = function (tuple) { return true; };
    }
    getDataSource() {
        return new data_source_1.default({
            paginate: true,
            pageSize: PAGE_SIZE,
            requireTotalCount: true,
            store: new array_store_1.default({
                data: this.filterDataController.dataSource,
                key: _filter_element_data_controller_1.KEY_EXPR
            }),
            searchOperation: 'contains',
            searchExpr: this._getDisplayExpr()
        });
    }
    get _enableSearch() {
        return !!this.options && !!this.options.ViewModel && this.options.ViewModel.EnableSearch;
    }
    get _isBottomFloatingToolbarPosition() {
        return true;
    }
    _isBorderRequired() {
        return false;
    }
    _getDisplayExpr() {
        return this._isEncodeHtml() ? 'text' : 'html';
    }
    _getOptions(includeActions) {
        return {};
    }
    _hasToggleSelectionModeButton() {
        return false;
    }
    _resizeUnsafe() {
        super._resizeUnsafe();
        if (this.widget.updateDimensions) {
            this.widget.updateDimensions();
        }
    }
    _raiseItemClick(elements) {
        if (this._isLocked()) {
            return;
        }
        var axisName = this._getAxisNames()[0], newSelectedValues = this.filterDataController.getInteractionValues(elements, this._getSelectedValues()), tuples = !newSelectedValues ? null : newSelectedValues.map(v => [{ axisName: axisName, value: v }]);
        this.interactivityController.clickAction(tuples, !newSelectedValues);
    }
    _mustSelectingFired(values) {
        return true;
    }
    _isUpdating(widget) {
        return !widget || widget._updateLockCount > 0;
    }
    _applySelectionUnsafe() {
        var selectedValues = this._getSelectedValues();
        if (!!selectedValues) {
            this.setSelection(selectedValues);
        }
    }
    _selectTuples(tuplesToSelect, unaffectedTuples, isSelect) {
    }
    _getWidget() {
        return this.widget;
    }
    _getWidgetName() {
        return '';
    }
    _createWidget(div, opts) {
        return null;
    }
}
exports.filterElementBaseItem = filterElementBaseItem;


/***/ }),

/***/ 39340:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.comboBoxFilterElement = exports.cssComboBoxClassNames = void 0;
const string_1 = __webpack_require__(36306);
const select_box_1 = __webpack_require__(76420);
const tag_box_1 = __webpack_require__(8520);
const _filter_element_data_controller_1 = __webpack_require__(99909);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const _render_helper_1 = __webpack_require__(39336);
const _base_element_1 = __webpack_require__(39190);
var MULTITAG_COUNT = 9;
exports.cssComboBoxClassNames = {
    item: 'dx-dashboard-combobox-filter-item',
    multiText: 'dx-dashboard-filter-item-multitext',
    margins: 'dx-dashboard-combobox-margins'
};
class comboBoxFilterElement extends _base_element_1.filterElementBaseItem {
    constructor(container, options) {
        super(container, options);
        this._isFixedHeight = true;
    }
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    get filterDataController() { return this._dataController; }
    get _shouldApplySelectionOnInitialRender() {
        return false;
    }
    _setSelectionUnsafe(values) {
        super._setSelectionUnsafe(values);
        this._lock();
        try {
            this.widget.option('value', this._getSelectedKeys());
        }
        finally {
            this._unlock();
        }
    }
    _clearSelectionUnsafe() {
        if (!!this.options.useNeutralFilterMode) {
            this._lock();
            try {
                this.widget.option('value', null);
            }
            finally {
                this._unlock();
            }
        }
    }
    get _isBottomFloatingToolbarPosition() {
        return false;
    }
    get _allowPreview() {
        return true;
    }
    _getWidgetName() {
        return this.isMultiSelectable ? 'dxTagBox' : 'dxSelectBox';
    }
    _createWidgetDiv() {
        let div = super._createWidgetDiv();
        if (this.visualMode === 'content')
            div.classList.add(exports.cssComboBoxClassNames.margins);
        return div;
    }
    _createWidget(div, opts) {
        return this.isMultiSelectable ? new tag_box_1.default(div, opts) : new select_box_1.default(div, opts);
    }
    _getMinContentHeight() {
        var element = document.createElement('div');
        this._createWidget(element, this._getOptions(false));
        return _render_helper_1.RenderHelper.getElementBox(element).height;
    }
    _generateInnerBorderClassesUnsafe(element) {
        var classes = super._generateInnerBorderClassesUnsafe(element);
        if (!this._isPaneEmpty()) {
            classes.push(exports.cssComboBoxClassNames.item);
        }
        if (element) {
            if (this._isPaneEmpty()) {
                element.classList.remove(exports.cssComboBoxClassNames.item);
            }
            else {
                element.classList.add(exports.cssComboBoxClassNames.item);
            }
        }
        return classes;
    }
    _getSelectedKeys() {
        const selection = this._dataController.selection;
        if (this.isMultiSelectable) {
            return selection.map(this._dataController.getDataSourceItemKey);
        }
        else {
            return selection && selection.length ? this._dataController.getDataSourceItemKey(selection[0]) : null;
        }
    }
    _getOptions(includeActions) {
        let itemTemplate = (item, _, element) => {
            var node = _jquery_helpers_1.$unwrap(element);
            var expr = this._getDisplayExpr();
            if (expr === 'html') {
                node.innerHTML = item[expr];
            }
            else {
                node.innerText = item[expr];
            }
        };
        let multiTagPreparingHandler = (args) => {
            if (this._dataController.dataSource.length === args.selectedItems.length)
                args.text = _localizer_1.ALL_ELEMENT.text;
            else if (args.selectedItems.length < MULTITAG_COUNT)
                args.cancel = true;
            else
                args.text = string_1.format(_default_1.getLocalizationById('DashboardWebStringId.FilterElementCheckedComboBoxSelected'), args.selectedItems.length);
        };
        let tagBoxSelectionChangedHandler = e => {
            this._raiseItemClick(e.removedItems.length > 0 ? e.removedItems : e.addedItems);
        };
        let selectBoxValueChangedHandler = e => {
            if (e.value != null) {
                const selectedItem = this._dataController.getDataSourceItemByKey(e.value);
                this._raiseItemClick([selectedItem]);
            }
        };
        let options = {
            dataSource: this.getDataSource(),
            displayExpr: this._getDisplayExpr(),
            valueExpr: _filter_element_data_controller_1.KEY_EXPR,
            value: this._getSelectedKeys(),
            placeholder: _localizer_1.localizer.getString(_localization_ids_1.localizationId.FilterElementRadioComboBoxNoDataCaption),
            encodeNoDataText: true,
            noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),
            itemTemplate,
            onMultiTagPreparing: multiTagPreparingHandler,
            maxDisplayedTags: 1,
            selectAllMode: 'allPages',
            searchEnabled: this._enableSearch
        };
        let addtionalOptions = this.isMultiSelectable ?
            {
                onSelectionChanged: includeActions ? tagBoxSelectionChangedHandler : undefined,
                showSelectionControls: this.isMultiSelectable,
                showDropDownButton: true,
                multiline: false
            }
            : {
                onValueChanged: includeActions ? selectBoxValueChangedHandler : undefined
            };
        return Object.assign(Object.assign(Object.assign({}, options), addtionalOptions), { keyExpr: _filter_element_data_controller_1.KEY_EXPR, multiSelectEnabled: this.isMultiSelectable, selectAllText: _localizer_1.ALL_ELEMENT.text, pageLoadMode: 'scrollBottom', dropDownOptions: {
                container: this.controlContainer
            } });
    }
    _resizeUnsafe() {
        super._resizeUnsafe();
        this.widget.repaint();
    }
}
exports.comboBoxFilterElement = comboBoxFilterElement;


/***/ }),

/***/ 68528:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dateFilterElement = exports.cssDateFilterClassNames = void 0;
const _common_1 = __webpack_require__(29009);
const _format_helper_1 = __webpack_require__(27893);
const _formatter_1 = __webpack_require__(93687);
const _jquery_helpers_1 = __webpack_require__(59384);
const _base_item_1 = __webpack_require__(11439);
const date_filter_widget_1 = __webpack_require__(79592);
exports.cssDateFilterClassNames = {
    item: 'dx-dashboard-date-filter-item'
};
class dateFilterElement extends _base_item_1.baseItem {
    constructor(container, options) {
        super(container, options);
    }
    get _allowPreview() {
        return true;
    }
    _getMinContentHeight() {
        if (this.widget && this._isFixedHeight)
            return this.widget._getHeight();
        return 0;
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        super.renderContentUnsafe(element, changeExisting, afterRenderCallback);
        var isFirstInitialization = !changeExisting || !this.widget;
        if (isFirstInitialization)
            this.widget = new date_filter_widget_1.DateFilterWidget(element, { useNativeScrolling: this.options.useNativeScrolling, overflow: this.options.overflow }, this.controlContainer);
        var options = this.getWidgetOptions();
        this._lock();
        this.widget._update(options);
        this._unlock();
        this.widget._updateSize(_jquery_helpers_1.getWidth(this.contentRoot), _jquery_helpers_1.getHeight(this.contentRoot));
        this._isFixedHeight = options.arrangementMode === 'AutoHeight';
        this.timePeriodMenuSelectedIndex = this.options.ViewModel.SelectedPeriodIndex;
        this._applySelectionToWidget();
        return false;
    }
    getInfoUnsafe() {
        return Object.assign(Object.assign({}, super.getInfoUnsafe()), { selectedPeriodName: this._getCurrentPredefinedRange() });
    }
    _setSelectionUnsafe(values) {
        super._setSelectionUnsafe(values);
        this._applySelectionToWidget();
    }
    _clearSelectionUnsafe() {
        super._clearSelectionUnsafe();
        if (this.widget) {
            this.timePeriodMenuSelectedIndex = undefined;
            this._clearSelectedValues();
        }
    }
    _initializeData(newOptions) {
        super._initializeData(newOptions);
        if (this.options) {
            this.options.allowExport = false;
        }
    }
    _clearSelectedValues() {
        this._lock();
        this.widget._clearSelectedValues();
        this._unlock();
    }
    _applySelectionToWidget() {
        this._lock();
        if (this.timePeriodMenuSelectedIndex !== undefined) {
            this.widget._setPeriod(this.timePeriodMenuSelectedIndex);
        }
        else {
            const selectedValues = this.options.SelectedValues && this.options.SelectedValues[0] && this.options.SelectedValues[0].map(v => this._convertSelectedValues(v));
            this.widget._setSelectedValues(selectedValues);
        }
        this._unlock();
        this.updateConstraints();
    }
    getWidgetOptions() {
        var multiData = this.options.multiData;
        var filterViewModel = this.options.ViewModel;
        var getValue = (name) => {
            return multiData && multiData.getMeasureValue(name).getValue();
        };
        return {
            filterType: filterViewModel.FilterType,
            arrangementMode: filterViewModel.ArrangementMode,
            datePickerLocation: filterViewModel.DatePickerLocation,
            displayTextPattern: filterViewModel.DisplayTextPattern,
            groupInterval: filterViewModel.GroupInterval,
            format: (value) => {
                var valueToFormat = value;
                if (filterViewModel.GroupInterval === 'Year')
                    valueToFormat = this._ensureYearValue(valueToFormat);
                return _format_helper_1.DashboardFormatHelper.format(valueToFormat, _formatter_1.convertToFormat({ DateTimeFormat: filterViewModel.DateTimeFormat }));
            },
            buttonClick: (name) => {
                if (!this._isLocked()) {
                    for (var i = 0; i < filterViewModel.DateTimePeriods.length; i++) {
                        if (name === filterViewModel.DateTimePeriods[i].Name && (name !== this._getCurrentPredefinedRange())) {
                            this.predefinedRangeChanged && this.predefinedRangeChanged(name);
                            break;
                        }
                    }
                }
            },
            buttonsInfo: filterViewModel.DateTimePeriods.map(period => period.Name),
            valueChanged: values => {
                if (!this._isLocked())
                    this.selected.fire(this.getName(), _common_1.viewerActions.setMasterFilter, [values]);
            },
            minimum: getValue(filterViewModel.MinimumId),
            maximum: getValue(filterViewModel.MaximumId),
            clearAction: () => this.clearMasterFilter.fire(this.getName()),
            hasOuterMargin: !this._isPaneEmpty() || this.visualMode === 'content',
            mobileLayout: this._mobileLayout()
        };
    }
    _mobileLayout() {
        return false;
    }
    _convertSelectedValues(value) {
        return value != null && this.options.ViewModel.GroupInterval == 'Year' && typeof value === 'number' ? new Date(value, 0, 1) : value;
    }
    _getCurrentPredefinedRange() {
        return this.timePeriodMenuSelectedIndex !== undefined ? this.options.ViewModel.DateTimePeriods[this.timePeriodMenuSelectedIndex].Name : '';
    }
    _setPredefinedRange(dateTimePeriodName) {
        if (dateTimePeriodName) {
            var dateTimePeriods = this.options.ViewModel.DateTimePeriods;
            let period = dateTimePeriods.filter(dateTimePeriod => dateTimePeriod.Name === dateTimePeriodName)[0];
            if (period) {
                let index = dateTimePeriods.indexOf(period);
                this.timePeriodMenuSelectedIndex = index;
                this._applySelectionToWidget();
            }
        }
        else {
            this.timePeriodMenuSelectedIndex = undefined;
        }
    }
    _ensureYearValue(value) {
        return value instanceof Date ? value.getFullYear() : value;
    }
    _updateContentSizeUnsafe() {
        super._updateContentSizeUnsafe();
        var newContentWidth = _jquery_helpers_1.getWidth(this.contentRoot), newContentHeight = _jquery_helpers_1.getHeight(this.contentRoot);
        if (this.options.ViewModel.ArrangementMode === 'AutoHeight') {
            var oldMinContentHeight = this._getMinContentHeight();
            this.widget._updateSize(newContentWidth, newContentHeight);
            var newMinContentHeight = this._getMinContentHeight();
            if (oldMinContentHeight && oldMinContentHeight !== newMinContentHeight) {
                this.updateConstraints();
            }
        }
        else
            this.widget._updateSize(newContentWidth, newContentHeight);
    }
    _getWidget() {
        return this.widget;
    }
    _isBorderRequired() {
        return false;
    }
    _isPaneEmpty() {
        return super._isPaneEmpty() || !this.hasCaption();
    }
    _isTransparentBackground() {
        return this._isPaneEmpty() && this.visualMode !== 'content';
    }
    _generateInnerBorderClassesUnsafe(element) {
        var classes = super._generateInnerBorderClassesUnsafe(element);
        if (!this._isPaneEmpty()) {
            classes.push(exports.cssDateFilterClassNames.item);
        }
        if (element) {
            if (this._isPaneEmpty()) {
                element.classList.remove(exports.cssDateFilterClassNames.item);
            }
            else {
                element.classList.add(exports.cssDateFilterClassNames.item);
            }
        }
        return classes;
    }
    dispose() {
        if (this.widget) {
            this.widget.dispose();
        }
        super.dispose();
    }
}
exports.dateFilterElement = dateFilterElement;
dateFilterElement.MinMeasureId = 'DateFilterMin';
dateFilterElement.MaxMeasureId = 'DateFilterMax';


/***/ }),

/***/ 779:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DatePickerButtons = exports.DatePickerButtonElement = exports.DateFilterWidgetOptions = exports.dateFilterWidgetClassNames = void 0;
exports.dateFilterWidgetClassNames = {
    widget: 'dx-dashboard-date-filter-widget',
    buttons: 'dx-dashboard-date-filter-buttons',
    buttonsNoPaddings: 'dx-dashboard-date-filter-buttons-no-caption',
    buttonsLeftToRight: 'dx-dashboard-date-filter-buttons-left-to-right',
    buttonsTopDown: 'dx-dashboard-date-filter-buttons-top-down',
    button: 'dx-dashboard-date-filter-button',
    datePickerButtonEmpty: 'dx-dashboard-date-filter-datepicker-button-empty',
    overlayWrapper: 'dx-dashboard-date-filter-overlay-wrapper',
    overlay: 'dx-dashboard-date-filter-overlay',
    mobile: 'dx-dashboard-date-filter-mobile',
    overlayCalendarContainer: 'dx-dashboard-date-filter-overlay-calendar-container',
    overlayCalendar: 'dx-dashboard-date-filter-overlay-calendar',
    overlayTextBox: 'dx-dashboard-date-filter-overlay-text-box',
    overlayButton: 'dx-dashboard-date-filter-overlay-button'
};
class DateFilterWidgetOptions {
}
exports.DateFilterWidgetOptions = DateFilterWidgetOptions;
class DatePickerButtonElement {
}
exports.DatePickerButtonElement = DatePickerButtonElement;
class DatePickerButtons {
    constructor() {
        this.showDropDown = false;
        this.checkButton = { key: 'Check' };
        this.dropDownButton = { key: 'DropDown', icon: 'edit' };
    }
    get text() {
        return this.checkButton.text;
    }
    set text(value) {
        this.checkButton.text = value;
    }
    getButtons() {
        var buttons = [];
        buttons.push(this.checkButton);
        if (this.showDropDown)
            buttons.push(this.dropDownButton);
        return buttons;
    }
}
exports.DatePickerButtons = DatePickerButtons;


/***/ }),

/***/ 22219:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.listFilterElement = exports.cssListBoxClassNames = void 0;
const list_1 = __webpack_require__(13052);
const _filter_element_data_controller_1 = __webpack_require__(99909);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const _base_element_1 = __webpack_require__(39190);
exports.cssListBoxClassNames = {
    borderVisible: 'dx-list-border-visible',
    separatorHidden: 'dx-list-item-separator-hidden',
    list: 'dx-dashboard-list',
    item: 'dx-dashboard-list-item',
    emptyMessage: 'dx-dashboard-empty-message',
};
class listFilterElement extends _base_element_1.filterElementBaseItem {
    constructor(container, options) {
        super(container, options);
    }
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    get filterDataController() { return this._dataController; }
    _setSelectionUnsafe(values) {
        super._setSelectionUnsafe(values);
        this._lock();
        try {
            this.widget.option('selectedItems', this._getSelection());
        }
        finally {
            this._unlock();
        }
    }
    _clearSelectionUnsafe() {
        if (!!this.options.useNeutralFilterMode) {
            this._lock();
            try {
                this.widget.unselectAll();
            }
            finally {
                this._unlock();
            }
        }
    }
    _generateInnerBorderClassesUnsafe(element) {
        var classes = super._generateInnerBorderClassesUnsafe(element);
        if (!this._isPaneEmpty()) {
            classes.push(exports.cssListBoxClassNames.item);
        }
        if (element) {
            if (this._isPaneEmpty()) {
                element.classList.remove(exports.cssListBoxClassNames.item);
            }
            else {
                element.classList.add(exports.cssListBoxClassNames.item);
            }
        }
        return classes;
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        super.renderContentUnsafe(element, changeExisting, afterRenderCallback);
        let widgetElement = _jquery_helpers_1.$unwrap(this.widget.element());
        widgetElement.classList.add(exports.cssListBoxClassNames.separatorHidden);
        if (this._isPaneEmpty() && this.visualMode !== 'content') {
            widgetElement.classList.add(exports.cssListBoxClassNames.borderVisible);
        }
        else {
            widgetElement.classList.remove(exports.cssListBoxClassNames.borderVisible);
        }
        return false;
    }
    _getWidgetName() {
        return 'dxList';
    }
    _createWidget(div, opts) {
        div.classList.add(exports.cssListBoxClassNames.list, exports.cssListBoxClassNames.emptyMessage);
        return new list_1.default(div, opts);
    }
    _getSelection() {
        return !this.isMultiSelectable && this._dataController.selection.length > 1 ? [this._dataController.selection[0]] : this._dataController.selection;
    }
    _getOptions(includeActions) {
        var that = this;
        return {
            dataSource: that.getDataSource(),
            selectedItems: that._getSelection(),
            showSelectionControls: true,
            focusStateEnabled: false,
            hoverStateEnabled: true,
            keyExpr: _filter_element_data_controller_1.KEY_EXPR,
            searchEnabled: that._enableSearch,
            searchEditorOptions: {
                placeholder: _localizer_1.localizer.getString(_localization_ids_1.localizationId.SearchNullValuePrompt)
            },
            encodeNoDataText: true,
            noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),
            selectionMode: that.isMultiSelectable ? 'all' : 'single',
            selectAllMode: 'allPages',
            selectAllText: _localizer_1.ALL_ELEMENT.text,
            pageLoadMode: 'scrollBottom',
            onOptionChanged: (e) => {
                if (e.name == 'searchEnabled')
                    e.component.option('searchValue', undefined);
            },
            onSelectionChanged: !includeActions ? undefined : function (e) {
                if (that.isMultiSelectable && e.removedItems.length > 0) {
                    that._raiseItemClick(e.removedItems);
                }
                else {
                    that._raiseItemClick(e.addedItems);
                }
            }
        };
    }
}
exports.listFilterElement = listFilterElement;


/***/ }),

/***/ 99926:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PopupCalendarWidgets = void 0;
class PopupCalendarWidgets {
    constructor(calendarWidget, ..._widgetsToDispose) {
        this.calendarWidget = calendarWidget;
        this._widgetsToDispose = [];
        this._widgetsToDispose = _widgetsToDispose.filter(w => !!w);
    }
    dispose() {
        this.calendarWidget && this.calendarWidget.dispose();
        if (this._widgetsToDispose && this._widgetsToDispose.length) {
            this._widgetsToDispose.forEach(widget => widget.dispose());
        }
    }
}
exports.PopupCalendarWidgets = PopupCalendarWidgets;


/***/ }),

/***/ 42780:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.treeViewFilterElement = exports.cssTreeViewClassNames = void 0;
const tree_list_1 = __webpack_require__(79352);
const tree_view_1 = __webpack_require__(93966);
const _filter_element_data_controller_1 = __webpack_require__(99909);
const _default_1 = __webpack_require__(65855);
const special_values_1 = __webpack_require__(91571);
const _jquery_helpers_1 = __webpack_require__(59384);
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const _utils_1 = __webpack_require__(7590);
const legacy_settings_1 = __webpack_require__(42649);
const _base_element_1 = __webpack_require__(39190);
exports.cssTreeViewClassNames = {
    borderVisible: 'dx-treeview-border-visible',
    topBorder: 'dx-dashboard-top-border',
    item: 'dx-dashboard-tree-item'
};
class treeViewFilterElement extends _base_element_1.filterElementBaseItem {
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    get filterDataController() { return this._dataController; }
    _setSelectionUnsafe(values) {
        super._setSelectionUnsafe(values);
        var selection = this._dataController.selection;
        if (!legacy_settings_1.LegacySettings.useLegacyTreeView && this.widget != null && this.widget.getSelectedRowKeys('leavesOnly').sort().toString() !== selection.sort().toString()) {
            this._lock();
            this.widget.selectRows(selection).always(() => this._unlock());
        }
    }
    _generateInnerBorderClassesUnsafe(element) {
        var classes = super._generateInnerBorderClassesUnsafe(element);
        if (!this._isPaneEmpty()) {
            classes.push(exports.cssTreeViewClassNames.item);
        }
        if (element) {
            if (this._isPaneEmpty()) {
                element.classList.remove(exports.cssTreeViewClassNames.item);
            }
            else {
                element.classList.add(exports.cssTreeViewClassNames.item);
            }
        }
        return classes;
    }
    _clearSelectionUnsafe() {
        if (!!this.options.useNeutralFilterMode) {
            this._lock();
            this.widget.selectRows([]).always(() => this._unlock());
        }
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        super.renderContentUnsafe(element, changeExisting, afterRenderCallback);
        var widgetElement = _jquery_helpers_1.$unwrap(this.widget.element());
        if (legacy_settings_1.LegacySettings.useLegacyTreeView && this._isPaneEmpty() && this.visualMode !== 'content') {
            widgetElement.classList.add(exports.cssTreeViewClassNames.borderVisible);
        }
        else {
            widgetElement.classList.remove(exports.cssTreeViewClassNames.borderVisible);
        }
        return false;
    }
    _getWidgetName() {
        return legacy_settings_1.LegacySettings.useLegacyTreeView ? 'dxTreeView' : 'dxTreeList';
    }
    _createWidget(div, opts) {
        return legacy_settings_1.LegacySettings.useLegacyTreeView ? new tree_view_1.default(div, opts) : new tree_list_1.default(div, opts);
    }
    _getOptions(includeActions) {
        var that = this;
        return legacy_settings_1.LegacySettings.useLegacyTreeView ?
            {
                items: that._dataController.dataSource,
                width: '100%',
                height: '100%',
                keyExpr: 'key',
                hoverStateEnabled: false,
                scrollDirection: 'both',
                showCheckBoxesMode: 'selectAll',
                rootValue: null,
                selectAllText: _localizer_1.ALL_ELEMENT.text,
                selectNodesRecursive: true,
                onSelectionChanged: includeActions ? e => that._raiseItemClick(e.component.getNodes()) : undefined,
                encodeNoDataText: true,
                noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),
            } :
            {
                dataSource: that._dataController.dataSource,
                itemsExpr: 'items',
                dataStructure: 'tree',
                columns: [{
                        caption: _localizer_1.ALL_ELEMENT.text,
                        dataField: 'text',
                        encodeHtml: that._isEncodeHtml()
                    }],
                selection: {
                    allowSelectAll: true,
                    mode: 'multiple',
                    recursive: true
                },
                scrolling: {
                    mode: 'virtual'
                },
                sorting: {
                    mode: 'none'
                },
                searchPanel: {
                    placeholder: _localizer_1.localizer.getString(_localization_ids_1.localizationId.SearchNullValuePrompt),
                    visible: this._enableSearch,
                    width: '100%',
                    searchVisibleColumnsOnly: true
                },
                autoExpandAll: that.options.ViewModel.AutoExpandNodes,
                expandNodesOnFiltering: true,
                showRowLines: false,
                showBorders: that.hasParentContainer() && this.visualMode !== 'content',
                width: '100%',
                height: '100%',
                keyExpr: _filter_element_data_controller_1.KEY_EXPR,
                hoverStateEnabled: false,
                rootValue: null,
                noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),
                onContentReady: (e) => {
                    let scrollable = e.component.getScrollable();
                    if (scrollable) {
                        scrollable.off('scroll', this._onScrollChanged);
                        scrollable.on('scroll', this._onScrollChanged);
                    }
                },
                onEditorPrepared: (e) => {
                    _jquery_helpers_1.$unwrap(e.editorElement).classList.remove('dx-treelist-checkbox-size');
                },
                onSelectionChanged: includeActions ? e => {
                    if (!this._isLocked()) {
                        if (e.currentSelectedRowKeys.length > 0 && e.currentDeselectedRowKeys.length > 0)
                            throw new Error('TREEVIEW has an incorrect selection');
                        this._raiseItemClick(this._getSelectedBranches(e.currentSelectedRowKeys.length > 0 ? e.currentSelectedRowKeys : e.currentDeselectedRowKeys, e.currentSelectedRowKeys.length > 0));
                    }
                } : undefined
            };
    }
    _fillChildren(node, branch, isSelected, branches, hash) {
        node.children && node.children.forEach(childNode => {
            const childNodeBranch = branch.slice();
            childNodeBranch.push(childNode.data.value);
            this._fillChildren(childNode, childNodeBranch, isSelected, branches, hash);
        });
        if (!node.children || !node.children.length) {
            const nullValueItemsCount = this.dataController.multiData ? this.dataController.multiData.getDimensions().length - branch.length : 0;
            for (let i = 0; i < nullValueItemsCount; i++) {
                branch.push(special_values_1.specialValues.olapNullValueGuid);
            }
            if ((isSelected && !!hash[branch]) || (!isSelected && !hash[branch]))
                return true;
            branches[branch] = branch;
        }
    }
    _getSelectedBranches(keys, isSelected = false) {
        const branches = {};
        const hash = _utils_1.wrapHash(this._getSelectedValues());
        for (let i = 0; i < keys.length; i++) {
            let treeList = this.widget;
            const node = treeList.getNodeByKey(keys[i]);
            const branch = [node.data.value];
            let curNode = node;
            while (curNode.parent && curNode.level > 0) {
                branch.unshift(curNode.parent.data.value);
                curNode = curNode.parent;
            }
            this._fillChildren(node, branch, isSelected, branches, hash);
        }
        return Object.keys(branches).map(key => branches[key]);
    }
    _onScrollChanged(e) {
        if (e.scrollOffset.top !== 0) {
            _jquery_helpers_1.$unwrap(e.element).classList.add(exports.cssTreeViewClassNames.topBorder);
        }
        else {
            _jquery_helpers_1.$unwrap(e.element).classList.remove(exports.cssTreeViewClassNames.topBorder);
        }
    }
}
exports.treeViewFilterElement = treeViewFilterElement;


/***/ }),

/***/ 79592:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DateFilterWidget = void 0;
const fx_1 = __webpack_require__(76036);
const string_1 = __webpack_require__(36306);
const button_1 = __webpack_require__(68203);
const button_group_1 = __webpack_require__(11953);
const calendar_1 = __webpack_require__(29928);
const date_box_1 = __webpack_require__(66417);
const ui_overlay_1 = __webpack_require__(71996);
const _default_1 = __webpack_require__(65855);
const _formatter_1 = __webpack_require__(93687);
const _jquery_helpers_1 = __webpack_require__(59384);
const _render_helper_1 = __webpack_require__(39336);
const _utils_1 = __webpack_require__(73500);
const _date_filter_widget_options_1 = __webpack_require__(779);
const _popup_calendar_widgets_1 = __webpack_require__(99926);
class DateFilterWidget {
    constructor(element, viewerOptions, boundaryElementContainer) {
        this.boundaryElementContainer = boundaryElementContainer;
        this._defaultButtonText = _default_1.getLocalizationById('DashboardStringId.DateFilterDatePickerButtonDefaultText');
        this._overlayShown = false;
        this._lockSelectionEvents = false;
        this._updateScrollableContainer = () => { };
        this._getBtnsContainerScrollWidth = () => 0;
        this._datePickerContent = new _date_filter_widget_options_1.DatePickerButtons();
        this.quickButtons = [];
        this._parent = document.createElement('div');
        element.appendChild(this._parent);
        this._scrollableContent = _render_helper_1.RenderHelper.wrapScrollable(this._parent, viewerOptions.overflow, 'both');
        this._updateScrollableContainer = () => _render_helper_1.RenderHelper.updateScrollable(this._parent);
    }
    get calendarFrom() {
        return (this._calendarWidgetsFrom && this._calendarWidgetsFrom.calendarWidget || null);
    }
    get calendarTo() {
        return (this._calendarWidgetsTo && this._calendarWidgetsTo.calendarWidget || null);
    }
    element() {
        return _jquery_helpers_1.wrapPublicElement(this._scrollableContent);
    }
    _update(widgetOptions) {
        this._options = Object.assign(Object.assign({}, this._getDefaultOptions()), widgetOptions);
        this._dispose();
        this._startDate = this._options.startDate;
        this._endDate = this._options.endDate;
        var hasQuickFilters = this._options.buttonsInfo.length > 0;
        var content = this._scrollableContent;
        this._widgetDiv = this._createDiv(content, _date_filter_widget_options_1.dateFilterWidgetClassNames.widget);
        var buttonsDiv = this._createButtonsDiv();
        this._getBtnsContainerScrollWidth = () => Math.ceil(buttonsDiv.scrollWidth);
        if (this._options.datePickerLocation == 'Near')
            this._addDatePicker(buttonsDiv);
        if (hasQuickFilters) {
            this._options.buttonsInfo.forEach(info => {
                let buttonDiv = this._createDiv(buttonsDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.button);
                var button = new button_group_1.default(buttonDiv, {
                    items: [{ text: info }],
                    selectionMode: 'multiple',
                    focusStateEnabled: false,
                    onSelectionChanged: e => {
                        if (!this._lockSelectionEvents) {
                            if (e.removedItems.length > 0)
                                this._options.clearAction();
                            if (e.addedItems.length > 0) {
                                this._selectQuickButton(e.component);
                                this._options.buttonClick(e.component.option('items')[0].text);
                            }
                        }
                    }
                });
                this.quickButtons.push(button);
            });
        }
        if (this._options.datePickerLocation == 'Far')
            this._addDatePicker(buttonsDiv);
        var overlayDiv = this._createDiv(this._widgetDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.overlayWrapper);
        this._createDropDownContent();
        this._overlay = new ui_overlay_1.default(overlayDiv, this._getOverlayOptions());
        this._updateDropDownButtonText();
    }
    _getHeight() {
        return this._widgetDiv.offsetHeight;
    }
    _updateSize(width, height) {
        this._widgetDiv.style.height = 'auto';
        if (this._options.arrangementMode === 'Vertical') {
            this._widgetDiv.style.height = height + 'px';
            this._widgetDiv.style.width = width + 'px';
            let btnsContainerWidth = this._getBtnsContainerScrollWidth();
            let negativeBtnsContainerMargin = this._options.hasOuterMargin ? 0 : 6;
            if (btnsContainerWidth - Math.ceil(width) - negativeBtnsContainerMargin > 0) {
                this._widgetDiv.style.width = `${btnsContainerWidth}px`;
            }
            this._updateScrollableContainer();
        }
        else
            this._widgetDiv.style.width = width + 'px';
    }
    _setSelectedValues(values) {
        if (!!values && values.length > 0 && (!!values[0] || !!values[1])) {
            this._startDate = values[0];
            this._endDate = values[1];
            this._setDatePickerBtnState(true);
        }
        else {
            this._clearSelectedPeriods();
            this._setDatePickerBtnState(false);
        }
        this._updateDropDownButtonText();
    }
    _setPeriod(periodIndex) {
        var buttons = this.quickButtons;
        if (periodIndex != null && periodIndex < buttons.length) {
            this._setDatePickerBtnState(false);
            var button = buttons[periodIndex];
            button.option('selectedItems', button.option('items'));
        }
    }
    _clearSelectedPeriods() {
        this._performWithLockedEvents(() => {
            var buttons = this.quickButtons;
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].option('selectedItems', []);
            }
        });
    }
    _clearSelectedValues() {
        this._setSelectedValues([]);
        this._clearSelectedPeriods();
    }
    _submit() {
        var filterType = this._options.filterType;
        if (filterType === 'After') {
            this._startDate = this._calendarWidgetsFrom.calendarWidget.option('value');
            this._endDate = null;
        }
        if (filterType === 'Before') {
            this._startDate = null;
            this._endDate = this._calendarWidgetsTo.calendarWidget.option('value');
        }
        if (filterType === 'Exact') {
            this._startDate = this._calendarWidgetsFrom.calendarWidget.option('value');
            this._endDate = this._calendarWidgetsFrom.calendarWidget.option('value');
        }
        if (filterType === 'Between') {
            this._startDate = this._calendarWidgetsFrom.calendarWidget.option('value');
            this._endDate = this._calendarWidgetsTo.calendarWidget.option('value');
        }
        this._applyValues();
        this._overlay.hide();
        this._updateDropDownButtonText();
    }
    _applyValues() {
        this._processItemClick([this._startDate, this._endDate]);
        this._performWithLockedEvents(() => {
            for (var i = 0; i < this.quickButtons.length; i++) {
                this.quickButtons[i].option('selectedItems', []);
            }
            this._setDatePickerBtnState(true);
        });
    }
    _addDatePicker(parentElement) {
        this._datePickerDiv = this._createDiv(parentElement, _date_filter_widget_options_1.dateFilterWidgetClassNames.button);
        this.datePickerButton = new button_group_1.default(this._datePickerDiv, {
            items: this._datePickerContent.getButtons(),
            focusStateEnabled: false,
            keyExpr: 'key',
            selectionMode: 'multiple',
            onSelectionChanged: e => {
                if (!this._lockSelectionEvents) {
                    if (e.removedItems.length > 0 && e.removedItems[0].key === 'Check') {
                        this._onDatePickerUnchecked();
                    }
                    var clickedButton = e.addedItems[0];
                    if (clickedButton) {
                        if (clickedButton.key === 'DropDown') {
                            this._showPopup();
                        }
                        if (clickedButton.key === 'Check') {
                            if (this._startDate == null && this._endDate == null) {
                                e.component.option('selectedItemKeys', []);
                                this._showPopup();
                            }
                            else {
                                this._applyValues();
                            }
                        }
                        var selection = e.component.option('selectedItemKeys');
                        selection = selection.filter((key) => { return key !== 'DropDown'; });
                        e.component.option('selectedItemKeys', selection);
                    }
                }
            }
        });
    }
    _getStartCalendarValue() {
        return this._startDate || this._options.minimum;
    }
    _getEndCalendarValue() {
        return this._endDate || this._options.maximum;
    }
    _createDiv(container, ...classes) {
        var div = document.createElement('div');
        if (container != null)
            container.appendChild(div);
        classes.forEach(className => this._addClass(div, className));
        return div;
    }
    _createButtonsDiv() {
        var classNames = [_date_filter_widget_options_1.dateFilterWidgetClassNames.buttons];
        if (this._options.arrangementMode === 'Vertical')
            classNames.push(_date_filter_widget_options_1.dateFilterWidgetClassNames.buttonsTopDown);
        else
            classNames.push(_date_filter_widget_options_1.dateFilterWidgetClassNames.buttonsLeftToRight);
        if (!this._options.hasOuterMargin)
            classNames.push(_date_filter_widget_options_1.dateFilterWidgetClassNames.buttonsNoPaddings);
        return this._createDiv(this._widgetDiv, ...classNames);
    }
    _createDropDownContent() {
        var filterType = this._options.filterType;
        this._dropDownContentDiv = this._createDiv(null, _date_filter_widget_options_1.dateFilterWidgetClassNames.overlay);
        if (this._options.mobileLayout)
            this._addClass(this._dropDownContentDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.mobile);
        var createCalendar1 = (withButton) => {
            this._calendarWidgetsFrom = this._createDatePicker(this._dropDownContentDiv, (value) => { this._startDate = value; }, withButton);
        };
        var createCalendar2 = (withButton) => {
            this._calendarWidgetsTo = this._createDatePicker(this._dropDownContentDiv, (value) => { this._endDate = value; }, withButton);
        };
        if (filterType === 'Between') {
            createCalendar1(false);
            createCalendar2(true);
        }
        else if (filterType === 'Before')
            createCalendar2(true);
        else
            createCalendar1(true);
    }
    _createDatePicker(containerDiv, setDate, createButton) {
        if (this._options.mobileLayout)
            return this._createMobileCalendar(containerDiv, setDate, createButton);
        return this._createDesktopCalendar(containerDiv, createButton);
    }
    _createDesktopCalendar(containerDiv, createButton) {
        var div = this._createDiv(containerDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.overlayCalendarContainer);
        var calendar = this._createCalendar(div, (e) => {
            dateBox.option('value', e.value);
        });
        var textBoxValueChanged = (value) => {
            calendar.option('value', value);
        };
        var dateBox = this._createTextBox(div, textBoxValueChanged);
        var submitButton = createButton ? this._createSubmitButton(div) : null;
        return new _popup_calendar_widgets_1.PopupCalendarWidgets(calendar, dateBox, submitButton);
    }
    _createMobileCalendar(containerDiv, setDate, createButton) {
        var div = this._createDiv(containerDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.overlayCalendarContainer);
        var textBoxValueChanged = (value) => {
            setDate(value);
        };
        var dateBox = this._createTextBox(div, textBoxValueChanged);
        var submitButton = createButton ? this._createSubmitButton(div) : null;
        return new _popup_calendar_widgets_1.PopupCalendarWidgets(dateBox, submitButton);
    }
    _createCalendar(containerDiv, valueChanged) {
        var div = this._createDiv(containerDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.overlayCalendar);
        return new calendar_1.default(div, {
            focusStateEnabled: false,
            maxZoomLevel: _utils_1.CalendarHelper.getCalendarMaxZoomLevel(this._options.groupInterval),
            onValueChanged: valueChanged
        });
    }
    _createTextBox(containerDiv, textBoxValueChanged) {
        var div = this._createDiv(containerDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.overlayTextBox);
        return new date_box_1.default(div, {
            width: 'auto',
            useMaskBehavior: true,
            displayFormat: 'shortdate',
            showDropDownButton: false,
            type: 'date',
            onValueChanged: (e) => {
                textBoxValueChanged(e.value);
            }
        });
    }
    _createSubmitButton(containerDiv) {
        var div = this._createDiv(containerDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.overlayButton);
        return new button_1.default(div, {
            text: _default_1.getLocalizationById('DashboardStringId.ButtonApply'),
            onClick: (e) => {
                this._submit();
            }
        });
    }
    _processItemClick(values) {
        this._options.valueChanged && this._options.valueChanged(values);
    }
    _updateDropDownButtonText() {
        var start = this._startDate;
        var end = this._endDate;
        if (this.datePickerButton) {
            if (start || end) {
                var formatHandler = this._options.format;
                var startText = start ? formatHandler(start) : null;
                var endText = end ? formatHandler(end) : null;
                var formatPatten = this._options.displayTextPattern;
                if (!formatPatten) {
                    this._setDatePickerText(_formatter_1.constructIntervalFilterText({ left: startText, right: endText }), true);
                }
                else
                    this._setDatePickerText(string_1.format(formatPatten, startText, endText), true);
            }
            else {
                this._setDatePickerText(this._defaultButtonText, false);
            }
        }
    }
    _getDefaultOptions() {
        return {
            arrangementMode: 'AutoHeight',
            filterType: 'Between',
            datePickerLocation: 'Far',
            buttonsInfo: [],
            displayTextPattern: _default_1.getLocalizationById('DashboardStringId.FromToDatePeriodCaption'),
            groupInterval: 'DayMonthYear',
            format: (value) => value.toString()
        };
    }
    _addClass(el, className) {
        el.classList.add(className);
    }
    _removeClass(el, className) {
        el.classList.remove(className);
    }
    _dispose() {
        if (this._calendarWidgetsFrom) {
            this._calendarWidgetsFrom.dispose();
            this._calendarWidgetsFrom = null;
        }
        if (this._calendarWidgetsTo) {
            this._calendarWidgetsTo.dispose();
            this._calendarWidgetsTo = null;
        }
        this._scrollableContent.innerHTML = '';
        if (this.datePickerButton != null) {
            this.datePickerButton.dispose();
            this.datePickerButton = null;
        }
        for (var i = 0; i < this.quickButtons.length; i++)
            this.quickButtons[i].dispose();
        this.quickButtons = [];
        if (this._overlay) {
            this._overlay.dispose();
            this._overlay = null;
        }
    }
    _disposeWithElement() {
        this._dispose();
        if (this._parent && this._parent.parentElement)
            this._parent.parentElement.removeChild(this._parent);
        this._parent = null;
    }
    dispose() {
        this._disposeWithElement();
    }
    _getOverlayOptions() {
        var that = this;
        return {
            container: that.boundaryElementContainer,
            animation: false,
            width: this._getOverlayWidth(),
            height: 'auto',
            position: {
                collision: 'flipfit',
                my: 'top left',
                at: 'bottom left',
                of: that._datePickerDiv,
                boundary: that.boundaryElementContainer
            },
            onHidden: (e) => {
                that._overlayShown = false;
            },
            contentTemplate: (contentElement) => {
                _jquery_helpers_1.$unwrap(contentElement).appendChild(this._dropDownContentDiv);
            },
            hideOnOutsideClick: true,
            wrapperAttr: {
                class: _date_filter_widget_options_1.dateFilterWidgetClassNames.overlayWrapper
            }
        };
    }
    _getOverlayWidth() {
        if (this._options.mobileLayout)
            return function () { return _jquery_helpers_1.getWidth(window) * 0.9; };
        return 'auto';
    }
    _setDatePickerText(text, showDropDown) {
        if (!showDropDown)
            this._addClass(this._datePickerDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.datePickerButtonEmpty);
        else
            this._removeClass(this._datePickerDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.datePickerButtonEmpty);
        this._datePickerContent.showDropDown = showDropDown;
        this._datePickerContent.text = text;
        this.datePickerButton.option('items', this._datePickerContent.getButtons());
    }
    _selectQuickButton(button) {
        this._performWithLockedEvents(() => {
            this._setDatePickerBtnState(false);
            for (var i = 0; i < this.quickButtons.length; i++) {
                if (button != this.quickButtons[i])
                    this.quickButtons[i].option('selectedItems', []);
            }
        });
    }
    _showPopup() {
        this._overlayShown = !this._overlayShown;
        this._overlay.toggle(this._overlayShown);
        fx_1.default.off = true;
        this._calendarWidgetsFrom && this._calendarWidgetsFrom.calendarWidget.option('value', this._getStartCalendarValue());
        this._calendarWidgetsTo && this._calendarWidgetsTo.calendarWidget.option('value', this._getEndCalendarValue());
        fx_1.default.off = false;
    }
    _setDatePickerBtnState(checked) {
        if (this.datePickerButton) {
            if (checked && this.datePickerButton.option('selectedItemKeys')[0] !== 'Check') {
                this.datePickerButton.option('selectedItemKeys', ['Check']);
            }
            else if (!checked && this.datePickerButton.option('selectedItemKeys').length !== 0) {
                this.datePickerButton.option('selectedItemKeys', []);
            }
        }
    }
    _onDatePickerUnchecked() {
        if (this.quickButtons.every(button => button.option('selectedItemKeys').length === 0))
            this._options.clearAction();
    }
    _performWithLockedEvents(action) {
        this._lockSelectionEvents = true;
        try {
            action();
        }
        finally {
            this._lockSelectionEvents = false;
        }
    }
}
exports.DateFilterWidget = DateFilterWidget;


/***/ }),

/***/ 24350:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FieldsExtractor = exports.OneElementFilterRemover = exports.FilterChecker = exports.pivotHelper = void 0;
const item_data_axis_names_1 = __webpack_require__(51101);
const _utils_1 = __webpack_require__(7590);
exports.pivotHelper = {
    getSchemaRow(fields) {
        let row = {};
        fields && fields.forEach(f => {
            row[f.name] = undefined;
        });
        return row;
    },
    createAreaFields(fieldsViewModels, area, autoExpand) {
        return fieldsViewModels ? fieldsViewModels.map((viewModel) => {
            return {
                name: viewModel.DataId,
                dataField: viewModel.DataId,
                caption: viewModel.Caption,
                area: area,
                expanded: autoExpand,
                sortBy: 'none'
            };
        }) : [];
    },
    getColumnAxis(multiData) {
        return multiData.getAxis(item_data_axis_names_1.itemDataAxisNames.pivotColumnAxis);
    },
    getRowAxis(multiData) {
        return multiData.getAxis(item_data_axis_names_1.itemDataAxisNames.pivotRowAxis);
    }
};
class FilterValueVisitor {
    constructor() {
        this._supportedLogicalOperation = ['and', 'or'];
    }
    _visitComplexExpression(filter) {
        let currentResult = undefined;
        let currentOperator = null;
        for (let i = 0; i < filter.length; i++) {
            let currentElement = filter[i];
            if (i % 2 === 1) {
                if (typeof currentElement === 'string' && this._supportedLogicalOperation.indexOf(currentElement) !== -1) {
                    currentOperator = currentElement;
                }
                else {
                    new Error(`Filter "${JSON.stringify(filter)}" has unsupported structure. Element "${JSON.stringify(currentElement)}" at ${i} is not supported operator`);
                }
            }
            else {
                if (Array.isArray(currentElement)) {
                    if (i === 0) {
                        currentResult = this._visit(currentElement);
                    }
                    else {
                        switch (currentOperator) {
                            case 'and':
                                currentResult = this._and(currentResult, this._visit(currentElement));
                                break;
                            case 'or':
                                currentResult = this._or(currentResult, this._visit(currentElement));
                                break;
                            default:
                                throw new Error(`The operator "${currentOperator.toString()}" is not supported in filter expression`);
                        }
                    }
                }
                else {
                    throw new Error(`Filter "${JSON.stringify(filter)}" has unsupported structure. Element "${JSON.stringify(currentElement)}" at ${i} should be array`);
                }
            }
        }
        return currentResult;
    }
    _visit(filter) {
        if (!filter || filter.length === 0)
            return this._visitEmpty(filter);
        if (filter.length === 1) {
            return this._visit(filter[0]);
        }
        if (filter.length === 2) {
            return this._negate(this._visit(filter[1]));
        }
        else {
            if (filter.length === 3 && filter[1] === '=') {
                let field = filter[0];
                let value = filter[2];
                return this._visitEquality(field, value);
            }
            else if (filter.length >= 3 && filter.length % 2 === 1) {
                return this._visitComplexExpression(filter);
            }
            else {
                throw new Error(`Filter "${JSON.stringify(filter)}" has unsupported structure: must contain an odd number of elements`);
            }
        }
    }
}
class FilterChecker extends FilterValueVisitor {
    static fits(dimensionValues, filter) {
        FilterChecker._instance._dimensionValues = dimensionValues;
        return FilterChecker._instance._visit(filter);
    }
    _visitEmpty(filter) {
        return true;
    }
    _negate(value) {
        return !value;
    }
    _visitEquality(field, value) {
        return this._dimensionValues[field] === undefined || this._dimensionValues[field] === value;
    }
    _and(left, right) {
        return left && right;
    }
    _or(left, right) {
        return left || right;
    }
}
exports.FilterChecker = FilterChecker;
FilterChecker._instance = new FilterChecker();
class OneElementFilterRemover extends FilterValueVisitor {
    static simplify(filter) {
        return OneElementFilterRemover._instance._visit(filter);
    }
    _visitEmpty(filter) {
        return filter;
    }
    _negate(value) {
        return ['!', value];
    }
    _visitEquality(field, value) {
        return [field, '=', value];
    }
    _and(left, right) {
        return [left, 'and', right];
    }
    _or(left, right) {
        return [left, 'or', right];
    }
}
exports.OneElementFilterRemover = OneElementFilterRemover;
OneElementFilterRemover._instance = new OneElementFilterRemover();
class FieldsExtractor extends FilterValueVisitor {
    static extract(filter) {
        return _utils_1.distinct(FieldsExtractor._instance._visit(filter));
    }
    _visitEmpty(filter) {
        return [];
    }
    _negate(value) {
        return value;
    }
    _visitEquality(field, value) {
        return [field];
    }
    _and(left, right) {
        return left.concat(right);
    }
    _or(left, right) {
        return left.concat(right);
    }
}
exports.FieldsExtractor = FieldsExtractor;
FieldsExtractor._instance = new FieldsExtractor();


/***/ }),

/***/ 84953:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pivotGridItem = void 0;
const pivot_grid_1 = __webpack_require__(99578);
const data_source_1 = __webpack_require__(23570);
const item_data_axis_names_1 = __webpack_require__(51101);
const special_values_1 = __webpack_require__(91571);
const _jquery_helpers_1 = __webpack_require__(59384);
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const _utils_1 = __webpack_require__(7590);
const _style_settings_provider_1 = __webpack_require__(76106);
const _base_item_1 = __webpack_require__(11439);
const _pivot_grid_item_helper_1 = __webpack_require__(24350);
var PIVOT_BAR_ID = 'pivotBar';
class pivotGridItem extends _base_item_1.baseItem {
    constructor(container, options) {
        super(container, options);
        this._conditionalFormattingInfoCache = [];
        this._pointsCache = { columns: {}, rows: {} };
        this.expandStateChanged = _jquery_helpers_1.createJQueryCallbacks();
        this._expandValueChangingHandler = (args) => {
            this._resetPivotLoadingDeferred();
            this._dataUpdateHook && this._dataUpdateHook.reject();
            this._dataUpdateHook = _jquery_helpers_1.createJQueryDeferred();
            const isColumn = args.area === 'column';
            const values = args.path;
            this._onExpandValue({
                values: values,
                isColumn: isColumn,
                isExpand: args.expanded,
                isRequestData: !!args.needExpandData
            });
            this.onCollapseStateChanged(isColumn, values, !args.expanded);
        };
        this._collapseStateCache = {};
        this._conditionalFormattingInfoCache = [];
        this._styleSettingsProvider = new _style_settings_provider_1.styleSettingsProvider();
        this._styleSettingsProvider.initialize(this.options.ConditionalFormattingModel);
    }
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    get _captionToolbarSeparatorRequired() {
        return !this.hasParentContainer() || (this.hasParentContainer() && this.visualMode === 'caption');
    }
    get _multiData() {
        return this.options.multiData;
    }
    get _viewModel() {
        return this.options.ViewModel;
    }
    dispose() {
        super.dispose();
        this.pivotGridViewer && this.pivotGridViewer.dispose();
        this._styleSettingsProvider.dispose();
        this._pivotLoadingDeferred && this._pivotLoadingDeferred.reject();
        this._dataUpdateHook.reject();
    }
    hideLoadingPanel() {
        if (this._pivotLoadingDeferred) {
            this._pivotLoadingDeferred.promise().then(() => {
                super.hideLoadingPanel();
            });
        }
        else {
            super.hideLoadingPanel();
        }
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        this._resetPivotLoadingDeferred();
        if (this.options) {
            this._createAndLoadDataSource().then(result => {
                var pivotOptions = this._getPivotGridOptions(result.dataSource, result.fields);
                this._raiseItemWidgetOptionsPrepared(pivotOptions);
                if (changeExisting && this.pivotGridViewer) {
                    this.pivotGridViewer.option(pivotOptions);
                }
                else {
                    this.pivotGridViewer = new pivot_grid_1.default(element, pivotOptions);
                }
                this._conditionalFormattingInfoCache = [];
                afterRenderCallback();
            });
        }
        return true;
    }
    renderPartialContentUnsafe() {
        this._conditionalFormattingInfoCache = [];
    }
    getInfoUnsafe() {
        return _jquery_helpers_1.deepExtend(super.getInfoUnsafe(), {
            scroll: {
                topPath: this.pivotGridViewer.getScrollPath('row'),
                leftPath: this.pivotGridViewer.getScrollPath('column'),
                horizontal: this.pivotGridViewer.hasScroll('column'),
                vertical: this.pivotGridViewer.hasScroll('row')
            }
        });
    }
    getExpandingState(isRowsExpanding = true, isColumnsExpanding = true) {
        var ds = this.pivotGridViewer ? this.pivotGridViewer.getDataSource() : undefined;
        return {
            rows: isRowsExpanding ? this._getStatePaths(ds, false, true) : this._getStatePaths(ds, false, false),
            columns: isColumnsExpanding ? this._getStatePaths(ds, true, true) : this._getStatePaths(ds, true, false)
        };
    }
    _onExpandStateChanged(dxPivotState) {
        this.expandStateChanged.fire(dxPivotState);
    }
    _getStatePaths(ds, isColumn, getExpanded) {
        if (!ds)
            return [];
        var result = [], data = ds.getData() || [], area = isColumn ? 'column' : 'row', fields = ds.getAreaFields(area, false);
        var foreachTreeItem = (items, members, callback) => {
            members = members || [];
            items = items || [];
            var item;
            for (var i = 0; i < items.length; i++) {
                item = items[i];
                members.unshift(item);
                callback(members, i);
                if (item.children) {
                    foreachTreeItem(item.children, members, callback);
                }
                members.shift();
            }
        };
        var createPath = items => {
            var result = [];
            for (var i = items.length - 1; i >= 0; i--) {
                result.push(items[i].key || items[i].value);
            }
            return result;
        };
        foreachTreeItem(data[area + 's'], undefined, function (items) {
            var item = items[0], path = createPath(items);
            let expanded = !!item.children;
            if (getExpanded && expanded || !getExpanded && !expanded)
                (path.length < fields.length) && result.push(path.slice());
        });
        return result;
    }
    _initializeData(newOptions) {
        super._initializeData(newOptions);
        if (!this._dataUpdateHook) {
            this._dataUpdateHook = _jquery_helpers_1.createJQueryDeferred();
        }
        this._dataUpdateHook.resolve();
        this.options.PivotExpandViewState = newOptions.PivotExpandViewState;
        if (this._styleSettingsProvider) {
            this._styleSettingsProvider.initialize(this.options.ConditionalFormattingModel);
        }
    }
    _loadState(fields) {
        let previousState = this.options.PivotExpandViewState;
        if (previousState) {
            let fieldsCopy = fields.map(field => (Object.assign({}, field)));
            fieldsCopy.forEach(actualField => {
                var stateField = previousState.fields.filter(field => field.name == actualField.name)[0];
                if (stateField) {
                    actualField.expanded = stateField.expanded;
                }
            });
            previousState.fields = fieldsCopy;
        }
        return previousState;
    }
    _getPivotGridOptions(dataSource, fields) {
        let viewModel = this._viewModel;
        if (!viewModel) {
            return {};
        }
        const commonOptions = {};
        commonOptions.dataSource = dataSource;
        commonOptions.fieldChooser = { enabled: false };
        commonOptions.loadPanel = { enabled: false };
        commonOptions.contextMenuEnabled = false;
        commonOptions.showRowGrandTotals = this._showRowGrandTotals(fields);
        commonOptions.showColumnGrandTotals = this._getShowColumnGrandTotals(fields);
        commonOptions.showColumnTotals = viewModel.ShowColumnTotals;
        commonOptions.showRowTotals = viewModel.ShowRowTotals;
        commonOptions.dataFieldArea = viewModel.ValuesPosition == 'Rows' ? 'row' : 'column';
        if (viewModel.LayoutType == 'Compact') {
            commonOptions.rowHeaderLayout = 'tree';
            if (viewModel.ColumnTotalsPosition == 'Near')
                commonOptions.showTotalsPrior = 'columns';
            else
                commonOptions.showTotalsPrior = 'none';
        }
        else {
            commonOptions.rowHeaderLayout = 'standard';
            if (viewModel.RowTotalsPosition == 'Top' && viewModel.ColumnTotalsPosition == 'Near')
                commonOptions.showTotalsPrior = 'both';
            else if (viewModel.RowTotalsPosition == 'Top')
                commonOptions.showTotalsPrior = 'rows';
            else if (viewModel.ColumnTotalsPosition == 'Near')
                commonOptions.showTotalsPrior = 'columns';
            else
                commonOptions.showTotalsPrior = 'none';
        }
        commonOptions.encodeHtml = this._isEncodeHtml();
        commonOptions.scrolling = {
            mode: 'virtual'
        };
        commonOptions.stateStoring = {
            enabled: true,
            type: 'custom',
            savingTimeout: 0,
            customLoad: () => {
                return _jquery_helpers_1.createJQueryDeferred().resolve(this._loadState(fields)).promise();
            },
            customSave: (dxPivotState) => {
                this._onExpandStateChanged(dxPivotState);
            }
        },
            commonOptions.onExpandValueChanging = this._expandValueChangingHandler;
        commonOptions.texts = {
            grandTotal: _localizer_1.localizer.getString(_localization_ids_1.localizationId.PivotGridGrandTotal),
            total: _localizer_1.localizer.getString(_localization_ids_1.localizationId.PivotGridTotal),
            noData: _localizer_1.localizer.getString(_localization_ids_1.localizationId.MessagePivotHasNoData)
        };
        commonOptions.onCellClick = (e) => {
            if (e.area === 'data') {
                this._raiseItemClick(e.cell);
            }
        };
        commonOptions.onCellPrepared = (e) => this._onCellPrepared(e);
        commonOptions.onContentReady = (e) => {
            this._styleSettingsProvider.draw();
            this._resolvePivotLoadingDeferred();
        };
        return commonOptions;
    }
    _getShowColumnGrandTotals(fields) {
        let viewModel = this._viewModel;
        let columnFields = fields.filter(function (field) { return field.area == 'column'; });
        let rowFields = fields.filter(function (field) { return field.area == 'row'; });
        if (!viewModel.ShowColumnGrandTotals && (columnFields.length === 0 && rowFields.length !== 0)) {
            return true;
        }
        return viewModel.ShowColumnGrandTotals;
    }
    _showRowGrandTotals(fields) {
        let viewModel = this._viewModel;
        let columnFields = fields.filter(function (field) { return field.area == 'column'; });
        let rowFields = fields.filter(function (field) { return field.area == 'row'; });
        if (!viewModel.ShowRowGrandTotals && (columnFields.length !== 0 && rowFields.length === 0)) {
            return true;
        }
        return viewModel.ShowRowGrandTotals;
    }
    _resetPivotLoadingDeferred() {
        this._pivotLoadingDeferred && this._pivotLoadingDeferred.reject();
        this._pivotLoadingDeferred = _jquery_helpers_1.createJQueryDeferred();
    }
    _resolvePivotLoadingDeferred() {
        this._pivotLoadingDeferred && this._pivotLoadingDeferred.resolve();
        this._pivotLoadingDeferred = null;
    }
    onCollapseStateChanged(isColumn, values, collapse) {
        let that = this;
        let collapseStateKey = values.concat(isColumn ? 'column' : 'row').toString();
        that._conditionalFormattingInfoCache = [];
        if (collapse)
            that._collapseStateCache[collapseStateKey] = true;
        else
            delete that._collapseStateCache[collapseStateKey];
    }
    _resizeUnsafe() {
        super._resizeUnsafe();
        this.pivotGridViewer && this.pivotGridViewer.resize();
        this._styleSettingsProvider.updateBarWidth(PIVOT_BAR_ID);
    }
    _getDataPoint(element) {
        var that = this, viewModel = that.options.ViewModel;
        return {
            getValues(name) {
                switch (name) {
                    case item_data_axis_names_1.itemDataAxisNames.pivotRowAxis:
                        return element.rowPath;
                    case item_data_axis_names_1.itemDataAxisNames.pivotColumnAxis:
                        return element.columnPath;
                    default:
                        return null;
                }
            },
            getDeltaIds: function () {
                return [];
            },
            getMeasureIds: function () {
                var dataIndex = element.dataIndex;
                if (dataIndex != undefined) {
                    return [viewModel.Values[dataIndex].DataId];
                }
                return null;
            }
        };
    }
    _getWidget() {
        return this.pivotGridViewer;
    }
    _onCellPrepared(element) {
        var styleSettingsInfo, isMeasureHeader = (element.area === _utils_1.pivotArea.column || element.area === _utils_1.pivotArea.row) && element.cell.dataIndex !== undefined, cellItem = {
            area: element.area
        };
        if (!isMeasureHeader) {
            if (element.area === _utils_1.pivotArea.column) {
                cellItem.columnPath = element.cell.path;
                cellItem.columnType = element.cell.type;
            }
            else if (element.area === _utils_1.pivotArea.row) {
                cellItem.rowPath = element.cell.path;
                cellItem.rowType = element.cell.type;
            }
            else {
                cellItem.columnPath = element.cell.columnPath;
                cellItem.rowPath = element.cell.rowPath;
                cellItem.cellIndex = element.cell.dataIndex;
                cellItem.columnType = element.cell.columnType;
                cellItem.rowType = element.cell.rowType;
            }
            styleSettingsInfo = this._dataController.getStyleSettingsInfo(cellItem, this._collapseStateCache, this._conditionalFormattingInfoCache, this._pointsCache);
            this._styleSettingsProvider.applyStyleSettings(_jquery_helpers_1.$unwrap(element.cellElement), this.options.controlContainer, styleSettingsInfo, false, PIVOT_BAR_ID);
        }
    }
    _getFields() {
        if (!this._viewModel) {
            return undefined;
        }
        let columnFields = _pivot_grid_item_helper_1.pivotHelper.createAreaFields(this._viewModel.Columns, 'column', this._viewModel.AutoExpandColumnGroups);
        for (var i = 0; i < this._viewModel.Columns.length; i++) {
            columnFields[i].showTotals = this._viewModel.Columns[i].ShowTotals;
        }
        let rowFields = _pivot_grid_item_helper_1.pivotHelper.createAreaFields(this._viewModel.Rows, 'row', this._viewModel.AutoExpandRowGroups);
        for (var i = 0; i < this._viewModel.Rows.length; i++) {
            rowFields[i].showTotals = this._viewModel.Rows[i].ShowTotals;
        }
        let dataFields = _pivot_grid_item_helper_1.pivotHelper.createAreaFields(this._viewModel.Values, 'data');
        for (var i = 0; i < this._viewModel.Values.length; i++) {
            dataFields[i].showValues = this._viewModel.Values[i].ShowValues;
            dataFields[i].showTotals = this._viewModel.Values[i].ShowTotals;
            dataFields[i].showGrandTotals = this._viewModel.Values[i].ShowGrandTotals;
        }
        return columnFields
            .concat(rowFields)
            .concat(dataFields);
    }
    _createAndLoadDataSource() {
        return new Promise((resolve) => {
            let fields = this._getFields();
            let firstRequest = true;
            var dataSource = new data_source_1.default({
                remoteOperations: true,
                fields: fields,
                retrieveFields: false,
                load: (loadOptions) => {
                    if (firstRequest) {
                        firstRequest = false;
                        return [_pivot_grid_item_helper_1.pivotHelper.getSchemaRow(fields)];
                    }
                    else {
                        return this._dataUpdateHook ? this._dataUpdateHook.then(() => this._getLoadData(loadOptions)) : _jquery_helpers_1.createJQueryDeferred().reject().promise();
                    }
                }
            });
            dataSource.state(this._loadState(fields));
            dataSource.on('loadingChanged', args => {
                if (!dataSource.isLoading()) {
                    resolve({ dataSource, fields });
                }
            });
        });
    }
    _getLoadData(loadOptions) {
        if (!this._multiData || this._multiData.isEmpty()) {
            return undefined;
        }
        let group = loadOptions.group;
        let groupSummary = loadOptions.groupSummary;
        let totalSummary = loadOptions.totalSummary;
        let filter = _pivot_grid_item_helper_1.OneElementFilterRemover.simplify(loadOptions.filter);
        let availableByArea = {
            columns: _pivot_grid_item_helper_1.pivotHelper.getColumnAxis(this._multiData).getDimensions().map(c => c.id),
            rows: _pivot_grid_item_helper_1.pivotHelper.getRowAxis(this._multiData).getDimensions().map(r => r.id)
        };
        let filteredFields = _pivot_grid_item_helper_1.FieldsExtractor.extract(filter);
        let filteredByArea = {
            columns: filteredFields
                .filter(f => availableByArea.columns.filter(c => c === f)[0] != undefined)
                .sort((a, b) => availableByArea.columns.indexOf(a) - availableByArea.columns.indexOf(b)),
            rows: filteredFields
                .filter(f => availableByArea.rows.filter(c => c === f)[0] != undefined)
                .sort((a, b) => availableByArea.rows.indexOf(a) - availableByArea.rows.indexOf(b))
        };
        let groupedFields = group ? group.map(g => g.selector) : [];
        let groupedByArea = {
            columns: groupedFields.filter(f => availableByArea.columns.filter(c => c === f)[0] != undefined),
            rows: groupedFields.filter(f => availableByArea.rows.filter(c => c === f)[0] != undefined)
        };
        let firstIndexInGroup = {
            column: _utils_1.findIndex(groupedFields, f => availableByArea.columns.filter(c => c === f)[0] !== undefined),
            row: _utils_1.findIndex(groupedFields, f => availableByArea.rows.filter(c => c === f)[0] !== undefined)
        };
        let onlyFilteredByArea = {
            columns: _utils_1.distinct(_utils_1.minus(filteredByArea.columns, groupedByArea.columns)),
            rows: _utils_1.distinct(_utils_1.minus(filteredByArea.rows, groupedByArea.rows))
        };
        let fields;
        if (firstIndexInGroup.column === -1) {
            fields = onlyFilteredByArea.rows.concat(groupedFields).concat(onlyFilteredByArea.columns);
        }
        else if (firstIndexInGroup.row === -1) {
            fields = onlyFilteredByArea.columns.concat(groupedFields).concat(onlyFilteredByArea.rows);
        }
        else if (firstIndexInGroup.column < firstIndexInGroup.row) {
            fields = onlyFilteredByArea.columns
                .concat(groupedFields.slice(firstIndexInGroup.column, firstIndexInGroup.row))
                .concat(onlyFilteredByArea.rows)
                .concat(groupedFields.slice(firstIndexInGroup.row));
        }
        else {
            fields = onlyFilteredByArea.rows
                .concat(groupedFields.slice(firstIndexInGroup.row, firstIndexInGroup.column))
                .concat(onlyFilteredByArea.columns)
                .concat(groupedFields.slice(firstIndexInGroup.column));
        }
        let columnRoot = _pivot_grid_item_helper_1.pivotHelper.getColumnAxis(this._multiData).getRootPoint();
        let rowRoot = _pivot_grid_item_helper_1.pivotHelper.getRowAxis(this._multiData).getRootPoint();
        let getItems = (index, isColumn, point, oppositePoint, dimensionValues) => {
            let isLastGrouping = index + 1 >= fields.length;
            let items = [];
            let children = point.getChildren();
            let nextLevelIsColumn;
            let changeAreas;
            let name = fields[index];
            let onlyFiltered = isColumn ? onlyFilteredByArea.columns : onlyFilteredByArea.rows;
            let isOnlyFiltered = onlyFiltered.filter(f => f === name)[0] !== undefined;
            if (!isLastGrouping) {
                nextLevelIsColumn = availableByArea.columns.filter(c => c === fields[index + 1])[0] !== undefined;
                changeAreas = isColumn && !nextLevelIsColumn || !isColumn && nextLevelIsColumn;
            }
            let areaCache = isColumn ? this._pointsCache.columns : this._pointsCache.rows;
            for (let i = 0; i < children.length; i++) {
                let child = children[i];
                areaCache[child.getUniquePath().toString()] = child;
                let value = child.getUniqueValue();
                let dimVals = Object.assign(Object.assign({}, dimensionValues), { [name]: value });
                if (filter && !_pivot_grid_item_helper_1.FilterChecker.fits(dimVals, filter))
                    continue;
                let subItems;
                if (!isLastGrouping) {
                    let nextLevelPoint = child;
                    let nextLevelOppositePoint = oppositePoint;
                    if (changeAreas) {
                        nextLevelPoint = oppositePoint;
                        nextLevelOppositePoint = child;
                    }
                    subItems = getItems(index + 1, nextLevelIsColumn, nextLevelPoint, nextLevelOppositePoint, dimVals);
                }
                else {
                    subItems = null;
                }
                if (isOnlyFiltered) {
                    if (subItems && subItems.length > 0)
                        items = items.concat(subItems);
                }
                else {
                    items.push({
                        key: value,
                        displayText: value === special_values_1.specialValues.olapNullValueGuid ? _localizer_1.localizer.getString(_localization_ids_1.localizationId.OlapRaggedHierarchyNoneItemCaption) : child.getDisplayText(),
                        items: subItems,
                        summary: groupSummary.map(s => this._multiData.getMeasureValueByAxisPoints(s.selector, [child, oppositePoint]).getDisplayText())
                    });
                }
            }
            return items.length !== 0 ? items : null;
        };
        let res = {};
        if (groupedFields && groupedFields.length > 0) {
            let isColumn = !!availableByArea.columns.filter(c => c === fields[0])[0];
            res.data = getItems(0, isColumn, isColumn ? columnRoot : rowRoot, isColumn ? rowRoot : columnRoot, {}) || [];
        }
        else {
            res.data = [_pivot_grid_item_helper_1.pivotHelper.getSchemaRow(this._getFields())];
        }
        if (totalSummary)
            res.summary = totalSummary.map(s => this._multiData.getMeasureValueByAxisPoints(s.selector, [columnRoot, rowRoot]).getDisplayText());
        return res;
    }
}
exports.pivotGridItem = pivotGridItem;


/***/ }),

/***/ 35814:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DateTimePeriodConverter = void 0;
const _range_filter_selection_validator_1 = __webpack_require__(82748);
function getFirstWeekDate(date, firstDayOfWeek) {
    const delta = (date.getDay() - firstDayOfWeek + 7) % 7;
    const result = new Date(date);
    result.setDate(date.getDate() - delta);
    return result;
}
class DateTimePeriodConverter {
    static toRange(period, firstDayOfWeek) {
        let now = new Date();
        var range = {
            startValue: this._getDateTime(period.Start, now, firstDayOfWeek),
            endValue: this._getDateTime(period.End, now, firstDayOfWeek)
        };
        let endLimit = period.Start && period.End && period.End < period.Start ? period.Start : period.End;
        range = _range_filter_selection_validator_1.RangeFilterSelectionValidator.validateLimitsOrder(range);
        if (endLimit && endLimit.Relative) {
            range.endValue.setMilliseconds(range.endValue.getMilliseconds() - 1);
            range = _range_filter_selection_validator_1.RangeFilterSelectionValidator.validateLimitsOrder(range);
        }
        return range;
    }
    static _getDateTime(limit, now, firstDayOfWeek) {
        if (limit) {
            if (!limit.Relative)
                return limit.Date;
            switch (limit.Interval) {
                case 'Year':
                    return new Date(now.getFullYear() + limit.Offset, 0, 1);
                case 'Quarter':
                    var quarterIndex = Math.floor(now.getMonth() / 3);
                    return new Date(now.getFullYear(), quarterIndex * 3 + 3 * limit.Offset, 1);
                case 'Month':
                    return new Date(now.getFullYear(), now.getMonth() + limit.Offset, 1);
                case 'Week':
                    var firstDayOfCurrentWeek = getFirstWeekDate(now, firstDayOfWeek);
                    return new Date(firstDayOfCurrentWeek.getFullYear(), firstDayOfCurrentWeek.getMonth(), firstDayOfCurrentWeek.getDate() + 7 * limit.Offset);
                case 'Day':
                    return new Date(now.getFullYear(), now.getMonth(), now.getDate() + limit.Offset);
                case 'Hour':
                    return new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours() + limit.Offset, 0, 0, 0);
                case 'Minute':
                    return new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours(), now.getMinutes() + limit.Offset, 0, 0);
                case 'Second':
                    return new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours(), now.getMinutes(), now.getSeconds() + limit.Offset, 0);
            }
        }
    }
}
exports.DateTimePeriodConverter = DateTimePeriodConverter;


/***/ }),

/***/ 82748:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RangeFilterSelectionValidator = void 0;
class RangeFilterSelectionValidator {
    static validate(range, isYearGroupInterval, entireRange) {
        let validatedRange = this._prepareYearRangeBeforeSelection(range, isYearGroupInterval);
        validatedRange = this._validateValues(validatedRange, entireRange || { maximum: null, minimum: null });
        validatedRange = this.validateLimitsOrder(validatedRange);
        if (entireRange) {
            validatedRange = this._validateOutOfRange(validatedRange, entireRange);
        }
        return validatedRange;
    }
    static validateLimitsOrder(range) {
        if (range.startValue && range.endValue && range.startValue > range.endValue) {
            return {
                startValue: range.endValue,
                endValue: range.startValue
            };
        }
        return range;
    }
    static isValidValue(value) {
        return (typeof value === 'number') || (value instanceof Date);
    }
    static _validateValues(range, entireRange) {
        return {
            startValue: RangeFilterSelectionValidator.isValidValue(range.startValue) ? range.startValue : entireRange.minimum,
            endValue: RangeFilterSelectionValidator.isValidValue(range.endValue) ? range.endValue : entireRange.maximum
        };
    }
    static _validateOutOfRange(range, entireRange) {
        let startValue = range.startValue >= entireRange.minimum ? range.startValue : entireRange.minimum;
        startValue = startValue <= entireRange.maximum ? startValue : entireRange.minimum;
        let endValue = range.endValue <= entireRange.maximum ? range.endValue : entireRange.maximum;
        endValue = endValue >= entireRange.minimum ? endValue : entireRange.maximum;
        return {
            startValue: startValue,
            endValue: endValue
        };
    }
    static _prepareYearRangeBeforeSelection(range, isYearGroupInterval) {
        let prepareYearBeforeSelection = (value) => {
            return value && value.getFullYear ? value.getFullYear() : value;
        };
        if (isYearGroupInterval) {
            return {
                startValue: prepareYearBeforeSelection(range.startValue),
                endValue: prepareYearBeforeSelection(range.endValue)
            };
        }
        else {
            return range;
        }
    }
}
exports.RangeFilterSelectionValidator = RangeFilterSelectionValidator;


/***/ }),

/***/ 45019:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.rangeFilterSelection = exports.rangeSelectorItem = void 0;
const range_selector_1 = __webpack_require__(15781);
const special_values_1 = __webpack_require__(91571);
const _chart_helper_1 = __webpack_require__(11222);
const _common_1 = __webpack_require__(29009);
const _format_helper_1 = __webpack_require__(27893);
const _jquery_helpers_1 = __webpack_require__(59384);
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const _utils_1 = __webpack_require__(7590);
const caption_toolbar_options_1 = __webpack_require__(57731);
const _caption_toolbar_css_classes_1 = __webpack_require__(83629);
const _custom_time_period_dialog_1 = __webpack_require__(47164);
const _render_helper_1 = __webpack_require__(39336);
const _base_item_1 = __webpack_require__(11439);
const _range_filter_selection_validator_1 = __webpack_require__(82748);
var DayIntervalWidthInPixels = 25, MonthIntervalWidthInPixels = 40, QuarterIntervalWidthInPixels = 20;
class rangeSelectorItem extends _base_item_1.baseItem {
    constructor(container, options) {
        super(container, options);
        this.itemElementCustomColor = _jquery_helpers_1.createJQueryCallbacks();
        this.timePeriodMenuSelectedIndex = undefined;
    }
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    get _isBottomFloatingToolbarPosition() {
        return true;
    }
    _getCustomTimePeriodDialog() {
        if (!this._customTimePeriodDialog) {
            this._customTimePeriodDialog = new _custom_time_period_dialog_1.customTimePeriodDialog({
                container: _jquery_helpers_1.closest(this.container, '.' + _caption_toolbar_css_classes_1.cssClasses.dashboardContainer),
                setRange: (range) => {
                    this.selected.fire(this.getName(), _common_1.viewerActions.setMasterFilter, [[range.startValue, range.endValue]]);
                }
            });
        }
        return this._customTimePeriodDialog;
    }
    _initializeData(newOptions) {
        super._initializeData(newOptions);
        if (this._dataController) {
            this._dataController.elementCustomColor = (args) => this._elementCustomColor(args);
        }
    }
    _clearSelectionUnsafe() {
        this._setRange([]);
    }
    _clearSelectionBase() {
        this.timePeriodMenuSelectedIndex = undefined;
    }
    _setSelectionUnsafe(values) {
        this._setRange(values && values.length > 0 ? values[0] : []);
    }
    _getCurrentRange() {
        var value = this._getSelectedValues();
        let startValue, endValue;
        if (value && value !== null) {
            startValue = value[0];
            endValue = value[1];
        }
        if (!_utils_1.type.isDefined(startValue) || !_utils_1.type.isDefined(endValue)) {
            let entireRange = this._getEntireRange();
            if (!_utils_1.type.isDefined(startValue))
                startValue = entireRange.startValue;
            if (!_utils_1.type.isDefined(endValue))
                endValue = entireRange.endValue;
        }
        return new rangeFilterSelection({ startValue, endValue });
    }
    getEntireRange() {
        return new rangeFilterSelection(this._getEntireRange());
    }
    dispose() {
        super.dispose();
        var customPeriodForm = this._getCustomTimePeriodDialog();
        if (customPeriodForm) {
            customPeriodForm.dispose();
        }
        this.rangeSelectorViewer && this.rangeSelectorViewer.dispose();
    }
    _setRange(range) {
        this._setSelectedValues([range]);
        if (this.hasWidget) {
            this._lock();
            this.rangeSelectorViewer.setValue(range);
            this._unlock();
        }
        else {
            this.selected.fire(this.getName(), _common_1.viewerActions.setMasterFilter, [range]);
        }
    }
    _setPredefinedRange(dateTimePeriodName) {
        let dateTimePeriods = this.options.ViewModel.DateTimePeriods;
        let period = dateTimePeriods.filter(dateTimePeriod => dateTimePeriod.Name === dateTimePeriodName)[0];
        this.timePeriodMenuSelectedIndex = !!period ? dateTimePeriods.indexOf(period) : undefined;
        this.updateCaptionToolbar();
    }
    _getAvailablePredefinedRanges() {
        return this.options.ViewModel.DateTimePeriods.map(period => period.Name);
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        var that = this, options = this._getRangeSelectorViewerOptions();
        var isFirstInitialization = !changeExisting || !that.rangeSelectorViewer;
        this._lock();
        this._raiseItemWidgetOptionsPrepared(options);
        try {
            if (isFirstInitialization) {
                this.rangeSelectorViewer = new range_selector_1.default(element, options);
            }
            else {
                this.rangeSelectorViewer.option(options);
            }
        }
        finally {
            this._unlock();
        }
        this.timePeriodMenuSelectedIndex = this.options.ViewModel.SelectedPeriodIndex;
        return false;
    }
    _isBorderRequired() {
        return false;
    }
    _getContainerPositionUnsafe() {
        var position = super._getContainerPositionUnsafe(), buttonOffset = this._getButtonOffset(true);
        position.offsetY = position.height - buttonOffset.top;
        return position;
    }
    _getFirstDayOfWeek() {
        var rangeDataController = this.dataController;
        var argumentFormat = rangeDataController.getArgumentFormat();
        return argumentFormat ? argumentFormat.firstDayOfWeek : null;
    }
    _getRangeSelectorViewerOptions() {
        var that = this;
        let rangeDataController = that.dataController;
        var viewModel = that.options.ViewModel, argument = viewModel.Argument, scaleType = rangeSelectorItem._getScaleType(argument), seriesTemplates = viewModel.SeriesTemplates, selectedValues = this._getSelectedValues(), dataSourceAndSeries = rangeDataController.getDataSourceAndSeries(that._isEncodeHtml()), tickMarkInterval = undefined, animation = that._getAnimationOptions(), options = {
            scale: {
                axisDivisionFactor: null,
                type: null,
                marker: {
                    visible: false
                }
            },
            encodeHtml: that._isEncodeHtml(),
            margin: {
                top: 10,
                bottom: 15
            }
        };
        if (scaleType !== 'discrete') {
            let entireRange = this._getEntireRangeByDataSource(dataSourceAndSeries.dataSource);
            options.scale.startValue = entireRange.startValue;
            options.scale.endValue = entireRange.endValue;
        }
        else {
            options.scale.startValue = null;
            options.scale.endValue = null;
        }
        if (!this._isValidValues(selectedValues)) {
            options.value = [selectedValues[0], selectedValues[1]];
        }
        var argumentFormat = rangeDataController.getArgumentFormat();
        options.scale.label = {
            format: (value) => _format_helper_1.DashboardFormatHelper.format(value, argumentFormat)
        };
        options.scale.valueType = argument.Type == 'DateTime' ? 'datetime' : 'numeric';
        options.sliderMarker = {
            format: (value) => _format_helper_1.DashboardFormatHelper.format(value, argumentFormat)
        };
        let dataSource = dataSourceAndSeries.dataSource;
        options.scale.type = scaleType;
        if (argument) {
            if ((argument.DateTimeGroupInterval === 'Year' && argument.Type === 'DateTime') ||
                !argument.IsContinuousDateTimeScale) {
                tickMarkInterval = rangeDataController.isDiscreteArgument() || argument.Type == 'Integer' ? 1 : _chart_helper_1.chartHelper.convertPresentationUnit(argument);
                if (tickMarkInterval) {
                    var firstDayOfWeek = this._getFirstDayOfWeek();
                    if (tickMarkInterval === 'week') {
                        if (Number.isInteger(firstDayOfWeek)) {
                            options.scale.workWeek = [firstDayOfWeek];
                        }
                        else {
                            throw new Error('First Day Of Week is not defined for range filter agrument');
                        }
                    }
                    options.scale.minorTick = {
                        visible: false
                    };
                    options.behavior = {
                        snapToTicks: true,
                        animationEnabled: animation.enabled
                    };
                    options.scale.minRange = tickMarkInterval;
                    if (scaleType === 'semidiscrete') {
                        options.scale.axisDivisionFactor = {
                            day: DayIntervalWidthInPixels,
                            month: MonthIntervalWidthInPixels,
                            quarter: QuarterIntervalWidthInPixels
                        };
                    }
                }
            }
            else {
                options.behavior = {
                    snapToTicks: false,
                    animationEnabled: animation.enabled
                };
            }
        }
        options.dataSource = dataSource;
        let chartSeries = dataSourceAndSeries.series;
        if (scaleType === 'discrete') {
            chartSeries.forEach(series => {
                series.ignoreEmptyPoints = true;
            });
        }
        options.chart = {
            series: chartSeries,
            commonSeriesSettings: {
                type: seriesTemplates && seriesTemplates.length > 0 ? (_chart_helper_1.chartHelper.convertSeriesType(seriesTemplates[0].SeriesType)) : null
            },
            palette: _render_helper_1.RenderHelper.getDefaultPalette()
        };
        options.onValueChanged = that._getSelectedRangeChangedHandler();
        return options;
    }
    _getEntireRange() {
        let rangeDataController = this.dataController;
        let dataSourceAndSeries = rangeDataController.getDataSourceAndSeries(this._isEncodeHtml());
        return this._getEntireRangeByDataSource(dataSourceAndSeries.dataSource);
    }
    _getEntireRangeByDataSource(dataSource) {
        let range;
        let lastDataItemIndex = dataSource ? _utils_1.findLastIndex(dataSource, item => this._checkAxisXValue(item.x)) : -1;
        if (lastDataItemIndex > 0) {
            let firstDataItemIndex = _utils_1.findIndex(dataSource, item => this._checkAxisXValue(item.x));
            let isQualitativeArgument = this.dataController.isQualitativeArgument();
            range = {
                startValue: isQualitativeArgument ? firstDataItemIndex : dataSource[firstDataItemIndex].x,
                endValue: isQualitativeArgument ? lastDataItemIndex : dataSource[lastDataItemIndex].x
            };
        }
        else {
            range = {
                startValue: null,
                endValue: null
            };
        }
        return range;
    }
    _checkAxisXValue(value) {
        return _utils_1.type.isDefined(value) && Object.keys(special_values_1.specialValues).filter(specialValueName => special_values_1.specialValues[specialValueName] === value).length === 0;
    }
    _getSelectedValues() {
        let allSelectedValues = super._getSelectedValues();
        return allSelectedValues ? allSelectedValues[0] : null;
    }
    _isValidValues(values) {
        if (values && values.length) {
            var startValue = values[0], endValue = values[1];
            if (_range_filter_selection_validator_1.RangeFilterSelectionValidator.isValidValue(startValue) && _range_filter_selection_validator_1.RangeFilterSelectionValidator.isValidValue(endValue))
                return false;
        }
        return true;
    }
    _getSliderMarkerFormat() {
        return this._dataController.isSingleArgument() ? this._dataController.getSingleArgumentDimensionFormat() : undefined;
    }
    static _getScaleType(argument) {
        if (argument) {
            let dateTimeGroupInterval = argument.DateTimeGroupInterval;
            switch (argument.Type) {
                case 'String':
                    let groupIntervalScaleType = rangeSelectorItem._getStringScaleTypeByGroupInterval(dateTimeGroupInterval);
                    return _utils_1.type.isDefined(groupIntervalScaleType) ? groupIntervalScaleType : 'discrete';
                case 'Integer':
                    return 'semidiscrete';
                case 'DateTime':
                    return rangeSelectorItem._getDateTimeScaleType(dateTimeGroupInterval);
                default:
                    return null;
            }
        }
    }
    static _getStringScaleTypeByGroupInterval(dateTimeGroupInterval) {
        switch (dateTimeGroupInterval) {
            case 'Year':
            case 'Quarter':
            case 'Month':
            case 'Day':
            case 'Hour':
            case 'Minute':
            case 'Second':
            case 'DayOfYear':
            case 'DayOfWeek':
            case 'WeekOfYear':
            case 'WeekOfMonth':
                return 'semidiscrete';
        }
        return undefined;
    }
    static _getDateTimeScaleType(dateTimeGroupInterval) {
        switch (dateTimeGroupInterval) {
            case 'Year':
            case 'QuarterYear':
            case 'MonthYear':
            case 'WeekYear':
            case 'DayMonthYear':
                return 'semidiscrete';
        }
        return null;
    }
    _getSelectedRangeChangedHandler() {
        var that = this;
        return function (e) {
            if (!that._isLocked()) {
                that.selected.fire(that.getName(), _common_1.viewerActions.setMasterFilter, [e.value]);
            }
        };
    }
    _resizeUnsafe() {
        super._resizeUnsafe();
        if (_jquery_helpers_1.isVisible(this.container)) {
            this.rangeSelectorViewer.render();
        }
    }
    _getWidget() {
        return this.rangeSelectorViewer;
    }
    _elementCustomColor(eventArgs) {
        this.itemElementCustomColor.fire(this.getName(), eventArgs);
    }
    _hasTimePeriods() {
        return true;
    }
    _isDateTimePeriodSupported() {
        return this.options.ViewModel.SupportDateTimePeriods;
    }
    _getSpecificActionToolbarItems() {
        if (this.options.ViewModel.SupportDateTimePeriods) {
            if (this.options.ViewModel.DateTimePeriods.length > 0) {
                let dateTimePeriodNames = this.options.ViewModel.DateTimePeriods.map(period => (period.Name));
                dateTimePeriodNames.push(_localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.CustomPeriod));
                return [{
                        menu: {
                            name: caption_toolbar_options_1.dashboardToolbarItemNames.dateTimePeriodMenu,
                            items: dateTimePeriodNames,
                            selectedItems: this.timePeriodMenuSelectedIndex !== undefined ? [dateTimePeriodNames[this.timePeriodMenuSelectedIndex]] : [],
                            selectionMode: 'multiple',
                            itemClick: (itemData, itemElement, index) => {
                                var viewModel = this.options.ViewModel, dateTimePeriods = viewModel.DateTimePeriods;
                                if (index >= 0 && index < dateTimePeriods.length) {
                                    if (this.timePeriodMenuSelectedIndex !== index) {
                                        this._raisePredefinedPeriodSelected(index);
                                    }
                                }
                                else {
                                    this._showCustomTimePeriodDialog();
                                }
                            },
                            type: 'list'
                        },
                        icon: _caption_toolbar_css_classes_1.cssClasses.iconTimePeriods,
                        type: 'menu',
                        hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.AddTimePeriod),
                    }];
            }
            else {
                return [{
                        name: caption_toolbar_options_1.dashboardToolbarItemNames.customDateTimePeriod,
                        icon: _caption_toolbar_css_classes_1.cssClasses.iconTimePeriods,
                        type: 'button',
                        hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.AddTimePeriod),
                        click: (element) => {
                            this._showCustomTimePeriodDialog();
                        }
                    }];
            }
        }
        else
            return [];
    }
    _raisePredefinedPeriodSelected(index) {
        let name = this.options.ViewModel.DateTimePeriods[index].Name;
        this.predefinedRangeChanged && this.predefinedRangeChanged(name);
    }
    _showCustomTimePeriodDialog() {
        this._getCustomTimePeriodDialog().show({
            range: this._getCurrentRange(),
            groupInterval: this.options.ViewModel.Argument.DateTimeGroupInterval,
            isIntYearGroupInterval: this._isIntYearGroupInterval(),
            firstDayOfWeek: this._getFirstDayOfWeek(),
            displayFormat: this._getSliderMarkerFormat()
        });
    }
    _isIntYearGroupInterval() {
        var viewModel = this.options.ViewModel, argument = viewModel.Argument;
        return argument && argument.DateTimeGroupInterval === 'Year' && argument.Type !== 'DateTime';
    }
}
exports.rangeSelectorItem = rangeSelectorItem;
class rangeFilterSelection {
    constructor(range) {
        this.setMinimum(range.startValue);
        this.setMaximum(range.endValue);
    }
    getMaximum() {
        return this.maximum;
    }
    setMaximum(value) {
        this.maximum = value;
    }
    getMinimum() {
        return this.minimum;
    }
    setMinimum(value) {
        this.minimum = value;
    }
}
exports.rangeFilterSelection = rangeFilterSelection;


/***/ }),

/***/ 95259:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.convertCssPropertyWrappersToString = exports.createCssClass = exports.getEmptyCssPropertyWrappersArray = exports.createCssPropertyWrapper = void 0;
function createCssPropertyWrapper(propertyName, propertyValue) {
    return { propertyName: propertyName, propertyValue: propertyValue };
}
exports.createCssPropertyWrapper = createCssPropertyWrapper;
function getEmptyCssPropertyWrappersArray() {
    return [];
}
exports.getEmptyCssPropertyWrappersArray = getEmptyCssPropertyWrappersArray;
function createCssClass(cssSelector, cssProperties) {
    var style = document.createElement('style');
    style.setAttribute('type', 'text/css');
    style.textContent = cssSelector + ' {' + convertCssPropertyWrappersToString(cssProperties) + '}';
    document.head.appendChild(style);
    return style;
}
exports.createCssClass = createCssClass;
function convertCssPropertyWrappersToString(properties) {
    return properties
        .filter(x => x && x.propertyValue)
        .map(value => value.propertyName + ': ' + value.propertyValue + ';')
        .join(' ');
}
exports.convertCssPropertyWrappersToString = convertCssPropertyWrappersToString;


/***/ }),

/***/ 6943:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardViewerConstants = void 0;
class DashboardViewerConstants {
}
exports.DashboardViewerConstants = DashboardViewerConstants;
DashboardViewerConstants.minPaneHeight = 20;
DashboardViewerConstants.minPaneWidth = 50;
DashboardViewerConstants.elementsCountAnimationThreshold = 7;


/***/ }),

/***/ 52783:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createWidgetOptionsEventArgs = exports.createWidgetEventArgs = exports.createItemInteractivityEventArgs = exports.createItemElementCustomColorEventArgs = exports.createItemSelectionChangedEventArgs = exports.createItemClickEventArgs = void 0;
__webpack_require__(89380);
const _item_data_tuple_1 = __webpack_require__(60367);
const chart_item_1 = __webpack_require__(99237);
const data_dashboard_item_1 = __webpack_require__(70355);
const gauge_item_1 = __webpack_require__(19851);
const grid_item_1 = __webpack_require__(74873);
const item_widget_event_args_1 = __webpack_require__(59036);
const createItemClickEventArgs = (dashboardItem, dataPoint, requestUnderlyingDataFunc) => {
    let itemData = dashboardItem._getItemData();
    const patchAxisName = (axisName) => {
        if (axisName === undefined)
            axisName = 'Default';
        return axisName;
    };
    const getAxis = (axisName) => {
        return itemData.getAxis(patchAxisName(axisName));
    };
    const getAxisPoint = (axisName) => {
        axisName = patchAxisName(axisName);
        return getAxis(axisName).getPointByUniqueValues(dataPoint.getValues(axisName));
    };
    return {
        itemName: dashboardItem.componentName(),
        dashboardItem: dashboardItem,
        getData: function () {
            return itemData;
        },
        getAxisPoint: getAxisPoint,
        getMeasures: () => {
            return itemData.getMeasuresByIds(dataPoint.getMeasureIds());
        },
        getDeltas: function () {
            var ids = dataPoint.getDeltaIds(), deltas = [];
            ids.forEach(id => {
                deltas.push(itemData.getDeltaById(id));
            });
            return deltas;
        },
        getDimensions: (axisName) => {
            return getAxis(axisName).getDimensions();
        },
        requestUnderlyingData: function (onCompleted, dataMembers) {
            var axisPoints = [];
            itemData.getAxisNames().forEach(axisName => {
                axisPoints.push(getAxisPoint(axisName));
            });
            requestUnderlyingDataFunc(dashboardItem.componentName(), {
                axisPoints: axisPoints,
                dataMembers: dataMembers
            }, onCompleted);
        }
    };
};
exports.createItemClickEventArgs = createItemClickEventArgs;
const createItemSelectionChangedEventArgs = (dashboardItem, tuples) => {
    return {
        itemName: dashboardItem.componentName(),
        dashboardItem: dashboardItem,
        getCurrentSelection: function () {
            let axisPointTuples = [];
            tuples.forEach(tuple => {
                axisPointTuples.push(dashboardItem._getItemData().createTuple(tuple));
            });
            return axisPointTuples;
        }
    };
};
exports.createItemSelectionChangedEventArgs = createItemSelectionChangedEventArgs;
const createItemElementCustomColorEventArgs = (dashboardItem, eventArgs) => {
    return {
        itemName: dashboardItem.componentName(),
        dashboardItem: dashboardItem,
        getTargetElement: function () {
            return new _item_data_tuple_1.itemDataTuple(eventArgs.targetElement);
        },
        getMeasures: function () {
            return dashboardItem._getItemData().getMeasuresByIds(eventArgs.measureIds);
        },
        getColor: function () {
            return eventArgs.color;
        },
        setColor: function (color) {
            eventArgs.color = color;
        }
    };
};
exports.createItemElementCustomColorEventArgs = createItemElementCustomColorEventArgs;
const createItemInteractivityEventArgs = (dashboardItem, interactivityOptions) => {
    return {
        itemName: dashboardItem.componentName(),
        dashboardItem: dashboardItem,
        getSelectionMode: function () { return interactivityOptions.selectionMode; },
        setSelectionMode: function (value) { interactivityOptions.selectionMode = value; },
        isHighlightingEnabled: function () { return interactivityOptions.hoverEnabled; },
        enableHighlighting: function (value) { interactivityOptions.hoverEnabled = value; },
        getTargetAxes: function () { return interactivityOptions.targetAxes; },
        setTargetAxes: function (value) { interactivityOptions.targetAxes = value; },
        getDefaultSelection: function () {
            let realTuples = [];
            interactivityOptions.defaultSelectedValues.forEach(tuple => {
                realTuples.push(dashboardItem._getItemData().createTuple(tuple));
            });
            return realTuples;
        },
        setDefaultSelection: function (realTuples) {
            let tuples = [], tuple;
            realTuples.forEach(realTuple => {
                tuple = [];
                interactivityOptions.targetAxes.forEach(axisName => {
                    tuple.push({
                        AxisName: axisName,
                        Value: realTuple.getAxisPoint(axisName).getUniquePath()
                    });
                });
                tuples.push(tuple);
            });
            interactivityOptions.defaultSelectedValues = tuples;
        }
    };
};
exports.createItemInteractivityEventArgs = createItemInteractivityEventArgs;
const createBaseWidgetEventArgs = (dashboardItem) => {
    var itemData = dashboardItem instanceof data_dashboard_item_1.DataDashboardItem ? dashboardItem._getItemData() : null;
    return {
        itemName: dashboardItem.componentName(),
        itemData: itemData,
        dashboardItem: dashboardItem,
        chartContext: dashboardItem instanceof chart_item_1.ChartItem ? new item_widget_event_args_1.ChartContext(dashboardItem) : null,
        gridContext: dashboardItem instanceof grid_item_1.GridItem ? new item_widget_event_args_1.GridContext(dashboardItem) : null,
        gaugeContext: dashboardItem instanceof gauge_item_1.GaugeItem ? new item_widget_event_args_1.GaugeContext(dashboardItem) : null
    };
};
const createWidgetEventArgs = (dashboardItem, widget) => {
    return Object.assign({ getWidget: function () { return widget; } }, createBaseWidgetEventArgs(dashboardItem));
};
exports.createWidgetEventArgs = createWidgetEventArgs;
const createWidgetOptionsEventArgs = (dashboardItem, options) => {
    return Object.assign({ options: options }, createBaseWidgetEventArgs(dashboardItem));
};
exports.createWidgetOptionsEventArgs = createWidgetOptionsEventArgs;


/***/ }),

/***/ 19664:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 59036:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GaugeContext = exports.GridContext = exports.ChartContext = void 0;
__webpack_require__(89380);
const _common_1 = __webpack_require__(29009);
class ChartContext {
    constructor(_dashboardItem) {
        this._dashboardItem = _dashboardItem;
    }
    getDashboardItemSeries(seriesOptions) {
        return this._dashboardItem
            .panes()
            .reduce((acc, pane) => acc.concat(pane.series()), [])
            .filter(series => seriesOptions[_common_1.DashboardDataIdField] && series._getDataId() === seriesOptions[_common_1.DashboardDataIdField])[0];
    }
}
exports.ChartContext = ChartContext;
class GridContext {
    constructor(_dashboardItem) {
        this._dashboardItem = _dashboardItem;
    }
    getDashboardItemColumn(columnOptions) {
        return this._dashboardItem
            .columns()
            .filter(column => columnOptions[_common_1.DashboardDataIdField] && column._getDataId() === columnOptions[_common_1.DashboardDataIdField])[0];
    }
}
exports.GridContext = GridContext;
class GaugeContext {
    constructor(_dashboardItem) {
        this._dashboardItem = _dashboardItem;
    }
    getDashboardItemGauge(gaugeOptions) {
        return this._dashboardItem
            .gauges()
            .filter(gauge => gaugeOptions[_common_1.DashboardDataIdField] && gauge._getDataId() === gaugeOptions[_common_1.DashboardDataIdField])[0];
    }
}
exports.GaugeContext = GaugeContext;


/***/ }),

/***/ 39336:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createFakeObjects = exports.RenderHelper = void 0;
const string_1 = __webpack_require__(36306);
const scroll_view_1 = __webpack_require__(45664);
const $ = __webpack_require__(65311);
const _jquery_helpers_1 = __webpack_require__(59384);
const _cacheable_1 = __webpack_require__(41603);
class RenderHelper {
    static html(element, content, encodeHtml) {
        if (encodeHtml) {
            element.innerText = content;
        }
        else {
            element.innerHTML = content;
        }
    }
    static rectangle(color, width, height) {
        var w = width != 0 ? width || 10 : 0, h = height || 10;
        return string_1.format("<div style='display:inline-block;width:{0}px;height:{1}px;background-color:{2};padding:0px;margin:0px;'></div>", w, h, color);
    }
    static getActualBorder($element) {
        return {
            width: $element.outerWidth() - $element.width(),
            height: $element.outerHeight() - $element.height()
        };
    }
    static getActualSize($element, collapse = false) {
        if (!$element || $element.length === 0) {
            return { width: 0, height: 0 };
        }
        var values = [];
        if (collapse) {
            $.each($element.children(), (index, child) => {
                values.push(child.style.display);
                child.style.display = 'none';
            });
        }
        try {
            var border = this.getActualBorder($element), isBorderBox = $element.css('box-sizing') == 'border-box';
            return {
                width: $element.width() - (isBorderBox ? 0 : border.width),
                height: $element.height() - (isBorderBox ? 0 : border.height)
            };
        }
        finally {
            if (collapse) {
                $.each($element.children(), (index, child) => {
                    child.style.display = values[index];
                });
            }
        }
    }
    static getDefaultPalette() {
        return ['#5F8195', '#B55951', '#AEAF69', '#915E64', '#758E6D', '#85688C', '#91B9C7', '#E49B86'];
    }
    static getScrollable(element) {
        return scroll_view_1.default.getInstance(element);
    }
    static updateScrollable(element) {
        var scrollable = this.getScrollable(element);
        if (scrollable) {
            scrollable.update();
        }
    }
    static wrapScrollable(container, parentOverflow, direction) {
        var scrollableContent = undefined, scrollableOptions = {
            bounceEnabled: false,
            showScrollbar: 'onHover',
            direction: direction
        };
        if (container) {
            var scrollableInstance = scroll_view_1.default.getInstance(container);
            if (scrollableInstance) {
                scrollableInstance.option(scrollableOptions);
            }
            else {
                scrollableInstance = new scroll_view_1.default(container, scrollableOptions);
            }
            scrollableContent = _jquery_helpers_1.$unwrap(scrollableInstance.content());
        }
        return scrollableContent;
    }
    static getElementBox(element) {
        var $fakeContainer = $.fn.constructor('<div>', {
            css: {
                position: 'absolute',
                top: 0,
                left: 0,
                visibility: 'hidden',
                overflow: 'hidden'
            }
        }).appendTo($.fn.constructor(RenderHelper.getThemeBaseElement()));
        $fakeContainer.append(element);
        try {
            return {
                width: $fakeContainer.outerWidth(),
                height: $fakeContainer.outerHeight()
            };
        }
        finally {
            $fakeContainer.remove();
        }
    }
    static processElement($element, processElement) {
        var $fakeContainer = $.fn.constructor('<div>', {
            css: {
                position: 'absolute',
                top: 0,
                left: 0,
                visibility: 'hidden',
                overflow: 'hidden'
            }
        }).appendTo($.fn.constructor(RenderHelper.getThemeBaseElement()));
        $fakeContainer.append($element);
        try {
            return processElement();
        }
        finally {
            $fakeContainer.remove();
        }
    }
    static getElementBoxFloat(e) {
        var style = window.getComputedStyle(e);
        var boxSizing = style['box-sizing'];
        var rect = e.getBoundingClientRect();
        var size = {
            width: rect.width + parseFloat(style.marginLeft) + parseFloat(style.marginRight),
            height: rect.height + parseFloat(style.marginTop) + parseFloat(style.marginBottom)
        };
        if (boxSizing === 'content-box' || boxSizing === 'padding-box') {
            size.width += parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth);
            size.height += parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);
            if (boxSizing === 'content-box') {
                size.width += parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
                size.height += parseFloat(style.paddingTop) + parseFloat(style.paddingBottom);
            }
        }
        return size;
    }
    static widgetIncidentOccurred(e) {
    }
    static getBorderSizeByClasses(classNames) {
        if (classNames && classNames.length > 0) {
            var fakeObjs = createFakeObjects(classNames, { width: 100, height: 100 });
            try {
                return RenderHelper.getActualBorder(fakeObjs.lastElement);
            }
            finally {
                fakeObjs.remove();
            }
        }
        else {
            return {
                width: 0,
                height: 0
            };
        }
    }
}
RenderHelper.getThemeBaseElement = () => document.body;
__decorate([
    _cacheable_1.cacheable('getBorderSizeByClasses')
], RenderHelper, "getBorderSizeByClasses", null);
exports.RenderHelper = RenderHelper;
function createFakeObjects(classNames, cssOptions) {
    var firstElement, prevElement, currElement;
    $.each(classNames, function (_, name) {
        currElement = $.fn.constructor('<div>', {
            css: Object.assign({ position: 'absolute', top: 0, left: 0, visibility: 'hidden', overflow: 'hidden' }, cssOptions)
        });
        currElement.appendTo(prevElement ? prevElement : $.fn.constructor('body'));
        currElement.addClass(name);
        prevElement = currElement;
        if (!firstElement)
            firstElement = currElement;
    });
    return {
        firstElement: firstElement,
        lastElement: currElement,
        remove: function () {
            firstElement.remove();
        }
    };
}
exports.createFakeObjects = createFakeObjects;


/***/ }),

/***/ 46109:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardCaptionToolbarAdapter = void 0;
const tooltip_1 = __webpack_require__(87441);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _render_helper_1 = __webpack_require__(39336);
const _caption_toolbar_css_classes_1 = __webpack_require__(83629);
const _popup_menu_creator_1 = __webpack_require__(46474);
class DashboardCaptionToolbarAdapter {
    constructor(_encodeHtml) {
        this._encodeHtml = _encodeHtml;
    }
    createToolbarItem(item, controlContainer, popupContainer, onMenuItemClick) {
        if (item.isSeparator)
            return this._createSeparatorItem(item);
        this._validate(item);
        let toolbarItem = {
            location: item.location
        };
        if (item.type === 'button' || item.type === 'menu') {
            toolbarItem.widget = 'dxButton';
            toolbarItem.options = this._createToolbarItemOptions(item, controlContainer, popupContainer, onMenuItemClick);
        }
        else {
            if (item.template) {
                toolbarItem.template = item.template;
            }
            else if (item.text) {
                toolbarItem.template = () => {
                    let textDiv = document.createElement('div');
                    textDiv.classList.add(_caption_toolbar_css_classes_1.cssClasses.ellipsisText);
                    _render_helper_1.RenderHelper.html(textDiv, item.text, this._encodeHtml);
                    return textDiv;
                };
            }
            else {
                return undefined;
            }
        }
        return toolbarItem;
    }
    _applyText(item, text) {
        if (this._encodeHtml === false) {
            item.html = text;
        }
        else {
            item.text = text;
        }
    }
    _createToolbarItemOptions(item, controlContainer, popupContainer, onMenuItemClick) {
        var _a;
        let itemOptions = {};
        if (item.template === undefined) {
            let classNames = this._fillCssClasses(item);
            if (classNames.length > 0) {
                itemOptions.elementAttr = {
                    class: classNames.join(' ')
                };
            }
        }
        if (item.tooltip) {
            itemOptions.onContentReady = (data) => {
                let options = this._createTooltipOptions(item.tooltip, data.element, popupContainer);
                let toolTipElement = document.createElement('div');
                toolTipElement.classList.add(item.tooltip['className']);
                new tooltip_1.default(toolTipElement, options);
                _jquery_helpers_1.$unwrap(data.element).appendChild(toolTipElement);
            };
        }
        else if (item.hint) {
            itemOptions.hint = item.hint;
        }
        if (item.template) {
            itemOptions.template = item.template;
        }
        else if (item.icon) {
            itemOptions.template = (buttonData, contentElement) => {
                return _utils_1.createSvgIconElement(item.icon);
            };
            if (!!((_a = itemOptions.elementAttr) === null || _a === void 0 ? void 0 : _a.class)) {
                itemOptions.elementAttr.class += ' dx-button-has-icon';
            }
            else
                itemOptions.elementAttr = { class: 'dx-button-has-icon' };
        }
        else if (item.text) {
            this._applyText(itemOptions, item.text);
        }
        if (item.type === 'button' && item.click) {
            itemOptions.onClick = data => item.click(data.element);
        }
        else if (item.type === 'menu' && item.menu && (item.menu.items && item.menu.items.length > 0 || item.menu.itemTemplate)) {
            itemOptions.onClick = data => _popup_menu_creator_1.PopupMenuCreator.toggleMenu(_jquery_helpers_1.$unwrap(data.element).querySelector('.dx-button-content'), item.menu, popupContainer, controlContainer, onMenuItemClick);
        }
        if (!!item.disabled) {
            itemOptions.disabled = item.disabled;
        }
        return itemOptions;
    }
    _createTooltipOptions(tooltip, target, container) {
        let contentTemplate = typeof tooltip === 'string' ? (element) => _render_helper_1.RenderHelper.html(_jquery_helpers_1.$unwrap(element), tooltip, this._encodeHtml) : tooltip.template;
        return {
            target: target,
            contentTemplate: contentTemplate,
            showEvent: 'mouseenter',
            hideEvent: 'mouseleave',
            container,
        };
    }
    _fillCssClasses(item) {
        let classNames = [];
        if (item.checked && item.type === 'button')
            classNames.push(_caption_toolbar_css_classes_1.cssClasses.checked);
        if (item.icon) {
            classNames.push(item.icon);
        }
        else if (item.text) {
            classNames.push(_caption_toolbar_css_classes_1.cssClasses.textButton);
        }
        return classNames;
    }
    _validate(item) {
        let menu = item.menu;
        let isIconMenuItem = item.type === 'menu' && menu && menu.type === 'icons';
        if (isIconMenuItem && menu.columnCount !== undefined && menu.columnCount < 1)
            throw new Error('The columnCount property must be greater than zero.');
    }
    _createSeparatorItem(item) {
        return {
            location: item.location,
            html: '<div class="' + _caption_toolbar_css_classes_1.cssClasses.captionPanelSeparator + '"></div>'
        };
    }
}
exports.DashboardCaptionToolbarAdapter = DashboardCaptionToolbarAdapter;


/***/ }),

/***/ 62826:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.arrangeStaticToolbarItems = exports.arrangeTitleToolbarItems = exports.arrangeHoveredToolbarItems = exports.arrangeFloatingToolbarItems = void 0;
function arrangeToolbarItems(staticItems = [], actionItems = [], stateItems = [], navigationItems = [], showStaticItemsOnCenter = false) {
    let items = [];
    navigationItems.forEach(button => {
        items.push(Object.assign(Object.assign({}, button), { location: staticItems.length !== 0 ? 'before' : 'after' }));
    });
    staticItems.forEach(button => {
        items.push(Object.assign(Object.assign({}, button), { location: showStaticItemsOnCenter ? 'center' : 'before' }));
    });
    actionItems.forEach(button => {
        items.push(Object.assign(Object.assign({}, button), { location: 'after' }));
    });
    if (actionItems.length !== 0 && stateItems.length !== 0) {
        items.push({
            location: 'after',
            isSeparator: true
        });
    }
    stateItems.forEach(button => {
        items.push(Object.assign(Object.assign({}, button), { location: 'after' }));
    });
    return items;
}
function arrangeFloatingToolbarItems(itemOptions) {
    return arrangeToolbarItems(undefined, itemOptions.actionItems, itemOptions.stateItems, itemOptions.navigationItems);
}
exports.arrangeFloatingToolbarItems = arrangeFloatingToolbarItems;
function arrangeHoveredToolbarItems(itemOptions, containerHovered, disabled) {
    return arrangeToolbarItems(itemOptions.staticItems, containerHovered && !disabled ? itemOptions.actionItems : undefined, itemOptions.stateItems, itemOptions.navigationItems);
}
exports.arrangeHoveredToolbarItems = arrangeHoveredToolbarItems;
function arrangeTitleToolbarItems(itemOptions, showStaticItemsOnCenter) {
    return arrangeToolbarItems(itemOptions.staticItems, itemOptions.actionItems, itemOptions.stateItems, itemOptions.navigationItems, showStaticItemsOnCenter);
}
exports.arrangeTitleToolbarItems = arrangeTitleToolbarItems;
function arrangeStaticToolbarItems(itemOptions, disabled) {
    return arrangeToolbarItems(itemOptions.staticItems, disabled ? undefined : itemOptions.actionItems, itemOptions.stateItems, itemOptions.navigationItems);
}
exports.arrangeStaticToolbarItems = arrangeStaticToolbarItems;


/***/ }),

/***/ 38614:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardCaptionToolbarBase = void 0;
const analytics_widgets_internal_1 = __webpack_require__(86092);
const toolbar_1 = __webpack_require__(23853);
const $ = __webpack_require__(65311);
const _jquery_helpers_1 = __webpack_require__(59384);
const _render_helper_1 = __webpack_require__(39336);
const _caption_toolbar_adapter_1 = __webpack_require__(46109);
const _caption_toolbar_css_classes_1 = __webpack_require__(83629);
const _toolbar_item_size_calculator_1 = __webpack_require__(9797);
class DashboardCaptionToolbarBase {
    constructor(_container, _controlContainer, _popupContainer, encodeHtml = true) {
        this._container = _container;
        this._controlContainer = _controlContainer;
        this._popupContainer = _popupContainer;
        this.encodeHtml = encodeHtml;
        this._className = _caption_toolbar_css_classes_1.cssClasses.caption;
        this._disabled = false;
        this._adapter = new _caption_toolbar_adapter_1.DashboardCaptionToolbarAdapter(encodeHtml);
    }
    get _initialized() {
        return this._toolbar !== undefined;
    }
    get _staticItemsClass() {
        return _caption_toolbar_css_classes_1.cssClasses.toolbarBefore;
    }
    get element() {
        return this._initialized ? _jquery_helpers_1.$unwrap(this._toolbar.element()) : undefined;
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        if (this._disabled !== value) {
            this._disabled = value;
            this._updateToolbar();
        }
    }
    update(options) {
        this._options = options;
        let heightChanded = false;
        if (!this._toolbar) {
            this._toolbarDiv = document.createElement('div');
            this._className.split(' ').forEach(className => this._toolbarDiv.classList.add(className));
            if (this._container)
                this._toolbarContainer = this._appendToContainer(this._toolbarDiv);
            this._toolbar = new toolbar_1.default(this._toolbarDiv, this._getToolbarOptions());
            heightChanded = true;
        }
        else {
            this._updateToolbar();
        }
        return heightChanded;
    }
    calcHeight(options) {
        let toolbar = this._createInstance();
        if (toolbar) {
            this._processToolbarBeforeGettingSize(toolbar);
            toolbar.update(options);
            let height = _render_helper_1.RenderHelper.getElementBox(toolbar.element).height;
            toolbar.dispose();
            return height;
        }
        return 0;
    }
    calcMinWidth(options) {
        let toolbar = this._createInstance();
        if (toolbar) {
            this._processToolbarBeforeGettingSize(toolbar);
            toolbar.update(options);
            let proccesSize = () => {
                let getWidth = (selector) => {
                    return toolbar.element.querySelector('.' + selector).getBoundingClientRect().width;
                };
                let w = getWidth(_caption_toolbar_css_classes_1.cssClasses.toolbarBefore) +
                    getWidth(_caption_toolbar_css_classes_1.cssClasses.toolbarCenter) +
                    getWidth(_caption_toolbar_css_classes_1.cssClasses.toolbarAfter);
                return w;
            };
            let width = _render_helper_1.RenderHelper.processElement($.fn.constructor(toolbar.element), proccesSize);
            toolbar.dispose();
            return width;
        }
        return 0;
    }
    onResize() {
        if (this._initialized) {
            this._toolbar.repaint();
            this._resizeStaticToolbarItems();
        }
    }
    dispose() {
        if (this._toolbarContainer) {
            this._toolbarContainer.parentNode && this._toolbarContainer.parentNode.removeChild(this._toolbarContainer);
            this._toolbarContainer = undefined;
        }
        if (this._toolbar) {
            this._toolbar.dispose();
            this._toolbar = undefined;
        }
    }
    _updateToolbar() {
        if (this._toolbar) {
            this._toolbar.option(this._getToolbarOptions());
        }
    }
    _createInstance() {
        return undefined;
    }
    _getToolbarOptions() {
        return {
            items: this._getToolbarItems(this._getVisibleItems()),
            onContentReady: (data) => {
                this._resizeStaticToolbarItems();
            }
        };
    }
    _getVisibleItems() {
        return [];
    }
    _getToolbarItems(items) {
        return items.map(item => this._adapter.createToolbarItem(item, this._controlContainer, this._popupContainer)).filter(item => item !== undefined);
    }
    _appendToContainer(toolbarDiv) {
        $.fn.constructor(this._container).prepend(toolbarDiv);
        return toolbarDiv;
    }
    _resizeStaticToolbarItems(toolbarDiv = this._toolbarDiv) {
        let staticElements = $.fn.constructor(toolbarDiv).find('.' + this._staticItemsClass).find('.' + _caption_toolbar_css_classes_1.cssClasses.ellipsisText).toArray();
        let toolbarWidth = $.fn.constructor(toolbarDiv).width();
        if (staticElements.length > 0 && toolbarWidth > 0) {
            let afterSectionWidth = $.fn.constructor(toolbarDiv).find('.' + _caption_toolbar_css_classes_1.cssClasses.toolbarAfter).get(0).getBoundingClientRect().width;
            let staticSectionMaxWidth = toolbarWidth - afterSectionWidth;
            let staticSectionWidth = $.fn.constructor(toolbarDiv).find('.' + this._staticItemsClass).get(0).getBoundingClientRect().width;
            let itemsMaxWidth = _toolbar_item_size_calculator_1.calcMaxWidth(staticElements.map(item => $.fn.constructor(item).outerWidth()), staticSectionWidth, staticSectionMaxWidth);
            itemsMaxWidth.map((maxWidth, i) => {
                if (maxWidth !== undefined) {
                    $.fn.constructor(staticElements[i]).closest('.' + _caption_toolbar_css_classes_1.cssClasses.toolbarItem).css('maxWidth', maxWidth + 'px');
                }
            });
        }
    }
    _processToolbarBeforeGettingSize(toolbar) {
    }
}
exports.DashboardCaptionToolbarBase = DashboardCaptionToolbarBase;
analytics_widgets_internal_1.registerBaseBinding('dxToolbar', 'options');


/***/ }),

/***/ 83629:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Settings = exports._convertToExportFormat = exports.cssClasses = void 0;
const _export_options_1 = __webpack_require__(167);
exports.cssClasses = {
    caption: 'dx-dashboard-caption-toolbar',
    actionToolbar: 'dx-dashboard-action-toolbar',
    contentToolbar: 'dx-dashboard-content-toolbar',
    captionBorder: 'dx-dashboard-caption-toolbar-border',
    title: 'dx-dashboard-title-toolbar',
    captionPanelSeparator: 'dx-caption-panel-separator',
    popoverIconMenuWrapper: 'dx-dashboard-icon-menu-popover-wrapper',
    popoverListWrapper: 'dx-dashboard-list-popover-wrapper',
    floatingContainer: 'dx-dashboard-floating-caption-panel-container',
    iconClearMasterFilter: 'dx-dashboard-clear-master-filter',
    iconClearSelection: 'dx-dashboard-clear-selection',
    iconDrillUp: 'dx-dashboard-drill-up',
    iconMultiselection: 'dx-dashboard-toggle-multiselection',
    iconItemExport: 'dx-dashboard-export',
    iconExportToPDF: 'dx-dashboard-export-to-pdf',
    iconExportToImage: 'dx-dashboard-export-to-image',
    iconExportToExcel: 'dx-dashboard-export-to-excel',
    iconContentSelection: 'dx-dashboard-content-selection',
    iconLimitVisibleData: 'dx-dashboard-data-reduced',
    iconParameters: 'dx-dashboard-parameters',
    iconFilter: 'dx-dashboard-filter',
    iconTimePeriods: 'dx-dashboard-range-time-periods',
    iconInitialExtent: 'dx-dashboard-map-initial-extent',
    iconBack: 'dx-dashboard-back',
    ellipsisIcon: 'dx-dashboard-open-tab-pages',
    tooltipLimitVisibleData: 'dx-dashboard-tooltip-limit-visible-data',
    checked: 'dx-dashboard-checked',
    textButton: 'text-button',
    filterText: 'filter-text',
    dashboardContainer: 'dx-dashboard-container',
    toolbarItem: 'dx-toolbar-item',
    toolbarBefore: 'dx-toolbar-before',
    toolbarAfter: 'dx-toolbar-after',
    toolbarCenter: 'dx-toolbar-center',
    ellipsisText: 'dx-dashboard-ellipsis',
    flexParent: 'dx-dashboard-flex-parent',
    truncated: 'dx-dashboard-truncated',
    fixed: 'dx-dashboard-fixed',
    buttonBack: 'dx-dashboard-back-button',
    toolbarPreview: 'dx-dashboard-toolbar-preview'
};
function _convertToExportFormat(exportIcon) {
    switch (exportIcon) {
        case exports.cssClasses.iconExportToExcel:
            return _export_options_1.exportFormats.excel;
        case exports.cssClasses.iconExportToImage:
            return _export_options_1.exportFormats.image;
        default:
            return _export_options_1.exportFormats.pdf;
    }
}
exports._convertToExportFormat = _convertToExportFormat;
exports.Settings = {
    allowExportToImage: true
};


/***/ }),

/***/ 60495:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClickableFloatingCaptionToolbar = void 0;
const events_1 = __webpack_require__(68396);
const _z_index_1 = __webpack_require__(56330);
const _floating_toolbar_base_1 = __webpack_require__(92814);
class ClickableFloatingCaptionToolbar extends _floating_toolbar_base_1.FloatingCaptionToolbarBase {
    constructor(_container, _controlContainer, _popupContainer, encodeHtml, isBottomPosition, itemHasOwnContent) {
        super(_container, _controlContainer, _popupContainer, encodeHtml, isBottomPosition);
        this._itemHasOwnContent = itemHasOwnContent;
    }
    static registerToolbar(toolbar) {
        if (ClickableFloatingCaptionToolbar._toolbars.indexOf(toolbar) === -1) {
            ClickableFloatingCaptionToolbar._toolbars.push(toolbar);
        }
    }
    static unregisterToolbar(toolbar) {
        var toolbarIndex = ClickableFloatingCaptionToolbar._toolbars.indexOf(toolbar);
        if (toolbarIndex > -1) {
            ClickableFloatingCaptionToolbar._toolbars.splice(toolbarIndex, 1);
        }
    }
    static activateToolbar(toolbar) {
        ClickableFloatingCaptionToolbar._toolbars
            .filter(t => t !== toolbar)
            .forEach(t => t.hideFloatingPanel());
    }
    update(options) {
        let heightChanded = super.update(options);
        if (this._getVisibleItems().length > 0) {
            if (this._floatingPanel.isVisible()) {
                this._disableShield();
            }
            else {
                this._enableShield();
            }
        }
        else {
            this._disableShield();
        }
        return heightChanded;
    }
    showFloatingPanel() {
        super.showFloatingPanel();
        this._disableShield();
        ClickableFloatingCaptionToolbar.activateToolbar(this);
    }
    hideFloatingPanel() {
        super.hideFloatingPanel();
        this._enableShield();
    }
    dispose() {
        super.dispose();
        events_1.off(this._shieldDiv, 'click.shield');
        ClickableFloatingCaptionToolbar.unregisterToolbar(this);
    }
    _createInstance() {
        return new ClickableFloatingCaptionToolbar(undefined, undefined, undefined, this.encodeHtml, this._isBottomPosition, this._itemHasOwnContent);
    }
    _appendToContainer(toolbarDiv) {
        let floadingPanelDiv = super._appendToContainer(toolbarDiv);
        this._shieldDiv = document.createElement('div');
        this._shieldDiv.style.left = '0';
        this._shieldDiv.style.top = '0';
        this._shieldDiv.style.bottom = '0';
        this._shieldDiv.style.right = '0';
        this._shieldDiv.style.display = 'block';
        if (this._itemHasOwnContent) {
            this._shieldDiv.style.zIndex = (_z_index_1.zIndex.floatingToolbar - 1).toString();
        }
        this._shieldDiv.style.position = 'absolute';
        this._subscribeOnShieldEvents();
        this._container.appendChild(this._shieldDiv);
        ClickableFloatingCaptionToolbar.registerToolbar(this);
        return floadingPanelDiv;
    }
    _subscribeOnShieldEvents() {
        events_1.on(this._shieldDiv, 'click.shield', () => this.showFloatingPanel());
    }
    _disableShield() {
        this._shieldDiv && (this._shieldDiv.style.display = 'none');
    }
    _enableShield() {
        if (this._getVisibleItems().length > 0) {
            this._shieldDiv && (this._shieldDiv.style.display = 'block');
        }
    }
}
exports.ClickableFloatingCaptionToolbar = ClickableFloatingCaptionToolbar;
ClickableFloatingCaptionToolbar._toolbars = [];


/***/ }),

/***/ 83647:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FloatingPanel = void 0;
const ui_overlay_1 = __webpack_require__(71996);
const _jquery_helpers_1 = __webpack_require__(59384);
const _z_index_1 = __webpack_require__(56330);
const _caption_toolbar_css_classes_1 = __webpack_require__(83629);
class FloatingPanel {
    constructor(options) {
        this.PREVIEW_TOOLBAR_WIDTH = 15;
        this._maxWidth = undefined;
        let position = options.bottomPosition ? 'bottom right' : 'top right';
        this._container = options.container;
        this._preview = options.preview;
        this._floatingPanelDiv = options.floatingPanelDiv;
        let overlayOptions = {
            shading: false,
            animation: false,
            width: 'auto',
            height: 'auto',
            contentTemplate: (contentElement) => {
                _jquery_helpers_1.$unwrap(contentElement).appendChild(options.toolbarDiv);
            },
            hideOnOutsideClick: false,
            position: {
                boundary: options.container,
                my: position,
                at: position,
                offset: options.bottomPosition ? '2 2' : '2 -2',
                of: options.container
            },
            onShowing: (e) => {
                var wrapper = _jquery_helpers_1.$unwrap(e.component._$wrapper);
                var baseZIndex = _z_index_1.zIndex.floatingToolbar;
                wrapper.style.zIndex = (options.preview ? baseZIndex : baseZIndex + 1).toString();
                var overlayContent = wrapper.querySelector('.dx-overlay-content');
                if (overlayContent) {
                    overlayContent.style.zIndex = wrapper.style.zIndex + 1;
                }
            },
            wrapperAttr: {
                class: _caption_toolbar_css_classes_1.cssClasses.floatingContainer
            }
        };
        overlayOptions = Object.assign(Object.assign({}, overlayOptions), { target: options.container, container: options.container, closeOnSwipe: false, propagateOutsideClick: true });
        this._overlay = new ui_overlay_1.default(options.floatingPanelDiv, overlayOptions);
    }
    _getToolbarWidth() {
        return this._preview ? this.PREVIEW_TOOLBAR_WIDTH : this._calculateToolbarWidth();
    }
    _calculateToolbarWidth() {
        if (!this._maxWidth) {
            let toolbarItemGroupsContainer = this._container.querySelector(`.${_caption_toolbar_css_classes_1.cssClasses.floatingContainer} .dx-toolbar-items-container`);
            let toolbarItemGroups = toolbarItemGroupsContainer && Array.prototype.slice.call(toolbarItemGroupsContainer.childNodes) || [];
            this._maxWidth = Math.min(_jquery_helpers_1.getOuterWidth(this._container), toolbarItemGroups
                .filter(child => !!child.innerHTML)
                .reduce((acc, child) => acc + _jquery_helpers_1.getOuterWidth(child), 0));
        }
        return this._maxWidth;
    }
    show() {
        this._overlay.show();
        this._overlay.option('width', this._getToolbarWidth());
    }
    hide() {
        this._overlay.hide();
    }
    repaint() {
        let newWidth = this._getToolbarWidth();
        if (this._overlay.option('width') === newWidth) {
            this._overlay.repaint();
        }
        else {
            this._overlay.option('width', this._getToolbarWidth());
        }
    }
    isVisible() {
        return this._overlay.option('visible');
    }
    resetSizeCache() {
        this._maxWidth = undefined;
    }
    dispose() {
        this._overlay.dispose();
    }
}
exports.FloatingPanel = FloatingPanel;


/***/ }),

/***/ 92814:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FloatingCaptionToolbarBase = void 0;
const _caption_toolbar_arranger_1 = __webpack_require__(62826);
const _caption_toolbar_base_1 = __webpack_require__(38614);
const _caption_toolbar_css_classes_1 = __webpack_require__(83629);
const _floating_panel_1 = __webpack_require__(83647);
class FloatingCaptionToolbarBase extends _caption_toolbar_base_1.DashboardCaptionToolbarBase {
    constructor(_container, _controlContainer, _popupContainer, encodeHtml, _isBottomPosition) {
        super(_container, _controlContainer, _popupContainer, encodeHtml);
        this._isBottomPosition = _isBottomPosition;
    }
    set isBottomFloatingTypePosition(isBottom) {
        this._isBottomPosition = isBottom;
    }
    update(options) {
        this._floatingPanel && this._floatingPanel.resetSizeCache();
        return super.update(options);
    }
    calcHeight() {
        return 0;
    }
    onResize() {
        super.onResize();
        if (this._initialized) {
            this._floatingPanel.repaint();
        }
    }
    showFloatingPanel() {
        this._floatingPanel.show();
        this._toolbar.repaint();
    }
    hideFloatingPanel() {
        this._floatingPanel.hide();
        this._toolbar.repaint();
    }
    dispose() {
        super.dispose();
        this._floatingPanel && this._floatingPanel.dispose();
    }
    _appendToContainer(toolbarDiv) {
        let floatingPanelDiv = document.createElement('div');
        floatingPanelDiv.classList.add(_caption_toolbar_css_classes_1.cssClasses.floatingContainer);
        this._container.prepend(floatingPanelDiv);
        this._floatingPanel = this._createFloatingPanel(toolbarDiv, floatingPanelDiv, false);
        return floatingPanelDiv;
    }
    _updateToolbar() {
        super._updateToolbar();
        this._repaintFloatingPanel();
    }
    _repaintFloatingPanel() {
        if (this._floatingPanel) {
            this._floatingPanel.repaint();
        }
    }
    _getVisibleItems() {
        return _caption_toolbar_arranger_1.arrangeFloatingToolbarItems(this._options);
    }
    _createInstance() {
        return new FloatingCaptionToolbarBase(undefined, undefined, undefined, this.encodeHtml, this._isBottomPosition);
    }
    _getToolbarItems(items) {
        return items.map(item => this._adapter.createToolbarItem(item, this._controlContainer, this._popupContainer, () => this.hideFloatingPanel())).filter(item => item !== undefined);
    }
    _createFloatingPanel(toolbarDiv, floatingPanelDiv, preview) {
        return new _floating_panel_1.FloatingPanel({
            toolbarDiv,
            floatingPanelDiv: floatingPanelDiv,
            preview,
            container: this._container,
            bottomPosition: this._isBottomPosition
        });
    }
}
exports.FloatingCaptionToolbarBase = FloatingCaptionToolbarBase;


/***/ }),

/***/ 88451:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HiddenCaptionToolbar = void 0;
class HiddenCaptionToolbar {
    constructor() {
        this.element = document.createElement('div');
        this.disabled = false;
    }
    calcHeight(options) {
        return 0;
    }
    calcMinWidth(options) {
        return 0;
    }
    update(options) {
        return false;
    }
    onResize() {
    }
    dispose() {
    }
}
exports.HiddenCaptionToolbar = HiddenCaptionToolbar;


/***/ }),

/***/ 16993:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HoveredFloatingCaptionToolbar = void 0;
const $ = __webpack_require__(65311);
const _floating_toolbar_base_1 = __webpack_require__(92814);
class HoveredFloatingCaptionToolbar extends _floating_toolbar_base_1.FloatingCaptionToolbarBase {
    constructor(_container, _controlContainer, _popupContainer, encodeHtml, isBottomPosition) {
        super(_container, _controlContainer, _popupContainer, encodeHtml, isBottomPosition);
    }
    calcMinWidth(options) {
        return 0;
    }
    dispose() {
        if (this._popupContainer) {
            $.fn.constructor(this._popupContainer).off('mouseenter.captionPanel');
            $.fn.constructor(this._popupContainer).off('mouseleave.captionPanel');
        }
        super.dispose();
    }
    _appendToContainer(toolbarDiv) {
        var element = super._appendToContainer(toolbarDiv);
        $.fn.constructor(this._popupContainer).on('mouseenter.captionPanel', () => this.showFloatingPanel());
        $.fn.constructor(this._popupContainer).on('mouseleave.captionPanel', () => this.hideFloatingPanel());
        return element;
    }
    _createInstance() {
        return new HoveredFloatingCaptionToolbar(undefined, undefined, undefined, this.encodeHtml, this._isBottomPosition);
    }
}
exports.HoveredFloatingCaptionToolbar = HoveredFloatingCaptionToolbar;


/***/ }),

/***/ 74078:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HoveredDashboardCaptionToolbar = void 0;
const $ = __webpack_require__(65311);
const _caption_toolbar_arranger_1 = __webpack_require__(62826);
const _caption_toolbar_base_1 = __webpack_require__(38614);
const _caption_toolbar_css_classes_1 = __webpack_require__(83629);
class HoveredDashboardCaptionToolbar extends _caption_toolbar_base_1.DashboardCaptionToolbarBase {
    constructor(_container, _controlContainer, _popupContainer, encodeHtml, _hasBorder) {
        super(_container, _controlContainer, _popupContainer, encodeHtml);
        this._hasBorder = _hasBorder;
        this._containerHovered = false;
    }
    dispose() {
        if (this._popupContainer) {
            $.fn.constructor(this._popupContainer).off('mouseenter.captionPanel');
            $.fn.constructor(this._popupContainer).off('mouseleave.captionPanel');
        }
        super.dispose();
    }
    _appendToContainer(toolbarDiv) {
        let toggleHoverState = (hovered) => {
            if (this._containerHovered !== hovered) {
                this._containerHovered = hovered;
                this._updateToolbar();
            }
        };
        $.fn.constructor(this._popupContainer).on('mouseenter.captionPanel', () => toggleHoverState(true));
        $.fn.constructor(this._popupContainer).on('mouseleave.captionPanel', () => toggleHoverState(false));
        return super._appendToContainer(toolbarDiv);
    }
    update(options) {
        let heightChanded = super.update(options);
        if (this._hasBorder) {
            this._toolbarDiv.classList.add(_caption_toolbar_css_classes_1.cssClasses.captionBorder);
        }
        return heightChanded;
    }
    _getVisibleItems() {
        return _caption_toolbar_arranger_1.arrangeHoveredToolbarItems(this._options, this._containerHovered, this.disabled);
    }
    _createInstance() {
        return new HoveredDashboardCaptionToolbar(undefined, undefined, undefined, this.encodeHtml, this._hasBorder);
    }
    _processToolbarBeforeGettingSize(toolbar) {
        toolbar.setHoverState(true);
    }
    setHoverState(hovered) {
        this._containerHovered = hovered;
    }
}
exports.HoveredDashboardCaptionToolbar = HoveredDashboardCaptionToolbar;


/***/ }),

/***/ 96723:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MinimizedClickableCaptionToolbar = void 0;
const events_1 = __webpack_require__(68396);
const $ = __webpack_require__(65311);
const _caption_toolbar_css_classes_1 = __webpack_require__(83629);
const _clickable_floating_toolbar_1 = __webpack_require__(60495);
class MinimizedClickableCaptionToolbar extends _clickable_floating_toolbar_1.ClickableFloatingCaptionToolbar {
    constructor(_container, _controlContainer, _popupContainer, encodeHtml, isBottomPosition, itemHasOwnContent) {
        super(_container, _controlContainer, _popupContainer, encodeHtml, isBottomPosition, itemHasOwnContent);
    }
    showPreviewFloatingPanel() {
        if (this._getVisibleItems().length > 0) {
            this._previewFloatingPanel.show();
            this._toolbar.repaint();
            this._disableShield();
            _clickable_floating_toolbar_1.ClickableFloatingCaptionToolbar.activateToolbar(this);
        }
    }
    hideFloatingPanel() {
        super.hideFloatingPanel();
        this._previewFloatingPanel.hide();
        this._toolbar.repaint();
        this._enableShield();
    }
    dispose() {
        this._previewFloatingPanel && this._previewFloatingPanel.dispose();
        events_1.off(this._previewToolbarDiv, 'click.preview');
        super.dispose();
    }
    _createInstance() {
        return new MinimizedClickableCaptionToolbar(undefined, undefined, undefined, this.encodeHtml, this._isBottomPosition, this._itemHasOwnContent);
    }
    _appendToContainer(toolbarDiv) {
        this._previewToolbarDiv = document.createElement('div');
        this._previewToolbarDiv.classList.add(_caption_toolbar_css_classes_1.cssClasses.toolbarPreview);
        let previewFloatingPanelDiv = document.createElement('div');
        $.fn.constructor(this._container).prepend(previewFloatingPanelDiv);
        this._previewFloatingPanel = this._createFloatingPanel(this._previewToolbarDiv, previewFloatingPanelDiv, true);
        this._previewToolbarDiv.appendChild($.fn.constructor('<svg><use xlink:href="#' + _caption_toolbar_css_classes_1.cssClasses.ellipsisIcon + '" /></svg>').get(0));
        events_1.on(this._previewToolbarDiv, 'click.preview', () => this.showFloatingPanel());
        return super._appendToContainer(toolbarDiv);
    }
    _subscribeOnShieldEvents() {
        events_1.on(this._shieldDiv, 'click.shield', () => this.showPreviewFloatingPanel());
    }
}
exports.MinimizedClickableCaptionToolbar = MinimizedClickableCaptionToolbar;


/***/ }),

/***/ 55263:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MinimizedHoveredCaptionToolbar = exports.MinimizedToolbarState = void 0;
const $ = __webpack_require__(65311);
const _caption_toolbar_css_classes_1 = __webpack_require__(83629);
const _floating_toolbar_base_1 = __webpack_require__(92814);
var MinimizedToolbarState;
(function (MinimizedToolbarState) {
    MinimizedToolbarState[MinimizedToolbarState["Hidden"] = 0] = "Hidden";
    MinimizedToolbarState[MinimizedToolbarState["Minimim"] = 1] = "Minimim";
    MinimizedToolbarState[MinimizedToolbarState["Maximim"] = 2] = "Maximim";
})(MinimizedToolbarState = exports.MinimizedToolbarState || (exports.MinimizedToolbarState = {}));
class MinimizedHoveredCaptionToolbar extends _floating_toolbar_base_1.FloatingCaptionToolbarBase {
    constructor(_container, _controlContainer, _popupContainer, encodeHtml, isBottomPosition) {
        super(_container, _controlContainer, _popupContainer, encodeHtml, isBottomPosition);
        this._toolbarState = MinimizedToolbarState.Hidden;
        this._containerHovered = false;
        this._onContainerHovered = () => {
            this._containerHovered = true;
            this._showPreviewFloatingPanel();
        };
        this._onContainerLeave = () => {
            this._containerHovered = false;
            this._hidePreviewFloatingPanel();
        };
        this._onPreviewHovered = () => {
            this._hidePreviewFloatingPanel();
            this.showFloatingPanel();
            this._floatingPanel.repaint();
            this._toolbarState = MinimizedToolbarState.Maximim;
        };
        this._onToolbarLeave = () => {
            this.hideFloatingPanel();
            this._toolbarState = MinimizedToolbarState.Hidden;
            this._showPreviewFloatingPanel();
        };
    }
    get hasItems() {
        return this._getVisibleItems().length > 0;
    }
    calcMinWidth(options) {
        return 0;
    }
    dispose() {
        if (this._popupContainer) {
            this._popupContainer.removeEventListener('mouseenter', this._onContainerHovered);
            this._popupContainer.removeEventListener('mouseleave', this._onContainerLeave);
        }
        if (this._previewToolbarDiv) {
            this._previewToolbarDiv.removeEventListener('mouseenter', this._onPreviewHovered);
            this._toolbarDiv.removeEventListener('mouseleave', this._onToolbarLeave);
        }
        this._previewFloatingPanel && this._previewFloatingPanel.dispose();
        super.dispose();
    }
    onResize() {
        super.onResize();
        if (this._initialized) {
            this._previewFloatingPanel.repaint();
        }
    }
    _appendToContainer(toolbarDiv) {
        var element = super._appendToContainer(toolbarDiv);
        this._previewToolbarDiv = document.createElement('div');
        this._previewToolbarDiv.classList.add(_caption_toolbar_css_classes_1.cssClasses.toolbarPreview);
        let previewFloatingPanelDiv = document.createElement('div');
        $.fn.constructor(this._container).prepend(previewFloatingPanelDiv);
        this._previewFloatingPanel = this._createFloatingPanel(this._previewToolbarDiv, previewFloatingPanelDiv, true);
        this._previewToolbarDiv.appendChild($.fn.constructor('<svg><use xlink:href="#' + _caption_toolbar_css_classes_1.cssClasses.ellipsisIcon + '" /></svg>').get(0));
        this._popupContainer.addEventListener('mouseenter', this._onContainerHovered);
        this._popupContainer.addEventListener('mouseleave', this._onContainerLeave);
        this._previewToolbarDiv.addEventListener('mouseenter', this._onPreviewHovered);
        this._toolbarDiv.addEventListener('mouseleave', this._onToolbarLeave);
        return element;
    }
    _repaintFloatingPanel() {
        if (!this._floatingPanel || !this._previewFloatingPanel)
            return;
        if (this._containerHovered) {
            if (this._toolbarState === MinimizedToolbarState.Maximim) {
                if (this.hasItems) {
                    this._floatingPanel.repaint();
                }
                else {
                    this.hideFloatingPanel();
                    this._toolbarState = MinimizedToolbarState.Hidden;
                }
            }
            else {
                if (this.hasItems) {
                    this._showPreviewFloatingPanel();
                }
                else {
                    this._hidePreviewFloatingPanel();
                }
            }
        }
        else {
            this.hideFloatingPanel();
            this._hidePreviewFloatingPanel();
        }
    }
    _showPreviewFloatingPanel() {
        if (this._toolbarState != MinimizedToolbarState.Maximim && this.hasItems) {
            this._previewFloatingPanel.show();
            this._toolbarState = MinimizedToolbarState.Minimim;
        }
    }
    _hidePreviewFloatingPanel() {
        this._previewFloatingPanel.hide();
        if (this._toolbarState === MinimizedToolbarState.Minimim)
            this._toolbarState = MinimizedToolbarState.Hidden;
    }
    _createInstance() {
        return new MinimizedHoveredCaptionToolbar(undefined, undefined, undefined, this.encodeHtml, this._isBottomPosition);
    }
}
exports.MinimizedHoveredCaptionToolbar = MinimizedHoveredCaptionToolbar;


/***/ }),

/***/ 37340:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MobileLayoutCaptionToolbar = void 0;
const _caption_toolbar_css_classes_1 = __webpack_require__(83629);
const _static_toolbar_1 = __webpack_require__(46973);
class MobileLayoutCaptionToolbar {
    constructor(_container, _controlContainer, _popupContainer, _encodeHtml, _className, _hasBorder = false) {
        this._container = _container;
        this._controlContainer = _controlContainer;
        this._popupContainer = _popupContainer;
        this._encodeHtml = _encodeHtml;
        this._className = _className;
        this._hasBorder = _hasBorder;
        this._disabled = false;
    }
    get element() {
        return undefined;
    }
    get disabled() {
        return this._disabled;
    }
    calcHeight(options) {
        let toolbar = this._createInstance();
        toolbar.update(options);
        let height = toolbar._contentToolbar.calcHeight(this._prepareContentToolbarOptions(options)) + toolbar._actionToolbar.calcHeight(this._prepareActionToolbarOptions(options));
        toolbar.dispose();
        return height;
    }
    calcMinWidth(options) {
        return 0;
    }
    update(options) {
        if (!this._contentToolbar) {
            this._contentToolbar = new _static_toolbar_1.StaticCaptionToolbar(this._container, this._controlContainer, this._popupContainer, this._encodeHtml, [this._className, _caption_toolbar_css_classes_1.cssClasses.contentToolbar].join(' '), this._hasBorder, true);
        }
        let contentToolbarOptions = this._prepareContentToolbarOptions(options);
        let contentToolbarHeightChanged = this._contentToolbar.update(contentToolbarOptions);
        if (!this._actionToolbar) {
            let contentToolbarIsHidden = !this._hasItems(contentToolbarOptions);
            this._actionToolbar = new _static_toolbar_1.StaticCaptionToolbar(this._container, this._controlContainer, this._popupContainer, this._encodeHtml, [this._className, _caption_toolbar_css_classes_1.cssClasses.actionToolbar].join(' '), contentToolbarIsHidden && this._hasBorder, true);
        }
        let actualToolbarHeightChanged = this._actionToolbar.update(this._prepareActionToolbarOptions(options));
        this._toolbars = [this._actionToolbar, this._contentToolbar];
        return contentToolbarHeightChanged || actualToolbarHeightChanged;
    }
    onResize() {
        this._toolbars.forEach(toolbar => toolbar.onResize());
    }
    dispose() {
        if (this._toolbars)
            this._toolbars.forEach(toolbar => toolbar.dispose());
    }
    _createInstance() {
        return new MobileLayoutCaptionToolbar(undefined, undefined, undefined, this._encodeHtml, this._className, this._hasBorder);
    }
    _prepareContentToolbarOptions(options) {
        return options ? {
            staticItems: options.staticItems,
            actionItems: [],
            stateItems: [],
            navigationItems: []
        } : undefined;
    }
    _prepareActionToolbarOptions(options) {
        return options ? {
            staticItems: options.navigationItems,
            actionItems: options.actionItems,
            stateItems: options.stateItems,
            navigationItems: []
        } : undefined;
    }
    _hasItems(options) {
        return options.navigationItems.length > 0 || options.actionItems.length > 0 || options.stateItems.length > 0 || options.staticItems.length > 0;
    }
}
exports.MobileLayoutCaptionToolbar = MobileLayoutCaptionToolbar;


/***/ }),

/***/ 46474:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PopupMenuCreator = void 0;
const list_1 = __webpack_require__(13052);
const popover_1 = __webpack_require__(31580);
__webpack_require__(23613);
const tile_view_1 = __webpack_require__(23613);
const _utils_1 = __webpack_require__(7590);
const _caption_toolbar_css_classes_1 = __webpack_require__(83629);
class PopupMenuCreator {
    static toggleMenu(element, menu, container, controlContainer, onMenuItemClick) {
        let popoverOptions = this._createPopoverOptions(element, menu, container, controlContainer);
        let onItemClick = (data) => {
            popover.hide();
            if (onMenuItemClick) {
                onMenuItemClick();
            }
            if (menu.itemClick)
                menu.itemClick(data.itemData, data.itemElement, data.itemIndex);
        };
        if (menu.type === 'icons') {
            popoverOptions.contentTemplate = (contentElement) => {
                let div = document.createElement('div');
                new tile_view_1.default(div, this._createTileViewOptions(menu, onItemClick));
                return div;
            };
        }
        else {
            popoverOptions.contentTemplate = (contentElement) => {
                return new list_1.default(document.createElement('div'), this._createListOptions(menu, onItemClick)).element();
            };
        }
        let popoverClass = menu.type === 'icons' ? _caption_toolbar_css_classes_1.cssClasses.popoverIconMenuWrapper : _caption_toolbar_css_classes_1.cssClasses.popoverListWrapper;
        popoverOptions.wrapperAttr = { class: popoverClass };
        let popoverContainer = this._getPopupContainer(element, 'dx-dashboard-popover-marker');
        var popover = popover_1.default.getInstance(popoverContainer);
        if (popover) {
            popover.option(popoverOptions);
        }
        else {
            popover = new popover_1.default(popoverContainer, popoverOptions);
        }
        popover.toggle(!popover.option('visible'));
    }
    static _createPopoverOptions(element, menu, container, controlContainer) {
        return {
            width: 'auto',
            height: 'auto',
            target: element,
            toolbarItems: menu.type === 'icons' && menu.title ? [{ location: 'center', text: menu.title }] : [],
            animation: {
                show: { type: 'pop', from: { opacity: 1, scale: 0 }, to: { scale: 1 } },
                hide: { type: 'pop', from: { scale: 1 }, to: { scale: 0 } }
            },
            position: {
                my: 'top center',
                at: 'bottom center',
                collision: 'fit flip',
                boundary: controlContainer
            },
            container: container
        };
    }
    static _createTileViewOptions(menu, onItemClick) {
        let itemsCount = menu.items.length;
        let columnCount = menu.columnCount ? Math.min(menu.columnCount, itemsCount) : itemsCount;
        return {
            direction: 'horizontal',
            dataSource: menu.items,
            height: this._icon_menu_element_size * Math.ceil(itemsCount / columnCount),
            itemMargin: 0,
            baseItemHeight: this._icon_menu_element_size,
            baseItemWidth: this._icon_menu_element_size,
            itemTemplate: menu.itemTemplate ? menu.itemTemplate : (itemData, itemIndex, itemElement) => {
                return _utils_1.createSvgIconElement(menu.items[itemIndex]);
            },
            onItemClick: onItemClick
        };
    }
    static _createListOptions(menu, onItemClick) {
        let listOptions = {
            selectionMode: menu.selectionMode || 'none',
            selectedItems: menu.selectedItems || [],
            dataSource: menu.items,
            onItemClick: onItemClick
        };
        if (menu.itemTemplate) {
            listOptions.itemTemplate = menu.itemTemplate;
        }
        return listOptions;
    }
    static _getPopupContainer(element, markerClassName) {
        let popupContainer = element.querySelectorAll('.' + markerClassName);
        if (popupContainer.length > 1) {
            console.log('Multiple popovers');
        }
        else if (popupContainer.length === 0) {
            let div = document.createElement('div');
            div.classList.add(markerClassName);
            element.appendChild(div);
            return div;
        }
        else {
            return popupContainer[0];
        }
    }
}
exports.PopupMenuCreator = PopupMenuCreator;
PopupMenuCreator._icon_menu_element_size = 65;


/***/ }),

/***/ 46973:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StaticCaptionToolbar = void 0;
const _caption_toolbar_arranger_1 = __webpack_require__(62826);
const _caption_toolbar_base_1 = __webpack_require__(38614);
const _caption_toolbar_css_classes_1 = __webpack_require__(83629);
class StaticCaptionToolbar extends _caption_toolbar_base_1.DashboardCaptionToolbarBase {
    constructor(_container, _controlContainer, _popupContainer, encodeHtml, _className, _hasBorder, allowHideEmptyToolbar) {
        super(_container, _controlContainer, _popupContainer, encodeHtml);
        this._className = _className;
        this._hasBorder = _hasBorder;
        this.allowHideEmptyToolbar = allowHideEmptyToolbar;
    }
    calcHeight(options) {
        if (this._visible(options)) {
            return super.calcHeight(options);
        }
        else {
            return 0;
        }
    }
    calcMinWidth(options) {
        if (this._visible(options)) {
            return super.calcMinWidth(options);
        }
        else {
            return 0;
        }
    }
    update(options) {
        let heightChanded = false;
        if (this._visible(options)) {
            heightChanded = super.update(options);
            if (this._hasBorder) {
                this._toolbarDiv.classList.add(_caption_toolbar_css_classes_1.cssClasses.captionBorder);
            }
        }
        else if (this._initialized) {
            this.dispose();
            heightChanded = true;
        }
        return heightChanded;
    }
    _getVisibleItems() {
        return _caption_toolbar_arranger_1.arrangeStaticToolbarItems(this._options, this._disabled);
    }
    _createInstance() {
        return new StaticCaptionToolbar(undefined, undefined, undefined, this.encodeHtml, this._className, this._hasBorder, this.allowHideEmptyToolbar);
    }
    _visible(options) {
        return !this.allowHideEmptyToolbar || options.actionItems.length > 0 || options.navigationItems.length > 0 || options.stateItems.length > 0 || options.staticItems.length > 0;
    }
}
exports.StaticCaptionToolbar = StaticCaptionToolbar;


/***/ }),

/***/ 29643:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DashboardTitleToolbar = void 0;
const _caption_toolbar_arranger_1 = __webpack_require__(62826);
const _caption_toolbar_base_1 = __webpack_require__(38614);
const _caption_toolbar_css_classes_1 = __webpack_require__(83629);
class DashboardTitleToolbar extends _caption_toolbar_base_1.DashboardCaptionToolbarBase {
    constructor(_container, _controlContainer, _popupContainer, encodeHtml, allowHideEmptyToolbar = false, _optionalClass) {
        super(_container, _controlContainer, _popupContainer, encodeHtml);
        this.allowHideEmptyToolbar = allowHideEmptyToolbar;
        this._optionalClass = _optionalClass;
        this._showStaticItemsOnCenter = false;
        this._className = this._optionalClass ? [this._optionalClass, _caption_toolbar_css_classes_1.cssClasses.title].join(' ') : _caption_toolbar_css_classes_1.cssClasses.title;
    }
    get _staticItemsClass() {
        return this._showStaticItemsOnCenter ? _caption_toolbar_css_classes_1.cssClasses.toolbarCenter : _caption_toolbar_css_classes_1.cssClasses.toolbarBefore;
    }
    calcHeight(options) {
        if (this._visible(options)) {
            return super.calcHeight(options);
        }
        else {
            return 0;
        }
    }
    update(options, showStaticItemsOnCenter) {
        this._showStaticItemsOnCenter = showStaticItemsOnCenter || false;
        let heightChanded = false;
        if (this._visible(options)) {
            heightChanded = super.update(options);
        }
        else if (this._initialized) {
            this.dispose();
            heightChanded = true;
        }
        return heightChanded;
    }
    _getVisibleItems() {
        return _caption_toolbar_arranger_1.arrangeTitleToolbarItems(this._options, this._showStaticItemsOnCenter);
    }
    _createInstance() {
        return new DashboardTitleToolbar(undefined, undefined, undefined, this.encodeHtml, this.allowHideEmptyToolbar, this._optionalClass);
    }
    _visible(options) {
        return !this.allowHideEmptyToolbar || options.actionItems.length > 0 || options.navigationItems.length > 0 || options.stateItems.length > 0 || options.staticItems.length > 0;
    }
}
exports.DashboardTitleToolbar = DashboardTitleToolbar;


/***/ }),

/***/ 9797:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.calcMaxWidth = void 0;
function calcMaxWidth(itemsWidth, sectionWidth, sectionMaxWidth) {
    let itemsMaxWidth = itemsWidth.map(item => undefined);
    if (sectionWidth > sectionMaxWidth) {
        for (let i = itemsWidth.length - 1; i >= 0; i--) {
            let difference = sectionWidth - sectionMaxWidth;
            let itemWidth = itemsWidth[i];
            let itemMaxWidth = Math.max(0, itemWidth - difference);
            sectionWidth -= (itemWidth - itemMaxWidth);
            itemsMaxWidth[i] = itemMaxWidth;
            if (sectionWidth <= sectionMaxWidth) {
                break;
            }
        }
    }
    return itemsMaxWidth;
}
exports.calcMaxWidth = calcMaxWidth;


/***/ }),

/***/ 57731:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dashboardToolbarItemNames = void 0;
exports.dashboardToolbarItemNames = {
    titleFilterText: 'filter-text',
    titleFilterIcon: 'filter-icon',
    exportMenu: 'export-menu',
    dashboardTitleImage: 'dashboard-title-image',
    dashboardTitle: 'dashboard-title',
    parameters: 'parameters',
    itemCaption: 'item-caption',
    limitVisibleData: 'limit-visible-data',
    clearMasterFilter: 'clear-master-filter',
    clearSelection: 'clear-selection',
    drillUp: 'drill-up',
    values: 'values',
    multiselection: 'multiselection',
    initialExtent: 'initial-extent',
    dateTimePeriodMenu: 'date-time-period-menu',
    customDateTimePeriod: 'custom-date-time-period',
    dashboardList: 'dashboard-list',
    dashboardFilters: 'dashboard-filters',
    backButton: 'back-button',
    itemFilters: 'item-filters',
    restoreItem: 'restore-item',
    maximizeItem: 'maximize-down-item',
    dataInspector: 'data-inspector'
};


/***/ }),

/***/ 47164:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.customTimePeriodDialog = void 0;
__webpack_require__(66417);
const date_box_1 = __webpack_require__(66417);
const _format_helper_1 = __webpack_require__(27893);
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const _dashboard_layout_mode_helper_1 = __webpack_require__(26018);
const _utils_1 = __webpack_require__(73500);
const _dialog_form_1 = __webpack_require__(82717);
var customTimePeriodDialogClassNames = {
    emptyButton: 'dx-dashboard-custom-time-period-empty-button',
    leftPeriod: 'dx-dashboard-custom-time-period-dialog-left-period',
    rightPeriod: 'dx-dashboard-custom-time-period-dialog-right-period'
};
class customTimePeriodDialog {
    constructor(options) {
        this.options = options;
        this.setRange = options.setRange;
        this._initialize();
    }
    _initialize() {
        this.dialogForm = new _dialog_form_1.dialogForm({
            dialogContainer: this.options.container,
            width: 'auto',
            height: 'auto',
            allowScrolling: true,
            deferredRendering: true,
            title: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.SelectRange),
            buttons: [{
                    className: customTimePeriodDialogClassNames.emptyButton
                }, {
                    name: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonOK),
                    hide: true,
                    func: () => {
                        this.setRange({ startValue: this.leftCalendar.option('value'), endValue: this.rightCalendar.option('value') });
                    },
                    isDefault: true
                }, {
                    name: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonCancel),
                    hide: true,
                    func: () => { }
                }
            ],
            renderContent: () => {
                let form = document.createElement('div');
                form.classList.add(_dialog_form_1.dialogClasses.form);
                let fromText = _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.RangeFilterSelectRangeFromCaption);
                let toText = _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.RangeFilterSelectRangeToCaption);
                let leftDate = document.createElement('div');
                leftDate.style.width = '100%';
                let rightDate = document.createElement('div');
                rightDate.style.width = '100%';
                let left = document.createElement('div');
                left.classList.add(customTimePeriodDialogClassNames.leftPeriod);
                let right = document.createElement('div');
                right.classList.add(customTimePeriodDialogClassNames.rightPeriod);
                let options = {
                    pickerType: _dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isTouch ? 'rollers' : 'calendar',
                    type: this.format,
                    calendarOptions: {
                        maxZoomLevel: this.maxZoomLevel,
                    },
                    displayFormat: this.displayFormatFunc,
                    acceptCustomValue: false,
                    applyButtonText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonOK),
                    cancelButtonText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonCancel),
                    placeholder: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.SelectDate),
                    dropDownOptions: {
                        container: this.options.container
                    },
                    disabledDates: this.disabledDates,
                };
                let fromTextSpan = document.createElement('span');
                fromTextSpan.innerText = fromText;
                left.appendChild(fromTextSpan);
                left.appendChild(leftDate);
                this.leftCalendar = new date_box_1.default(leftDate, Object.assign(Object.assign({}, options), { value: this.range.minimum || new Date() }));
                let toTextSpan = document.createElement('span');
                toTextSpan.innerText = toText;
                right.appendChild(toTextSpan);
                right.appendChild(rightDate);
                this.rightCalendar = new date_box_1.default(rightDate, Object.assign(Object.assign({}, options), { value: this.range.maximum || new Date() }));
                form.appendChild(left);
                form.appendChild(document.createElement('br'));
                form.appendChild(right);
                return form;
            },
            disposeContent: () => {
                this.leftCalendar && this.leftCalendar.dispose();
                this.rightCalendar && this.rightCalendar.dispose();
            },
            setActualState: (width) => {
            }
        });
    }
    show(options) {
        this.range = options.range;
        if (options.isIntYearGroupInterval && this.range.minimum && this.range.maximum) {
            this.range.minimum = new Date(this.range.minimum, 0, 1);
            this.range.maximum = new Date(this.range.maximum, 0, 1);
        }
        this.format = _utils_1.CalendarHelper.getCalendarType(options.groupInterval);
        this.maxZoomLevel = _utils_1.CalendarHelper.getCalendarMaxZoomLevel(options.groupInterval);
        this.displayFormatFunc = value => {
            if (options.isIntYearGroupInterval)
                value = value.getFullYear();
            return _format_helper_1.DashboardFormatHelper.format(value, options.displayFormat);
        };
        this.disabledDates = options.groupInterval === 'WeekYear' ? (args) => args.date.getDay() !== options.firstDayOfWeek : undefined;
        this.dialogForm.showDialog();
    }
    dispose() {
        this.dialogForm && this.dialogForm.dispose();
    }
}
exports.customTimePeriodDialog = customTimePeriodDialog;


/***/ }),

/***/ 82717:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dialogForm = exports.dialogSizes = exports.dialogClasses = void 0;
const resize_callbacks_1 = __webpack_require__(21803);
const button_1 = __webpack_require__(68203);
const popup_1 = __webpack_require__(26519);
const $ = __webpack_require__(65311);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _dashboard_layout_mode_helper_1 = __webpack_require__(26018);
const _render_helper_1 = __webpack_require__(39336);
exports.dialogClasses = {
    form: 'dx-dashboard-form',
    formWrapper: 'dx-dashboard-form-wrapper dx-designer-viewport',
    simpleDialog: 'dx-dashboard-simple-dialog',
    element: 'dx-dashboard-dialog-element',
    elementLargeMarginTop: 'dx-dashboard-dialog-element-large-margin-top',
    elementSmallMarginTop: 'dx-dashboard-dialog-element-small-margin-top',
    name: 'dx-dashboard-dialog-element-name',
    disabledName: 'dx-dashboard-dialog-element-name-disabled',
    box: 'dx-dashboard-dialog-element-box',
    buttons: 'dx-dashboard-dialog-buttons',
    elementTextBox: 'dx-dashboard-dialog-element-text-box',
    elementNumberBox: 'dx-dashboard-dialog-element-number-box',
};
exports.dialogSizes = {
    width: 500,
    height: 500,
    minWidth: 350,
    minHeight: 200,
};
var widgetMargin = 1;
class dialogForm {
    constructor(options) {
        this.controlCreationCallbacks = _jquery_helpers_1.createJQueryCallbacks();
        this.options = options;
        this._initialize();
    }
    showDialog() {
        this.popupInstance.show();
    }
    hideDialog() {
        this.popupInstance.hide();
    }
    dispose() {
        if (this.popupInstance) {
            this.popupInstance.dispose();
        }
        if (this.options && this.options.disposeContent) {
            this.options.disposeContent();
        }
    }
    _initialize() {
        var that = this, options = that.options, getMaxSize = function () {
            var windowHeight = _dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isMobile ? window.innerHeight : undefined;
            var height = $.fn.constructor(options.dialogContainer).height();
            return !!windowHeight && (windowHeight > height) ? windowHeight : height;
        }, correctMaxSize = function () {
            that.popupInstance.option('maxHeight', getMaxSize());
            var popupContent = _jquery_helpers_1.$unwrap(that.popupInstance.content());
            var scrollableContent = popupContent.querySelector('.dx-scrollable-container');
            if (scrollableContent) {
                scrollableContent.style.maxHeight = _jquery_helpers_1.$unwrap(that.popupInstance.content()).style.maxHeight;
            }
        }, resizeHandler = function () {
            correctMaxSize();
        };
        var popupOptions = {
            title: options.title,
            showCloseButton: true,
            toolbarItems: [{ toolbar: 'bottom' }],
            animation: {
                show: {
                    type: 'fade',
                    from: 0, to: 1
                },
                hide: {
                    type: 'fade',
                    from: 1, to: 0
                }
            },
            position: {
                my: 'center',
                at: 'center',
                of: _dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isMobile ? window : options.dialogContainer
            },
            width: options.width,
            height: options.height,
            maxHeight: getMaxSize(),
            minWidth: exports.dialogSizes.minWidth,
            maxWidth: _dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isMobile ? '90vw' : null,
            minHeight: exports.dialogSizes.minHeight,
            resizeEnabled: !options.allowScrolling,
            onInitialized: function (e) {
                resize_callbacks_1.default.add(resizeHandler);
            },
            onDisposing: function (e) {
                resize_callbacks_1.default.remove(resizeHandler);
            },
            onResize: function (e) {
                var dataGrid = e.component.content().children().data('dxDataGrid');
                if (!!dataGrid) {
                    dataGrid.updateDimensions();
                }
            },
            onContentReady: function (args) {
                if (that.options.buttons) {
                    var buttons = document.createElement('div');
                    buttons.classList.add(exports.dialogClasses.buttons);
                    that.options.buttons.forEach(button => {
                        let element = document.createElement('div');
                        element.classList.add(button.className);
                        buttons.appendChild(element);
                        new button_1.default(element, {
                            text: button.name,
                            onClick: function () {
                                button.func();
                                if (button.hide)
                                    that.popupInstance.hide();
                            },
                            type: button.isDefault ? 'default' : 'normal'
                        });
                    });
                    _jquery_helpers_1.$unwrap(that.popupInstance.bottomToolbar()).appendChild(buttons);
                    var buttonsDeltaWidth = -$.fn.constructor(buttons).width();
                    for (let i = 0; i < buttons.children.length; i++) {
                        buttonsDeltaWidth += _render_helper_1.RenderHelper.getElementBoxFloat(buttons.children[i]).width;
                    }
                    if (buttonsDeltaWidth > 0) {
                        this.option('minWidth', this.option('minWidth') + Math.ceil(buttonsDeltaWidth));
                    }
                }
                if (!options.deferredRendering) {
                    that._renderPopupContent(args.component);
                }
            },
            onShowing: function (args) {
                if (options.deferredRendering) {
                    that._renderPopupContent(args.component);
                }
                var formWidth = that._setLabelsWidth();
                that.options.setActualState(formWidth);
                options.onShowing && options.onShowing(args);
            },
            onHidden: options.onHidden,
            onShown: function (args) {
                correctMaxSize();
                options.onShown && options.onShown(args);
            }
        };
        popupOptions['bottomTemplate'] = () => { };
        popupOptions['container'] = options.dialogContainer;
        if (!_dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isMobile) {
            popupOptions.position['boundary'] = options.dialogContainer;
        }
        popupOptions.wrapperAttr = {
            class: (!options.allowScrolling ? exports.dialogClasses.simpleDialog + ' ' : '') + exports.dialogClasses.formWrapper
        };
        let popup = document.createElement('div');
        options.dialogContainer.appendChild(popup);
        that.popupInstance = new popup_1.default(popup, popupOptions);
    }
    _renderPopupContent(component) {
        this.options.disposeContent();
        let content = this.options.renderContent(this.controlCreationCallbacks);
        if (this.scrollableContent) {
            this.scrollableContent.innerHTML = '';
            this.scrollableContent.appendChild(content);
            this.controlCreationCallbacks.fire(component);
        }
        else {
            _jquery_helpers_1.$unwrap(this.popupInstance.content()).appendChild(content);
            this.controlCreationCallbacks.fire(component);
            if (this.options.allowScrolling) {
                this.scrollableContent = _render_helper_1.RenderHelper.wrapScrollable(_jquery_helpers_1.$unwrap(this.popupInstance.content()), 'auto', 'both');
            }
        }
    }
    _setLabelsWidth() {
        var that = this, width = 0, maxWidth = 400, minWidth = 100, leftOffset = 10, $div = undefined, $span = undefined, $label = undefined, $labelsContainer = $.fn.constructor('<div/>', {
            'class': 'dx-dashboard-labels-container'
        }).appendTo($.fn.constructor('.dx-dashboard-container')), $controlContainer, boxWidth = 0;
        $.each(_jquery_helpers_1.$wrap(that.popupInstance.content()).find('.' + exports.dialogClasses.form).children(), function (index, div) {
            $div = $.fn.constructor(div);
            $span = $.fn.constructor('<span/>').append($div.find('.' + exports.dialogClasses.name).text());
            $labelsContainer.append($span).append('<br/>');
            $controlContainer = $div.find('.' + exports.dialogClasses.box);
            boxWidth = Math.max(boxWidth, $controlContainer.outerWidth());
        });
        $.each($labelsContainer.children(), function (index, label) {
            $label = $.fn.constructor(label);
            width = Math.max(width, $label.width());
        });
        width = Math.max(minWidth, Math.min(maxWidth, width)) + leftOffset;
        $labelsContainer.remove();
        $.fn.constructor('.' + exports.dialogClasses.name).css('width', width);
        return width + boxWidth + _utils_1.pxToNumber($.fn.constructor('.' + exports.dialogClasses.name).css('margin-right')) + 2 * widgetMargin;
    }
}
exports.dialogForm = dialogForm;


/***/ }),

/***/ 83496:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParameterEntity = exports.parametersDialog = exports.parameterTypes = void 0;
const data_source_1 = __webpack_require__(47545);
__webpack_require__(21523);
const check_box_1 = __webpack_require__(21523);
const data_grid_1 = __webpack_require__(68408);
const date_box_1 = __webpack_require__(66417);
const number_box_1 = __webpack_require__(53158);
const select_box_1 = __webpack_require__(76420);
const tag_box_1 = __webpack_require__(8520);
const text_box_1 = __webpack_require__(7559);
const themes_1 = __webpack_require__(84201);
const $ = __webpack_require__(65311);
const _default_1 = __webpack_require__(65855);
const _jquery_helpers_1 = __webpack_require__(59384);
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const _constants_1 = __webpack_require__(69859);
const _dashboard_layout_mode_helper_1 = __webpack_require__(26018);
const _dialog_form_1 = __webpack_require__(82717);
const genericParametersDialogSizes = {
    fakeElementsHeight: 172,
    fakeParametersDialogGridRowHeight: 34,
};
var dialogClasses = {
    allowNullCheckBox: 'dx-parameter-allownull-checkbox',
    allowNullCheckBoxSize: 'dx-datagrid-checkbox-size',
    valueEditor: 'dx-parameter-value-editor',
    multiselectValuePart: 'dx-dashboard-dialog-parameters-tag',
    theme: 'dx-dashboard-theme',
};
exports.parameterTypes = {
    string: 'String',
    int: 'Int',
    float: 'Float',
    bool: 'Bool',
    dateTime: 'DateTime',
    selector: 'Selector',
    multiselector: 'Multiselector',
    guid: 'Guid'
};
class parametersDialog {
    constructor(options) {
        this.valueChanged = _jquery_helpers_1.createJQueryCallbacks();
        this.options = options;
        if (this.options.getParametersCollection) {
            this.getParametersCollection = this.options.getParametersCollection;
        }
        if (this.options.submitParameters) {
            this.submitParameters = this.options.submitParameters;
        }
        this._initialize();
    }
    _initialize() {
        var that = this, options = that.options, numberOfParameters = that.getParametersCollection().getVisibleParameters().length, scroll = numberOfParameters > 8, allowNullColumn = that.allowNullColumn(), submitParameters = that.submitParameters, parameterEntities = [];
        let notScrollHeight = themes_1.default.isMaterial(themes_1.default.current()) ?
            _constants_1.devExtremeConstants.materialPopupToolbarHeight + _constants_1.devExtremeConstants.dxPopupTitleBorderBottom + 2 * _constants_1.devExtremeConstants.dxDatagridHeadersBorder +
                _constants_1.dashboardConstants.materialParametersDialogFormPaddingTop +
                _constants_1.devExtremeConstants.materialGridBaseHeaderHeight + _constants_1.devExtremeConstants.dxDatagridHeadersBorder +
                numberOfParameters * (_constants_1.devExtremeConstants.materialGridBaseCellHeight + _constants_1.devExtremeConstants.materialGridBaseRowBorder) +
                _constants_1.dashboardConstants.materialParametersDialogFormPaddingBottom +
                _constants_1.devExtremeConstants.materialPopupContentPadding * 2 + _constants_1.devExtremeConstants.materialButtonHeight
            :
                (numberOfParameters + 1) * genericParametersDialogSizes.fakeParametersDialogGridRowHeight + genericParametersDialogSizes.fakeElementsHeight;
        that.dialogForm = new _dialog_form_1.dialogForm({
            title: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ParametersFormCaption),
            fullScreenMode: options.fullScreenMode,
            dialogContainer: options.parametersDialogContainer,
            width: allowNullColumn ? _dialog_form_1.dialogSizes.width : _dialog_form_1.dialogSizes.minWidth,
            height: scroll ? _dialog_form_1.dialogSizes.height : notScrollHeight,
            allowScrolling: false,
            deferredRendering: false,
            onShowing: options.onShowing,
            onShown: options.onShown,
            onHidden: options.onHidden,
            buttons: [{
                    name: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonReset), func: () => that.resetParameterValues()
                }, {
                    name: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonSubmit), hide: true, func: () => that.submitParameterValues(), isDefault: true
                }, {
                    name: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonCancel), hide: true, func: () => { }
                }],
            renderContent: (controlCreationCallbacks) => {
                var parametersForm = document.createElement('div');
                parametersForm.classList.add(_dialog_form_1.dialogClasses.form);
                this._dataGrid = that._generateContent(parametersForm, controlCreationCallbacks);
                return parametersForm;
            },
            disposeContent: () => {
                this._disposeGrid();
            },
            setActualState: function () {
                that.setActualState();
            }
        });
    }
    _disposeGrid() {
        if (this._dataGrid) {
            this._dataGrid.option('dataSource').forEach(entry => entry.dispose());
            this._dataGrid.dispose();
        }
    }
    appendNullGridColumn(gridColumns) {
        if (this.allowNullColumn())
            gridColumns.push(this.createNullColumn());
    }
    allowNullColumn() {
        var allowNullValues;
        this.getParametersCollection().getVisibleParameters().forEach(parameter => {
            if (parameter.getAllowNull())
                allowNullValues = true;
        });
        return allowNullValues;
    }
    createNullColumn() {
        return {
            dataField: 'fakeDataField_divAllowNull',
            caption: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ParametersFormAllowNullColumnCaption),
            width: '20%',
            alignment: 'center',
            allowEditing: false,
            cellTemplate: function (container, options) {
                let entity = options.data;
                _jquery_helpers_1.$unwrap(container).appendChild(_jquery_helpers_1.$unwrap(entity.divAllowNull));
            }
        };
    }
    createGridColumns() {
        let allowNullColumn = this.allowNullColumn();
        let gridColumns = [{
                dataField: 'description',
                caption: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ParametersFormNameColumnCaption),
                dataType: 'string',
                width: allowNullColumn ? '40%' : '50%',
                allowEditing: false
            }, {
                dataField: 'fakeDataField_divValueEditor',
                caption: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ParametersFormValueColumnCaption),
                width: allowNullColumn ? '40%' : '50%',
                cssClass: 'dx-parameter-value-editor',
                showEditorAlways: true,
                editCellTemplate: (cellElement, cellInfo) => {
                    _jquery_helpers_1.$unwrap(cellElement).appendChild(_jquery_helpers_1.$unwrap(cellInfo.data.divValueEditor));
                }
            }];
        this.appendNullGridColumn(gridColumns);
        return gridColumns;
    }
    _generateContent(element, controlCreationCallbacks, subscribeValueChanged = false) {
        var that = this, parameterEntities = that.getParametersCollection().getVisibleParameters().map(parameter => {
            let parameterEntity = that._getParameterEntity(parameter, controlCreationCallbacks);
            if (subscribeValueChanged) {
                parameterEntity.valueChanged.add((e) => that.valueChanged.fire());
            }
            return parameterEntity;
        });
        this.submitParameterValues = () => {
            that.submitParameters(parameterEntities.map(parameterEntity => parameterEntity.wrapParameter()));
        };
        this.resetParameterValues = () => {
            var parametersCollection = that.getParametersCollection();
            parameterEntities.forEach(parameterEntity => {
                parameterEntity.setValue(parametersCollection.getParameterDefaultValue(parameterEntity.name));
            });
        };
        this.setActualState = () => {
            var parametersCollection = that.getParametersCollection();
            parameterEntities.forEach(parameterEntity => {
                var parameter = parametersCollection.getParameterByName(parameterEntity.name);
                if (parameter) {
                    var lookUpValues = parameter.getLookUpValues();
                    if (lookUpValues !== null)
                        parameterEntity.setLookUpValues(lookUpValues);
                    parameterEntity.setValue(parameter.getValue());
                }
            });
        };
        let gridOptions = {
            dataSource: parameterEntities,
            columns: that.createGridColumns(),
            width: '100%',
            height: '100%',
            showColumnLines: true,
            showRowLines: true,
            allowColumnResizing: true,
            loadPanel: {
                enabled: false
            },
            repaintChangesOnly: true,
            editing: { mode: 'cell', allowUpdating: true, refreshMode: 'repaint' },
            paging: { enabled: false },
            sorting: { mode: 'none' },
            scrolling: {
                mode: 'standard'
            }
        };
        if (themes_1.default.isMaterial(themes_1.default.current())) {
            gridOptions.showBorders = true;
            gridOptions.rowAlternationEnabled = parameterEntities.length > 2;
        }
        return new data_grid_1.default(element, gridOptions);
    }
    generateContent(element, disposeCallback) {
        let controlCreationCallbacks = _jquery_helpers_1.createJQueryCallbacks();
        this._disposeGrid();
        this._dataGrid = this._generateContent(element, controlCreationCallbacks, true);
        let prepareActualValues = (controlCreationCallbacks) => {
            controlCreationCallbacks.fire();
            this.setActualState();
        };
        prepareActualValues(controlCreationCallbacks);
        return {
            grid: this._dataGrid,
            submitParameterValues: () => this.submitParameterValues(),
            resetParameterValues: () => this.resetParameterValues(),
            valueChanged: this.valueChanged,
            dispose: () => {
                this.dispose();
                disposeCallback && disposeCallback();
            }
        };
    }
    show() {
        this.dialogForm.showDialog();
    }
    hide() {
        this.dialogForm.hideDialog();
    }
    dispose() {
        this.dialogForm && this.dialogForm.dispose();
        this._disposeGrid();
    }
    _getParameterEntity(parameter, controlCreationCallbacks) {
        var entityOptions = {
            name: parameter.getName(),
            description: parameter.getDescription(),
            defaultValue: parameter.getDefaultValue(),
            controlCreationCallbacks: controlCreationCallbacks,
            allowNull: parameter.getAllowNull(),
            allowMultiselect: parameter.getAllowMultiselect(),
            type: parameter.getType(),
            value: parameter.getValue()
        };
        if (parameter.getLookUpValues() !== null) {
            if (entityOptions.allowMultiselect) {
                return new ParameterEntity(Object.assign(Object.assign({}, entityOptions), { valueName: 'value', createControl: (element) => new tag_box_1.default(element, {
                        showDropDownButton: true,
                        showSelectionControls: true,
                        selectAllMode: 'allPages',
                        multiline: false,
                        tagTemplate: (data, $element) => {
                            var element = _jquery_helpers_1.$unwrap($element);
                            if (element) {
                                element.innerText = $.fn.constructor(element).is(':first-child') ? data.displayValue : ', ' + data.displayValue;
                                element.classList.add(dialogClasses.multiselectValuePart);
                                return element;
                            }
                            return undefined;
                        },
                        searchEnabled: true,
                        selectAllText: _default_1.getLocalizationById('DashboardStringId.FilterElementShowAllItem'),
                        noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),
                        displayExpr: 'displayValue',
                        valueExpr: 'value',
                        searchExpr: 'displayValue',
                        placeholder: _localizer_1.localizer.getString(_localization_ids_1.localizationId.ParametersSelectorText),
                        dropDownOptions: {
                            container: this.options.parametersDialogContainer
                        },
                        onSelectionChanged: e => e.element.title = e.component.option('value').join(', '),
                    }) }));
            }
            else {
                return new ParameterEntity(Object.assign(Object.assign({}, entityOptions), { valueName: 'value', createControl: (element) => new select_box_1.default(element, {
                        searchEnabled: true,
                        selectAllText: _default_1.getLocalizationById('DashboardStringId.FilterElementShowAllItem'),
                        noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),
                        encodeNoDataText: true,
                        displayExpr: 'displayValue',
                        valueExpr: 'value',
                        searchExpr: 'displayValue',
                        placeholder: _localizer_1.localizer.getString(_localization_ids_1.localizationId.ParametersSelectorText),
                        dropDownOptions: {
                            container: this.options.parametersDialogContainer
                        }
                    }) }));
            }
        }
        else {
            switch (parameter.getType()) {
                case exports.parameterTypes.string:
                    return new ParameterEntity(Object.assign(Object.assign({}, entityOptions), { valueName: 'value', createControl: (element) => new text_box_1.default(element) }));
                case exports.parameterTypes.int:
                    return new ParameterEntity(Object.assign(Object.assign({}, entityOptions), { valueName: 'value', createControl: (element) => new number_box_1.default(element, {
                            showSpinButtons: true,
                            step: 1
                        }) }));
                case exports.parameterTypes.float:
                    return new ParameterEntity(Object.assign(Object.assign({}, entityOptions), { valueName: 'value', createControl: (element) => new number_box_1.default(element, {
                            showSpinButtons: true,
                            step: 0.1
                        }) }));
                case exports.parameterTypes.bool:
                    return new ParameterEntity(Object.assign(Object.assign({}, entityOptions), { valueName: 'value', createControl: (element) => new check_box_1.default(element) }));
                case exports.parameterTypes.dateTime:
                    return new ParameterEntity(Object.assign(Object.assign({}, entityOptions), { valueName: 'value', createControl: (element) => new date_box_1.default(element, {
                            pickerType: _dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isTouch ? 'rollers' : 'calendar',
                            width: '100%',
                            applyButtonText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonOK),
                            cancelButtonText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonCancel),
                            placeholder: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.SelectDate),
                            dropDownOptions: {
                                container: this.options.parametersDialogContainer
                            },
                            onPopupInitialized: function (e) {
                                var popup = e.popup;
                                if (popup) {
                                    let todayBtn = {
                                        widget: 'dxButton', toolbar: 'bottom', location: 'center',
                                        options: {
                                            text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ParametersFormCalendarTodayButton),
                                            onClick: function () {
                                                var dateBox = e.component;
                                                if (dateBox) {
                                                    var todate = new Date();
                                                    todate.setHours(0, 0, 0, 0);
                                                    dateBox.option('value', todate);
                                                }
                                            }
                                        }
                                    };
                                    if (_dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isTouch) {
                                        popup.option('toolbarItems').push(todayBtn);
                                    }
                                    else {
                                        popup.option('toolbarItems', [todayBtn]);
                                    }
                                }
                            }
                        }) }));
                case exports.parameterTypes.guid:
                    return new ParameterEntity(Object.assign(Object.assign({}, entityOptions), { valueName: 'value', createControl: (element) => new text_box_1.default(element, {
                            mask: 'hhhhhhhh-hhhh-hhhh-hhhh-hhhhhhhhhhhh',
                            maskRules: { 'h': /[0-9A-Fa-f]/ },
                            useMaskedValue: true
                        }) }));
            }
        }
    }
}
exports.parametersDialog = parametersDialog;
class ParameterEntity {
    constructor(options) {
        this.lookUpValues = [];
        this.valueChanged = _jquery_helpers_1.createJQueryCallbacks();
        this.name = options.name;
        this.type = options.type;
        this.description = options.description ? options.description : this.name;
        this.defaultValue = options.defaultValue;
        this.value = options.value;
        this.lookUpValues = [];
        this.allowNull = options.allowNull;
        this.allowMultiselect = options.allowMultiselect;
        this.createControl = options.createControl;
        this.valueName = options.valueName;
        this.controlCreationCallbacks = options.controlCreationCallbacks;
        this.divValueEditor = document.createElement('div');
        this.divValueEditor.classList.add(dialogClasses.valueEditor);
        this.divValueEditor.classList.add(dialogClasses.valueEditor + '-' + this.type.toLowerCase());
        this.divValueEditor.classList.add(dialogClasses.allowNullCheckBoxSize);
        if (this.allowNull) {
            this.divAllowNull = document.createElement('div');
            this.divAllowNull.classList.add(dialogClasses.allowNullCheckBox);
            this.divAllowNull.classList.add(dialogClasses.allowNullCheckBoxSize);
        }
        else {
            this.divAllowNull = document.createElement('center');
            this.divAllowNull.innerText = 'n/a';
        }
        this._addControl();
    }
    dispose() {
        if (this.allowNullControl) {
            this.allowNullControl.dispose();
        }
        if (this.control) {
            this.control.dispose();
        }
    }
    getValue() {
        if (this.allowNull && this.allowNullControl.option('value') === true)
            return null;
        else
            return this.control.option(this.valueName);
    }
    setValue(value) {
        if (this.allowMultiselect) {
            if ((value === null) || (value === undefined)) {
                value = [];
            }
            else if (!Array.isArray(value)) {
                value = [{ displayValue: value, value: value }];
            }
        }
        this.control.option('value', value);
    }
    setLookUpValues(values) {
        var newValues = [];
        values.forEach(value => {
            newValues.push({
                value: value.getValue(),
                displayValue: value.getDisplayText()
            });
        });
        this.lookUpValues = newValues;
        this.control.option('dataSource', new data_source_1.default(newValues));
    }
    wrapParameter() {
        return {
            Name: this.name,
            Value: this.getValue()
        };
    }
    _addControl() {
        this.controlCreationCallbacks.add((component) => {
            if (!this.control) {
                this.control = this.createControl(this.divValueEditor);
                this.control.option('onValueChanged', this.allowNull ?
                    (e) => {
                        var passNull = this.allowNullControl.option('value'), value = this.control.option('value');
                        if (this.allowMultiselect) {
                            if (passNull === true && value.length > 0)
                                this.allowNullControl.option('value', false);
                            else if (passNull === false && value.length === 0)
                                this.allowNullControl.option('value', true);
                        }
                        else if (passNull === false && value === null)
                            this.allowNullControl.option('value', true);
                        else if (passNull === true && value !== null)
                            this.allowNullControl.option('value', false);
                        this.valueChanged.fire();
                    } :
                    (e) => {
                        this.valueChanged.fire();
                    });
                if (this.allowNull) {
                    this.allowNullControl = new check_box_1.default(this.divAllowNull, {
                        value: this.value === null,
                        onValueChanged: (e) => {
                            var value = this.control.option('value');
                            if (e.value) {
                                this.value = value;
                                if (this.allowMultiselect && value !== [])
                                    this.control.option('value', []);
                                else if (value !== null)
                                    this.control.option('value', null);
                            }
                            else if (value === null || value.length === 0)
                                this.control.option('value', this.value);
                        }
                    });
                }
            }
        });
    }
}
exports.ParameterEntity = ParameterEntity;


/***/ }),

/***/ 57983:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.exportDialog = void 0;
const string_1 = __webpack_require__(36306);
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const _export_options_1 = __webpack_require__(167);
const _viewer_item_types_1 = __webpack_require__(98104);
const _dialog_form_1 = __webpack_require__(82717);
const _export_localization_1 = __webpack_require__(62231);
const _export_options_cache_1 = __webpack_require__(19147);
const _export_options_groups_1 = __webpack_require__(53573);
class exportDialog {
    constructor(options) {
        this.defaultTitle = _export_options_1.ExportOptions.DefaultTitle;
        this.defaultFileName = _export_options_1.ExportOptions.DefaultFileName;
        this.options = options;
        this._initialize();
    }
    _initialize() {
        var that = this, options = that.options;
        exportDialog._initializeExportLocalizedStrings();
        that.exportOptionsCache = new _export_options_cache_1.exportOptionsCache();
        that.dialogForm = new _dialog_form_1.dialogForm({
            dialogContainer: options.container,
            fullScreenMode: options.fullScreenMode,
            width: 'auto',
            height: 'auto',
            allowScrolling: true,
            deferredRendering: true,
            buttons: [{
                    name: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonReset),
                    func: function (type, typeExportEntities) {
                        that.group.set(options.defaultDocumentInfo);
                    },
                    hide: false
                }, {
                    name: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonExport),
                    hide: true,
                    func: function () {
                        let defaultDocumentInfo = options.defaultDocumentInfo;
                        var actualDocumentInfo = that.exportOptionsCache.getActualDocumentInfo(that.dashboardItemName, defaultDocumentInfo);
                        that.group.apply(actualDocumentInfo);
                        that.exportOptionsCache.add(that.dashboardItemName, defaultDocumentInfo, actualDocumentInfo);
                        that.exportFunction(actualDocumentInfo);
                    },
                    isDefault: true
                }, {
                    name: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonCancel),
                    hide: true,
                    func: function () { }
                }
            ],
            renderContent: function (controlCreationCallbacks) {
                let exportForm = document.createElement('div');
                exportForm.classList.add(_dialog_form_1.dialogClasses.form);
                that._createGroup();
                var editors = that.group.getEditors();
                editors.forEach(editor => {
                    let element = document.createElement('div');
                    element.classList.add(_dialog_form_1.dialogClasses.element);
                    switch (editor.margin) {
                        case 'Large':
                            element.classList.add(_dialog_form_1.dialogClasses.elementLargeMarginTop);
                            break;
                        case 'Small':
                            element.classList.add(_dialog_form_1.dialogClasses.elementSmallMarginTop);
                            break;
                    }
                    exportForm.appendChild(element);
                    element.appendChild(editor.labelDiv);
                    element.appendChild(editor.editorDiv);
                });
                return exportForm;
            },
            disposeContent: () => {
                if (this.group) {
                    let editors = that.group.getEditors();
                    editors.forEach(editor => editor.dispose());
                }
            },
            setActualState: function (width) {
            },
            onShown: options.onShown,
            onShowing: options.onShowing,
            onHidden: options.onHidden
        });
    }
    showDialog(dashboardItemName, dashboardItemType, format, options) {
        this.defaultTitle = options.defaultTitle;
        this.defaultFileName = options.defaultFileName;
        this.dashboardItemName = dashboardItemName;
        this.dashboardItemType = dashboardItemType;
        this.format = format;
        this.dialogForm.popupInstance.option('title', this._getLocalizedTitle(options.defaultFileName, format));
        this.dialogForm.showDialog();
    }
    hideDialog() {
        this.dialogForm.hideDialog();
    }
    dispose() {
        this.dialogForm && this.dialogForm.dispose();
    }
    _getLocalizedTitle(name, format) {
        let exportString;
        switch (format) {
            case _export_options_1.exportFormats.pdf:
                exportString = _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ExportToPdf);
                break;
            case _export_options_1.exportFormats.image:
                exportString = _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ExportToImage);
                break;
            default:
                exportString = _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ExportToExcel);
                break;
        }
        return !name ? exportString : string_1.format(_localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ExportTemplate), exportString, name);
    }
    setExportFunction(exportFunction) {
        if (exportFunction)
            this.exportFunction = exportFunction;
    }
    _createImageGroup(dashboardItemType, documentInfo) {
        switch (dashboardItemType) {
            case null:
                return new _export_options_groups_1.dashboardImageOptionsGroup(documentInfo.imageExportOptions.ShowTitle);
            case _viewer_item_types_1.types.image:
                return new _export_options_groups_1.simplyImageOptionsGroup(documentInfo.imageExportOptions.ShowTitle);
            default:
                return new _export_options_groups_1.imageOptionsGroup(documentInfo.imageExportOptions.ShowTitle);
        }
    }
    _createExcelGroup(dashboardItemType, documentInfo) {
        switch (dashboardItemType) {
            case null:
                return new _export_options_groups_1.dashboardExcelOptionsGroup(documentInfo.excelExportOptions.Format);
            default:
                return new _export_options_groups_1.excelOptionsGroup(documentInfo.excelExportOptions.Format, dashboardItemType !== _viewer_item_types_1.types.group && dashboardItemType !== _viewer_item_types_1.types.page && dashboardItemType !== _viewer_item_types_1.types.tabPage && dashboardItemType !== _viewer_item_types_1.types.tabContainer);
        }
    }
    _createPdfGroup(dashboardItemType, documentInfo) {
        switch (dashboardItemType) {
            case null:
                return new _export_options_groups_1.entireDashboardOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.DashboardAutomaticPageLayout, documentInfo.pdfExportOptions.DocumentScaleMode);
            case _viewer_item_types_1.types.group:
            case _viewer_item_types_1.types.page:
                return new _export_options_groups_1.groupItemOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.DashboardAutomaticPageLayout, documentInfo.pdfExportOptions.DocumentScaleMode);
            case _viewer_item_types_1.types.grid:
                return new _export_options_groups_1.gridOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.GridFitToPageWidth, documentInfo.pdfExportOptions.DocumentScaleMode);
            case _viewer_item_types_1.types.chart:
            case _viewer_item_types_1.types.scatter:
                return new _export_options_groups_1.chartOptionsGroup(documentInfo.pdfExportOptions.ShowTitle);
            case _viewer_item_types_1.types.pie:
                return new _export_options_groups_1.pieOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.PieAutoArrangeContent, documentInfo.pdfExportOptions.DocumentScaleMode);
            case _viewer_item_types_1.types.gauge:
                return new _export_options_groups_1.gaugeOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.GaugeAutoArrangeContent, documentInfo.pdfExportOptions.DocumentScaleMode);
            case _viewer_item_types_1.types.card:
                return new _export_options_groups_1.cardOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.CardAutoArrangeContent, documentInfo.pdfExportOptions.DocumentScaleMode);
            case _viewer_item_types_1.types.pivot:
                return new _export_options_groups_1.pivotOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.DocumentScaleMode);
            case _viewer_item_types_1.types.treemap:
                return new _export_options_groups_1.treemapOptionsGroup(documentInfo.pdfExportOptions.ShowTitle);
            case _viewer_item_types_1.types.choroplethMap:
            case _viewer_item_types_1.types.geoPointMap:
            case _viewer_item_types_1.types.bubbleMap:
            case _viewer_item_types_1.types.pieMap:
                return new _export_options_groups_1.mapOptionsGroup(documentInfo.pdfExportOptions.ShowTitle);
            case _viewer_item_types_1.types.rangeFilter:
                return new _export_options_groups_1.rangeFilterOptionsGroup(documentInfo.pdfExportOptions.ShowTitle);
            case _viewer_item_types_1.types.text:
                return new _export_options_groups_1.textItemOptionsGroup(documentInfo.pdfExportOptions.ShowTitle);
            case _viewer_item_types_1.types.boundImage:
                return new _export_options_groups_1.boundImageItemOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.DocumentScaleMode);
            case _viewer_item_types_1.types.image:
                return new _export_options_groups_1.imageItemOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.DocumentScaleMode);
            case _viewer_item_types_1.types.custom:
                return new _export_options_groups_1.customItemOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.DashboardAutomaticPageLayout, documentInfo.pdfExportOptions.DocumentScaleMode);
        }
    }
    _createGroup() {
        var that = this, documentInfo = that.exportOptionsCache.getActualDocumentInfo(that.dashboardItemName, that.options.defaultDocumentInfo);
        if (that.group) {
            that.group.dispose();
        }
        switch (that.format) {
            case _export_options_1.exportFormats.image:
                that.group = that._createImageGroup(that.dashboardItemType, documentInfo);
                break;
            case _export_options_1.exportFormats.excel:
                that.group = that._createExcelGroup(that.dashboardItemType, documentInfo);
                break;
            default:
                that.group = that._createPdfGroup(that.dashboardItemType, documentInfo);
                break;
        }
        that.group.createEditors({ popupContainer: this.options.container });
        if (documentInfo.pdfExportOptions && documentInfo.pdfExportOptions.Title === _export_options_1.ExportOptions.DefaultTitle)
            documentInfo.pdfExportOptions.Title = this.defaultTitle;
        if (documentInfo.imageExportOptions && documentInfo.imageExportOptions.Title === _export_options_1.ExportOptions.DefaultTitle)
            documentInfo.imageExportOptions.Title = this.defaultTitle;
        if (documentInfo.fileName === _export_options_1.ExportOptions.DefaultFileName)
            documentInfo.fileName = this.defaultFileName;
        that.group.set(documentInfo);
        var scaleModeGroup = !!that.group['dashboardOptionsGroup'] ? that.group['dashboardOptionsGroup'].scaleModeOptionsGroup : that.group['scaleModeOptionsGroup'];
        if (!!scaleModeGroup) {
            scaleModeGroup.visibilityUpdated.add(() => { this.dialogForm.popupInstance.repaint(); });
        }
    }
    static _initializeExportLocalizedStrings() {
        _export_localization_1.paperKind.letter = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKindLetter), value: _export_options_1.dashboardExportPaperKind.letter };
        _export_localization_1.paperKind.legal = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKindLegal), value: _export_options_1.dashboardExportPaperKind.legal };
        _export_localization_1.paperKind.executive = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKindExecutive), value: _export_options_1.dashboardExportPaperKind.executive };
        _export_localization_1.paperKind.a5 = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKindA5), value: _export_options_1.dashboardExportPaperKind.a5 };
        _export_localization_1.paperKind.a4 = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKindA4), value: _export_options_1.dashboardExportPaperKind.a4 };
        _export_localization_1.paperKind.a3 = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKindA3), value: _export_options_1.dashboardExportPaperKind.a3 };
        _export_localization_1.pageLayout.auto = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayoutAuto), value: _export_options_1.dashboardExportPageLayout.auto };
        _export_localization_1.pageLayout.portrait = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayoutPortrait), value: _export_options_1.dashboardExportPageLayout.portrait };
        _export_localization_1.pageLayout.landscape = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayoutLandscape), value: _export_options_1.dashboardExportPageLayout.landscape };
        _export_localization_1.scaleMode.none = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ScaleModeNone), value: _export_options_1.dashboardExportDocumentScaleMode.none };
        _export_localization_1.scaleMode.useScaleFactor = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ScaleModeUseScaleFactor), value: _export_options_1.dashboardExportDocumentScaleMode.useScaleFactor };
        _export_localization_1.scaleMode.autoFitToPageWidth = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ScaleModeAutoFitToPagesWidth), value: _export_options_1.dashboardExportDocumentScaleMode.autoFitToPagesWidth };
        _export_localization_1.dashboardStatePosition.below = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FilterStatePresentationAfter), value: _export_options_1.dashboardStateExportPosition.below };
        _export_localization_1.dashboardStatePosition.separatePage = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FilterStatePresentationAfterAndSplitPage), value: _export_options_1.dashboardStateExportPosition.separatePage };
        _export_localization_1.excelDashboardStatePosition.below = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FilterStatePresentationAfter), value: _export_options_1.dashboardStateExcelExportPosition.below };
        _export_localization_1.excelDashboardStatePosition.separateSheet = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FilterStatePresentationSplitSheet), value: _export_options_1.dashboardStateExcelExportPosition.separateSheet };
        _export_localization_1.imageFormat.png = { displayValue: 'PNG', value: _export_options_1.dashboardExportImageFormat.png };
        _export_localization_1.imageFormat.gif = { displayValue: 'GIF', value: _export_options_1.dashboardExportImageFormat.gif };
        _export_localization_1.imageFormat.jpg = { displayValue: 'JPG', value: _export_options_1.dashboardExportImageFormat.jpg };
        _export_localization_1.excelFormat.csv = { displayValue: 'CSV', value: _export_options_1.dashboardExportExcelFormat.csv };
        _export_localization_1.excelFormat.xls = { displayValue: 'XLS', value: _export_options_1.dashboardExportExcelFormat.xls };
        _export_localization_1.excelFormat.xlsx = { displayValue: 'XLSX', value: _export_options_1.dashboardExportExcelFormat.xlsx };
        _export_localization_1.sizeMode.none = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.SizeModeNone), value: _export_options_1.dashboardExportSizeMode.none };
        _export_localization_1.sizeMode.stretch = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.SizeModeStretch), value: _export_options_1.dashboardExportSizeMode.stretch };
        _export_localization_1.sizeMode.zoom = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.SizeModeZoom), value: _export_options_1.dashboardExportSizeMode.zoom };
    }
}
exports.exportDialog = exportDialog;


/***/ }),

/***/ 62231:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sizeMode = exports.excelFormat = exports.imageFormat = exports.excelDashboardStatePosition = exports.dashboardStatePosition = exports.scaleMode = exports.pageLayout = exports.paperKind = void 0;
exports.paperKind = {};
exports.pageLayout = {};
exports.scaleMode = {};
exports.dashboardStatePosition = {};
exports.excelDashboardStatePosition = {};
exports.imageFormat = {};
exports.excelFormat = {};
exports.sizeMode = {};


/***/ }),

/***/ 19147:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.exportOptionsCache = exports.optionName = void 0;
exports.optionName = {
    pdfTitle: 'pdfTitle',
    imageTitle: 'imageTitle',
    fileName: 'fileName',
    autoFitPageCount: 'autoFitPageCount',
    cardAutoArrangeContent: 'cardAutoArrangeContent',
    chartAutomaticPageLayout: 'chartAutomaticPageLayout',
    chartSizeMode: 'chartSizeMode',
    pdfDashboardStatePosition: 'pdfDashboardStatePosition',
    gaugeAutoArrangeContent: 'gaugeAutoArrangeContent',
    gridFitToPageWidth: 'gridFitToPageWidth',
    gridPrintHeadersOnEveryPage: 'gridPrintHeadersOnEveryPage',
    mapAutomaticPageLayout: 'mapAutomaticPageLayout',
    mapSizeMode: 'mapSizeMode',
    pageLayout: 'pageLayout',
    paperKind: 'paperKind',
    pieAutoArrangeContent: 'pieAutoArrangeContent',
    pivotPrintHeadersOnEveryPage: 'pivotPrintHeadersOnEveryPage',
    rangeFilterAutomaticPageLayout: 'rangeFilterAutomaticPageLayout',
    rangeFilterSizeMode: 'rangeFilterSizeMode',
    pdfScaleFactor: 'pdfScaleFactor',
    scaleMode: 'scaleMode',
    dashboardAutomaticPageLayout: 'dashboardAutomaticPageLayout',
    pdfShowTitle: 'pdfShowTitle',
    treemapAutomaticPageLayout: 'treemapAutomaticPageLayout',
    treemapSizeMode: 'treemapSizeMode',
    imageFormat: 'imageFormat',
    resolution: 'resolution',
    imageScaleFactor: 'imageScaleFactor',
    imageShowTitle: 'imageShowTitle',
    csvValueSeparator: 'csvValueSeparator',
    excelDashboardStatePosition: 'excelDashboardStatePosition',
    excelFormat: 'excelFormat',
    pdfExportFilters: 'pdfExportFilters',
    imageExportFilters: 'imageExportFilters',
    excelExportFilters: 'excelExportFilters',
    pdfExportParameters: 'pdfExportParameters',
    imageExportParameters: 'imageExportParameters',
    excelExportParameters: 'excelExportParameters',
    pdfIncludeHiddenParameters: 'pdfIncludeHiddenParameters',
    imageIncludeHiddenParameters: 'imageIncludeHiddenParameters',
    excelIncludeHiddenParameters: 'excelIncludeHiddenParameters',
    fontInfo: 'fontInfo'
};
class exportOptionsCache {
    constructor() {
        this._initialize();
    }
    _initialize() {
        this.documentOptions = {};
        this.itemsOptions = {};
        this.pdfOptions = {};
        this.imageOptions = {};
        this.excelOptions = {};
    }
    _addOption(cache, key, defaultValue, actualValue) {
        if (defaultValue == actualValue)
            delete cache[key];
        else
            cache[key] = actualValue;
    }
    add(dashboardItemName, defaultDocumentInfo, actualDocumentInfo) {
        var that = this;
        if (dashboardItemName === '') {
            this._addOption(that.documentOptions, exports.optionName.pdfTitle, defaultDocumentInfo.pdfExportOptions.Title, actualDocumentInfo.pdfExportOptions.Title);
            this._addOption(that.documentOptions, exports.optionName.imageTitle, defaultDocumentInfo.imageExportOptions.Title, actualDocumentInfo.imageExportOptions.Title);
            this._addOption(that.pdfOptions, exports.optionName.pdfShowTitle, defaultDocumentInfo.pdfExportOptions.ShowTitle, actualDocumentInfo.pdfExportOptions.ShowTitle);
            this._addOption(that.imageOptions, exports.optionName.imageShowTitle, defaultDocumentInfo.imageExportOptions.ShowTitle, actualDocumentInfo.imageExportOptions.ShowTitle);
        }
        this._addOption(that.pdfOptions, exports.optionName.pageLayout, defaultDocumentInfo.pdfExportOptions.PageLayout, actualDocumentInfo.pdfExportOptions.PageLayout);
        this._addOption(that.pdfOptions, exports.optionName.paperKind, defaultDocumentInfo.pdfExportOptions.PaperKind, actualDocumentInfo.pdfExportOptions.PaperKind);
        this.itemsOptions[dashboardItemName] = {};
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.scaleMode, defaultDocumentInfo.pdfExportOptions.DocumentScaleMode, actualDocumentInfo.pdfExportOptions.DocumentScaleMode);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.dashboardAutomaticPageLayout, defaultDocumentInfo.pdfExportOptions.DashboardAutomaticPageLayout, actualDocumentInfo.pdfExportOptions.DashboardAutomaticPageLayout);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.pdfScaleFactor, defaultDocumentInfo.pdfExportOptions.ScaleFactor, actualDocumentInfo.pdfExportOptions.ScaleFactor);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.imageScaleFactor, defaultDocumentInfo.imageExportOptions.ScaleFactor, actualDocumentInfo.imageExportOptions.ScaleFactor);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.autoFitPageCount, defaultDocumentInfo.pdfExportOptions.AutoFitPageCount, actualDocumentInfo.pdfExportOptions.AutoFitPageCount);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.fileName, defaultDocumentInfo.fileName, actualDocumentInfo.fileName);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.gridPrintHeadersOnEveryPage, defaultDocumentInfo.pdfExportOptions.GridPrintHeadersOnEveryPage, actualDocumentInfo.pdfExportOptions.GridPrintHeadersOnEveryPage);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.gridFitToPageWidth, defaultDocumentInfo.pdfExportOptions.GridFitToPageWidth, actualDocumentInfo.pdfExportOptions.GridFitToPageWidth);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.pivotPrintHeadersOnEveryPage, defaultDocumentInfo.pdfExportOptions.PivotPrintHeadersOnEveryPage, actualDocumentInfo.pdfExportOptions.PivotPrintHeadersOnEveryPage);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.chartSizeMode, defaultDocumentInfo.pdfExportOptions.ChartSizeMode, actualDocumentInfo.pdfExportOptions.ChartSizeMode);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.chartAutomaticPageLayout, defaultDocumentInfo.pdfExportOptions.ChartAutomaticPageLayout, actualDocumentInfo.pdfExportOptions.ChartAutomaticPageLayout);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.mapSizeMode, defaultDocumentInfo.pdfExportOptions.MapSizeMode, actualDocumentInfo.pdfExportOptions.MapSizeMode);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.mapAutomaticPageLayout, defaultDocumentInfo.pdfExportOptions.MapAutomaticPageLayout, actualDocumentInfo.pdfExportOptions.MapAutomaticPageLayout);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.treemapSizeMode, defaultDocumentInfo.pdfExportOptions.TreemapSizeMode, actualDocumentInfo.pdfExportOptions.TreemapSizeMode);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.treemapAutomaticPageLayout, defaultDocumentInfo.pdfExportOptions.TreemapAutomaticPageLayout, actualDocumentInfo.pdfExportOptions.TreemapAutomaticPageLayout);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.rangeFilterSizeMode, defaultDocumentInfo.pdfExportOptions.RangeFilterSizeMode, actualDocumentInfo.pdfExportOptions.RangeFilterSizeMode);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.rangeFilterAutomaticPageLayout, defaultDocumentInfo.pdfExportOptions.RangeFilterAutomaticPageLayout, actualDocumentInfo.pdfExportOptions.RangeFilterAutomaticPageLayout);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.pieAutoArrangeContent, defaultDocumentInfo.pdfExportOptions.PieAutoArrangeContent, actualDocumentInfo.pdfExportOptions.PieAutoArrangeContent);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.gaugeAutoArrangeContent, defaultDocumentInfo.pdfExportOptions.GaugeAutoArrangeContent, actualDocumentInfo.pdfExportOptions.GaugeAutoArrangeContent);
        this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.cardAutoArrangeContent, defaultDocumentInfo.pdfExportOptions.CardAutoArrangeContent, actualDocumentInfo.pdfExportOptions.CardAutoArrangeContent);
        if (dashboardItemName != '') {
            this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.pdfShowTitle, defaultDocumentInfo.pdfExportOptions.ShowTitle, actualDocumentInfo.pdfExportOptions.ShowTitle);
            this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.imageShowTitle, defaultDocumentInfo.imageExportOptions.ShowTitle, actualDocumentInfo.imageExportOptions.ShowTitle);
            this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.pdfTitle, defaultDocumentInfo.pdfExportOptions.Title, actualDocumentInfo.pdfExportOptions.Title);
            this._addOption(that.itemsOptions[dashboardItemName], exports.optionName.imageTitle, defaultDocumentInfo.imageExportOptions.Title, actualDocumentInfo.imageExportOptions.Title);
        }
        this._addOption(that.documentOptions, exports.optionName.pdfDashboardStatePosition, defaultDocumentInfo.pdfExportOptions.DashboardStatePosition, actualDocumentInfo.pdfExportOptions.DashboardStatePosition);
        this._addOption(that.documentOptions, exports.optionName.pdfExportFilters, defaultDocumentInfo.pdfExportOptions.ExportFilters, actualDocumentInfo.pdfExportOptions.ExportFilters);
        this._addOption(that.documentOptions, exports.optionName.pdfExportParameters, defaultDocumentInfo.pdfExportOptions.ExportParameters, actualDocumentInfo.pdfExportOptions.ExportParameters);
        this._addOption(that.documentOptions, exports.optionName.pdfIncludeHiddenParameters, defaultDocumentInfo.pdfExportOptions.IncludeHiddenParameters, actualDocumentInfo.pdfExportOptions.IncludeHiddenParameters);
        this._addOption(that.documentOptions, exports.optionName.fontInfo, defaultDocumentInfo.pdfExportOptions.FontInfo, actualDocumentInfo.pdfExportOptions.FontInfo);
        this._addOption(that.imageOptions, exports.optionName.imageFormat, defaultDocumentInfo.imageExportOptions.Format, actualDocumentInfo.imageExportOptions.Format);
        this._addOption(that.imageOptions, exports.optionName.resolution, defaultDocumentInfo.imageExportOptions.Resolution, actualDocumentInfo.imageExportOptions.Resolution);
        this._addOption(that.documentOptions, exports.optionName.imageExportFilters, defaultDocumentInfo.imageExportOptions.ExportFilters, actualDocumentInfo.imageExportOptions.ExportFilters);
        this._addOption(that.documentOptions, exports.optionName.imageExportParameters, defaultDocumentInfo.imageExportOptions.ExportParameters, actualDocumentInfo.imageExportOptions.ExportParameters);
        this._addOption(that.documentOptions, exports.optionName.imageIncludeHiddenParameters, defaultDocumentInfo.imageExportOptions.IncludeHiddenParameters, actualDocumentInfo.imageExportOptions.IncludeHiddenParameters);
        this._addOption(that.documentOptions, exports.optionName.fontInfo, defaultDocumentInfo.imageExportOptions.FontInfo, actualDocumentInfo.imageExportOptions.FontInfo);
        this._addOption(that.excelOptions, exports.optionName.excelFormat, defaultDocumentInfo.excelExportOptions.Format, actualDocumentInfo.excelExportOptions.Format);
        this._addOption(that.excelOptions, exports.optionName.csvValueSeparator, defaultDocumentInfo.excelExportOptions.CsvValueSeparator, actualDocumentInfo.excelExportOptions.CsvValueSeparator);
        this._addOption(that.excelOptions, exports.optionName.excelDashboardStatePosition, defaultDocumentInfo.excelExportOptions.DashboardStatePosition, actualDocumentInfo.excelExportOptions.DashboardStatePosition);
        this._addOption(that.documentOptions, exports.optionName.excelExportFilters, defaultDocumentInfo.excelExportOptions.ExportFilters, actualDocumentInfo.excelExportOptions.ExportFilters);
        this._addOption(that.documentOptions, exports.optionName.excelExportParameters, defaultDocumentInfo.excelExportOptions.ExportParameters, actualDocumentInfo.excelExportOptions.ExportParameters);
        this._addOption(that.documentOptions, exports.optionName.excelIncludeHiddenParameters, defaultDocumentInfo.excelExportOptions.IncludeHiddenParameters, actualDocumentInfo.excelExportOptions.IncludeHiddenParameters);
    }
    _setActualValue(cache, key, setActual, defaultValue) {
        var value = cache[key] != undefined ? cache[key] : defaultValue;
        setActual(value);
    }
    getActualDocumentInfo(dashboardItemName, defaultDocumentInfo) {
        var that = this;
        var actualDocumentInfo = {
            pdfExportOptions: {},
            imageExportOptions: {},
            excelExportOptions: {}
        };
        if (dashboardItemName === '') {
            this._setActualValue(that.documentOptions, exports.optionName.pdfTitle, function (actual) { actualDocumentInfo.pdfExportOptions.Title = actual; }, defaultDocumentInfo.pdfExportOptions.Title);
            this._setActualValue(that.documentOptions, exports.optionName.imageTitle, function (actual) { actualDocumentInfo.imageExportOptions.Title = actual; }, defaultDocumentInfo.imageExportOptions.Title);
            this._setActualValue(that.pdfOptions, exports.optionName.pdfShowTitle, function (actual) { actualDocumentInfo.pdfExportOptions.ShowTitle = actual; }, defaultDocumentInfo.pdfExportOptions.ShowTitle);
            this._setActualValue(that.imageOptions, exports.optionName.imageShowTitle, function (actual) { actualDocumentInfo.imageExportOptions.ShowTitle = actual; }, defaultDocumentInfo.imageExportOptions.ShowTitle);
        }
        this._setActualValue(that.pdfOptions, exports.optionName.paperKind, function (actual) { actualDocumentInfo.pdfExportOptions.PaperKind = actual; }, defaultDocumentInfo.pdfExportOptions.PaperKind);
        this._setActualValue(that.pdfOptions, exports.optionName.pageLayout, function (actual) { actualDocumentInfo.pdfExportOptions.PageLayout = actual; }, defaultDocumentInfo.pdfExportOptions.PageLayout);
        if (this.itemsOptions[dashboardItemName] === undefined)
            this.itemsOptions[dashboardItemName] = {};
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.scaleMode, function (actual) { actualDocumentInfo.pdfExportOptions.DocumentScaleMode = actual; }, defaultDocumentInfo.pdfExportOptions.DocumentScaleMode);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.dashboardAutomaticPageLayout, function (actual) { actualDocumentInfo.pdfExportOptions.DashboardAutomaticPageLayout = actual; }, defaultDocumentInfo.pdfExportOptions.DashboardAutomaticPageLayout);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.pdfScaleFactor, function (actual) { actualDocumentInfo.pdfExportOptions.ScaleFactor = actual; }, defaultDocumentInfo.pdfExportOptions.ScaleFactor);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.imageScaleFactor, function (actual) { actualDocumentInfo.imageExportOptions.ScaleFactor = actual; }, defaultDocumentInfo.imageExportOptions.ScaleFactor);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.autoFitPageCount, function (actual) { actualDocumentInfo.pdfExportOptions.AutoFitPageCount = actual; }, defaultDocumentInfo.pdfExportOptions.AutoFitPageCount);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.fileName, function (actual) { actualDocumentInfo.fileName = actual; }, defaultDocumentInfo.fileName);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.fontInfo, function (actual) { actualDocumentInfo.imageExportOptions.FontInfo = actual; }, defaultDocumentInfo.imageExportOptions.FontInfo);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.gridPrintHeadersOnEveryPage, function (actual) { actualDocumentInfo.pdfExportOptions.GridPrintHeadersOnEveryPage = actual; }, defaultDocumentInfo.pdfExportOptions.GridPrintHeadersOnEveryPage);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.gridFitToPageWidth, function (actual) { actualDocumentInfo.pdfExportOptions.GridFitToPageWidth = actual; }, defaultDocumentInfo.pdfExportOptions.GridFitToPageWidth);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.pivotPrintHeadersOnEveryPage, function (actual) { actualDocumentInfo.pdfExportOptions.PivotPrintHeadersOnEveryPage = actual; }, defaultDocumentInfo.pdfExportOptions.PivotPrintHeadersOnEveryPage);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.chartSizeMode, function (actual) { actualDocumentInfo.pdfExportOptions.ChartSizeMode = actual; }, defaultDocumentInfo.pdfExportOptions.ChartSizeMode);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.chartAutomaticPageLayout, function (actual) { actualDocumentInfo.pdfExportOptions.ChartAutomaticPageLayout = actual; }, defaultDocumentInfo.pdfExportOptions.ChartAutomaticPageLayout);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.mapSizeMode, function (actual) { actualDocumentInfo.pdfExportOptions.MapSizeMode = actual; }, defaultDocumentInfo.pdfExportOptions.MapSizeMode);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.mapAutomaticPageLayout, function (actual) { actualDocumentInfo.pdfExportOptions.MapAutomaticPageLayout = actual; }, defaultDocumentInfo.pdfExportOptions.MapAutomaticPageLayout);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.treemapSizeMode, function (actual) { actualDocumentInfo.pdfExportOptions.TreemapSizeMode = actual; }, defaultDocumentInfo.pdfExportOptions.TreemapSizeMode);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.treemapAutomaticPageLayout, function (actual) { actualDocumentInfo.pdfExportOptions.TreemapAutomaticPageLayout = actual; }, defaultDocumentInfo.pdfExportOptions.TreemapAutomaticPageLayout);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.rangeFilterSizeMode, function (actual) { actualDocumentInfo.pdfExportOptions.RangeFilterSizeMode = actual; }, defaultDocumentInfo.pdfExportOptions.RangeFilterSizeMode);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.rangeFilterAutomaticPageLayout, function (actual) { actualDocumentInfo.pdfExportOptions.RangeFilterAutomaticPageLayout = actual; }, defaultDocumentInfo.pdfExportOptions.RangeFilterAutomaticPageLayout);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.pieAutoArrangeContent, function (actual) { actualDocumentInfo.pdfExportOptions.PieAutoArrangeContent = actual; }, defaultDocumentInfo.pdfExportOptions.PieAutoArrangeContent);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.gaugeAutoArrangeContent, function (actual) { actualDocumentInfo.pdfExportOptions.GaugeAutoArrangeContent = actual; }, defaultDocumentInfo.pdfExportOptions.GaugeAutoArrangeContent);
        this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.cardAutoArrangeContent, function (actual) { actualDocumentInfo.pdfExportOptions.CardAutoArrangeContent = actual; }, defaultDocumentInfo.pdfExportOptions.CardAutoArrangeContent);
        if (dashboardItemName != '') {
            this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.pdfShowTitle, function (actual) { actualDocumentInfo.pdfExportOptions.ShowTitle = actual; }, defaultDocumentInfo.pdfExportOptions.ShowTitle);
            this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.imageShowTitle, function (actual) { actualDocumentInfo.imageExportOptions.ShowTitle = actual; }, defaultDocumentInfo.imageExportOptions.ShowTitle);
            this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.pdfTitle, function (actual) { actualDocumentInfo.pdfExportOptions.Title = actual; }, defaultDocumentInfo.pdfExportOptions.Title);
            this._setActualValue(that.itemsOptions[dashboardItemName], exports.optionName.imageTitle, function (actual) { actualDocumentInfo.imageExportOptions.Title = actual; }, defaultDocumentInfo.imageExportOptions.Title);
        }
        this._setActualValue(that.documentOptions, exports.optionName.pdfDashboardStatePosition, function (actual) { actualDocumentInfo.pdfExportOptions.DashboardStatePosition = actual; }, defaultDocumentInfo.pdfExportOptions.DashboardStatePosition);
        this._setActualValue(that.documentOptions, exports.optionName.pdfExportFilters, function (actual) { actualDocumentInfo.pdfExportOptions.ExportFilters = actual; }, defaultDocumentInfo.pdfExportOptions.ExportFilters);
        this._setActualValue(that.documentOptions, exports.optionName.pdfExportParameters, function (actual) { actualDocumentInfo.pdfExportOptions.ExportParameters = actual; }, defaultDocumentInfo.pdfExportOptions.ExportParameters);
        this._setActualValue(that.documentOptions, exports.optionName.pdfIncludeHiddenParameters, function (actual) { actualDocumentInfo.pdfExportOptions.IncludeHiddenParameters = actual; }, defaultDocumentInfo.pdfExportOptions.IncludeHiddenParameters);
        this._setActualValue(that.documentOptions, exports.optionName.fontInfo, function (actual) { actualDocumentInfo.pdfExportOptions.FontInfo = actual; }, defaultDocumentInfo.pdfExportOptions.FontInfo);
        this._setActualValue(that.imageOptions, exports.optionName.imageFormat, function (actual) { actualDocumentInfo.imageExportOptions.Format = actual; }, defaultDocumentInfo.imageExportOptions.Format);
        this._setActualValue(that.imageOptions, exports.optionName.resolution, function (actual) { actualDocumentInfo.imageExportOptions.Resolution = actual; }, defaultDocumentInfo.imageExportOptions.Resolution);
        this._setActualValue(that.documentOptions, exports.optionName.imageExportFilters, function (actual) { actualDocumentInfo.imageExportOptions.ExportFilters = actual; }, defaultDocumentInfo.imageExportOptions.ExportFilters);
        this._setActualValue(that.documentOptions, exports.optionName.imageExportParameters, function (actual) { actualDocumentInfo.imageExportOptions.ExportParameters = actual; }, defaultDocumentInfo.imageExportOptions.ExportParameters);
        this._setActualValue(that.documentOptions, exports.optionName.imageIncludeHiddenParameters, function (actual) { actualDocumentInfo.imageExportOptions.IncludeHiddenParameters = actual; }, defaultDocumentInfo.imageExportOptions.IncludeHiddenParameters);
        this._setActualValue(that.excelOptions, exports.optionName.excelFormat, function (actual) { actualDocumentInfo.excelExportOptions.Format = actual; }, defaultDocumentInfo.excelExportOptions.Format);
        this._setActualValue(that.excelOptions, exports.optionName.csvValueSeparator, function (actual) { actualDocumentInfo.excelExportOptions.CsvValueSeparator = actual; }, defaultDocumentInfo.excelExportOptions.CsvValueSeparator);
        this._setActualValue(that.excelOptions, exports.optionName.excelDashboardStatePosition, function (actual) { actualDocumentInfo.excelExportOptions.DashboardStatePosition = actual; }, defaultDocumentInfo.excelExportOptions.DashboardStatePosition);
        this._setActualValue(that.documentOptions, exports.optionName.excelExportFilters, function (actual) { actualDocumentInfo.excelExportOptions.ExportFilters = actual; }, defaultDocumentInfo.excelExportOptions.ExportFilters);
        this._setActualValue(that.documentOptions, exports.optionName.excelExportParameters, function (actual) { actualDocumentInfo.excelExportOptions.ExportParameters = actual; }, defaultDocumentInfo.excelExportOptions.ExportParameters);
        this._setActualValue(that.documentOptions, exports.optionName.excelIncludeHiddenParameters, function (actual) { actualDocumentInfo.excelExportOptions.IncludeHiddenParameters = actual; }, defaultDocumentInfo.excelExportOptions.IncludeHiddenParameters);
        return actualDocumentInfo;
    }
}
exports.exportOptionsCache = exportOptionsCache;


/***/ }),

/***/ 53573:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dashboardImageOptionsGroup = exports.simplyImageOptionsGroup = exports.excelOptionsGroup = exports.dashboardExcelOptionsGroup = exports.imageOptionsGroup = exports.cardOptionsGroup = exports.gaugeOptionsGroup = exports.pieOptionsGroup = exports.rangeFilterOptionsGroup = exports.treemapOptionsGroup = exports.mapOptionsGroup = exports.chartOptionsGroup = exports.pivotOptionsGroup = exports.gridOptionsGroup = exports.dashboardOptionsGroup = exports.entireDashboardOptionsGroup = exports.customItemOptionsGroup = exports.groupItemOptionsGroup = exports.imageItemOptionsGroup = exports.boundImageItemOptionsGroup = exports.textItemOptionsGroup = exports.documentOptionsGroup = exports.scaleModeOptionsGroup = exports.captionOptionsGroup = exports.dashboardStateOptionsGroup = exports.optionsGroup = exports.labeledEditor = void 0;
const array_store_1 = __webpack_require__(79322);
const check_box_1 = __webpack_require__(21523);
const date_box_1 = __webpack_require__(66417);
const number_box_1 = __webpack_require__(53158);
const radio_group_1 = __webpack_require__(7096);
const select_box_1 = __webpack_require__(76420);
const tag_box_1 = __webpack_require__(8520);
const text_box_1 = __webpack_require__(7559);
const _jquery_helpers_1 = __webpack_require__(59384);
const _localization_ids_1 = __webpack_require__(31724);
const _localizer_1 = __webpack_require__(88084);
const _export_options_1 = __webpack_require__(167);
const _dialog_form_1 = __webpack_require__(82717);
const _export_localization_1 = __webpack_require__(62231);
var DXNUMBERBOX_MIN = 1, DXNUMBERBOX_MAX = 999;
let dialogEditorFactory = {
    dxTagBox: { name: 'dxTagBox', create: (element, options) => new tag_box_1.default(element, options) },
    dxSelectBox: { name: 'dxSelectBox', create: (element, options) => new select_box_1.default(element, options) },
    dxRadioGroup: { name: 'dxRadioGroup', create: (element, options) => new radio_group_1.default(element, options) },
    dxNumberBox: { name: 'dxNumberBox', create: (element, options) => new number_box_1.default(element, options) },
    dxTextBox: { name: 'dxTextBox', create: (element, options) => new text_box_1.default(element, options) },
    dxCheckBox: { name: 'dxCheckBox', create: (element, options) => new check_box_1.default(element, options) },
    dxDateBox: { name: 'dxDateBox', create: (element, options) => new date_box_1.default(element, options) }
};
class labeledEditor {
    constructor(options) {
        this._options = options;
        this._initialize();
    }
    get margin() {
        return this._options.margin;
    }
    _initialize() {
        var that = this;
        var controlOptions = _jquery_helpers_1.deepExtend(that._getControlOptions(that._options), that._options.controlOptions || {});
        that._valueName = controlOptions.valueName;
        var labelText = that._options.labelText;
        if (!that._options.customText)
            labelText += ':';
        that.labelDiv = document.createElement('div');
        that.labelDiv.classList.add(_dialog_form_1.dialogClasses.name);
        that.labelDiv.classList.add(that._generateElementNameClassName(that._options.controlCreator.name, that._options.margin === 'Large'));
        that.labelDiv.innerText = labelText;
        that.editorDiv = document.createElement('div');
        that.editorDiv.classList.add(_dialog_form_1.dialogClasses.box);
        var elementClass = that._getElementClassName(that._options.controlCreator.name, that._options.margin === 'Large');
        if (elementClass)
            that.editorDiv.classList.add(elementClass);
        this._editor = that._options.controlCreator.create(that.editorDiv, controlOptions);
        that.enabled = true;
    }
    setEnabled(enabled) {
        var that = this;
        that.enabled = enabled;
        if (enabled) {
            that.labelDiv.classList.remove(_dialog_form_1.dialogClasses.disabledName);
        }
        else {
            that.labelDiv.classList.add(_dialog_form_1.dialogClasses.disabledName);
        }
        that._editor.option('disabled', !enabled);
    }
    setVisibility(visible) {
        var that = this;
        that.enabled = visible;
        if (visible) {
            that.labelDiv.style.display = 'inline-block';
            that.editorDiv.style.display = 'inline-block';
        }
        else {
            that.labelDiv.style.display = 'none';
            that.editorDiv.style.display = 'none';
        }
    }
    set(value) {
        var that = this;
        that._editor.option(that._valueName, value);
    }
    get() {
        var that = this;
        return that._editor.option(that._valueName);
    }
    dispose() {
        if (this._editor)
            this._editor.dispose();
    }
    _getControlOptions(options) {
        switch (options.controlCreator.name) {
            case dialogEditorFactory.dxSelectBox.name:
                return {
                    dataSource: {
                        store: new array_store_1.default(options.values),
                        paginate: false
                    },
                    itemTemplate: item => item.displayValue,
                    displayExpr: 'displayValue',
                    valueExpr: 'value',
                    valueName: 'value',
                    placeholder: _localizer_1.localizer.getString(_localization_ids_1.localizationId.FilterElementCheckedComboBoxNoDataCaption),
                    noDataText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.FilterElementNoDataToDisplay),
                    encodeNoDataText: true,
                };
            case dialogEditorFactory.dxRadioGroup.name:
                var dataSource = options.values.map(value => value.value);
                return {
                    dataSource: dataSource,
                    itemTemplate: function (item) {
                        return options.values.filter(value => {
                            return value.value === item;
                        })[0].displayValue;
                    },
                    valueName: 'value'
                };
            case dialogEditorFactory.dxNumberBox.name:
                return {
                    valueName: 'value',
                    min: DXNUMBERBOX_MIN,
                    max: DXNUMBERBOX_MAX
                };
            case dialogEditorFactory.dxCheckBox.name:
                return {
                    valueName: 'value'
                };
            case dialogEditorFactory.dxTextBox.name:
                return {
                    valueName: 'value'
                };
        }
    }
    _generateElementNameClassName(controlCreator, largeMargin) {
        if (largeMargin)
            return _dialog_form_1.dialogClasses.name + '-margin-top';
        if ((controlCreator == dialogEditorFactory.dxRadioGroup.name) || (controlCreator == dialogEditorFactory.dxCheckBox.name)) {
            return _dialog_form_1.dialogClasses.name + '-top';
        }
        return _dialog_form_1.dialogClasses.name + '-middle';
    }
    _getElementClassName(controlName, largeMargin) {
        if (largeMargin)
            return _dialog_form_1.dialogClasses.elementLargeMarginTop;
        switch (controlName) {
            case dialogEditorFactory.dxSelectBox.name:
            case dialogEditorFactory.dxTextBox.name:
                return _dialog_form_1.dialogClasses.elementTextBox;
            case dialogEditorFactory.dxNumberBox.name:
                return _dialog_form_1.dialogClasses.elementNumberBox;
            default:
                return '';
        }
    }
}
exports.labeledEditor = labeledEditor;
class optionsGroup {
    constructor() {
    }
    setEnabled(enabled) {
        var that = this;
        that.enabled = enabled;
        that.getEditors().forEach(editor => {
            editor.setEnabled(enabled);
        });
    }
    createEditors(additionalOptions) {
        this._additionalOptions = additionalOptions;
        this._initialize();
    }
    dispose() {
        this.getEditors().forEach(editor => editor.dispose());
    }
}
exports.optionsGroup = optionsGroup;
class dashboardStateOptionsGroup extends optionsGroup {
    constructor() {
        super();
    }
    _initialize() {
        var that = this;
        this.exportFilters = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.IncludeExportDashboardState),
            controlCreator: dialogEditorFactory.dxCheckBox,
            margin: 'Large',
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportFilters),
                onValueChanged: function (args) {
                    that.dashboardStatePosition.setEnabled(that.exportParameters.get() || args.component.option('value'));
                }
            }
        });
        this.exportParameters = new labeledEditor({
            labelText: ' ',
            customText: true,
            controlCreator: dialogEditorFactory.dxCheckBox,
            margin: 'Small',
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportParameters),
                onValueChanged: function (args) {
                    that.dashboardStatePosition.setEnabled(that.exportFilters.get() || args.component.option('value'));
                }
            }
        });
        this.dashboardStatePosition = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.DashboardStatePosition),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.dashboardStatePosition.below, _export_localization_1.dashboardStatePosition.separatePage],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        that.dashboardStatePosition.setEnabled(that.exportFilters.get() || that.exportParameters.get());
    }
    set(documentInfo) {
        this.exportFilters.set(documentInfo.pdfExportOptions.ExportFilters);
        this.exportParameters.set(documentInfo.pdfExportOptions.ExportParameters);
        this.dashboardStatePosition.set(documentInfo.pdfExportOptions.DashboardStatePosition);
    }
    apply(documentInfo) {
        documentInfo.pdfExportOptions.ExportFilters = this.exportFilters.get();
        documentInfo.pdfExportOptions.ExportParameters = this.exportParameters.get();
        documentInfo.pdfExportOptions.DashboardStatePosition = this.dashboardStatePosition.get();
    }
    getEditors() {
        return [this.exportFilters, this.exportParameters, this.dashboardStatePosition];
    }
}
exports.dashboardStateOptionsGroup = dashboardStateOptionsGroup;
class captionOptionsGroup extends optionsGroup {
    constructor(_showCaptionValue) {
        super();
        this._showCaptionValue = _showCaptionValue;
    }
    _initialize() {
        var that = this;
        this.showCaption = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ShowTitle),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that.caption.setEnabled(args.component.option('value'));
                }
            }
        });
        this.caption = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.Title),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        that.caption.setEnabled(this._showCaptionValue);
    }
    set(documentInfo) {
        this.showCaption.set(documentInfo.pdfExportOptions.ShowTitle);
        this.caption.set(documentInfo.pdfExportOptions.Title);
    }
    apply(documentInfo) {
        documentInfo.pdfExportOptions.ShowTitle = this.showCaption.get();
        documentInfo.pdfExportOptions.Title = this.caption.get();
    }
    getEditors() {
        return [this.showCaption, this.caption];
    }
}
exports.captionOptionsGroup = captionOptionsGroup;
class scaleModeOptionsGroup extends optionsGroup {
    constructor(_scaleModeValue) {
        super();
        this._scaleModeValue = _scaleModeValue;
        this.visibilityUpdated = _jquery_helpers_1.createJQueryCallbacks();
    }
    _initialize() {
        var that = this;
        this.scaleMode = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ScaleMode),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.scaleMode.none, _export_localization_1.scaleMode.useScaleFactor, _export_localization_1.scaleMode.autoFitToPageWidth],
            controlOptions: {
                onValueChanged: function (args) {
                    that._setScaleModeOptionsVisibility(args.component.option('value'));
                },
                container: this._additionalOptions.popupContainer
            }
        });
        this.scaleFactor = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ScaleFactor),
            controlCreator: dialogEditorFactory.dxNumberBox
        });
        this.autoFitPageCount = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.AutoFitPageCount),
            controlCreator: dialogEditorFactory.dxNumberBox
        });
        that._setScaleModeOptionsVisibility(this._scaleModeValue);
    }
    set(documentInfo) {
        this.scaleMode.set(documentInfo.pdfExportOptions.DocumentScaleMode);
        this.scaleFactor.set(documentInfo.pdfExportOptions.ScaleFactor);
        this.autoFitPageCount.set(documentInfo.pdfExportOptions.AutoFitPageCount);
        this._setScaleModeOptionsVisibility(this.scaleMode.get());
    }
    apply(documentInfo) {
        if (this.scaleMode.enabled) {
            documentInfo.pdfExportOptions.DocumentScaleMode = this.scaleMode.get();
            documentInfo.pdfExportOptions.ScaleFactor = this.scaleFactor.get();
            documentInfo.pdfExportOptions.AutoFitPageCount = this.autoFitPageCount.get();
        }
        else {
            documentInfo.pdfExportOptions.ScaleFactor = 1;
            documentInfo.pdfExportOptions.AutoFitPageCount = 1;
        }
    }
    getEditors() {
        return [this.scaleMode, this.scaleFactor, this.autoFitPageCount];
    }
    _setScaleModeOptionsVisibility(scaleModeValue) {
        var that = this;
        switch (scaleModeValue) {
            case _export_localization_1.scaleMode.none.value:
                that.scaleFactor.setVisibility(false);
                that.autoFitPageCount.setVisibility(false);
                break;
            case _export_localization_1.scaleMode.useScaleFactor.value:
                that.scaleFactor.setVisibility(true);
                that.autoFitPageCount.setVisibility(false);
                break;
            case _export_localization_1.scaleMode.autoFitToPageWidth.value:
                that.scaleFactor.setVisibility(false);
                that.autoFitPageCount.setVisibility(true);
                break;
        }
        that.visibilityUpdated.fire();
    }
}
exports.scaleModeOptionsGroup = scaleModeOptionsGroup;
class documentOptionsGroup extends optionsGroup {
    constructor(_includeCaptionValue) {
        super();
        this._includeCaptionValue = _includeCaptionValue;
    }
    _initialize() {
        this.pageLayout = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayout),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.pageLayout.portrait, _export_localization_1.pageLayout.landscape]
        });
        this.paperKind = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKind),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.paperKind.letter, _export_localization_1.paperKind.legal, _export_localization_1.paperKind.executive, _export_localization_1.paperKind.a5, _export_localization_1.paperKind.a4, _export_localization_1.paperKind.a3],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.captionOptionsGroup = new captionOptionsGroup(this._includeCaptionValue);
    }
    createEditors(additionalOptions) {
        super.createEditors(additionalOptions);
        this.captionOptionsGroup.createEditors(additionalOptions);
    }
    set(documentInfo) {
        this.pageLayout.set(documentInfo.pdfExportOptions.PageLayout);
        this.paperKind.set(documentInfo.pdfExportOptions.PaperKind);
        this.captionOptionsGroup.set(documentInfo);
    }
    apply(documentInfo) {
        documentInfo.pdfExportOptions.PageLayout = this.pageLayout.get();
        documentInfo.pdfExportOptions.PaperKind = this.paperKind.get();
        this.captionOptionsGroup.apply(documentInfo);
    }
    getEditors() {
        var that = this;
        var editors = [this.pageLayout, this.paperKind];
        that.captionOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        return editors;
    }
}
exports.documentOptionsGroup = documentOptionsGroup;
class textItemOptionsGroup extends optionsGroup {
    constructor(_showCaptionValue) {
        super();
        this._showCaptionValue = _showCaptionValue;
    }
    _initialize() {
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.documentOptionsGroup = new documentOptionsGroup(this._showCaptionValue);
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    }
    createEditors(additionalOptions) {
        super.createEditors(additionalOptions);
        this.documentOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    }
    set(documentInfo) {
        this.fileName.set(documentInfo.fileName);
        this.documentOptionsGroup.set(documentInfo);
        this.dashboardStateOptionsGroup.set(documentInfo);
    }
    apply(documentInfo) {
        documentInfo.fileName = this.fileName.get();
        this.documentOptionsGroup.apply(documentInfo);
        this.dashboardStateOptionsGroup.apply(documentInfo);
    }
    getEditors() {
        var that = this;
        var editors = [this.fileName];
        that.documentOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        that.dashboardStateOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        return editors;
    }
}
exports.textItemOptionsGroup = textItemOptionsGroup;
class boundImageItemOptionsGroup extends optionsGroup {
    constructor(_showCaptionValue, _scaleModeValue) {
        super();
        this._showCaptionValue = _showCaptionValue;
        this._scaleModeValue = _scaleModeValue;
    }
    _initialize() {
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.documentOptionsGroup = new documentOptionsGroup(this._showCaptionValue);
        this.scaleModeOptionsGroup = new scaleModeOptionsGroup(this._scaleModeValue);
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    }
    createEditors(additionalOptions) {
        super.createEditors(additionalOptions);
        this.documentOptionsGroup.createEditors(additionalOptions);
        this.scaleModeOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    }
    set(documentInfo) {
        this.fileName.set(documentInfo.fileName);
        this.documentOptionsGroup.set(documentInfo);
        this.scaleModeOptionsGroup.set(documentInfo);
        this.dashboardStateOptionsGroup.set(documentInfo);
    }
    apply(documentInfo) {
        documentInfo.fileName = this.fileName.get();
        this.documentOptionsGroup.apply(documentInfo);
        this.scaleModeOptionsGroup.apply(documentInfo);
        this.dashboardStateOptionsGroup.apply(documentInfo);
    }
    getEditors() {
        var that = this;
        var editors = [that.fileName];
        that.documentOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        that.scaleModeOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        that.dashboardStateOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        return editors;
    }
}
exports.boundImageItemOptionsGroup = boundImageItemOptionsGroup;
class imageItemOptionsGroup extends optionsGroup {
    constructor(_showCaptionValue, _scaleModeValue) {
        super();
        this._showCaptionValue = _showCaptionValue;
        this._scaleModeValue = _scaleModeValue;
    }
    _initialize() {
        var that = this;
        this.pageLayout = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayout),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.pageLayout.portrait, _export_localization_1.pageLayout.landscape]
        });
        this.paperKind = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKind),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.paperKind.letter, _export_localization_1.paperKind.legal, _export_localization_1.paperKind.executive, _export_localization_1.paperKind.a5, _export_localization_1.paperKind.a4, _export_localization_1.paperKind.a3],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.showCaption = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ShowTitle),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that.caption.setEnabled(args.component.option('value'));
                }
            }
        });
        this.caption = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.Title),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        that.caption.setEnabled(this._showCaptionValue);
        this.scaleModeOptionsGroup = new scaleModeOptionsGroup(this._scaleModeValue);
    }
    createEditors(additionalOptions) {
        super.createEditors(additionalOptions);
        this.scaleModeOptionsGroup.createEditors(additionalOptions);
    }
    set(documentInfo) {
        this.pageLayout.set(documentInfo.pdfExportOptions.PageLayout);
        this.paperKind.set(documentInfo.pdfExportOptions.PaperKind);
        this.showCaption.set(documentInfo.pdfExportOptions.ShowTitle);
        this.caption.set(documentInfo.pdfExportOptions.Title);
        this.fileName.set(documentInfo.fileName);
        this.scaleModeOptionsGroup.set(documentInfo);
    }
    apply(documentInfo) {
        documentInfo.pdfExportOptions.PageLayout = this.pageLayout.get();
        documentInfo.pdfExportOptions.PaperKind = this.paperKind.get();
        documentInfo.pdfExportOptions.ShowTitle = this.showCaption.get();
        documentInfo.pdfExportOptions.Title = this.caption.get();
        documentInfo.fileName = this.fileName.get();
        this.scaleModeOptionsGroup.apply(documentInfo);
    }
    getEditors() {
        var that = this;
        var editors = [this.fileName, this.pageLayout, this.paperKind, this.showCaption, this.caption];
        that.scaleModeOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        return editors;
    }
}
exports.imageItemOptionsGroup = imageItemOptionsGroup;
class groupItemOptionsGroup extends optionsGroup {
    constructor(_showCaptionValue, _dashboardAutomaticPageLayoutValue, _scaleModeValue) {
        super();
        this._showCaptionValue = _showCaptionValue;
        this._dashboardAutomaticPageLayoutValue = _dashboardAutomaticPageLayoutValue;
        this._scaleModeValue = _scaleModeValue;
    }
    _initialize() {
        this.dashboardOptionsGroup = new dashboardOptionsGroup(this._dashboardAutomaticPageLayoutValue, this._scaleModeValue);
        this.captionOptionsGroup = new captionOptionsGroup(this._showCaptionValue);
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    }
    createEditors(additionalOptions) {
        super.createEditors(additionalOptions);
        this.dashboardOptionsGroup.createEditors(additionalOptions);
        this.captionOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    }
    set(documentInfo) {
        this.dashboardOptionsGroup.set(documentInfo);
        this.captionOptionsGroup.set(documentInfo);
        this.dashboardStateOptionsGroup.set(documentInfo);
    }
    apply(documentInfo) {
        this.dashboardOptionsGroup.apply(documentInfo);
        this.captionOptionsGroup.apply(documentInfo);
        this.dashboardStateOptionsGroup.apply(documentInfo);
    }
    getEditors() {
        var that = this;
        var editors = this.dashboardOptionsGroup.getEditors(that.captionOptionsGroup.getEditors());
        that.dashboardStateOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        return editors;
    }
}
exports.groupItemOptionsGroup = groupItemOptionsGroup;
class customItemOptionsGroup extends optionsGroup {
    constructor(_showCaptionValue, _dashboardAutomaticPageLayoutValue, _scaleModeValue) {
        super();
        this._showCaptionValue = _showCaptionValue;
        this._dashboardAutomaticPageLayoutValue = _dashboardAutomaticPageLayoutValue;
        this._scaleModeValue = _scaleModeValue;
    }
    _initialize() {
        this.dashboardOptionsGroup = new dashboardOptionsGroup(this._dashboardAutomaticPageLayoutValue, this._scaleModeValue);
        this.captionOptionsGroup = new captionOptionsGroup(this._showCaptionValue);
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    }
    createEditors(additionalOptions) {
        super.createEditors(additionalOptions);
        this.dashboardOptionsGroup.createEditors(additionalOptions);
        this.captionOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    }
    set(documentInfo) {
        this.dashboardOptionsGroup.set(documentInfo);
        this.captionOptionsGroup.set(documentInfo);
        this.dashboardStateOptionsGroup.set(documentInfo);
    }
    apply(documentInfo) {
        this.dashboardOptionsGroup.apply(documentInfo);
        this.captionOptionsGroup.apply(documentInfo);
        this.dashboardStateOptionsGroup.apply(documentInfo);
    }
    getEditors() {
        return this.dashboardOptionsGroup
            .getEditors(this.captionOptionsGroup.getEditors())
            .concat(this.dashboardStateOptionsGroup.getEditors());
    }
}
exports.customItemOptionsGroup = customItemOptionsGroup;
class entireDashboardOptionsGroup extends optionsGroup {
    constructor(_showTitleValue, _dashboardAutomaticPageLayoutValue, _scaleModeValue) {
        super();
        this._showTitleValue = _showTitleValue;
        this._dashboardAutomaticPageLayoutValue = _dashboardAutomaticPageLayoutValue;
        this._scaleModeValue = _scaleModeValue;
    }
    _initialize() {
        var that = this;
        this.dashboardOptionsGroup = new dashboardOptionsGroup(this._dashboardAutomaticPageLayoutValue, this._scaleModeValue);
        this.showTitle = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ShowTitle),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that.title.setEnabled(args.component.option('value'));
                }
            }
        });
        this.title = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.Title),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        that.title.setEnabled(this._showTitleValue);
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    }
    createEditors(additionalOptions) {
        super.createEditors(additionalOptions);
        this.dashboardOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    }
    set(documentInfo) {
        this.dashboardOptionsGroup.set(documentInfo);
        this.showTitle.set(documentInfo.pdfExportOptions.ShowTitle);
        this.title.set(documentInfo.pdfExportOptions.Title);
        this.dashboardStateOptionsGroup.set(documentInfo);
    }
    apply(documentInfo) {
        this.dashboardOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.ShowTitle = this.showTitle.get();
        documentInfo.pdfExportOptions.Title = this.title.get();
        this.dashboardStateOptionsGroup.apply(documentInfo);
    }
    getEditors() {
        var that = this;
        var editors = this.dashboardOptionsGroup.getEditors([this.showTitle, this.title]);
        that.dashboardStateOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        return editors;
    }
}
exports.entireDashboardOptionsGroup = entireDashboardOptionsGroup;
class dashboardOptionsGroup extends optionsGroup {
    constructor(_dashboardAutomaticPageLayoutValue, _scaleModeValue) {
        super();
        this._dashboardAutomaticPageLayoutValue = _dashboardAutomaticPageLayoutValue;
        this._scaleModeValue = _scaleModeValue;
    }
    _initialize() {
        var that = this;
        this.pageLayout = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayout),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.pageLayout.portrait, _export_localization_1.pageLayout.landscape, _export_localization_1.pageLayout.auto],
            controlOptions: {
                onValueChanged: function (args) {
                    that._setScaleModeOptionsVisibility(args.value);
                }
            }
        });
        this.paperKind = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKind),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.paperKind.letter, _export_localization_1.paperKind.legal, _export_localization_1.paperKind.executive, _export_localization_1.paperKind.a5, _export_localization_1.paperKind.a4, _export_localization_1.paperKind.a3],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.scaleModeOptionsGroup = new scaleModeOptionsGroup(this._scaleModeValue);
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
    }
    createEditors(additionalOptions) {
        super.createEditors(additionalOptions);
        this.scaleModeOptionsGroup.createEditors(additionalOptions);
        if (this._dashboardAutomaticPageLayoutValue)
            this._setScaleModeOptionsVisibility(_export_localization_1.pageLayout.auto.value);
    }
    set(documentInfo) {
        this.pageLayout.set(documentInfo.pdfExportOptions.DashboardAutomaticPageLayout ? _export_localization_1.pageLayout.auto.value : documentInfo.pdfExportOptions.PageLayout);
        this.paperKind.set(documentInfo.pdfExportOptions.PaperKind);
        this.scaleModeOptionsGroup.set(documentInfo);
        this.fileName.set(documentInfo.fileName);
    }
    apply(documentInfo) {
        if (this.pageLayout.get() != _export_localization_1.pageLayout.auto.value)
            documentInfo.pdfExportOptions.PageLayout = this.pageLayout.get();
        documentInfo.pdfExportOptions.DashboardAutomaticPageLayout = this.pageLayout.get() == _export_localization_1.pageLayout.auto.value;
        documentInfo.pdfExportOptions.PaperKind = this.paperKind.get();
        this.scaleModeOptionsGroup.apply(documentInfo);
        documentInfo.fileName = this.fileName.get();
    }
    getEditors(captionEditors) {
        var that = this;
        var editors = [this.fileName, this.pageLayout, this.paperKind];
        captionEditors.forEach(editor => {
            editors.push(editor);
        });
        that.scaleModeOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        return editors;
    }
    _setScaleModeOptionsVisibility(pageLayoutValue) {
        this.scaleModeOptionsGroup.setEnabled(pageLayoutValue != _export_localization_1.pageLayout.auto.value);
    }
}
exports.dashboardOptionsGroup = dashboardOptionsGroup;
class gridOptionsGroup extends optionsGroup {
    constructor(_includeCaptionValue, _fitToPageWidthValue, _scaleModeValue) {
        super();
        this._includeCaptionValue = _includeCaptionValue;
        this._fitToPageWidthValue = _fitToPageWidthValue;
        this._scaleModeValue = _scaleModeValue;
    }
    _initialize() {
        var that = this;
        this.documentOptionsGroup = new documentOptionsGroup(this._includeCaptionValue);
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
        this.printHeadersOnEveryPage = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PrintHeadersOnEveryPage),
            controlCreator: dialogEditorFactory.dxCheckBox
        });
        this.fitToPageWidth = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FitToPageWidth),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that._setScaleModeOptionsVisibility(args.component.option('value'));
                }
            }
        });
        this.scaleModeOptionsGroup = new scaleModeOptionsGroup(this._scaleModeValue);
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
    }
    createEditors(additionalOptions) {
        super.createEditors(additionalOptions);
        this.documentOptionsGroup.createEditors(additionalOptions);
        this.scaleModeOptionsGroup.createEditors(additionalOptions);
        this._setScaleModeOptionsVisibility(this._fitToPageWidthValue);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    }
    set(documentInfo) {
        this.documentOptionsGroup.set(documentInfo);
        this.dashboardStateOptionsGroup.set(documentInfo);
        this.printHeadersOnEveryPage.set(documentInfo.pdfExportOptions.GridPrintHeadersOnEveryPage);
        this.fitToPageWidth.set(documentInfo.pdfExportOptions.GridFitToPageWidth);
        this.scaleModeOptionsGroup.set(documentInfo);
        this.fileName.set(documentInfo.fileName);
    }
    apply(documentInfo) {
        this.documentOptionsGroup.apply(documentInfo);
        this.dashboardStateOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.GridPrintHeadersOnEveryPage = this.printHeadersOnEveryPage.get();
        documentInfo.pdfExportOptions.GridFitToPageWidth = this.fitToPageWidth.get();
        this.scaleModeOptionsGroup.apply(documentInfo);
        documentInfo.fileName = this.fileName.get();
    }
    getEditors() {
        var that = this;
        var editors = [];
        editors.push(that.fileName);
        that.documentOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        editors.push(that.printHeadersOnEveryPage);
        editors.push(that.fitToPageWidth);
        that.scaleModeOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        that.dashboardStateOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        return editors;
    }
    _setScaleModeOptionsVisibility(fitToPageWidth) {
        var that = this;
        that.scaleModeOptionsGroup.setEnabled(!fitToPageWidth);
    }
}
exports.gridOptionsGroup = gridOptionsGroup;
class pivotOptionsGroup extends optionsGroup {
    constructor(_includeCaptionValue, _scaleModeValue) {
        super();
        this._includeCaptionValue = _includeCaptionValue;
        this._scaleModeValue = _scaleModeValue;
    }
    _initialize() {
        this.documentOptionsGroup = new documentOptionsGroup(this._includeCaptionValue);
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
        this.printHeadersOnEveryPage = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PrintHeadersOnEveryPage),
            controlCreator: dialogEditorFactory.dxCheckBox
        });
        this.scaleModeOptionsGroup = new scaleModeOptionsGroup(this._scaleModeValue);
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
    }
    createEditors(additionalOptions) {
        super.createEditors(additionalOptions);
        this.documentOptionsGroup.createEditors(additionalOptions);
        this.scaleModeOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    }
    set(documentInfo) {
        this.documentOptionsGroup.set(documentInfo);
        this.printHeadersOnEveryPage.set(documentInfo.pdfExportOptions.PivotPrintHeadersOnEveryPage);
        this.scaleModeOptionsGroup.set(documentInfo);
        this.fileName.set(documentInfo.fileName);
        this.dashboardStateOptionsGroup.set(documentInfo);
    }
    apply(documentInfo) {
        this.documentOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.PivotPrintHeadersOnEveryPage = this.printHeadersOnEveryPage.get();
        this.scaleModeOptionsGroup.apply(documentInfo);
        documentInfo.fileName = this.fileName.get();
        this.dashboardStateOptionsGroup.apply(documentInfo);
    }
    getEditors() {
        var that = this;
        var editors = [];
        editors.push(that.fileName);
        that.documentOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        editors.push(that.printHeadersOnEveryPage);
        that.scaleModeOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        that.dashboardStateOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        return editors;
    }
}
exports.pivotOptionsGroup = pivotOptionsGroup;
class chartOptionsGroup extends optionsGroup {
    constructor(_includeCaptionValue) {
        super();
        this._includeCaptionValue = _includeCaptionValue;
    }
    _initialize() {
        var that = this;
        this.pageLayout = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayout),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.pageLayout.portrait, _export_localization_1.pageLayout.landscape, _export_localization_1.pageLayout.auto]
        });
        this.paperKind = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKind),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.paperKind.letter, _export_localization_1.paperKind.legal, _export_localization_1.paperKind.executive, _export_localization_1.paperKind.a5, _export_localization_1.paperKind.a4, _export_localization_1.paperKind.a3],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.captionOptionsGroup = new captionOptionsGroup(this._includeCaptionValue);
        this.sizeMode = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.SizeMode),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.sizeMode.none, _export_localization_1.sizeMode.stretch, _export_localization_1.sizeMode.zoom]
        });
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    }
    createEditors(additionalOptions) {
        super.createEditors(additionalOptions);
        this.captionOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    }
    set(documentInfo) {
        this.pageLayout.set(documentInfo.pdfExportOptions.ChartAutomaticPageLayout ? _export_localization_1.pageLayout.auto.value : documentInfo.pdfExportOptions.PageLayout);
        this.paperKind.set(documentInfo.pdfExportOptions.PaperKind);
        this.captionOptionsGroup.set(documentInfo);
        this.sizeMode.set(documentInfo.pdfExportOptions.ChartSizeMode);
        this.fileName.set(documentInfo.fileName);
        this.dashboardStateOptionsGroup.set(documentInfo);
    }
    apply(documentInfo) {
        if (this.pageLayout.get() != _export_localization_1.pageLayout.auto.value)
            documentInfo.pdfExportOptions.PageLayout = this.pageLayout.get();
        documentInfo.pdfExportOptions.ChartAutomaticPageLayout = this.pageLayout.get() == _export_localization_1.pageLayout.auto.value;
        documentInfo.pdfExportOptions.PaperKind = this.paperKind.get();
        this.captionOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.ChartSizeMode = this.sizeMode.get();
        documentInfo.fileName = this.fileName.get();
        this.dashboardStateOptionsGroup.apply(documentInfo);
    }
    getEditors() {
        var that = this;
        var editors = [this.fileName, this.pageLayout, this.paperKind];
        that.captionOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        editors.push(that.sizeMode);
        that.dashboardStateOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        return editors;
    }
}
exports.chartOptionsGroup = chartOptionsGroup;
class mapOptionsGroup extends optionsGroup {
    constructor(_includeCaptionValue) {
        super();
        this._includeCaptionValue = _includeCaptionValue;
    }
    _initialize() {
        var that = this;
        this.pageLayout = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayout),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.pageLayout.portrait, _export_localization_1.pageLayout.landscape, _export_localization_1.pageLayout.auto]
        });
        this.paperKind = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKind),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.paperKind.letter, _export_localization_1.paperKind.legal, _export_localization_1.paperKind.executive, _export_localization_1.paperKind.a5, _export_localization_1.paperKind.a4, _export_localization_1.paperKind.a3],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.captionOptionsGroup = new captionOptionsGroup(this._includeCaptionValue);
        this.sizeMode = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.SizeMode),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.sizeMode.none, _export_localization_1.sizeMode.zoom]
        });
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    }
    createEditors(additionalOptions) {
        super.createEditors(additionalOptions);
        this.captionOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    }
    set(documentInfo) {
        this.pageLayout.set(documentInfo.pdfExportOptions.MapAutomaticPageLayout ? _export_localization_1.pageLayout.auto.value : documentInfo.pdfExportOptions.PageLayout);
        this.paperKind.set(documentInfo.pdfExportOptions.PaperKind);
        this.captionOptionsGroup.set(documentInfo);
        this.sizeMode.set(documentInfo.pdfExportOptions.MapSizeMode);
        this.fileName.set(documentInfo.fileName);
        this.dashboardStateOptionsGroup.set(documentInfo);
    }
    apply(documentInfo) {
        if (this.pageLayout.get() != _export_localization_1.pageLayout.auto.value)
            documentInfo.pdfExportOptions.PageLayout = this.pageLayout.get();
        documentInfo.pdfExportOptions.MapAutomaticPageLayout = this.pageLayout.get() == _export_localization_1.pageLayout.auto.value;
        documentInfo.pdfExportOptions.PaperKind = this.paperKind.get();
        this.captionOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.MapSizeMode = this.sizeMode.get();
        documentInfo.fileName = this.fileName.get();
        this.dashboardStateOptionsGroup.apply(documentInfo);
    }
    getEditors() {
        var that = this;
        var editors = [this.fileName, this.pageLayout, this.paperKind];
        that.captionOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        editors.push(that.sizeMode);
        that.dashboardStateOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        return editors;
    }
}
exports.mapOptionsGroup = mapOptionsGroup;
class treemapOptionsGroup extends optionsGroup {
    constructor(_includeCaptionValue) {
        super();
        this._includeCaptionValue = _includeCaptionValue;
    }
    _initialize() {
        var that = this;
        this.pageLayout = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayout),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.pageLayout.portrait, _export_localization_1.pageLayout.landscape, _export_localization_1.pageLayout.auto]
        });
        this.paperKind = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKind),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.paperKind.letter, _export_localization_1.paperKind.legal, _export_localization_1.paperKind.executive, _export_localization_1.paperKind.a5, _export_localization_1.paperKind.a4, _export_localization_1.paperKind.a3],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.captionOptionsGroup = new captionOptionsGroup(this._includeCaptionValue);
        this.sizeMode = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.SizeMode),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.sizeMode.none, _export_localization_1.sizeMode.zoom]
        });
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    }
    createEditors(additionalOptions) {
        super.createEditors(additionalOptions);
        this.captionOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    }
    set(documentInfo) {
        this.pageLayout.set(documentInfo.pdfExportOptions.TreemapAutomaticPageLayout ? _export_localization_1.pageLayout.auto.value : documentInfo.pdfExportOptions.PageLayout);
        this.paperKind.set(documentInfo.pdfExportOptions.PaperKind);
        this.captionOptionsGroup.set(documentInfo);
        this.sizeMode.set(documentInfo.pdfExportOptions.TreemapSizeMode);
        this.fileName.set(documentInfo.fileName);
        this.dashboardStateOptionsGroup.set(documentInfo);
    }
    apply(documentInfo) {
        if (this.pageLayout.get() != _export_localization_1.pageLayout.auto.value)
            documentInfo.pdfExportOptions.PageLayout = this.pageLayout.get();
        documentInfo.pdfExportOptions.TreemapAutomaticPageLayout = this.pageLayout.get() == _export_localization_1.pageLayout.auto.value;
        documentInfo.pdfExportOptions.PaperKind = this.paperKind.get();
        this.captionOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.TreemapSizeMode = this.sizeMode.get();
        documentInfo.fileName = this.fileName.get();
        this.dashboardStateOptionsGroup.apply(documentInfo);
    }
    getEditors() {
        var that = this;
        var editors = [this.fileName, this.pageLayout, this.paperKind];
        that.captionOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        editors.push(that.sizeMode);
        that.dashboardStateOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        return editors;
    }
}
exports.treemapOptionsGroup = treemapOptionsGroup;
class rangeFilterOptionsGroup extends optionsGroup {
    constructor(_includeCaptionValue) {
        super();
        this._includeCaptionValue = _includeCaptionValue;
    }
    _initialize() {
        var that = this;
        this.pageLayout = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayout),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.pageLayout.portrait, _export_localization_1.pageLayout.landscape, _export_localization_1.pageLayout.auto]
        });
        this.paperKind = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKind),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.paperKind.letter, _export_localization_1.paperKind.legal, _export_localization_1.paperKind.executive, _export_localization_1.paperKind.a5, _export_localization_1.paperKind.a4, _export_localization_1.paperKind.a3],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.captionOptionsGroup = new captionOptionsGroup(this._includeCaptionValue);
        this.sizeMode = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.SizeMode),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.sizeMode.none, _export_localization_1.sizeMode.stretch, _export_localization_1.sizeMode.zoom]
        });
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    }
    createEditors(additionalOptions) {
        super.createEditors(additionalOptions);
        this.captionOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    }
    set(documentInfo) {
        this.pageLayout.set(documentInfo.pdfExportOptions.RangeFilterAutomaticPageLayout ? _export_localization_1.pageLayout.auto.value : documentInfo.pdfExportOptions.PageLayout);
        this.paperKind.set(documentInfo.pdfExportOptions.PaperKind);
        this.captionOptionsGroup.set(documentInfo);
        this.sizeMode.set(documentInfo.pdfExportOptions.RangeFilterSizeMode);
        this.fileName.set(documentInfo.fileName);
        this.dashboardStateOptionsGroup.set(documentInfo);
    }
    apply(documentInfo) {
        if (this.pageLayout.get() != _export_localization_1.pageLayout.auto.value)
            documentInfo.pdfExportOptions.PageLayout = this.pageLayout.get();
        documentInfo.pdfExportOptions.RangeFilterAutomaticPageLayout = this.pageLayout.get() == _export_localization_1.pageLayout.auto.value;
        documentInfo.pdfExportOptions.PaperKind = this.paperKind.get();
        this.captionOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.RangeFilterSizeMode = this.sizeMode.get();
        documentInfo.fileName = this.fileName.get();
        this.dashboardStateOptionsGroup.apply(documentInfo);
    }
    getEditors() {
        var that = this;
        var editors = [this.fileName, this.pageLayout, this.paperKind];
        that.captionOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        editors.push(that.sizeMode);
        that.dashboardStateOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        return editors;
    }
}
exports.rangeFilterOptionsGroup = rangeFilterOptionsGroup;
class pieOptionsGroup extends optionsGroup {
    constructor(_includeCaptionValue, _autoArrangeContentValue, _scaleModeValue) {
        super();
        this._includeCaptionValue = _includeCaptionValue;
        this._autoArrangeContentValue = _autoArrangeContentValue;
        this._scaleModeValue = _scaleModeValue;
    }
    _initialize() {
        var that = this;
        this.documentOptionsGroup = new documentOptionsGroup(this._includeCaptionValue);
        this.autoArrangeContent = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.AutoArrangeContent),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that._setScaleModeOptionsVisibility(args.component.option('value'));
                }
            }
        });
        this.scaleModeOptionsGroup = new scaleModeOptionsGroup(this._scaleModeValue);
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    }
    createEditors(additionalOptions) {
        super.createEditors(additionalOptions);
        this.documentOptionsGroup.createEditors(additionalOptions);
        this.scaleModeOptionsGroup.createEditors(additionalOptions);
        this._setScaleModeOptionsVisibility(this._autoArrangeContentValue);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    }
    set(documentInfo) {
        this.documentOptionsGroup.set(documentInfo);
        this.autoArrangeContent.set(documentInfo.pdfExportOptions.PieAutoArrangeContent);
        this.scaleModeOptionsGroup.set(documentInfo);
        this.fileName.set(documentInfo.fileName);
        this.dashboardStateOptionsGroup.set(documentInfo);
    }
    apply(documentInfo) {
        this.documentOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.PieAutoArrangeContent = this.autoArrangeContent.get();
        this.scaleModeOptionsGroup.apply(documentInfo);
        documentInfo.fileName = this.fileName.get();
        this.dashboardStateOptionsGroup.apply(documentInfo);
    }
    getEditors() {
        var that = this;
        var editors = [];
        editors.push(that.fileName);
        that.documentOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        editors.push(that.autoArrangeContent);
        that.scaleModeOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        that.dashboardStateOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        return editors;
    }
    _setScaleModeOptionsVisibility(autoArrangeContent) {
        var that = this;
        that.scaleModeOptionsGroup.setEnabled(!autoArrangeContent);
    }
}
exports.pieOptionsGroup = pieOptionsGroup;
class gaugeOptionsGroup extends optionsGroup {
    constructor(_includeCaptionValue, _autoArrangeContentValue, _scaleModeValue) {
        super();
        this._includeCaptionValue = _includeCaptionValue;
        this._autoArrangeContentValue = _autoArrangeContentValue;
        this._scaleModeValue = _scaleModeValue;
    }
    _initialize() {
        var that = this;
        this.documentOptionsGroup = new documentOptionsGroup(this._includeCaptionValue);
        this.autoArrangeContent = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.AutoArrangeContent),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that._setScaleModeOptionsVisibility(args.component.option('value'));
                }
            }
        });
        this.scaleModeOptionsGroup = new scaleModeOptionsGroup(this._scaleModeValue);
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    }
    createEditors(additionalOptions) {
        super.createEditors(additionalOptions);
        this.documentOptionsGroup.createEditors(additionalOptions);
        this.scaleModeOptionsGroup.createEditors(additionalOptions);
        this._setScaleModeOptionsVisibility(this._autoArrangeContentValue);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    }
    set(documentInfo) {
        this.documentOptionsGroup.set(documentInfo);
        this.autoArrangeContent.set(documentInfo.pdfExportOptions.GaugeAutoArrangeContent);
        this.scaleModeOptionsGroup.set(documentInfo);
        this.fileName.set(documentInfo.fileName);
        this.dashboardStateOptionsGroup.set(documentInfo);
    }
    apply(documentInfo) {
        this.documentOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.GaugeAutoArrangeContent = this.autoArrangeContent.get();
        this.scaleModeOptionsGroup.apply(documentInfo);
        documentInfo.fileName = this.fileName.get();
        this.dashboardStateOptionsGroup.apply(documentInfo);
    }
    getEditors() {
        var that = this;
        var editors = [];
        editors.push(that.fileName);
        that.documentOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        editors.push(that.autoArrangeContent);
        that.scaleModeOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        that.dashboardStateOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        return editors;
    }
    _setScaleModeOptionsVisibility(autoArrangeContent) {
        var that = this;
        that.scaleModeOptionsGroup.setEnabled(!autoArrangeContent);
    }
}
exports.gaugeOptionsGroup = gaugeOptionsGroup;
class cardOptionsGroup extends optionsGroup {
    constructor(_includeCaptionValue, _autoArrangeContentValue, _scaleModeValue) {
        super();
        this._includeCaptionValue = _includeCaptionValue;
        this._autoArrangeContentValue = _autoArrangeContentValue;
        this._scaleModeValue = _scaleModeValue;
    }
    _initialize() {
        var that = this;
        this.documentOptionsGroup = new documentOptionsGroup(this._includeCaptionValue);
        this.autoArrangeContent = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.AutoArrangeContent),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that._setScaleModeOptionsVisibility(args.component.option('value'));
                }
            }
        });
        this.scaleModeOptionsGroup = new scaleModeOptionsGroup(this._scaleModeValue);
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    }
    createEditors(additionalOptions) {
        super.createEditors(additionalOptions);
        this.documentOptionsGroup.createEditors(additionalOptions);
        this.scaleModeOptionsGroup.createEditors(additionalOptions);
        this._setScaleModeOptionsVisibility(this._autoArrangeContentValue);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    }
    set(documentInfo) {
        this.documentOptionsGroup.set(documentInfo);
        this.autoArrangeContent.set(documentInfo.pdfExportOptions.CardAutoArrangeContent);
        this.scaleModeOptionsGroup.set(documentInfo);
        this.fileName.set(documentInfo.fileName);
        this.dashboardStateOptionsGroup.set(documentInfo);
    }
    apply(documentInfo) {
        this.documentOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.CardAutoArrangeContent = this.autoArrangeContent.get();
        this.scaleModeOptionsGroup.apply(documentInfo);
        documentInfo.fileName = this.fileName.get();
        this.dashboardStateOptionsGroup.apply(documentInfo);
    }
    getEditors() {
        var that = this;
        var editors = [];
        editors.push(that.fileName);
        that.documentOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        editors.push(that.autoArrangeContent);
        that.scaleModeOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        that.dashboardStateOptionsGroup.getEditors().forEach(editor => {
            editors.push(editor);
        });
        return editors;
    }
    _setScaleModeOptionsVisibility(autoArrangeContent) {
        var that = this;
        that.scaleModeOptionsGroup.setEnabled(!autoArrangeContent);
    }
}
exports.cardOptionsGroup = cardOptionsGroup;
class imageOptionsGroup extends optionsGroup {
    constructor(_showTitleValue) {
        super();
        this._showTitleValue = _showTitleValue;
    }
    _initialize() {
        var that = this;
        this.imageFormat = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ImageFormat),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.imageFormat.png, _export_localization_1.imageFormat.gif, _export_localization_1.imageFormat.jpg],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.showTitle = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ShowTitle),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that.title.setEnabled(args.component.option('value'));
                }
            }
        });
        this.title = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.Title),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.exportFilters = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.IncludeExportDashboardState),
            controlCreator: dialogEditorFactory.dxCheckBox,
            margin: 'Large',
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportFilters)
            }
        });
        this.exportParameters = new labeledEditor({
            labelText: ' ',
            customText: true,
            controlCreator: dialogEditorFactory.dxCheckBox,
            margin: 'Small',
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportParameters)
            }
        });
        this.title.setEnabled(this._showTitleValue);
        this.resolution = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.Resolution),
            controlCreator: dialogEditorFactory.dxNumberBox
        });
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
    }
    set(documentInfo) {
        this.showTitle.set(documentInfo.imageExportOptions.ShowTitle);
        this.title.set(documentInfo.imageExportOptions.Title);
        this.exportFilters.set(documentInfo.imageExportOptions.ExportFilters);
        this.exportParameters.set(documentInfo.imageExportOptions.ExportParameters);
        this.imageFormat.set(documentInfo.imageExportOptions.Format);
        this.resolution.set(documentInfo.imageExportOptions.Resolution);
        this.fileName.set(documentInfo.fileName);
    }
    apply(documentInfo) {
        documentInfo.imageExportOptions.ShowTitle = this.showTitle.get();
        documentInfo.imageExportOptions.Title = this.title.get();
        documentInfo.imageExportOptions.ExportFilters = this.exportFilters.get();
        documentInfo.imageExportOptions.ExportParameters = this.exportParameters.get();
        documentInfo.imageExportOptions.Format = this.imageFormat.get();
        documentInfo.imageExportOptions.Resolution = this.resolution.get();
        documentInfo.fileName = this.fileName.get();
    }
    getEditors() {
        return [this.fileName, this.showTitle, this.title, this.imageFormat, this.resolution, this.exportFilters, this.exportParameters];
    }
}
exports.imageOptionsGroup = imageOptionsGroup;
class dashboardExcelOptionsGroup extends optionsGroup {
    constructor(_formatValue) {
        super();
        this._formatValue = _formatValue;
    }
    _checkExportFormat(format) {
        return format === _export_localization_1.excelFormat.csv.value;
    }
    _initialize() {
        var that = this;
        this.excelFormat = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExcelFormat),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.excelFormat.xlsx, _export_localization_1.excelFormat.xls],
            controlOptions: {
                onValueChanged: function (args) {
                    var isCsv = that._checkExportFormat(args.component.option('value'));
                    that.dashboardStatePosition.setEnabled(!isCsv && (that.exportFilters.get() || that.exportParameters.get()));
                },
                container: this._additionalOptions.popupContainer
            }
        });
        this.exportFilters = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.IncludeExportDashboardState),
            controlCreator: dialogEditorFactory.dxCheckBox,
            margin: 'Large',
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportFilters),
                onValueChanged: function (args) {
                    that.dashboardStatePosition.setEnabled((that.exportParameters.get() || args.component.option('value')) && !that._checkExportFormat(that.excelFormat.get()));
                }
            }
        });
        this.exportParameters = new labeledEditor({
            labelText: ' ',
            customText: true,
            controlCreator: dialogEditorFactory.dxCheckBox,
            margin: 'Small',
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportParameters),
                onValueChanged: function (args) {
                    that.dashboardStatePosition.setEnabled((that.exportFilters.get() || args.component.option('value')) && !that._checkExportFormat(that.excelFormat.get()));
                }
            }
        });
        this.dashboardStatePosition = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.DashboardStatePosition),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.excelDashboardStatePosition.below, _export_localization_1.excelDashboardStatePosition.separateSheet],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.dashboardStatePosition.setEnabled((that.exportParameters.get() || that.exportFilters.get()) && !that._checkExportFormat(this._formatValue));
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
    }
    set(documentInfo) {
        this.fileName.set(documentInfo.fileName);
        var format = documentInfo.excelExportOptions.Format === _export_options_1.dashboardExportExcelFormat.csv ? _export_options_1.dashboardExportExcelFormat.xlsx : documentInfo.excelExportOptions.Format;
        this.excelFormat.set(format);
        this.exportFilters.set(documentInfo.excelExportOptions.ExportFilters);
        this.exportParameters.set(documentInfo.excelExportOptions.ExportParameters);
        this.dashboardStatePosition.set(documentInfo.excelExportOptions.DashboardStatePosition);
    }
    apply(documentInfo) {
        documentInfo.fileName = this.fileName.get();
        documentInfo.excelExportOptions.Format = this.excelFormat.get();
        documentInfo.excelExportOptions.ExportFilters = this.exportFilters.get();
        documentInfo.excelExportOptions.ExportParameters = this.exportParameters.get();
        documentInfo.excelExportOptions.DashboardStatePosition = this.dashboardStatePosition.get();
    }
    getEditors() {
        return [this.fileName, this.excelFormat, this.exportFilters, this.exportParameters, this.dashboardStatePosition];
    }
}
exports.dashboardExcelOptionsGroup = dashboardExcelOptionsGroup;
class excelOptionsGroup extends optionsGroup {
    constructor(_formatValue, _enableCsv) {
        super();
        this._formatValue = _formatValue;
        this._enableCsv = _enableCsv;
    }
    _checkExportFormat(format) {
        return format === _export_localization_1.excelFormat.csv.value;
    }
    _initialize() {
        var that = this;
        this.excelFormat = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExcelFormat),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: this._enableCsv ? [_export_localization_1.excelFormat.xlsx, _export_localization_1.excelFormat.xls, _export_localization_1.excelFormat.csv] : [_export_localization_1.excelFormat.xlsx, _export_localization_1.excelFormat.xls],
            controlOptions: {
                onValueChanged: function (args) {
                    var isCsv = that._checkExportFormat(args.component.option('value'));
                    that.separator.setEnabled(isCsv);
                    that.dashboardStatePosition.setEnabled(!isCsv && (that.exportFilters.get() || that.exportParameters.get()));
                },
                container: this._additionalOptions.popupContainer
            }
        });
        this.separator = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.CsvValueSeparator),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.separator.setEnabled(that._checkExportFormat(this._formatValue));
        this.exportFilters = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.IncludeExportDashboardState),
            controlCreator: dialogEditorFactory.dxCheckBox,
            margin: 'Large',
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportFilters),
                onValueChanged: function (args) {
                    that.dashboardStatePosition.setEnabled((that.exportParameters.get() || args.component.option('value')) && !that._checkExportFormat(that.excelFormat.get()));
                }
            }
        });
        this.exportParameters = new labeledEditor({
            labelText: ' ',
            customText: true,
            controlCreator: dialogEditorFactory.dxCheckBox,
            margin: 'Small',
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportParameters),
                onValueChanged: function (args) {
                    that.dashboardStatePosition.setEnabled((that.exportFilters.get() || args.component.option('value')) && !that._checkExportFormat(that.excelFormat.get()));
                }
            }
        });
        this.dashboardStatePosition = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.DashboardStatePosition),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.excelDashboardStatePosition.below, _export_localization_1.excelDashboardStatePosition.separateSheet],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.dashboardStatePosition.setEnabled((that.exportParameters.get() || that.exportFilters.get()) && !that._checkExportFormat(this._formatValue));
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
    }
    set(documentInfo) {
        this.fileName.set(documentInfo.fileName);
        var format = documentInfo.excelExportOptions.Format === _export_options_1.dashboardExportExcelFormat.csv && !this._enableCsv ? _export_options_1.dashboardExportExcelFormat.xlsx : documentInfo.excelExportOptions.Format;
        this.excelFormat.set(format);
        this.separator.set(documentInfo.excelExportOptions.CsvValueSeparator);
        this.exportFilters.set(documentInfo.excelExportOptions.ExportFilters);
        this.exportParameters.set(documentInfo.excelExportOptions.ExportParameters);
        this.dashboardStatePosition.set(documentInfo.excelExportOptions.DashboardStatePosition);
    }
    apply(documentInfo) {
        documentInfo.fileName = this.fileName.get();
        documentInfo.excelExportOptions.Format = this.excelFormat.get();
        documentInfo.excelExportOptions.CsvValueSeparator = this.separator.get();
        documentInfo.excelExportOptions.ExportFilters = this.exportFilters.get();
        documentInfo.excelExportOptions.ExportParameters = this.exportParameters.get();
        documentInfo.excelExportOptions.DashboardStatePosition = this.dashboardStatePosition.get();
    }
    getEditors() {
        return [this.fileName, this.excelFormat, this.separator, this.exportFilters, this.exportParameters, this.dashboardStatePosition];
    }
}
exports.excelOptionsGroup = excelOptionsGroup;
class simplyImageOptionsGroup extends optionsGroup {
    constructor(_showTitleValue) {
        super();
        this._showTitleValue = _showTitleValue;
    }
    _initialize() {
        var that = this;
        this.imageFormat = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ImageFormat),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.imageFormat.png, _export_localization_1.imageFormat.gif, _export_localization_1.imageFormat.jpg],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.showTitle = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ShowTitle),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that.title.setEnabled(args.component.option('value'));
                }
            }
        });
        this.title = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.Title),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.title.setEnabled(this._showTitleValue);
        this.resolution = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.Resolution),
            controlCreator: dialogEditorFactory.dxNumberBox
        });
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
    }
    set(documentInfo) {
        this.showTitle.set(documentInfo.imageExportOptions.ShowTitle);
        this.title.set(documentInfo.imageExportOptions.Title);
        this.imageFormat.set(documentInfo.imageExportOptions.Format);
        this.resolution.set(documentInfo.imageExportOptions.Resolution);
        this.fileName.set(documentInfo.fileName);
    }
    apply(documentInfo) {
        documentInfo.imageExportOptions.ShowTitle = this.showTitle.get();
        documentInfo.imageExportOptions.Title = this.title.get();
        documentInfo.imageExportOptions.Format = this.imageFormat.get();
        documentInfo.imageExportOptions.Resolution = this.resolution.get();
        documentInfo.fileName = this.fileName.get();
    }
    getEditors() {
        return [this.fileName, this.showTitle, this.title, this.imageFormat, this.resolution];
    }
}
exports.simplyImageOptionsGroup = simplyImageOptionsGroup;
class dashboardImageOptionsGroup extends optionsGroup {
    constructor(_showTitleValue) {
        super();
        this._showTitleValue = _showTitleValue;
    }
    _initialize() {
        var that = this;
        this.imageFormat = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ImageFormat),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.imageFormat.png, _export_localization_1.imageFormat.gif, _export_localization_1.imageFormat.jpg],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.showTitle = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ShowTitle),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that.title.setEnabled(args.component.option('value'));
                }
            }
        });
        this.title = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.Title),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.exportFilters = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.IncludeExportDashboardState),
            controlCreator: dialogEditorFactory.dxCheckBox,
            margin: 'Large',
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportFilters)
            }
        });
        this.exportParameters = new labeledEditor({
            labelText: ' ',
            customText: true,
            controlCreator: dialogEditorFactory.dxCheckBox,
            margin: 'Small',
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportParameters)
            }
        });
        this.title.setEnabled(this._showTitleValue);
        this.resolution = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.Resolution),
            controlCreator: dialogEditorFactory.dxNumberBox
        });
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
    }
    set(documentInfo) {
        this.showTitle.set(documentInfo.imageExportOptions.ShowTitle);
        this.title.set(documentInfo.imageExportOptions.Title);
        this.exportFilters.set(documentInfo.imageExportOptions.ExportFilters);
        this.exportParameters.set(documentInfo.imageExportOptions.ExportParameters);
        this.imageFormat.set(documentInfo.imageExportOptions.Format);
        this.resolution.set(documentInfo.imageExportOptions.Resolution);
        this.fileName.set(documentInfo.fileName);
    }
    apply(documentInfo) {
        documentInfo.imageExportOptions.ShowTitle = this.showTitle.get();
        documentInfo.imageExportOptions.Title = this.title.get();
        documentInfo.imageExportOptions.ExportFilters = this.exportFilters.get();
        documentInfo.imageExportOptions.ExportParameters = this.exportParameters.get();
        documentInfo.imageExportOptions.Format = this.imageFormat.get();
        documentInfo.imageExportOptions.Resolution = this.resolution.get();
        documentInfo.fileName = this.fileName.get();
    }
    getEditors() {
        return [this.fileName, this.showTitle, this.title, this.imageFormat, this.resolution, this.exportFilters, this.exportParameters];
    }
}
exports.dashboardImageOptionsGroup = dashboardImageOptionsGroup;


/***/ }),

/***/ 22014:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ 82581:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.indicatorType = void 0;
exports.indicatorType = {
    none: 'none',
    up: 'up',
    down: 'down',
    warning: 'warning'
};


/***/ }),

/***/ 75629:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeltaIndicator = void 0;
const renderer_1 = __webpack_require__(1044);
const $ = __webpack_require__(65311);
const _consts_1 = __webpack_require__(82581);
class DeltaIndicator {
    constructor(options) {
        options = options || {};
        this._container = $.fn.constructor(options.container);
        this._renderer = options.renderer;
        this._shape = null;
        this._init();
        if (this._container.length) {
            this.draw(options);
        }
    }
    _init() {
        var container = this._container, width = 0, height = 0;
        if (!container.length) {
            return;
        }
        width = container.width(),
            height = container.height();
        if (!(width > 0 && height > 0)) {
            return;
        }
        this._renderer = new renderer_1.Renderer({ container: container[0] });
    }
    draw(options) {
        var params = this._prepareDrawParams(options);
        if (params.readyToDraw) {
            this._render(params);
        }
        return this._shape;
    }
    _prepareDrawParams(options) {
        var container = this._container, params = { readyToDraw: false }, rectOptions = { left: 0, top: 0, right: 0, bottom: 0 };
        if (container.length) {
            rectOptions.right = container.width() || 0;
            rectOptions.bottom = container.height() || 0;
        }
        else if (options.rect) {
            rectOptions = options.rect;
        }
        params.rectangle = rectOptions;
        params.type = options.type || _consts_1.indicatorType.none;
        params.hasPositiveMeaning = !!(options.hasPositiveMeaning);
        params.readyToDraw = !!(this._renderer && rectOptions.right - rectOptions.left > 0 && rectOptions.bottom - rectOptions.top > 0);
        params.drawToContainer = !!(this._container.length);
        return params;
    }
    _render(params) {
        var rect = params.rectangle, shape;
        this._shape = null;
        if (params.drawToContainer) {
            this._renderer.resize(rect.right - rect.left, rect.bottom - rect.top);
            shape = this._drawShape(params);
            if (shape) {
                shape.append(this._renderer.root);
            }
        }
        else {
            shape = this._drawShape(params);
        }
        this._shape = shape;
    }
    _drawShape(params) {
        var shape = null, rect = params.rectangle, cx = (rect.left + rect.right) >> 1, cy = (rect.top + rect.bottom) >> 1, r = ~~(Math.min(rect.right - rect.left, rect.bottom - rect.top) / 2), coords = [], colorClassName = DeltaIndicator.getIndicatorColorType(params.type, params.hasPositiveMeaning);
        switch (params.type) {
            case _consts_1.indicatorType.none:
                break;
            case _consts_1.indicatorType.up:
                coords.push(rect.left);
                coords.push(rect.bottom);
                coords.push(cx);
                coords.push(rect.top);
                coords.push(rect.right);
                coords.push(rect.bottom);
                shape = this._renderer.path(coords, 'area').attr({ 'class': colorClassName });
                shape._useCSSTheme = true;
                break;
            case _consts_1.indicatorType.down:
                coords.push(rect.left);
                coords.push(rect.top);
                coords.push(cx);
                coords.push(rect.bottom);
                coords.push(rect.right);
                coords.push(rect.top);
                shape = this._renderer.path(coords, 'area').attr({ 'class': colorClassName });
                shape._useCSSTheme = true;
                break;
            case _consts_1.indicatorType.warning:
                shape = this._renderer.circle(cx, cy, r).attr({ 'class': colorClassName });
                shape._useCSSTheme = true;
                break;
        }
        return shape;
    }
    static getIndicatorColorType(type, hasPositiveMeaning, useDefaultColor) {
        var color;
        if (useDefaultColor) {
            color = 'dx-carditem-default-color';
        }
        else {
            switch (type) {
                case _consts_1.indicatorType.up:
                case _consts_1.indicatorType.down:
                    color = hasPositiveMeaning ? 'dx-carditem-positive-color' : 'dx-carditem-negative-color';
                    break;
                case _consts_1.indicatorType.warning:
                    color = 'dx-carditem-warning-color';
                    break;
                default:
                    color = 'dx-carditem-none-color';
                    break;
            }
        }
        return color;
    }
}
exports.DeltaIndicator = DeltaIndicator;


/***/ }),

/***/ 39801:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SimpleIndicator = void 0;
class SimpleIndicator {
    static getIndicator(type, hasPositiveMeaning) {
        return SimpleIndicator.svgIndicators[type + ((type === 'up' || type === 'down') && !hasPositiveMeaning ? '_negative' : '')];
    }
}
exports.SimpleIndicator = SimpleIndicator;
SimpleIndicator._staticPartMarkup = '<svg viewBox="0 0 400 300" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); display: block;"><path class="';
SimpleIndicator.svgIndicators = {
    none: '<svg width="24" height="18" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); display: block;"></svg>',
    up: SimpleIndicator._staticPartMarkup + 'dx-carditem-positive-color" d="M 0 300 L 200 0 L 400 300 Z"></path></svg>',
    up_negative: SimpleIndicator._staticPartMarkup + 'dx-carditem-negative-color" d="M 0 300 L 200 0 L 400 300 Z"></path></svg>',
    down: SimpleIndicator._staticPartMarkup + 'dx-carditem-positive-color" d="M 0 0 L 200 300 L 400 0 Z"></path></svg>',
    down_negative: SimpleIndicator._staticPartMarkup + 'dx-carditem-negative-color" d="M 0 0 L 200 300 L 400 0 Z"></path></svg>',
    warning: '<svg viewBox="0 0 18 18" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); display: block;"><circle cx="9" cy="9" r="8.7" class="dx-carditem-warning-color"></circle></svg>'
};


/***/ }),

/***/ 23589:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GaugeDeltaIndicator = void 0;
const circular_gauge_1 = __webpack_require__(2437);
const utils_1 = __webpack_require__(1044);
const linear_gauge_1 = __webpack_require__(62723);
const _format_helper_1 = __webpack_require__(27893);
const _utils_1 = __webpack_require__(7590);
const _delta_indicator_1 = __webpack_require__(75629);
const DELTA_INDENT = 10, DELTA_SIZE_COEFF = 0.5, DELTA_ASPECT_RATIO = 3 / 4;
class GaugeDeltaIndicator {
    constructor(parameters) {
        this._renderer = parameters.renderer;
        this._root = parameters.renderer.g().attr({ 'class': 'dxg-delta-indicator' }).linkOn(parameters.container, { name: 'delta-indicator', after: 'peripheral' });
        this._getOptions = parameters.optionsCallback;
    }
    dispose() {
        this._root.linkOff();
        this._renderer = this._root = null;
        return this;
    }
    draw() {
        let that = this, options = that._getOptions(), textValue = formatText(options.text);
        if (textValue === null)
            return null;
        that._root.linkAppend();
        let text = that._renderer.text(textValue, 0, 0).attr({
            align: 'center',
            'class': _delta_indicator_1.DeltaIndicator.getIndicatorColorType(options.type, options.hasPositiveMeaning, options.text.useDefaultColor)
        }).css(utils_1.patchFontOptions(options.text.font)).append(that._root);
        let textBox = text.getBBox(), shapeHeight = Math.round(textBox.height * DELTA_SIZE_COEFF), shapeWidth = Math.round(shapeHeight / DELTA_ASPECT_RATIO);
        let shape = new _delta_indicator_1.DeltaIndicator({ renderer: that._renderer }).draw({
            type: options.type,
            hasPositiveMeaning: options.hasPositiveMeaning,
            rect: {
                left: 0,
                right: shapeWidth,
                top: -textBox.y - shapeHeight,
                bottom: -textBox.y
            }
        });
        let width = textBox.width, height = textBox.height, x = Math.round(textBox.width / 2), y = -textBox.y;
        if (shape) {
            shape.append(that._root);
            width += shapeWidth + DELTA_INDENT;
            x += shapeWidth + DELTA_INDENT;
        }
        text.attr({ x: x, y: y });
        return [width, height];
    }
    layoutOptions() {
        let options = this._getOptions(), layout = options.layout || {};
        return formatText(options.text) !== null ? {
            horizontalAlignment: layout.horizontalAlignment || 'center',
            verticalAlignment: layout.verticalAlignment || 'bottom'
        } : null;
    }
    measure() {
        this.freeSpace();
        return this.draw();
    }
    move(rect) {
        this._root.attr({ translateX: Math.round(rect[0]), translateY: Math.round(rect[1]) });
    }
    freeSpace() {
        this._root.linkRemove().clear();
    }
}
exports.GaugeDeltaIndicator = GaugeDeltaIndicator;
var formatText = function (options) {
    let text;
    if (options.value !== undefined) {
        const obj = {
            value: options.value,
            valueText: _format_helper_1.DashboardFormatHelper.format(options.value, { type: options.format, precision: options.precision })
        };
        text = _utils_1.type.isFunction(options.customizeText) ? options.customizeText.call(obj, obj) : obj.valueText;
    }
    if (_utils_1.type.isString(text) && text) {
        return text;
    }
    return null;
};
var plugin = {
    name: 'delta_indicator',
    init: function () {
        let that = this;
        that._delta_indicator = new GaugeDeltaIndicator({
            renderer: that._renderer,
            container: that._renderer.root,
            optionsCallback: () => that._getOption('indicator')
        });
        that._layout.add(that._delta_indicator);
    },
    dispose: function () {
        this._delta_indicator.freeSpace();
        this._delta_indicator.dispose();
    }
};
circular_gauge_1.default.addPlugin(plugin);
linear_gauge_1.default.addPlugin(plugin);


/***/ }),

/***/ 78979:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ArrangementInfo = exports.positioningDirection = void 0;
exports.positioningDirection = { Vertical: 'Vertical', Horizontal: 'Horizontal' };
class ArrangementInfo {
    constructor(totalItemCount, itemsOnRowCount, itemWidth, itemHeight, itemMargin, direction, options) {
        this.totalItemCount = totalItemCount;
        this.itemsOnRowCount = itemsOnRowCount;
        this.itemWidth = itemWidth;
        this.itemHeight = itemHeight;
        this.direction = direction;
        this.itemMargin = itemMargin;
        this.options = options;
        this.itemsOnColumnCount = Math.ceil(this.totalItemCount / this.itemsOnRowCount);
    }
    getHeight(useMargin) {
        var that = this;
        var margin = useMargin ? 2 * that.itemMargin.Height : 0;
        switch (that.direction) {
            case exports.positioningDirection.Horizontal:
                return that.itemHeight - margin;
            case exports.positioningDirection.Vertical:
                return that.itemWidth - margin;
            default:
                return -1;
        }
    }
    getWidth(useMargin) {
        var that = this, margin = useMargin ? 2 * that.itemMargin.Width : 0;
        switch (that.direction) {
            case exports.positioningDirection.Horizontal:
                return that.itemWidth - margin;
            case exports.positioningDirection.Vertical:
                return that.itemHeight - margin;
            default:
                return 0;
        }
    }
}
exports.ArrangementInfo = ArrangementInfo;


/***/ }),

/***/ 17679:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseWidgetItem = void 0;
const events_1 = __webpack_require__(68396);
const _jquery_helpers_1 = __webpack_require__(59384);
const _css_class_names_1 = __webpack_require__(28490);
function patchStyles(options) {
    options.style.borderWidth = options.borderWidth || 0;
    options.selectionStyle.borderWidth = options.borderWidth || 0;
    options.hoverStyle.borderWidth = options.borderWidth || 0;
}
class BaseWidgetItem {
    constructor(options) {
        this._options = _jquery_helpers_1.deepExtend({}, this._getDefaultOptions(), options);
        this._type = this._options.type || 'unknown';
        this._isSelected = !!this._options.isSelected;
        this.tag = this._options.tag;
        patchStyles(this._options);
        this._hoverEnabled = !!this._options.hoverEnabled;
    }
    _getDefaultOptions() {
        return {
            cursor: 'default',
            isSelected: false,
            hoverEnabled: false,
            style: {
                backgroundColor: '#ffffff',
                borderStyle: 'solid',
                borderColor: '#C8C8CC'
            },
            selectionStyle: {
                backgroundColor: 'rgba(95,139,149,0.35)',
                borderStyle: 'solid',
                borderColor: '#5F8B95'
            },
            hoverStyle: {
                backgroundColor: 'rgba(95,139,149,0.25)',
                borderStyle: 'solid',
                borderColor: '#5F8B95'
            }
        };
    }
    dispose() {
        var that = this;
        that._type = null;
        that._isSelected = null;
        that.tag = null;
        that._hoverEnabled = null;
        this._disposeClickEvent();
        this._disposeHoverEvent();
        if (that._itemDiv && that._itemDiv.parentElement) {
            that._itemDiv.parentElement.removeChild(that._itemDiv);
        }
        that._itemDiv = null;
    }
    _getStyle(isSelected) {
        return isSelected ? this._options.selectionStyle : this._options.style;
    }
    select() {
        var that = this;
        that._isSelected = true;
        if (that._itemDiv) {
            that._itemDiv.classList.add(_css_class_names_1.cssClassNames.selectedItem);
        }
    }
    _hover(isHover) {
        var that = this;
        if (that._hoverEnabled) {
            if (isHover) {
                that._itemDiv.classList.add(_css_class_names_1.cssClassNames.hoveredItem);
            }
            else {
                that._itemDiv.classList.remove(_css_class_names_1.cssClassNames.hoveredItem);
            }
        }
    }
    clearSelection() {
        var that = this;
        that._isSelected = false;
        if (that._itemDiv) {
            that._itemDiv.classList.remove(_css_class_names_1.cssClassNames.selectedItem);
        }
    }
    _disposeClickEvent() {
        if (this._itemDiv) {
            events_1.off(this._itemDiv, 'click.cardItem');
        }
    }
    _disposeHoverEvent() {
        if (this._itemDiv) {
            events_1.off(this._itemDiv, 'mouseenter');
            events_1.off(this._itemDiv, 'mouseleave');
        }
    }
    setClickHandler(handler) {
        var that = this;
        if (typeof handler === 'function' && that._itemDiv) {
            this._disposeClickEvent();
            events_1.on(that._itemDiv, 'click.cardItem', function () {
                handler.call(null, { item: that });
            });
        }
    }
    setHoverHandler(handler) {
        var that = this;
        if (that._itemDiv) {
            this._disposeHoverEvent();
            events_1.on(that._itemDiv, 'mouseenter', function () {
                that._hover(true);
                if (typeof handler === 'function') {
                    handler.call(null, { item: that, state: true });
                }
            });
            events_1.on(that._itemDiv, 'mouseleave', function () {
                that._hover(false);
                if (typeof handler === 'function') {
                    handler.call(null, { item: that, state: false });
                }
            });
        }
    }
    draw(width, height, index, commonItemsOptions) {
        if (!this._itemDiv) {
            return this.initDraw(width, height, index);
        }
        return this._itemDiv;
    }
    initDraw(width, height, index) {
        var that = this, itemDiv;
        width = width || 0;
        height = height || 0;
        index = index || 0;
        that.index = index;
        this._disposeClickEvent();
        this._disposeHoverEvent();
        itemDiv = document.createElement('div');
        itemDiv.classList.add('dx-' + that._type);
        itemDiv.style.cursor = that._options.cursor;
        that._itemDiv = itemDiv;
        return itemDiv;
    }
    _applyExtraStyles() {
        if (this._isSelected) {
            this.select();
        }
        else {
            this.clearSelection();
        }
    }
    toggleSelection() {
        if (this._isSelected) {
            this.clearSelection();
        }
        else {
            this.select();
        }
    }
    getWidget() {
        return null;
    }
    finishRender(params) {
        params = params || {};
        var that = this, clickHandler = params.clickHandler, hoverHandler = params.hoverHandler, drawOptions = params.drawOptions;
        that.setClickHandler(clickHandler);
        that.setHoverHandler(hoverHandler);
        that.rerender(drawOptions);
        that._applyExtraStyles();
    }
    getItemContainer() {
        var itemDiv = this._itemDiv;
        if (itemDiv) {
            return itemDiv;
        }
        return;
    }
    _formStyle(selector, cssProperties) {
        var resultCss = '.dx-' + this._type + ' ' + selector + '{', cssProperty;
        for (cssProperty in cssProperties) {
            resultCss += cssProperty + ':' + cssProperties[cssProperty] + 'px;';
        }
        return resultCss + '}';
    }
    getCssStyle(width, height, _commonItemsOptions, prefix) {
        var styleOptions = { height: height };
        if (!this._options.ignoreProportions) {
            styleOptions['width'] = width;
        }
        return prefix + ' ' + this._formStyle('', styleOptions);
    }
    calcCommonItemSpecificOptions(width, height) {
    }
    resize(width, height, index, commonItemsOptions) {
    }
    rerender(drawOptions) {
    }
    detachItem() {
    }
    setHoverEnabledState(hoverEnabled) {
        this._hoverEnabled = hoverEnabled;
    }
}
exports.BaseWidgetItem = BaseWidgetItem;


/***/ }),

/***/ 28490:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.layoutCardCssClassNames = exports.cssClassNames = void 0;
exports.cssClassNames = {
    widgetsViewerScrollableHolder: 'dx-widgets-viewer-scrollable-holder',
    widgetViewerIdPrefix: 'dx-widgets-viewer-style_id',
    widgetViewerContainer: 'dx-widget-viewer-container',
    widgetViewerTable: 'widget-viewer-table',
    widgetViewerRow: 'widget-viewer-row',
    widgetViewerCell: 'widget-viewer-cell',
    cardItem: 'dx-cardItem',
    widgetItem: 'dx-widgetItem',
    cardTitle: 'dx-card-title',
    cardSubtitle: 'dx-card-subTitle',
    cardIndicator: 'dx-card-indicator',
    cardVariableValue1: 'dx-card-variableValue1',
    cardVariableValue2: 'dx-card-variableValue2',
    cardMainValue: 'dx-card-mainValue',
    cardSparkline: 'dx-card-sparkline',
    cardHiddenContainer: 'dx-card-item-hidden-container',
    cardNowrapHiddenContainer: 'dx-card-item-nowrap-hidden-container',
    layoutCardHiddenContainer: 'dx-layout-card-hidden-container',
    selectedItem: 'dx-selected-viewer-item',
    hoveredItem: 'dx-hovered-viewer-item'
};
exports.layoutCardCssClassNames = {
    cardScrollableHolder: 'dx-card-scrollable-holder',
    card: 'dx-flex-card-layout',
    content: 'dx-flex-card-layout-content',
    contentTopRows: 'dx-flex-card-layout-content-top-rows',
    contentBottomRows: 'dx-flex-card-layout-content-bottom-rows',
    row: 'dx-flex-card-layout-row',
    rowOnlyCenterElements: 'dx-flex-card-layout-row-center-only',
    rowLeftRightElements: 'dx-flex-card-layout-row-left-right',
    rowElement: 'dx-flex-card-layout-row-element',
    indicatorElement: 'dx-flex-card-layout-indicator-element',
    sparklineElement: 'dx-flex-card-layout-sparkline-row-element'
};


/***/ }),

/***/ 53527:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.widgetItemFactory = void 0;
const chart_1 = __webpack_require__(56319);
const circular_gauge_1 = __webpack_require__(2437);
const linear_gauge_1 = __webpack_require__(62723);
const pie_chart_1 = __webpack_require__(44655);
function getAdditionalCircularGaugeOptions(container, options) {
    return null;
}
var getAdditionalOptionsHandlers = {
    'circulargauge': getAdditionalCircularGaugeOptions
};
exports.widgetItemFactory = {
    createWidget: function (widgetType, container, options) {
        switch ((widgetType || '').toLowerCase()) {
            case 'chart':
                let chart = chart_1.default.getInstance(container);
                if (chart) {
                    chart.option(options);
                }
                else {
                    chart = new chart_1.default(container, options);
                }
                return chart;
            case 'piechart':
                let pieChart = pie_chart_1.default.getInstance(container);
                if (pieChart) {
                    pieChart.option(options);
                }
                else {
                    pieChart = new pie_chart_1.default(container, options);
                }
                return pieChart;
            case 'circulargauge':
                let circularGauge = circular_gauge_1.default.getInstance(container);
                if (circularGauge) {
                    circularGauge.option(options);
                }
                else {
                    circularGauge = new circular_gauge_1.default(container, options);
                }
                return circularGauge;
            case 'lineargauge':
                let linearGauge = linear_gauge_1.default.getInstance(container);
                if (linearGauge) {
                    linearGauge.option(options);
                }
                else {
                    linearGauge = new linear_gauge_1.default(container, options);
                }
                return linearGauge;
            default:
                return null;
        }
    },
    getAdditionalOptions: function (widgetType, container, options) {
        var handler = getAdditionalOptionsHandlers[(widgetType || '').toLowerCase()];
        return handler ? handler(container, options) : null;
    }
};


/***/ }),

/***/ 26603:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WidgetItem = void 0;
const _jquery_helpers_1 = __webpack_require__(59384);
const _base_widget_item_1 = __webpack_require__(17679);
const _widget_item_factory_1 = __webpack_require__(53527);
class WidgetItem extends _base_widget_item_1.BaseWidgetItem {
    constructor(itemData, options) {
        super(WidgetItem.ensureOptions(options));
        this._widgetType = String(this._options.widgetType || '').toLowerCase();
        this._itemData = itemData || {};
        this._itemData.encodeHtml = this._options.encodeHtml;
        this._itemData.redrawOnResize = false;
    }
    static ensureOptions(options) {
        options = options || {};
        options.type = 'widgetItem';
        return options;
    }
    dispose() {
        var that = this;
        _base_widget_item_1.BaseWidgetItem.prototype.dispose.apply(that, arguments);
        that._itemData = null;
        this._disposeWidget();
    }
    _disposeWidget() {
        if (this._widget) {
            this._widget.dispose();
            this._widget = null;
        }
    }
    _getDefaultOptions() {
        return _jquery_helpers_1.deepExtend({}, _base_widget_item_1.BaseWidgetItem.prototype._getDefaultOptions.apply(this, arguments), {
            style: {
                borderStyle: 'solid',
                borderColor: '#ffffff'
            }
        });
    }
    detachItem() {
        var itemDiv = this._itemDiv;
        if (itemDiv && itemDiv.parentElement) {
            itemDiv.parentElement.removeChild(itemDiv);
        }
    }
    initDraw(width, height, index) {
        this._disposeWidget();
        return super.initDraw(width, height, index);
    }
    draw(width, height, index) {
        super.draw(width, height, index);
        var that = this, itemDiv;
        itemDiv = that._itemDiv;
        itemDiv.style.margin = 'auto';
        this._options.itemWidgetOptionsPrepared(that._itemData);
        that._widget = _widget_item_factory_1.widgetItemFactory.createWidget(that._widgetType, itemDiv, that._itemData);
        return itemDiv;
    }
    resize(width, height, index) {
        if (!this._itemDiv.childNodes.length) {
            return this.draw(width, height, index);
        }
    }
    rerender(drawOptions) {
        var that = this, options;
        if (that._widget) {
            options = _widget_item_factory_1.widgetItemFactory.getAdditionalOptions(that._widgetType, that._itemDiv, that._itemData);
            options && _jquery_helpers_1.deepExtend(that._widget._options, options);
            if (_jquery_helpers_1.isVisible(that._itemDiv)) {
                that._widget.render(drawOptions);
            }
        }
    }
    getWidget() {
        return this._widget;
    }
}
exports.WidgetItem = WidgetItem;


/***/ }),

/***/ 54564:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WidgetsViewerBase = void 0;
const options_1 = __webpack_require__(48183);
class WidgetsViewerBase {
    constructor(element, options) {
        this._initalized = false;
        this._element = typeof element === 'string' ? document.querySelector(element) : element;
        this._optionManager = new options_1.Options(this._getDefaultOptions(), this._getDefaultOptions(), {}, {});
        this._optionManager.onChanging(() => { });
        this._optionManager.onChanged(() => { });
        this._optionManager.onStartChange(() => { });
        this._optionManager.onEndChange(() => {
            if (this._initalized) {
                this._update();
            }
        });
        this._optionManager.option(options);
        this._init();
        this._initalized = true;
    }
    element() {
        return this._element;
    }
    option(...args) {
        return this._optionManager.option(...args);
    }
    get _option() {
        return this.option();
    }
    dispose() {
        this._optionManager.dispose();
    }
}
exports.WidgetsViewerBase = WidgetsViewerBase;


/***/ }),

/***/ 70842:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dxWidgetsViewer = void 0;
const $ = __webpack_require__(65311);
const _jquery_helpers_1 = __webpack_require__(59384);
const _utils_1 = __webpack_require__(7590);
const _dashboard_viewer_constants_1 = __webpack_require__(6943);
const _render_helper_1 = __webpack_require__(39336);
const _card_item_1 = __webpack_require__(36014);
const _arrangement_info_1 = __webpack_require__(78979);
const _css_class_names_1 = __webpack_require__(28490);
const _widget_item_1 = __webpack_require__(26603);
const _widgets_viewer_base_1 = __webpack_require__(54564);
var viewerCount = 0;
class dxWidgetsViewer extends _widgets_viewer_base_1.WidgetsViewerBase {
    constructor(element, options) {
        super(element, options);
    }
    _getDefaultOptions() {
        return {
            dataSource: [],
            viewer: {
                hoverEnabled: false,
                overflow: 'auto',
                method: 'auto',
                count: 1,
                widgetType: 'card',
                redrawOnResize: false,
                onclick: null,
                onRenderComplete: null,
                onAllItemsRenderComplete: null,
                bulkTimesRenderingTimeInterval: 200,
                useNativeScrolling: 'auto',
                ignorePadding: false,
                supportAnimation: false
            },
            itemOptions: {
                encodeHtml: true,
                minWidth: undefined,
                proportions: undefined,
                ignoreProportions: false,
                itemMargin: {
                    width: 5,
                    height: 5
                },
                borderWidth: 1,
                hasSparkline: false
            }
        };
    }
    _init() {
        let viewer = this._option.viewer;
        this._viewerID = viewerCount++;
        this.initContainer();
        this._content = _render_helper_1.RenderHelper.wrapScrollable(this.container, viewer.overflow, 'both');
        this._scrollBarWidth = this._getScrollBarWidth();
        this._updateByOptions();
        this._createItems();
        this.totalMarginsAndBorders = this._calcTotalMarginsAndBorders();
        this._render();
    }
    _update() {
        this._updateByOptions();
        this._createItems();
        this._render();
    }
    initContainer() {
        this.container = document.createElement('div');
        _jquery_helpers_1.$unwrap(this.element()).appendChild(this.container);
        this.container.classList.add(_css_class_names_1.cssClassNames.widgetsViewerScrollableHolder);
    }
    clear() {
        this.container.parentElement.removeChild(this.container);
    }
    dispose() {
        var that = this;
        clearTimeout(that._drawTimer);
        that._drawTimer = null;
        (that.itemsList || []).forEach(item => item.dispose());
        that._content = null;
        that._scrollBarWidth = null;
        that._widgetType = null;
        that.itemsList = null;
        that.totalMarginsAndBorders = null;
        that._resizeHandler = null;
        if (that._styleTag) {
            that._styleTag.parentElement.removeChild(that._styleTag);
            that._styleTag = null;
        }
        super.dispose();
    }
    _getScrollable() {
        return _render_helper_1.RenderHelper.getScrollable(this.container);
    }
    _updateScrollable() {
        _render_helper_1.RenderHelper.updateScrollable(this.container);
    }
    _scrollTo(left, top) {
        var that = this, scrollable = this._getScrollable();
        if (scrollable) {
            scrollable.scrollTo({ x: left, y: top });
        }
        else {
            $.fn.constructor(that._rootContent()).scrollLeft(left);
            $.fn.constructor(that._rootContent()).scrollTop(top);
        }
    }
    _scrollOffset() {
        var that = this, scrollable = this._getScrollable();
        if (scrollable) {
            return scrollable.scrollOffset();
        }
        else {
            return {
                left: $.fn.constructor(that._rootContent()).scrollLeft(),
                top: $.fn.constructor(that._rootContent()).scrollTop()
            };
        }
    }
    _rootContent() {
        return this._content;
    }
    _parentHeight() {
        var offset = 0;
        return $.fn.constructor(this.container).height() - offset;
    }
    _parentWidth() {
        var offset = 0;
        return $.fn.constructor(this.container).width() - offset;
    }
    _parentWidthWithoutScroll() {
        var that = this;
        return that._parentWidth() - that._scrollBarWidth * that._hasVerticalScroll;
    }
    _parentHeightWithoutScroll() {
        var that = this;
        return that._parentHeight() - that._scrollBarWidth * that._hasHorizontalScroll;
    }
    _getResizeHandler() {
        var that = this;
        return function () {
            that.redraw();
        };
    }
    _updateByOptions() {
        var viewerOptions = this._option.viewer, itemOptions = this._option.itemOptions, proportions = itemOptions.proportions, width = itemOptions.minWidth;
        this._widgetType = viewerOptions.widgetType.toLowerCase();
        this.align = viewerOptions.align;
        if (this._widgetType === 'card') {
            this.align = this.align || 'left';
            this.minItemWidth = this.curItemWidth = width || 180;
            this._itemProportions = proportions || (itemOptions.hasSparkline ? 0.625 : 0.5);
        }
        else {
            this.align = this.align || 'center';
            this.minItemWidth = this.curItemWidth = width || 200;
            this._itemProportions = proportions || 1;
            this._needVerticalCentering = true;
        }
        this.minItemHeight = this.curItemHeight = this._itemProportions * this.minItemWidth;
    }
    getSizeParams() {
        let scrollOffset = this._scrollOffset();
        let scrollableContent = this.container.querySelector('.' + _css_class_names_1.cssClassNames.widgetViewerTable);
        let itemMargin = this._option.itemOptions.itemMargin;
        return {
            virtualSize: {
                width: $.fn.constructor(scrollableContent).outerWidth(),
                height: $.fn.constructor(scrollableContent).outerHeight()
            },
            scroll: {
                top: scrollOffset.top,
                left: scrollOffset.left,
                size: this._scrollBarWidth,
                horizontal: this._hasHorizontalScroll === 1,
                vertical: this._hasVerticalScroll === 1
            },
            itemMargin: {
                width: itemMargin.width,
                height: itemMargin.height
            }
        };
    }
    getSelectedItems() {
        return this.itemsList.filter(item => item._isSelected);
    }
    clearSelections() {
        this.itemsList.forEach(item => item.clearSelection());
    }
    _createItems() {
        let data = this._option.dataSource;
        let itemOptions = this._option.itemOptions;
        let rootElement = this._rootContent();
        (this.itemsList || []).forEach(item => item.dispose());
        this.itemsList = [];
        data.forEach(dataItem => {
            itemOptions.widgetType = this._widgetType;
            itemOptions.hoverEnabled = dataItem.hoverEnabled;
            itemOptions.isSelected = dataItem.isSelected;
            itemOptions.cursor = dataItem.cursor;
            itemOptions.tag = dataItem.tag;
            itemOptions.parentRootElement = rootElement;
            this.itemsList.push((this._widgetType == 'card') ? new _card_item_1.CardItem(dataItem, itemOptions) : new _widget_item_1.WidgetItem(dataItem, itemOptions));
        });
        this._firstDraw = true;
        delete this._viewerParams;
    }
    _refresh() {
        this.curItemWidth = this.minItemWidth;
        this.curItemHeight = this.minItemHeight;
        this._createItems();
    }
    _calcTotalMarginsAndBorders() {
        var itemOptions = this._option.itemOptions, borderWidth = itemOptions.borderWidth || 0;
        return {
            width: 2 * (itemOptions.itemMargin.width + borderWidth),
            height: 2 * (itemOptions.itemMargin.height + borderWidth)
        };
    }
    _render(drawOptions) {
        let viewer = this._option.viewer;
        let onRenderComplete = viewer.onRenderComplete;
        let method = viewer.method.toLowerCase();
        let itemCount = viewer.count;
        let clickHandler = viewer.onclick;
        let hoverHandler = viewer.onhover;
        let supportAnimation = viewer.supportAnimation;
        let table;
        let contentElement = this._rootContent();
        let overflowX = contentElement.style.overflowX;
        let overflowY = contentElement.style.overflowY;
        let parentRoot = contentElement.parentElement;
        let overflowXParentRoot = parentRoot.style.overflowX;
        let overflowYParentRoot = parentRoot.style.overflowY;
        let scrollOffset = this._scrollOffset();
        let animationEnabled = supportAnimation && !contentElement.innerHTML && this.itemsList.length <= _dashboard_viewer_constants_1.DashboardViewerConstants.elementsCountAnimationThreshold;
        clearTimeout(this._drawTimer);
        table = this._drawItems(method, itemCount, animationEnabled);
        contentElement.innerHTML = '';
        contentElement.style.overflow = 'hidden';
        parentRoot.style.overflow = 'hidden';
        if (table) {
            this.innerContainer = document.createElement('div');
            this.innerContainer.classList.add(_css_class_names_1.cssClassNames.widgetViewerContainer);
            this.innerContainer.style.textAlign = this.align;
            this.innerContainer.style.padding = '0';
            this.innerContainer.style.margin = '0';
            contentElement.appendChild(this.innerContainer);
            this.innerContainer.appendChild(table);
            this.itemsList.forEach(item => {
                item.finishRender({
                    clickHandler: clickHandler, hoverHandler: hoverHandler, drawOptions: drawOptions
                });
            });
            if (this._needVerticalCentering && this.innerContainer && this._viewerParams.direction === 'Horizontal') {
                this._verticalCentering(table);
            }
        }
        contentElement.style.overflowX = overflowX;
        contentElement.style.overflowY = overflowY;
        parentRoot.style.overflowX = overflowXParentRoot;
        parentRoot.style.overflowY = overflowYParentRoot;
        this._updateScrollable();
        this._scrollTo(scrollOffset.left, scrollOffset.top);
        if (onRenderComplete) {
            onRenderComplete.call(null);
        }
    }
    _verticalCentering(table) {
        var that = this, differenceTop = that._parentHeight() - $.fn.constructor(that.container.querySelector('.' + _css_class_names_1.cssClassNames.widgetViewerContainer)).height();
        if (differenceTop > 0) {
            that.innerContainer.style.paddingTop = ~~((differenceTop) / 2) + 'px';
        }
        else {
            that.innerContainer.style.paddingTop = '0px';
        }
    }
    redraw() {
        this._render();
    }
    _calcItemIndex(i, j, direction, rowCount, columnCount) {
        return direction == _arrangement_info_1.positioningDirection.Horizontal ?
            i * columnCount + j : j * rowCount + i;
    }
    _calcVisibleRow(cardHeight) {
        var height = this._parentHeight();
        return Math.ceil(height / cardHeight);
    }
    _calcVisibleColumn(cardWidth) {
        var width = this._parentWidth();
        return Math.ceil(width / cardWidth);
    }
    _getPartArray(array, count, indexOfPart) {
        var result = [], i = 0, beg = count * indexOfPart;
        for (i = beg; i < beg + count; i++) {
            result.push(array[i]);
        }
        return result;
    }
    _createTable(arrangementInfo, enableAnimation) {
        var that = this, tableStruct, i, j, indexItem, col, row, item, isHorizontal = arrangementInfo.direction == _arrangement_info_1.positioningDirection.Horizontal, itemMargin = this._option.itemOptions.itemMargin, ignorePadding = this._option.viewer.ignorePadding, columnCount = isHorizontal ? arrangementInfo.itemsOnRowCount : arrangementInfo.itemsOnColumnCount, rowCount = isHorizontal ? arrangementInfo.itemsOnColumnCount : arrangementInfo.itemsOnRowCount, action, itemsListLen = that.itemsList.length, tableWidth, widthMarginsAndBorders = that.totalMarginsAndBorders.width, heightMarginsAndBorders = that.totalMarginsAndBorders.height, parentWidthWithoutScroll = that._parentWidthWithoutScroll(), parentHeightWithoutScroll = that._parentHeightWithoutScroll(), rowHeight, rowWidth, cellHeight, cellWidth, curItemWidth = that.curItemWidth, curItemHeight = that.curItemHeight, curItemWidthWithoutWidthMargins = curItemWidth - 2 * itemMargin.width, curItemHeightWithoutHeightMargins = curItemHeight - 2 * itemMargin.height, curItem;
        if (rowCount <= 0) {
            return undefined;
        }
        tableStruct = document.createElement('div');
        tableStruct.classList.add(_css_class_names_1.cssClassNames.widgetViewerTable);
        tableStruct.classList.add(_css_class_names_1.cssClassNames.widgetViewerIdPrefix + that._viewerID);
        tableStruct.style.overflow = 'hidden';
        tableStruct.style.marginLeft = '0px';
        tableStruct.style.marginRight = '0px';
        if (that._widgetType !== 'card') {
            cellWidth = ~~(Math.max((parentWidthWithoutScroll - columnCount * widthMarginsAndBorders) / columnCount, curItemWidthWithoutWidthMargins));
            cellHeight = !isHorizontal ? ~~(Math.max((parentHeightWithoutScroll - rowCount * heightMarginsAndBorders) / rowCount, curItemHeightWithoutHeightMargins)) : curItemHeightWithoutHeightMargins;
        }
        else {
            cellWidth = curItemWidthWithoutWidthMargins;
            cellHeight = curItemHeightWithoutHeightMargins;
        }
        rowWidth = (cellWidth + 2 * itemMargin.width) * columnCount;
        if (ignorePadding) {
            rowWidth -= 2 * itemMargin.width;
        }
        tableWidth = rowWidth;
        tableStruct.style.height = '100%';
        tableStruct.style.width = tableWidth + 'px';
        if (this._option.useFlex) {
            tableStruct.style.display = 'flex';
            tableStruct.style.flexDirection = 'column';
            tableStruct.style.alignItems = 'center';
        }
        for (i = 0; i < rowCount; i++) {
            rowHeight = curItemHeight;
            if (ignorePadding) {
                if (i === 0 && rowCount === 1) {
                    rowHeight -= 2 * itemMargin.height;
                }
                else if (i === 0 || i === rowCount - 1) {
                    rowHeight -= itemMargin.height;
                }
            }
            row = document.createElement('div');
            row.classList.add(_css_class_names_1.cssClassNames.widgetViewerRow);
            row.style.clear = 'both';
            row.style.padding = '0px';
            row.style.margin = '0px';
            row.style.height = rowHeight + 'px';
            if (!this._option.useFlex)
                row.style.width = rowWidth + 'px';
            for (j = 0; j < columnCount; j++) {
                item = null;
                col = document.createElement('div');
                col.classList.add(_css_class_names_1.cssClassNames.widgetViewerCell);
                col.style.paddingLeft = ignorePadding && (j === 0) ? '0' : itemMargin.width + 'px';
                col.style.paddingRight = ignorePadding && (j === columnCount - 1) ? '0' : itemMargin.width + 'px';
                col.style.paddingTop = ignorePadding && (i === 0) ? '0' : itemMargin.height + 'px';
                col.style.paddingBottom = ignorePadding && (i === rowCount - 1) ? '0' : itemMargin.height + 'px';
                col.style.margin = '0px';
                col.style.width = cellWidth + 'px';
                col.style.height = cellHeight + 'px';
                col.style.cssFloat = 'left';
                indexItem = that._calcItemIndex(i, j, arrangementInfo.direction, rowCount, columnCount);
                if (indexItem < itemsListLen) {
                    curItem = that.itemsList[indexItem];
                    if (that._firstDraw) {
                        item = curItem.initDraw(curItemWidth - widthMarginsAndBorders, curItemHeight - heightMarginsAndBorders, indexItem);
                        action = 'draw';
                    }
                    else {
                        curItem.detachItem();
                        item = curItem.getItemContainer();
                        action = 'resize';
                    }
                    if (item) {
                        col.appendChild(item);
                    }
                }
                row.appendChild(col);
            }
            tableStruct.appendChild(row);
        }
        that._processBatchItems(action, 0, enableAnimation);
        that._firstDraw = false;
        return tableStruct;
    }
    _getItemProportions() {
        return this._itemProportions;
    }
    _calcViewerParams(parentWidth, parentHeight, itemCount, method) {
        var that = this, calcRes = that._calculateArrangementInfo(parentWidth, parentHeight, itemCount, method), getRowCount = function () {
            var rowCount = undefined;
            if (calcRes.direction === _arrangement_info_1.positioningDirection.Vertical) {
                rowCount = calcRes.itemsOnRowCount;
            }
            if (calcRes.direction === _arrangement_info_1.positioningDirection.Horizontal) {
                rowCount = calcRes.itemsOnColumnCount;
            }
            return rowCount;
        }, getColumnCount = function () {
            var colCount = undefined;
            if (calcRes.direction === _arrangement_info_1.positioningDirection.Vertical) {
                colCount = calcRes.itemsOnColumnCount;
            }
            if (calcRes.direction === _arrangement_info_1.positioningDirection.Horizontal) {
                colCount = calcRes.itemsOnRowCount;
            }
            return colCount;
        }, getWidthByHeight = function (height) {
            var newItemWidth = ~~(height / (that._getItemProportions() * getRowCount()));
            return newWidth = newItemWidth * getColumnCount();
        }, getHeightByWidth = function (width) {
            var newItemHeight = ~~(width * that._getItemProportions() / getColumnCount());
            return newItemHeight * getRowCount();
        };
        that._hasHorizontalScroll = 0;
        that._hasVerticalScroll = 0;
        if (getColumnCount() * calcRes.getWidth() > parentWidth) {
            calcRes = that._calculateArrangementInfo(parentWidth, parentHeight - that._scrollBarWidth, itemCount, method);
            if (calcRes.direction === _arrangement_info_1.positioningDirection.Vertical && (getColumnCount() * calcRes.getWidth() < parentWidth)) {
                var newHeight = getHeightByWidth(parentWidth);
                if (newHeight <= parentHeight)
                    return that._calculateArrangementInfo(parentWidth, newHeight, itemCount, method);
            }
            that._hasHorizontalScroll = 1;
        }
        if (getRowCount() * calcRes.getHeight() > parentHeight) {
            calcRes = that._calculateArrangementInfo(parentWidth - that._scrollBarWidth, parentHeight, itemCount, method);
            if (calcRes.direction === _arrangement_info_1.positioningDirection.Horizontal && (getRowCount() * calcRes.getHeight() < parentHeight)) {
                var newWidth = getWidthByHeight(parentHeight);
                if (newWidth <= parentWidth)
                    return that._calculateArrangementInfo(newWidth, parentHeight, itemCount, method);
            }
            that._hasVerticalScroll = 1;
        }
        return calcRes;
    }
    _createArrangementInfo(width, lineCount, itemMinWidth, proportions, direction) {
        var that = this, itemWidth, itemHeight, options = {};
        if (lineCount < 1) {
            lineCount = 1;
        }
        if (that.itemsList.length < lineCount) {
            lineCount = that.itemsList.length;
        }
        itemWidth = width / lineCount;
        itemHeight = ~~(itemWidth * proportions);
        if (itemWidth < itemMinWidth) {
            itemWidth = itemMinWidth;
            itemHeight = ~~(itemWidth * proportions);
        }
        return new _arrangement_info_1.ArrangementInfo(that.itemsList.length, lineCount, itemWidth, itemHeight, this._option.itemOptions.itemMargin, direction, options);
    }
    _calculateArrangementInfo(width, height, itemCount, method) {
        var that = this, horzInfo, newHorzInfo, nextHorzInfo, vertInfo, itemHeight, itemWidth, countOnWidth, i, itemMargin = this._option.itemOptions.itemMargin, itemProportions = that._getItemProportions(), options = {};
        switch (method) {
            case 'column':
                return that._createArrangementInfo(width, itemCount, that.minItemWidth, itemProportions, _arrangement_info_1.positioningDirection.Horizontal);
            case 'row':
                return that._createArrangementInfo(height, itemCount, that.minItemHeight, 1 / itemProportions, _arrangement_info_1.positioningDirection.Vertical);
            case 'auto':
                if (height < that.minItemHeight && width / that.minItemWidth >= that.itemsList.length) {
                    return new _arrangement_info_1.ArrangementInfo(that.itemsList.length, that.itemsList.length, that.minItemWidth, that.minItemHeight, itemMargin, _arrangement_info_1.positioningDirection.Horizontal, options);
                }
                horzInfo = that._createArrangementInfo(width, ~~(width / that.minItemWidth), that.minItemWidth, itemProportions, _arrangement_info_1.positioningDirection.Horizontal);
                for (i = horzInfo.itemsOnRowCount - 1; i >= 1; i--) {
                    newHorzInfo = that._createArrangementInfo(width, i, that.minItemWidth, itemProportions, _arrangement_info_1.positioningDirection.Horizontal);
                    if (height >= newHorzInfo.itemsOnColumnCount * newHorzInfo.getHeight(false))
                        horzInfo = newHorzInfo;
                    else
                        break;
                }
                nextHorzInfo = that._createArrangementInfo(width, horzInfo.itemsOnRowCount - 1, that.minItemWidth, itemProportions, _arrangement_info_1.positioningDirection.Horizontal);
                vertInfo = that._createArrangementInfo(height, nextHorzInfo.itemsOnColumnCount, that.minItemHeight, 1 / itemProportions, _arrangement_info_1.positioningDirection.Vertical);
                itemHeight = vertInfo.getHeight(false);
                itemWidth = vertInfo.getWidth(false);
                countOnWidth = nextHorzInfo.itemsOnRowCount;
                if (horzInfo.getHeight(false) < itemHeight && width >= countOnWidth * itemWidth)
                    horzInfo = new _arrangement_info_1.ArrangementInfo(that.itemsList.length, countOnWidth, itemWidth, itemHeight, itemMargin, _arrangement_info_1.positioningDirection.Horizontal, options);
                if (height < horzInfo.itemsOnColumnCount * horzInfo.getHeight(false)) {
                    vertInfo = that._createArrangementInfo(height, horzInfo.itemsOnColumnCount, that.minItemHeight, 1 / itemProportions, _arrangement_info_1.positioningDirection.Vertical);
                    itemHeight = vertInfo.getHeight(false);
                    itemWidth = vertInfo.getWidth(false);
                    countOnWidth = vertInfo.itemsOnColumnCount;
                    if (height >= vertInfo.itemsOnRowCount * itemHeight && width >= countOnWidth * itemWidth)
                        horzInfo = new _arrangement_info_1.ArrangementInfo(that.itemsList.length, Math.min(~~(width / itemWidth), that.itemsList.length), itemWidth, itemHeight, itemMargin, _arrangement_info_1.positioningDirection.Horizontal, options);
                }
                return horzInfo;
            default:
                return null;
        }
    }
    _drawItems(method, itemCount, enableAnimation) {
        method = method || 'auto';
        itemCount = itemCount || 1;
        var that = this, parentWidth = that._parentWidth(), parentHeight = that._parentHeight(), viewerParams = that._viewerParams, itemsList = that.itemsList, ignorePadding = this._option.viewer.ignorePadding, itemMargin = this._option.itemOptions.itemMargin, extendedWidth = ignorePadding ? 2 * itemMargin.width : 0, extendedHeight = ignorePadding ? 2 * itemMargin.height : 0;
        if (!itemsList.length) {
            return null;
        }
        viewerParams = that._viewerParams = that._calcViewerParams(parentWidth + extendedWidth, parentHeight + extendedHeight, itemCount, method);
        that.curItemHeight = ~~viewerParams.getHeight();
        that.curItemWidth = ~~viewerParams.getWidth();
        return that._createTable(that._viewerParams, enableAnimation);
    }
    getItemByIndex(index) {
        var indexForCheck, result;
        if (_utils_1.type.isNumeric(index)) {
            indexForCheck = Number(index);
            result = this.itemsList[indexForCheck];
        }
        return _utils_1.type.isDefined(result) ? result : null;
    }
    _getScrollBarWidth() {
        var that = this, useNativeScrolling = that._option.viewer.useNativeScrolling, scrollBarWidth = 0;
        if (useNativeScrolling == 'auto' || useNativeScrolling === false) {
            return scrollBarWidth;
        }
        var container = document.createElement('div');
        container.style.position = 'absolute';
        container.style.top = '0';
        container.style.left = '0';
        container.style.visibility = 'hidden';
        container.style.width = '200px';
        container.style.height = '150px';
        container.style.overflow = 'hidden';
        document.body.appendChild(container);
        var p = document.createElement('p');
        p.style.width = '100%';
        p.style.height = '300px';
        container.appendChild(p);
        var widthWithoutScrollBar = $.fn.constructor(p).width();
        var scrollableContent = _render_helper_1.RenderHelper.wrapScrollable(container, this._option.viewer.overflow, 'both');
        if (scrollableContent == container) {
            scrollableContent = p;
        }
        scrollBarWidth = widthWithoutScrollBar - $.fn.constructor(scrollableContent).width();
        if (scrollBarWidth > 0) {
            scrollBarWidth++;
        }
        container.parentElement.removeChild(container);
        return scrollBarWidth;
    }
    _processBatchItems(functionName, startIndex, enableAnimation) {
        var that = this, dateStart = Date.now(), itemsList = that.itemsList, itemsListLen = itemsList.length, totalMarginsAndBorders = that.totalMarginsAndBorders, widthMarginsAndBorders = totalMarginsAndBorders.width, heightMarginsAndBorders = totalMarginsAndBorders.height, viewer = this._option.viewer, onAllItemsRenderComplete = viewer.onAllItemsRenderComplete, bulkTimesRenderingTimeInterval = viewer.bulkTimesRenderingTimeInterval, itemWidth = that.curItemWidth - widthMarginsAndBorders, itemHeight = that.curItemHeight - heightMarginsAndBorders, commonItemsOptions, itemsStyle;
        if (!itemsList[startIndex]) {
            return;
        }
        commonItemsOptions = itemsList[startIndex].calcCommonItemSpecificOptions(itemWidth, itemHeight);
        itemsStyle = itemsList[startIndex].getCssStyle(itemWidth, itemHeight, commonItemsOptions, '.' + _css_class_names_1.cssClassNames.widgetViewerIdPrefix + that._viewerID);
        that._styleTag && that._styleTag.parentElement.removeChild(that._styleTag);
        that._styleTag = document.createElement('style');
        that._styleTag.innerText = itemsStyle;
        that._styleTag.type = 'text/css';
        document.head.appendChild(that._styleTag);
        var internalProcessBatchItems = function () {
            if (typeof itemsList[startIndex][functionName] === 'function') {
                dateStart = Date.now();
                do {
                    if (startIndex < itemsListLen) {
                        itemsList[startIndex][functionName](itemWidth, itemHeight, startIndex, commonItemsOptions);
                        ++startIndex;
                    }
                    if (!itemsList[startIndex]) {
                        if (typeof onAllItemsRenderComplete === 'function') {
                            onAllItemsRenderComplete.call(null);
                        }
                        return;
                    }
                } while (Date.now() - dateStart < bulkTimesRenderingTimeInterval);
                that._drawTimer = window.setTimeout(function () { internalProcessBatchItems(); }, 0);
            }
        };
        if (enableAnimation)
            that._drawTimer = window.setTimeout(function () { internalProcessBatchItems(); }, 0);
        else
            internalProcessBatchItems();
    }
}
exports.dxWidgetsViewer = dxWidgetsViewer;


/***/ }),

/***/ 49172:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RowArrangementStrategy = exports.ColumnArrangementStrategy = exports.AutoArrangementStrategy = exports.ArrangementStrategy = void 0;
const _card_arrangement_info_1 = __webpack_require__(66969);
const _card_measurer_1 = __webpack_require__(79676);
class ArrangementStrategy {
    constructor() {
        this.cardMeasurer = new _card_measurer_1.cardMeasurer();
    }
    static createInstance(method, lineCount) {
        switch (method) {
            case 'column':
                return new ColumnArrangementStrategy(lineCount);
            case 'row':
                return new RowArrangementStrategy(lineCount);
            default:
                return new AutoArrangementStrategy();
        }
    }
    getArrangeMethod() {
        return '';
    }
    getLineCount() {
        return -1;
    }
    arrange(viewerHeight, viewerWidth, itemsCount, layouts, ignorePadding = false) {
        var getArrangementInfo = (nextColumnCount = undefined) => {
            var result = new _card_arrangement_info_1.cardArrangementInfo();
            var columnCount = nextColumnCount || this.getColumnCount(itemsCount, actualViewerWidth, cardMinWidth);
            columnCount = this.checkEmptyRows(columnCount, itemsCount);
            var rowCount = this.getRowCount(itemsCount, columnCount);
            var visibleColumnCount = Math.max(1, Math.min(columnCount, Math.floor(actualViewerWidth / cardMinWidth)));
            var visibleRowCount = Math.max(1, Math.min(rowCount, Math.floor(actualViewerHeight / cardMinHeight)));
            result.cellHeight = Math.max(cardMinHeight, Math.floor(actualViewerHeight / visibleRowCount));
            result.cellWidth = Math.max(cardMinWidth, Math.floor(actualViewerWidth / visibleColumnCount));
            result.columnCount = columnCount;
            result.rowCount = rowCount;
            result.itemsCount = itemsCount;
            result.ignorePadding = ignorePadding;
            result.viewerHeight = viewerHeight;
            result.viewerWidth = viewerWidth;
            result.arrangementDirection = this.getArrangementDirection();
            return result;
        };
        var marginOffset = ignorePadding ? _card_arrangement_info_1.margins : 0;
        var cardMinWidth = this.getCardMinWidthWithMargin(layouts);
        var cardMinHeight = this.getCardMinHeightWithMargin(layouts);
        var actualViewerWidth = viewerWidth + marginOffset;
        var actualViewerHeight = viewerHeight + marginOffset;
        return this.calcBestProportions(getArrangementInfo);
    }
    calcBestProportions(calcArrangementInfo) {
        return calcArrangementInfo();
    }
    getCardMinWidthWithMargin(layouts) {
        var largestWidth = layouts.map(layout => layout.minWidth).reduce((prev, curr) => Math.max(prev, curr));
        return largestWidth + _card_arrangement_info_1.paddings + _card_arrangement_info_1.borders + _card_arrangement_info_1.margins;
    }
    getCardMinHeightWithMargin(layouts) {
        var largestHeight = layouts.map(layout => this.cardMeasurer.calcMinHeight(layout)).reduce((prev, curr) => Math.max(prev, curr));
        return largestHeight + _card_arrangement_info_1.paddings + _card_arrangement_info_1.borders + _card_arrangement_info_1.margins;
    }
    checkEmptyRows(columnCount, itemsCount) {
        return columnCount;
    }
    getArrangementDirection() {
        return 'column';
    }
}
exports.ArrangementStrategy = ArrangementStrategy;
class AutoArrangementStrategy extends ArrangementStrategy {
    constructor() {
        super();
    }
    getArrangeMethod() {
        return 'auto';
    }
    getLineCount() {
        return -1;
    }
    getColumnCount(itemsCount, actualViewerWidth, cardMinWidth) {
        var columnCount = Math.max(1, Math.floor(actualViewerWidth / cardMinWidth));
        columnCount = Math.min(itemsCount, columnCount);
        return columnCount;
    }
    checkEmptyRows(columnCount, itemsCount) {
        var lastRowCount = () => itemsCount % columnCount;
        var fullRowCount = () => Math.floor(itemsCount / columnCount);
        var nextLastRowCount = () => lastRowCount() + fullRowCount();
        while (lastRowCount() > 0 && (nextLastRowCount() < columnCount)) {
            columnCount--;
        }
        return columnCount;
    }
    calcBestProportions(calcArrangementInfo) {
        var arrangementInfo = calcArrangementInfo();
        if (arrangementInfo.columnCount > 1) {
            var nextArrangementInfo = calcArrangementInfo(arrangementInfo.columnCount - 1);
            while (nextArrangementInfo.proportionFactor() < arrangementInfo.proportionFactor() && arrangementInfo.columnCount > 1) {
                arrangementInfo = nextArrangementInfo;
                nextArrangementInfo = calcArrangementInfo(arrangementInfo.columnCount - 1);
            }
        }
        return arrangementInfo;
    }
    getRowCount(itemsCount, columnCount) {
        return Math.ceil(itemsCount / columnCount);
    }
}
exports.AutoArrangementStrategy = AutoArrangementStrategy;
class ColumnArrangementStrategy extends ArrangementStrategy {
    constructor(columnCount) {
        super();
        this.columnCount = columnCount;
    }
    getArrangeMethod() {
        return 'column';
    }
    getLineCount() {
        return this.columnCount;
    }
    getColumnCount(itemsCount, actualViewerWidth, cardMinWidth) {
        return Math.min(itemsCount, this.columnCount);
    }
    getRowCount(itemsCount, columnCount) {
        return Math.max(1, Math.ceil(itemsCount / columnCount));
    }
}
exports.ColumnArrangementStrategy = ColumnArrangementStrategy;
class RowArrangementStrategy extends ArrangementStrategy {
    constructor(rowCount) {
        super();
        this.rowCount = rowCount;
    }
    getArrangementMethod() {
        return 'row';
    }
    getLineCount() {
        return this.rowCount;
    }
    getColumnCount(itemsCount, actualViewerWidth, cardMinWidth) {
        return Math.ceil(itemsCount / Math.min(itemsCount, this.rowCount));
    }
    getRowCount(itemsCount, columnCount) {
        return Math.min(itemsCount, this.rowCount);
    }
    getArrangementDirection() {
        return 'row';
    }
}
exports.RowArrangementStrategy = RowArrangementStrategy;


/***/ }),

/***/ 66969:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardArrangementInfo = exports.borders = exports.paddings = exports.margins = void 0;
const _new_card_item_1 = __webpack_require__(64174);
exports.margins = _new_card_item_1.newCardMeasurements.margin * 2, exports.paddings = _new_card_item_1.newCardMeasurements.padding * 2, exports.borders = _new_card_item_1.newCardMeasurements.borderWidth * 2;
class cardArrangementInfo {
    constructor() {
        this.etalonWidth = 11;
        this.etalonHeight = 10;
        this.arrangementDirection = 'column';
        this.ignorePadding = false;
    }
    getMarginOffset() {
        return this.ignorePadding ? exports.margins : 0;
    }
    getScrollableHeight() {
        return Math.max(this.rowCount * this.cellHeight - this.getMarginOffset(), this.viewerHeight);
    }
    getScrollableWidth() {
        return Math.max(this.columnCount * this.cellWidth - this.getMarginOffset(), this.viewerWidth);
    }
    proportionFactor() {
        return Math.abs(((this.etalonWidth - this.etalonHeight) / (this.etalonWidth + this.etalonHeight)) - ((this.cellWidth - this.cellHeight) / (this.cellWidth + this.cellHeight)));
    }
    getCardContentHeight() {
        return this.cellHeight - exports.margins - exports.paddings - exports.borders;
    }
    getCardContentWidth() {
        return this.cellWidth - exports.margins - exports.paddings - exports.borders;
    }
    getCardWidth() {
        return this.cellWidth - exports.margins;
    }
    getCardHeight() {
        return this.cellHeight - exports.margins;
    }
    hasVerticalScroll() {
        return this.getScrollableHeight() > this.viewerHeight;
    }
    hasHorizontalScroll() {
        return this.getScrollableWidth() > this.viewerWidth;
    }
}
exports.cardArrangementInfo = cardArrangementInfo;


/***/ }),

/***/ 22439:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardArrangementTableGenerator = void 0;
const $ = __webpack_require__(65311);
const _css_class_names_1 = __webpack_require__(28490);
const _new_card_item_1 = __webpack_require__(64174);
class cardArrangementTableGenerator {
    generateTable(container, cardArrangements) {
        this.reset();
        this.cardArrangements = cardArrangements;
        this.generateCells(container, this.cardArrangements);
    }
    drawCellContent(startIndex, endIndex, drawHandler) {
        for (var i = startIndex; i <= endIndex; i++) {
            drawHandler(this.cells[i], this.cardArrangements, i);
        }
    }
    reset() {
        this.cells = [];
    }
    generateCells(tableStruct, cardArrangements) {
        if (cardArrangements.arrangementDirection === 'column') {
            for (var rowIndex = 0; rowIndex < cardArrangements.rowCount; rowIndex++) {
                var row = this.createRow(cardArrangements, rowIndex);
                for (var columnIndex = 0; columnIndex < cardArrangements.columnCount; columnIndex++) {
                    var itemIndex = rowIndex * cardArrangements.columnCount + columnIndex;
                    if (itemIndex >= cardArrangements.itemsCount)
                        break;
                    var cell = this.createCell(cardArrangements, rowIndex, columnIndex);
                    this.cells.push(cell);
                    row.append(cell);
                }
                tableStruct.append(row);
            }
        }
        else {
            var rows = {};
            var getRow = (index) => {
                var row = rows[index];
                if (!row) {
                    row = this.createRow(cardArrangements, index);
                    rows[index] = row;
                }
                return row;
            };
            for (var columnIndex = 0; columnIndex < cardArrangements.columnCount; columnIndex++) {
                for (var rowIndex = 0; rowIndex < cardArrangements.rowCount; rowIndex++) {
                    var itemIndex = columnIndex * cardArrangements.rowCount + rowIndex;
                    if (itemIndex >= cardArrangements.itemsCount)
                        break;
                    var row = getRow(rowIndex);
                    var cell = this.createCell(cardArrangements, rowIndex, columnIndex);
                    this.cells.push(cell);
                    row.append(cell);
                }
                $.each(rows, function (_, row) {
                    tableStruct.append(row);
                });
            }
        }
    }
    createRow(cardArrangements, rowIndex) {
        var actualHeight = cardArrangements.cellHeight;
        if (cardArrangements.ignorePadding && rowIndex === 0) {
            actualHeight -= _new_card_item_1.newCardMeasurements.margin;
        }
        if (cardArrangements.ignorePadding && rowIndex === cardArrangements.rowCount - 1) {
            actualHeight -= _new_card_item_1.newCardMeasurements.margin;
        }
        var div = $.fn.constructor('<div>', {
            'class': _css_class_names_1.cssClassNames.widgetViewerRow, css: {
                height: actualHeight,
                width: cardArrangements.getScrollableWidth()
            }
        });
        return div;
    }
    createCell(cardArrangements, rowIndex, columnIndex) {
        var actualWidth = cardArrangements.cellWidth;
        var actualHeight = cardArrangements.cellHeight;
        var ignorePadding = cardArrangements.ignorePadding;
        var ignoreLeft = false, ignoreRight = false, ignoreTop = false, ignoreBottom = false;
        if (ignorePadding && columnIndex === 0) {
            actualWidth -= _new_card_item_1.newCardMeasurements.margin;
            ignoreLeft = true;
        }
        if (ignorePadding && columnIndex === cardArrangements.columnCount - 1) {
            actualWidth -= _new_card_item_1.newCardMeasurements.margin;
            ignoreRight = true;
        }
        if (ignorePadding && rowIndex === 0) {
            actualHeight -= _new_card_item_1.newCardMeasurements.margin;
            ignoreTop = true;
        }
        if (ignorePadding && rowIndex === cardArrangements.rowCount - 1) {
            actualHeight -= _new_card_item_1.newCardMeasurements.margin;
            ignoreBottom = true;
        }
        var div = $.fn.constructor('<div >', {
            'class': _css_class_names_1.cssClassNames.widgetViewerCell,
            css: {
                height: actualHeight,
                width: actualWidth,
                float: 'left'
            }
        });
        if (ignoreLeft)
            div.addClass('dx-flex-card-cell-ignore-left-margin');
        if (ignoreRight)
            div.addClass('dx-flex-card-cell-ignore-right-margin');
        if (ignoreTop)
            div.addClass('dx-flex-card-cell-ignore-top-margin');
        if (ignoreBottom)
            div.addClass('dx-flex-card-cell-ignore-bototm-margin');
        return div;
    }
}
exports.cardArrangementTableGenerator = cardArrangementTableGenerator;


/***/ }),

/***/ 36014:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardItem = exports.cardValue1Counter = void 0;
const string_1 = __webpack_require__(36306);
const tooltip_1 = __webpack_require__(87441);
const sparkline_1 = __webpack_require__(37827);
const $ = __webpack_require__(65311);
const _format_helper_1 = __webpack_require__(27893);
const _jquery_helpers_1 = __webpack_require__(59384);
const _delta_indicator_1 = __webpack_require__(75629);
const _simple_indicator_1 = __webpack_require__(39801);
const _base_widget_item_1 = __webpack_require__(17679);
const _css_class_names_1 = __webpack_require__(28490);
var hiddenContainer = $.fn.constructor('<div>', {
    id: _css_class_names_1.cssClassNames.cardHiddenContainer
}), nowrapHiddenContainer = $.fn.constructor('<div>', {
    id: _css_class_names_1.cssClassNames.cardNowrapHiddenContainer
}), _ceil = Math.ceil, _floor = Math.floor, TITLE_TOOLTIP_PREFIX = 'titleTooltip', TITLE_CONTAINER_PREFIX = 'titleContainer';
exports.cardValue1Counter = 0;
function getSparklineHeight(cardHeight) {
    return cardHeight * 0.25;
}
function calcRowCount(text, encodeHtml) {
    var text = encodeHtml ? string_1.encodeHtml(text) : text, words = text.split(' '), i, openSpan = '<span>', closeSpan = ' </span>', markup = '', prevOffsetTop, lineCount = 1, clientRects;
    for (i = 0; i < words.length; i++) {
        markup += openSpan + words[i] + closeSpan;
    }
    hiddenContainer.html(openSpan + markup + closeSpan);
    clientRects = hiddenContainer.children()[0].getClientRects();
    prevOffsetTop = clientRects[0].top;
    for (i = 1; i < clientRects.length; i++) {
        if (clientRects[i].top !== prevOffsetTop) {
            lineCount++;
            prevOffsetTop = clientRects[i].top;
        }
    }
    return lineCount;
}
class CardItem extends _base_widget_item_1.BaseWidgetItem {
    constructor(item, options) {
        super(CardItem.ensureOptions(options));
        var getText = function (text) {
            if (text) {
                return options.encodeHtml ? $.fn.constructor('<div>').text(text).html() : text;
            }
            return '';
        }, defaultValues = {
            type: 'none',
            hasPositiveMeaning: false,
            text: {
                value: '',
                useDefaultColor: false
            }
        };
        item = item || {};
        this.data = item.data || {};
        this.title = getText(item.title);
        this.subTitle = getText(item.subTitle);
        this.sparklineOptions = item.sparklineOptions || {};
        this.variableValue1 = _jquery_helpers_1.deepExtend({}, defaultValues, item.variableValue1);
        this.variableValue2 = _jquery_helpers_1.deepExtend({}, defaultValues, item.variableValue2);
        defaultValues.text.useDefaultColor = true;
        this.mainValue = _jquery_helpers_1.deepExtend({}, defaultValues, item.mainValue);
        this.indicator = {
            hasPositiveMeaning: this.mainValue.hasPositiveMeaning,
            type: this.mainValue.type
        };
        if (hiddenContainer.parent().length === 0) {
            hiddenContainer.appendTo(document.body);
        }
        if (nowrapHiddenContainer.parent().length === 0) {
            nowrapHiddenContainer.appendTo(document.body);
        }
        this.subtitleDotsIndex = 0;
    }
    static ensureOptions(options) {
        options = options || {};
        options.type = 'cardItem';
        options.ignoreProportions = false;
        return options;
    }
    draw(widthCard, heightCard, cardIndex, commonItemsOptions) {
        var that = this, options = that._options, paddings = commonItemsOptions.paddings, sparklineHeight = commonItemsOptions.sparklineHeight, imgDiv, itemDiv, sparklineContainer, topContentOffset = parseFloat(paddings.top), title, subtitle, variableValue1, variableValue2, mainValueDiv, textSubtitle = options.encodeHtml ? that._getEllipsisText(that.subTitle, commonItemsOptions, _floor((widthCard - paddings.right - paddings.left) * 0.6)) : that.subTitle, index = exports.cardValue1Counter++, value1Text = that._getText('variableValue1'), value2Text = that._getText('variableValue2'), mainValueText = that._getText('mainValue'), titleContainerId = TITLE_CONTAINER_PREFIX + index;
        itemDiv = super.draw(widthCard, heightCard, cardIndex);
        title = ['<div id="' + titleContainerId + '" class="', _css_class_names_1.cssClassNames.cardTitle + '" style="padding:' + topContentOffset + 'px ' + paddings.left + 'px 0px ' + paddings.left + 'px;">', that.title, '</div>'].join('');
        subtitle = ['<div class="', _css_class_names_1.cssClassNames.cardSubtitle, '" style="padding-left:' + paddings.left + 'px;">', textSubtitle, '</div>'].join('');
        variableValue1 = ['<span class="', _css_class_names_1.cssClassNames.cardVariableValue1, ' ', that._getValueClassName('variableValue1') + '" style="padding-right:' + paddings.right + 'px;">', value1Text, '</span>'].join('');
        variableValue2 = ['<span class="', _css_class_names_1.cssClassNames.cardVariableValue2, ' ', that._getValueClassName('variableValue2'), '" style="padding-right:' + paddings.right + 'px;">', value2Text, '</span>'].join('');
        imgDiv = ['<div class="', _css_class_names_1.cssClassNames.cardIndicator, '" style="padding-left:' + paddings.left + 'px;">',
            _simple_indicator_1.SimpleIndicator.getIndicator(that.indicator.type, that.indicator.hasPositiveMeaning), '</div>'].join('');
        mainValueDiv = ['<span class="', _css_class_names_1.cssClassNames.cardMainValue, ' ', that._getValueClassName('mainValue'), '" style="padding-right:' + paddings.right + 'px;">', mainValueText, '</div>'].join('');
        itemDiv.innerHTML = title + subtitle + variableValue1 + variableValue2 + imgDiv + mainValueDiv;
        that._addTooltip(itemDiv, titleContainerId, TITLE_TOOLTIP_PREFIX, that.title, index);
        if (options.hasSparkline) {
            sparklineContainer = document.createElement('div');
            sparklineContainer.classList.add(_css_class_names_1.cssClassNames.cardSparkline);
            sparklineContainer.style.left = paddings.left;
            sparklineContainer.style.left = paddings.right;
            itemDiv.appendChild(sparklineContainer);
            that.sparklineOptions.size = {
                width: widthCard - paddings.left - paddings.right,
                height: sparklineHeight
            };
            new sparkline_1.default(sparklineContainer, that.sparklineOptions);
        }
        return itemDiv;
    }
    resize(width, height, index, commonItemsOptions) {
        var that = this, sparklineHeight = commonItemsOptions.sparklineHeight, itemDiv = that._itemDiv, imgDiv = itemDiv.querySelector('.' + _css_class_names_1.cssClassNames.cardIndicator), subTitle = itemDiv.querySelector('.' + _css_class_names_1.cssClassNames.cardSubtitle), sparklineContainer = itemDiv.querySelector('.' + _css_class_names_1.cssClassNames.cardSparkline), paddings = that._options.padding, widthWithoutpaddings = width - paddings.right - paddings.left;
        if (!itemDiv.childElementCount) {
            that.draw(width, height, index, commonItemsOptions);
            return that._itemDiv;
        }
        if (that._options.encodeHtml)
            subTitle.innerText = that._getEllipsisText(subTitle.innerText, commonItemsOptions, _floor((widthWithoutpaddings) * 0.6));
        if (sparklineHeight) {
            sparkline_1.default.getInstance(sparklineContainer)
                .option('size', { width: widthWithoutpaddings, height: sparklineHeight });
        }
        return itemDiv;
    }
    getCssStyle(width, height, commonItemsOptions, prefix) {
        var that = this, paddings = commonItemsOptions.paddings, sparklineHeight = commonItemsOptions.sparklineHeight, widthWithoutpaddings = width - paddings.right - paddings.left, fontSizes = commonItemsOptions.fontSizes, baseStyle = super.getCssStyle(width, height, commonItemsOptions, prefix), titleStyle = prefix + ' ' + that._formStyle('.' + _css_class_names_1.cssClassNames.cardTitle, {
            'font-size': fontSizes.title,
            'min-height': _ceil(fontSizes.title * 1.3),
            'line-height': fontSizes.title
        }), subTitleStyle = prefix + ' ' + that._formStyle('.' + _css_class_names_1.cssClassNames.cardSubtitle, {
            'min-height': _ceil(fontSizes.subTitle * 1.3) * 2,
            'font-size': fontSizes.subTitle
        }), indicatorContainerStyle = prefix + ' ' + that._formStyle('.' + _css_class_names_1.cssClassNames.cardIndicator, {
            height: _ceil(0.18 * (height - sparklineHeight)),
            width: _ceil(0.24 * (height - sparklineHeight)),
            bottom: paddings.bottom + sparklineHeight + 3
        }), variableValue1Style = prefix + ' ' + that._formStyle('.' + _css_class_names_1.cssClassNames.cardVariableValue1, {
            'font-size': fontSizes.variableValue1,
            'line-height': fontSizes.variableValue1,
            bottom: fontSizes.variableValue2 + fontSizes.mainValue
        }), variableValue2Style = prefix + ' ' + that._formStyle('.' + _css_class_names_1.cssClassNames.cardVariableValue2, {
            'font-size': fontSizes.variableValue2,
            'line-height': fontSizes.variableValue2,
            'bottom': fontSizes.mainValue
        }), mainValueStyle = prefix + ' ' + that._formStyle('.' + _css_class_names_1.cssClassNames.cardMainValue, {
            'font-size': fontSizes.mainValue,
            'line-height': fontSizes.mainValue,
            bottom: paddings.bottom + sparklineHeight
        }), sparklineContainerStyle = sparklineHeight ?
            prefix + ' ' + that._formStyle('.' + _css_class_names_1.cssClassNames.cardSparkline, {
                height: sparklineHeight,
                width: widthWithoutpaddings
            }) : '';
        return [baseStyle, titleStyle, subTitleStyle, indicatorContainerStyle, variableValue1Style, variableValue2Style, mainValueStyle, sparklineContainerStyle].join(' ');
    }
    static calcFonts(height) {
        return {
            title: (~~(height * 0.22)),
            subTitle: (~~(height * 0.14)),
            mainValue: (~~(height * 0.30)),
            variableValue1: (~~(height * 0.14)),
            variableValue2: (~~(height * 0.14))
        };
    }
    calcCommonItemSpecificOptions(width, height) {
        var that = this, options = that._options, sparklineHeight = options.hasSparkline ? getSparklineHeight(height) : 0, fontSizes = CardItem.calcFonts(height - sparklineHeight), paddings = Object.assign({ top: 0, left: 0, right: 0, bottom: 0 }, options.padding), oneRowHeight;
        hiddenContainer.width(_floor((width - paddings.right - paddings.left) * 0.6))
            .css('fontSize', fontSizes.subTitle);
        nowrapHiddenContainer.css('fontSize', fontSizes.subTitle);
        oneRowHeight = hiddenContainer.text('a').height();
        hiddenContainer.empty();
        return {
            paddings: paddings,
            sparklineHeight: sparklineHeight,
            fontSizes: fontSizes,
            oneRowHeight: oneRowHeight
        };
    }
    dispose() {
        var that = this;
        _base_widget_item_1.BaseWidgetItem.prototype.dispose.apply(that, arguments);
        that.data = null;
        that.sparklineOptions = null;
        that.indicator = null;
        that._options = null;
    }
    _addTooltip(itemDiv, containerId, tooltipPrefix, text, index) {
        var container = itemDiv.querySelector('#' + containerId);
        var div = document.createElement('div');
        div.id = tooltipPrefix + index;
        container.appendChild(div);
        div.innerText = text;
        new tooltip_1.default(div, {
            target: '#' + containerId,
            showEvent: { name: 'mouseenter', delay: 800 },
            hideEvent: 'mouseleave'
        });
    }
    _getDefaultOptions() {
        var defaults = _base_widget_item_1.BaseWidgetItem.prototype._getDefaultOptions.apply(this, arguments), options = {
            padding: {
                top: 3,
                left: 12,
                right: 12,
                bottom: 10
            },
            font: {
                family: 'Segoe UI, HelveticaNeue, Trebuchet MS, Verdana',
                weight: 'normal'
            },
            title: {
                color: 'black'
            },
            subTitle: {
                color: '#B6B6B6'
            }
        };
        return _jquery_helpers_1.deepExtend({}, defaults, options);
    }
    _getText(classText) {
        var that = this;
        var valueOptions = that[classText].text, value = valueOptions.value, format = valueOptions.format;
        if (format) {
            return _format_helper_1.DashboardFormatHelper.format(parseFloat(value), format);
        }
        else {
            return that._options.encodeHtml ? string_1.encodeHtml(value) : value.toString();
        }
    }
    _getClassFromIndicator(type, hasPositiveMeaning, useDefaultColor) {
        return _delta_indicator_1.DeltaIndicator.getIndicatorColorType(type, hasPositiveMeaning, useDefaultColor);
    }
    _getCardStyle(isSelected) {
        return isSelected ? this._options.selectionStyle : this._options.style;
    }
    _getValueClassName(classText) {
        var that = this, value = that[classText], useDefaultColor = value.text.useDefaultColor, hasPositiveMeaning = value.hasPositiveMeaning, type = value.type;
        return that._getClassFromIndicator(type, hasPositiveMeaning, useDefaultColor);
    }
    _setSubtitleDotsIndex(index) {
        this._subtitleDotsIndex = index;
    }
    _getEllipsisText(inputText, commonItemsOptions, containerWidth) {
        if (!inputText || inputText === '') {
            return '';
        }
        var that = this, subtitleRowsCount = calcRowCount(inputText, that._options.encodeHtml), fullTextWidth, proportionalTextLen, updatedText, movingDirection, threeDots = '...', i, endIndex, dotsIndex = this._subtitleDotsIndex;
        if (subtitleRowsCount <= 2) {
            return inputText;
        }
        fullTextWidth = nowrapHiddenContainer.text(inputText).width();
        proportionalTextLen = _floor(2 * containerWidth * inputText.length / fullTextWidth);
        updatedText = inputText.substring(0, proportionalTextLen - 3) + threeDots;
        subtitleRowsCount = calcRowCount(updatedText, that._options.encodeHtml);
        if (subtitleRowsCount > 2) {
            movingDirection = -1;
        }
        else {
            movingDirection = 1;
        }
        for (i = 1; i < proportionalTextLen; i += 2) {
            endIndex = dotsIndex ? dotsIndex + i * movingDirection : proportionalTextLen - 3 + i * movingDirection;
            updatedText = inputText.substring(0, endIndex) + threeDots;
            subtitleRowsCount = calcRowCount(updatedText, that._options.encodeHtml);
            if (movingDirection === 1 && subtitleRowsCount === 3) {
                updatedText = inputText.substring(0, endIndex - 3) + threeDots;
                that._setSubtitleDotsIndex(updatedText.length - 3);
                return updatedText;
            }
            if (movingDirection === -1 && subtitleRowsCount === 2) {
                that._setSubtitleDotsIndex(updatedText.length - 3);
                return updatedText;
            }
        }
        return updatedText;
    }
}
exports.CardItem = CardItem;


/***/ }),

/***/ 96614:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.verticalAlignment = exports.horizontalAlignment = exports.sparklineOptions = exports.cardSparklineElement = exports.cardIndicatorElement = exports.cardRowElement = exports.cardRowElementBase = exports.cardRow = exports.cardLayout = void 0;
const _utils_1 = __webpack_require__(7590);
const _cssHelper_1 = __webpack_require__(95259);
class cardLayout {
    constructor(apiHandlers) {
        this.apiHandlers = apiHandlers;
        this.rows = [];
        this._cardCFFilter = (elementModel) => ((rule, applyToCardId) => {
            let cardRule = rule;
            let result = false;
            if (this._isValidCardId(cardRule, applyToCardId)) {
                if (!elementModel || cardRule.ApplyToRow)
                    result = true;
                else {
                    if (cardRule.ApplyToLayoutElementModel.ApplyToLayoutElement === elementModel.Type) {
                        if (cardRule.ApplyToLayoutElementModel.ApplyToLayoutElement === 'Dimension')
                            result = cardRule.ApplyToLayoutElementModel.DimensionId === elementModel.DataId;
                        else if (cardRule.ApplyToLayoutElementModel.ApplyToLayoutElement === 'Text')
                            result = cardRule.ApplyToLayoutElementModel.Text === elementModel.Text;
                        else
                            result = true;
                    }
                }
            }
            return result;
        });
        this._layoutElementCssClassesLinks = [];
        this._layoutElementCssClassesNames = [];
    }
    hasRowElementCssClass(className) {
        return this._layoutElementCssClassesNames.filter(x => x === className).length > 0;
    }
    addRowElementCss(className, selector, properties) {
        if (!this.hasRowElementCssClass(className)) {
            this._layoutElementCssClassesNames.push(className);
            this._layoutElementCssClassesLinks.push(_cssHelper_1.createCssClass(selector, properties));
        }
    }
    getCardBackgroundColor() {
        return this.apiHandlers && this.apiHandlers.cardBackColor;
    }
    _isValidCardId(cardRule, applyToCardId) {
        if (cardRule.ApplyToCardId)
            return cardRule.ApplyToCardId === applyToCardId;
        return true;
    }
    fill(layoutModel) {
        this.minWidth = layoutModel.MinWidth;
        this.maxWidth = layoutModel.MaxWidth;
        layoutModel.Rows.forEach((rowModel, i) => {
            var row = new cardRow();
            row.vAlignment = this.convertVAlignment(rowModel.VAlignment);
            row.indent = rowModel.Indent;
            rowModel.Elements.forEach((elementModel, j) => {
                if (elementModel.Type === 'Indicator') {
                    var indicatorElement = new cardIndicatorElement();
                    indicatorElement.getStyleSettings = (data) => {
                        return data.getStyleSettingsInfo(this._cardCFFilter(elementModel));
                    };
                    indicatorElement.getIndicatorType = (data) => {
                        return this.isDeltaType(elementModel.Type) && data.getIndicatorType();
                    };
                    indicatorElement.getIsGood = (data) => {
                        return this.isDeltaType(elementModel.Type) && data.getIsGood();
                    };
                    indicatorElement.width = elementModel.Size;
                    indicatorElement.height = Math.round(elementModel.Size / elementModel.IndicatorWidthRatio);
                    indicatorElement.hAlignment = this.convertHAlignment(elementModel.HAlignment);
                    row.elements.push(indicatorElement);
                }
                else if (elementModel.Type === 'Sparkline') {
                    var sparklineElement = new cardSparklineElement();
                    sparklineElement.height = elementModel.Size;
                    sparklineElement.getSparklineOptions = (data) => {
                        return data.getSparklineOptions();
                    };
                    row.elements.push(sparklineElement);
                }
                else {
                    var rowElement = new cardRowElement();
                    rowElement.id = elementModel.Id;
                    rowElement.getStyleSettings = (data) => {
                        return data.getStyleSettingsInfo(this._cardCFFilter(elementModel));
                    };
                    rowElement.predefinedColor = elementModel.PredefinedColor;
                    rowElement.color = this.convertElementColor(elementModel.Color);
                    rowElement.hAlignment = this.convertHAlignment(elementModel.HAlignment);
                    rowElement.fontSize = elementModel.FontSize;
                    rowElement.fontFamily = elementModel.FontFamily;
                    rowElement.getValueArgs = (data) => {
                        return this.getElementValue(data, elementModel);
                    };
                    rowElement.getText = (data) => {
                        var text;
                        var valueArgs = this.getElementValue(data, elementModel);
                        if (this.apiHandlers && this.apiHandlers.onCustomizeText) {
                            text = this.apiHandlers.onCustomizeText(valueArgs);
                        }
                        return text || valueArgs.getDefaultText();
                    };
                    rowElement.getIndicatorType = (data) => {
                        return this.isDeltaType(elementModel.Type) ? data.getIndicatorType() : undefined;
                    };
                    rowElement.getIsGood = (data) => {
                        return this.isDeltaType(elementModel.Type) && data.getIsGood();
                    };
                    row.elements.push(rowElement);
                }
            });
            this.rows.push(row);
        });
        this.getStyleSettings = (data) => {
            return data.getStyleSettingsInfo(this._cardCFFilter());
        };
    }
    isDeltaType(elementType) {
        return elementType === 'AbsoluteVariation' ||
            elementType === 'PercentVariation' ||
            elementType === 'PercentOfTarget' ||
            elementType === 'ActualValue' ||
            elementType === 'TargetValue' ||
            elementType === 'Indicator';
    }
    convertElementColor(color) {
        return color ? _utils_1.toColor(color) : null;
    }
    getElementValue(data, elementModel) {
        var valueGetter = () => { return ''; };
        var displayTextGetter = () => { return ''; };
        switch (elementModel.Type) {
            case 'Title':
                valueGetter = data.getTitle;
                displayTextGetter = data.getTitle;
                break;
            case 'Subtitle':
                valueGetter = data.getSubtitle;
                displayTextGetter = data.getSubtitle;
                break;
            case 'Text':
                valueGetter = (s) => elementModel.Text;
                displayTextGetter = (s) => elementModel.Text;
                break;
            case 'ActualValue':
                valueGetter = data.getActualValue;
                displayTextGetter = data.getActualValueText;
                break;
            case 'AbsoluteVariation':
                valueGetter = data.getAbsoluteVariationValue;
                displayTextGetter = data.getAbsoluteVariationText;
                break;
            case 'PercentVariation':
                valueGetter = data.getPercentVariationValue;
                displayTextGetter = data.getPercentVariationText;
                break;
            case 'PercentOfTarget':
                valueGetter = data.getPercentOfTargetValue;
                displayTextGetter = data.getPercentOfTargetText;
                break;
            case 'TargetValue':
                valueGetter = data.getTargetValue;
                displayTextGetter = data.getTargetValueText;
                break;
            case 'Dimension':
                valueGetter = data.getDimensionValue;
                displayTextGetter = data.getDimensionValueText;
                break;
            case 'Measure':
                valueGetter = data.getMeasureValue;
                displayTextGetter = data.getMeasureDisplayText;
                break;
            case 'CardName':
                valueGetter = data.getCardName;
                displayTextGetter = data.getCardName;
                break;
        }
        return {
            getValue() {
                return valueGetter(elementModel.DataId);
            },
            getDefaultText() {
                return displayTextGetter(elementModel.DataId);
            }
        };
    }
    convertVAlignment(value) {
        switch (value) {
            case 'Top':
                return verticalAlignment.top;
            case 'Bottom':
                return verticalAlignment.bottom;
            case 'Center':
            default:
                return verticalAlignment.center;
        }
    }
    convertHAlignment(value) {
        switch (value) {
            case 'Center':
                return horizontalAlignment.center;
            case 'Right':
                return horizontalAlignment.right;
            case 'Left':
            default:
                return horizontalAlignment.left;
        }
    }
    dispose() {
        this._layoutElementCssClassesLinks.forEach(style => style.remove());
        this._layoutElementCssClassesLinks = [];
        this._layoutElementCssClassesNames = [];
    }
}
exports.cardLayout = cardLayout;
class cardRow {
    constructor() {
        this.elements = [];
    }
}
exports.cardRow = cardRow;
class cardRowElementBase {
}
exports.cardRowElementBase = cardRowElementBase;
class cardRowElement extends cardRowElementBase {
}
exports.cardRowElement = cardRowElement;
class cardIndicatorElement extends cardRowElementBase {
}
exports.cardIndicatorElement = cardIndicatorElement;
class cardSparklineElement extends cardRowElementBase {
}
exports.cardSparklineElement = cardSparklineElement;
class sparklineOptions {
    constructor(sparklineOptionsModel) {
        this.viewType = sparklineOptionsModel.ViewType;
        this.highlightMinMaxPoints = sparklineOptionsModel.HighlightMinMaxPoints;
        this.highlightStartEndPoints = sparklineOptionsModel.HighlightStartEndPoints;
    }
}
exports.sparklineOptions = sparklineOptions;
var horizontalAlignment;
(function (horizontalAlignment) {
    horizontalAlignment[horizontalAlignment["left"] = 0] = "left";
    horizontalAlignment[horizontalAlignment["right"] = 1] = "right";
    horizontalAlignment[horizontalAlignment["center"] = 2] = "center";
})(horizontalAlignment = exports.horizontalAlignment || (exports.horizontalAlignment = {}));
var verticalAlignment;
(function (verticalAlignment) {
    verticalAlignment[verticalAlignment["top"] = 0] = "top";
    verticalAlignment[verticalAlignment["center"] = 1] = "center";
    verticalAlignment[verticalAlignment["bottom"] = 2] = "bottom";
})(verticalAlignment = exports.verticalAlignment || (exports.verticalAlignment = {}));


/***/ }),

/***/ 79676:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardMeasurer = void 0;
const _cacheable_1 = __webpack_require__(41603);
const _css_class_names_1 = __webpack_require__(28490);
const _card_layout_1 = __webpack_require__(96614);
var cssTypographyStyle = 'dx-theme-generic-typography';
class cardMeasurer {
    constructor() {
        this.DEFAULT_MIN_HEIGHT = 0;
    }
    static _getImageSpanHeight(width, height) {
        var imageSpan = document.createElement('div');
        imageSpan.classList.add(_css_class_names_1.cssClassNames.layoutCardHiddenContainer);
        imageSpan.style.width = width;
        imageSpan.style.height = height;
        document.body.appendChild(imageSpan);
        var res = imageSpan.getBoundingClientRect().height;
        imageSpan.parentNode.removeChild(imageSpan);
        return res;
    }
    static _getTextSpanHeight(fontSize, fontFamily) {
        var textSpan = document.createElement('div');
        textSpan.innerText = cardMeasurer.DIGITS_STRING;
        textSpan.classList.add(_css_class_names_1.cssClassNames.layoutCardHiddenContainer);
        textSpan.classList.add(cssTypographyStyle);
        textSpan.style.fontSize = fontSize;
        textSpan.style.fontFamily = fontFamily;
        document.body.appendChild(textSpan);
        var res = textSpan.getBoundingClientRect().height;
        textSpan.parentNode.removeChild(textSpan);
        return res;
    }
    calcMinHeight(layout) {
        var topHeight = 0;
        var centerHeight = 0;
        var bottomHeight = 0;
        var rowHeights = {};
        layout.rows.forEach((row, i) => {
            var rowHeight = 0;
            row.elements.forEach((element, j) => {
                if (element instanceof _card_layout_1.cardIndicatorElement) {
                    rowHeight = Math.max(rowHeight, cardMeasurer._getImageSpanHeight('1px', element.height + 'px'));
                }
                else if (element instanceof _card_layout_1.cardSparklineElement) {
                    rowHeight = Math.max(rowHeight, cardMeasurer._getImageSpanHeight('1px', element.height + 'px'));
                }
                else {
                    rowHeight = Math.max(rowHeight, cardMeasurer._getTextSpanHeight(element.fontSize + 'pt', element.fontFamily));
                }
            });
            switch (row.vAlignment) {
                case _card_layout_1.verticalAlignment.top:
                    topHeight += rowHeight + row.indent;
                    break;
                case _card_layout_1.verticalAlignment.center:
                    centerHeight += rowHeight + row.indent;
                    break;
                case _card_layout_1.verticalAlignment.bottom:
                    bottomHeight += rowHeight + row.indent;
                    break;
            }
        });
        return topHeight + centerHeight + bottomHeight || this.DEFAULT_MIN_HEIGHT;
    }
}
cardMeasurer.DIGITS_STRING = '0123456789';
__decorate([
    _cacheable_1.cacheable('cardMeasurer._getImageSpanHeight')
], cardMeasurer, "_getImageSpanHeight", null);
__decorate([
    _cacheable_1.cacheable('cardMeasurer._getTextSpanHeight')
], cardMeasurer, "_getTextSpanHeight", null);
exports.cardMeasurer = cardMeasurer;


/***/ }),

/***/ 57774:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cardPainter = void 0;
const tooltip_1 = __webpack_require__(87441);
const sparkline_1 = __webpack_require__(37827);
const $ = __webpack_require__(65311);
const _cssHelper_1 = __webpack_require__(95259);
const _delta_indicator_1 = __webpack_require__(75629);
const _simple_indicator_1 = __webpack_require__(39801);
const _css_class_names_1 = __webpack_require__(28490);
const _card_layout_1 = __webpack_require__(96614);
class cardPainter {
    constructor(data, controlContainer) {
        this.data = data;
        this.controlContainer = controlContainer;
    }
    draw(cardArrangements, layout, _styleSettingsProvider) {
        this.layout = layout;
        this._styleSettingsProvider = _styleSettingsProvider;
        var cardHeight = cardArrangements.getCardHeight();
        var cardWidth = cardArrangements.getCardWidth();
        this._cardStyle = layout.getStyleSettings(this.data);
        var $divCardLayout = $.fn.constructor('<div>', {})
            .addClass(_css_class_names_1.layoutCardCssClassNames.card)
            .css({
            height: cardHeight,
            width: cardWidth,
            'background-color': layout.getCardBackgroundColor()
        }).append(this.createCardContent(cardArrangements, layout));
        let divCardLayout = $divCardLayout.get(0);
        if (this._cardStyle)
            this._styleSettingsProvider.applyStyleSettings(divCardLayout, null, this._cardStyle, true, null, null, true);
        return $divCardLayout;
    }
    createCardContent(cardArrangements, layout) {
        var contentHeight = cardArrangements.getCardContentHeight();
        var contentWidth = cardArrangements.getCardContentWidth();
        var actualContentWidth = layout.maxWidth > 0 ? Math.min(contentWidth, Math.max(layout.minWidth, layout.maxWidth)) : contentWidth;
        return $.fn.constructor('<div>')
            .css({
            height: contentHeight,
            width: actualContentWidth
        }).addClass(_css_class_names_1.layoutCardCssClassNames.content)
            .append(this.createRows(layout.rows, actualContentWidth));
    }
    createRows(rowModels, contentWidth) {
        var topRows = $.fn.constructor('<div>', { 'class': _css_class_names_1.layoutCardCssClassNames.contentTopRows }), centerRows = $.fn.constructor('<div>', {}), bottomRows = $.fn.constructor('<div>', { 'class': _css_class_names_1.layoutCardCssClassNames.contentBottomRows });
        rowModels.forEach(rowModel => {
            var rowDiv = $.fn.constructor('<div>');
            rowDiv.css('paddingBottom', rowModel.indent);
            switch (rowModel.vAlignment) {
                case _card_layout_1.verticalAlignment.top:
                    topRows.append(rowDiv);
                    break;
                case _card_layout_1.verticalAlignment.bottom:
                    bottomRows.append(rowDiv);
                    break;
                case _card_layout_1.verticalAlignment.center:
                default:
                    centerRows.append(rowDiv);
            }
            this.createRow(rowModel.elements, rowDiv, contentWidth);
        });
        if (centerRows.children().length > 0)
            return [topRows, centerRows, bottomRows];
        else if (topRows.children().length > 0 || bottomRows.children().length > 0) {
            return [topRows, bottomRows];
        }
    }
    createRow(elementModels, rowDiv, contentWidth) {
        var leftElements = [], centerElements = [], rightElements = [];
        elementModels.forEach(elementModel => {
            switch (elementModel.hAlignment) {
                case _card_layout_1.horizontalAlignment.left:
                    leftElements.push(elementModel);
                    break;
                case _card_layout_1.horizontalAlignment.right:
                    rightElements.push(elementModel);
                    break;
                case _card_layout_1.horizontalAlignment.center:
                default:
                    centerElements.push(elementModel);
                    break;
            }
        });
        if (centerElements.length != 0 && leftElements.length == 0 && rightElements.length == 0) {
            rowDiv.addClass(_css_class_names_1.layoutCardCssClassNames.rowOnlyCenterElements);
            rowDiv.append(this.createElements(centerElements, contentWidth));
        }
        else {
            rowDiv.addClass(_css_class_names_1.layoutCardCssClassNames.row);
            var leftDiv = $.fn.constructor('<div>', { 'class': _css_class_names_1.layoutCardCssClassNames.rowLeftRightElements }).appendTo(rowDiv), rightDiv = $.fn.constructor('<div>', { 'class': _css_class_names_1.layoutCardCssClassNames.rowLeftRightElements }).appendTo(rowDiv);
            leftDiv.append(this.createElements(leftElements.concat(centerElements), contentWidth));
            rightDiv.append(this.createElements(rightElements, contentWidth));
        }
    }
    createElements(elements, contentWidth) {
        return elements.map(element => {
            if (element instanceof _card_layout_1.cardIndicatorElement) {
                return this.createIndicatorElement(element);
            }
            else if (element instanceof _card_layout_1.cardSparklineElement) {
                return this.createSparklineElement(element, contentWidth);
            }
            else {
                return this.createDataElement(element);
            }
        });
    }
    createIndicatorElement(indicatorElement) {
        let indicatorDiv = $.fn.constructor('<div>');
        indicatorDiv.addClass(_css_class_names_1.layoutCardCssClassNames.indicatorElement);
        let styleSettings = indicatorElement.getStyleSettings(this.data);
        let cfIconType;
        if (styleSettings)
            cfIconType = this._styleSettingsProvider.getIconType(styleSettings);
        if (cfIconType)
            this._styleSettingsProvider.applyIndicatorStyle(indicatorDiv[0], cfIconType);
        else {
            indicatorDiv
                .css({
                height: indicatorElement.height,
                width: indicatorElement.width
            })
                .append(_simple_indicator_1.SimpleIndicator.getIndicator(indicatorElement.getIndicatorType(this.data), indicatorElement.getIsGood(this.data)));
        }
        return indicatorDiv;
    }
    createSparklineElement(sparklineElement, contentWidth) {
        var sparklineOptions = sparklineElement.getSparklineOptions(this.data);
        sparklineOptions.size = {
            height: sparklineElement.height,
            width: contentWidth
        };
        var sparklineContainer = document.createElement('div');
        new sparkline_1.default(sparklineContainer, sparklineOptions);
        return $.fn.constructor('<div>')
            .css({
            height: sparklineElement.height
        }).append(sparklineContainer);
    }
    createDataElement(textElement) {
        var elementText = textElement.getText(this.data);
        let elementCssProperties = _cssHelper_1.getEmptyCssPropertyWrappersArray();
        var elementDiv = $.fn.constructor('<div>')
            .addClass(_css_class_names_1.layoutCardCssClassNames.rowElement)
            .text(elementText);
        this.setElementColor(textElement, elementDiv, elementCssProperties);
        let cssClassName = _css_class_names_1.layoutCardCssClassNames.rowElement + '-' + this.data.getKpiElementId() + '-' + textElement.id;
        if (!this.layout.hasRowElementCssClass(cssClassName)) {
            elementCssProperties.push(_cssHelper_1.createCssPropertyWrapper('font-family', textElement.fontFamily));
            elementCssProperties.push(_cssHelper_1.createCssPropertyWrapper('font-size', textElement.fontSize + 'pt'));
            let cssSelector = '.' + _css_class_names_1.layoutCardCssClassNames.content + ' .' + _css_class_names_1.layoutCardCssClassNames.rowElement + '.' + cssClassName;
            this.layout.addRowElementCss(cssClassName, cssSelector, elementCssProperties);
        }
        elementDiv.addClass(cssClassName);
        var textDiv = document.createElement('div');
        textDiv.innerText = elementText;
        elementDiv.append(textDiv);
        let styleSettings = textElement.getStyleSettings(this.data);
        if (styleSettings)
            this._styleSettingsProvider.applyStyleSettings(elementDiv[0], null, styleSettings, false, null, true, false);
        new tooltip_1.default(textDiv, {
            container: this.controlContainer,
            target: elementDiv.get(0),
            showEvent: { name: 'mouseenter', delay: 800 },
            hideEvent: 'mouseleave'
        });
        return elementDiv;
    }
    setElementColor(element, elementDiv, elementProperties) {
        if (element.predefinedColor !== 'NotSet') {
            switch (element.predefinedColor) {
                case 'Main':
                    elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType(null, null, true));
                    break;
                case 'Neutral':
                    elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType());
                    break;
                case 'Bad':
                    elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType('down', false));
                    break;
                case 'Good':
                    elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType('up', true));
                    break;
                case 'Warning':
                    elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType('warning'));
                    break;
                case 'Delta':
                    elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType(element.getIndicatorType(this.data), element.getIsGood(this.data)));
                    break;
            }
        }
        else if (element.color) {
            elementProperties.push(_cssHelper_1.createCssPropertyWrapper('color', element.color));
        }
        else {
            elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType(null, null, true));
        }
    }
}
exports.cardPainter = cardPainter;


/***/ }),

/***/ 52920:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardVirtualizationController = void 0;
const _new_card_item_1 = __webpack_require__(64174);
class CardVirtualizationController {
    constructor(table, scrollView) {
        this.table = table;
        this.scrollView = scrollView;
        scrollView.option('onScroll', (args) => { this.onScroll(args); });
    }
    init(cardArrangements, drawHandler) {
        this.drawHandler = drawHandler;
        this.cardArrangements = cardArrangements;
    }
    drawByScroll(offset) {
        var arrangements = this.cardArrangements;
        if (arrangements) {
            var top = offset;
            var bottom = offset + arrangements.viewerHeight;
            var topRowIndex = Math.floor(top / arrangements.cellHeight);
            var bottomRowIndex = Math.ceil(bottom / arrangements.cellHeight);
            var startCardIndex = Math.max(0, topRowIndex * arrangements.columnCount - arrangements.columnCount * 3);
            var endCardIndex = Math.min(arrangements.itemsCount - 1, (bottomRowIndex * arrangements.columnCount) - 1 + arrangements.columnCount * 3);
            this.drawHandler(startCardIndex, endCardIndex);
        }
    }
    onScroll(args) {
        var that = this;
        clearTimeout(this.scrollTimeout);
        this.scrollTimeout = window.setTimeout(() => {
            that.drawByScroll(args.scrollOffset.top);
        }, 100);
    }
    getSizeParams() {
        var scrollOffset = this.scrollView.scrollOffset();
        return {
            virtualSize: {
                width: this.cardArrangements.getScrollableWidth(),
                height: this.cardArrangements.getScrollableHeight()
            },
            scroll: {
                top: scrollOffset.top,
                left: scrollOffset.left,
                size: 0,
                horizontal: this.cardArrangements.hasHorizontalScroll(),
                vertical: this.cardArrangements.hasVerticalScroll()
            },
            itemMargin: {
                width: 5,
                height: 5
            },
            layoutMeasurement: {
                margin: _new_card_item_1.newCardMeasurements.margin,
                contentPadding: _new_card_item_1.newCardMeasurements.padding
            }
        };
    }
    updateScrollableContent(action) {
        var scrollOffset = this.scrollView.scrollOffset();
        action();
        this.scrollView.scrollTo(scrollOffset);
        this.drawByScroll(scrollOffset.top);
    }
}
exports.CardVirtualizationController = CardVirtualizationController;


/***/ }),

/***/ 86909:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardsViewer = void 0;
const scroll_view_1 = __webpack_require__(45664);
const $ = __webpack_require__(65311);
const _jquery_helpers_1 = __webpack_require__(59384);
const _css_class_names_1 = __webpack_require__(28490);
const _widgets_viewer_base_1 = __webpack_require__(54564);
const _arrangement_strategy_1 = __webpack_require__(49172);
const _card_arrangement_table_generator_1 = __webpack_require__(22439);
const _card_virtualization_controller_1 = __webpack_require__(52920);
const _new_card_item_1 = __webpack_require__(64174);
var viewerCount = 0;
class CardsViewer extends _widgets_viewer_base_1.WidgetsViewerBase {
    constructor(element, options) {
        super(element, options);
    }
    get _styleSettingsProvider() {
        return this.option('styleSettingsProvider');
    }
    redraw() {
        this._render();
    }
    _getDefaultOptions() {
        return {};
    }
    getSelectedItems() {
        return this.itemsList.filter(item => item.selected());
    }
    clearSelections() {
        this.itemsList.forEach(item => item.clearSelection());
    }
    getSizeParams() {
        return this.virtualizer.getSizeParams();
    }
    clear() {
        this.container.remove();
    }
    dispose() {
        super.dispose();
        (this.itemsList || []).forEach(item => item.dispose());
        this.clear();
    }
    _init() {
        this._viewerID = viewerCount++;
        this.tableStruct = $.fn.constructor('<div>', { 'class': _css_class_names_1.cssClassNames.widgetViewerTable + ' ' + _css_class_names_1.cssClassNames.widgetViewerIdPrefix + this._viewerID });
        this.initContainer();
        this.container.append(this.tableStruct);
        this.container.addClass(_css_class_names_1.cssClassNames.widgetViewerContainer);
        var scrollView = new scroll_view_1.default(_jquery_helpers_1.$unwrap(this.container), {
            direction: 'both',
            showScrollbar: 'onHover'
        });
        this.virtualizer = new _card_virtualization_controller_1.CardVirtualizationController(this.tableStruct, scrollView);
        this.createItems();
        this.createArranger();
        this._render();
    }
    _update() {
        this.createItems();
        this.createArranger();
        this._render();
    }
    initContainer() {
        this.container = $.fn.constructor('<div>').appendTo(_jquery_helpers_1.$wrap(this.element()));
        this.container.addClass(_css_class_names_1.layoutCardCssClassNames.cardScrollableHolder);
    }
    createItems() {
        var that = this, data = that.option('dataSource');
        var viewer = this.option('viewer');
        var clickHandler = viewer.onclick, hoverHandler = viewer.onhover, controlContainer = viewer.controlContainer;
        that.itemsList = [];
        data.forEach((dataItem, index) => {
            that.itemsList.push(new _new_card_item_1.newCardItem(dataItem, index, { clickHandler, hoverHandler, controlContainer }));
        });
    }
    _render(drawOptions) {
        this.virtualizer.updateScrollableContent(() => {
            this.invalidateContent();
            this.drawCards();
        });
    }
    invalidateContent() {
        this.createItems();
        this.tableStruct.empty();
    }
    drawCards() {
        var parentWidth = this.container.width();
        var parentHeight = this.container.height();
        var layouts = this._option.itemOptions.layouts;
        var ignorePadding = this._option.viewer.ignorePadding;
        var cardArrangements = this.arranger.arrange(parentHeight, parentWidth, this.itemsList.length, layouts, ignorePadding);
        this.tableGenerator = new _card_arrangement_table_generator_1.cardArrangementTableGenerator();
        this.tableGenerator.generateTable(this.tableStruct, cardArrangements);
        this.virtualizer.init(cardArrangements, (startIndex, endIndex) => { this.drawCardsByIndices(startIndex, endIndex); });
    }
    drawCardsByIndices(startIndex, endIndex) {
        this.tableGenerator.drawCellContent(startIndex, endIndex, (container, cardArrangements, index) => {
            return this.itemsList[index].draw(container, cardArrangements, this._styleSettingsProvider);
        });
    }
    createArranger() {
        var viewerOptions = this.option('viewer');
        var method = viewerOptions.method;
        var count = viewerOptions.count;
        if (this.shouldRecreateArranger(method, count))
            this.arranger = _arrangement_strategy_1.ArrangementStrategy.createInstance(method, count);
    }
    shouldRecreateArranger(newArrangement, lineCount) {
        if (this.arranger != null) {
            let currentArrangement = this.arranger.getArrangeMethod();
            if (currentArrangement === 'auto')
                return newArrangement !== 'auto';
            else
                return newArrangement !== currentArrangement || this.arranger.getLineCount() !== lineCount;
        }
        return true;
    }
}
exports.CardsViewer = CardsViewer;


/***/ }),

/***/ 64174:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.newCardItem = exports.newCardMeasurements = void 0;
const _css_class_names_1 = __webpack_require__(28490);
const _card_painter_1 = __webpack_require__(57774);
exports.newCardMeasurements = {
    margin: 3,
    padding: 10,
    borderWidth: 1
};
class newCardItem {
    constructor(properties, cardIndex, viewerOptions) {
        this.properties = properties;
        this.cardPainter = new _card_painter_1.cardPainter(properties.dataAccessor, viewerOptions.controlContainer);
        this.clickHandler = viewerOptions.clickHandler;
        this.hoverHandler = viewerOptions.hoverHandler;
        this.index = cardIndex;
        this.tag = properties.tag;
    }
    dispose() {
        if (this.itemDiv) {
            this.itemDiv.remove();
            this.itemDiv = null;
        }
    }
    selected() {
        return this.properties.isSelected;
    }
    setHoverEnabledState(hoverEnabled) {
        this.properties.hoverEnabled = hoverEnabled;
    }
    draw(container, cardArrangements, styleSettingsProvider) {
        if (!this.itemDiv) {
            var element = this.cardPainter.draw(cardArrangements, this.properties.layout, styleSettingsProvider);
            this.itemDiv = element;
            container.append(element);
            this.afterDraw();
        }
        return this.itemDiv;
    }
    clearSelection() {
        this.properties.isSelected = false;
        if (this.itemDiv) {
            this.itemDiv.removeClass(_css_class_names_1.cssClassNames.selectedItem);
        }
    }
    select() {
        this.properties.isSelected = true;
        if (this.itemDiv) {
            this.itemDiv.addClass(_css_class_names_1.cssClassNames.selectedItem);
        }
    }
    hover(isHover) {
        if (this.properties.hoverEnabled) {
            if (isHover) {
                this.itemDiv.addClass(_css_class_names_1.cssClassNames.hoveredItem);
            }
            else {
                this.itemDiv.removeClass(_css_class_names_1.cssClassNames.hoveredItem);
            }
        }
    }
    setClickHandler() {
        var that = this;
        if (typeof that.clickHandler === 'function' && that.itemDiv) {
            that.itemDiv.off('click.cardItem');
            that.itemDiv.on('click.cardItem', function () {
                that.clickHandler.call(null, { item: that });
            });
        }
    }
    setHoverHandler() {
        var that = this;
        if (that.itemDiv) {
            that.itemDiv.mouseenter(function () {
                that.hover(true);
                if (typeof that.hoverHandler === 'function') {
                    that.hoverHandler.call(null, { item: that, state: true });
                }
            }).mouseleave(function () {
                that.hover(false);
                if (typeof that.hoverHandler === 'function') {
                    that.hoverHandler.call(null, { item: that, state: false });
                }
            });
        }
    }
    afterDraw() {
        this.setClickHandler();
        this.setHoverHandler();
        this.applyExtraStyles();
    }
    applyExtraStyles() {
        this.properties.isSelected ? this.select() : this.clearSelection();
    }
}
exports.newCardItem = newCardItem;


/***/ }),

/***/ 34024:
/***/ ((module) => {

module.exports = DevExpress;

/***/ }),

/***/ 16835:
/***/ ((module) => {

module.exports = DevExpress.Analytics.Criteria;

/***/ }),

/***/ 26484:
/***/ ((module) => {

module.exports = DevExpress.Analytics.Criteria.Utils;

/***/ }),

/***/ 14376:
/***/ ((module) => {

module.exports = DevExpress.Analytics.Data;

/***/ }),

/***/ 19745:
/***/ ((module) => {

module.exports = DevExpress.Analytics.Internal;

/***/ }),

/***/ 23133:
/***/ ((module) => {

module.exports = DevExpress.Analytics.Localization;

/***/ }),

/***/ 25733:
/***/ ((module) => {

module.exports = DevExpress.Analytics.Utils;

/***/ }),

/***/ 30010:
/***/ ((module) => {

module.exports = DevExpress.Analytics.Widgets;

/***/ }),

/***/ 86092:
/***/ ((module) => {

module.exports = DevExpress.Analytics.Widgets.Internal;

/***/ }),

/***/ 72652:
/***/ ((module) => {

module.exports = DevExpress.Analytics.Wizard;

/***/ }),

/***/ 44009:
/***/ ((module) => {

module.exports = DevExpress.Analytics.Wizard.Internal;

/***/ }),

/***/ 31564:
/***/ ((module) => {

module.exports = DevExpress.QueryBuilder.Utils;

/***/ }),

/***/ 44478:
/***/ ((module) => {

module.exports = DevExpress.QueryBuilder.Widgets.Internal;

/***/ }),

/***/ 17918:
/***/ ((module) => {

module.exports = DevExpress.RichEdit;

/***/ }),

/***/ 72858:
/***/ ((module) => {

module.exports = DevExpress.data.utils;

/***/ }),

/***/ 68396:
/***/ ((module) => {

module.exports = DevExpress.events;

/***/ }),

/***/ 64485:
/***/ ((module) => {

module.exports = DevExpress.events.utils;

/***/ }),

/***/ 48183:
/***/ ((module) => {

module.exports = DevExpress.integration;

/***/ }),

/***/ 82914:
/***/ ((module) => {

module.exports = DevExpress.localization;

/***/ }),

/***/ 84348:
/***/ ((module) => {

module.exports = DevExpress.registerComponent;

/***/ }),

/***/ 72665:
/***/ ((module) => {

module.exports = DevExpress.ui.CollectionWidget;

/***/ }),

/***/ 31745:
/***/ ((module) => {

module.exports = DevExpress.ui.dialog;

/***/ }),

/***/ 85789:
/***/ ((module) => {

module.exports = DevExpress.utils.console;

/***/ }),

/***/ 36306:
/***/ ((module) => {

module.exports = DevExpress.utils.string;

/***/ }),

/***/ 6925:
/***/ ((module) => {

module.exports = DevExpress.utils.support;

/***/ }),

/***/ 90056:
/***/ ((module) => {

module.exports = DevExpress.viz;

/***/ }),

/***/ 1044:
/***/ ((module) => {

module.exports = DevExpress.viz._dashboard;

/***/ }),

/***/ 66681:
/***/ ((module) => {

module.exports = DevExpress.viz.map;

/***/ }),

/***/ 65311:
/***/ ((module) => {

module.exports = jQuery;

/***/ }),

/***/ 71032:
/***/ ((module) => {

module.exports = ko;

/***/ }),

/***/ 30867:
/***/ ((module) => {

module.exports = { default: DevExpress.Class };

/***/ }),

/***/ 43150:
/***/ ((module) => {

module.exports = { default: DevExpress.Color };

/***/ }),

/***/ 71761:
/***/ ((module) => {

module.exports = { default: DevExpress.DOMComponent };

/***/ }),

/***/ 39662:
/***/ ((module) => {

module.exports = { default: DevExpress.config };

/***/ }),

/***/ 79322:
/***/ ((module) => {

module.exports = { default: DevExpress.data.ArrayStore };

/***/ }),

/***/ 5773:
/***/ ((module) => {

module.exports = { default: DevExpress.data.CustomStore };

/***/ }),

/***/ 47545:
/***/ ((module) => {

module.exports = { default: DevExpress.data.DataSource };

/***/ }),

/***/ 23570:
/***/ ((module) => {

module.exports = { default: DevExpress.data.PivotGridDataSource };

/***/ }),

/***/ 38218:
/***/ ((module) => {

module.exports = { default: DevExpress.data.query };

/***/ }),

/***/ 52562:
/***/ ((module) => {

module.exports = { default: DevExpress.devices };

/***/ }),

/***/ 79876:
/***/ ((module) => {

module.exports = { default: DevExpress.formatHelper };

/***/ }),

/***/ 76036:
/***/ ((module) => {

module.exports = { default: DevExpress.fx };

/***/ }),

/***/ 41561:
/***/ ((module) => {

module.exports = { default: DevExpress.localization.date };

/***/ }),

/***/ 74958:
/***/ ((module) => {

module.exports = { default: DevExpress.localization.number };

/***/ }),

/***/ 89380:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.Widget };

/***/ }),

/***/ 89873:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxAccordion };

/***/ }),

/***/ 68203:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxButton };

/***/ }),

/***/ 11953:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxButtonGroup };

/***/ }),

/***/ 29928:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxCalendar };

/***/ }),

/***/ 21523:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxCheckBox };

/***/ }),

/***/ 68408:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxDataGrid };

/***/ }),

/***/ 66417:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxDateBox };

/***/ }),

/***/ 83160:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxForm };

/***/ }),

/***/ 13052:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxList };

/***/ }),

/***/ 53158:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxNumberBox };

/***/ }),

/***/ 71996:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxOverlay };

/***/ }),

/***/ 99578:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxPivotGrid };

/***/ }),

/***/ 31580:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxPopover };

/***/ }),

/***/ 26519:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxPopup };

/***/ }),

/***/ 7096:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxRadioGroup };

/***/ }),

/***/ 45664:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxScrollView };

/***/ }),

/***/ 76420:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxSelectBox };

/***/ }),

/***/ 8520:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxTagBox };

/***/ }),

/***/ 7559:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxTextBox };

/***/ }),

/***/ 23613:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxTileView };

/***/ }),

/***/ 70655:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxToast };

/***/ }),

/***/ 23853:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxToolbar };

/***/ }),

/***/ 87441:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxTooltip };

/***/ }),

/***/ 79352:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxTreeList };

/***/ }),

/***/ 93966:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxTreeView };

/***/ }),

/***/ 90286:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.dxValidator };

/***/ }),

/***/ 84201:
/***/ ((module) => {

module.exports = { default: DevExpress.ui.themes };

/***/ }),

/***/ 77856:
/***/ ((module) => {

module.exports = { default: DevExpress.utils.browser };

/***/ }),

/***/ 31703:
/***/ ((module) => {

module.exports = { default: DevExpress.utils.date };

/***/ }),

/***/ 21803:
/***/ ((module) => {

module.exports = { default: DevExpress.utils.resizeCallbacks };

/***/ }),

/***/ 9496:
/***/ ((module) => {

module.exports = { default: DevExpress.validationEngine };

/***/ }),

/***/ 21420:
/***/ ((module) => {

module.exports = { default: DevExpress.viz.dxBullet };

/***/ }),

/***/ 56319:
/***/ ((module) => {

module.exports = { default: DevExpress.viz.dxChart };

/***/ }),

/***/ 2437:
/***/ ((module) => {

module.exports = { default: DevExpress.viz.dxCircularGauge };

/***/ }),

/***/ 62723:
/***/ ((module) => {

module.exports = { default: DevExpress.viz.dxLinearGauge };

/***/ }),

/***/ 44655:
/***/ ((module) => {

module.exports = { default: DevExpress.viz.dxPieChart };

/***/ }),

/***/ 15781:
/***/ ((module) => {

module.exports = { default: DevExpress.viz.dxRangeSelector };

/***/ }),

/***/ 37827:
/***/ ((module) => {

module.exports = { default: DevExpress.viz.dxSparkline };

/***/ }),

/***/ 46253:
/***/ ((module) => {

module.exports = { default: DevExpress.viz.dxTreeMap };

/***/ }),

/***/ 86588:
/***/ ((module) => {

module.exports = { default: DevExpress.viz.dxVectorMap };

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__(66082);
/******/ 	
/******/ })()
;