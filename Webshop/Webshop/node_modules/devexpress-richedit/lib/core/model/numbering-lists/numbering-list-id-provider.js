"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractNumberingListIdProvider = exports.NumberingListIdProvider = exports.ListIdProviderBase = void 0;
var tslib_1 = require("tslib");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var ListIdProviderBase = (function () {
    function ListIdProviderBase(documentModel) {
        this.documentModel = documentModel;
        this.lastId = 0;
    }
    ListIdProviderBase.prototype.getMap = function () {
        if (!this.map) {
            this.map = {};
            for (var i = 0, list; list = this.getLists()[i]; i++)
                this.map[list.innerId] = true;
        }
        return this.map;
    };
    ListIdProviderBase.prototype.getNextId = function () {
        var map = this.getMap();
        do {
            this.lastId++;
        } while (map[this.lastId]);
        map[this.lastId] = true;
        return this.lastId;
    };
    return ListIdProviderBase;
}());
exports.ListIdProviderBase = ListIdProviderBase;
var NumberingListIdProvider = (function (_super) {
    tslib_1.__extends(NumberingListIdProvider, _super);
    function NumberingListIdProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NumberingListIdProvider.prototype.getLists = function () {
        return this.documentModel.numberingLists;
    };
    NumberingListIdProvider.prototype.clone = function (model) {
        var result = new NumberingListIdProvider(model);
        result.map = number_1.NumberMapUtils.shallowCopy(this.map);
        return result;
    };
    return NumberingListIdProvider;
}(ListIdProviderBase));
exports.NumberingListIdProvider = NumberingListIdProvider;
var AbstractNumberingListIdProvider = (function (_super) {
    tslib_1.__extends(AbstractNumberingListIdProvider, _super);
    function AbstractNumberingListIdProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbstractNumberingListIdProvider.prototype.getLists = function () {
        return this.documentModel.abstractNumberingLists;
    };
    AbstractNumberingListIdProvider.prototype.clone = function (model) {
        var result = new AbstractNumberingListIdProvider(model);
        result.map = number_1.NumberMapUtils.shallowCopy(this.map);
        return result;
    };
    return AbstractNumberingListIdProvider;
}(ListIdProviderBase));
exports.AbstractNumberingListIdProvider = AbstractNumberingListIdProvider;
