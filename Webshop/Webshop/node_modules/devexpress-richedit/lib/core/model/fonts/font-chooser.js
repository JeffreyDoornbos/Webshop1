"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FontChooser = void 0;
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var list_1 = require("@devexpress/utils/lib/utils/list");
var FontChooser = (function () {
    function FontChooser(fontInfoCache) {
        this.fontInfoCache = fontInfoCache;
    }
    FontChooser.isGenericFamily = function (family) {
        return !!FontChooser.genericFontFamilies[family];
    };
    FontChooser.prototype.chooseByCssString = function (cssString) {
        var cssFontFamilies = dom_1.DomUtils.getFontFamiliesFromCssString(cssString);
        if (cssFontFamilies.length == 0)
            return null;
        if (cssFontFamilies.length == 1 && FontChooser.isGenericFamily(cssFontFamilies[0]))
            return this.chooseGenericFont[cssFontFamilies[0]];
        var nameToFontInfosMap = {};
        this.fontInfoCache.forEach(function (fontInfo) {
            var fontFamilies = fontInfo.getFontFamilies();
            for (var index = 0; index < fontFamilies.length; index++) {
                var fontFamily = fontFamilies[index];
                if (!FontChooser.isGenericFamily(fontFamily)) {
                    var items = nameToFontInfosMap[fontFamily] || (nameToFontInfosMap[fontFamily] = {});
                    items[index] = fontInfo;
                }
            }
        });
        for (var _i = 0, cssFontFamilies_1 = cssFontFamilies; _i < cssFontFamilies_1.length; _i++) {
            var cssFontFamily = cssFontFamilies_1[_i];
            var priorityToFontInfoMap = nameToFontInfosMap[cssFontFamily];
            if (priorityToFontInfoMap) {
                var hightPriority = Object.keys(priorityToFontInfoMap)[0];
                return priorityToFontInfoMap[hightPriority];
            }
        }
        return null;
    };
    FontChooser.prototype.chooseGenericFont = function (fontFamily) {
        var genericFontFamily = FontChooser.genericFontFamilies[fontFamily];
        if (!fontFamily)
            return null;
        var foundByDirectName = this.fontInfoCache.findItemByPredicate(function (fontInfo) {
            return list_1.ListUtils.unsafeAnyOf(fontInfo.getFontFamilies(), function (fam) { return fam == genericFontFamily; });
        });
        if (foundByDirectName)
            return foundByDirectName;
        var foundByGenericName = this.fontInfoCache.findItemByPredicate(function (fontInfo) {
            return list_1.ListUtils.unsafeAnyOf(fontInfo.getFontFamilies(), function (fam) { return fam == fontFamily; });
        });
        if (foundByGenericName)
            return foundByGenericName;
        return null;
    };
    FontChooser.genericFontFamilies = {
        "serif": "Times New Roman",
        "sans-serif": "Arial",
        "cursive": "Comic Sans MS",
        "fantasy": "Comic Sans MS",
        "monospace": "Courier New",
    };
    return FontChooser;
}());
exports.FontChooser = FontChooser;
