"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubDocumentCollection = void 0;
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var SubDocumentCollection = (function () {
    function SubDocumentCollection() {
        this._collection = {};
        this._filteredCollection = null;
    }
    Object.defineProperty(SubDocumentCollection.prototype, "filteredCollection", {
        get: function () {
            var _a;
            return (_a = this._filteredCollection) !== null && _a !== void 0 ? _a : (this._filteredCollection = number_1.NumberMapUtils.reducedMap(this._collection, function (subDoc, _) { return subDoc.isDeleted ? null : subDoc; }));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubDocumentCollection.prototype, "collection", {
        get: function () {
            return this._collection;
        },
        enumerable: false,
        configurable: true
    });
    SubDocumentCollection.prototype.add = function (subDocument) {
        this._collection[subDocument.id] = subDocument;
        this._filteredCollection = null;
    };
    SubDocumentCollection.prototype.delete = function (subDocumentId) {
        this._collection[subDocumentId].isDeleted = true;
        this._filteredCollection = null;
    };
    SubDocumentCollection.prototype.replace = function (subDocumentId, replacedWithSubDocId) {
        var subDoc = this._collection[subDocumentId];
        subDoc.isDeleted = true;
        subDoc.replacedWithSubDocId = replacedWithSubDocId;
        this._filteredCollection = null;
    };
    SubDocumentCollection.prototype.restore = function (subDocumentId) {
        this._collection[subDocumentId].isDeleted = false;
        this._filteredCollection = null;
    };
    SubDocumentCollection.prototype.clone = function (model) {
        var newCollection = new SubDocumentCollection();
        for (var key in this._collection) {
            if (Object.prototype.hasOwnProperty.call(this._collection, key)) {
                var subDocument = this._collection[key];
                newCollection.add(subDocument.clone(model));
            }
        }
        return newCollection;
    };
    return SubDocumentCollection;
}());
exports.SubDocumentCollection = SubDocumentCollection;
